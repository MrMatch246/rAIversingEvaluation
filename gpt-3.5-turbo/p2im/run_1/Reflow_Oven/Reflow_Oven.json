{
    "functions": {
        "FUN_0800010c": {
            "additional_data": {
                "DAT_20000160": {
                    "1": "flag_value",
                    "14": "flag",
                    "4": "flag_variable"
                },
                "FUN_0800010c": {
                    "1": "update_flag_if_unset",
                    "2": "initialize_flag_if_not_set",
                    "20": "initialize_flag",
                    "3": "set_flag_if_unset"
                },
                "param_1": {
                    "1": "status",
                    "10": "input",
                    "12": "input_value",
                    "2": "input_parameter",
                    "5": "input_param"
                }
            },
            "called": [
                "FUN_08007328"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initialize_flag_0800010c(undefined4 input_value)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_0800010c",
            "entrypoint": "0x0800010c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000178": {
            "additional_data": {
                "FUN_08000178": {
                    "1": "calc_string_length",
                    "18": "find_end_of_string",
                    "2": "get_string_length",
                    "6": "find_string_length"
                },
                "cVar1": {
                    "1": "curr_char",
                    "13": "current_char",
                    "2": "current_value",
                    "3": "current_character_value",
                    "5": "current_character"
                },
                "param_1": {
                    "11": "string",
                    "14": "input_string",
                    "6": "str"
                },
                "pcVar2": {
                    "1": "next_chr_ptr",
                    "10": "next_char",
                    "2": "next_character_ptr",
                    "3": "next_char_ptr",
                    "8": "next_character"
                },
                "pcVar3": {
                    "1": "ptr_char",
                    "2": "current_character_ptr",
                    "3": "current_char_ptr",
                    "6": "current_character",
                    "8": "current_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "current_name": "find_end_of_string_08000178",
            "entrypoint": "0x08000178",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "cVar1": "current_char",
                "param_1": "input_string",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000190": {
            "additional_data": {
                "FUN_08000190": {
                    "1": "perform_operation",
                    "3": "calculate_result",
                    "4": "reverse_bits",
                    "8": "calculate"
                },
                "bVar13": {
                    "1": "flag_a",
                    "3": "is_equal",
                    "5": "flag1",
                    "7": "condition1"
                },
                "bVar14": {
                    "1": "condition",
                    "2": "is_condition_met",
                    "5": "flag2",
                    "7": "condition2"
                },
                "bVar15": {
                    "1": "is_borrow",
                    "2": "is_negative",
                    "5": "condition3"
                },
                "bVar2": {
                    "1": "carry_bit",
                    "2": "temp2"
                },
                "iVar1": {
                    "1": "shift_amount1",
                    "2": "temp_1"
                },
                "iVar8": {
                    "1": "temp_var6",
                    "2": "temp5",
                    "3": "shift_amount"
                },
                "param_1": {
                    "1": "input_param_1",
                    "18": "input1",
                    "2": "x",
                    "3": "input_a",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "18": "input2",
                    "2": "y",
                    "3": "input_b",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "quotient",
                    "18": "input3",
                    "2": "z",
                    "3": "input_c",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "18": "input4",
                    "2": "w",
                    "3": "input_d",
                    "5": "input_4"
                },
                "uVar1": {
                    "1": "modified_input_4"
                },
                "uVar10": {
                    "1": "temp_var_10",
                    "2": "temp4",
                    "4": "temp8"
                },
                "uVar11": {
                    "1": "modified_c",
                    "2": "temp3",
                    "4": "temp9"
                },
                "uVar12": {
                    "1": "result4",
                    "2": "temp4",
                    "4": "temp10"
                },
                "uVar16": {
                    "1": "temp1"
                },
                "uVar17": {
                    "1": "temp2"
                },
                "uVar18": {
                    "1": "temp3"
                },
                "uVar19": {
                    "1": "temp4"
                },
                "uVar2": {
                    "1": "modified_input_2"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "2": "temp3",
                    "7": "temp1"
                },
                "uVar4": {
                    "1": "normalized_sum",
                    "2": "temp4",
                    "6": "temp2"
                },
                "uVar5": {
                    "1": "u_add1",
                    "2": "temp_2",
                    "6": "temp3"
                },
                "uVar6": {
                    "1": "result_2",
                    "2": "temp6",
                    "3": "temp1",
                    "4": "temp4"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "temp3",
                    "3": "temp2",
                    "4": "temp5"
                },
                "uVar8": {
                    "1": "temp_5"
                },
                "uVar9": {
                    "1": "temp3",
                    "2": "temp9",
                    "3": "shifted_input2",
                    "4": "temp7"
                }
            },
            "called": [],
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "code": "\nulonglong calculate_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift_amount;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  uint temp10;\n  bool condition1;\n  bool condition2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  temp7 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (temp7 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shift_amount = (int)temp7 >> 0x15;\n  if (!condition2) {\n    condition2 = shift_amount == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift_amount == -1 || shift1 == -1) {\n      temp7 = temp4;\n      temp9 = input3;\n      if (shift_amount == -1) {\n        temp7 = input2;\n        temp9 = input1;\n      }\n      if (shift_amount != -1 || shift1 != -1) {\n        input3 = temp9;\n        temp4 = temp7;\n      }\n      condition2 = (temp9 | temp7 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp7 == temp4;\n      }\n      if (!condition2) {\n        temp7 = temp7 | 0x80000;\n      }\n      return CONCAT44(temp7,temp9);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp7 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (temp7 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (temp7 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp7 = temp7 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp9 = input4 - temp7;\n  condition2 = temp9 != 0;\n  if (input4 < temp7) {\n    temp9 = -temp9;\n  }\n  temp8 = input1;\n  temp5 = input2;\n  if (condition2 && temp7 <= input4) {\n    temp7 = temp7 + temp9;\n    temp8 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp9) {\n    return CONCAT44(temp5,temp8);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    condition2 = temp8 != 0;\n    temp8 = -temp8;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)condition2;\n  }\n  if (temp7 == temp9) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp7 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp7 = 1;\n    }\n    else {\n      temp9 = temp9 - 1;\n    }\n  }\n  temp4 = -temp9 + 0x20;\n  if ((int)temp9 < 0x21) {\n    temp10 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp9 & 0xff);\n    temp1 = temp8 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp8,input3) + ((int)temp5 >> (temp9 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp10 = temp5 << (-temp9 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp10 = temp10 | 2;\n    }\n    temp5 = (int)temp5 >> (temp9 - 0x20 & 0xff);\n    temp4 = temp8 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp8,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp9 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = temp10 == 0;\n    temp10 = -temp10;\n    temp9 = -temp4;\n    temp4 = -(uint)!condition2 - temp4;\n    temp9 = -(uint)(condition2 <= temp9) - temp2;\n  }\n  if (0xfffff < temp9) {\n    temp8 = temp7 - 1;\n    if (0x1fffff < temp9) {\n      temp8 = temp9 & 1;\n      temp9 = temp9 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(temp8 != 0) << 0x1f | temp4 >> 1;\n      temp10 = (uint)(carry & 1) << 0x1f | temp10 >> 1;\n      temp8 = temp7;\n      if (0xffbfffff < temp7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition2 = 0x7fffffff < temp10;\n    if (temp10 == 0x80000000) {\n      condition2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp9 + temp8 * 0x100000 + (uint)CARRY4(temp4,(uint)condition2) | input2,\n                    temp4 + condition2);\n  }\n  condition1 = (temp10 & 0x80000000) != 0;\n  temp10 = temp10 << 1;\n  temp8 = temp4 * 2;\n  condition2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)condition1;\n  temp9 = temp9 * 2 + (uint)(condition2 || CARRY4(temp8,(uint)condition1));\n  temp8 = temp7 - 2;\n  if ((temp9 & 0x100000) != 0) goto LAB_080002a0;\n  temp5 = temp4;\n  temp7 = temp9;\n  if (temp9 == 0) {\n    temp5 = 0;\n    temp7 = temp4;\n  }\n  shift_amount = LZCOUNT(temp7);\n  if (temp9 == 0) {\n    shift_amount = shift_amount + 0x20;\n  }\n  temp9 = shift_amount - 0xb;\n  flag3 = SBORROW4(temp9,0x20);\n  temp4 = shift_amount - 0x2b;\n  condition2 = (int)temp4 < 0;\n  condition1 = temp4 == 0;\n  if ((int)temp9 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    shift_amount = shift_amount + -0x1f;\n    condition2 = shift_amount < 0;\n    condition1 = shift_amount == 0;\n    temp4 = temp9;\n    if (!condition1 && condition2 == flag3) {\n      temp5 = temp7 << (temp9 & 0xff);\n      temp7 = temp7 >> (0xcU - shift_amount & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (condition1 || condition2 != flag3) {\n    temp10 = 0x20 - temp4;\n  }\n  temp7 = temp7 << (temp4 & 0xff);\n  if (condition1 || condition2 != flag3) {\n    temp7 = temp7 | temp5 >> (temp10 & 0xff);\n  }\n  if (condition1 || condition2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp9 <= (int)temp8) {\n    return CONCAT44(temp7 + (temp8 - temp9) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(temp8 - temp9);\n  if ((int)temp4 < 0x1f) {\n    shift_amount = temp4 - 0x13;\n    if (shift_amount != 0 && shift_amount < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift_amount) & 0xff) | temp7 << (0xcU - shift_amount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | temp7 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | temp7 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,temp7 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_08000190",
            "entrypoint": "0x08000190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000190": "calculate_08000190",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "flag3",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar8": "shift_amount",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "modified_input_4",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar9": "temp7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000194": {
            "additional_data": {
                "FUN_08000194": {
                    "1": "calculate_floating_point",
                    "2": "perform_arithmetic",
                    "8": "calculate_result"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "bVar13": {
                    "1": "is_equal_shifted_inputs",
                    "2": "is_zero1",
                    "4": "condition1",
                    "8": "is_equal"
                },
                "bVar14": {
                    "1": "check_equal_shifted_inputs",
                    "2": "flag2",
                    "4": "condition2",
                    "7": "is_zero"
                },
                "bVar15": {
                    "1": "variable15",
                    "2": "flag3",
                    "3": "condition3",
                    "5": "is_negative"
                },
                "bVar2": {
                    "1": "variable2",
                    "13": "carry",
                    "2": "carry1",
                    "4": "carry_flag"
                },
                "iVar1": {
                    "1": "shift_amt1",
                    "2": "shifted_input2",
                    "6": "shift1"
                },
                "iVar6": {
                    "1": "shifted_input_2_value",
                    "2": "shift_amount",
                    "6": "shift2"
                },
                "param_1": {
                    "1": "dividend1",
                    "16": "input1",
                    "2": "operand1",
                    "3": "input_1",
                    "4": "num1"
                },
                "param_2": {
                    "1": "dividend2",
                    "16": "input2",
                    "2": "b",
                    "3": "input_2",
                    "4": "num2"
                },
                "param_3": {
                    "1": "divisor1",
                    "16": "input3",
                    "2": "operand3",
                    "3": "input_3",
                    "4": "num3"
                },
                "param_4": {
                    "1": "divisor2",
                    "16": "input4",
                    "2": "operand4",
                    "3": "input_4",
                    "4": "num4"
                },
                "uVar1": {
                    "1": "result"
                },
                "uVar10": {
                    "1": "absolute_difference_between_shifted_inputs",
                    "2": "difference",
                    "3": "temp7"
                },
                "uVar11": {
                    "1": "u3",
                    "2": "temp4",
                    "3": "temp8"
                },
                "uVar12": {
                    "1": "result",
                    "2": "temp4",
                    "3": "temp9"
                },
                "uVar16": {
                    "1": "result1"
                },
                "uVar17": {
                    "1": "result2"
                },
                "uVar18": {
                    "1": "result3"
                },
                "uVar19": {
                    "1": "result4"
                },
                "uVar20": {
                    "1": "result5"
                },
                "uVar21": {
                    "1": "result6"
                },
                "uVar22": {
                    "1": "result7"
                },
                "uVar23": {
                    "1": "result8"
                },
                "uVar24": {
                    "1": "result9"
                },
                "uVar3": {
                    "1": "add1",
                    "3": "sum1",
                    "4": "result1",
                    "8": "temp1"
                },
                "uVar4": {
                    "1": "shifted_result1",
                    "3": "result2",
                    "8": "temp2"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp1",
                    "9": "temp3"
                },
                "uVar7": {
                    "1": "shifted_num3",
                    "2": "input2_shifted",
                    "3": "temp4",
                    "8": "shifted_input2"
                },
                "uVar8": {
                    "1": "variable8",
                    "2": "shifted_num4",
                    "3": "temp5",
                    "5": "shifted_input4"
                },
                "uVar9": {
                    "1": "result_temp",
                    "3": "temp6",
                    "4": "shifted_input4"
                }
            },
            "called": [],
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "code": "\nulonglong calculate_result_08000194(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint shifted_input4;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  temp7 = shifted_input4 - shifted_input2;\n  is_zero = temp7 != 0;\n  if (shifted_input4 < shifted_input2) {\n    temp7 = -temp7;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + temp7;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == temp7) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp9 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = input3 << (temp9 & 0xff);\n    input3 = input3 >> (temp7 & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + CARRY4(shifted_input4,input3) + ((int)temp3 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-temp7 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (temp7 - 0x20 & 0xff);\n    temp9 = shifted_input4 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_input4,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  temp7 = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp9;\n    temp9 = -(uint)!is_zero - temp9;\n    temp7 = -(uint)(is_zero <= temp7) - shifted_input4;\n  }\n  if (0xfffff < temp7) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < temp7) {\n      shifted_input4 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry = (byte)temp9;\n      temp9 = (uint)(shifted_input4 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry & 1) << 0x1f | temp8 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    is_zero = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      is_zero = (temp9 & 1) != 0;\n    }\n    return CONCAT44(temp7 + shifted_input4 * 0x100000 + (uint)CARRY4(temp9,(uint)is_zero) | input2,\n                    temp9 + is_zero);\n  }\n  is_equal = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  shifted_input4 = temp9 * 2;\n  is_zero = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)is_equal;\n  temp7 = temp7 * 2 + (uint)(is_zero || CARRY4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = temp9;\n  shifted_input2 = temp7;\n  if (temp7 == 0) {\n    temp3 = 0;\n    shifted_input2 = temp9;\n  }\n  shift2 = leading_zeros_count(shifted_input2);\n  if (temp7 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp9 = shift2 - 0xb;\n  is_negative = SBORROW4(temp9,0x20);\n  temp7 = shift2 - 0x2b;\n  is_zero = (int)temp7 < 0;\n  is_equal = temp7 == 0;\n  if ((int)temp9 < 0x20) {\n    is_negative = SCARRY4(temp7,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    temp7 = temp9;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (temp9 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp8 = 0x20 - temp7;\n  }\n  shifted_input2 = shifted_input2 << (temp7 & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp8 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (temp7 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp9 <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - temp9) * 0x100000 | input2,temp3);\n  }\n  temp7 = ~(shifted_input4 - temp9);\n  if ((int)temp7 < 0x1f) {\n    shift2 = temp7 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp7 - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp7 = temp7 + 1;\n    return CONCAT44(input2 | shifted_input2 >> (temp7 & 0xff),\n                    temp3 >> (temp7 & 0xff) | shifted_input2 << (0x20 - temp7 & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (temp7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_08000194",
            "entrypoint": "0x08000194",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000194": "calculate_result_08000194",
                "LZCOUNT": "leading_zeros_count",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800040c": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate_bits",
                    "2": "combine_result"
                },
                "FUN_0800040c": {
                    "1": "perform_operation",
                    "13": "reverse_bits",
                    "5": "shift_and_concat"
                },
                "LAB_08000318": {
                    "1": "end",
                    "2": "end_label",
                    "3": "shift_result"
                },
                "SBORROW4": {
                    "1": "is_subtraction_borrow"
                },
                "SCARRY4": {
                    "1": "is_subtraction_carry"
                },
                "bVar5": {
                    "1": "is_shift_negative",
                    "18": "is_negative",
                    "5": "is_less_than_zero",
                    "6": "is_negative_shift"
                },
                "bVar6": {
                    "1": "zero_shift",
                    "19": "is_zero",
                    "2": "is_equal_to_zero",
                    "6": "is_zero_shift"
                },
                "bVar7": {
                    "1": "has_carry",
                    "2": "overflow",
                    "3": "is_borrow",
                    "8": "is_overflow"
                },
                "iVar3": {
                    "1": "leading_zeroes",
                    "13": "leading_zeros",
                    "2": "num_bits",
                    "5": "count",
                    "6": "bit_count"
                },
                "in_r12": {
                    "1": "zero_shifts",
                    "14": "remaining_bits",
                    "4": "bit_mask"
                },
                "param_1": {
                    "1": "value",
                    "2": "input_number",
                    "22": "input",
                    "6": "input_value"
                },
                "uVar1": {
                    "1": "concatenated",
                    "11": "result",
                    "2": "shifted_bits",
                    "3": "result_high",
                    "4": "shifted_value",
                    "5": "result1"
                },
                "uVar2": {
                    "1": "num_shifts",
                    "15": "shift_amount",
                    "2": "shift_count",
                    "4": "result2"
                },
                "uVar4": {
                    "1": "num_bits",
                    "2": "adjusted_shift_amount",
                    "3": "total_bits",
                    "9": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "code": "\nulonglong reverse_bits_0800040c(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros + 0x15;\n  is_carry = is_subtraction_borrow(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_carry = is_subtraction_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_carry == false) {\n      result = input << shift_amount;\n      input = input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_result;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    input = input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nshift_result:\n  if (shift_amount < 0x433) {\n    return combine_bits(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != is_subtraction_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_bits(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - leading_zeros) & 0xff) | input << (0xcU - leading_zeros & 0xff));\n}\n\n",
            "current_name": "reverse_bits_0800040c",
            "entrypoint": "0x0800040c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_bits",
                "FUN_0800040c": "reverse_bits_0800040c",
                "LAB_08000318": "shift_result",
                "SBORROW4": "is_subtraction_borrow",
                "SCARRY4": "is_subtraction_carry",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_carry",
                "iVar3": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800042c": {
            "additional_data": {
                "0x13": {
                    "1": "offset_2"
                },
                "0x15": {
                    "1": "adjustment"
                },
                "0x1f": {
                    "1": "offset_1"
                },
                "0x20": {
                    "1": "bit_length"
                },
                "0x433": {
                    "1": "min_total_shift"
                },
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0xc": {
                    "1": "max_shift"
                },
                "CONCAT44": {
                    "1": "combine_64bit_values"
                },
                "DAT_08000318": {
                    "1": "result"
                },
                "FUN_0800042c": {
                    "1": "calculate_64bit_shift",
                    "2": "reverse_and_shift_bits",
                    "3": "shift_and_concatenate"
                },
                "LAB_08000318": {
                    "1": "shift_final"
                },
                "SCARRY4": {
                    "1": "is_subtraction_overflow"
                },
                "bVar7": {
                    "1": "leading_zeros_less_than_zero",
                    "2": "negative_shift",
                    "21": "is_negative"
                },
                "bVar7_new": {
                    "1": "need_right_shift"
                },
                "bVar8": {
                    "1": "leading_zeros_equal_to_eleven",
                    "21": "is_zero"
                },
                "bVar8_new": {
                    "1": "is_zero_shift"
                },
                "bVar9": {
                    "1": "is_negative_or_zero",
                    "2": "carry",
                    "3": "is_carry",
                    "4": "is_overflow",
                    "5": "overflow",
                    "8": "carry_flag"
                },
                "bVar9_new": {
                    "1": "is_carry"
                },
                "concat44": {
                    "1": "result"
                },
                "iVar4": {
                    "1": "leading_zeros_count",
                    "2": "bit_count",
                    "21": "leading_zeros"
                },
                "iVar4_new": {
                    "1": "leading_zeros"
                },
                "in_r12": {
                    "1": "shifted_output_high",
                    "17": "remaining_bits",
                    "2": "remaining_shift",
                    "3": "bit_mask"
                },
                "in_r12_new": {
                    "1": "remaining_bits"
                },
                "param_1": {
                    "1": "unsigned_value",
                    "19": "input",
                    "7": "input_value"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "2": "shifted_bits",
                    "3": "result",
                    "8": "shift_count"
                },
                "uVar10": {
                    "1": "result"
                },
                "uVar1_new": {
                    "1": "mask"
                },
                "uVar2": {
                    "1": "result",
                    "11": "abs_input",
                    "2": "abs_value",
                    "3": "abs_num",
                    "4": "abs_input_value"
                },
                "uVar2_new": {
                    "1": "abs_input"
                },
                "uVar3": {
                    "1": "offset",
                    "14": "shift_amount",
                    "2": "shift",
                    "3": "shift_count"
                },
                "uVar3_new": {
                    "1": "shift"
                },
                "uVar5": {
                    "1": "shifted_leading_zero",
                    "2": "final_shift_amount",
                    "5": "total_bits",
                    "6": "adjusted_shift"
                },
                "uVar5_new": {
                    "1": "total_shift"
                },
                "uVar6": {
                    "1": "sign_extension",
                    "2": "input_sign",
                    "21": "sign_bit",
                    "4": "sign_mask"
                },
                "uVar6_new": {
                    "1": "input_sign"
                },
                "uVar7": {
                    "1": "concatenated_result"
                },
                "uVar8": {
                    "1": "shifted_mask"
                },
                "uVar9": {
                    "1": "shifted_zero"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "code": "\nulonglong reverse_bits_0800042c(uint input)\n\n{\n  uint shift_count;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint adjusted_shift;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shift_count = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  adjusted_shift = leading_zeros + 0x15;\n  carry_flag = SBORROW4(adjusted_shift,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (adjusted_shift < 0x20) {\n    carry_flag = is_subtraction_overflow(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = adjusted_shift;\n    if (!is_zero && carry_flag == false) {\n      shift_count = abs_input << adjusted_shift;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_final;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shift_count = 0 << (shift_amount & 0xff);\n  }\nshift_final:\n  if (adjusted_shift < 0x433) {\n    return combine_64bit_values(abs_input + (0x432 - adjusted_shift) * 0x100000 | sign_bit,shift_count);\n  }\n  shift_amount = ~(0x432 - adjusted_shift);\n  if (0x1e < (int)shift_amount) {\n    return combine_64bit_values(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != is_subtraction_overflow(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_64bit_values(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shift_count >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return combine_64bit_values(input,shift_count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_0800042c",
            "entrypoint": "0x0800042c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_64bit_values",
                "FUN_0800042c": "reverse_bits_0800042c",
                "LAB_08000318": "shift_final",
                "SCARRY4": "is_subtraction_overflow",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "shift_count",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "adjusted_shift",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004f8": {
            "additional_data": {
                "FUN_080004f8": {
                    "1": "compute",
                    "12": "calculate_product",
                    "13": "calculate_result",
                    "2": "calculate_floating_point"
                },
                "bVar10": {
                    "1": "condition_2",
                    "11": "flag2",
                    "2": "check2",
                    "4": "condition2"
                },
                "bVar11": {
                    "1": "temp_flag3",
                    "11": "flag3",
                    "2": "borrow",
                    "3": "condition3",
                    "4": "is_negative"
                },
                "bVar9": {
                    "1": "var_d_var1",
                    "11": "flag1",
                    "2": "check1",
                    "4": "condition1",
                    "7": "is_zero"
                },
                "iVar5": {
                    "1": "i_var5",
                    "13": "temp3",
                    "2": "temp_var3",
                    "6": "sum"
                },
                "lVar2": {
                    "1": "result_2",
                    "11": "result2",
                    "2": "temp2",
                    "3": "product2",
                    "5": "temp"
                },
                "param_1": {
                    "1": "first_param",
                    "16": "input1",
                    "2": "sign",
                    "5": "value1"
                },
                "param_2": {
                    "1": "arg2",
                    "16": "input2",
                    "2": "input_2",
                    "5": "value2"
                },
                "param_3": {
                    "1": "third_param",
                    "15": "input3",
                    "5": "value3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "15": "input4",
                    "5": "value4"
                },
                "reverse_bits_080006d4": {
                    "1": "reverse_bits"
                },
                "uVar1": {
                    "1": "result_1",
                    "11": "result1",
                    "2": "temp1",
                    "4": "product1",
                    "5": "result"
                },
                "uVar12": {
                    "1": "combined_input_params",
                    "2": "concatenated",
                    "4": "combined_inputs",
                    "7": "combined_input"
                },
                "uVar14": {
                    "1": "result1"
                },
                "uVar15": {
                    "1": "result2"
                },
                "uVar3": {
                    "1": "product_high_upper",
                    "15": "temp1",
                    "2": "temp_var1"
                },
                "uVar4": {
                    "1": "exponent_bits",
                    "14": "temp2",
                    "2": "temp4"
                },
                "uVar6": {
                    "1": "temp_4",
                    "13": "temp4",
                    "2": "difference"
                },
                "uVar7": {
                    "1": "result",
                    "2": "temp7",
                    "5": "temp5",
                    "8": "temp6"
                },
                "uVar8": {
                    "1": "result_of_high_bits",
                    "2": "u_var8",
                    "5": "temp6",
                    "9": "temp7"
                },
                "unaff_r5": {
                    "1": "product_low_upper",
                    "10": "temp5"
                }
            },
            "called": [
                "FUN_080006d4"
            ],
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "code": "\nulonglong calculate_result_080004f8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = reverse_bits();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_080004f8",
            "entrypoint": "0x080004f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004f8": "calculate_result_080004f8",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_080006d4": "reverse_bits",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006d4": {
            "additional_data": {
                "FUN_080006d4": {
                    "1": "extract_bit",
                    "2": "calculate_bitwise_xor",
                    "8": "reverse_bits"
                },
                "bVar4": {
                    "1": "check_result",
                    "2": "flag",
                    "25": "is_zero"
                },
                "in_r12": {
                    "1": "constant_val",
                    "3": "bit5",
                    "4": "temp5",
                    "6": "mask"
                },
                "param_1": {
                    "1": "input_a",
                    "12": "input_1",
                    "13": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "12": "input_2",
                    "13": "input2"
                },
                "param_3": {
                    "1": "num3",
                    "12": "input_3",
                    "13": "input3"
                },
                "param_4": {
                    "1": "value4",
                    "12": "input_4",
                    "13": "input4"
                },
                "return": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "bit_check_1",
                    "2": "shifted_input_1",
                    "3": "temp_2",
                    "5": "temp1",
                    "6": "bit1"
                },
                "uVar2": {
                    "1": "shift_condition_2",
                    "2": "temp_2",
                    "3": "temp3",
                    "4": "temp2"
                },
                "uVar3": {
                    "1": "mask4",
                    "2": "result",
                    "3": "temp4",
                    "4": "bit4"
                },
                "uVar5": {
                    "1": "result"
                },
                "uVar6": {
                    "1": "result_2"
                },
                "unaff_r4": {
                    "1": "bit_check_2",
                    "2": "bit_2",
                    "3": "temp2",
                    "4": "bit2",
                    "6": "temp_1"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004f8"
            ],
            "code": "\nulonglong reverse_bits_080006d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp_1;\n  uint temp2;\n  uint temp3;\n  uint mask;\n  bool is_zero;\n  \n  temp2 = mask & input4 >> 0x14;\n  if (temp_1 != mask && temp2 != mask) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp_1 == 0) {\n      temp3 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp3;\n      if (temp2 != 0) {\n        result CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp3 = input2;\n  if (((!is_zero) && ((temp_1 != mask || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp2 != mask || (input1 = input3, temp3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    result (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_080006d4",
            "entrypoint": "0x080006d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080006d4": "reverse_bits_080006d4",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "return": "result",
                "uVar1": "bit1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "unaff_r4": "temp_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800074c": {
            "additional_data": {
                "FUN_0800074c": {
                    "1": "calculate_result",
                    "14": "calculate_floating_point",
                    "2": "calculate_float_value",
                    "3": "calculate_floating_point_value",
                    "4": "calculate_float"
                },
                "bVar14": {
                    "1": "is_zero1",
                    "11": "is_zero",
                    "2": "temp_bool1",
                    "6": "condition1"
                },
                "bVar15": {
                    "1": "is_zero2",
                    "2": "flag2",
                    "6": "condition2",
                    "8": "is_equal"
                },
                "bVar16": {
                    "1": "bool_var3",
                    "2": "temp_bool3",
                    "3": "carry_flag",
                    "4": "overflow"
                },
                "bVar17": {
                    "1": "is_bit_set"
                },
                "iVar8": {
                    "1": "diff_exponent",
                    "18": "difference",
                    "4": "temp8"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_param1",
                    "7": "sign",
                    "9": "input1"
                },
                "param_2": {
                    "1": "exponent_and_significand_high",
                    "2": "input_param2",
                    "5": "exponent",
                    "9": "input2"
                },
                "param_3": {
                    "1": "first_half_of_fraction",
                    "2": "mantissa_high",
                    "9": "input3"
                },
                "param_4": {
                    "1": "input_variable_4",
                    "2": "input_param4",
                    "9": "input4"
                },
                "uVar1": {
                    "1": "bit_shifted_input1",
                    "12": "temp1",
                    "2": "result"
                },
                "uVar10": {
                    "1": "temp9",
                    "2": "temp6",
                    "5": "temp11"
                },
                "uVar11": {
                    "1": "result_mantissa1",
                    "2": "u_var11",
                    "5": "temp12"
                },
                "uVar12": {
                    "1": "var13",
                    "2": "result2",
                    "3": "u_var12",
                    "5": "temp13"
                },
                "uVar13": {
                    "1": "result",
                    "3": "u_var13",
                    "4": "mask",
                    "5": "temp14"
                },
                "uVar17": {
                    "1": "combined_params",
                    "11": "reversed_bits",
                    "2": "result"
                },
                "uVar18": {
                    "1": "integer_part"
                },
                "uVar19": {
                    "1": "result_int_part"
                },
                "uVar2": {
                    "1": "flag2",
                    "12": "temp2",
                    "2": "exponent_mask"
                },
                "uVar20": {
                    "1": "result3"
                },
                "uVar21": {
                    "1": "result4"
                },
                "uVar22": {
                    "1": "new_exponent"
                },
                "uVar23": {
                    "1": "carry_temp"
                },
                "uVar24": {
                    "1": "result7"
                },
                "uVar25": {
                    "1": "result8"
                },
                "uVar26": {
                    "1": "result"
                },
                "uVar27": {
                    "1": "rounded_result"
                },
                "uVar28": {
                    "1": "result11"
                },
                "uVar29": {
                    "1": "result12"
                },
                "uVar3": {
                    "1": "first_half_of_fraction",
                    "11": "temp3",
                    "2": "temp1"
                },
                "uVar4": {
                    "1": "shift_amount",
                    "11": "temp4",
                    "2": "temp3"
                },
                "uVar5": {
                    "1": "u_var5",
                    "11": "temp5",
                    "2": "temp4"
                },
                "uVar6": {
                    "1": "temporary_variable_4",
                    "11": "temp6",
                    "2": "temp4"
                },
                "uVar7": {
                    "1": "sign_bits",
                    "2": "temp6",
                    "3": "result_sign",
                    "4": "u_var7",
                    "9": "temp7"
                },
                "uVar8": {
                    "1": "difference"
                },
                "uVar9": {
                    "1": "result",
                    "2": "temp5",
                    "3": "u_var9",
                    "6": "temp9"
                },
                "unaff_r5": {
                    "1": "hidden_bit1",
                    "5": "temp10"
                }
            },
            "called": [
                "FUN_080008ba"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "code": "\nulonglong calculate_floating_point_0800074c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool is_zero;\n  bool is_equal;\n  bool overflow;\n  undefined8 reversed_bits;\n  \n  reversed_bits = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  is_zero = temp7 == 0;\n  if (!is_zero) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    is_zero = temp10 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp7 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp10 == 0x7ff;\n  }\n  if (is_zero) {\n    reversed_bits = reverse_bits_080008ba();\n  }\n  temp9 = (uint)((ulonglong)reversed_bits >> 0x20);\n  temp12 = (uint)reversed_bits;\n  difference = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    overflow = SCARRY4(difference,temp14 >> 1);\n    temp9 = difference + (temp14 >> 1);\n    is_zero = (int)temp9 < 0;\n    is_equal = temp9 == 0;\n    if (!is_equal && is_zero == overflow) {\n      overflow = SBORROW4(temp14,temp9);\n      is_zero = (int)(temp14 - temp9) < 0;\n      is_equal = temp14 == temp9;\n    }\n    if (!is_equal && is_zero == overflow) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!is_equal && is_zero == overflow) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    is_equal = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    is_zero = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    is_zero = temp3 <= temp11;\n    if (temp11 == temp3) {\n      is_zero = temp14 <= temp12;\n    }\n    difference = difference + (uint)is_zero;\n    temp9 = difference + 0x3fd;\n    if (is_zero == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      is_zero = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)is_zero) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!is_zero;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      is_equal = temp1 <= temp13;\n      is_zero = temp11 - temp5 < (uint)is_equal;\n      temp14 = temp11;\n      if (temp5 < temp11 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!is_equal;\n      }\n      if (temp5 < temp11 || is_zero) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      is_equal = temp2 <= temp13;\n      is_zero = temp14 - temp11 < (uint)is_equal;\n      temp5 = temp14;\n      if (temp11 < temp14 || is_zero) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!is_equal;\n      }\n      if (temp11 < temp14 || is_zero) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      is_equal = temp1 <= temp13;\n      is_zero = temp5 - temp6 < (uint)is_equal;\n      temp11 = temp5;\n      if (temp6 < temp5 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!is_equal;\n      }\n      if (temp6 < temp5 || is_zero) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800086a:\n    overflow = 0xfc < temp9;\n    is_equal = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    is_zero = temp4 == 0;\n    temp3 = temp4;\n    if (overflow && !is_zero) {\n      overflow = 0x6ff < temp4;\n      is_equal = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      is_zero = temp4 == 0x700;\n    }\n    if (!overflow || is_zero) {\n      is_zero = temp6 <= temp11;\n      if (temp11 == temp6) {\n        is_zero = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        is_zero = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)is_zero),temp12 + is_zero);\n    }\n  }\n  if (!is_zero && (int)temp3 < 0 == is_equal) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflow = SCARRY4(temp9,0x36);\n  is_zero = (int)(temp9 + 0x36) < 0;\n  is_equal = temp9 == 0xffffffca;\n  if (is_equal || is_zero != overflow) {\n    temp12 = 0;\n  }\n  if (is_equal || is_zero != overflow) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (is_equal || is_zero != overflow) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_0800074c",
            "entrypoint": "0x0800074c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "bVar14": "is_zero",
                "bVar15": "is_equal",
                "bVar16": "overflow",
                "iVar8": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "reversed_bits",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008ba": {
            "additional_data": {
                "FUN_080008ba": {
                    "1": "extract_bits",
                    "2": "calculate_double",
                    "4": "convert_to_double",
                    "8": "reverse_bits"
                },
                "LAB_080006f0": {
                    "1": "return_case2"
                },
                "LAB_0800072c": {
                    "1": "return_case1"
                },
                "bVar4": {
                    "1": "temp_var6",
                    "23": "is_zero",
                    "3": "flag"
                },
                "in_r12": {
                    "1": "variable2",
                    "2": "constant2",
                    "3": "constant",
                    "7": "bit5"
                },
                "param_1": {
                    "1": "base",
                    "2": "value1",
                    "23": "input1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "exponent",
                    "2": "value2",
                    "23": "input2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "exponent1",
                    "2": "value3",
                    "23": "input3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "exponent2",
                    "2": "value4",
                    "23": "input4",
                    "4": "input_4"
                },
                "uVar1": {
                    "1": "temp2",
                    "15": "bit1",
                    "2": "bit_check1",
                    "4": "temp1"
                },
                "uVar2": {
                    "1": "shifted_comparison_input",
                    "2": "bit_check3",
                    "3": "temp2",
                    "6": "bit2",
                    "7": "bit3"
                },
                "uVar3": {
                    "1": "temp2",
                    "2": "bit_check4",
                    "3": "temp4",
                    "7": "bit4"
                },
                "unaff_r4": {
                    "1": "variable1",
                    "2": "temp_var1",
                    "4": "temp1",
                    "8": "bit2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800074c"
            ],
            "code": "\nulonglong reverse_bits_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nreturn_case1:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_case2:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_case1;\n      if ((input3 | input4 << 1) != 0) goto return_case2;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_080008ba",
            "entrypoint": "0x080008ba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008ba": "reverse_bits_080008ba",
                "LAB_080006f0": "return_case2",
                "LAB_0800072c": "return_case1",
                "bVar4": "is_zero",
                "in_r12": "bit5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "bit2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800092c": {
            "additional_data": {
                "0x15": {
                    "1": "shift_by_amount"
                },
                "0xc": {
                    "1": "shift_by"
                },
                "FUN_0800092c": {
                    "1": "check_parameters_equal",
                    "2": "check_equality",
                    "3": "compare_parameters",
                    "9": "check_parameters"
                },
                "bVar2": {
                    "1": "is_zero_12",
                    "2": "are_values_zero",
                    "21": "is_zero"
                },
                "bVar3": {
                    "1": "is_bigger_than_zero",
                    "10": "is_negative",
                    "2": "is_less_than_zero",
                    "4": "is_less_or_equal"
                },
                "param_1": {
                    "1": "num1",
                    "11": "value1",
                    "2": "a",
                    "3": "first_param",
                    "4": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "11": "value2",
                    "2": "value_b",
                    "3": "second_param",
                    "4": "value_2"
                },
                "param_3": {
                    "1": "num3",
                    "11": "value3",
                    "2": "value_c",
                    "3": "third_param",
                    "4": "value_3"
                },
                "param_4": {
                    "1": "shifted_fourth_param",
                    "2": "value_d",
                    "4": "input4",
                    "9": "value4"
                },
                "return": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "param_xor",
                    "10": "xor_result",
                    "16": "result",
                    "2": "temp"
                }
            },
            "called": [],
            "calling": [
                "FUN_080009b8"
            ],
            "code": "\nuint check_parameters_0800092c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_parameters_0800092c",
            "entrypoint": "0x0800092c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009a8": {
            "additional_data": {
                "FUN_080009a8": {
                    "1": "validate_and_return_inputs",
                    "14": "validate_parameters",
                    "2": "validate_and_execute",
                    "9": "validate_and_return"
                },
                "param_1": {
                    "1": "name",
                    "2": "input_parameter_1",
                    "3": "input_param_1",
                    "4": "first_param",
                    "6": "parameter_1"
                },
                "param_2": {
                    "1": "updated_param_2",
                    "2": "arg2",
                    "3": "input_param_2",
                    "4": "input_2",
                    "6": "parameter_2"
                },
                "param_3": {
                    "1": "third_parameter",
                    "2": "input_1",
                    "3": "input_param_3",
                    "4": "third_param",
                    "5": "parameter_3"
                },
                "param_4": {
                    "1": "arg4",
                    "2": "input_parameter_4",
                    "3": "input_param_4",
                    "4": "fourth_param",
                    "5": "parameter_4"
                },
                "param_5": {
                    "1": "result"
                },
                "param_6": {
                    "1": "status"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "code": "\nvoid validate_parameters_080009a8(undefined4 parameter_1,undefined4 parameter_2,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  validate_parameters_080009a8_080009b8(parameter_3,parameter_4,parameter_1,parameter_2);\n  return;\n}\n\n",
            "current_name": "validate_parameters_080009a8",
            "entrypoint": "0x080009a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009a8": "validate_parameters_080009a8",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009b8": {
            "additional_data": {
                "FUN_080009b8": {
                    "1": "check_and_return_parameter",
                    "14": "validate_parameters",
                    "2": "validate_and_return_param",
                    "3": "validate_and_return_value",
                    "4": "check_and_return_param"
                },
                "check_parameters_0800092c": {
                    "1": "validate_parameters_helper",
                    "3": "validate_parameters",
                    "4": "validate_input"
                },
                "param_1": {
                    "12": "input_param",
                    "2": "input_data",
                    "4": "input_parameter",
                    "7": "input_value"
                }
            },
            "called": [
                "FUN_0800092c"
            ],
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "code": "\nundefined4 validate_parameters_080009b8(undefined4 input_param)\n\n{\n  validate_input();\n  return input_param;\n}\n\n",
            "current_name": "validate_parameters_080009b8",
            "entrypoint": "0x080009b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009b8": "validate_parameters_080009b8",
                "check_parameters_0800092c": "validate_input",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c8": {
            "additional_data": {
                "FUN_080009c8": {
                    "1": "is_parameters_valid",
                    "2": "check_if_parameters_valid",
                    "3": "check_parameter_validity",
                    "4": "validate_parameters",
                    "8": "is_parameter_valid"
                },
                "in_ZR": {
                    "1": "is_zero_result",
                    "2": "is_not_zero",
                    "6": "is_valid",
                    "7": "input_character"
                },
                "validate_parameters_080009b8": {
                    "1": "validate_parameters"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nbool is_parameter_valid_080009c8(void)\n\n{\n  char input_character;\n  \n  validate_parameters();\n  return input_character != '\\0';\n}\n\n",
            "current_name": "is_parameter_valid_080009c8",
            "entrypoint": "0x080009c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c8": "is_parameter_valid_080009c8",
                "in_ZR": "input_character",
                "validate_parameters_080009b8": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009dc": {
            "additional_data": {
                "FUN_080009dc": {
                    "1": "validate_parameters",
                    "2": "is_valid_input",
                    "3": "is_string_empty",
                    "4": "is_cy_null",
                    "5": "is_input_empty"
                },
                "in_CY": {
                    "1": "cy_char",
                    "11": "input_char",
                    "18": "input_character"
                },
                "validate_parameters_080009b8": {
                    "2": "validate_parameters"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "code": "\nbool is_input_empty_080009dc(void)\n\n{\n  char input_character;\n  \n  validate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_input_empty_080009dc",
            "entrypoint": "0x080009dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009dc": "is_input_empty_080009dc",
                "in_CY": "input_character",
                "validate_parameters_080009b8": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009f0": {
            "additional_data": {
                "FUN_080009f0": {
                    "1": "check_parameters_and_return_result",
                    "2": "validate_parameters",
                    "3": "check_parameter_conditions",
                    "7": "validate_and_return_result"
                },
                "in_CY": {
                    "1": "is_cy_flag_set",
                    "10": "carry_flag",
                    "2": "is_carry_flag_set",
                    "3": "is_carry_set"
                },
                "in_ZR": {
                    "1": "input_zero",
                    "2": "is_zero",
                    "3": "is_zero_return",
                    "5": "is_zero_result",
                    "7": "zero_flag"
                },
                "validate_parameters_080009b8": {
                    "4": "validate_parameters"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "code": "\nbool validate_and_return_result_080009f0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_parameters();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "validate_and_return_result_080009f0",
            "entrypoint": "0x080009f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009f0": "validate_and_return_result_080009f0",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "validate_parameters_080009b8": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a04": {
            "additional_data": {
                "FUN_08000a04": {
                    "1": "validate_parameters",
                    "10": "validate_and_return_result",
                    "2": "validate_and_return_parameters",
                    "5": "check_parameters"
                },
                "in_CY": {
                    "1": "is_carry_set",
                    "19": "carry_flag",
                    "7": "is_carry"
                },
                "in_ZR": {
                    "1": "is_zero_returned",
                    "17": "zero_flag",
                    "2": "zero_result",
                    "3": "is_zero_return",
                    "4": "is_zero"
                },
                "validate_parameters_080009a8": {
                    "2": "validate_parameters"
                },
                "void": {
                    "1": "bool"
                }
            },
            "called": [
                "FUN_080009a8"
            ],
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "code": "\nbool validate_and_return_result_08000a04(bool)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_parameters();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "validate_and_return_result_08000a04",
            "entrypoint": "0x08000a04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a04": "validate_and_return_result_08000a04",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "validate_parameters_080009a8": "validate_parameters",
                "void": "bool"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a18": {
            "additional_data": {
                "FUN_08000a18": {
                    "1": "is_terminated",
                    "2": "is_null_terminated",
                    "3": "is_string_empty"
                },
                "in_CY": {
                    "1": "cy",
                    "12": "input_char",
                    "16": "input_character"
                },
                "validate_parameters_080009a8": {
                    "1": "validate_parameters"
                }
            },
            "called": [
                "FUN_080009a8"
            ],
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "code": "\nbool is_string_empty_08000a18(void)\n\n{\n  char input_character;\n  \n  validate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_string_empty_08000a18",
            "entrypoint": "0x08000a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a18": "is_string_empty_08000a18",
                "in_CY": "input_character",
                "validate_parameters_080009a8": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "additional_data": {
                "FUN_08000a2c": {
                    "1": "check_valid_params",
                    "16": "check_parameters",
                    "2": "check_conditions",
                    "3": "check_params"
                },
                "int param_2": {
                    "1": "second_param"
                },
                "int param_4": {
                    "1": "fourth_param"
                },
                "param_1": {
                    "1": "first_param",
                    "11": "value1",
                    "3": "input_1",
                    "6": "input1"
                },
                "param_1 | param_2 << 0xc": {
                    "1": "first_param_or_second_param_shifted"
                },
                "param_2": {
                    "1": "second_parameter",
                    "3": "input_2",
                    "5": "value_2",
                    "6": "input2",
                    "9": "value2"
                },
                "param_2 << 1 >> 0x15": {
                    "1": "second_param_shifted"
                },
                "param_3": {
                    "1": "third_param",
                    "10": "value3",
                    "3": "input_3",
                    "6": "value_3"
                },
                "param_3 | param_4 << 0xc": {
                    "1": "third_param_or_fourth_param_shifted"
                },
                "param_4": {
                    "1": "input_param_4",
                    "3": "input_4",
                    "5": "value_4",
                    "6": "input4",
                    "9": "value4"
                },
                "param_4 << 1 >> 0x15": {
                    "1": "fourth_param_shifted"
                },
                "uint param_1": {
                    "1": "first_param"
                },
                "uint param_3": {
                    "1": "third_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nundefined4 check_parameters_08000a2c(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08000a2c",
            "entrypoint": "0x08000a2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a58": {
            "additional_data": {
                "<param_1>": {
                    "1": "input1"
                },
                "<param_2>": {
                    "1": "input2"
                },
                "FUN_08000a58": {
                    "1": "decode_parameters",
                    "2": "apply_transformation",
                    "3": "calculate_value",
                    "5": "reverse_bits"
                },
                "iVar2": {
                    "1": "updated_flag",
                    "2": "offset",
                    "3": "multiplied_value",
                    "4": "multiplier"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_value1",
                    "5": "input_value",
                    "7": "input1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "multiplier",
                    "4": "shift_amount",
                    "6": "input2"
                },
                "uVar1": {
                    "1": "shifted_value_divided",
                    "2": "quotient",
                    "5": "result",
                    "9": "shifted_value"
                },
                "uVar2": {
                    "1": "temp_value",
                    "2": "result"
                },
                "uVar3": {
                    "1": "negative_value",
                    "2": "temp3",
                    "3": "adjusted_value",
                    "6": "shift_amount"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "result",
                    "3": "final_result"
                },
                "uVar5": {
                    "1": "result5"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nuint reverse_bits_08000a58(uint input1,uint input2)\n\n{\n  uint shifted_value;\n  int multiplier;\n  uint shift_amount;\n  \n  multiplier = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < multiplier) {\n      return 0;\n    }\n    shifted_value = multiplier >> 0x15;\n    shift_amount = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "current_name": "reverse_bits_08000a58",
            "entrypoint": "0x08000a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a58": "reverse_bits_08000a58",
                "iVar2": "multiplier",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shifted_value",
                "uVar3": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "additional_data": {
                "0x15": {
                    "1": "shift"
                },
                "0x200000": {
                    "1": "offset"
                },
                "0x3e1": {
                    "1": "constant"
                },
                "0x80000000": {
                    "1": "bit_31"
                },
                "0xb": {
                    "1": "bit_shift"
                },
                "0xffe00000": {
                    "1": "limit"
                },
                "0xffffffff": {
                    "1": "error_code"
                },
                "FUN_08000aa8": {
                    "1": "calculate_shifted_bitmask",
                    "10": "calculate_shifted_value",
                    "3": "validate_input"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "2": "result",
                    "3": "temp_var",
                    "9": "shifted_value"
                },
                "param_1": {
                    "1": "first_param",
                    "11": "input_value",
                    "2": "value1",
                    "3": "input_value1"
                },
                "param_2": {
                    "1": "bit_flag",
                    "2": "value2",
                    "3": "input_2",
                    "5": "shift_amount",
                    "6": "multiplier"
                },
                "uVar2": {
                    "1": "shifted_val",
                    "15": "shift_amount",
                    "2": "shift_count",
                    "4": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nuint calculate_shifted_value_08000aa8(uint input_value,uint multiplier)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((multiplier & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = multiplier * 2 + 0x200000;\n  if (multiplier * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (multiplier << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | multiplier << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_shifted_value_08000aa8",
            "entrypoint": "0x08000aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "iVar1": "shifted_value",
                "param_1": "input_value",
                "param_2": "multiplier",
                "uVar2": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "called": [],
            "calling": [
                "FUN_08000aec"
            ],
            "code": "\nvoid FUNC_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "FUNC_08000ae8",
            "entrypoint": "0x08000ae8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08000ae8": "FUNC_08000ae8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08000aec": {
            "additional_data": {
                "FUN_08000aec": {
                    "1": "initialize_function",
                    "2": "execute_operation",
                    "4": "execute_task",
                    "7": "process_data",
                    "9": "execute_function"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "input1",
                    "2": "arg1",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "param2",
                    "3": "unused_param",
                    "5": "input2"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "unused_param2",
                    "3": "input3"
                },
                "param_4": {
                    "1": "param",
                    "2": "arg4",
                    "3": "input2",
                    "7": "output_param",
                    "9": "input4"
                },
                "uVar1": {
                    "1": "status",
                    "17": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_08000ae8"
            ],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nundefined4 execute_function_08000aec(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = FUNC_08000ae8(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "current_name": "execute_function_08000aec",
            "entrypoint": "0x08000aec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aec": "execute_function_08000aec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000b08": {
            "additional_data": {
                "DAT_20000010": {
                    "1": "data_5"
                },
                "DAT_20000014": {
                    "1": "data10"
                },
                "DAT_20000018": {
                    "1": "data_a_7"
                },
                "DAT_2000001c": {
                    "1": "data_4"
                },
                "DAT_20000020": {
                    "1": "data_a_5"
                },
                "DAT_20000024": {
                    "1": "data_2"
                },
                "DAT_20000028": {
                    "1": "config_param_3"
                },
                "DAT_2000002c": {
                    "1": "variable15"
                },
                "DAT_20000030": {
                    "1": "data_b_6"
                },
                "DAT_20000034": {
                    "1": "config_param_6"
                },
                "DAT_20000038": {
                    "1": "config_param_2"
                },
                "DAT_2000005c": {
                    "1": "data12"
                },
                "DAT_2000006c": {
                    "1": "data21"
                },
                "DAT_20000070": {
                    "1": "data_c_3"
                },
                "DAT_20000074": {
                    "1": "variable19"
                },
                "DAT_20000188": {
                    "1": "info_ptr"
                },
                "DAT_20000194": {
                    "1": "data11"
                },
                "DAT_200001b8": {
                    "1": "data_a_3"
                },
                "DAT_200001c0": {
                    "1": "data_a_1"
                },
                "DAT_20000240": {
                    "1": "data4"
                },
                "DAT_2000024c": {
                    "1": "variable18"
                },
                "FUN_08000b08": {
                    "1": "initialize_data",
                    "16": "initialize_and_process_data",
                    "2": "initialize_data_processing",
                    "7": "process_data"
                },
                "initialize_and_process_data_08001b18": {
                    "1": "initialize_and_process_data_helper",
                    "9": "initialize_and_process_data"
                },
                "initialize_data_08001510": {
                    "1": "initialize_data_func",
                    "11": "initialize_data",
                    "2": "initialize_additional_data"
                },
                "param_1": {
                    "1": "status_flag",
                    "2": "flag_1",
                    "3": "value_1",
                    "4": "flag"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "flag_2",
                    "3": "flag2",
                    "8": "value"
                },
                "process_and_store_data_0800157c": {
                    "1": "process_and_store_data_func",
                    "17": "process_and_store_data"
                }
            },
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_process_data_08000b08(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    initialize_and_process_data_08000b08(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initialize_data(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    process_and_store_data(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_08000b08",
            "entrypoint": "0x08000b08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000b08": "initialize_and_process_data_08000b08",
                "initialize_and_process_data_08001b18": "initialize_and_process_data",
                "initialize_data_08001510": "initialize_data",
                "param_1": "flag",
                "param_2": "value",
                "process_and_store_data_0800157c": "process_and_store_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "additional_data": {
                "DAT_20000004": {
                    "1": "oven_data2"
                },
                "DAT_20000008": {
                    "1": "execution_result"
                },
                "DAT_20000060": {
                    "1": "oven_data3"
                },
                "DAT_20000064": {
                    "1": "oven_data1"
                },
                "DAT_20000194": {
                    "1": "data_buffer"
                },
                "DAT_200001b0": {
                    "1": "initialized_data_1"
                },
                "DAT_200001b4": {
                    "1": "initialized_data_2"
                },
                "DAT_20000258": {
                    "1": "constant"
                },
                "DAT_2000036c": {
                    "2": "serial_port"
                },
                "FUNC_080058e8": {
                    "1": "perform_operation",
                    "10": "execute_function",
                    "2": "set_timer",
                    "4": "set_temperature"
                },
                "FUN_08000bcc": {
                    "1": "initialize_oven_control_system",
                    "11": "initialize_reflow_oven",
                    "2": "initialize_and_execute",
                    "3": "initialize_ovens",
                    "4": "initialize_and_execute_reflow_oven",
                    "5": "initialize_oven"
                },
                "execute_function_08000aec": {
                    "1": "execute_function_2",
                    "15": "execute_function",
                    "2": "execute_reflow_oven",
                    "3": "execute_main_function"
                },
                "initialize_data_080058e0": {
                    "1": "initialize_data_structure",
                    "2": "initialize_variable",
                    "25": "initialize_data"
                },
                "initialize_serial_port_08005a68": {
                    "1": "configure_serial_port",
                    "29": "initialize_serial_port"
                },
                "process_and_execute_data_08001550": {
                    "1": "execute_event",
                    "16": "process_and_execute_data",
                    "2": "process_and_execute_data_with_flag",
                    "3": "execute_data"
                },
                "process_data_0800135a": {
                    "1": "process_data_without_output",
                    "2": "process_data_d",
                    "3": "process_data_4",
                    "8": "process_data"
                },
                "process_data_08001366": {
                    "1": "process_data_with_two_flags",
                    "2": "process_data_e",
                    "3": "process_data_5",
                    "4": "process_data"
                },
                "process_data_080013a4": {
                    "1": "process_data_set_temperature",
                    "2": "process_data_c",
                    "3": "process_data_3",
                    "4": "process_data_with_parameters"
                },
                "process_data_080057b4": {
                    "1": "process_data_block",
                    "2": "process_data_with_flag",
                    "3": "process_data_b",
                    "4": "process_data_2",
                    "5": "process_data"
                },
                "process_data_08005848": {
                    "1": "process_data_display",
                    "3": "process_data_a",
                    "4": "process_data_1",
                    "9": "process_data"
                },
                "process_data_080058e8": {
                    "1": "set_temperature_limit"
                },
                "process_string_08005c96": {
                    "1": "process_update_data",
                    "20": "process_string",
                    "3": "display_message"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\nvoid initialize_reflow_oven_08000bcc(void)\n\n{\n  process_data(DAT_20000064,0);\n  process_data(DAT_20000064,1);\n  process_data(DAT_20000004,0);\n  process_data(DAT_20000004,1);\n  process_data(DAT_20000060,0);\n  process_data(DAT_20000060,1);\n  process_data(DAT_20000004,1);\n  process_data_with_parameters(&DAT_20000194,8,2,0);\n  process_and_execute_data(&DAT_20000194,0,&DAT_20000008);\n  process_data(&DAT_20000194);\n  process_string(&DAT_20000194,\"Reflow\");\n  process_data(&DAT_20000194,0,1);\n  process_string(&DAT_20000194,\"Oven 1.2\");\n  process_data(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  process_data(&DAT_20000194);\n  initialize_serial_port(&DAT_2000036c,0xe100,6);\n  process_data(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initialize_data();\n  DAT_200001b4 = initialize_data();\n  execute_function(0);\n  return;\n}\n\n",
            "current_name": "initialize_reflow_oven_08000bcc",
            "entrypoint": "0x08000bcc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000bcc": "initialize_reflow_oven_08000bcc",
                "execute_function_08000aec": "execute_function",
                "initialize_data_080058e0": "initialize_data",
                "initialize_serial_port_08005a68": "initialize_serial_port",
                "process_and_execute_data_08001550": "process_and_execute_data",
                "process_data_0800135a": "process_data",
                "process_data_08001366": "process_data",
                "process_data_080013a4": "process_data_with_parameters",
                "process_data_080057b4": "process_data",
                "process_data_08005848": "process_data",
                "process_string_08005c96": "process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "additional_data": {
                "DAG_20000180": {
                    "1": "result8"
                },
                "DAG_20000190": {
                    "1": "data_count2"
                },
                "DAG_20000248": {
                    "1": "flag2"
                },
                "DAG_20000254": {
                    "1": "result7"
                },
                "DAG_20000258": {
                    "1": "result9"
                },
                "DAT_08007368": {
                    "1": "constant_string1"
                },
                "DAT_08007378": {
                    "1": "string2"
                },
                "DAT_20000004": {
                    "1": "data5"
                },
                "DAT_20000060": {
                    "1": "param1",
                    "3": "parameter1"
                },
                "DAT_20000064": {
                    "1": "parameter15"
                },
                "DAT_20000068": {
                    "1": "input_data",
                    "2": "data4"
                },
                "DAT_20000180": {
                    "1": "input_data"
                },
                "DAT_20000184": {
                    "1": "process_state",
                    "2": "flag3"
                },
                "DAT_20000188": {
                    "1": "parameter12"
                },
                "DAT_2000018c": {
                    "1": "result_2"
                },
                "DAT_20000190": {
                    "1": "data_size3"
                },
                "DAT_20000194": {
                    "1": "parameter8"
                },
                "DAT_200001b0": {
                    "1": "constant2",
                    "3": "data_threshold2",
                    "4": "data_limit2"
                },
                "DAT_200001b4": {
                    "1": "threshold1",
                    "3": "data_threshold1",
                    "4": "data_limit1"
                },
                "DAT_200001b8": {
                    "1": "value4"
                },
                "DAT_200001bc": {
                    "1": "value5"
                },
                "DAT_200001c0": {
                    "1": "input_data"
                },
                "DAT_20000238": {
                    "1": "error_code",
                    "2": "status",
                    "9": "state"
                },
                "DAT_20000239": {
                    "1": "is_set",
                    "3": "flag1",
                    "5": "flag"
                },
                "DAT_20000240": {
                    "1": "input_value1"
                },
                "DAT_20000244": {
                    "1": "value2"
                },
                "DAT_20000248": {
                    "1": "time_setpoint",
                    "6": "flag2"
                },
                "DAT_2000024c": {
                    "1": "buffer",
                    "2": "data1"
                },
                "DAT_20000250": {
                    "1": "process_count",
                    "2": "count",
                    "3": "data_count",
                    "5": "counter"
                },
                "DAT_20000254": {
                    "1": "limit"
                },
                "DAT_20000258": {
                    "1": "time_param",
                    "2": "data_value"
                },
                "DAT_2000025c": {
                    "1": "counter"
                },
                "DAT_20000260": {
                    "1": "reverse_data"
                },
                "DAT_2000036c": {
                    "1": "output_buffer",
                    "2": "result_buffer"
                },
                "DAT_20008007368": {
                    "1": "parameter9"
                },
                "FUN_08000cd0": {
                    "1": "process_data_flow",
                    "21": "process_data"
                },
                "PTR_s_Ready_2000003c": {
                    "1": "ready_strings",
                    "4": "ready_string"
                },
                "PTR_s_TC_Error_08007368": {
                    "1": "error_message1"
                },
                "PTR_s_TC_Error_08007378": {
                    "1": "error_message2"
                },
                "calculate_result_08000194": {
                    "1": "calculate_result3",
                    "2": "calculate_result"
                },
                "calculate_result_080015f8": {
                    "1": "calculate_result1",
                    "9": "calculate_result"
                },
                "calculate_result_08001918": {
                    "4": "calculate_result2",
                    "7": "calculate_result"
                },
                "calculate_sum": {
                    "1": "calculate_sum"
                },
                "calculate_sum_08005cd4": {
                    "3": "calculate_sum2",
                    "6": "calculate_sum"
                },
                "calculate_sum_08005f40": {
                    "11": "calculate_sum"
                },
                "calculate_value": {
                    "1": "calculate_value"
                },
                "calculation_result": {
                    "1": "calculation_result"
                },
                "check_bit_and_return": {
                    "1": "check_bit_and_return"
                },
                "check_bit_and_return_08005890": {
                    "1": "check_bits",
                    "8": "check_bit_and_return"
                },
                "check_parameter_validity": {
                    "1": "check_parameter_validity"
                },
                "counter": {
                    "1": "counter"
                },
                "data_size": {
                    "1": "data_size"
                },
                "execute_conversion": {
                    "1": "execute_conversion"
                },
                "execute_conversion_08005d82": {
                    "11": "execute_conversion"
                },
                "extraout_r1": {
                    "1": "extra_output1",
                    "2": "result4",
                    "6": "extra_result1"
                },
                "extraout_r1_00": {
                    "1": "result4",
                    "2": "extra_out2",
                    "6": "extra_result2"
                },
                "extraout_r1_01": {
                    "1": "temp_result3",
                    "2": "extra_out3",
                    "6": "extra_result3"
                },
                "extraout_result_1": {
                    "1": "extraout_result_1"
                },
                "extraout_result_2": {
                    "1": "extraout_result_2"
                },
                "extraout_result_3": {
                    "1": "extraout_result_3"
                },
                "get_data_size": {
                    "1": "get_data_size"
                },
                "iVar3": {
                    "1": "status",
                    "2": "result2",
                    "3": "return_value",
                    "5": "result"
                },
                "iVar3 ": {
                    "1": "is_process_data_zero"
                },
                "initialize_data_080058e0": {
                    "1": "initialize_data_2",
                    "10": "initialize_data"
                },
                "initialize_data_080058e0_1": {
                    "1": "initialize_data"
                },
                "initialize_data_080058e0_2": {
                    "1": "initialize_data"
                },
                "initialize_data_080058e0_3": {
                    "1": "initialize_data"
                },
                "input_data": {
                    "1": "input_data"
                },
                "is_input_empty": {
                    "1": "is_input_empty"
                },
                "is_input_empty_080009dc": {
                    "12": "is_input_empty"
                },
                "is_parameter_valid_080009c8": {
                    "1": "check_parameter_validity",
                    "10": "is_parameter_valid"
                },
                "is_string_empty": {
                    "1": "is_string_empty"
                },
                "is_string_empty_08000a18": {
                    "11": "is_string_empty"
                },
                "original_data_size": {
                    "1": "original_data_size"
                },
                "parameter_1": {
                    "1": "parameter_1"
                },
                "process_and_return_one_0800134e": {
                    "2": "process_and_return",
                    "8": "process_and_return_one"
                },
                "process_data": {
                    "1": "process_data"
                },
                "process_data_0800040c": {
                    "1": "process_data6"
                },
                "process_data_0800080000_0": {
                    "1": "process_data8"
                },
                "process_data_0800080000_1": {
                    "1": "process_data9"
                },
                "process_data_0800080000_2": {
                    "1": "process_data10"
                },
                "process_data_0800080000_3": {
                    "1": "process_data11"
                },
                "process_data_0800080000_4": {
                    "1": "process_data12"
                },
                "process_data_0800080000_5": {
                    "1": "process_data13"
                },
                "process_data_0800080000_6": {
                    "1": "process_data14"
                },
                "process_data_08000a18": {
                    "1": "process_data7"
                },
                "process_data_0800135a": {
                    "3": "process_data3",
                    "5": "process_data"
                },
                "process_data_08001366": {
                    "3": "process_data5",
                    "6": "process_data"
                },
                "process_data_080016b4": {
                    "1": "process_data_2",
                    "2": "process_data"
                },
                "process_data_08005754": {
                    "1": "process_data_3",
                    "2": "process_data7",
                    "3": "process_data6",
                    "5": "process_data"
                },
                "process_data_08005848": {
                    "1": "process_data1",
                    "2": "process_data2",
                    "7": "process_data"
                },
                "process_data_08005f2c": {
                    "1": "process_data6",
                    "2": "process_data3",
                    "3": "process_data2",
                    "6": "process_data"
                },
                "process_input": {
                    "1": "process_input"
                },
                "process_input_080016b4": {
                    "1": "process_input2"
                },
                "process_input_080018f8": {
                    "12": "process_input"
                },
                "process_string": {
                    "1": "process_string"
                },
                "process_string_08005c96": {
                    "1": "process_string2",
                    "11": "process_string"
                },
                "ready_string": {
                    "1": "ready_string"
                },
                "result_buffer": {
                    "1": "result_buffer"
                },
                "result_high": {
                    "1": "result_high"
                },
                "result_low": {
                    "1": "result_low"
                },
                "reverse_bits": {
                    "1": "reverse_bits"
                },
                "reverse_bits_0800040c": {
                    "1": "reverse_bits2",
                    "4": "reverse_bits"
                },
                "reverse_bits_0800042c": {
                    "11": "reverse_bits"
                },
                "set_validation_flag_08001a44": {
                    "11": "set_validation_flag"
                },
                "uVar1": {
                    "1": "data_initialization_result",
                    "12": "data_size",
                    "2": "data_length",
                    "3": "data_count"
                },
                "uVar2": {
                    "1": "input_data",
                    "2": "data_part1",
                    "3": "data2",
                    "6": "result1",
                    "8": "result_low"
                },
                "uVar4": {
                    "1": "result_part2",
                    "2": "data_part2",
                    "4": "result2",
                    "9": "result_high"
                },
                "uVar5": {
                    "1": "conversion_result",
                    "5": "result",
                    "7": "calculation_result"
                },
                "update_data": {
                    "1": "update_data"
                },
                "update_data_08001960": {
                    "11": "update_data"
                },
                "validate_and_return_result": {
                    "1": "validate_and_return_result"
                },
                "validate_and_return_result_08000194": {
                    "1": "validate_and_return_result_2"
                },
                "validate_and_return_result_080009f0": {
                    "2": "validate_and_return_result"
                },
                "validate_and_return_result_08000a04": {
                    "1": "validate_and_return",
                    "2": "validate_and_return_result2",
                    "9": "validate_and_return_result"
                },
                "validation_result": {
                    "1": "validation_result"
                },
                "value_1": {
                    "1": "value_1"
                },
                "value_2": {
                    "1": "value_2"
                }
            },
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\nvoid process_data_08000cd0(void)\n\n{\n  uint data_size;\n  undefined4 result_low;\n  int is_valid;\n  undefined4 result_high;\n  undefined4 extra_result1;\n  undefined4 extra_result2;\n  undefined4 extra_result3;\n  undefined8 calculation_result;\n  \n  data_size = initialize_data();\n  if (DAT_200001b4 < data_size) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    calculation_result = calculate_result(&DAT_2000024c,0);\n    result_high = (undefined4)((ulonglong)calculation_result >> 0x20);\n    result_low = (undefined4)calculation_result;\n    DAT_20000188 = result_low;\n    DAT_2000018c = result_high;\n    is_valid = is_parameter_valid(result_low,result_high,0,0x40c38800);\n    if (((is_valid != 0) || (is_valid = is_parameter_valid(result_low,result_high,0,0x40c38880), is_valid != 0)) ||\n       (is_valid = is_parameter_valid(result_low,result_high,0,0x40c38900), is_valid != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  data_size = initialize_data();\n  result_low = DAT_20000060;\n  if (DAT_200001b0 < data_size) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      is_valid = check_bit_and_return(DAT_20000060);\n      process_data_08000cd0(result_low,is_valid == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      execute_conversion(&DAT_2000036c,DAT_20000250,10);\n      process_string(&DAT_2000036c,&DAT_08007368);\n      process_data_08000cd0(&DAT_2000036c,extra_result1,DAT_20000240,DAT_20000244,2);\n      process_string(&DAT_2000036c,&DAT_08007368);\n      process_data_08000cd0(&DAT_2000036c,extra_result2,DAT_20000188,DAT_2000018c,2);\n      process_string(&DAT_2000036c,&DAT_08007368);\n      calculate_sum(&DAT_2000036c,extra_result3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      process_data_08000cd0(DAT_20000060,1);\n    }\n    process_data_08000cd0(&DAT_20000194);\n    process_string(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    process_data_08000cd0(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      process_string(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      process_data_08000cd0(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      process_and_return_one(&DAT_20000194,0);\n      process_string(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  result_high = DAT_2000018c;\n  result_low = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    is_valid = validate_and_return_result(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (is_valid == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_sum(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_data();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        calculation_result = reverse_bits(DAT_20000258);\n        update_data(&DAT_200001c0,(int)((ulonglong)calculation_result >> 0x20),0,0,calculation_result);\n        calculate_result(&DAT_200001c0,1000);\n        set_validation_flag(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    is_valid = validate_and_return_result(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (is_valid != 0) {\n      calculation_result = initialize_data();\n      DAT_20000254 = (int)calculation_result + 9000;\n      process_input(&DAT_200001c0,(int)((ulonglong)calculation_result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    data_size = initialize_data();\n    if (DAT_20000254 < data_size) {\n      is_valid = initialize_data();\n      DAT_20000254 = is_valid + 9000;\n      calculation_result = calculate_result(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)calculation_result >> 0x20);\n      DAT_20000240 = (undefined4)calculation_result;\n      calculation_result = is_string_empty(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)calculation_result != 0) {\n        process_input(&DAT_200001c0,(int)((ulonglong)calculation_result >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    calculation_result = validate_and_return_result(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)calculation_result != 0) {\n      process_input(&DAT_200001c0,(int)((ulonglong)calculation_result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    is_valid = validate_and_return_result(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (is_valid != 0) {\n      is_valid = initialize_data();\n      DAT_20000180 = is_valid + 1000;\n      process_data_08000cd0(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    data_size = initialize_data();\n    if (DAT_20000180 < data_size) {\n      process_data_08000cd0(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    is_valid = is_input_empty(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (is_valid != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    is_valid = is_parameter_valid(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((is_valid == 0) && (is_valid = is_parameter_valid(result_low,result_high,0,0x40c38880), is_valid == 0)) &&\n       (is_valid = is_parameter_valid(result_low,result_high,0,0x40c38900), is_valid == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    is_valid = process_data_08000cd0(DAT_20000068);\n    if (is_valid == 0) {\n      is_valid = initialize_data();\n      if (0x32 < (uint)(is_valid - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    is_valid = process_data_08000cd0(DAT_20000068);\n    if (is_valid == 0) {\n      DAT_20000190 = initialize_data();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (is_valid = process_data_08000cd0(DAT_20000068), is_valid != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    is_valid = initialize_data();\n    process_data_08000cd0(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(is_valid - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    calculation_result = reverse_bits(is_valid - DAT_2000025c);\n    is_valid = is_input_empty((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (is_valid == 0) {\n      process_data_08000cd0(DAT_20000064,0);\n    }\n    else {\n      process_data_08000cd0(DAT_20000064,1);\n    }\n  }\n  else {\n    process_data_08000cd0(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08000cd0",
            "entrypoint": "0x08000cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "calculate_result_08000194": "calculate_result",
                "calculate_result_080015f8": "calculate_result",
                "calculate_result_08001918": "calculate_result",
                "calculate_sum_08005cd4": "calculate_sum",
                "calculate_sum_08005f40": "calculate_sum",
                "check_bit_and_return_08005890": "check_bit_and_return",
                "execute_conversion_08005d82": "execute_conversion",
                "extraout_r1": "extra_result1",
                "extraout_r1_00": "extra_result2",
                "extraout_r1_01": "extra_result3",
                "iVar3": "is_valid",
                "initialize_data_080058e0": "initialize_data",
                "is_input_empty_080009dc": "is_input_empty",
                "is_parameter_valid_080009c8": "is_parameter_valid",
                "is_string_empty_08000a18": "is_string_empty",
                "process_and_return_one_0800134e": "process_and_return_one",
                "process_data_0800135a": "process_data",
                "process_data_08001366": "process_data",
                "process_data_080016b4": "process_data",
                "process_data_08005754": "process_data",
                "process_data_08005848": "process_data",
                "process_data_08005f2c": "process_data",
                "process_input_080018f8": "process_input",
                "process_string_08005c96": "process_string",
                "reverse_bits_0800040c": "reverse_bits",
                "reverse_bits_0800042c": "reverse_bits",
                "set_validation_flag_08001a44": "set_validation_flag",
                "uVar1": "data_size",
                "uVar2": "result_low",
                "uVar4": "result_high",
                "uVar5": "calculation_result",
                "update_data_08001960": "update_data",
                "validate_and_return_result_080009f0": "validate_and_return_result",
                "validate_and_return_result_08000a04": "validate_and_return_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001294": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "set_parameters"
                },
                "<param_1>": {
                    "1": "object_address"
                },
                "<param_2>": {
                    "1": "value1"
                },
                "<param_3>": {
                    "1": "value2"
                },
                "<param_4>": {
                    "1": "value3"
                },
                "<param_5>": {
                    "1": "value4"
                },
                "FUN_08001294": {
                    "1": "update_parameters",
                    "2": "update_data",
                    "9": "set_parameters"
                },
                "param_1": {
                    "1": "obj_ptr",
                    "18": "object_address",
                    "2": "data_pointer",
                    "5": "base_address"
                },
                "param_2": {
                    "1": "param_value1",
                    "2": "parameter1",
                    "21": "value1",
                    "4": "param2"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "parameter2",
                    "21": "value2",
                    "4": "param3"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "parameter3",
                    "21": "value3",
                    "4": "param4"
                },
                "param_5": {
                    "1": "param_value4",
                    "2": "parameter4",
                    "21": "value4",
                    "4": "param5"
                }
            },
            "called": [],
            "calling": [
                "FUN_080013a4"
            ],
            "code": "\nvoid set_parameters_08001294(int object_address,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(object_address + 0x18) = value1;\n  *(undefined *)(object_address + 0x19) = value2;\n  *(undefined *)(object_address + 0x1a) = value3;\n  *(undefined *)(object_address + 0x1b) = value4;\n  return;\n}\n\n",
            "current_name": "set_parameters_08001294",
            "entrypoint": "0x08001294",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "object_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080012a2": {
            "additional_data": {
                "(*(undefined *)(param_1 + 10))": {
                    "1": "data_pointer"
                },
                "*(undefined *)(param_1 + 10)": {
                    "1": "data_offset",
                    "2": "data_element",
                    "5": "data_value"
                },
                "0": {
                    "1": "part0"
                },
                "1": {
                    "1": "part1"
                },
                "FUN_080012a2": {
                    "1": "process_data_and_print",
                    "11": "process_data",
                    "2": "process_data_from_param",
                    "8": "process_data_multiple_times"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_offset",
                    "3": "data",
                    "4": "data_pointer",
                    "5": "data_address"
                },
                "param_1 + 10": {
                    "1": "data_addr"
                },
                "process_data_08005848": {
                    "1": "process_data_part",
                    "12": "process_data"
                }
            },
            "called": [
                "FUN_08005848"
            ],
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "code": "\nvoid process_data_080012a2(int data_address)\n\n{\n  process_data_080012a2(*(undefined *)(data_address + 10),0);\n  process_data_080012a2(*(undefined *)(data_address + 10),1);\n  process_data_080012a2(*(undefined *)(data_address + 10),0);\n  return;\n}\n\n",
            "current_name": "process_data_080012a2",
            "entrypoint": "0x080012a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080012a2": "process_data_080012a2",
                "param_1": "data_address",
                "process_data_08005848": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080012c0": {
            "additional_data": {
                "FUN_080012c0": {
                    "1": "process_data_in_batches",
                    "12": "process_data_loop",
                    "3": "process_data_batch",
                    "6": "process_and_update_data"
                },
                "param_1": {
                    "1": "data_offset",
                    "10": "data_address",
                    "3": "input_data",
                    "4": "input_address",
                    "5": "data_array"
                },
                "param_2": {
                    "1": "flag_data",
                    "2": "value",
                    "3": "shift_value",
                    "5": "input_value"
                },
                "process_data_080012a2": {
                    "1": "final_process_data",
                    "2": "finalize_data_processing"
                },
                "process_data_08005848": {
                    "1": "process_individual_data",
                    "2": "process_data"
                },
                "uVar1": {
                    "1": "iteration_index",
                    "2": "iteration",
                    "4": "index",
                    "5": "iteration_count",
                    "7": "i"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "code": "\nvoid process_data_loop_080012c0(int data_address,int input_value)\n\n{\n  uint i;\n  \n  for (i = 0; (int)i < 4; i = i + 1) {\n    process_data(*(undefined *)(data_address + i + 0xb),input_value >> (i & 0xff) & 1);\n  }\n  finalize_data_processing(data_address);\n  return;\n}\n\n",
            "current_name": "process_data_loop_080012c0",
            "entrypoint": "0x080012c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080012c0": "process_data_loop_080012c0",
                "param_1": "data_address",
                "param_2": "input_value",
                "process_data_080012a2": "finalize_data_processing",
                "process_data_08005848": "process_data",
                "uVar1": "i"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080012e8": {
            "additional_data": {
                "FUN_080012e8": {
                    "1": "process_bytes",
                    "14": "process_data_loop",
                    "2": "process_data_and_update",
                    "4": "process_data_batch",
                    "7": "process_data"
                },
                "param_1": {
                    "1": "data_offset",
                    "12": "data_address",
                    "2": "input_data",
                    "3": "data_ptr",
                    "6": "data_array"
                },
                "param_2": {
                    "1": "shift_value",
                    "2": "flags",
                    "3": "bit_mask",
                    "4": "flag",
                    "6": "bitmask"
                },
                "process_data_080012a2": {
                    "1": "cleanup_process_data",
                    "2": "finalize_processing"
                },
                "process_data_08005848": {
                    "1": "process_data"
                },
                "uVar1": {
                    "1": "iteration_index",
                    "2": "loop_index",
                    "3": "iteration",
                    "4": "iteration_count",
                    "5": "i",
                    "6": "index"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "calling": [
                "FUN_08001310"
            ],
            "code": "\nvoid process_data_loop_080012e8(int data_address,int bitmask)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 8; index = index + 1) {\n    process_byte(*(undefined *)(data_address + index + 0xb),bitmask >> (index & 0xff) & 1);\n  }\n  finalize_processing(data_address);\n  return;\n}\n\n",
            "current_name": "process_data_loop_080012e8",
            "entrypoint": "0x080012e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080012e8": "process_data_loop_080012e8",
                "param_1": "data_address",
                "param_2": "bitmask",
                "process_data_080012a2": "finalize_processing",
                "process_data_08005848": "process_byte",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001310": {
            "additional_data": {
                "*(byte *)(param_1 + 0x13)": {
                    "1": "flags",
                    "2": "byte_value"
                },
                "*(char *)(param_1 + 9)": {
                    "1": "data_value2",
                    "2": "data_2"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "data_value1",
                    "2": "data_1"
                },
                "0x10": {
                    "1": "bit_mask"
                },
                "FUN_08001310": {
                    "1": "process_and_improve_data",
                    "2": "process_and_loop_data",
                    "23": "process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "data_address",
                    "2": "data_param",
                    "4": "data_ptr",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "size_param",
                    "12": "data_size",
                    "2": "size",
                    "4": "data_value",
                    "5": "flags"
                },
                "param_3": {
                    "1": "param_value_1",
                    "3": "arg1",
                    "5": "param1",
                    "6": "param_a",
                    "7": "param3"
                },
                "param_4": {
                    "1": "data_param",
                    "3": "arg2",
                    "5": "param2",
                    "6": "param_4",
                    "7": "param4"
                },
                "process_data_08005848": {
                    "1": "process_data_08005848",
                    "2": "process_data_helper",
                    "4": "process_data"
                },
                "process_data_loop_080012c0": {
                    "1": "data_loop",
                    "5": "process_data_loop"
                },
                "process_data_loop_080012e8": {
                    "1": "loop_process_data_080012e8",
                    "2": "process_data_loop_advanced",
                    "5": "process_data_loop2"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "code": "\nvoid process_data_08001310(int data_address,uint data_size,undefined4 param3,undefined4 param4)\n\n{\n  process_data_08001310(*(undefined *)(data_address + 8),param3,param3,param4,param4);\n  if (*(char *)(data_address + 9) != -1) {\n    process_data_08001310(*(char *)(data_address + 9),0);\n  }\n  if ((*(byte *)(data_address + 0x13) & 0x10) == 0) {\n    process_data_08001310_loop(data_address,data_size >> 4);\n    process_data_08001310_loop(data_address,data_size);\n    return;\n  }\n  process_data_08001310_loop2(data_address,data_size);\n  return;\n}\n\n",
            "current_name": "process_data_08001310",
            "entrypoint": "0x08001310",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_08005848": "process_data",
                "process_data_loop_080012c0": "process_data_loop",
                "process_data_loop_080012e8": "process_data_loop2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800134e": {
            "additional_data": {
                "1": {
                    "2": "is_reverse"
                },
                "FUN_0800134e": {
                    "1": "prepare_data",
                    "11": "process_and_return_one",
                    "2": "process_and_return_result",
                    "3": "process_and_return_success",
                    "5": "process_and_return_status",
                    "6": "process_and_return"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input1",
                    "3": "data_1",
                    "4": "input_param",
                    "8": "input_data",
                    "9": "input_1"
                },
                "param_2": {
                    "1": "processing_info",
                    "2": "output_data",
                    "3": "data_2",
                    "9": "input_2"
                },
                "param_3": {
                    "1": "constant",
                    "3": "input_3",
                    "7": "unused_param"
                },
                "param_4": {
                    "1": "output_buffer",
                    "2": "output_param",
                    "3": "data_4",
                    "5": "input_4"
                },
                "process_data_08001310": {
                    "10": "process_data"
                },
                "return": {
                    "1": "status"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nundefined4 process_and_return_one_0800134e(undefined4 input_1,undefined4 input_2,undefined4 unused_param,undefined4 input_4)\n\n{\n  process_data(input_1,input_2,1,input_4,input_4);\n  status 1;\n}\n\n",
            "current_name": "process_and_return_one_0800134e",
            "entrypoint": "0x0800134e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800134e": "process_and_return_one_0800134e",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_param",
                "param_4": "input_4",
                "process_data_08001310": "process_data",
                "return": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800135a": {
            "additional_data": {
                "FUN_0800135a": {
                    "1": "process_and_send_data",
                    "17": "process_data",
                    "3": "process_and_store_data",
                    "8": "process_and_return_data"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input",
                    "3": "input_param",
                    "4": "data_ptr",
                    "7": "input_data",
                    "8": "data"
                },
                "param_2": {
                    "1": "data_param2",
                    "2": "size",
                    "3": "param2",
                    "5": "unused_param",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "flag2",
                    "2": "param2",
                    "3": "param3",
                    "4": "unused_param",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "output_buffer",
                    "2": "output_ptr",
                    "3": "param_4",
                    "5": "output_param",
                    "6": "output_data"
                },
                "process_data_08001310": {
                    "1": "process_data_helper"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_data_0800135a(undefined4 data,undefined4 param_2,undefined4 param_3,undefined4 output_data)\n\n{\n  process_data_0800135a_helper(data,1,0,output_data,output_data);\n  return;\n}\n\n",
            "current_name": "process_data_0800135a",
            "entrypoint": "0x0800135a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800135a": "process_data_0800135a",
                "param_1": "data",
                "param_4": "output_data",
                "process_data_08001310": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001366": {
            "additional_data": {
                "FUN_08001366": {
                    "1": "process_and_parse_data",
                    "23": "process_data",
                    "6": "process_and_send_data"
                },
                "cVar1": {
                    "1": "data_byte",
                    "2": "selected_char",
                    "3": "current_byte",
                    "4": "byte_value",
                    "6": "char_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data",
                    "3": "data_pointer",
                    "6": "data_ptr",
                    "8": "data_address"
                },
                "param_2": {
                    "1": "arg2",
                    "10": "flag",
                    "2": "char_param",
                    "4": "offset"
                },
                "param_3": {
                    "1": "max_offset",
                    "2": "max_value",
                    "3": "size",
                    "4": "limit",
                    "7": "length"
                },
                "param_4": {
                    "1": "unknown_param",
                    "2": "additional_data",
                    "3": "data",
                    "6": "param",
                    "7": "param_4"
                },
                "process_data_08001310": {
                    "1": "process_data_08001310",
                    "2": "process_data",
                    "3": "process_data_helper"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_data_08001366(int data_address,char flag,uint length,undefined4 param_4)\n\n{\n  char char_value;\n  \n  if (3 < length) {\n    length = 3;\n  }\n  if ((int)(uint)*(byte *)(data_address + 0x17) <= (int)length) {\n    length = *(byte *)(data_address + 0x17) - 1 & 0xff;\n  }\n  char_value = *(char *)(length + data_address + 0x18);\n  process_data_08001366_helper(data_address,flag + char_value | 0x80,0,char_value,param_4);\n  return;\n}\n\n",
            "current_name": "process_data_08001366",
            "entrypoint": "0x08001366",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001366": "process_data_08001366",
                "cVar1": "char_value",
                "param_1": "data_address",
                "param_2": "flag",
                "param_3": "length",
                "process_data_08001310": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800138e": {
            "additional_data": {
                "FUN_0800138e": {
                    "1": "update_flags",
                    "2": "update_flag_and_process_data",
                    "4": "update_data_and_process",
                    "5": "set_flag_and_process_data",
                    "6": "update_and_process_data",
                    "8": "update_data"
                },
                "bVar1": {
                    "1": "previous_value",
                    "2": "byte_value",
                    "3": "current_byte",
                    "4": "original_value",
                    "7": "current_value"
                },
                "param_1": {
                    "1": "input_address",
                    "6": "data_pointer",
                    "7": "data",
                    "8": "data_address"
                },
                "param_2": {
                    "1": "param_2",
                    "10": "param2",
                    "3": "unused_param"
                },
                "param_3": {
                    "1": "arg2",
                    "10": "param3",
                    "2": "unused_param",
                    "3": "unused_param2"
                },
                "param_4": {
                    "1": "arg3",
                    "13": "param4",
                    "2": "size",
                    "3": "param"
                },
                "process_data_08001310": {
                    "9": "process_data"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_080013a4"
            ],
            "code": "\nvoid update_data_0800138e(int data_address,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte current_value;\n  \n  current_value = *(byte *)(data_address + 0x14);\n  *(byte *)(data_address + 0x14) = current_value | 4;\n  process_data(data_address,current_value | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "current_name": "update_data_0800138e",
            "entrypoint": "0x0800138e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800138e": "update_data_0800138e",
                "bVar1": "current_value",
                "param_1": "data_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_08001310": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080013a4": {
            "additional_data": {
                "*(byte *)(param_1 + 0x13)": {
                    "1": "byte_value1"
                },
                "*(char *)(param_1 + 0x17)": {
                    "1": "char_value"
                },
                "*(char *)(param_1 + 9)": {
                    "1": "char_value2"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "undefined_value3"
                },
                "*(undefined *)(param_1 + 0x15)": {
                    "1": "undefined_value4"
                },
                "*(undefined *)(param_1 + 10)": {
                    "1": "undefined_value2"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "undefined_value1"
                },
                "FUN_080013a4": {
                    "1": "process_input_data",
                    "18": "process_data",
                    "7": "process_parameters"
                },
                "iVar1": {
                    "1": "variable1",
                    "13": "loop_counter",
                    "2": "loop_var1",
                    "3": "loop_index",
                    "8": "loop_count"
                },
                "iVar2": {
                    "1": "loop_end_index",
                    "12": "index",
                    "2": "inner_loop_counter"
                },
                "param_1": {
                    "1": "input_data",
                    "14": "data",
                    "2": "data_pointer",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "param",
                    "13": "param2",
                    "2": "param1",
                    "7": "value1"
                },
                "param_3": {
                    "1": "length",
                    "2": "param2",
                    "3": "flag",
                    "4": "count",
                    "6": "value2",
                    "8": "param3"
                },
                "param_4": {
                    "1": "param_4",
                    "10": "param4",
                    "2": "param3",
                    "3": "condition",
                    "6": "value3",
                    "7": "flag"
                },
                "process_data_08001310": {
                    "1": "process_data_condition",
                    "2": "process_data_reverse"
                },
                "process_data_0800135a": {
                    "1": "process_data2",
                    "2": "process_data_final"
                },
                "process_data_080057b4": {
                    "1": "process_data_func",
                    "2": "process_data"
                },
                "process_data_08005848": {
                    "1": "process_data_zero",
                    "2": "process_data2"
                },
                "process_data_loop_080012c0": {
                    "1": "process_data_loop_condition",
                    "4": "process_data_loop"
                },
                "set_parameters_08001294": {
                    "1": "set_config_parameters",
                    "4": "set_parameters"
                },
                "update_data_0800138e": {
                    "5": "update_data"
                }
            },
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "code": "\nvoid process_data_080013a4(int data,int param2,int param3,int param4)\n\n{\n  int loop_counter;\n  int index;\n  \n  if (1 < param3) {\n    *(byte *)(data + 0x13) = *(byte *)(data + 0x13) | 8;\n  }\n  *(char *)(data + 0x17) = (char)param3;\n  set_parameters(data,0,0x40,param2,param2 + 0x40);\n  if ((param4 != 0) && (param3 == 1)) {\n    *(byte *)(data + 0x13) = *(byte *)(data + 0x13) | 4;\n  }\n  process_data_080013a4(*(undefined *)(data + 8),1);\n  if (*(char *)(data + 9) != -1) {\n    process_data_080013a4(*(char *)(data + 9),1);\n  }\n  process_data_080013a4(*(undefined *)(data + 10),1);\n  index = 0;\n  while( true ) {\n    if ((*(byte *)(data + 0x13) & 0x10) == 0) {\n      loop_counter = 4;\n    }\n    else {\n      loop_counter = 8;\n    }\n    if (loop_counter <= index) break;\n    process_data_080013a4(*(undefined *)(data + index + 0xb),1);\n    index = index + 1;\n  }\n  process_data_080013a42(*(undefined *)(data + 8),0);\n  process_data_080013a42(*(undefined *)(data + 10),0);\n  if (*(char *)(data + 9) != -1) {\n    process_data_080013a42(*(char *)(data + 9),0);\n  }\n  if ((*(byte *)(data + 0x13) & 0x10) == 0) {\n    process_data_080013a4_loop(data,3);\n    process_data_080013a4_loop(data,3);\n    process_data_080013a4_loop(data,3);\n    process_data_080013a4_loop(data,2);\n  }\n  else {\n    process_data_080013a4_reverse(data,*(byte *)(data + 0x13) | 0x20,0);\n    process_data_080013a4_reverse(data,*(byte *)(data + 0x13) | 0x20,0);\n    process_data_080013a4_reverse(data,*(byte *)(data + 0x13) | 0x20,0);\n  }\n  process_data_080013a4_reverse(data,*(byte *)(data + 0x13) | 0x20,0);\n  *(undefined *)(data + 0x14) = 4;\n  update_data(data);\n  process_data_080013a4_final(data);\n  *(undefined *)(data + 0x15) = 2;\n  process_data_080013a4_reverse(data,6,0);\n  return;\n}\n\n",
            "current_name": "process_data_080013a4",
            "entrypoint": "0x080013a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080013a4": "process_data_080013a4",
                "iVar1": "loop_counter",
                "iVar2": "index",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_08001310": "process_data_reverse",
                "process_data_0800135a": "process_data_final",
                "process_data_080057b4": "process_data",
                "process_data_08005848": "process_data2",
                "process_data_loop_080012c0": "process_data_loop",
                "set_parameters_08001294": "set_parameters",
                "update_data_0800138e": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014ba": {
            "additional_data": {
                "0x10": {
                    "1": "buffer_length"
                },
                "FUN_080014ba": {
                    "1": "fill_data_and_process",
                    "10": "update_data",
                    "2": "copy_data",
                    "3": "store_params_and_process_data",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "buffer",
                    "10": "data_address",
                    "2": "dst",
                    "5": "data_pointer",
                    "7": "data_ptr"
                },
                "param_10": {
                    "1": "value6",
                    "16": "value8",
                    "2": "param10",
                    "5": "value_8"
                },
                "param_11": {
                    "1": "value7",
                    "16": "value9",
                    "2": "param11",
                    "5": "value_9"
                },
                "param_12": {
                    "1": "parameter12",
                    "16": "value10",
                    "2": "param12",
                    "5": "value_10"
                },
                "param_13": {
                    "1": "param_13",
                    "16": "value11",
                    "2": "param13",
                    "5": "value_11"
                },
                "param_2": {
                    "1": "update_flag",
                    "2": "is_zero",
                    "26": "flag"
                },
                "param_3": {
                    "1": "field_1",
                    "16": "value1",
                    "2": "param3",
                    "5": "value_1"
                },
                "param_4": {
                    "1": "flag_value",
                    "16": "value2",
                    "2": "param4",
                    "5": "value_2"
                },
                "param_5": {
                    "1": "param_5",
                    "16": "value3",
                    "2": "param5",
                    "5": "value_3"
                },
                "param_6": {
                    "1": "value2",
                    "16": "value4",
                    "2": "param6",
                    "5": "value_4"
                },
                "param_7": {
                    "1": "data5",
                    "16": "value5",
                    "2": "param7",
                    "5": "value_5"
                },
                "param_8": {
                    "1": "byte_param_5",
                    "16": "value6",
                    "2": "param8",
                    "5": "value_6"
                },
                "param_9": {
                    "1": "data7",
                    "16": "value7",
                    "2": "param9",
                    "5": "value_7"
                },
                "process_data_080013a4": {
                    "1": "process_buffer_data"
                }
            },
            "called": [
                "FUN_080013a4"
            ],
            "calling": [
                "FUN_08001510"
            ],
            "code": "\nvoid update_data_080014ba(int data_address,int flag,undefined value1,undefined4 value2,undefined value3,\n                 undefined value4,undefined value5,undefined value6,undefined value7,\n                 undefined value8,undefined value9,undefined value10,undefined value11)\n\n{\n  *(undefined *)(data_address + 8) = value1;\n  *(char *)(data_address + 9) = (char)value2;\n  *(undefined *)(data_address + 10) = value3;\n  *(undefined *)(data_address + 0xb) = value4;\n  *(undefined *)(data_address + 0xc) = value5;\n  *(undefined *)(data_address + 0xd) = value6;\n  *(undefined *)(data_address + 0xe) = value7;\n  *(undefined *)(data_address + 0xf) = value8;\n  *(undefined *)(data_address + 0x10) = value9;\n  *(undefined *)(data_address + 0x11) = value10;\n  *(undefined *)(data_address + 0x12) = value11;\n  if (flag == 0) {\n    *(undefined *)(data_address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(data_address + 0x13) = 0;\n  }\n  process_buffer_data(data_address,0x10,1,0,value2);\n  return;\n}\n\n",
            "current_name": "update_data_080014ba",
            "entrypoint": "0x080014ba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014ba": "update_data_080014ba",
                "param_1": "data_address",
                "param_10": "value8",
                "param_11": "value9",
                "param_12": "value10",
                "param_13": "value11",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "value7",
                "process_data_080013a4": "process_buffer_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001510": {
            "additional_data": {
                "0": {
                    "1": "padding4"
                },
                "0xff": {
                    "1": "constant"
                },
                "1": {
                    "1": "index"
                },
                "FUN_08001510": {
                    "1": "initialize_parameters",
                    "2": "initialize_and_process_data",
                    "4": "initialize_process",
                    "7": "initialize_and_update_data",
                    "9": "initialize_data"
                },
                "param_1": {
                    "1": "result_array",
                    "12": "data_array",
                    "2": "output_buffer",
                    "3": "process_data",
                    "4": "output_array"
                },
                "param_2": {
                    "1": "data_1",
                    "2": "value_1",
                    "7": "value_2",
                    "9": "value1"
                },
                "param_3": {
                    "1": "flag_value",
                    "2": "value_2",
                    "7": "value_3",
                    "9": "value2"
                },
                "param_4": {
                    "1": "value2",
                    "2": "value_3",
                    "7": "value_4",
                    "9": "value3"
                },
                "param_5": {
                    "1": "param_4_value",
                    "2": "value4",
                    "3": "value_5",
                    "4": "param_5",
                    "6": "param5"
                },
                "param_6": {
                    "1": "input_data_6",
                    "2": "value5",
                    "3": "flag2",
                    "4": "param_6",
                    "6": "param6"
                },
                "param_7": {
                    "1": "byte3",
                    "2": "value6",
                    "3": "value_7",
                    "4": "param_7",
                    "6": "param7"
                },
                "update_data_080014ba": {
                    "3": "update_data"
                }
            },
            "called": [
                "FUN_080014ba"
            ],
            "calling": [
                "FUN_08000b08"
            ],
            "code": "\nundefined4 *\ninitialize_data_08001510(undefined4 *data_array,undefined4 value1,undefined4 value2,undefined4 value3,\n            undefined param5,undefined param6,undefined param7)\n\n{\n  data_array[1] = 0;\n  *data_array = &PTR_process_and_return_one_0800134e_1_080073f8;\n  update_data(data_array,1,value1,0xff,value2,value3,param5,param6,param7,0,0,0,0);\n  return data_array;\n}\n\n",
            "current_name": "initialize_data_08001510",
            "entrypoint": "0x08001510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001510": "initialize_data_08001510",
                "param_1": "data_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "update_data_080014ba": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001550": {
            "additional_data": {
                "FUN_08001550": {
                    "1": "process_data_and_apply",
                    "14": "process_and_execute_data",
                    "2": "process_and_call_functions",
                    "7": "process_data"
                },
                "iVar1": {
                    "1": "iteration_counter",
                    "27": "index"
                },
                "param_1": {
                    "1": "data_handler",
                    "10": "data_ptr",
                    "2": "data_buffer",
                    "3": "data_array",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "length",
                    "10": "data_length",
                    "11": "data_size",
                    "2": "flags",
                    "4": "size"
                },
                "param_3": {
                    "1": "data_source",
                    "2": "buffer",
                    "7": "data_address",
                    "8": "data_offset"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_and_execute_data_08001550(undefined4 *data_ptr,uint data_size,int data_offset)\n\n{\n  int index;\n  \n  process_data_08001310(data_ptr,(data_size & 7) << 3 | 0x40,0);\n  for (index = 0; index < 8; index = index + 1) {\n    (**(code **)*data_ptr)(data_ptr,*(undefined *)(data_offset + index));\n  }\n  return;\n}\n\n",
            "current_name": "process_and_execute_data_08001550",
            "entrypoint": "0x08001550",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001550": "process_and_execute_data_08001550",
                "iVar1": "index",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800157c": {
            "additional_data": {
                "FUN_0800157c": {
                    "1": "write_and_process_data",
                    "12": "process_and_store_data",
                    "2": "update_data",
                    "3": "process_and_return_data",
                    "6": "process_and_update_data"
                },
                "param_1": {
                    "1": "output_data",
                    "2": "buffer",
                    "3": "output_array",
                    "6": "output_buffer",
                    "9": "data_buffer"
                },
                "param_2": {
                    "1": "data_1",
                    "10": "value_1",
                    "2": "value1",
                    "3": "input_1"
                },
                "param_3": {
                    "1": "data_byte_1",
                    "10": "value_2",
                    "2": "data_1",
                    "3": "input_2"
                },
                "param_4": {
                    "1": "second_data",
                    "10": "value_3",
                    "2": "input_value_2",
                    "3": "input_3"
                },
                "process_data_080057b4": {
                    "1": "process_value",
                    "2": "process_data_1",
                    "4": "process_data"
                },
                "process_data_08005848": {
                    "1": "process_data_alt",
                    "2": "process_data_2"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "calling": [
                "FUN_08000b08"
            ],
            "code": "\nundefined * process_and_store_data_0800157c(undefined *data_array,undefined4 value_1,undefined value_2,undefined value_3)\n\n{\n  *data_array = (char)value_1;\n  data_array[1] = value_2;\n  data_array[2] = value_3;\n  process_data(value_1,0);\n  process_data(data_array[1],1);\n  process_data(data_array[2],1);\n  process_data_2(data_array[1],1);\n  process_data_2(data_array[2],0);\n  return data_array;\n}\n\n",
            "current_name": "process_and_store_data_0800157c",
            "entrypoint": "0x0800157c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800157c": "process_and_store_data_0800157c",
                "param_1": "data_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "process_data_080057b4": "process_data",
                "process_data_08005848": "process_data_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b2": {
            "additional_data": {
                "FUN_080015b2": {
                    "1": "process_reverse_bits",
                    "2": "extract_bit_pattern",
                    "3": "extract_bits",
                    "5": "reverse_bits"
                },
                "check_bit_and_return_08005890": {
                    "1": "check_bit_and_return"
                },
                "iVar1": {
                    "1": "bit",
                    "11": "bit_check_result",
                    "14": "bit_value",
                    "5": "bit_result"
                },
                "param_1": {
                    "1": "input_arr",
                    "10": "data",
                    "3": "input_array",
                    "7": "data_array",
                    "8": "input_data"
                },
                "process_data_08005848": {
                    "1": "process_data"
                },
                "uVar2": {
                    "1": "index",
                    "21": "bit_position",
                    "9": "bit_index"
                },
                "uVar3": {
                    "1": "bit_values",
                    "2": "bit_mask",
                    "4": "extracted_bits",
                    "6": "reversed_bits",
                    "7": "result"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "calling": [
                "FUN_080015f8"
            ],
            "code": "\nuint extract_bitmask_080015b2(undefined *data)\n\n{\n  int bit_value;\n  uint bit_position;\n  uint result;\n  \n  process_data(data[1],0);\n  result = 0;\n  for (bit_position = 0x1f; -1 < (int)bit_position; bit_position = bit_position - 1) {\n    process_data(data[2],1);\n    bit_value = check_bit_and_return(*data);\n    if (bit_value != 0) {\n      result = result | 1 << (bit_position & 0xff);\n    }\n    process_data(data[2],0);\n  }\n  process_data(data[1],1);\n  return result;\n}\n\n",
            "current_name": "extract_bitmask_080015b2",
            "entrypoint": "0x080015b2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015b2": "extract_bitmask_080015b2",
                "check_bit_and_return_08005890": "check_bit_and_return",
                "iVar1": "bit_value",
                "param_1": "data",
                "process_data_08005848": "process_data",
                "uVar2": "bit_position",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015f8": {
            "additional_data": {
                "FUN_080015f8": {
                    "1": "calculate_result_and_extract",
                    "18": "calculate_result",
                    "2": "calculate_result_with_flags",
                    "4": "calculate_result_based_on_bitmask"
                },
                "calculate_floating_point_0800074c": {
                    "1": "calculate_result_3",
                    "4": "calculate_floating_point"
                },
                "calculate_result_08000194": {
                    "1": "calculate_result",
                    "3": "calculate_result_1"
                },
                "calculate_result_080004f8": {
                    "1": "calculate_result_v2",
                    "3": "calculate_result_2"
                },
                "extract_bitmask_080015b2": {
                    "5": "extract_bitmask"
                },
                "param_1": {
                    "1": "param",
                    "2": "param1",
                    "3": "input_flag",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "param",
                    "2": "flag_param",
                    "4": "mode",
                    "5": "arg2",
                    "7": "flag"
                },
                "param_3": {
                    "1": "value2",
                    "2": "param3",
                    "4": "param_3",
                    "5": "arg3"
                },
                "param_4": {
                    "1": "unused_param_3",
                    "2": "unused_param_2",
                    "4": "param_4",
                    "5": "arg4"
                },
                "reverse_bits_0800040c": {
                    "5": "reverse_bits"
                },
                "uVar1": {
                    "31": "bitmask"
                },
                "uVar2": {
                    "31": "result"
                }
            },
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nundefined8 calculate_result_080015f8(undefined4 input_param,int flag,undefined4 unused_param,undefined4 arg4)\n\n{\n  uint bitmask;\n  undefined8 result;\n  \n  bitmask = extract_bitmask();\n  if ((bitmask & 0x10000) == 0) {\n    bitmask = bitmask >> 0x12;\n    result = reverse_bits(bitmask & 0x1fff);\n    if ((bitmask & 0x2000) != 0) {\n      result = reverse_bits(~bitmask & 0x1fff);\n      result = calculate_result_080015f8_1((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,arg4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = calculate_result_080015f8_2((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (flag == 1) {\n      result = calculate_result_080015f8_2((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = calculate_floating_point((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = calculate_result_080015f8_1((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    bitmask = bitmask & 7;\n    if (bitmask == 2) {\n      return 0x40c3888000000000;\n    }\n    if (bitmask == 4) {\n      return 0x40c3890000000000;\n    }\n    if (bitmask != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_result_080015f8",
            "entrypoint": "0x080015f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015f8": "calculate_result_080015f8",
                "calculate_floating_point_0800074c": "calculate_floating_point",
                "calculate_result_08000194": "calculate_result_1",
                "calculate_result_080004f8": "calculate_result_2",
                "extract_bitmask_080015b2": "extract_bitmask",
                "param_1": "input_param",
                "param_2": "flag",
                "param_3": "unused_param",
                "param_4": "arg4",
                "reverse_bits_0800040c": "reverse_bits",
                "uVar1": "bitmask",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016b4": {
            "additional_data": {
                "FUN_080016b4": {
                    "1": "calculate_and_update_result",
                    "13": "process_data",
                    "2": "process_character",
                    "7": "calculate_result"
                },
                "cVar1": {
                    "1": "is_empty",
                    "14": "result",
                    "4": "flag"
                },
                "cVar11": {
                    "1": "is_initialized",
                    "4": "result"
                },
                "calculate_08000190": {
                    "1": "calculate_value1"
                },
                "calculate_result_08000194": {
                    "1": "calculate_result2"
                },
                "calculate_result_080004f8": {
                    "1": "calculate_result1"
                },
                "iVar2": {
                    "1": "data_init_result",
                    "2": "data_initialization",
                    "6": "data_initialized",
                    "8": "initialized_data"
                },
                "iVar3": {
                    "1": "string_empty_check",
                    "2": "is_string_empty",
                    "24": "is_empty"
                },
                "is_input_empty_080009dc": {
                    "1": "is_input_empty"
                },
                "is_string_empty_08000a18": {
                    "1": "is_string_empty"
                },
                "local_38": {
                    "1": "temp9",
                    "2": "temp15",
                    "4": "local_var1"
                },
                "param_1": {
                    "1": "input_character",
                    "10": "input_data",
                    "2": "input_param",
                    "6": "input",
                    "8": "data"
                },
                "uStack_34": {
                    "1": "calculation1_high_temp",
                    "2": "temp16",
                    "4": "local_var2"
                },
                "uVar10": {
                    "1": "default_result2",
                    "2": "temp6",
                    "3": "temp_var7",
                    "4": "temp7"
                },
                "uVar11": {
                    "1": "is_null",
                    "2": "temp8"
                },
                "uVar12": {
                    "1": "init_value1",
                    "2": "var1"
                },
                "uVar13": {
                    "1": "temp9",
                    "2": "result4"
                },
                "uVar14": {
                    "1": "calculation1_high",
                    "2": "temp_var_10"
                },
                "uVar15": {
                    "1": "calculation1",
                    "2": "temp8",
                    "3": "calc_result1",
                    "5": "result1"
                },
                "uVar16": {
                    "1": "result_2",
                    "2": "temp9",
                    "3": "calc_result2",
                    "5": "result2"
                },
                "uVar17": {
                    "1": "temp_var_13",
                    "12": "final_result",
                    "2": "temp_var17",
                    "3": "calculation_result3"
                },
                "uVar18": {
                    "1": "tmp9",
                    "2": "temp14",
                    "3": "calculation_result4"
                },
                "uVar4": {
                    "1": "result_high_bits",
                    "10": "temp1",
                    "2": "temp_var_1",
                    "3": "temp_var1"
                },
                "uVar5": {
                    "1": "data_1",
                    "2": "ptr1",
                    "3": "temp_var2",
                    "9": "temp2"
                },
                "uVar6": {
                    "1": "var2",
                    "2": "temp_var6",
                    "3": "temp_var3",
                    "4": "result1",
                    "7": "temp3"
                },
                "uVar7": {
                    "1": "result_2",
                    "2": "temp_var_4",
                    "3": "temp_var4",
                    "4": "temp4"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "temp_var_5",
                    "3": "temp4",
                    "4": "temp5"
                },
                "uVar9": {
                    "1": "default_result2",
                    "2": "temp_var_6",
                    "3": "temp_var6",
                    "4": "temp6"
                }
            },
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nchar process_data_080016b4(int input_data)\n\n{\n  char result;\n  int data;\n  int is_empty;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  char result;\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 temp_var_10;\n  undefined8 result1;\n  undefined8 result2;\n  undefined8 final_result;\n  undefined8 temp_result;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  \n  result = *(char *)(input_data + 0x70);\n  if (result != '\\0') {\n    data = initialize_data_080058e0();\n    if ((uint)(data - *(int *)(input_data + 0x44)) < *(uint *)(input_data + 0x58)) {\n      result = '\\0';\n    }\n    else {\n      temp2 = **(undefined4 **)(input_data + 0x38);\n      temp5 = (*(undefined4 **)(input_data + 0x38))[1];\n      result1 = calculate_value1(**(undefined4 **)(input_data + 0x40),(*(undefined4 **)(input_data + 0x40))[1])\n      ;\n      temp_var_10 = (undefined4)((ulonglong)result1 >> 0x20);\n      result2 = calculate_value1(temp2,temp5,*(undefined4 *)(input_data + 0x50),\n                            *(undefined4 *)(input_data + 0x54));\n      temp1 = (undefined4)((ulonglong)result2 >> 0x20);\n      final_result = calculate_result1((int)result1,temp_var_10,*(undefined4 *)(input_data + 0x20),\n                            *(undefined4 *)(input_data + 0x24));\n      final_result = calculate_result2((int)final_result,(int)((ulonglong)final_result >> 0x20),\n                            *(undefined4 *)(input_data + 0x48),*(undefined4 *)(input_data + 0x4c));\n      *(undefined8 *)(input_data + 0x48) = final_result;\n      result = *(char *)(input_data + 0x71);\n      if (result == '\\0') {\n        temp_result = calculate_result1((int)result2,temp1,*(undefined4 *)(input_data + 0x18),\n                              *(undefined4 *)(input_data + 0x1c));\n        final_result = calculate_value1((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                              (int)((ulonglong)temp_result >> 0x20));\n        *(undefined8 *)(input_data + 0x48) = final_result;\n      }\n      temp3 = *(undefined4 *)(input_data + 0x48);\n      temp6 = *(undefined4 *)(input_data + 0x4c);\n      input1 = *(undefined4 *)(undefined8 *)(input_data + 0x68);\n      input2 = *(undefined4 *)(input_data + 0x6c);\n      final_result = *(undefined8 *)(input_data + 0x68);\n      is_empty = is_string_empty(temp3,temp6,input1,input2);\n      if (is_empty == 0) {\n        temp4 = *(undefined4 *)(input_data + 0x60);\n        temp7 = *(undefined4 *)(input_data + 100);\n        is_empty = is_input_empty(temp3,temp6);\n        if (is_empty != 0) {\n          *(undefined4 *)(input_data + 0x48) = temp4;\n          *(undefined4 *)(input_data + 0x4c) = temp7;\n        }\n      }\n      else {\n        *(undefined4 *)(input_data + 0x48) = input1;\n        *(undefined4 *)(input_data + 0x4c) = input2;\n      }\n      if (result == '\\0') {\n        result1 = 0;\n      }\n      else {\n        result1 = calculate_result1((int)result1,temp_var_10,*(undefined4 *)(input_data + 0x18),\n                              *(undefined4 *)(input_data + 0x1c));\n      }\n      local_var2 = (undefined4)((ulonglong)result1 >> 0x20);\n      local_var1 = (undefined4)result1;\n      temp_var_10 = *(undefined4 *)(input_data + 0x48);\n      temp3 = *(undefined4 *)(input_data + 0x4c);\n      result1 = calculate_result1((int)result2,temp1,*(undefined4 *)(input_data + 0x28),\n                            *(undefined4 *)(input_data + 0x2c));\n      result1 = calculate_value1(temp_var_10,temp3,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      result1 = calculate_result2(local_var1,local_var2,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      temp_var_10 = (undefined4)((ulonglong)result1 >> 0x20);\n      is_empty = is_input_empty(input1,input2,(int)result1,temp_var_10);\n      if (is_empty == 0) {\n        final_result = *(undefined8 *)(input_data + 0x60);\n        is_empty = is_input_empty((int)result1,temp_var_10,*(undefined4 *)(undefined8 *)(input_data + 0x60),\n                             *(undefined4 *)(input_data + 100));\n        if (is_empty == 0) {\n          final_result = result1;\n        }\n      }\n      **(undefined8 **)(input_data + 0x3c) = final_result;\n      *(undefined4 *)(input_data + 0x50) = temp2;\n      *(undefined4 *)(input_data + 0x54) = temp5;\n      *(int *)(input_data + 0x44) = data;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_080016b4",
            "entrypoint": "0x080016b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016b4": "process_data_080016b4",
                "cVar1": "result",
                "cVar11": "result",
                "calculate_08000190": "calculate_value1",
                "calculate_result_08000194": "calculate_result2",
                "calculate_result_080004f8": "calculate_result1",
                "iVar2": "data",
                "iVar3": "is_empty",
                "is_input_empty_080009dc": "is_input_empty",
                "is_string_empty_08000a18": "is_string_empty",
                "local_38": "local_var1",
                "param_1": "input_data",
                "uStack_34": "local_var2",
                "uVar10": "temp7",
                "uVar12": "input1",
                "uVar13": "input2",
                "uVar14": "temp_var_10",
                "uVar15": "result1",
                "uVar16": "result2",
                "uVar17": "final_result",
                "uVar18": "temp_result",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001814": {
            "additional_data": {
                "FUN_08001814": {
                    "1": "initialize_function",
                    "17": "process_input",
                    "3": "process_input_data",
                    "7": "process_inputs"
                },
                "bVar4": {
                    "1": "is_not_equal_to_one",
                    "2": "is_not_equal_one",
                    "3": "is_flag_true",
                    "8": "is_flag_set"
                },
                "calculate_08000190": {
                    "1": "calculate_something",
                    "2": "calculate"
                },
                "calculate_floating_point_0800074c": {
                    "4": "calculate_floating_point"
                },
                "calculate_result_080004f8": {
                    "4": "calculate_result"
                },
                "iVar1": {
                    "1": "is_empty_input",
                    "16": "is_empty",
                    "4": "is_empty1",
                    "5": "is_input_empty_result"
                },
                "is_input_empty_080009dc": {
                    "1": "check_if_input_empty",
                    "2": "is_input_empty"
                },
                "param_1": {
                    "14": "output_array",
                    "2": "output_buffer",
                    "5": "output"
                },
                "param_2": {
                    "1": "input1",
                    "10": "unused",
                    "2": "input_param1",
                    "3": "param2",
                    "5": "unused_param"
                },
                "param_3": {
                    "1": "input_a",
                    "18": "input1",
                    "2": "input_param2",
                    "5": "input_1"
                },
                "param_4": {
                    "1": "input3",
                    "18": "input2",
                    "2": "input_param3",
                    "5": "input_2"
                },
                "param_5": {
                    "1": "input4",
                    "18": "input3",
                    "2": "input_param4",
                    "5": "input_3"
                },
                "param_6": {
                    "1": "input5",
                    "18": "input4",
                    "2": "input_param5",
                    "5": "input_4"
                },
                "param_7": {
                    "1": "input6",
                    "18": "input5",
                    "2": "input_param6",
                    "5": "input_5"
                },
                "param_8": {
                    "1": "input7",
                    "18": "input6",
                    "2": "input_param7",
                    "5": "input_6"
                },
                "param_9": {
                    "1": "is_type_1",
                    "15": "flag",
                    "2": "condition",
                    "3": "input_flag"
                },
                "reverse_bits_0800040c": {
                    "4": "reverse_bits"
                },
                "uVar2": {
                    "1": "result_high_bits",
                    "2": "upper_bits",
                    "3": "result1",
                    "4": "high_bits",
                    "7": "result_high"
                },
                "uVar3": {
                    "1": "condition_flag_as_bool",
                    "2": "flag_bit",
                    "3": "bit_value",
                    "5": "flag_value"
                },
                "uVar5": {
                    "1": "reverse_bits",
                    "2": "reversed_value",
                    "3": "result1",
                    "4": "reversed_bits",
                    "9": "reverse_bits_result"
                },
                "uVar6": {
                    "1": "result_a",
                    "2": "calculate_result_result",
                    "3": "result_1",
                    "4": "result2",
                    "7": "result1"
                },
                "uVar7": {
                    "1": "calculate_result",
                    "2": "calculation_result2",
                    "3": "result_2",
                    "8": "result2"
                }
            },
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "code": "\nvoid process_input_08001814(undefined4 *output_array,undefined4 unused,undefined4 input1,undefined4 input2,\n                 undefined4 input3,undefined4 input4,undefined4 input5,undefined4 input6,\n                 int flag)\n\n{\n  int is_empty;\n  undefined4 result_high;\n  undefined flag_value;\n  bool is_flag_set;\n  undefined8 reverse_bits_result;\n  undefined8 result1;\n  undefined8 result2;\n  \n  is_empty = is_input_empty(input1,input2,0,0);\n  if (((is_empty == 0) && (is_empty = is_input_empty(input3,input4,0,0), is_empty == 0)) &&\n     (is_empty = is_input_empty(input5,input6,0,0), is_empty == 0)) {\n    output_array[0xd] = flag;\n    is_flag_set = flag != 1;\n    if (is_flag_set) {\n      flag = 0;\n    }\n    flag_value = (undefined)flag;\n    if (!is_flag_set) {\n      flag_value = 1;\n    }\n    *(undefined *)((int)output_array + 0x71) = flag_value;\n    *output_array = input1;\n    output_array[1] = input2;\n    output_array[2] = input3;\n    output_array[3] = input4;\n    output_array[4] = input5;\n    output_array[5] = input6;\n    reverse_bits_result = reverse_bits(output_array[0x16]);\n    reverse_bits_result = calculate_floating_point((int)reverse_bits_result,(int)((ulonglong)reverse_bits_result >> 0x20),0,0x408f4000);\n    result_high = (undefined4)((ulonglong)reverse_bits_result >> 0x20);\n    output_array[6] = input1;\n    output_array[7] = input2;\n    result1 = calculate_result(input3,input4,(int)reverse_bits_result,result_high);\n    *(undefined8 *)(output_array + 8) = result1;\n    reverse_bits_result = calculate_floating_point(input5,input6,(int)reverse_bits_result,result_high);\n    *(undefined8 *)(output_array + 10) = reverse_bits_result;\n    if (output_array[0xc] == 1) {\n      result2 = calculate(0,0,input1,input2);\n      *(undefined8 *)(output_array + 6) = result2;\n      result1 = calculate(0,0,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      *(undefined8 *)(output_array + 8) = result1;\n      reverse_bits_result = calculate(0,0,(int)reverse_bits_result,(int)((ulonglong)reverse_bits_result >> 0x20));\n      *(undefined8 *)(output_array + 10) = reverse_bits_result;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_input_08001814",
            "entrypoint": "0x08001814",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001814": "process_input_08001814",
                "bVar4": "is_flag_set",
                "calculate_08000190": "calculate",
                "calculate_floating_point_0800074c": "calculate_floating_point",
                "calculate_result_080004f8": "calculate_result",
                "iVar1": "is_empty",
                "is_input_empty_080009dc": "is_input_empty",
                "param_1": "output_array",
                "param_2": "unused",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "input3",
                "param_6": "input4",
                "param_7": "input5",
                "param_8": "input6",
                "param_9": "flag",
                "reverse_bits_0800040c": "reverse_bits",
                "uVar2": "result_high",
                "uVar3": "flag_value",
                "uVar5": "reverse_bits_result",
                "uVar6": "result1",
                "uVar7": "result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018f8": {
            "additional_data": {
                "FUN_080018f8": {
                    "1": "initialize_input_processing",
                    "2": "process_user_input",
                    "28": "process_input"
                },
                "process_input_08001814": {
                    "1": "input_processor",
                    "10": "process_input_helper",
                    "2": "read_input",
                    "3": "process_input"
                }
            },
            "called": [
                "FUN_08001814"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nvoid process_input_080018f8(void)\n\n{\n  process_input_080018f8_helper();\n  return;\n}\n\n",
            "current_name": "process_input_080018f8",
            "entrypoint": "0x080018f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018f8": "process_input_080018f8",
                "process_input_08001814": "process_input_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001918": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "result_ptr"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "param_1_ptr"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "param_2_ptr"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "param_2_ptr"
                },
                "*(undefined4 *)(param_1 + 0x58)": {
                    "1": "array_length_ptr"
                },
                "FUN_08001918": {
                    "1": "calculate_and_store_results",
                    "2": "calculate_updated_values",
                    "3": "update_values",
                    "5": "calculate_result"
                },
                "calculate_floating_point_0800074c": {
                    "1": "calculate_updated_floating_point",
                    "3": "calculate_float",
                    "8": "calculate_floating_point"
                },
                "calculate_result_080004f8": {
                    "1": "calculate_updated_result",
                    "11": "calculate_result"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_ptr",
                    "3": "input",
                    "4": "input_data",
                    "5": "data"
                },
                "param_2": {
                    "1": "new_param",
                    "12": "count",
                    "2": "value",
                    "4": "length"
                },
                "param_3": {
                    "1": "temp_param_1",
                    "2": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "modifier",
                    "2": "unused_param_2",
                    "3": "param",
                    "7": "param4"
                },
                "reverse_bits_0800040c": {
                    "1": "reverse_bits"
                },
                "reverse_bits_0800042c": {
                    "1": "reverse_bits_count",
                    "3": "reverse_bits"
                },
                "uVar1": {
                    "1": "result_hi",
                    "11": "result1",
                    "2": "result_upper",
                    "4": "upper_bits",
                    "6": "result_high"
                },
                "uVar2": {
                    "1": "reversed_param2",
                    "12": "reversed_count",
                    "2": "reversed_num_iterations",
                    "4": "reversed_size",
                    "5": "reversed_length"
                },
                "uVar3": {
                    "1": "reversed_num",
                    "13": "reversed_data",
                    "2": "reversed_input",
                    "7": "reversed_value"
                }
            },
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nvoid calculate_result_08001918(int data,int count,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result1;\n  undefined8 reversed_count;\n  undefined8 reversed_data;\n  \n  if (0 < count) {\n    reversed_count = reverse_bits(count);\n    reversed_data = reverse_bits(*(undefined4 *)(data + 0x58));\n    reversed_count = calculate_floating_point((int)reversed_count,(int)((ulonglong)reversed_count >> 0x20),(int)reversed_data,\n                         (int)((ulonglong)reversed_data >> 0x20),param4);\n    result1 = (undefined4)((ulonglong)reversed_count >> 0x20);\n    reversed_data = calculate_result_08001918((int)reversed_count,result1,*(undefined4 *)(data + 0x20),\n                         *(undefined4 *)(data + 0x24));\n    *(undefined8 *)(data + 0x20) = reversed_data;\n    reversed_count = calculate_floating_point(*(undefined4 *)(data + 0x28),*(undefined4 *)(data + 0x2c),(int)reversed_count,\n                         result1);\n    *(undefined8 *)(data + 0x28) = reversed_count;\n    *(int *)(data + 0x58) = count;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_result_08001918",
            "entrypoint": "0x08001918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001918": "calculate_result_08001918",
                "calculate_floating_point_0800074c": "calculate_floating_point",
                "calculate_result_080004f8": "calculate_result",
                "param_1": "data",
                "param_2": "count",
                "param_3": "param3",
                "param_4": "param4",
                "reverse_bits_0800040c": "reverse_bits",
                "reverse_bits_0800042c": "reverse_bits",
                "uVar1": "result1",
                "uVar2": "reversed_count",
                "uVar3": "reversed_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001960": {
            "additional_data": {
                "FUN_08001960": {
                    "1": "update_params_and_check_input",
                    "3": "update_params",
                    "7": "update_parameters",
                    "9": "update_data"
                },
                "iVar1": {
                    "1": "is_valid",
                    "12": "validation_result",
                    "17": "result"
                },
                "is_input_empty_080009dc": {
                    "1": "is_input_empty"
                },
                "is_string_empty_08000a18": {
                    "1": "is_string_empty"
                },
                "param_1": {
                    "1": "parameter_1",
                    "2": "obj",
                    "3": "param1",
                    "4": "data_struct"
                },
                "param_2": {
                    "1": "param",
                    "12": "param2",
                    "2": "param_2",
                    "4": "unused_param",
                    "6": "unused"
                },
                "param_3": {
                    "1": "input_param_1",
                    "15": "new_param1",
                    "2": "new_val1",
                    "4": "input1"
                },
                "param_4": {
                    "1": "value2",
                    "15": "new_param2",
                    "2": "new_val2",
                    "4": "new_value2"
                },
                "param_5": {
                    "1": "new_param5",
                    "15": "new_param3",
                    "2": "string1",
                    "4": "new_value3"
                },
                "param_6": {
                    "1": "input4",
                    "15": "new_param4",
                    "2": "string2",
                    "4": "new_value4"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "2": "data_pointer",
                    "4": "ptr_to_data",
                    "5": "pointer",
                    "6": "ptr",
                    "8": "data_ptr"
                },
                "uVar3": {
                    "1": "old_value_1",
                    "3": "value1",
                    "6": "old_value1",
                    "9": "temp1"
                },
                "uVar4": {
                    "1": "prev_param2",
                    "3": "value2",
                    "5": "old_value2",
                    "9": "temp2"
                },
                "uVar5": {
                    "1": "param_value3",
                    "3": "value3",
                    "5": "new_value1",
                    "9": "temp3"
                },
                "uVar6": {
                    "1": "tmp_var_4",
                    "3": "value4",
                    "6": "new_value2",
                    "9": "temp4"
                }
            },
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "code": "\nvoid update_data_08001960(int data_struct,undefined4 param2,undefined4 new_param1,undefined4 new_param2,\n                 undefined4 new_param3,undefined4 new_param4)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  result = validate_and_return_result_08000a04(new_param1,new_param2,new_param3,new_param4,new_param2);\n  if (result == 0) {\n    *(undefined4 *)(data_struct + 0x60) = new_param1;\n    *(undefined4 *)(data_struct + 100) = new_param2;\n    *(undefined4 *)(data_struct + 0x68) = new_param3;\n    *(undefined4 *)(data_struct + 0x6c) = new_param4;\n    if (*(char *)(data_struct + 0x70) != '\\0') {\n      data_ptr = *(undefined4 **)(data_struct + 0x3c);\n      temp1 = *data_ptr;\n      temp3 = data_ptr[1];\n      result = is_input_empty(new_param3,new_param4,temp1,temp3);\n      if (result == 0) {\n        result = is_string_empty(new_param1,new_param2,temp1,temp3);\n        if (result != 0) {\n          *data_ptr = new_param1;\n          data_ptr[1] = new_param2;\n        }\n      }\n      else {\n        *data_ptr = new_param3;\n        data_ptr[1] = new_param4;\n      }\n      temp1 = *(undefined4 *)(data_struct + 0x48);\n      temp3 = *(undefined4 *)(data_struct + 0x4c);\n      temp2 = *(undefined4 *)(data_struct + 0x68);\n      temp4 = *(undefined4 *)(data_struct + 0x6c);\n      result = is_string_empty(temp1,temp3,temp2,temp4);\n      if (result != 0) {\n        *(undefined4 *)(data_struct + 0x48) = temp2;\n        *(undefined4 *)(data_struct + 0x4c) = temp4;\n        return;\n      }\n      temp2 = *(undefined4 *)(data_struct + 0x60);\n      temp4 = *(undefined4 *)(data_struct + 100);\n      result = is_input_empty(temp1,temp3,temp2,temp4);\n      if (result != 0) {\n        *(undefined4 *)(data_struct + 0x48) = temp2;\n        *(undefined4 *)(data_struct + 0x4c) = temp4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08001960",
            "entrypoint": "0x08001960",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001960": "update_data_08001960",
                "iVar1": "result",
                "is_input_empty_080009dc": "is_input_empty",
                "is_string_empty_08000a18": "is_string_empty",
                "param_1": "data_struct",
                "param_2": "param2",
                "param_3": "new_param1",
                "param_4": "new_param2",
                "param_5": "new_param3",
                "param_6": "new_param4",
                "puVar2": "data_ptr",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080019f6": {
            "additional_data": {
                "FUN_080019f6": {
                    "1": "update_parameters",
                    "2": "update_values",
                    "3": "check_input_validity",
                    "4": "validate_inputs"
                },
                "iVar1": {
                    "1": "is_string_empty_result",
                    "17": "is_empty",
                    "2": "is_valid",
                    "8": "is_empty_string"
                },
                "is_input_empty_080009dc": {
                    "1": "is_input_empty_check",
                    "2": "is_input_empty"
                },
                "is_string_empty_08000a18": {
                    "1": "is_string_empty_check",
                    "2": "is_string_empty"
                },
                "param_1": {
                    "1": "info",
                    "2": "param",
                    "3": "input",
                    "5": "input_struct",
                    "9": "input_data"
                },
                "uVar2": {
                    "1": "current_value",
                    "2": "temp_value1",
                    "3": "temp_var1",
                    "4": "value1",
                    "5": "first_value"
                },
                "uVar3": {
                    "1": "input_value1",
                    "2": "ptr_1",
                    "5": "ptr1"
                },
                "uVar4": {
                    "1": "temp_value3",
                    "2": "second_data",
                    "3": "second_value",
                    "5": "ptr2"
                },
                "uVar5": {
                    "1": "fourth_element",
                    "2": "input_ptr",
                    "3": "value2"
                }
            },
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "calling": [
                "FUN_08001a44"
            ],
            "code": "\nvoid validate_inputs_080019f6(int input_data)\n\n{\n  int is_empty;\n  undefined4 first_value;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 value2;\n  \n  ptr1 = **(undefined4 **)(input_data + 0x3c);\n  ptr2 = (*(undefined4 **)(input_data + 0x3c))[1];\n  *(undefined4 *)(input_data + 0x48) = ptr1;\n  *(undefined4 *)(input_data + 0x4c) = ptr2;\n  first_value = (*(undefined4 **)(input_data + 0x38))[1];\n  *(undefined4 *)(input_data + 0x50) = **(undefined4 **)(input_data + 0x38);\n  *(undefined4 *)(input_data + 0x54) = first_value;\n  first_value = *(undefined4 *)(input_data + 0x68);\n  value2 = *(undefined4 *)(input_data + 0x6c);\n  is_empty = is_string_empty(ptr1,ptr2,first_value,value2);\n  if (is_empty == 0) {\n    first_value = *(undefined4 *)(input_data + 0x60);\n    value2 = *(undefined4 *)(input_data + 100);\n    is_empty = is_input_empty(ptr1,ptr2,first_value,value2);\n    if (is_empty != 0) {\n      *(undefined4 *)(input_data + 0x48) = first_value;\n      *(undefined4 *)(input_data + 0x4c) = value2;\n    }\n    return;\n  }\n  *(undefined4 *)(input_data + 0x48) = first_value;\n  *(undefined4 *)(input_data + 0x4c) = value2;\n  return;\n}\n\n",
            "current_name": "validate_inputs_080019f6",
            "entrypoint": "0x080019f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080019f6": "validate_inputs_080019f6",
                "iVar1": "is_empty",
                "is_input_empty_080009dc": "is_input_empty",
                "is_string_empty_08000a18": "is_string_empty",
                "param_1": "input_data",
                "uVar2": "first_value",
                "uVar3": "ptr1",
                "uVar4": "ptr2",
                "uVar5": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a44": {
            "additional_data": {
                "*(char *)(param_1 + 0x70)": {
                    "1": "input_flag"
                },
                "<original_function_name>": {
                    "1": "update_flag_based_on_condition"
                },
                "<param_1>": {
                    "1": "base_address"
                },
                "<param_2>": {
                    "1": "flag_value"
                },
                "<uVar1>": {
                    "1": "new_flag_value"
                },
                "FUN_08001a44": {
                    "1": "set_validation_status",
                    "2": "update_status",
                    "3": "update_flag",
                    "4": "update_flag_based_on_input",
                    "6": "set_validation_flag"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "memory_address",
                    "4": "data_address",
                    "5": "input_address",
                    "6": "base_address"
                },
                "param_2": {
                    "1": "is_flag_set",
                    "10": "flag",
                    "2": "condition",
                    "4": "status",
                    "5": "flag_value"
                },
                "uVar1": {
                    "1": "flag_value",
                    "2": "validation_value",
                    "4": "validation_result",
                    "6": "new_value"
                },
                "validate_inputs_080019f6": {
                    "2": "perform_input_validation"
                }
            },
            "called": [
                "FUN_080019f6"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nvoid set_validation_flag_08001a44(int base_address,int flag)\n\n{\n  undefined new_value;\n  \n  if (flag == 1) {\n    new_value = 1;\n    if (*(char *)(base_address + 0x70) == '\\0') {\n      perform_input_validation();\n    }\n  }\n  else {\n    new_value = 0;\n  }\n  *(undefined *)(base_address + 0x70) = new_value;\n  return;\n}\n\n",
            "current_name": "set_validation_flag_08001a44",
            "entrypoint": "0x08001a44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a44": "set_validation_flag_08001a44",
                "param_1": "base_address",
                "param_2": "flag",
                "uVar1": "new_value",
                "validate_inputs_080019f6": "perform_input_validation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a66": {
            "additional_data": {
                "*(char *)(param_1 + 0x70)": {
                    "1": "is_char_not_null"
                },
                "*(int *)(param_1 + 0x30)": {
                    "1": "last_param_value"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "stored_value1"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "value2"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "stored_value3"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "value4"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "stored_value5"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "value6"
                },
                "*(undefined8 *)(param_1 + 0x18)": {
                    "1": "result_address1"
                },
                "*(undefined8 *)(param_1 + 0x20)": {
                    "1": "updated_parameter2"
                },
                "*(undefined8 *)(param_1 + 0x28)": {
                    "1": "updated_parameter3"
                },
                "<original_variable_name_1>": {
                    "1": "param_flag"
                },
                "<original_variable_name_2>": {
                    "1": "param_value"
                },
                "FUN_08001a66": {
                    "1": "update_params_and_store",
                    "6": "update_values",
                    "9": "update_parameters"
                },
                "calculate_08000190": {
                    "1": "perform_calculation",
                    "6": "calculate",
                    "7": "calculate_value"
                },
                "param_1": {
                    "1": "object_base",
                    "2": "param",
                    "3": "object",
                    "7": "object_address"
                },
                "param_2": {
                    "1": "param_2",
                    "11": "new_param",
                    "13": "new_value",
                    "2": "new_param_value",
                    "3": "param2"
                },
                "param_3": {
                    "1": "value1",
                    "2": "unused_param3",
                    "5": "unused_param",
                    "6": "param_3",
                    "9": "unused_param1"
                },
                "param_4": {
                    "1": "value2",
                    "10": "unused_param2",
                    "7": "param_4"
                },
                "uVar1": {
                    "1": "calculated_result",
                    "12": "calculated_value",
                    "13": "result"
                }
            },
            "called": [
                "FUN_08000190"
            ],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid update_parameters_08001a66(int object_address,int new_value,undefined4 unused_param1,undefined4 unused_param2)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(object_address + 0x70) != '\\0') && (*(int *)(object_address + 0x30) != new_value)) {\n    result = calculate_value(0,0,*(undefined4 *)(object_address + 0x18),*(undefined4 *)(object_address + 0x1c),unused_param2\n                        );\n    *(undefined8 *)(object_address + 0x18) = result;\n    result = calculate_value(0,0,*(undefined4 *)(object_address + 0x20),*(undefined4 *)(object_address + 0x24));\n    *(undefined8 *)(object_address + 0x20) = result;\n    result = calculate_value(0,0,*(undefined4 *)(object_address + 0x28),*(undefined4 *)(object_address + 0x2c));\n    *(undefined8 *)(object_address + 0x28) = result;\n  }\n  *(int *)(object_address + 0x30) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameters_08001a66",
            "entrypoint": "0x08001a66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a66": "update_parameters_08001a66",
                "calculate_08000190": "calculate_value",
                "param_1": "object_address",
                "param_2": "new_value",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "FUN_08001ab0": {
                    "1": "initialize_data_and_parameters",
                    "16": "initialize_and_process_data",
                    "2": "initialize_data_and_process_input",
                    "5": "initialize_data"
                },
                "data_ptr + 0x38": {
                    "1": "param_2_ptr"
                },
                "data_ptr + 0x3c": {
                    "1": "metadata_ptr"
                },
                "data_ptr + 0x40": {
                    "1": "param_4_ptr"
                },
                "data_ptr + 0x44": {
                    "1": "result"
                },
                "data_ptr + 0x58": {
                    "1": "parameter"
                },
                "data_ptr + 0x70": {
                    "1": "flag"
                },
                "extraout_r1": {
                    "1": "extra_output_r1",
                    "10": "extra_result",
                    "2": "extra_out",
                    "6": "extra_output"
                },
                "iVar1": {
                    "1": "data_offset",
                    "2": "data_init_result",
                    "3": "data_size",
                    "4": "initialized_data",
                    "9": "result"
                },
                "initialize_data_080058e0": {
                    "1": "initialize_data_value",
                    "8": "initialize_data"
                },
                "param_1": {
                    "1": "data_address",
                    "12": "data",
                    "2": "data_struct",
                    "6": "data_ptr",
                    "7": "data_structure"
                },
                "param_10": {
                    "1": "param_h",
                    "14": "param10",
                    "3": "param_i",
                    "4": "param_10"
                },
                "param_11": {
                    "1": "ptr_11",
                    "14": "param11",
                    "3": "param_j",
                    "4": "param_11"
                },
                "param_12": {
                    "1": "param_12_value",
                    "14": "param12",
                    "3": "param_k",
                    "4": "param_12"
                },
                "param_2": {
                    "1": "param_2_value",
                    "10": "param2",
                    "3": "param_2",
                    "4": "param_a"
                },
                "param_3": {
                    "1": "value2",
                    "10": "param3",
                    "3": "param_3",
                    "4": "param_b"
                },
                "param_4": {
                    "1": "param_val_2",
                    "10": "param4",
                    "3": "param_4",
                    "4": "param_c"
                },
                "param_5": {
                    "1": "param_5_val",
                    "14": "param5",
                    "3": "param_d",
                    "4": "param_5"
                },
                "param_6": {
                    "1": "ptr_6",
                    "14": "param6",
                    "3": "param_e",
                    "4": "param_6"
                },
                "param_7": {
                    "1": "param_g",
                    "14": "param7",
                    "3": "param_f",
                    "4": "param_7"
                },
                "param_8": {
                    "1": "param_8_value",
                    "14": "param8",
                    "3": "param_g",
                    "4": "param_8"
                },
                "param_9": {
                    "1": "param_g",
                    "14": "param9",
                    "3": "param_h",
                    "4": "param_9"
                },
                "process_input_08001814": {
                    "9": "process_input"
                },
                "update_data_08001960": {
                    "9": "update_data"
                },
                "update_parameters_08001a66": {
                    "9": "update_parameters"
                }
            },
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "calling": [
                "FUN_08001b18"
            ],
            "code": "\nint initialize_and_process_data_08001ab0(int data,undefined4 param2,undefined4 param3,undefined4 param4,\n                undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                undefined4 param9,undefined4 param10,undefined4 param11,undefined4 param12)\n\n{\n  int result;\n  undefined4 extra_result;\n  \n  *(undefined4 *)(data + 0x3c) = param3;\n  *(undefined4 *)(data + 0x38) = param2;\n  *(undefined4 *)(data + 0x40) = param4;\n  *(undefined *)(data + 0x70) = 0;\n  update_data(data,param2,0,0,0,0x406fe000);\n  *(undefined4 *)(data + 0x58) = 100;\n  update_parameters(data,param12);\n  process_input(data,extra_result,param5,param6,param7,param8,param9,param10,param11);\n  result = initialize_data();\n  *(int *)(data + 0x44) = result - *(int *)(data + 0x58);\n  return data;\n}\n\n",
            "current_name": "initialize_and_process_data_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ab0": "initialize_and_process_data_08001ab0",
                "extraout_r1": "extra_result",
                "iVar1": "result",
                "initialize_data_080058e0": "initialize_data",
                "param_1": "data",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "process_input_08001814": "process_input",
                "update_data_08001960": "update_data",
                "update_parameters_08001a66": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001b18": {
            "additional_data": {
                "<unused_variable_name>": {
                    "1": "<unused_variable_name>"
                },
                "FUN_08001b18": {
                    "1": "initialize_and_return_result",
                    "15": "initialize_and_process_data",
                    "3": "initialize_data_and_return",
                    "5": "initialize_and_return_param",
                    "6": "process_data"
                },
                "initialize_and_process_data_08001ab0": {
                    "1": "initialize_and_process_data",
                    "2": "initialize_process_data"
                },
                "param_1": {
                    "1": "data",
                    "10": "input_param",
                    "2": "input_value",
                    "3": "result",
                    "6": "input",
                    "7": "input_data"
                }
            },
            "called": [
                "FUN_08001ab0"
            ],
            "calling": [
                "FUN_08000b08"
            ],
            "code": "\nundefined4 initialize_and_process_data_08001b18(undefined4 input_param)\n\n{\n  initialize_process_data();\n  return input_param;\n}\n\n",
            "current_name": "initialize_and_process_data_08001b18",
            "entrypoint": "0x08001b18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001b18": "initialize_and_process_data_08001b18",
                "initialize_and_process_data_08001ab0": "initialize_process_data",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001b48": {
            "additional_data": {
                "FUN_08001b48": {
                    "16": "initialize_and_update_memory",
                    "3": "initialize_and_update",
                    "4": "initialize_and_update_system",
                    "5": "initialize_memory_and_update"
                },
                "check_status_08003688": {
                    "1": "check_status"
                },
                "get_data_value_08003c44": {
                    "1": "get_data_value"
                },
                "iVar1": {
                    "1": "status_code",
                    "3": "status_check",
                    "6": "result",
                    "8": "status"
                },
                "infinite_loop_08004d40": {
                    "1": "infinite_loop"
                },
                "initialize_and_update_memory_08003ad4": {
                    "1": "initialize_and_update_memory_function"
                },
                "initialize_memory_08002514": {
                    "1": "initialize_memory"
                },
                "local_10": {
                    "1": "constant_0",
                    "2": "index",
                    "3": "offset"
                },
                "local_14": {
                    "1": "update_rate",
                    "2": "constant_3",
                    "3": "constant_2"
                },
                "local_1c": {
                    "1": "memory_address",
                    "2": "constant_2",
                    "3": "constant_16",
                    "4": "memory_size"
                },
                "local_20": {
                    "1": "array_index",
                    "2": "value",
                    "5": "constant_1"
                },
                "local_30": {
                    "1": "step_values",
                    "2": "system_flags",
                    "3": "status_flags",
                    "9": "status"
                },
                "local_30[0]": {
                    "1": "flag"
                },
                "local_34": {
                    "1": "memory_index",
                    "3": "index"
                },
                "local_38": {
                    "1": "constant_1024",
                    "2": "memory_size",
                    "3": "limit"
                },
                "local_3c": {
                    "1": "memory_index",
                    "2": "memory_flag",
                    "3": "memory_value_3",
                    "6": "offset"
                },
                "local_40": {
                    "1": "memory_index",
                    "2": "value_2",
                    "3": "memory_value_2"
                },
                "local_44": {
                    "1": "initialize_value",
                    "2": "memory_size",
                    "3": "memory_value_1",
                    "7": "memory_value",
                    "8": "mask"
                },
                "local_4c": {
                    "1": "data_value_2",
                    "2": "data_value_1",
                    "5": "data_value"
                },
                "local_54": {
                    "1": "update_data_value",
                    "10": "data",
                    "2": "values",
                    "4": "data_values"
                },
                "local_54[0]": {
                    "1": "input"
                },
                "local_c": {
                    "1": "loop_limit",
                    "2": "constant_5",
                    "5": "address",
                    "9": "memory_address"
                },
                "uVar2": {
                    "1": "data_divisor",
                    "15": "data_value",
                    "3": "data_value_2"
                },
                "update_control_register_08002560": {
                    "1": "update_control_register"
                },
                "update_data_08003c90": {
                    "1": "update_data"
                },
                "update_memory_08002494": {
                    "1": "update_memory"
                }
            },
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "calling": [
                "FUN_08004c52"
            ],
            "code": "\nvoid initialize_and_update_memory_08001b48(void)\n\n{\n  int status;\n  uint data_value;\n  undefined4 data [2];\n  undefined4 data_value;\n  undefined4 mask;\n  undefined4 memory_value_2;\n  undefined4 offset;\n  undefined4 size;\n  undefined4 index;\n  undefined4 status [4];\n  undefined4 constant_1;\n  undefined4 size;\n  undefined4 constant_2;\n  undefined4 offset;\n  undefined4 memory_address;\n  \n  flag = 2;\n  constant_1 = 1;\n  size = 0x10;\n  constant_2 = 2;\n  offset = 0;\n  memory_address = 0x380000;\n  status = check_status(status);\n  if (status != 0) {\n    infinite_loop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  mask = 0xf;\n  memory_value_2 = 2;\n  offset = 0;\n  size = 0x400;\n  index = 0;\n  status = initialize_and_update_memory_08001b48_function(&mask);\n  if (status != 0) {\n    infinite_loop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  input = 2;\n  data_value = 0x8000;\n  status = update_data(data);\n  if (status != 0) {\n    infinite_loop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  data_value = get_data_value();\n  initialize_memory(data_value / 1000);\n  update_control_register(4);\n  update_memory(0xffffffff,0);\n  return;\n}\n\n",
            "current_name": "initialize_and_update_memory_08001b48",
            "entrypoint": "0x08001b48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001b48": "initialize_and_update_memory_08001b48",
                "check_status_08003688": "check_status",
                "get_data_value_08003c44": "get_data_value",
                "iVar1": "status",
                "infinite_loop_08004d40": "infinite_loop",
                "initialize_and_update_memory_08003ad4": "initialize_and_update_memory_function",
                "initialize_memory_08002514": "initialize_memory",
                "local_10": "offset",
                "local_14": "constant_2",
                "local_1c": "size",
                "local_20": "constant_1",
                "local_30": "status",
                "local_30[0]": "flag",
                "local_34": "index",
                "local_38": "size",
                "local_3c": "offset",
                "local_40": "memory_value_2",
                "local_44": "mask",
                "local_4c": "data_value",
                "local_54": "data",
                "local_54[0]": "input",
                "local_c": "memory_address",
                "uVar2": "data_value",
                "update_control_register_08002560": "update_control_register",
                "update_data_08003c90": "update_data",
                "update_memory_08002494": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c32": {
            "additional_data": {
                "<no_parameters>": {
                    "1": "<no_parameters>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08001c32": {
                    "27": "initialize_system_and_memory",
                    "4": "initialize_system"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_08004c52": {
                    "1": "system_and_memory_initializer"
                },
                "initialize_system_and_memory_08004c52": {
                    "1": "",
                    "14": "initialize_system_and_memory"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_08004c52"
            ],
            "calling": [
                "FUN_08005f5e"
            ],
            "code": "\nvoid initialize_system_and_memory_08001c32(void)\n\n{\n  initialize_system_and_memory_08001c32();\n  return;\n}\n\n",
            "current_name": "initialize_system_and_memory_08001c32",
            "entrypoint": "0x08001c32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c32": "initialize_system_and_memory_08001c32",
                "initialize_system_and_memory_08004c52": "initialize_system_and_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "called": [],
            "calling": [
                "FUN_08001c88"
            ],
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001c3a",
            "entrypoint": "0x08001c3a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001c3c": {
            "additional_data": {
                "DAT_20000078": {
                    "1": "ratio",
                    "2": "memory_ratio"
                },
                "DAT_2000007c": {
                    "1": "updated_memory"
                },
                "DAT_20000084": {
                    "1": "memory_size",
                    "3": "total_memory"
                },
                "FUN_08001c3c": {
                    "2": "initialize_and_set_memory",
                    "21": "initialize_and_update_memory",
                    "6": "initialize_memory"
                },
                "iVar1": {
                    "1": "memory_initialized",
                    "2": "init_result",
                    "4": "memory_init_result",
                    "6": "result",
                    "9": "memory_initialization_result"
                },
                "initialize_memory_08002514": {
                    "7": "initialize_memory"
                },
                "param_1": {
                    "1": "param",
                    "18": "input_value",
                    "2": "size",
                    "3": "value",
                    "5": "memory_size"
                },
                "update_memory_08002494": {
                    "7": "update_memory"
                }
            },
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "code": "\nundefined4 initialize_and_update_memory_08001c3c(uint input_value)\n\n{\n  int memory_initialization_result;\n  \n  memory_initialization_result = initialize_memory(DAT_20000084 / (1000 / DAT_20000078));\n  if (memory_initialization_result != 0) {\n    return 1;\n  }\n  if (0xf < input_value) {\n    return 1;\n  }\n  update_memory(0xffffffff,input_value,0);\n  DAT_2000007c = input_value;\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_memory_08001c3c",
            "entrypoint": "0x08001c3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c3c": "initialize_and_update_memory_08001c3c",
                "iVar1": "memory_initialization_result",
                "initialize_memory_08002514": "initialize_memory",
                "param_1": "input_value",
                "update_memory_08002494": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c88": {
            "additional_data": {
                "FUNC_08001c3a": {
                    "1": "additional_function",
                    "10": "perform_additional_tasks",
                    "2": "execute_additional_function",
                    "3": "execute_function"
                },
                "FUN_08001c88": {
                    "1": "update_and_initialize_system",
                    "11": "initialize_system",
                    "7": "initialize_configuration"
                },
                "_DAT_40022000": {
                    "1": "configuration_flag",
                    "2": "configuration_flags",
                    "3": "system_configuration",
                    "4": "system_flags"
                },
                "initialize_and_update_memory_08001c3c": {
                    "2": "initialize_and_set_memory",
                    "23": "initialize_and_update_memory",
                    "3": "initialize_and_configure_memory"
                },
                "update_configuration_08002470": {
                    "1": "update_system_configuration",
                    "2": "set_configuration",
                    "27": "update_configuration"
                }
            },
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "calling": [
                "FUN_08004c52"
            ],
            "code": "\n\n\nundefined4 initialize_system_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_configuration(3);\n  initialize_and_update_memory(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_08001c88",
            "entrypoint": "0x08001c88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c88": "initialize_system_08001c88",
                "initialize_and_update_memory_08001c3c": "initialize_and_update_memory",
                "update_configuration_08002470": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cac": {
            "additional_data": {
                "DAT_20000078": {
                    "1": "input_data",
                    "10": "input",
                    "2": "new_value",
                    "3": "value",
                    "4": "input_value"
                },
                "DAT_200006a0": {
                    "1": "current_value",
                    "15": "result",
                    "2": "accumulated_value",
                    "6": "sum"
                },
                "FUN_08001cac": {
                    "1": "add_unsigned_integers",
                    "2": "accumulate_values",
                    "4": "addition_operation",
                    "5": "calculate_sum"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004b9e"
            ],
            "code": "\nvoid calculate_sum_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "current_name": "calculate_sum_08001cac",
            "entrypoint": "0x08001cac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001cac": "calculate_sum_08001cac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "additional_data": {
                "DAT_200006a0": {
                    "1": "global_variable_value",
                    "10": "data",
                    "3": "global_data",
                    "4": "global_variable"
                },
                "FUN_08001cc4": {
                    "1": "get_dat_value",
                    "10": "get_data",
                    "2": "get_data_pointer",
                    "3": "get_global_data",
                    "4": "get_global_variable",
                    "8": "get_data_value"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "code": "\nuint32_t get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "current_name": "get_data_08001cc4",
            "entrypoint": "0x08001cc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "additional_data": {
                "FUN_08001cd0": {
                    "1": "perform_operation",
                    "2": "calculate_function_result",
                    "3": "calculate_return_value",
                    "6": "process_data"
                },
                "iVar1": {
                    "1": "data_initial_value",
                    "2": "data_value",
                    "3": "data_start",
                    "4": "start_value",
                    "6": "initial_value"
                },
                "iVar3": {
                    "1": "progress_step",
                    "2": "current_time",
                    "7": "difference"
                },
                "local_1c": {
                    "1": "current_iteration",
                    "24": "counter",
                    "3": "iteration_count"
                },
                "param_1": {
                    "1": "param",
                    "2": "parameters",
                    "3": "data_ptr",
                    "4": "input_data",
                    "6": "data"
                },
                "param_2": {
                    "1": "param_val",
                    "2": "max_iterations",
                    "3": "length",
                    "4": "size",
                    "7": "limit"
                },
                "puVar5": {
                    "1": "ptr_var",
                    "11": "data_pointer",
                    "2": "data_ptr",
                    "4": "current_data"
                },
                "uVar2": {
                    "1": "divisor",
                    "22": "data_value",
                    "6": "calculated_value"
                },
                "uVar4": {
                    "1": "return_val",
                    "2": "return_code",
                    "23": "result",
                    "3": "return_value"
                },
                "uVar6": {
                    "1": "result",
                    "10": "calculation_result",
                    "2": "modified_value",
                    "4": "multiplier"
                },
                "uint **param_1": {
                    "1": "data_pointer"
                },
                "uint param_2": {
                    "1": "limit"
                }
            },
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 process_data_08001cd0(uint **data,uint limit)\n\n{\n  int initial_data;\n  uint data_value;\n  int difference;\n  undefined4 result;\n  uint *data_pointer;\n  uint calculation_result;\n  uint counter;\n  \n  counter = 0;\n  initial_data = get_data_08001cc4();\n  calculation_result = DAT_20000084;\n  data_pointer = *data;\n  if ((data_pointer[2] & 0x100) == 0) {\n    if (((data_pointer[1] & 0x100) == 0) && ((data_pointer[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**data & 2) != 0) goto LAB_08001de2;\n      } while ((limit == 0xffffffff) ||\n              ((limit != 0 && (difference = get_data_08001cc4(), (uint)(difference - initial_data) <= limit))));\n      data[10] = (uint *)((uint)data[10] | 4);\n      *(undefined *)(data + 9) = 0;\n      result = 3;\n    }\n    else {\n      data_value = calculate_data_value_08003da4(2);\n      data_pointer = *data;\n      if (((data_pointer[4] & 0x24924924) == 0) && ((data_pointer[3] & 0x924924) == 0)) {\n        if ((data_pointer[4] & 0x12492492) == 0) {\n          if ((data_pointer[3] & 0x492492) == 0) {\n            difference = 0x14;\n          }\n          else {\n            difference = 0x29;\n          }\n        }\n        else {\n          difference = 0x29;\n        }\n      }\n      else if (((data_pointer[4] & 0x12492492) == 0) && ((data_pointer[3] & 0x492492) == 0)) {\n        difference = 0x54;\n      }\n      else if ((data_pointer[4] & 0x249249) == 0) {\n        if ((data_pointer[3] & 0x249249) == 0) {\n          difference = 0x54;\n        }\n        else {\n          difference = 0xfc;\n        }\n      }\n      else {\n        difference = 0xfc;\n      }\n      calculation_result = (calculation_result / data_value) * difference;\n      for (; counter <= calculation_result && calculation_result - counter != 0; counter = counter + 1) {\n        if ((limit != 0xffffffff) &&\n           ((limit == 0 || (difference = get_data_08001cc4(), limit < (uint)(difference - initial_data))))) {\n          data[10] = (uint *)((uint)data[10] | 4);\n          *(undefined *)(data + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **data = 0xffffffed;\n      data[10] = (uint *)((uint)data[10] | 0x200);\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if (data[3] == (uint *)0x0) {\n          data[10] = (uint *)((uint)data[10] & 0xfffffeff);\n          if (((uint)data[10] & 0x1000) == 0) {\n            data[10] = (uint *)((uint)data[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    data[10] = (uint *)((uint)data[10] | 0x20);\n    *(undefined *)(data + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08001cd0",
            "entrypoint": "0x08001cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001cd0": "process_data_08001cd0",
                "iVar1": "initial_data",
                "iVar3": "difference",
                "local_1c": "counter",
                "param_1": "data",
                "param_2": "limit",
                "puVar5": "data_pointer",
                "uVar2": "data_value",
                "uVar4": "result",
                "uVar6": "calculation_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e40": {
            "additional_data": {
                "*(undefined4 *)(*param_1 + 0x4c)": {
                    "1": "value_at_offset4_c",
                    "2": "get_value_at_offset"
                },
                "*param_1": {
                    "1": "dereferenced_offset_pointer",
                    "2": "address_value",
                    "3": "offset_value"
                },
                "*param_1 + 0x4c": {
                    "1": "offsetted_value"
                },
                "0x4c": {
                    "1": "offset"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08001e40": {
                    "1": "extract_address",
                    "12": "get_offset_value",
                    "2": "get_offset_from_pointer",
                    "3": "get_offset",
                    "4": "get_value_from_offset"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "offsetted_value": {
                    "1": "value"
                },
                "param_1": {
                    "1": "ptr_value",
                    "2": "array_ptr",
                    "4": "input_array",
                    "6": "input_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 get_offset_value_08001e40(int *input_pointer)\n\n{\n  return *(undefined4 *)(*input_pointer + 0x4c);\n}\n\n",
            "current_name": "get_offset_value_08001e40",
            "entrypoint": "0x08001e40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "input_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e48": {
            "additional_data": {
                "*(char *)(param_1 + 9)": {
                    "1": "parameter_list[9]"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "register_value4"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "register_value3"
                },
                "*(uint *)(*param_1 + 0x30)": {
                    "1": "register_value2"
                },
                "*(uint *)(*param_1 + 0x34)": {
                    "1": "register_value1"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "register_value5"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "set_enabled"
                },
                "*param_1": {
                    "1": "data_value"
                },
                "*param_2": {
                    "1": "value1"
                },
                "0x40012400": {
                    "1": "0x40012400"
                },
                "0x800000": {
                    "1": "0x800000"
                },
                "DAT_20000084": {
                    "1": "constant_value"
                },
                "FUN_08001e48": {
                    "1": "set_config_values",
                    "2": "update_parameters",
                    "3": "update_values",
                    "4": "update_settings",
                    "7": "update_configuration"
                },
                "loc_0": {
                    "1": "local_var"
                },
                "local_c": {
                    "1": "delay",
                    "20": "counter",
                    "3": "loop_counter",
                    "4": "count"
                },
                "param_1": {
                    "1": "register_array",
                    "2": "memory_ptr",
                    "3": "config_ptr",
                    "4": "settings",
                    "5": "config"
                },
                "param_2": {
                    "1": "input_array",
                    "14": "values",
                    "2": "input_data",
                    "3": "values_ptr",
                    "5": "data"
                },
                "param_2[1]": {
                    "1": "setting_value1"
                },
                "param_2[2]": {
                    "1": "value_list[2]"
                },
                "uRam40012408": {
                    "1": "ram_value"
                },
                "uVar1": {
                    "17": "result",
                    "2": "status",
                    "9": "return_value"
                },
                "uVar2": {
                    "1": "multiplier",
                    "10": "index",
                    "2": "value_index",
                    "4": "value",
                    "5": "shift_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 update_configuration_08001e48(int *config,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int counter;\n  \n  if (*(char *)(config + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(config + 9) = 1;\n    index = setting_value1;\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*config + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*config + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*config + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*config + 0x10) =\n           setting_value2 << (index * 3 & 0xff) |\n           *(uint *)(*config + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*config + 0xc) =\n           setting_value2 << (index & 0xff) | *(uint *)(*config + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*config == 0x40012400) {\n        if ((status & 0x800000) == 0) {\n          status = status | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        config[10] = config[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(config + 9) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_configuration_08001e48",
            "entrypoint": "0x08001e48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e48": "update_configuration_08001e48",
                "local_c": "counter",
                "param_1": "config",
                "param_2": "values",
                "param_2[1]": "setting_value1",
                "param_2[2]": "setting_value2",
                "uRam40012408": "status",
                "uVar1": "result",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f80": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "* (undefined4 *)(param_1 + 0x28)": {
                    "1": "offset_value"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "return_value",
                    "3": "value_at_offset"
                },
                "<new_variable_name_1>": {
                    "1": "<improved_variable_name_1>"
                },
                "FUN_08001f80": {
                    "1": "get_ptr_at_offset",
                    "3": "get_pointer_value",
                    "4": "get_value_from_offset",
                    "5": "get_value_at_offset"
                },
                "local_1": {
                    "1": "offset_value"
                },
                "new_variable_name_1": {
                    "1": "value_pointer"
                },
                "param_1": {
                    "1": "pointer_address",
                    "11": "base_address",
                    "2": "input_address",
                    "3": "offset",
                    "4": "address",
                    "6": "memory_address"
                },
                "param_1 + 0x28": {
                    "1": "offset_address"
                },
                "return_value": {
                    "1": "offset_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 get_memory_value_08001f80(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x28);\n}\n\n",
            "current_name": "get_memory_value_08001f80",
            "entrypoint": "0x08001f80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f80": "get_memory_value_08001f80",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f84": {
            "additional_data": {
                "FUN_08001f84": {
                    "1": "execute_operation",
                    "2": "perform_operation",
                    "4": "initialize_data",
                    "5": "update_data",
                    "6": "enable_data_processing"
                },
                "get_data_08001cc4": {
                    "1": "retrieve_data",
                    "3": "get_data"
                },
                "iVar1": {
                    "1": "new_data_value",
                    "2": "current_value",
                    "3": "temp_var1",
                    "8": "current_data"
                },
                "iVar3": {
                    "1": "current_value",
                    "2": "original_value",
                    "4": "data_ptr",
                    "6": "data_value"
                },
                "local_14": {
                    "1": "delay",
                    "16": "loop_counter",
                    "2": "loop_count",
                    "4": "iteration_count",
                    "5": "counter"
                },
                "param_1": {
                    "1": "input_array",
                    "10": "data",
                    "3": "data_array",
                    "7": "data_ptr",
                    "8": "data_pointer"
                },
                "param_1[0xb]": {
                    "1": "flag2"
                },
                "param_1[10]": {
                    "1": "flag1"
                },
                "param_2": {
                    "1": "additional_parameter",
                    "2": "param_2",
                    "3": "value",
                    "9": "param"
                },
                "uVar2": {
                    "1": "output",
                    "10": "return_value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "code": "\nundefined4 enable_data_processing_08001f84(int *data,undefined4 param)\n\n{\n  int current_data;\n  undefined4 return_value;\n  int data_value;\n  uint loop_counter;\n  \n  data_value = *data;\n  if ((*(uint *)(data_value + 8) & 1) == 0) {\n    *(uint *)(data_value + 8) = *(uint *)(data_value + 8) | 1;\n    for (loop_counter = DAT_20000084 / 1000000; loop_counter != 0; loop_counter = loop_counter - 1) {\n    }\n    data_value = get_data(data,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      current_data = get_data();\n    } while ((uint)(current_data - data_value) < 3);\n    flag1 = flag1 | 0x10;\n    flag2 = flag2 | 1;\n    *(undefined *)(data + 9) = 0;\n    return_value = 1;\n  }\n  else {\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "enable_data_processing_08001f84",
            "entrypoint": "0x08001f84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f84": "enable_data_processing_08001f84",
                "get_data_08001cc4": "get_data",
                "iVar1": "current_data",
                "iVar3": "data_value",
                "local_14": "loop_counter",
                "param_1": "data",
                "param_1[0xb]": "flag2",
                "param_1[10]": "flag1",
                "param_2": "param",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002004": {
            "additional_data": {
                "(*(char *)(param_1 + 9))": {
                    "1": "check_value"
                },
                "(_DAT_40012404 & 0x400) != 0": {
                    "1": "check_some_data2"
                },
                "(_DAT_40012404 & 0xf0000) != 0": {
                    "1": "check_some_data"
                },
                "(param_1[10] & 0x1000U)": {
                    "1": "is_flag_set"
                },
                "(param_1[10] & 0x1000U) == 0": {
                    "1": "check_updated_value1"
                },
                "(puVar2[1] & 0x400)": {
                    "1": "config_flag"
                },
                "(undefined4 *)*param_1": {
                    "1": "config_ptr"
                },
                "(undefined4 *)0x40012800": {
                    "1": "ptr_constant"
                },
                "*(char *)(param_1 + 9)": {
                    "3": "flag"
                },
                "*(uint *)(iVar3 + 8)": {
                    "1": "value_3"
                },
                "*(uint *)(iVar3 + 8) & 0xe0000": {
                    "1": "value_3_condition"
                },
                "*(uint *)(iVar3 + 8) & 0xe0000) == 0xe0000)": {
                    "1": "check_value2"
                },
                "*(uint *)(iVar3 + 8) | 0x100000": {
                    "1": "updated_value6"
                },
                "*(uint *)(iVar3 + 8) | 0x500000": {
                    "1": "updated_value5"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "flag_ptr"
                },
                "*param_1": {
                    "1": "data_value"
                },
                "*puVar2": {
                    "1": "pointer_value"
                },
                "0xfffffcfeU": {
                    "1": "bitmask"
                },
                "DAT_40012800": {
                    "1": "memory_address"
                },
                "F1": {
                    "1": "initialize_data_processing"
                },
                "FUN_08002004": {
                    "1": "update_flags",
                    "17": "initialize_data_processing",
                    "2": "configure_data_processing",
                    "3": "process_data",
                    "5": "enable_data_processing"
                },
                "PTR_08001f84": {
                    "1": "enable_data_processing"
                },
                "_DAT_40012404": {
                    "1": "data_register2",
                    "2": "constant"
                },
                "enable_data_processing_08001f84": {
                    "9": "enable_data_processing"
                },
                "enable_data_processing_08001f84()": {
                    "2": "enable_data_processing"
                },
                "iVar1": {
                    "1": "error_code",
                    "26": "result",
                    "3": "status"
                },
                "iVar3": {
                    "1": "current_address",
                    "15": "value",
                    "2": "base_address",
                    "4": "data_value"
                },
                "iVar3 != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)": {
                    "1": "check_condition2"
                },
                "param_1": {
                    "1": "param",
                    "12": "data",
                    "2": "config_params",
                    "4": "parameters"
                },
                "param_1[0xb]": {
                    "1": "value2"
                },
                "param_1[0xb] & 0xfffffff9": {
                    "1": "updated_value4"
                },
                "param_1[10]": {
                    "1": "config_value"
                },
                "param_1[10] & 0xffefffff": {
                    "1": "updated_value3"
                },
                "param_1[10] & 0xfffffcfeU | 0x100": {
                    "1": "updated_value1"
                },
                "param_1[10] | 0x100000": {
                    "1": "updated_value2"
                },
                "puVar2": {
                    "1": "config_ptr",
                    "11": "pointer",
                    "2": "base_address",
                    "4": "data_pointer",
                    "6": "ptr"
                },
                "puVar2 == (undefined4 *)0x40012800": {
                    "1": "check_condition"
                },
                "puVar2[1] & 0x400": {
                    "1": "check_data"
                }
            },
            "called": [
                "FUN_08001f84"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\n\n\nint initialize_data_processing_08002004(int *data)\n\n{\n  int result;\n  undefined4 *pointer;\n  int value;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    result = enable_data_processing;\n    if (result == 0) {\n      data[10] = data[10] & bitmask | 0x100;\n      pointer = (undefined4 *)*data;\n      if ((pointer == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data[10] = data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data[10] = data[10] & 0xffefffff;\n        if ((pointer[1] & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000U) == 0) {\n        value_2 = 0;\n      }\n      else {\n        value_2 = value_2 & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *pointer = 0xfffffffd;\n      value = *data;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "current_name": "initialize_data_processing_08002004",
            "entrypoint": "0x08002004",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xfffffcfeU": "bitmask",
                "FUN_08002004": "initialize_data_processing_08002004",
                "enable_data_processing_08001f84": "enable_data_processing",
                "enable_data_processing_08001f84()": "enable_data_processing",
                "iVar1": "result",
                "iVar3": "value",
                "param_1": "data",
                "param_1[0xb]": "value_2",
                "param_1[10]": "data[10]",
                "puVar2": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080020f0": {
            "additional_data": {
                "FUN_080020f0": {
                    "1": "update_flag_and_state",
                    "10": "update_data",
                    "2": "update_flags_and_values",
                    "6": "update_flags"
                },
                "get_data_08001cc4": {
                    "1": "get_next_data"
                },
                "iVar1": {
                    "1": "difference",
                    "2": "current_value",
                    "3": "current_data",
                    "4": "previous_value",
                    "5": "previous_data"
                },
                "iVar2": {
                    "1": "data_var2",
                    "3": "data_value",
                    "4": "value",
                    "6": "current_data",
                    "7": "current_value"
                },
                "param_1": {
                    "1": "flag_array",
                    "12": "data",
                    "2": "input_array",
                    "3": "data_array",
                    "4": "data_pointer",
                    "7": "data_ptr"
                },
                "param_1[0xb]": {
                    "1": "data_array[0xb]"
                },
                "param_1[10]": {
                    "1": "flags"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "code": "\nundefined4 update_data_080020f0(int *data)\n\n{\n  int previous_data;\n  int current_value;\n  \n  current_value = *data;\n  if ((*(uint *)(current_value + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(current_value + 8) = *(uint *)(current_value + 8) & 0xfffffffe;\n  current_value = get_some_data();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    previous_data = get_some_data();\n  } while ((uint)(previous_data - current_value) < 3);\n  data_array[10] = data_array[10] | 0x10;\n  data_array[0xb] = data_array[0xb] | 1;\n  return 1;\n}\n\n",
            "current_name": "update_data_080020f0",
            "entrypoint": "0x080020f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080020f0": "update_data_080020f0",
                "get_data_08001cc4": "get_some_data",
                "iVar1": "previous_data",
                "iVar2": "current_value",
                "param_1": "data",
                "param_1[0xb]": "data_array[0xb]",
                "param_1[10]": "data_array[10]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800213c": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "register_value3"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "register_value1"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "register_value2"
                },
                "0x0": {
                    "1": "null"
                },
                "0x10": {
                    "1": "flag_a"
                },
                "0x100": {
                    "1": "value_x"
                },
                "0x100000": {
                    "1": "value_w"
                },
                "0x20": {
                    "1": "flag_c"
                },
                "0x2000": {
                    "1": "value_z"
                },
                "0x800": {
                    "1": "flag_b"
                },
                "0xb": {
                    "1": "status"
                },
                "0xff1f0efe": {
                    "1": "expected_result"
                },
                "0xffffeefdU": {
                    "1": "flag_a_mask"
                },
                "0xffffffedU": {
                    "1": "flag_d_mask"
                },
                "0xfffffffcU": {
                    "1": "flag_e_mask"
                },
                "1": {
                    "1": "value_y"
                },
                "FUN_0800213c": {
                    "1": "update_binary_data",
                    "2": "update_parameters",
                    "3": "update_data",
                    "7": "update_function",
                    "9": "update_registers"
                },
                "NULL": {
                    "1": "null"
                },
                "checkAndUpdateData": {
                    "1": "check_and_update_data"
                },
                "data[0xb]": {
                    "1": "status"
                },
                "data[10]": {
                    "1": "data_flags"
                },
                "data[1]": {
                    "1": "value1"
                },
                "data[2]": {
                    "1": "condition"
                },
                "data[3]": {
                    "1": "value3"
                },
                "data[4]": {
                    "1": "counter2"
                },
                "data[5]": {
                    "1": "enable_flag"
                },
                "data[6]": {
                    "1": "counter"
                },
                "data[7]": {
                    "1": "value2"
                },
                "data[9]": {
                    "1": "unused"
                },
                "iVar1": {
                    "1": "return_value",
                    "10": "result",
                    "16": "update_result",
                    "2": "data_update_result"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_ptr",
                    "4": "input_array",
                    "6": "parameters",
                    "9": "data"
                },
                "param_1[0xb]": {
                    "1": "data[0xb]"
                },
                "param_1[10]": {
                    "1": "data[10]"
                },
                "param_1[1]": {
                    "1": "data[1]"
                },
                "param_1[2]": {
                    "1": "data[2]"
                },
                "param_1[3]": {
                    "1": "data[3]"
                },
                "param_1[4]": {
                    "1": "data[4]"
                },
                "param_1[5]": {
                    "1": "data[5]"
                },
                "param_1[6]": {
                    "1": "data[6]"
                },
                "param_1[7]": {
                    "1": "data[7]"
                },
                "status": {
                    "1": "status"
                },
                "uVar2": {
                    "1": "combined_params",
                    "2": "updated_value1",
                    "3": "var1",
                    "6": "combined_values"
                },
                "uVar3": {
                    "1": "conditional_value",
                    "2": "combined_value2",
                    "3": "additional_value"
                },
                "update_data_080020f0": {
                    "1": "update_data_internal",
                    "3": "update_data"
                },
                "update_registers_08004974": {
                    "4": "update_registers"
                }
            },
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 update_registers_0800213c(int *data)\n\n{\n  int update_result;\n  uint combined_values;\n  uint additional_value;\n  \n  if (data == (int *)0x0) {\n    return 1;\n  }\n  if (data[10] == 0) {\n    data[0xb] = 0;\n    *(undefined *)(data + 9) = 0;\n    update_registers_0800213c();\n  }\n  update_result = update_data(data);\n  if (((data[10] & 0x10U) == 0) && (update_result == 0)) {\n    data[10] = data[10] & flag_a_mask | 2;\n    combined_values = data[1] | data[7] | data[3] << 1;\n    if (data[2] == 0x100) {\n      additional_value = 0x100;\n    }\n    else {\n      additional_value = 0;\n      if (data[2] == 1) {\n        additional_value = 0x100;\n      }\n    }\n    if (data[5] == 1) {\n      if (data[3] == 0) {\n        additional_value = additional_value | (data[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        data[10] = data[10] | 0x20;\n        data[0xb] = data[0xb] | 1;\n      }\n    }\n    *(uint *)(*data + 4) = additional_value | *(uint *)(*data + 4) & 0xffff16ff;\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xffe1f7fd | combined_values;\n    if ((data[2] == 0x100) || (data[2] == 1)) {\n      additional_value = (data[4] + -1) * 0x100000;\n    }\n    else {\n      additional_value = 0;\n    }\n    *(uint *)(*data + 0x2c) = additional_value | *(uint *)(*data + 0x2c) & 0xff0fffff;\n    if (combined_values != (*(uint *)(*data + 8) & 0xff1f0efe)) {\n      data[10] = data[10] & flag_d_mask | 0x10;\n      data[0xb] = data[0xb] | 1;\n      return 1;\n    }\n    data[0xb] = 0;\n    data[10] = data[10] & flag_e_mask | 1;\n    return 0;\n  }\n  data[10] = data[10] | 0x10;\n  return 1;\n}\n\n",
            "current_name": "update_registers_0800213c",
            "entrypoint": "0x0800213c",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xffffeefdU": "flag_a_mask",
                "0xffffffedU": "flag_d_mask",
                "0xfffffffcU": "flag_e_mask",
                "FUN_0800213c": "update_registers_0800213c",
                "iVar1": "update_result",
                "param_1": "data",
                "param_1[0xb]": "data[0xb]",
                "param_1[10]": "data[10]",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_1[3]": "data[3]",
                "param_1[4]": "data[4]",
                "param_1[5]": "data[5]",
                "param_1[6]": "data[6]",
                "param_1[7]": "data[7]",
                "uVar2": "combined_values",
                "uVar3": "additional_value",
                "update_data_080020f0": "update_data",
                "update_registers_08004974": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800224c": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "data_ptr[4]"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "data_ptr[5]"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "data_ptr[6]"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "data_ptr[7]"
                },
                "*(uint *)(*param_1 + 0x20)": {
                    "1": "data_ptr[8]"
                },
                "*(uint *)(*param_1 + 0x24)": {
                    "1": "data_ptr[9]"
                },
                "*(uint *)(*param_1 + 0x28)": {
                    "1": "data_ptr[10]"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "data_ptr[11]"
                },
                "*(uint *)(*param_1 + 0x30)": {
                    "1": "data_ptr[12]"
                },
                "*(uint *)(*param_1 + 0x34)": {
                    "1": "data_ptr[13]"
                },
                "*(uint *)(*param_1 + 0x38)": {
                    "1": "data_ptr[14]"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "data_ptr[3]"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "data_ptr[1]"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "data_ptr[2]"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "data_ptr[9]"
                },
                "*(undefined4 *)*param_1": {
                    "1": "data_ptr[0]"
                },
                "*param_1": {
                    "1": "ptr_data_array"
                },
                "FUN_0800224c": {
                    "1": "update_data_and_reset_registers",
                    "10": "update_data",
                    "2": "update_param_data"
                },
                "iVar1": {
                    "1": "status",
                    "25": "result",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "input_data",
                    "11": "data",
                    "2": "param",
                    "3": "data_ptr",
                    "4": "data_array"
                },
                "update_control_registers_080049f0": {
                    "6": "update_control_registers"
                },
                "update_data_080020f0": {
                    "1": "update_data_function",
                    "5": "update_data"
                }
            },
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nint update_data_0800224c(int *data)\n\n{\n  int result;\n  \n  if (data == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    data[10] = data[10] | 2;\n    result = update_data_0800224c();\n    if (result == 0) {\n      *(undefined4 *)*data = 0xffffffe0;\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xff3f0000;\n      *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xff0106f0;\n      *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xff000000;\n      *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xc0000000;\n      *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffff000;\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffff000;\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffff000;\n      *(uint *)(*data + 0x20) = *(uint *)(*data + 0x20) & 0xfffff000;\n      *(uint *)(*data + 0x24) = *(uint *)(*data + 0x24) & 0xfffff000;\n      *(uint *)(*data + 0x28) = *(uint *)(*data + 0x28) & 0xfffff000;\n      *(uint *)(*data + 0x2c) = *(uint *)(*data + 0x2c) & 0xff000000;\n      *(uint *)(*data + 0x2c) = *(uint *)(*data + 0x2c) & 0xff000000;\n      *(uint *)(*data + 0x30) = *(uint *)(*data + 0x30) & 0xc0000000;\n      *(uint *)(*data + 0x34) = *(uint *)(*data + 0x34) & 0xc0000000;\n      *(uint *)(*data + 0x38) = *(uint *)(*data + 0x38) & 0xffc00000;\n      *(uint *)(*data + 0x38) = *(uint *)(*data + 0x38) & 0xffc00000;\n      update_control_registers(data);\n      data[0xb] = 0;\n      data[10] = 0;\n    }\n    *(undefined *)(data + 9) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_data_0800224c",
            "entrypoint": "0x0800224c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800224c": "update_data_0800224c",
                "iVar1": "result",
                "param_1": "data",
                "update_control_registers_080049f0": "update_control_registers",
                "update_data_080020f0": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002348": {
            "additional_data": {
                "*(char *)(param_1 + 0x24)": {
                    "1": "data_status",
                    "2": "flag"
                },
                "*(uint *)(param_1 + 0x28)": {
                    "1": "data_ptr"
                },
                "*(undefined *)(param_1 + 0x24)": {
                    "1": "set_data_status",
                    "2": "flag_ptr"
                },
                "*PTR_08002368": {
                    "1": "data_status"
                },
                "0x24": {
                    "1": "status_flag"
                },
                "0x28": {
                    "1": "data"
                },
                "F0_08002348": {
                    "1": "update_data"
                },
                "FUN_08002348": {
                    "1": "update_data",
                    "2": "update_and_check_data",
                    "5": "update_data_status",
                    "9": "check_and_update_data"
                },
                "iVar1": {
                    "1": "return_value",
                    "19": "result",
                    "2": "update_status",
                    "4": "update_result",
                    "5": "status"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "data",
                    "2": "data_address",
                    "3": "data_ptr",
                    "4": "input_data"
                },
                "update_data_080020f0": {
                    "1": "update_data_function",
                    "5": "update_data"
                },
                "update_data_080020f0()": {
                    "1": "update_data"
                }
            },
            "called": [
                "FUN_080020f0"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nint check_and_update_data_08002348(int data)\n\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = update_data;\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}\n\n",
            "current_name": "check_and_update_data_08002348",
            "entrypoint": "0x08002348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002348": "check_and_update_data_08002348",
                "iVar1": "result",
                "param_1": "data",
                "update_data_080020f0": "update_data",
                "update_data_080020f0()": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002384": {
            "additional_data": {
                "FUN_08002384": {
                    "1": "update_data_and_process",
                    "25": "process_data"
                },
                "calculate_data_value_08003da4": {
                    "1": "calculate_value"
                },
                "enable_data_processing_08001f84": {
                    "1": "enable_data_processing"
                },
                "get_data_08001cc4": {
                    "1": "get_data"
                },
                "iVar2": {
                    "1": "result_code",
                    "12": "result",
                    "13": "update_result",
                    "2": "update_status"
                },
                "iVar4": {
                    "1": "data_1",
                    "2": "initial_value",
                    "3": "start",
                    "4": "start_timestamp",
                    "5": "start_time"
                },
                "iVar5": {
                    "1": "start_val2",
                    "2": "current_index",
                    "3": "current",
                    "4": "current_time",
                    "6": "current_value"
                },
                "local_14": {
                    "1": "iteration_counter",
                    "13": "loop_counter",
                    "3": "counter",
                    "4": "loop_count",
                    "5": "iteration_count"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_ptr",
                    "24": "data",
                    "4": "data_array"
                },
                "uVar1": {
                    "1": "total",
                    "2": "value1",
                    "3": "divisor",
                    "4": "data_value",
                    "6": "dividend"
                },
                "uVar3": {
                    "1": "constant2",
                    "2": "value2",
                    "4": "calculated_value",
                    "6": "divisor",
                    "7": "data_value"
                },
                "update_data_080020f0": {
                    "1": "update_data"
                }
            },
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nint process_data_08002384(int *data)\n\n{\n  uint dividend;\n  int update_result;\n  uint data_value;\n  int start_time;\n  int current_value;\n  int loop_counter;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  update_result = update_data();\n  if (update_result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    dividend = DAT_20000084;\n    data_value = calculate_value(2);\n    for (loop_counter = dividend / data_value << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    enable_data_processing(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start_time = get_data();\n    while (current_value = *data, (*(uint *)(current_value + 8) & 8) != 0) {\n      current_value = get_data();\n      if (10 < (uint)(current_value - start_time)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_value + 8) = *(uint *)(current_value + 8) | 4;\n    start_time = get_data();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current_value = get_data();\n      if (10 < (uint)(current_value - start_time)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return update_result;\n}\n\n",
            "current_name": "process_data_08002384",
            "entrypoint": "0x08002384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002384": "process_data_08002384",
                "calculate_data_value_08003da4": "calculate_value",
                "enable_data_processing_08001f84": "enable_data_processing",
                "get_data_08001cc4": "get_data",
                "iVar2": "update_result",
                "iVar4": "start_time",
                "iVar5": "current_value",
                "local_14": "loop_counter",
                "param_1": "data",
                "uVar1": "dividend",
                "uVar3": "data_value",
                "update_data_080020f0": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002470": {
            "additional_data": {
                "FUN_08002470": {
                    "1": "update_values",
                    "2": "update_data_value",
                    "5": "update_register_value",
                    "7": "update_configuration"
                },
                "_08002470": {
                    "1": "update_data"
                },
                "_DAT_e000ed0c": {
                    "1": "configuration",
                    "2": "data_value",
                    "6": "config_register",
                    "7": "register_value"
                },
                "param_1": {
                    "1": "configuration",
                    "13": "input_value",
                    "3": "config_value",
                    "4": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "code": "\n\n\nvoid update_configuration_08002470(uint input_value)\n\n{\n  _DAT_e000ed0c = (input_value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_configuration_08002470",
            "entrypoint": "0x08002470",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002470": "update_configuration_08002470",
                "_08002470": "update_data",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002494": {
            "additional_data": {
                "(*(char *)((param_1 & 0xf) + 0xe000ed14))": {
                    "1": "target_byte1"
                },
                "(*(char *)(param_1 + 0xe000e400))": {
                    "1": "target_byte2"
                },
                "(1 << (uVar1 & 0xff)) - 1U": {
                    "1": "mask2"
                },
                "(1 << (uVar1 & 0xff)) - 1U & param_3": {
                    "1": "masked_bit"
                },
                "(char)(uVar1 << 4)": {
                    "1": "updated_character"
                },
                "(int)param_1 < 0": {
                    "1": "check_negative"
                },
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "char_offset"
                },
                "(param_2 & mask) << shift_amount": {
                    "1": "masked_param"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "output1"
                },
                "*(char *)(param_1 + 0xe000e400)": {
                    "1": "write_to_memory2"
                },
                "1": {
                    "1": "one"
                },
                "1 << (uVar2 & 0xff)": {
                    "1": "mask"
                },
                "4": {
                    "1": "four"
                },
                "7": {
                    "1": "seven"
                },
                "7 - uVar1": {
                    "1": "remaining_bits_adjusted"
                },
                "FUN_08002494": {
                    "1": "update_value_in_memory",
                    "2": "update_data",
                    "3": "update_memory_value",
                    "4": "update_register_value",
                    "5": "update_memory"
                },
                "char": {
                    "1": "byte"
                },
                "char_1": {
                    "1": "character"
                },
                "char_2": {
                    "1": "character"
                },
                "param_1": {
                    "1": "data_offset",
                    "16": "address",
                    "2": "offset",
                    "3": "character_index"
                },
                "param_1 & 0xf": {
                    "1": "character_offset"
                },
                "param_1 + 0xe000e400": {
                    "1": "register_address"
                },
                "param_2": {
                    "1": "input1",
                    "2": "mask1",
                    "4": "bitmask",
                    "8": "mask"
                },
                "param_3": {
                    "1": "value2",
                    "2": "data2",
                    "3": "mask",
                    "5": "data",
                    "8": "value"
                },
                "uVar1": {
                    "1": "shifted_bits_count",
                    "2": "shift_count",
                    "4": "shifted_value",
                    "6": "shifted_bits",
                    "9": "shift_amount"
                },
                "uVar1 & 0xff": {
                    "1": "shift_amount"
                },
                "uVar1 << 0x1d": {
                    "1": "shifted_bits_left"
                },
                "uVar1_and": {
                    "1": "and_value1"
                },
                "uVar1_and_final": {
                    "1": "final_and_value1"
                },
                "uVar1_and_new": {
                    "1": "updated_and_value1"
                },
                "uVar1_condition": {
                    "1": "condition_value1"
                },
                "uVar1_data": {
                    "1": "data_value1"
                },
                "uVar1_data_final": {
                    "1": "final_data_value1"
                },
                "uVar1_final": {
                    "1": "shift_count_final"
                },
                "uVar1_final_modified": {
                    "1": "shift_count_final_modified"
                },
                "uVar1_masked": {
                    "1": "shift_count_masked"
                },
                "uVar1_modified": {
                    "1": "shift_count_modified"
                },
                "uVar1_negative": {
                    "1": "is_negative1"
                },
                "uVar1_new": {
                    "1": "updated_shift_amount"
                },
                "uVar1_next": {
                    "1": "next_value1"
                },
                "uVar1_previous": {
                    "1": "previous_shift_amount"
                },
                "uVar1_shifted": {
                    "1": "shift_count_shifted"
                },
                "uVar1_shifted_data_masked": {
                    "1": "shift_count_shifted_data_masked"
                },
                "uVar1_shifted_masked": {
                    "1": "shift_count_shifted_masked"
                },
                "uVar1_shifting": {
                    "1": "shifting_value1"
                },
                "uVar1_shifting_final": {
                    "1": "final_shifting_value1"
                },
                "uVar1_shifting_new": {
                    "1": "updated_shifting_value1"
                },
                "uVar1_updated": {
                    "1": "updated_shift_amount"
                },
                "uVar2": {
                    "1": "adjusted_remaining_bits",
                    "2": "shift_amount",
                    "3": "num_bits",
                    "7": "remaining_bits"
                },
                "uVar2_and": {
                    "1": "and_value2"
                },
                "uVar2_and_final": {
                    "1": "final_and_value2"
                },
                "uVar2_and_new": {
                    "1": "updated_and_value2"
                },
                "uVar2_condition": {
                    "1": "condition_value2"
                },
                "uVar2_data": {
                    "1": "data_value2"
                },
                "uVar2_data_final": {
                    "1": "final_data_value2"
                },
                "uVar2_final": {
                    "1": "final_num_bits"
                },
                "uVar2_masked": {
                    "1": "bit_offset_masked"
                },
                "uVar2_new": {
                    "1": "adjusted_num_bits"
                },
                "uVar2_shifting": {
                    "1": "shifting_value2"
                },
                "uVar2_shifting_final": {
                    "1": "final_shifting_value2"
                },
                "uVar2_shifting_new": {
                    "1": "updated_shifting_value2"
                },
                "uVar2_updated": {
                    "1": "updated_num_bits"
                },
                "uVar3": {
                    "1": "shift_count"
                },
                "uVar4": {
                    "1": "temp2"
                },
                "uVar5": {
                    "1": "shifted_data"
                },
                "uVar6": {
                    "1": "masked_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "code": "\n\n\nvoid update_memory_08002494(uint address,uint mask,uint value)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (mask & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & value;\n  if ((int)address < 0) {\n    *(byte *)((address & 0xf) + 0xe000ed14) = (byte)(shift_amount << 4);\n  }\n  else {\n    *(byte *)(address + 0xe000e400) = (byte)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_08002494",
            "entrypoint": "0x08002494",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002494": "update_memory_08002494",
                "char": "byte",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080024f8": {
            "additional_data": {
                "(param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "array_index"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_location",
                    "3": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "3": "bit_mask",
                    "4": "bit_value"
                },
                "<unnamed_variable_1>": {
                    "1": "mask"
                },
                "<unnamed_variable_2>": {
                    "1": "buffer"
                },
                "DAT_08BE7938": {
                    "1": "offset"
                },
                "FUN_080024f8": {
                    "1": "set_bit_at_offset",
                    "11": "set_bit",
                    "3": "set_bit_in_memory",
                    "4": "set_bit_value",
                    "5": "set_bit_at_index",
                    "6": "set_bit_in_array"
                },
                "PTR_08BE7934": {
                    "1": "array"
                },
                "int": {
                    "1": "value"
                },
                "param_1": {
                    "1": "offset",
                    "14": "index",
                    "2": "num",
                    "5": "bit_index",
                    "7": "bit_position"
                },
                "param_1 & 0x1f": {
                    "2": "bit_index"
                },
                "param_1 >> 5": {
                    "1": "array_index"
                },
                "param_1 >> 5 * 4 + -0x1fff1f00": {
                    "1": "address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "code": "\nvoid set_bit_080024f8(uvalue index)\n\n{\n  if (-1 < (value)index) {\n    *(value *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_080024f8",
            "entrypoint": "0x080024f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080024f8": "set_bit_080024f8",
                "int": "value",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002514": {
            "additional_data": {
                "DAT_e000ed23": {
                    "1": "param_val_2",
                    "2": "data_flag",
                    "5": "status",
                    "7": "constant_value"
                },
                "FUN_08002514": {
                    "1": "initialize_value",
                    "2": "set_param_values",
                    "4": "initialize_data",
                    "5": "set_parameters",
                    "9": "initialize_memory"
                },
                "_DAT_e000e010": {
                    "1": "register_value",
                    "2": "flag_value",
                    "5": "limit",
                    "8": "flag"
                },
                "_DAT_e000e014": {
                    "1": "result",
                    "2": "updated_value",
                    "3": "base_address"
                },
                "_DAT_e000e018": {
                    "1": "zero_flag",
                    "16": "counter",
                    "2": "initialized_value"
                },
                "param_1": {
                    "1": "memory_size",
                    "16": "value",
                    "2": "size",
                    "4": "address",
                    "7": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "code": "\n\n\nundefined4 initialize_memory_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_memory_08002514",
            "entrypoint": "0x08002514",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002514": "initialize_memory_08002514",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002540": {
            "additional_data": {
                "(int)param_1": {
                    "1": "signed_index"
                },
                "(param_1 >> 5) + 0x60": {
                    "1": "array_index"
                },
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "array_address",
                    "2": "bit_field",
                    "3": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "10": "bit_mask",
                    "2": "bit_value"
                },
                "<original_variable_name>": {
                    "1": "bit_array"
                },
                "FUN_08002540": {
                    "1": "set_bit_in_memory",
                    "5": "set_bit_at_index",
                    "6": "set_bit_at_position",
                    "7": "set_bit",
                    "8": "set_bit_in_array"
                },
                "index": {
                    "1": "index"
                },
                "param_1": {
                    "1": "value",
                    "10": "bit_index",
                    "11": "index",
                    "4": "bit_position",
                    "5": "position"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index"
                },
                "param_1 >> 5": {
                    "1": "block_index"
                },
                "param_1 >> 5 + 0x60 * 4 - 0x1fff1f00": {
                    "1": "array_index"
                },
                "param_2": {
                    "1": "unused"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid set_bit_in_array_08002540(uint index)\n\n{\n  if (-1 < signed_index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_08002540",
            "entrypoint": "0x08002540",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "signed_index",
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002560": {
            "additional_data": {
                "FUN_08002560": {
                    "1": "update_permission_flag",
                    "2": "set_flag_based_on_param",
                    "3": "set_flag",
                    "4": "update_control_register"
                },
                "_DAT_e000e010": {
                    "1": "flags",
                    "2": "register",
                    "3": "status_register",
                    "4": "register_value",
                    "5": "control_register",
                    "7": "flag_register"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "bit_value",
                    "4": "status",
                    "8": "flag_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n\nvoid update_control_register_08002560(int flag_value)\n\n{\n  if (flag_value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "current_name": "update_control_register_08002560",
            "entrypoint": "0x08002560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002560": "update_control_register_08002560",
                "param_1": "flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002580": {
            "called": [],
            "calling": [
                "FUN_08002582"
            ],
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002580",
            "entrypoint": "0x08002580",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002582": {
            "additional_data": {
                "FUNC_08002580": {
                    "1": "execute_startup_tasks",
                    "2": "initialize_components",
                    "3": "initialize_system",
                    "4": "execute_initialization",
                    "5": "initialize_data"
                },
                "FUN_08002582": {
                    "1": "perform_initial_setup",
                    "2": "initialize_program",
                    "3": "initialize_system",
                    "4": "execute_function",
                    "8": "execute_initialization"
                }
            },
            "called": [
                "FUN_08002580"
            ],
            "calling": [
                "FUN_08004b9e"
            ],
            "code": "\nvoid execute_initialization_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "current_name": "execute_initialization_08002582",
            "entrypoint": "0x08002582",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002582": "execute_initialization_08002582"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800258c": {
            "additional_data": {
                "(code *)param_1[0xd]": {
                    "1": "callback_function"
                },
                "(code *)param_1[0xd])()": {
                    "1": "execute_callback"
                },
                "(uint *)0x4": {
                    "1": "default_mode"
                },
                "(uint *)0x40020008": {
                    "1": "flag_ptr_1"
                },
                "(uint *)0x4002001c": {
                    "1": "flag_ptr_2"
                },
                "(uint *)0x40020030": {
                    "1": "flag_ptr_3"
                },
                "(uint *)0x40020044": {
                    "1": "flag_ptr_4"
                },
                "(uint *)0x40020058": {
                    "1": "flag_ptr_5"
                },
                "(uint *)0x4002006c": {
                    "1": "flag_ptr_6"
                },
                "*(char *)((int)param_1 + 0x21)": {
                    "1": "flag_check",
                    "2": "config_type",
                    "4": "flag"
                },
                "*(char *)((int)parameters + 0x21)": {
                    "1": "flag_char"
                },
                "*(code *)param_1[0xd]": {
                    "1": "function_to_call"
                },
                "*(undefined *)((int)param_1 + 0x21)": {
                    "1": "is_config_set"
                },
                "*(undefined *)((int)parameters + 0x21)": {
                    "1": "updated_flag_char"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "initialized_flag"
                },
                "**(param_1)": {
                    "1": "value"
                },
                "**param_1": {
                    "1": "current_value"
                },
                "*param_1": {
                    "1": "value_pointer"
                },
                "0x0": {
                    "1": "null_value"
                },
                "0x1": {
                    "1": "new_value"
                },
                "0x10": {
                    "1": "data_value5"
                },
                "0x100": {
                    "1": "data_value4"
                },
                "0x1000": {
                    "1": "data_value3"
                },
                "0x10000": {
                    "1": "data_value2"
                },
                "0x100000": {
                    "1": "data_value1"
                },
                "0x1000000": {
                    "1": "default_data_value"
                },
                "0x21": {
                    "1": "condition_flag"
                },
                "0x4": {
                    "1": "error_value"
                },
                "0x40020004": {
                    "1": "data_address"
                },
                "0x40020008": {
                    "1": "address1"
                },
                "0x4002001c": {
                    "1": "address2"
                },
                "0x40020030": {
                    "1": "address3"
                },
                "0x40020044": {
                    "1": "address4"
                },
                "0x40020058": {
                    "1": "address5"
                },
                "0x4002006c": {
                    "1": "address6"
                },
                "0xd": {
                    "1": "callback"
                },
                "0xe": {
                    "2": "error_code"
                },
                "0xfffffffe": {
                    "1": "bitwise_mask"
                },
                "0xffffffff": {
                    "1": "mask"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_40020004": {
                    "1": "data_status"
                },
                "FUN_0800258c": {
                    "1": "update_control_register",
                    "2": "set_configuration",
                    "3": "configure_device",
                    "8": "initialize_data"
                },
                "PTR_": {
                    "1": ""
                },
                "_DAT_40020004": {
                    "1": "data_flag",
                    "2": "config_value",
                    "3": "result"
                },
                "char *param_1 + 0x21": {
                    "1": "status_byte"
                },
                "code": {
                    "1": "function_pointer"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "data_array",
                    "3": "parameters",
                    "5": "data"
                },
                "param_1 + 8": {
                    "1": "status"
                },
                "param_1[0xd]": {
                    "1": "callback_ptr",
                    "3": "callback_func",
                    "7": "callback_function"
                },
                "param_1[0xe]": {
                    "1": "device_error_code",
                    "2": "error_flag",
                    "5": "error_code"
                },
                "puVar1": {
                    "1": "config_data",
                    "2": "current_config",
                    "3": "current_data",
                    "4": "current_value",
                    "5": "current_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "code": "\n\n\nundefined4 initialize_data_0800258c(uint **data)\n\n{\n  uint *current_param;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    error_code = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  current_param = *data;\n  if (current_param == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (current_param == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (current_param == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (current_param == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (current_param == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (current_param == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback_function != (uint *)0x0) {\n    (*(function_pointer *)callback_function)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_0800258c",
            "entrypoint": "0x0800258c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800258c": "initialize_data_0800258c",
                "code": "function_pointer",
                "param_1": "data",
                "param_1[0xd]": "callback_function",
                "param_1[0xe]": "error_code",
                "puVar1": "current_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002624": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "update_flags_and_registers"
                },
                "<param_1>": {
                    "1": "flags"
                },
                "<param_2>": {
                    "1": "conditions"
                },
                "<puVar1>": {
                    "1": "flags_ptr"
                },
                "<uVar2>": {
                    "1": "bit_mask"
                },
                "<uVar3>": {
                    "1": "condition_mask"
                },
                "<uVar4>": {
                    "1": "bit_index"
                },
                "<uVar5>": {
                    "1": "condition_value"
                },
                "<uVar6>": {
                    "1": "register_value"
                },
                "FUN_08002624": {
                    "1": "update_flags_and_settings",
                    "2": "update_parameters",
                    "3": "update_configuration",
                    "4": "update_registers"
                },
                "_DAT_40010400": {
                    "1": "register0_flags",
                    "2": "register1"
                },
                "_DAT_40010404": {
                    "1": "data_3",
                    "2": "register2"
                },
                "_DAT_40010408": {
                    "1": "data_4",
                    "2": "register3"
                },
                "_DAT_4001040c": {
                    "1": "data_5",
                    "2": "register4"
                },
                "_DAT_40010800": {
                    "1": "register0"
                },
                "_DAT_40010c00": {
                    "1": "register1"
                },
                "_DAT_40011000": {
                    "1": "register2"
                },
                "_DAT_40011400": {
                    "1": "register3"
                },
                "_DAT_40021018": {
                    "1": "data_1"
                },
                "iVar7": {
                    "1": "register_index",
                    "2": "index",
                    "3": "shift",
                    "4": "bit_position"
                },
                "iVar8": {
                    "1": "register_idx",
                    "18": "register_index",
                    "2": "shift_amount2",
                    "3": "index"
                },
                "param_1": {
                    "1": "bitmask1",
                    "2": "output_values",
                    "3": "output_params",
                    "4": "output_array"
                },
                "param_2": {
                    "1": "instruction",
                    "2": "register2",
                    "3": "input_params",
                    "5": "input_array"
                },
                "puVar1": {
                    "1": "updated_register",
                    "3": "output_ptr"
                },
                "uVar2": {
                    "1": "shifted_bit",
                    "26": "bit_mask"
                },
                "uVar3": {
                    "1": "bit_mask_result",
                    "12": "bit_check",
                    "2": "input_bit"
                },
                "uVar4": {
                    "1": "iteration_count",
                    "12": "bit_index",
                    "4": "bit_position",
                    "5": "index"
                },
                "uVar5": {
                    "1": "register_value",
                    "2": "value_check",
                    "3": "opcode",
                    "7": "value"
                },
                "uVar6": {
                    "1": "inserted_bits",
                    "15": "new_value",
                    "2": "update_value",
                    "7": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "code": "\n\n\nvoid update_registers_08002624(uint *output_array,uint *input_array)\n\n{\n  uint *output_ptr;\n  uint bit_mask;\n  uint bit_check;\n  uint bit_index;\n  uint value;\n  uint new_value;\n  int bit_position;\n  int register_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input_array & bit_mask;\n    if (bit_mask == bit_check) {\n      value = input_array[1];\n      if (value == 0x12) {\n        new_value = input_array[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          new_value = input_array[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_08002776;\n          if (value == 1) {\n            new_value = input_array[3];\n          }\n        }\n        else if (value == 3) {\n          new_value = 0;\n        }\n        else if (value == 0x11) {\n          new_value = input_array[3] + 4;\n        }\n      }\n      else if (value == 0x10210000) {\nLAB_08002776:\n        if (input_array[2] == 0) {\n          new_value = 4;\n        }\n        else if (input_array[2] == 1) {\n          output_array[4] = bit_mask;\n          new_value = 8;\n        }\n        else {\n          output_array[5] = bit_mask;\n          new_value = 8;\n        }\n      }\n      else if (value < 0x10210001) {\n        if ((value == 0x10110000) || (value == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((value == 0x10310000) || ((value == 0x10320000 || (value == 0x10220000))))\n      goto LAB_08002776;\n      bit_mask = bit_index;\n      output_ptr = output_array;\n      if (0xff < bit_check) {\n        bit_mask = bit_index - 8;\n        output_ptr = output_array + 1;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask << 2 & 0xff)) | new_value << (bit_mask << 2 & 0xff);\n      if ((input_array[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bit_position = (bit_index & 3) << 2;\n        if (output_array == (uint *)0x40010800) {\n          register_index = 0;\n        }\n        else if (output_array == (uint *)0x40010c00) {\n          register_index = 1;\n        }\n        else if (output_array == (uint *)0x40011000) {\n          register_index = 2;\n        }\n        else if (output_array == (uint *)0x40011400) {\n          register_index = 3;\n        }\n        else {\n          register_index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bit_position) | register_index << bit_position;\n        if ((input_array[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_check;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_check;\n        }\n        if ((input_array[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_check;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_check;\n        }\n        if ((input_array[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_check;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_check;\n        }\n        if ((input_array[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_check;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_registers_08002624",
            "entrypoint": "0x08002624",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002624": "update_registers_08002624",
                "iVar7": "bit_position",
                "iVar8": "register_index",
                "param_1": "output_array",
                "param_2": "input_array",
                "puVar1": "output_ptr",
                "uVar2": "bit_mask",
                "uVar3": "bit_check",
                "uVar4": "bit_index",
                "uVar5": "value",
                "uVar6": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002810": {
            "additional_data": {
                "*(uint *)(param_1 + 8)": {
                    "1": "bit_to_check",
                    "2": "mask"
                },
                "*PTR_1": {
                    "1": "bitwise_mask"
                },
                "0": {
                    "1": "false_value"
                },
                "1": {
                    "1": "true_value"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<unchanged>": {
                    "1": "<unchanged>"
                },
                "<undefined_variable>": {
                    "1": "<removed_undefined_variable>"
                },
                "FUN_08002810": {
                    "1": "check_bit_in_parameter",
                    "19": "check_bit",
                    "2": "check_bit_presence",
                    "3": "check_bitwise_intersection"
                },
                "bits_to_check": {
                    "1": "mask"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_ptr",
                    "3": "value",
                    "4": "data_address",
                    "5": "input_value"
                },
                "param_1 + 8": {
                    "1": "address_of_bit_mask"
                },
                "param_1+8": {
                    "1": "check_mask"
                },
                "param_2": {
                    "1": "flags",
                    "15": "bit_mask",
                    "2": "value",
                    "8": "bitmask"
                },
                "param_3": {
                    "1": "offset"
                },
                "param_4": {
                    "1": "result"
                },
                "param_5": {
                    "1": "input_address"
                },
                "param_6": {
                    "1": "mask_address"
                },
                "return": {
                    "2": "result"
                },
                "return 0": {
                    "1": "no_intersection"
                },
                "return 1": {
                    "1": "intersection"
                },
                "return_value": {
                    "1": "result"
                },
                "var_1": {
                    "1": "mask_address"
                },
                "var_2": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c48"
            ],
            "code": "\nundefined4 check_bit_08002810(int input_value,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_value + 8)) == 0) {\n    result 0;\n  }\n  result 1;\n}\n\n",
            "current_name": "check_bit_08002810",
            "entrypoint": "0x08002810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "input_value",
                "param_2": "bit_mask",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800281e": {
            "additional_data": {
                "*(int *)(addressToSet)": {
                    "1": "target"
                },
                "*(int *)(memoryAddressOffset)": {
                    "1": "updated_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "value_ptr",
                    "2": "target_value"
                },
                "0x10": {
                    "1": "offset"
                },
                "FUN_0800281e": {
                    "1": "update_value_in_memory",
                    "14": "set_param_value",
                    "3": "set_param",
                    "4": "update_parameter_value"
                },
                "addressToSet": {
                    "1": "target_address"
                },
                "isShifted": {
                    "1": "is_value_shifted"
                },
                "newValue": {
                    "1": "updated_value"
                },
                "param_1": {
                    "1": "param_base_address",
                    "11": "base_address",
                    "9": "object_address"
                },
                "param_1 + 0x10": {
                    "1": "parameter_address",
                    "3": "value_address"
                },
                "param_1+0x10": {
                    "1": "address_to_modify"
                },
                "param_2": {
                    "1": "new_parameter_value",
                    "12": "value",
                    "15": "new_value",
                    "2": "param_value"
                },
                "param_2 << 0x10": {
                    "1": "shifted_value"
                },
                "param_3": {
                    "1": "condition",
                    "2": "shift_value",
                    "20": "is_shifted",
                    "4": "shift_flag"
                },
                "param_4": {
                    "1": "result"
                },
                "param_5": {
                    "1": "result_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c30"
            ],
            "code": "\nvoid set_param_value_0800281e(int base_address,int new_value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(base_address + 0x10) = new_value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = new_value;\n  return;\n}\n\n",
            "current_name": "set_param_value_0800281e",
            "entrypoint": "0x0800281e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "is_shifted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800282c": {
            "additional_data": {
                "FUN_0800282c": {
                    "1": "process_if_bit_set",
                    "10": "update_and_process_data",
                    "2": "process_and_check_data",
                    "3": "update_data_and_process",
                    "4": "update_data_if_needed"
                },
                "_DAT_40010414": {
                    "1": "data_40010414",
                    "2": "existing_data",
                    "3": "data_flag",
                    "7": "current_data"
                },
                "check_and_process_data_080060e4": {
                    "1": "process_data_if_needed",
                    "2": "verify_and_process_data",
                    "3": "process_updated_data",
                    "4": "process_data",
                    "5": "check_and_process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "data",
                    "2": "input_data",
                    "3": "flag",
                    "4": "input_value"
                }
            },
            "called": [
                "FUN_080060e4"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_and_process_data_0800282c(uint data)\n\n{\n  if ((_DAT_40010414 & data) != 0) {\n    _DAT_40010414 = data;\n    check_and_process_data();\n  }\n  return;\n}\n\n",
            "current_name": "update_and_process_data_0800282c",
            "entrypoint": "0x0800282c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800282c": "update_and_process_data_0800282c",
                "check_and_process_data_080060e4": "check_and_process_data",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002848": {
            "additional_data": {
                "(uint *)(*param_1 + 0x10)": {
                    "1": "flag_pointer"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": {
                    "1": "shift_and_mask_f0"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": {
                    "1": "shift_and_mask_f1"
                },
                "*(char *)((int)deviceData + 0x3d)": {
                    "1": "character2"
                },
                "*(char *)((int)deviceData + 0x3e)": {
                    "1": "character1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "param_array->char_value2",
                    "6": "char2"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "param1_char",
                    "6": "char1"
                },
                "*(char *)((int)parameters + 0x3d)": {
                    "1": "char_value2"
                },
                "*(char *)((int)parameters + 0x3e)": {
                    "1": "char_value"
                },
                "*(char *)((int)ptr + 0x3d)": {
                    "1": "ptr_char2"
                },
                "*(char *)((int)ptr + 0x3e)": {
                    "1": "ptr_char1"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "status_register",
                    "4": "status_value"
                },
                "*(uint *)(*parameters + 0x10)": {
                    "1": "result"
                },
                "*(uint *)(*ptr + 0x10)": {
                    "1": "ptr_result"
                },
                "*param_1": {
                    "1": "input_array[0]",
                    "2": "control_ptr",
                    "3": "status_ptr"
                },
                "0xfe": {
                    "1": "mask_fe"
                },
                "0xffU": {
                    "1": "mask_ff"
                },
                "FUN_08002848": {
                    "1": "update_parameter_value",
                    "2": "update_flags",
                    "3": "update_flag_value",
                    "7": "update_status"
                },
                "inputArray": {
                    "1": "input_array"
                },
                "param_1": {
                    "1": "control_params",
                    "2": "status_data",
                    "3": "param_array",
                    "4": "input_array"
                },
                "param_1[0x11]": {
                    "1": "status_value",
                    "2": "input_array[17]",
                    "6": "value"
                },
                "param_1[0x14]": {
                    "1": "flag_val",
                    "2": "value1",
                    "4": "status_flag"
                },
                "param_1[4]": {
                    "1": "param1_index4",
                    "2": "input_array[4]"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_status_08002848(int *status)\n\n{\n  if (*(char *)((int)status + 0x3e) == '@') {\n    if (status_flag == 0) {\n      *(uint *)(*status + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*status + 0x10) = value & mask_ff | 1;\n    }\n  }\n  else if (value3 == 0x4000) {\n    if (*(char *)((int)status + 0x3d) == '!') {\n      *(uint *)(*status + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*status + 0x10) = value & mask_ff | 1;\n    }\n  }\n  else if (status_flag == 0) {\n    *(uint *)(*status + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (status_flag == 1) {\n    *(uint *)(*status + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_status_08002848",
            "entrypoint": "0x08002848",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xffU": "mask_ff",
                "FUN_08002848": "update_status_08002848",
                "param_1": "status",
                "param_1[0x11]": "value",
                "param_1[0x14]": "status_flag",
                "param_1[4]": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028d2": {
            "additional_data": {
                "& 0xff": {
                    "1": "mask"
                },
                "*(uint *)(*data + 0x10)": {
                    "1": "offset"
                },
                "*(uint *)(*memoryAddress + 0x10)": {
                    "1": "target_memory_location"
                },
                "*(uint *)(*memory_location + 0x10)": {
                    "1": "memory_address"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "address_to_update",
                    "3": "target_address"
                },
                "*param_1": {
                    "1": "parameter_value"
                },
                "0x10": {
                    "1": "offset"
                },
                "0xff": {
                    "1": "bitmask",
                    "2": "bit_mask"
                },
                "DAT_": {
                    "1": "dat"
                },
                "FUN_080028d2": {
                    "1": "update_param1",
                    "2": "set_parameter_value",
                    "3": "set_param_value",
                    "6": "update_parameter_value"
                },
                "PTR_": {
                    "1": "ptr"
                },
                "param_1": {
                    "1": "param",
                    "2": "buffer",
                    "3": "memory_address",
                    "6": "parameter"
                },
                "param_1[0x11]": {
                    "1": "param_list->input",
                    "2": "byte_value",
                    "3": "value"
                },
                "param_1[0x11] & 0xff": {
                    "1": "source_value",
                    "2": "masked_value"
                },
                "uint": {
                    "2": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_parameter_value_080028d2(int *parameter)\n\n{\n  *(unsigned_integer *)(*parameter + 0x10) = param_value & 0xff;\n  return 0;\n}\n\n",
            "current_name": "update_parameter_value_080028d2",
            "entrypoint": "0x080028d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028d2": "update_parameter_value_080028d2",
                "param_1": "parameter",
                "param_1[0x11]": "param_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028de": {
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 FUNC_080028de(uint **param_1)\n\n{\n  uint *puVar1;\n  \n  puVar1 = param_1[0xb];\n  if ((*(char *)((int)param_1 + 0x3d) == '\\\"') &&\n     ((param_1[0x14] != (uint *)0x0 || (*(char *)((int)param_1 + 0x3e) != '@')))) {\n    if ((param_1[0x14] == (uint *)0x0) && (param_1[4] == (uint *)0xc000)) {\n      **param_1 = **param_1 | 0x100;\n      param_1[0x14] = (uint *)((int)param_1[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)param_1 + 0x2a) == 0) {\n        **param_1 = **param_1 | 0x200;\n      }\n      else if (*(short *)((int)param_1 + 0x2a) == 1) {\n        if (puVar1 == (uint *)0xffff0000) {\n          **param_1 = **param_1 & 0xfffffbff;\n          puVar1 = *param_1;\n          if ((puVar1[1] & 0x800) == 0) {\n            *puVar1 = *puVar1 | 0x200;\n          }\n          else {\n            *puVar1 = *puVar1 & 0xfffffbff;\n          }\n        }\n        else if (((puVar1 == (uint *)0x4) || (puVar1 == (uint *)0x8)) ||\n                (param_1[0xc] == (uint *)0x12)) {\n          **param_1 = **param_1 & 0xfffffbff;\n          **param_1 = **param_1 | 0x200;\n        }\n        else if (param_1[0xb] == (uint *)0x2) {\n          **param_1 = **param_1 | 0x400;\n        }\n        else {\n          **param_1 = **param_1 & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)param_1 + 0x2a) == 2) {\n        if (param_1[0xb] == (uint *)0x2) {\n          **param_1 = **param_1 | 0x400;\n        }\n        else {\n          **param_1 = **param_1 | 0x800;\n          **param_1 = **param_1 & 0xfffffbff;\n        }\n        puVar1 = *param_1;\n        if ((puVar1[1] & 0x800) != 0) {\n          puVar1[1] = puVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **param_1 = **param_1 | 0x400;\n        puVar1 = *param_1;\n        if ((puVar1[1] & 0x800) != 0) {\n          puVar1[1] = puVar1[1] | 0x1000;\n        }\n      }\n      param_1[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "FUNC_080028de",
            "entrypoint": "0x080028de",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080028de": "FUNC_080028de"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002ab8": {
            "additional_data": {
                "*(int)(param_1 + 0)": {
                    "1": "result_memory_address"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "counter"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_counter"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "unsigned_int_value"
                },
                "*param_1": {
                    "1": "buffer_start"
                },
                "FUN_08002ab8": {
                    "1": "update_data_value",
                    "2": "update_param",
                    "3": "update_pointer",
                    "5": "process_data",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "buffer",
                    "10": "data",
                    "2": "param",
                    "3": "input_array"
                },
                "param_1[9]": {
                    "1": "buffer_ptr"
                },
                "pbVar1": {
                    "1": "byte_data",
                    "2": "current_byte",
                    "21": "byte_pointer",
                    "5": "byte_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_data_08002ab8(int *data)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)data_pointer;\n    data_pointer = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_08002ab8",
            "entrypoint": "0x08002ab8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ab8": "update_data_08002ab8",
                "param_1": "data",
                "param_1[9]": "data_pointer",
                "pbVar1": "byte_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "additional_data": {
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_variable",
                    "2": "counter"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_count"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "value_to_copy",
                    "2": "source_value"
                },
                "*param_1": {
                    "1": "array"
                },
                "*puVar1": {
                    "1": "current_value",
                    "2": "value"
                },
                "0x10": {
                    "1": "value"
                },
                "0x2a": {
                    "1": "offset"
                },
                "9": {
                    "1": "index"
                },
                "<temp_1>": {
                    "1": "temp_1"
                },
                "FUN_08002ad8": {
                    "1": "modify_array",
                    "2": "update_array_element",
                    "3": "update_value",
                    "4": "update_array_value",
                    "6": "update_data"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "array",
                    "4": "input_array",
                    "7": "data"
                },
                "param_1[9]": {
                    "1": "value_ptr"
                },
                "puVar1": {
                    "1": "array_element_address",
                    "2": "target_ptr",
                    "3": "array_element",
                    "4": "pointer"
                },
                "puVar1 + 1": {
                    "1": "updated_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_data_08002ad8(int *array)\n\n{\n  undefined *pointer;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    pointer = (undefined *)array_value;\n    array_value = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_08002ad8",
            "entrypoint": "0x08002ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad8": "update_data_08002ad8",
                "param_1": "array",
                "param_1[9]": "array_value",
                "puVar1": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002af8": {
            "additional_data": {
                "'\\x01'": {
                    "1": "1"
                },
                "(*param_1)[0]": {
                    "1": "first_element_value"
                },
                "(*param_1)[1]": {
                    "1": "second_element_value"
                },
                "(*puVar2 & 1)": {
                    "1": "bitwise_and"
                },
                "(int)param_1": {
                    "1": "ptr_to_int"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_offset"
                },
                "(int)param_1 + 0x3d": {
                    "1": "ptr_to_int_plus61"
                },
                "(int)param_1 + 0x3e": {
                    "1": "ptr_to_int_plus62"
                },
                "(short)param_3": {
                    "1": "short_data_size"
                },
                "(uint *)0x0": {
                    "2": "null"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "(char)param_list[0x3d]",
                    "3": "char_value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "char_at_0xf",
                    "2": "char_value2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_at_0x2a"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value2"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "(undefined)param_list[0x3e]"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "byte_at_0xf"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "undefined_val"
                },
                "**param_1": {
                    "1": "double_pointer"
                },
                "*param_1": {
                    "1": "pointer"
                },
                "*puVar2": {
                    "1": "ptr_value"
                },
                "0x20": {
                    "1": "new_char2"
                },
                "0x29": {
                    "1": "new_char1"
                },
                "0xfffff7ff": {
                    "1": "bit_mask"
                },
                "FUN_08002af8": {
                    "1": "validate_params",
                    "2": "validate_parameters",
                    "3": "validate_input",
                    "5": "process_parameters"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "input",
                    "3": "param_array",
                    "4": "input_data",
                    "5": "param_list"
                },
                "param_1 + 0xf": {
                    "1": "flag_ptr"
                },
                "param_1[0x10]": {
                    "1": "new_ptr1"
                },
                "param_1[0xb]": {
                    "1": "another_result_ptr"
                },
                "param_1[9]": {
                    "1": "ptr_value2"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "value_ptr",
                    "3": "value1"
                },
                "param_3": {
                    "1": "value2",
                    "2": "size",
                    "3": "input_size",
                    "4": "length",
                    "7": "count"
                },
                "param_4": {
                    "1": "flag_ptr",
                    "2": "result_array"
                },
                "puVar2": {
                    "1": "ptr_value",
                    "14": "ptr",
                    "2": "ptr_var",
                    "5": "pointer"
                },
                "uVar1": {
                    "1": "result_code",
                    "22": "result",
                    "3": "status",
                    "4": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nundefined4 process_parameters_08002af8(uint **param_list,uint *value1,int count,uint *value2)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)(ptr_to_int + 0x3d) == '(') {\n    if (value1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_list + 0xf) = 1;\n      ptr = *param_list;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **param_list = **param_list & 0xfffff7ff;\n      *(undefined *)(ptr_to_int + 0x3d) = 0x29;\n      *(undefined *)(ptr_to_int + 0x3e) = 0x20;\n      result = 0;\n      another_ptr = (uint *)0x0;\n      another_data_ptr = value1;\n      *(short *)(ptr_to_int + 0x2a) = short_value;\n      another_result_ptr = value2;\n      *(undefined2 *)(param_list + 10) = *(undefined2 *)(ptr_to_int + 0x2a);\n      *(undefined *)(param_list + 0xf) = 0;\n      (*param_list)[1] = (*param_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_parameters_08002af8",
            "entrypoint": "0x08002af8",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "ptr_to_int",
                "(short)param_3": "short_value",
                "FUN_08002af8": "process_parameters_08002af8",
                "param_1": "param_list",
                "param_1[0x10]": "another_ptr",
                "param_1[0xb]": "another_result_ptr",
                "param_1[9]": "another_data_ptr",
                "param_2": "value1",
                "param_3": "count",
                "param_4": "value2",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002b84": {
            "additional_data": {
                "(*param_1)": {
                    "1": "ptr_value"
                },
                "(*param_1)[1]": {
                    "1": "value_param1"
                },
                "(*puVar2 & 1)": {
                    "1": "is_bit_set"
                },
                "(char *)param_1 + 0x3d": {
                    "1": "flag_ptr"
                },
                "(char *)param_1 + 0x3e": {
                    "1": "flag_ptr_offset"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_offset"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_ptr"
                },
                "(int)param_1 + 0x3e": {
                    "1": "flag_offset_offset"
                },
                "(param_1 + 0x10)": {
                    "1": "temp_ptr"
                },
                "(param_1 + 0xb)": {
                    "1": "temp_ptr3"
                },
                "(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "(param_1 + 9)": {
                    "1": "temp_ptr2"
                },
                "(param_1)[1]": {
                    "1": "value"
                },
                "(short)param_3": {
                    "1": "input_short"
                },
                "(uint *)0x0": {
                    "1": "null_ptr"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_char_ptr"
                },
                "(undefined *)((int)param_1 + 0x3e)": {
                    "1": "flag_char_offset"
                },
                "(undefined *)(param_1 + 0xf)": {
                    "1": "flag_value_ptr"
                },
                "*(char *)((int)function_data + 0x3d)": {
                    "1": "char_var"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "flag_char",
                    "2": "char_value"
                },
                "*(char *)(function_data + 0xf)": {
                    "1": "bool_var"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag_value",
                    "2": "flag_char"
                },
                "*(param_1 + 0xf)": {
                    "1": "flag"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_output_size",
                    "3": "short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "new_char_value"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "new_char_value_2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "short_value2"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "short_value_2"
                },
                "**param_1": {
                    "1": "input_data_value"
                },
                "*puVar2 & 1": {
                    "1": "bit_mask"
                },
                "FUN_08002b84": {
                    "1": "check_and_initialize_data",
                    "2": "check_and_initialize",
                    "3": "process_parameters",
                    "6": "validate_input"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_buffer",
                    "3": "input_ptr"
                },
                "param_1[0x10]": {
                    "1": "array_ptr"
                },
                "param_1[0xb]": {
                    "1": "additional_data"
                },
                "param_1[9]": {
                    "1": "data_ptr"
                },
                "param_2": {
                    "1": "output_buffer",
                    "2": "input1",
                    "3": "param_ptr",
                    "4": "param2"
                },
                "param_3": {
                    "1": "param_len",
                    "2": "param_3",
                    "3": "count",
                    "4": "param3"
                },
                "param_4": {
                    "1": "output_param",
                    "2": "output_buffer",
                    "4": "param4"
                },
                "puVar2": {
                    "1": "first_element",
                    "2": "ptr_var",
                    "3": "temp_ptr",
                    "8": "ptr"
                },
                "uVar1": {
                    "25": "result",
                    "5": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nundefined4 validate_input_08002b84(uint **input_data,uint *param2,int param3,uint *param4)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (param2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x2a;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      array_ptr = (uint *)0x0;\n      data_ptr = param2;\n      *(short *)((int)input_data + 0x2a) = input_short;\n      output_ptr = param4;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "validate_input_08002b84",
            "entrypoint": "0x08002b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "(short)param_3": "input_short",
                "FUN_08002b84": "validate_input_08002b84",
                "param_1": "input_data",
                "param_1[0x10]": "array_ptr",
                "param_1[0xb]": "output_ptr",
                "param_1[9]": "data_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c10": {
            "additional_data": {
                "(*(char *)((int)data + 0x3d) != ' ')": {
                    "1": "data_is_valid(data)"
                },
                "(*data)[1] = (*data)[1] | 0x300": {
                    "1": "set_third_bit(data)"
                },
                "(*dataStructure)[1]": {
                    "1": "second_element"
                },
                "(*param)[1]": {
                    "1": "param_value_1_offset_1"
                },
                "(*param)[1] | 0x300": {
                    "1": "updated_param_value_1_offset_1"
                },
                "(*param_1)[1]": {
                    "1": "value2"
                },
                "(*ptr & 1) == 0": {
                    "1": "is_first_bit_set(ptr)"
                },
                "(*puVar1 & 1)": {
                    "1": "check_bit1_of_pointer"
                },
                "*(char *)((int)dataStructure + 0x3d)": {
                    "1": "flag"
                },
                "*(char *)((int)param + 0x3d)": {
                    "1": "char_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at_param_plus0x3d",
                    "2": "character"
                },
                "*(undefined *)((int)data + 0x3d) = 0x28": {
                    "1": "set_open_bracket(data)"
                },
                "*(undefined *)((int)param + 0x3d)": {
                    "1": "updated_char_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "null_character",
                    "2": "modified_character"
                },
                "**data = **data | 0x400": {
                    "1": "set_second_bit(data)"
                },
                "**dataStructure": {
                    "1": "value"
                },
                "**param": {
                    "1": "ptr_param_value_2"
                },
                "**param_1": {
                    "1": "pointer_to_value_of_param",
                    "2": "pointer_value"
                },
                "*dataStructure": {
                    "1": "first_element"
                },
                "*param": {
                    "1": "ptr_param_value_1"
                },
                "*param_1": {
                    "1": "dereferenced_parameter"
                },
                "*ptr = *ptr | 1": {
                    "1": "set_first_bit(ptr)"
                },
                "*puVar1": {
                    "1": "dereferenced_pointer"
                },
                "*puVar1 & 1": {
                    "1": "flag_check"
                },
                "0x28": {
                    "1": "replacement_value"
                },
                "0x300": {
                    "1": "bit_mask3"
                },
                "0x3d": {
                    "1": "offset"
                },
                "0x400": {
                    "1": "bit_mask2"
                },
                "1": {
                    "1": "bit_mask1"
                },
                "FUN_08002c10": {
                    "1": "perform_initialization",
                    "10": "initialize_data",
                    "2": "update_data"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "parameters",
                    "5": "param",
                    "7": "data"
                },
                "puVar1": {
                    "1": "current_value",
                    "2": "ptr_param",
                    "3": "pointer",
                    "4": "first_element"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "code": "\nundefined4 initialize_data_08002c10(uint **data)\n\n{\n  uint *first_element;\n  \n  if (*(char *)((int)data + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data + 0x3d) = 0x28;\n  first_element = *data;\n  if ((*first_element & 1) == 0) {\n    *first_element = *first_element | 1;\n  }\n  **data = **data | 0x400;\n  (*data)[1] = (*data)[1] | 0x300;\n  return 0;\n}\n\n",
            "current_name": "initialize_data_08002c10",
            "entrypoint": "0x08002c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c10": "initialize_data_08002c10",
                "param_1": "data",
                "puVar1": "first_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "called": [],
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002c4e",
            "entrypoint": "0x08002c4e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002c50": {
            "called": [],
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002c50",
            "entrypoint": "0x08002c50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002c52": {
            "called": [],
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002c52",
            "entrypoint": "0x08002c52",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002c54": {
            "additional_data": {
                "(byte *)param_1[9]": {
                    "1": "byte_array_pointer"
                },
                "(int)(pbVar2 + 1)": {
                    "1": "updated_byte_ptr"
                },
                "(int)param_1": {
                    "1": "array_address"
                },
                "*(char *)((int)data + 0x3d)": {
                    "1": "character_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_1"
                },
                "*(short *)((int)data + 0x2a)": {
                    "1": "short_value"
                },
                "*(short *)((int)data + 0x2a) + -1": {
                    "1": "updated_short_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "array_short_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_short_value"
                },
                "*(uint *)(*data + 0x10)": {
                    "1": "uint_value"
                },
                "*(uint *)(*data + 4)": {
                    "1": "uint_value2"
                },
                "*(uint *)(*data + 4) & 0xfffffbff": {
                    "1": "modified_uint_value2"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "uint_pointer_value"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "uint_pointer_value_1"
                },
                "*(undefined *)((int)data + 0x3d)": {
                    "1": "updated_character_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value"
                },
                "*param_1": {
                    "1": "array_value"
                },
                "0x21": {
                    "1": "hex_value1"
                },
                "0x28": {
                    "1": "hex_value2"
                },
                "0xfffffbff": {
                    "1": "bitmask"
                },
                "FUNC_08002c52": {
                    "1": "some_function",
                    "2": "another_function"
                },
                "FUNC_08002c52()": {
                    "1": "execute_function"
                },
                "FUN_08002c54": {
                    "1": "decode_function",
                    "2": "parse_input",
                    "3": "process_input",
                    "5": "process_data"
                },
                "cVar1": {
                    "1": "closing_parenthesis",
                    "16": "char_value",
                    "3": "current_char",
                    "6": "character"
                },
                "param_1": {
                    "1": "decoded_data",
                    "2": "param",
                    "3": "input_data",
                    "9": "data"
                },
                "param_1[0xc]": {
                    "1": "param_1_array[12]"
                },
                "param_1[9]": {
                    "1": "byte_array"
                },
                "param_1[9] + 1": {
                    "1": "updated_byte_array"
                },
                "pbVar2": {
                    "1": "byte_array",
                    "10": "byte_ptr",
                    "15": "byte_pointer",
                    "2": "data_ptr"
                }
            },
            "called": [
                "FUN_08002c52"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_08002c54(int *data)\n\n{\n  char char_value;\n  byte *byte_pointer;\n  \n  char_value = *(char *)(array_address + 0x3d);\n  if (*(short *)(array_address + 0x2a) != 0) {\n    byte_pointer = (byte *)byte_array;\n    byte_array = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)(array_address + 0x2a) = *(short *)(array_address + 0x2a) + -1;\n    if ((*(short *)(array_address + 0x2a) == 0) && (char_value == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      value = 0x21;\n      *(undefined *)(array_address + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08002c54",
            "entrypoint": "0x08002c54",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "array_address",
                "FUN_08002c54": "process_data_08002c54",
                "cVar1": "char_value",
                "param_1": "data",
                "param_1[0xc]": "value",
                "param_1[9]": "byte_array",
                "pbVar2": "byte_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "called": [],
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002ca4",
            "entrypoint": "0x08002ca4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002ca6": {
            "additional_data": {
                "(int)param_1": {
                    "1": "address"
                },
                "(int)param_1 + 0x3d": {
                    "1": "character_offset"
                },
                "(uint *)(*param_1 + 4)": {
                    "1": "uint_value"
                },
                "(uint *)(*param_1 + 4) & 0xfffffbff": {
                    "1": "updated_uint_value"
                },
                "(undefined *)param_1[9]": {
                    "1": "pointer_value"
                },
                "*((undefined4 *)*param_1 + 0x10)": {
                    "1": "value_to_assign"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "current_character"
                },
                "*(char*)((int)param_1 + 0x3d)": {
                    "1": "last_character_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "counter"
                },
                "*(short *)((int)param_1 + 0x2a) != 0": {
                    "1": "counter_not_zero"
                },
                "*(short*)((int)param_1 + 0x2a)": {
                    "1": "buffer_length"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "value_at_base_address_plus_4"
                },
                "*(uint *)(*param_1 + 4) & 0xfffffbff": {
                    "1": "updated_value_at_base_address_plus_4"
                },
                "*(uint*)(*param_1 + 4)": {
                    "1": "flags"
                },
                "*(uint*)(*param_1 + 4) & 0xfffffbff": {
                    "1": "updated_flags"
                },
                "*(undefined *)((int)param_1 + 0x2a)": {
                    "1": "short_offset"
                },
                "*(undefined *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_short_offset"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "character_to_set"
                },
                "*(undefined*)((int)param_1 + 0x3d)": {
                    "1": "updated_last_character"
                },
                "*(undefined4*)(*param_1 + 0x10)": {
                    "1": "value_to_store"
                },
                "*param_1": {
                    "1": "base_address"
                },
                "*param_1 + 0x10": {
                    "1": "content_0x10"
                },
                "*puVar2": {
                    "1": "content",
                    "3": "value"
                },
                "FUNC_08002ca4": {
                    "1": "some_function",
                    "3": "do_something"
                },
                "FUN_08002ca6": {
                    "1": "write_next_byte",
                    "2": "update_param",
                    "3": "update_character",
                    "9": "update_data"
                },
                "cVar1": {
                    "1": "special_char",
                    "11": "char_value",
                    "2": "char1",
                    "5": "flag"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "input",
                    "3": "param",
                    "4": "data_ptr",
                    "9": "data"
                },
                "param_1[0xc]": {
                    "1": "value_at_0xc"
                },
                "param_1[9]": {
                    "1": "pointer_index"
                },
                "puVar2": {
                    "1": "undefined_ptr",
                    "2": "next_position",
                    "4": "pointer",
                    "8": "ptr"
                },
                "pvar1": {
                    "1": "current_char"
                }
            },
            "called": [
                "FUN_08002ca4"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_data_08002ca6(int *data)\n\n{\n  char char_value;\n  undefined *ptr;\n  \n  char_value = *(char *)(address + 0x3d);\n  if (*(short *)(address + 0x2a) != 0) {\n    ptr = (undefined *)pointer_index;\n    pointer_index = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)(address + 0x2a) = *(short *)(address + 0x2a) + -1;\n    if ((*(short *)(address + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data = 0x22;\n      *(undefined *)(address + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_08002ca6",
            "entrypoint": "0x08002ca6",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "address",
                "FUN_08002ca6": "update_data_08002ca6",
                "cVar1": "char_value",
                "param_1": "data",
                "param_1[0xc]": "data",
                "param_1[9]": "pointer_index",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "additional_data": {
                "FUN_08002cf2": {
                    "1": "process_and_return_signal",
                    "2": "process_and_return",
                    "23": "process_input",
                    "3": "process_and_handle_input"
                },
                "param_1": {
                    "1": "data_ptr",
                    "10": "input_data",
                    "3": "input_ptr",
                    "5": "input",
                    "7": "input_array"
                },
                "param_2": {
                    "1": "prev_data",
                    "12": "param2",
                    "2": "value1",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "12": "param3",
                    "2": "value2",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "flag2",
                    "12": "param4",
                    "2": "value3",
                    "6": "param_4"
                },
                "process_input_08004e74": {
                    "1": "process_input_function"
                },
                "uVar1": {
                    "1": "selection",
                    "2": "value",
                    "21": "selected_value"
                },
                "uVar2": {
                    "1": "data_value",
                    "10": "flags",
                    "2": "data_flag",
                    "3": "flag_value",
                    "9": "flag"
                }
            },
            "called": [
                "FUN_08004e74"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_input_08002cf2(int *input_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selected_value;\n  uint flags;\n  \n  flags = *(uint *)(*input_data + 0x18);\n  if ((flags & 0x80) == 0) {\n    selected_value = *(undefined2 *)(input_data + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(input_data + 6);\n  }\n  process_input_08002cf2(input_data,(*(uint *)(*input_data + 0x18) & 4) == 0,selected_value,flags,param4);\n  return 0;\n}\n\n",
            "current_name": "process_input_08002cf2",
            "entrypoint": "0x08002cf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002cf2": "process_input_08002cf2",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_input_08004e74": "process_input",
                "uVar1": "selected_value",
                "uVar2": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "param1_element1",
                    "2": "value1"
                },
                "(*param_1)[5]": {
                    "1": "array_value5",
                    "2": "value2"
                },
                "(*param_list)[1]": {
                    "1": "param_value_1"
                },
                "(*param_list)[5]": {
                    "1": "param_value_2"
                },
                "(int)param_1": {
                    "1": "address"
                },
                "(int)param_1 + 0x3d": {
                    "1": "permissions_offset"
                },
                "(uint *)0x0": {
                    "1": "zero_value"
                },
                "(uint *)0x21": {
                    "1": "pointer21"
                },
                "(uint *)0x4": {
                    "1": "array_size_4"
                },
                "(uint *)0x8": {
                    "1": "pointer8"
                },
                "(uint *)0xffff0000": {
                    "1": "default_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "param_list_char",
                    "2": "symbol"
                },
                "*(char *)((int)param_list + 0x3d)": {
                    "1": "character"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_char2",
                    "2": "undefined_value2"
                },
                "**param_1": {
                    "1": "double_param_value",
                    "2": "value3"
                },
                "**param_list": {
                    "1": "pointer_value"
                },
                "*param_1": {
                    "1": "parameter"
                },
                "0x20": {
                    "1": "space"
                },
                "0x21": {
                    "1": "exclamation"
                },
                "0x3d": {
                    "1": "char_value"
                },
                "0x3e": {
                    "1": "undefined_value"
                },
                "0xb": {
                    "1": "parameter_b"
                },
                "0xc": {
                    "1": "parameter_c"
                },
                "0xffff0000": {
                    "1": "constant_ffff0000"
                },
                "0xfffff8ff": {
                    "1": "constant_ffff8_ff"
                },
                "0xfffffbff": {
                    "1": "constant_ffffbff"
                },
                "FUNC_08002c52": {
                    "1": "execute_function_b",
                    "2": "another_function",
                    "3": "execute_another_function"
                },
                "FUNC_08002c52()": {
                    "1": "execute_function2"
                },
                "FUN_08002d1c": {
                    "1": "set_permissions",
                    "14": "process_param",
                    "2": "process_function",
                    "4": "process_parameters"
                },
                "char_1": {
                    "1": "first_char"
                },
                "do_something": {
                    "1": "do_something"
                },
                "execute": {
                    "1": "execute_function"
                },
                "execute_function_08004ec4": {
                    "1": "execute_some_function",
                    "2": "execute_condition_a",
                    "9": "execute_function"
                },
                "execute_function_08004ec4()": {
                    "1": "execute_function1"
                },
                "functionParams": {
                    "1": "function_params_array"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "function_params",
                    "3": "param_array",
                    "6": "param_list",
                    "7": "param",
                    "8": "parameters"
                },
                "param_1[0xb]": {
                    "1": "permissions[11]",
                    "2": "param[11]"
                },
                "param_1[0xc]": {
                    "1": "value",
                    "2": "param[12]"
                },
                "param_list[0xb]": {
                    "1": "param_list_flag"
                },
                "param_list[0xb][0]": {
                    "1": "param_flag_value"
                },
                "param_list[0xc]": {
                    "1": "param_list_value"
                },
                "parameter": {
                    "1": "param"
                },
                "process_parameter": {
                    "1": "process_parameter"
                }
            },
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "calling": [
                "FUN_08003520"
            ],
            "code": "\nundefined4 process_param_08002d1c(uint **parameters)\n\n{\n  if (((param_list[11] == (uint *)0x4) || (param_list[11] == (uint *)0x8)) &&\n     (*(char *)(address + 0x3d) == '(')) {\n    param_list[11] = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    param_list[12] = (uint *)0x0;\n    *(undefined *)(address + 0x3d) = 0x20;\n    *(undefined *)(address + 0x3e) = 0;\n    execute_function1;\n  }\n  else if (*(char *)(address + 0x3d) == '!') {\n    param_list[11] = (uint *)0xffff0000;\n    param_list[12] = (uint *)0x21;\n    *(undefined *)(address + 0x3d) = 0x20;\n    *(undefined *)(address + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08002d1c",
            "entrypoint": "0x08002d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "address",
                "FUN_08002d1c": "process_param_08002d1c",
                "execute": "execute_function",
                "execute_function_08004ec4": "execute_function",
                "execute_function_08004ec4()": "execute_function1",
                "param_1": "parameters",
                "param_1[0xb]": "param_list[11]",
                "param_1[0xc]": "param_list[12]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002db0": {
            "called": [],
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002db0",
            "entrypoint": "0x08002db0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002db2": {
            "additional_data": {
                "(*(short *)(param_1 + 10) == 0)": {
                    "1": "is_short_zero"
                },
                "(**param_1": {
                    "1": "dereferenced_pointer"
                },
                "(*param_1)[1]": {
                    "1": "param1_1_value"
                },
                "(*param_1)[1] = (*param_1)[1] & 0xfffff8ff": {
                    "1": "clear_bits"
                },
                "(*param_1)[1] = (*param_1)[1] & 0xfffffbff": {
                    "1": "clear_bits2"
                },
                "(*param_1)[4]": {
                    "1": "value2"
                },
                "(*param_1)[4] = (uint)((int)param_1[0x12] << 0x10) >> 0x18": {
                    "1": "set_shifted_ptr_value"
                },
                "(*param_1)[4] = (uint)*(byte *)puVar2": {
                    "1": "set_ptr_value2"
                },
                "(*param_1)[4] = (uint)param_1[0x12] & 0xff": {
                    "1": "set_ptr_value"
                },
                "(cVar1 == '!') || ((*(char *)((int)param_1 + 0x3e) == '@' && (cVar1 == '\"'))))": {
                    "1": "is_char_exclamation_or_at_and_quote"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char1_addr"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "char2_addr"
                },
                "(int)param_1[0x12]": {
                    "1": "int_value"
                },
                "(int)param_1[0x14]": {
                    "1": "int_param114"
                },
                "(puVar2 == (uint *)0x4) || ((puVar2 == (uint *)0x8 || (puVar2 == (uint *)0xffff0000)))": {
                    "1": "is_ptr_condition_met"
                },
                "(uint *)((int)param_1 + 0x2a)": {
                    "1": "uint_addr"
                },
                "(uint)((int)param_1[0x12] << 0x10) >> 0x18": {
                    "1": "shifted_value"
                },
                "(uint)param_1[0x12] & 0xff": {
                    "1": "uint_value"
                },
                "*(byte *)puVar2": {
                    "1": "byte_at_temp_pointer",
                    "2": "byte_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value1",
                    "2": "char_value"
                },
                "*(char *)((int)param_1 + 0x3d) == '!'": {
                    "1": "is_char_exclamation"
                },
                "*(char *)((int)param_1 + 0x3d) == '\"'": {
                    "1": "is_char_quote"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char3",
                    "2": "char_value2"
                },
                "*(char *)((int)param_1 + 0x3e) == '@'": {
                    "1": "is_char_at"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_at_index2a"
                },
                "*(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decrement_short"
                },
                "*(short *)((int)param_1 + 0x2a) == 0": {
                    "1": "is_short_zero2"
                },
                "*(short *)(param_1 + 10)": {
                    "1": "short_variable"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char2"
                },
                "*(undefined *)((int)param_1 + 0x3d) = 0x20": {
                    "1": "set_char"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char3"
                },
                "*(undefined *)((int)param_1 + 0x3e) = 0": {
                    "1": "clear_char"
                },
                "**param_1": {
                    "1": "param1_value"
                },
                "**param_1 = **param_1 | 0x200": {
                    "1": "set_bits"
                },
                "*param_1": {
                    "1": "value"
                },
                "FUNC_08002c4e": {
                    "1": "execute_function_b",
                    "2": "function2",
                    "3": "function_b"
                },
                "FUNC_08002c4e()": {
                    "1": "perform_task2"
                },
                "FUNC_08002db0": {
                    "1": "handle_char_exclamation",
                    "2": "function1",
                    "3": "function_a"
                },
                "FUNC_08002db0()": {
                    "1": "perform_task1"
                },
                "FUN_08002db2": {
                    "1": "decode_and_process_data",
                    "10": "process_data",
                    "2": "process_param",
                    "4": "process_input"
                },
                "cVar1": {
                    "1": "param1_char",
                    "5": "first_char",
                    "7": "char1",
                    "9": "character"
                },
                "param_1": {
                    "1": "parameter",
                    "10": "data",
                    "2": "input_data",
                    "4": "input",
                    "9": "parameters"
                },
                "param_1 + 10": {
                    "1": "data[10]"
                },
                "param_1[0x11]": {
                    "1": "pointer4"
                },
                "param_1[0x12]": {
                    "1": "pointer5"
                },
                "param_1[0x13]": {
                    "1": "pointer6"
                },
                "param_1[0x13] == (uint *)0x1": {
                    "1": "is_ptr_one"
                },
                "param_1[0x14]": {
                    "1": "array_variable3"
                },
                "param_1[0x14] = (uint *)((int)param_1[0x14] + 1)": {
                    "1": "increment_ptr_value2"
                },
                "param_1[0x14] = (uint *)((int)param_1[0x14] + 2)": {
                    "1": "increment_ptr_value"
                },
                "param_1[0x14] == (uint *)0x0": {
                    "1": "is_ptr_null"
                },
                "param_1[0x14] == (uint *)0x1": {
                    "1": "is_ptr_one2"
                },
                "param_1[0x14] == (uint *)0x2": {
                    "1": "is_ptr_two"
                },
                "param_1[0xb]": {
                    "1": "pointer_variable",
                    "2": "data[11]"
                },
                "param_1[0xc]": {
                    "1": "pointer_c"
                },
                "param_1[0xc] = (uint *)0x0": {
                    "1": "set_ptr_zero"
                },
                "param_1[9] = (uint *)((int)puVar2 + 1)": {
                    "1": "increment_ptr"
                },
                "puVar2": {
                    "1": "flag2",
                    "2": "pointer_value",
                    "3": "ptr_value",
                    "6": "ptr"
                },
                "puVar2 = param_1[9]": {
                    "1": "ptr_value2"
                }
            },
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_08002db2(uint **data)\n\n{\n  char character;\n  uint *ptr;\n  \n  character = *(char *)((int)data + 0x3d);\n  ptr = data[11];\n  if ((*(short *)(data + 10) == 0) && (character == '!')) {\n    if ((ptr == (uint *)0x4) || ((ptr == (uint *)0x8 || (ptr == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      array_variable4 = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      array_variable4 = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)data + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (array_variable3 == (uint *)0x0) {\n        if (array_variable2 == (uint *)0x1) {\n          (*data)[4] = (uint)array_variable & 0xff;\n          array_variable3 = (uint *)(int_param114 + 2);\n        }\n        else {\n          (*data)[4] = (uint)(int_value << 0x10) >> 0x18;\n          array_variable3 = (uint *)(int_param114 + 1);\n        }\n      }\n      else if (array_variable3 == (uint *)0x1) {\n        (*data)[4] = (uint)array_variable & 0xff;\n        array_variable3 = (uint *)(int_param114 + 1);\n      }\n      else if (array_variable3 == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptr = data[9];\n          data[9] = (uint *)((int)ptr + 1);\n          (*data)[4] = (uint)*(byte *)ptr;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = data[9];\n      data[9] = (uint *)((int)ptr + 1);\n      (*data)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08002db2",
            "entrypoint": "0x08002db2",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1[0x12]": "int_value",
                "(int)param_1[0x14]": "int_param114",
                "FUN_08002db2": "process_data_08002db2",
                "cVar1": "character",
                "param_1": "data",
                "param_1[0x12]": "array_variable",
                "param_1[0x13]": "array_variable2",
                "param_1[0x14]": "array_variable3",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "array_variable4",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002efc": {
            "additional_data": {
                "(*param_1)": {
                    "1": "first_pointer"
                },
                "(*param_1)[1]": {
                    "1": "param_array_value_1",
                    "2": "first_element",
                    "3": "value1"
                },
                "(*param_1)[1] & 0xfffff8ff": {
                    "1": "modified_first_element_of_param1"
                },
                "(*param_1)[4]": {
                    "1": "param_1_index_4"
                },
                "(int)param_1": {
                    "1": "param_addr"
                },
                "(int)param_1 + 0x2a": {
                    "1": "counter"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_char"
                },
                "(int)puVar1": {
                    "1": "int_var"
                },
                "(int)puVar1 + 1": {
                    "1": "pointer_incremented"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "updated_param_value"
                },
                "(uint *)0x0": {
                    "1": "constant_0"
                },
                "(uint *)0x11": {
                    "1": "constant_11"
                },
                "(uint *)0x4": {
                    "1": "constant_4"
                },
                "(uint *)0x8": {
                    "1": "constant2"
                },
                "(uint *)0xffff0000": {
                    "1": "pointer_ffff0000"
                },
                "(uint)*(byte *)puVar1": {
                    "2": "byte_value"
                },
                "*(byte *)puVar1": {
                    "1": "byte_var",
                    "5": "byte_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "flag_check",
                    "2": "char1",
                    "5": "first_char"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_2",
                    "4": "char_value2"
                },
                "*(param_1 + 0xb)": {
                    "1": "param_pointer_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "num_value",
                    "2": "short1",
                    "3": "count",
                    "9": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_char",
                    "2": "undefined_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "extra_char",
                    "2": "undefined_value2"
                },
                "**(param_1)": {
                    "1": "data_value_pointer"
                },
                "**param_1": {
                    "1": "param_value_1",
                    "2": "second_element",
                    "3": "value2"
                },
                "**param_1 | 0x200": {
                    "1": "modified_double_dereferenced_param1"
                },
                "*param_1": {
                    "1": "param_array_value"
                },
                "0x11": {
                    "1": "new_value"
                },
                "0x20": {
                    "1": "new_char1"
                },
                "0x2a": {
                    "1": "short1"
                },
                "0x3d": {
                    "1": "char1"
                },
                "0x3e": {
                    "1": "char2"
                },
                "0x4": {
                    "1": "condition1"
                },
                "0x8": {
                    "1": "condition2"
                },
                "0xb": {
                    "1": "index"
                },
                "0xc": {
                    "1": "ptr1"
                },
                "0xffff0000": {
                    "1": "condition3"
                },
                "0xfffff8ff": {
                    "1": "mask1"
                },
                "4": {
                    "1": "byte_value"
                },
                "9": {
                    "1": "ptr2"
                },
                "@": {
                    "1": "char_value1"
                },
                "FUCN_08002db0": {
                    "1": "handle_at"
                },
                "FUNC_08002c4e": {
                    "1": "perform_action_b",
                    "2": "handle_case2"
                },
                "FUNC_08002c4e()": {
                    "1": "function_b",
                    "2": "function2"
                },
                "FUNC_08002db0": {
                    "1": "do_something_a",
                    "2": "handle_case1"
                },
                "FUNC_08002db0()": {
                    "1": "function_a",
                    "2": "function1"
                },
                "FUN_08002efc": {
                    "1": "update_parameters",
                    "10": "process_param",
                    "2": "update_flags_and_perform_action",
                    "3": "process_parameter",
                    "4": "process_data",
                    "5": "process_input"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_data",
                    "3": "param_list",
                    "4": "data",
                    "8": "parameters"
                },
                "param_1[0xb]": {
                    "1": "parameter_value11",
                    "2": "param1_b"
                },
                "param_1[0xc]": {
                    "1": "param_1_c",
                    "2": "param_c"
                },
                "param_1[9]": {
                    "1": "ptr_element",
                    "2": "byte_pointer"
                },
                "puVar1": {
                    "1": "current_value",
                    "2": "temp_pointer",
                    "3": "value",
                    "4": "param_value"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "pointer_equals4"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "pointer_equals8"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "pointer_equals_ffff0000"
                },
                "uint *)((int)puVar1 + 1)": {
                    "1": "next_param"
                }
            },
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_param_08002efc(uint **parameters)\n\n{\n  uint *param_value;\n  \n  param_value = param1_b;\n  if (*(char *)(param_addr + 0x3d) == '!') {\n    if (*(short *)(param_addr + 0x2a) == 0) {\n      if (((param_value == (uint *)0x4) || (param_value == (uint *)0x8)) || (param_value == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        status = (uint *)0x0;\n        *(undefined *)(param_addr + 0x3d) = 0x20;\n        if (*(char *)(param_addr + 0x3e) == 'char_value1') {\n          *(undefined *)(param_addr + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)(param_addr + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        status = (uint *)0x11;\n        *(undefined *)(param_addr + 0x3e) = 0;\n        *(undefined *)(param_addr + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      param_value = byte_pointer;\n      byte_pointer = (uint *)(int_var + 1);\n      (*parameters)[4] = (uint)*(byte *)param_value;\n      *(short *)(param_addr + 0x2a) = *(short *)(param_addr + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08002efc",
            "entrypoint": "0x08002efc",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "param_addr",
                "(int)puVar1": "int_var",
                "@": "char_value1",
                "FUN_08002efc": "process_param_08002efc",
                "param_1": "parameters",
                "param_1[0xb]": "param1_b",
                "param_1[0xc]": "status",
                "param_1[9]": "byte_pointer",
                "puVar1": "param_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "called": [],
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002f9a",
            "entrypoint": "0x08002f9a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002f9c": {
            "additional_data": {
                "(**param_1)": {
                    "1": "value2"
                },
                "(*param_1)": {
                    "1": "value1"
                },
                "(*param_1)[0]": {
                    "1": "flag_value2"
                },
                "(*param_1)[1]": {
                    "1": "flag_value1",
                    "2": "second_value",
                    "3": "value2"
                },
                "(*param_1)[1] & 0xfffff8ff": {
                    "1": "updated_index1"
                },
                "(*param_1)[1] & 0xfffffbff": {
                    "1": "updated_index1"
                },
                "(*param_1)[2]": {
                    "1": "ushort_value"
                },
                "(*param_1)[4]": {
                    "1": "temp_value"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr1"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "character2"
                },
                "(char)(*param_1)[4]": {
                    "1": "character"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_address"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_address"
                },
                "(int)param_1 + 0x3e": {
                    "1": "second_char_address"
                },
                "(int)puVar1 + 1": {
                    "1": "incremented_ptr1"
                },
                "(uint *)0x0": {
                    "1": "const_value7"
                },
                "(uint *)0x2": {
                    "1": "const_value1"
                },
                "(ushort *)((int)param_1 + 0x2a)": {
                    "1": "ushort_ptr"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value1"
                },
                "*(char *)puVar1": {
                    "1": "char_value_at_ptr1",
                    "4": "char_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "5": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_short_value"
                },
                "*(short *)((int)parameters + 0x2a)": {
                    "1": "short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "space_char",
                    "2": "undefined_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "at_char",
                    "3": "undefined_value2"
                },
                "*(undefined *)((int)parameters + 0x3d)": {
                    "1": "undefined_char"
                },
                "*(undefined *)((int)parameters + 0x3e)": {
                    "1": "undefined_char2"
                },
                "*(ushort *)((int)param_1 + 0x2a)": {
                    "1": "ushort_value1"
                },
                "**param_1": {
                    "1": "flag_value",
                    "2": "value1"
                },
                "**param_1 & 0xfffffbff": {
                    "1": "updated_param1"
                },
                "**param_1 | 0x400": {
                    "1": "updated_param1"
                },
                "**param_1 | 0x800": {
                    "1": "updated_param1"
                },
                "*param_1": {
                    "1": "value_pointer"
                },
                "*param_1[0]": {
                    "1": "value"
                },
                "*param_1[0xb]": {
                    "1": "param_value_b"
                },
                "0": {
                    "1": "zero"
                },
                "0x20": {
                    "1": "space"
                },
                "0x400": {
                    "1": "flag1"
                },
                "0x800": {
                    "1": "flag2"
                },
                "0xfffff8ff": {
                    "1": "const_value5"
                },
                "0xfffffbff": {
                    "1": "mask1"
                },
                "DAT_08002f9c[<some_offset>]": {
                    "1": "<some_new_variable_name>"
                },
                "DAT_08003616": {
                    "1": "constant_1"
                },
                "DAT_0800361a": {
                    "1": "constant_2"
                },
                "FUNC_08002c50": {
                    "1": "do_something_else",
                    "2": "process_data"
                },
                "FUNC_08002f9a": {
                    "1": "process_email"
                },
                "FUN_08002f9c": {
                    "1": "update_flagged_bits",
                    "2": "process_parameter",
                    "4": "update_flags_and_values",
                    "5": "process_param"
                },
                "PTR_08002f9c[<some_index>]": {
                    "1": "<some_new_variable_name>"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "flags",
                    "3": "params",
                    "4": "parameter",
                    "5": "param",
                    "6": "parameters"
                },
                "param_1[0xb]": {
                    "1": "ptr_value",
                    "3": "condition"
                },
                "param_1[0xc]": {
                    "1": "ptr_value_c"
                },
                "param_1[9]": {
                    "1": "ptr_array",
                    "2": "char_pointer"
                },
                "param_1[9][0]": {
                    "1": "temp_char"
                },
                "puVar1": {
                    "1": "ptr",
                    "2": "pointer_var1",
                    "3": "temp_ptr1",
                    "4": "temp_var1",
                    "5": "temp_ptr"
                }
            },
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_param_08002f9c(uint **parameters)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)parameters + 0x2a) < 4) {\n      if (*(ushort *)((int)parameters + 0x2a) - 2 < 2) {\n        if (condition == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n      }\n      else {\n        if (condition == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        temp_ptr = char_pointer;\n        char_pointer = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*parameters)[4];\n        *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        ptr_value = (uint *)0x0;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      temp_ptr = char_pointer;\n      char_pointer = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08002f9c",
            "entrypoint": "0x08002f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f9c": "process_param_08002f9c",
                "param_1": "parameters",
                "param_1[0xb]": "condition",
                "param_1[0xc]": "ptr_value",
                "param_1[9]": "char_pointer",
                "puVar1": "temp_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800306c": {
            "additional_data": {
                "(*(short *)((int)param_1 + 0x2a)": {
                    "1": "condition"
                },
                "(*(short *)((int)param_1 + 0x2a) == 2)": {
                    "1": "is_condition_2"
                },
                "(*(short *)((int)param_1 + 0x2a) == 3)": {
                    "1": "is_condition_3"
                },
                "(*param_1)[1]": {
                    "1": "parameters[0][1]"
                },
                "(*param_1)[4]": {
                    "1": "array_value_2",
                    "2": "value",
                    "5": "character"
                },
                "(char *)((int)inputData + 0x3d)": {
                    "1": "output_char"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "flag"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "flag2"
                },
                "(char *)(*param_1)[4]": {
                    "1": "next_character_ptr"
                },
                "(char *)puVar1": {
                    "1": "output_char_ptr"
                },
                "(char)(*param_1)[4]": {
                    "1": "(char)(input[4])",
                    "7": "char_value"
                },
                "(int)inputData + 0x2a": {
                    "1": "input_data_address"
                },
                "(int)param_1": {
                    "1": "param_address"
                },
                "(int)param_1 + 0x2a": {
                    "1": "data_length"
                },
                "(int)puVar1 + 1": {
                    "1": "incremented_value_2"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "count_ptr"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "next_address"
                },
                "(uint *)0x0": {
                    "1": "null_pointer"
                },
                "(uint *)0x2": {
                    "1": "constant_value_d"
                },
                "(uint *)0x4": {
                    "1": "constant_pointer_4"
                },
                "(uint *)0x8": {
                    "1": "constant_8"
                },
                "(uint *)0xffff0000": {
                    "1": "constant_pointer_minus_65536"
                },
                "*(char *)&puVar1": {
                    "1": "char_value"
                },
                "*(char *)((int)inputData + 0x3e)": {
                    "1": "output_char"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "flag"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_2",
                    "2": "char_flag",
                    "3": "flag_char"
                },
                "*(char *)(*param_1)[4]": {
                    "1": "char_val2"
                },
                "*(char *)puVar1": {
                    "1": "output_char",
                    "2": "char_val",
                    "4": "char_value"
                },
                "*(short *)((int)inputData + 0x2a)": {
                    "1": "input_data_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "count_value",
                    "2": "count",
                    "4": "data_length",
                    "5": "condition"
                },
                "*(short *)((int)param_1 + 0x2a) - 1": {
                    "1": "decremented_condition"
                },
                "*(short *)((int)param_1 + 0x3d)": {
                    "1": "flag_value"
                },
                "*(short *)((int)param_1 + 0x3e)": {
                    "1": "char_flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_val",
                    "3": "undefined_value",
                    "5": "flag"
                },
                "**param_1": {
                    "1": "deref_value"
                },
                "*param_1": {
                    "1": "output",
                    "2": "data_value"
                },
                "0": {
                    "1": "zero_constant"
                },
                "0x20": {
                    "1": "space_constant"
                },
                "0x200": {
                    "1": "bit1"
                },
                "0x400": {
                    "1": "bit2"
                },
                "0xfffffbff": {
                    "1": "mask1"
                },
                "0xfffffcff": {
                    "1": "mask2"
                },
                "@": {
                    "1": "flag_a"
                },
                "FUNC_08002c50": {
                    "1": "process_value_b"
                },
                "FUNC_08002c50()": {
                    "1": "execute_function_b"
                },
                "FUNC_08002f9a": {
                    "1": "process_value_a"
                },
                "FUNC_08002f9a()": {
                    "1": "function_a()"
                },
                "FUN_0800306c": {
                    "1": "handle_parameter",
                    "12": "process_data",
                    "2": "process_param",
                    "5": "process_input",
                    "9": "update_data"
                },
                "inputData[0xb]": {
                    "1": "value_list"
                },
                "inputData[9]": {
                    "1": "char_ptr"
                },
                "param_1": {
                    "1": "param",
                    "17": "data",
                    "2": "input_data"
                },
                "param_1[0xb]": {
                    "1": "value_ptr"
                },
                "param_1[0xc]": {
                    "1": "ptr_c"
                },
                "param_1[9]": {
                    "1": "ptr_9",
                    "2": "ptr",
                    "3": "counter"
                },
                "puVar1": {
                    "1": "value_pointer",
                    "17": "value",
                    "2": "value_ptr",
                    "4": "ptr"
                },
                "puVar1 == (uint *)0x2": {
                    "1": "value_is_two"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "value_is_four"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "value_is_eight"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "is_value_ffff0000"
                }
            },
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_0800306c(uint **data)\n\n{\n  uint *value;\n  \n  value = data_ptr;\n  if (*(short *)(input_address + 0x2a) == 3) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(input_address + 0x2a) = *(short *)(input_address + 0x2a) + -1;\n  }\n  else if (*(short *)(input_address + 0x2a) == 2) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (value == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(input_address + 0x2a) = *(short *)(input_address + 0x2a) + -1;\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(input_address + 0x2a) = *(short *)(input_address + 0x2a) + -1;\n    *(undefined *)(input_address + 0x3d) = 0x20;\n    ptr_c = (uint *)0x0;\n    if (*(char *)(input_address + 0x3e) == 'flag_a') {\n      *(undefined *)(input_address + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)(input_address + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(input_address + 0x2a) = *(short *)(input_address + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0800306c",
            "entrypoint": "0x0800306c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "input_address",
                "@": "flag_a",
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data",
                "param_1[0xb]": "data_ptr",
                "param_1[0xc]": "ptr_c",
                "param_1[9]": "counter",
                "puVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800316a": {
            "called": [],
            "calling": [
                "FUN_0800316c"
            ],
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800316a",
            "entrypoint": "0x0800316a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800316c": {
            "additional_data": {
                "&LAB_080035fc_1": {
                    "1": "label1"
                },
                "(*(char *)((int)param_1 + 0x3d) == ': ')": {
                    "1": "is_condition_met"
                },
                "(*(char *)((int)param_1[0xd] + 0x21) == '\\x01')": {
                    "1": "is_flag_set"
                },
                "(**param_1 & 0xfffff7ff)": {
                    "1": "data"
                },
                "(**param_1 & 0xfffffffe)": {
                    "1": "data_flag"
                },
                "(*param_1)[1]": {
                    "1": "flag1"
                },
                "(*param_1)[4]": {
                    "1": "value1"
                },
                "(*param_1)[5]": {
                    "1": "flag2"
                },
                "*(byte *)((int)param_1 + 0x3d)": {
                    "1": "status"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "flag"
                },
                "FUC_0800316a": {
                    "1": "initialize_data_function"
                },
                "FUNC_0800316a": {
                    "1": "reverse_data"
                },
                "FUN_0800316c": {
                    "1": "execute_operation",
                    "14": "process_data",
                    "2": "process_param",
                    "3": "initialize_data"
                },
                "LAB_080035fc_1": {
                    "2": "label1"
                },
                "check_and_initialize_data_08004ef4": {
                    "1": "check_and_initialize_data_function",
                    "2": "check_and_initialize_data"
                },
                "execute_function_08004ec4": {
                    "3": "execute_function"
                },
                "iVar1": {
                    "1": "index",
                    "16": "result",
                    "2": "variable1",
                    "8": "return_value"
                },
                "initialize_data_0800258c": {
                    "1": "initialize_data_function2",
                    "2": "initialize_data"
                },
                "initialize_data_0800258c(param_1[0xd])": {
                    "1": "initialize_data(param_1[0xd])"
                },
                "param_1": {
                    "1": "param",
                    "10": "data",
                    "2": "parameter",
                    "4": "input_data",
                    "5": "parameters"
                },
                "param_1[0xc]": {
                    "1": "output_data"
                },
                "param_1[0xd]": {
                    "1": "extra_data1"
                },
                "param_1[0xe]": {
                    "1": "extra_data2"
                },
                "puVar2": {
                    "1": "pointer_var2",
                    "2": "pointer1",
                    "3": "ptr2",
                    "5": "char_ptr"
                },
                "puVar3": {
                    "1": "pointer_var3",
                    "2": "pointer_var2",
                    "3": "ptr3",
                    "5": "ptr2"
                }
            },
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "code": "\nvoid process_data_0800316c(uint **data)\n\n{\n  int result;\n  uint *char_ptr;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    output_data = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    output_data = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        char_ptr = data[9];\n        data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_0800316a(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        char_ptr = data[9];\n        data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)ptr2[4];\n      }\n      check_and_initialize_data(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)extra_data1 + 0x21) == '\\x01') {\n      extra_data2[0xd] = (uint)label1;\n      result = initialize_data(extra_data2);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)extra_data2[0xd])();\n      }\n    }\n    else {\n      extra_data1[0xd] = (uint)label1;\n      result = initialize_data(param_1[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)extra_data1[0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    output_data = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    execute_function(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0800316c",
            "entrypoint": "0x0800316c",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_080035fc_1": "label1",
                "FUN_0800316c": "process_data_0800316c",
                "LAB_080035fc_1": "label1",
                "check_and_initialize_data_08004ef4": "check_and_initialize_data",
                "execute_function_08004ec4": "execute_function",
                "iVar1": "result",
                "initialize_data_0800258c": "initialize_data",
                "initialize_data_0800258c(param_1[0xd])": "initialize_data(param_1[0xd])",
                "param_1": "data",
                "param_1[0xc]": "output_data",
                "param_1[0xd]": "extra_data1",
                "param_1[0xe]": "extra_data2",
                "puVar2": "char_ptr",
                "puVar3": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080032b4": {
            "additional_data": {
                "FUNC_08002ca4": {
                    "1": "process_quote"
                },
                "FUN_080032b4": {
                    "1": "process_input_data",
                    "23": "process_data",
                    "3": "process_parameters"
                },
                "cVar1": {
                    "1": "char_1",
                    "12": "character",
                    "2": "char1",
                    "6": "char_var"
                },
                "execute_function_08004ec4": {
                    "1": "execute_task"
                },
                "param_1": {
                    "1": "parameter",
                    "19": "data",
                    "2": "param",
                    "7": "parameters"
                },
                "process_data_0800316c": {
                    "1": "process_data"
                },
                "puVar2": {
                    "1": "ptr_2",
                    "2": "ptr_var1",
                    "3": "ptr_var2",
                    "4": "pointer_1",
                    "5": "ptr1",
                    "7": "pointer1"
                },
                "puVar3": {
                    "1": "var2",
                    "2": "pointer_var2",
                    "3": "ptr_var3",
                    "4": "ptr_2",
                    "5": "ptr2",
                    "7": "pointer2"
                }
            },
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_080032b4(uint **data)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  pointer1 = *data;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = data[9];\n      data[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      pointer1 = data[9];\n      data[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      execute_task();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    process_data_080032b4();\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_080032b4",
            "entrypoint": "0x080032b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080032b4": "process_data_080032b4",
                "cVar1": "character",
                "execute_function_08004ec4": "execute_task",
                "param_1": "data",
                "process_data_0800316c": "process_data",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080033b8": {
            "additional_data": {
                "FUNC_080028de": {
                    "1": "process_data"
                },
                "FUN_080033b8": {
                    "1": "process_param_data",
                    "11": "process_function",
                    "2": "process_input_data",
                    "3": "process_param",
                    "4": "process_input",
                    "5": "process_data"
                },
                "iVar1": {
                    "1": "input_data_value",
                    "2": "parameter_value",
                    "3": "data_value",
                    "5": "param_value"
                },
                "param_1": {
                    "1": "parameter_pointer",
                    "12": "input_data",
                    "2": "data_ptr",
                    "3": "input_param"
                },
                "process_data_08002c54": {
                    "1": "process_data_param",
                    "2": "process_data"
                },
                "process_data_08002db2": {
                    "1": "process_data_data",
                    "2": "process_data"
                },
                "process_data_0800306c": {
                    "1": "process_data_param",
                    "2": "process_data"
                },
                "process_data_080032b4": {
                    "1": "process_data_param",
                    "2": "process_data"
                },
                "process_input_08002cf2": {
                    "3": "process_input"
                },
                "process_param_08002efc": {
                    "1": "process_param_param",
                    "2": "process_parameter"
                },
                "process_param_08002f9c": {
                    "1": "process_param_data",
                    "2": "process_parameter"
                },
                "uVar2": {
                    "1": "flag_bit_1",
                    "2": "variable2",
                    "3": "status_flags",
                    "5": "flags",
                    "8": "flag1"
                },
                "uVar3": {
                    "1": "value_2",
                    "2": "value2",
                    "7": "status",
                    "8": "flag2"
                },
                "uVar4": {
                    "1": "flag_3",
                    "2": "var4",
                    "7": "flag3"
                },
                "update_data_08002ab8": {
                    "1": "update_data_data",
                    "2": "update_data"
                },
                "update_data_08002ad8": {
                    "1": "update_data_data",
                    "2": "update_data"
                },
                "update_data_08002ca6": {
                    "1": "update_data_param",
                    "2": "update_data"
                },
                "update_parameter_value_080028d2": {
                    "3": "update_parameter_value"
                },
                "update_status_08002848": {
                    "3": "update_status"
                }
            },
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "calling": [],
            "code": "\nvoid process_function_080033b8(int *input_data)\n\n{\n  int param_value;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  param_value = *input_data;\n  flag3 = *(uint *)(param_value + 0x18);\n  flag1 = *(uint *)(param_value + 0x14);\n  flag2 = *(uint *)(param_value + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          FUNC_080028de(input_data);\n        }\n      }\n      else {\n        update_parameter_value(input_data);\n      }\n    }\n    else {\n      update_status(input_data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_parameter(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        process_data(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        process_parameter(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      process_input();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      process_data(input_data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        update_data(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        update_data(input_data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        update_data(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_function_080033b8",
            "entrypoint": "0x080033b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080033b8": "process_function_080033b8",
                "iVar1": "param_value",
                "param_1": "input_data",
                "process_data_08002c54": "process_data",
                "process_data_08002db2": "process_data",
                "process_data_0800306c": "process_data",
                "process_data_080032b4": "process_data",
                "process_input_08002cf2": "process_input",
                "process_param_08002efc": "process_parameter",
                "process_param_08002f9c": "process_parameter",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3",
                "update_data_08002ab8": "update_data",
                "update_data_08002ad8": "update_data",
                "update_data_08002ca6": "update_data",
                "update_parameter_value_080028d2": "update_parameter_value",
                "update_status_08002848": "update_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003520": {
            "additional_data": {
                "FUN_08003520": {
                    "1": "update_flags",
                    "15": "process_flags",
                    "6": "process_data"
                },
                "cVar1": {
                    "1": "condition",
                    "13": "character",
                    "5": "char_var",
                    "6": "char_value"
                },
                "param_1": {
                    "1": "param",
                    "2": "arguments",
                    "3": "parameters",
                    "4": "params",
                    "6": "flags",
                    "7": "data"
                },
                "process_data_0800316c": {
                    "3": "process_data"
                },
                "process_param_08002d1c": {
                    "1": "process_params"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "2": "param_ptr",
                    "9": "ptr"
                },
                "uVar3": {
                    "1": "flags1",
                    "2": "var3",
                    "3": "var1",
                    "4": "flag_value",
                    "5": "value1",
                    "7": "flag1"
                },
                "uVar4": {
                    "1": "status_flag2",
                    "2": "flag_check",
                    "3": "var2",
                    "5": "value2",
                    "7": "flag2"
                }
            },
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "calling": [],
            "code": "\nvoid process_flags_08003520(uint **data)\n\n{\n  char character;\n  uint *pointer;\n  uint flag1;\n  uint flag2;\n  \n  pointer = *data;\n  flag1 = pointer[5];\n  flag2 = pointer[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n    **data = **data | 0x8000;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 2);\n    (*data)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)data + 0x3d);\n    if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (data[0xc] == (uint *)0x21)))))) {\n      process_params(data);\n    }\n    else {\n      data[0x10] = (uint *)((uint)data[0x10] | 4);\n      if (*(char *)((int)data + 0x3e) == '\\x10') {\n        **data = **data | 0x200;\n      }\n      (*data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 8);\n    (*data)[5] = 0xfffff7ff;\n  }\n  if (data[0x10] != (uint *)0x0) {\n    process_data(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_flags_08003520",
            "entrypoint": "0x08003520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003520": "process_flags_08003520",
                "cVar1": "character",
                "param_1": "data",
                "process_data_0800316c": "process_data",
                "process_param_08002d1c": "process_params",
                "puVar2": "pointer",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800365c": {
            "additional_data": {
                "FUN_0800365c": {
                    "1": "count_down",
                    "19": "calculate_delay",
                    "2": "delay_function",
                    "7": "calculate_iterations"
                },
                "bVar1": {
                    "1": "is_delay_complete",
                    "2": "is_not_zero"
                },
                "local_4": {
                    "1": "processed_value",
                    "2": "calculated_delay",
                    "3": "adjusted_value",
                    "5": "delay",
                    "9": "delay_count"
                },
                "param_1": {
                    "1": "input_param",
                    "19": "input_value",
                    "2": "delay",
                    "8": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003688"
            ],
            "code": "\nvoid calculate_delay_0800365c(int input_value)\n\n{\n  bool has_delay;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000084 / 8000);\n  do {\n    has_delay = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (has_delay);\n  return;\n}\n\n",
            "current_name": "calculate_delay_0800365c",
            "entrypoint": "0x0800365c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800365c": "calculate_delay_0800365c",
                "bVar1": "has_delay",
                "local_4": "delay_count",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003688": {
            "additional_data": {
                "FUN_08003688": {
                    "1": "perform_operation",
                    "2": "handle_param",
                    "5": "process_flags"
                },
                "_DAT_40007000": {
                    "1": "register3",
                    "2": "register6"
                },
                "_DAT_40021000": {
                    "1": "config_flags",
                    "3": "register2"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "3": "register1"
                },
                "_DAT_4002101c": {
                    "1": "other_flags",
                    "3": "register5"
                },
                "_DAT_40021020": {
                    "1": "more_flags",
                    "2": "register7"
                },
                "_DAT_40021024": {
                    "1": "some_other_register",
                    "2": "register4"
                },
                "_DAT_42420000": {
                    "1": "delay_flag3",
                    "2": "register3"
                },
                "_DAT_42420060": {
                    "1": "flag2",
                    "2": "register8"
                },
                "_DAT_42420480": {
                    "1": "flag2"
                },
                "bVar5": {
                    "1": "is_bit_set",
                    "3": "is_condition_met",
                    "5": "is_set",
                    "6": "is_flag_set"
                },
                "get_data_08001cc4": {
                    "5": "get_current_time"
                },
                "iVar1": {
                    "1": "value1",
                    "19": "start_time",
                    "3": "start_value",
                    "5": "initial_time"
                },
                "iVar2": {
                    "1": "value2",
                    "2": "curr_time",
                    "21": "current_time",
                    "6": "current_value"
                },
                "param_1": {
                    "1": "input_data",
                    "13": "flags",
                    "2": "param",
                    "3": "status_flags"
                },
                "uVar3": {
                    "1": "return_value",
                    "30": "result"
                },
                "uVar4": {
                    "1": "param_1_value",
                    "14": "value",
                    "3": "temp",
                    "4": "flag_value"
                }
            },
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 check_status_08003688(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint value;\n  bool is_flag_set;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      calculate_delay_0800365c(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_current_time();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "check_status_08003688",
            "entrypoint": "0x08003688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003688": "check_status_08003688",
                "bVar5": "is_flag_set",
                "get_data_08001cc4": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "flags",
                "uVar3": "result",
                "uVar4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a68": {
            "additional_data": {
                "DAT_40021004": {
                    "1": "bitmask"
                },
                "FUN_08003a68": {
                    "1": "calculate_processing_time",
                    "2": "calculate_execution_time",
                    "22": "calculate_delay",
                    "3": "calculate_time_delay"
                },
                "PTR_40021004": {
                    "1": "constant2"
                },
                "_DAT_40021004": {
                    "1": "input_flags",
                    "2": "data_value",
                    "3": "input_data",
                    "4": "register_value"
                },
                "byte_080021004": {
                    "1": "byte_data_value"
                },
                "local_1c": {
                    "1": "delay_control",
                    "2": "multiplier",
                    "3": "delay_factor",
                    "4": "input_value",
                    "6": "counter"
                },
                "uStack_10": {
                    "1": "value",
                    "2": "constant3",
                    "3": "constant2",
                    "5": "value3"
                },
                "uStack_14": {
                    "1": "stack_var_2",
                    "2": "param2",
                    "3": "data2",
                    "5": "value2"
                },
                "uStack_18": {
                    "1": "offset",
                    "2": "constant4",
                    "3": "data1",
                    "5": "value1"
                },
                "uStack_c": {
                    "1": "constant3",
                    "2": "stack_value4",
                    "3": "constant",
                    "5": "value4"
                },
                "uVar1": {
                    "1": "time_delay",
                    "8": "delay"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003afa"
            ],
            "code": "\n\n\nuint calculate_delay_08003a68(void)\n\n{\n  uint delay;\n  undefined2 counter;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  counter = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&counter - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "current_name": "calculate_delay_08003a68",
            "entrypoint": "0x08003a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "local_1c": "counter",
                "uStack_10": "value3",
                "uStack_14": "value2",
                "uStack_18": "value1",
                "uStack_c": "value4",
                "uVar1": "delay"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "additional_data": {
                "5000": {
                    "1": "max_elapsed_time"
                },
                "DAT_0800772c": {
                    "1": "delay_mapping"
                },
                "DAT_20000084": {
                    "1": "delay_adjustment",
                    "2": "result",
                    "3": "calculated_delay",
                    "5": "delay_value"
                },
                "DAT_40021000": {
                    "1": "special_flag"
                },
                "DAT_40022000": {
                    "1": "buffer_size_register"
                },
                "FUN_08003ad4": {
                    "1": "perform_memory_operation",
                    "3": "initialize_and_update_data",
                    "5": "initialize_memory",
                    "9": "initialize_and_update_memory"
                },
                "_DAT_40021000": {
                    "1": "additional_flag"
                },
                "_DAT_40021004": {
                    "1": "global_delay",
                    "2": "memory_status",
                    "3": "control_register"
                },
                "_DAT_40022000": {
                    "1": "global_config_1",
                    "2": "memory_flags",
                    "4": "memory_config"
                },
                "calculate_delay_08003a68": {
                    "20": "calculate_delay"
                },
                "get_data_08001cc4": {
                    "1": "get_time_difference",
                    "11": "get_current_time",
                    "2": "get_current_value",
                    "3": "get_data",
                    "4": "get_elapsed_time"
                },
                "iVar1": {
                    "11": "start_time",
                    "4": "initial_time",
                    "5": "initial_value"
                },
                "iVar2": {
                    "15": "current_time",
                    "5": "current_value"
                },
                "initialize_and_update_memory_08001c3c": {
                    "1": "initialize_memory",
                    "14": "initialize_and_update_memory"
                },
                "param_1": {
                    "1": "operation_flags",
                    "2": "input_data",
                    "3": "config_params",
                    "9": "flags"
                },
                "param_1[1]": {
                    "1": "action"
                },
                "param_1[2]": {
                    "1": "config_bit_2"
                },
                "param_2": {
                    "1": "parameter_count",
                    "11": "size",
                    "2": "input_size",
                    "3": "delay"
                },
                "uVar3": {
                    "1": "result",
                    "18": "delay",
                    "3": "calculated_delay"
                }
            },
            "called": [
                "FUN_08003afa"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n\nundefined4 initialize_and_update_memory_08003ad4(uint *flags,uint size)\n\n{\n  int start_time;\n  int current_time;\n  uint delay;\n  \n  if ((_DAT_40022000 & 7) < size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config_bit_2;\n  }\n  if ((*flags & 1) != 0) {\n    delay = action;\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_time();\n    if (action == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (action == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000084 = delay >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_and_update_memory_08003ad4(0xf);\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_memory_08003ad4",
            "entrypoint": "0x08003ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ad4": "initialize_and_update_memory_08003ad4",
                "calculate_delay_08003a68": "calculate_delay",
                "get_data_08001cc4": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "initialize_and_update_memory_08001c3c": "initialize_and_update_memory",
                "param_1": "flags",
                "param_1[1]": "action",
                "param_1[2]": "config_bit_2",
                "param_2": "size",
                "uVar3": "delay"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003afa": {
            "additional_data": {
                "&DAT_0800772c": {
                    "1": "delay_table"
                },
                "5000": {
                    "1": "max_difference"
                },
                "DAT_20000084": {
                    "1": "calculated_delay",
                    "3": "delay_result",
                    "7": "delay_value"
                },
                "FUN_08003afa": {
                    "1": "initialize_delay_and_memory",
                    "10": "initialize_and_update",
                    "2": "initialize_and_update_data",
                    "6": "initialize_and_update_memory"
                },
                "_DAT_40021000": {
                    "1": "status_register",
                    "2": "hardware_config",
                    "3": "control_register"
                },
                "_DAT_40021004": {
                    "1": "config_flags",
                    "2": "data_register",
                    "3": "memory_config"
                },
                "_DAT_40022000": {
                    "1": "memory_address",
                    "2": "memory_config",
                    "3": "memory_size",
                    "4": "memory_register"
                },
                "calculate_delay_08003a68": {
                    "15": "calculate_delay"
                },
                "get_data_08001cc4": {
                    "1": "get_timestamp",
                    "3": "get_elapsed_time",
                    "4": "get_data",
                    "6": "get_current_time"
                },
                "iVar1": {
                    "1": "start",
                    "19": "start_time",
                    "4": "initial_value",
                    "6": "initial_time"
                },
                "iVar2": {
                    "1": "current_data",
                    "26": "current_time",
                    "3": "current_value"
                },
                "initialize_and_update_memory_08001c3c": {
                    "1": "init_and_update_memory",
                    "10": "initialize_and_update_memory",
                    "3": "initialize_memory"
                },
                "param_1": {
                    "1": "config_flags",
                    "2": "configuration_flags",
                    "28": "flags"
                },
                "param_2": {
                    "1": "length",
                    "2": "size",
                    "3": "max_value",
                    "5": "delay",
                    "9": "value"
                },
                "uVar3": {
                    "1": "result",
                    "12": "delay",
                    "2": "calculated_delay",
                    "4": "delay_value",
                    "8": "status"
                }
            },
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "calling": [
                "FUN_08003ad4"
            ],
            "code": "\n\n\nundefined4 initialize_and_update_08003afa(uint *flags,uint value)\n\n{\n  int start_time;\n  int current_time;\n  uint delay;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    delay = flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_time();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000084 = delay >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_and_update_08003afa_memory(0xf);\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_08003afa",
            "entrypoint": "0x08003afa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003afa": "initialize_and_update_08003afa",
                "calculate_delay_08003a68": "calculate_delay",
                "get_data_08001cc4": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "initialize_and_update_memory_08001c3c": "initialize_and_update_memory",
                "param_1": "flags",
                "param_2": "value",
                "uVar3": "delay"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c44": {
            "additional_data": {
                "DAT_20000084": {
                    "1": "data_offset",
                    "2": "result",
                    "3": "data_value",
                    "4": "global_value",
                    "5": "data"
                },
                "FUN_08003c44": {
                    "1": "get_dat_value",
                    "13": "get_data_value",
                    "3": "get_global_variable",
                    "4": "get_global_value",
                    "7": "get_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "code": "\nundefined4 get_data_value_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "current_name": "get_data_value_08003c44",
            "entrypoint": "0x08003c44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c44": "get_data_value_08003c44"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c50": {
            "additional_data": {
                "&DAT_0800773c": {
                    "1": "shift_constants",
                    "3": "shift_array",
                    "4": "shift_table"
                },
                "DAT_0800773c": {
                    "1": "shift_mask",
                    "3": "shift_amount",
                    "5": "shift_table"
                },
                "FUN_08003c50": {
                    "1": "extracted_data_shifted",
                    "14": "get_shifted_data_value",
                    "2": "calculate_shifted_value",
                    "4": "extract_data_value"
                },
                "PTR_DAT_0800773c": {
                    "1": "shift_table"
                },
                "_DAT_40021004": {
                    "1": "parameter",
                    "10": "input_value",
                    "2": "data_offset",
                    "6": "shift_value"
                },
                "get_data_value_08003c44": {
                    "1": "get_extracted_data_value",
                    "8": "get_data_value"
                },
                "uVar1": {
                    "30": "data_value"
                }
            },
            "called": [
                "FUN_08003c44"
            ],
            "calling": [
                "FUN_08004204"
            ],
            "code": "\n\n\nuint get_shifted_data_value_08003c50(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "current_name": "get_shifted_data_value_08003c50",
            "entrypoint": "0x08003c50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c50": "get_shifted_data_value_08003c50",
                "get_data_value_08003c44": "get_data_value",
                "uVar1": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c70": {
            "additional_data": {
                "&DAT_0800773c": {
                    "1": "data_offset",
                    "2": "shift_amount",
                    "4": "shift_table",
                    "5": "shift_array"
                },
                "DAT_0800773c": {
                    "1": "shift_value",
                    "2": "shift_amount",
                    "3": "shift_array",
                    "4": "shift_values"
                },
                "FUN_08003c70": {
                    "1": "extracted_data_shifted",
                    "14": "get_shifted_data_value",
                    "2": "extracted_data_shift",
                    "5": "shift_data_value"
                },
                "_DAT_40021004": {
                    "1": "data_value_2",
                    "2": "data_constant",
                    "4": "input_data",
                    "6": "shift_amount",
                    "8": "input_value"
                },
                "get_data_value_08003c44": {
                    "9": "get_data_value"
                },
                "uVar1": {
                    "1": "data",
                    "30": "data_value"
                }
            },
            "called": [
                "FUN_08003c44"
            ],
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "code": "\n\n\nuint get_shifted_data_value_08003c70(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "current_name": "get_shifted_data_value_08003c70",
            "entrypoint": "0x08003c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c70": "get_shifted_data_value_08003c70",
                "get_data_value_08003c44": "get_data_value",
                "uVar1": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c90": {
            "additional_data": {
                "*param_1": {
                    "1": "config"
                },
                "FUN_08003c90": {
                    "1": "process_configuration",
                    "2": "initialize_system",
                    "3": "update_configuration",
                    "4": "update_settings",
                    "5": "update_data"
                },
                "_DAT_40007000": {
                    "1": "hardware_reg2",
                    "2": "register2"
                },
                "_DAT_40021004": {
                    "1": "data_register5",
                    "2": "register5"
                },
                "_DAT_4002101c": {
                    "1": "flags",
                    "2": "data_register1"
                },
                "_DAT_40021020": {
                    "1": "hardware_reg2",
                    "2": "register3"
                },
                "_DAT_42420440": {
                    "1": "register_4",
                    "2": "register4"
                },
                "bVar5": {
                    "1": "is_first_execution",
                    "13": "is_flag_set",
                    "3": "is_first_time",
                    "5": "is_bit_set"
                },
                "get_data_08001cc4": {
                    "1": "retrieve_data",
                    "2": "get_data"
                },
                "iVar3": {
                    "1": "tmp_var3",
                    "11": "initial_value",
                    "2": "data1",
                    "3": "start_time",
                    "8": "start_value"
                },
                "iVar4": {
                    "1": "current_data",
                    "18": "current_value",
                    "2": "data2",
                    "4": "current_time"
                },
                "param_1": {
                    "1": "input_values",
                    "2": "config_params",
                    "3": "configuration",
                    "4": "config",
                    "5": "settings"
                },
                "param_1[1]": {
                    "1": "config_param1"
                },
                "param_1[2]": {
                    "1": "config_param2"
                },
                "param_1[3]": {
                    "1": "config_param3"
                },
                "return_value": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "bit1_status",
                    "12": "temp_var1",
                    "2": "value1",
                    "4": "temp1"
                },
                "uVar2": {
                    "1": "new_config",
                    "12": "temp_var2",
                    "2": "value2",
                    "4": "flag2"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n\nundefined4 update_data_08003c90(uint *data)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  int initial_value;\n  int current_value;\n  bool is_flag_set;\n  \n  if ((*data & 1) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initial_value = get_data();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_value = get_data();\n        if (100 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (config_param1 & 0x300))) {\n      temp_var2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      temp_var1 = _DAT_40021020 & 1;\n      _DAT_40021020 = temp_var2;\n      if (temp_var1 != 0) {\n        initial_value = get_data();\n        while ((_DAT_40021020 & 2) == 0) {\n          current_value = get_data();\n          if (5000 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | config_param1;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*data & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | config_param2;\n  }\n  if ((*data & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | config_param3;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_08003c90",
            "entrypoint": "0x08003c90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c90": "update_data_08003c90",
                "bVar5": "is_flag_set",
                "get_data_08001cc4": "get_data",
                "iVar3": "initial_value",
                "iVar4": "current_value",
                "param_1": "data",
                "param_1[1]": "config_param1",
                "param_1[2]": "config_param2",
                "param_1[3]": "config_param3",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003da4": {
            "additional_data": {
                "FUN_08003da4": {
                    "1": "calculate_shifted_value",
                    "2": "calculate_shifted_data_value",
                    "6": "calculate_shifted_data",
                    "8": "calculate_value",
                    "9": "calculate_data_value"
                },
                "_DAT_40021000": {
                    "1": "data_register_2"
                },
                "_DAT_40021004": {
                    "1": "data_value_1"
                },
                "_DAT_40021020": {
                    "1": "data_value_3"
                },
                "_DAT_40021024": {
                    "1": "data_4"
                },
                "local_24": {
                    "1": "shifted_constant",
                    "2": "constant",
                    "3": "constant_1",
                    "6": "constant_value",
                    "7": "shifted_value"
                },
                "param_1": {
                    "1": "input_param",
                    "21": "input_value",
                    "3": "input"
                },
                "uStack_14": {
                    "1": "constant3",
                    "2": "constant",
                    "4": "constant4"
                },
                "uStack_18": {
                    "1": "stack_value_18",
                    "2": "constant_value_4",
                    "4": "constant3"
                },
                "uStack_1c": {
                    "1": "shift_divisor",
                    "2": "constant_value_3",
                    "4": "constant2"
                },
                "uStack_20": {
                    "1": "shifted_data_4",
                    "2": "data_value",
                    "3": "constant_2",
                    "4": "multiplier"
                },
                "uVar1": {
                    "1": "shifted_data_value",
                    "2": "output_value",
                    "25": "result"
                }
            },
            "called": [
                "FUN_08003c70"
            ],
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "code": "\n\n\nuint calculate_data_value_08003da4(int input_value)\n\n{\n  uint result;\n  undefined2 shifted_value;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  constant4 = 0x10100f0e;\n  constant3 = 0xd0c0b0a;\n  constant2 = 0x9080706;\n  constant1 = 0x5040302;\n  shifted_value = 0x201;\n  if (input_value == 2) {\n    result = get_shifted_data_value_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shifted_value - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&constant1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_data_value_08003da4",
            "entrypoint": "0x08003da4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003da4": "calculate_data_value_08003da4",
                "local_24": "shifted_value",
                "param_1": "input_value",
                "uStack_14": "constant4",
                "uStack_18": "constant3",
                "uStack_1c": "constant2",
                "uStack_20": "constant1",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "additional_data": {
                "(*data)[1]": {
                    "1": "second_data_value"
                },
                "(*param_1)[1]": {
                    "1": "status_value",
                    "2": "second_param"
                },
                "(int)param_1": {
                    "1": "param1_int"
                },
                "(int)param_1 + 0x11": {
                    "1": "address_offset",
                    "2": "offset_address"
                },
                "(undefined *)((int)param_1 + 0x11)": {
                    "1": "variable_address"
                },
                "*(undefined *)((int)param_1 + 0x11)": {
                    "1": "flag_value",
                    "2": "flag"
                },
                "**param_1": {
                    "1": "parameter_value"
                },
                "*data": {
                    "1": "data_value"
                },
                "*param_1": {
                    "1": "flag_value",
                    "2": "data_value"
                },
                "*param_1[1]": {
                    "1": "second_flag"
                },
                "0x11": {
                    "1": "offset_value"
                },
                "DAT_40010414": {
                    "1": "memory_address"
                },
                "DAT_40010414_addr": {
                    "1": "address"
                },
                "FUN_08003ea0": {
                    "1": "initialize_memory_layout",
                    "2": "execute_callback_and_set_flag",
                    "3": "execute_and_reset_flag"
                },
                "PTR_40010414": {
                    "1": "flag_variable"
                },
                "PTR_param_1": {
                    "1": "pointer_to_flags"
                },
                "PTR_param_1_1": {
                    "1": "pointer_to_flags_plus_1"
                },
                "PTR_xxxx": {
                    "1": "xxxx"
                },
                "_DAT_40010414": {
                    "1": "status_register",
                    "2": "global_variable",
                    "3": "data_address",
                    "4": "memory_address"
                },
                "execute_callback_08004d18": {
                    "1": "trigger_callback",
                    "14": "execute_callback",
                    "3": "execute_specific_callback"
                },
                "int": {
                    "1": "integer"
                },
                "original_variable_name_1": {
                    "1": "flag"
                },
                "original_variable_name_2": {
                    "1": "callback_flag"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_params",
                    "3": "parameter",
                    "5": "callback_data",
                    "6": "flags"
                },
                "param_1[1]": {
                    "1": "callback_flag"
                },
                "undefined": {
                    "1": "unspecified"
                },
                "var_11": {
                    "1": "value_to_set"
                }
            },
            "called": [
                "FUN_08004d18"
            ],
            "calling": [],
            "code": "\n\n\nvoid execute_and_reset_flags_08003ea0(uinteger **flags)\n\n{\n  if (((**flags & 2) != 0) && (((*flags)[1] & 2) != 0)) {\n    execute_callback();\n    (*flags)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(unspecified *)(param1_int + 0x11) = 1;\n  return;\n}\n\n",
            "current_name": "execute_and_reset_flags_08003ea0",
            "entrypoint": "0x08003ea0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "param1_int",
                "FUN_08003ea0": "execute_and_reset_flags_08003ea0",
                "execute_callback_08004d18": "execute_callback",
                "int": "integer",
                "param_1": "flags",
                "undefined": "unspecified"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "additional_data": {
                "(int)param_1": {
                    "1": "converted_param_1"
                },
                "(int)param_1 + 0x3d": {
                    "1": "character_offset"
                },
                "(param_1 + 0xf)": {
                    "1": "flag_address"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "status",
                    "4": "flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "variable_y"
                },
                "*puVar1": {
                    "1": "register_value",
                    "2": "value"
                },
                "0x1111": {
                    "1": "mask1"
                },
                "0x3d": {
                    "1": "offset"
                },
                "0x444": {
                    "1": "mask2"
                },
                "FUN_08003ed8": {
                    "1": "update_parameters",
                    "27": "update_registers"
                },
                "PTR_08004b34": {
                    "1": "update_registers_08004b34"
                },
                "PTR_FUN_08004b34": {
                    "1": "update_registers_08004b34"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "register_array",
                    "14": "parameters",
                    "4": "param",
                    "8": "registers"
                },
                "ptr[8]": {
                    "1": "register_value"
                },
                "puVar1": {
                    "1": "pointer_to_parameters",
                    "13": "pointer",
                    "2": "register_array",
                    "4": "current_register",
                    "5": "ptr"
                },
                "puVar1[8]": {
                    "1": "ptr[8]",
                    "2": "value"
                },
                "update_registers_08004b34": {
                    "3": "update_registers",
                    "6": "update_registers_helper"
                }
            },
            "called": [
                "FUN_08004b34"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nvoid update_registers_08003ed8(uinteger **parameters)\n\n{\n  uinteger *pointer;\n  \n  *(undefined *)(converted_param_1 + 0x3d) = 2;\n  pointer = *parameters;\n  if ((value & 0x1111) == 0) {\n    if ((value & 0x444) == 0) {\n      *pointer = *pointer & 0xfffffffe;\n    }\n  }\n  update_registers_08003ed8_helper(parameters);\n  *(undefined *)(converted_param_1 + 0x3d) = 0;\n  *(undefined *)(parameters + 0xf) = 0;\n  return;\n}\n\n",
            "current_name": "update_registers_08003ed8",
            "entrypoint": "0x08003ed8",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "converted_param_1",
                "FUN_08003ed8": "update_registers_08003ed8",
                "int": "integer",
                "param_1": "parameters",
                "puVar1": "pointer",
                "puVar1[8]": "value",
                "update_registers_08004b34": "update_registers_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f12": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003f12",
            "entrypoint": "0x08003f12",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003f14": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003f14",
            "entrypoint": "0x08003f14",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003f16": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003f16",
            "entrypoint": "0x08003f16",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003f18": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "condition1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "condition2"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "value1"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "value2"
                },
                "*(undefined *)(param_1 + 7)": {
                    "1": "flag_value"
                },
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "result_value"
                },
                "DAT_08003f12": {
                    "1": "handle_failure"
                },
                "DAT_08003f14": {
                    "1": "handle_success"
                },
                "DAT_08003f16": {
                    "1": "perform_action"
                },
                "DAT_08004178": {
                    "1": "execute_action"
                },
                "DAT_0800417a": {
                    "1": "process_action"
                },
                "DAT_08004df8": {
                    "1": "execute_callback"
                },
                "DAT_08004e12": {
                    "1": "execute_callback2"
                },
                "FUNC_08003f12": {
                    "1": "perform_alternative_action",
                    "2": "function2",
                    "3": "handle_error"
                },
                "FUNC_08003f14": {
                    "1": "perform_operation",
                    "2": "function_a",
                    "5": "perform_action"
                },
                "FUNC_08003f16": {
                    "1": "handle_case_b",
                    "2": "perform_action_b"
                },
                "FUNC_08004178": {
                    "1": "handle_something",
                    "2": "function_e"
                },
                "FUNC_0800417a": {
                    "1": "handle_case_a",
                    "2": "function3"
                },
                "FUN_08003f18": {
                    "1": "process_actions",
                    "11": "process_flags",
                    "2": "process_function",
                    "3": "execute_callbacks",
                    "4": "process_data"
                },
                "PTR_VAR_1": {
                    "1": "current_action"
                },
                "execute_callback_08004df8": {
                    "1": "execute_pre_callback",
                    "10": "execute_callback",
                    "2": "execute_flag_callback",
                    "3": "execute_callback_a",
                    "6": "execute_callback1"
                },
                "execute_callback_08004df8(param_1)": {
                    "1": "execute_callback_b"
                },
                "execute_callback_08004e12": {
                    "1": "execute_post_callback",
                    "2": "execute_second_callback",
                    "3": "execute_another_callback",
                    "8": "execute_callback2"
                },
                "execute_callback_08004e12(param_1)": {
                    "1": "execute_callback_c"
                },
                "iVar1": {
                    "1": "current_value",
                    "15": "value",
                    "2": "data_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "callback_data",
                    "4": "data",
                    "9": "flags"
                }
            },
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "calling": [
                "FUN_08004e20"
            ],
            "code": "\nvoid process_flags_08003f18(int *flags)\n\n{\n  int value;\n  \n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback();\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback_b;\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback_b;\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback_b;\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    execute_callback_c;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800417a(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08003f16(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_08004178(flags);\n  }\n  return;\n}\n\n",
            "current_name": "process_flags_08003f18",
            "entrypoint": "0x08003f18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f18": "process_flags_08003f18",
                "execute_callback_08004df8": "execute_callback",
                "execute_callback_08004df8(param_1)": "execute_callback_b",
                "execute_callback_08004e12": "execute_callback2",
                "execute_callback_08004e12(param_1)": "execute_callback_c",
                "iVar1": "value",
                "param_1": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004092": {
            "additional_data": {
                "(1 << (param_2 & 0xff))": {
                    "1": "mask"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "bits"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "FUN_08004092": {
                    "1": "modify_bitwise_operation",
                    "2": "update_bits",
                    "3": "update_bit_value",
                    "5": "update_bit",
                    "9": "update_bitwise_value"
                },
                "param_1": {
                    "1": "value_ptr",
                    "2": "address",
                    "24": "base_address"
                },
                "param_1 + 0x20": {
                    "1": "address"
                },
                "param_2": {
                    "1": "bit_offset",
                    "26": "bit_position",
                    "4": "bit_index"
                },
                "param_3": {
                    "1": "value_to_set",
                    "13": "bit_value",
                    "14": "new_value",
                    "3": "value"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "shifted_value"
                },
                "~(1 << (param_2 & 0xff))": {
                    "1": "bit_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_080040b0"
            ],
            "code": "\nvoid update_bitwise_value_08004092(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bitwise_value_08004092",
            "entrypoint": "0x08004092",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004092": "update_bitwise_value_08004092",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040b0": {
            "additional_data": {
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "boolean_flag",
                    "2": "flag"
                },
                "*param_1": {
                    "1": "value_ptr"
                },
                "*puVar1": {
                    "1": "current_value_dereferenced"
                },
                "FUN_080040b0": {
                    "1": "update_bitwise_flags",
                    "10": "update_and_check_values",
                    "4": "update_values",
                    "5": "update_bitwise_values"
                },
                "param_1": {
                    "1": "bitwise_values",
                    "2": "input_values",
                    "3": "pointer",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "param",
                    "13": "value",
                    "2": "value_to_update",
                    "3": "flag",
                    "7": "new_value"
                },
                "puVar1": {
                    "1": "pointer_to_updated_value",
                    "2": "current_ptr",
                    "3": "current_pointer",
                    "4": "current_value"
                },
                "puVar1[8]": {
                    "1": "memory_value_3"
                },
                "uRam40012c00": {
                    "1": "memory_address_1",
                    "2": "constant_1",
                    "8": "constant_value_1"
                },
                "uRam40012c20": {
                    "1": "constant2",
                    "7": "constant_value_2"
                },
                "uRam40012c44": {
                    "1": "constant_ptr_3",
                    "4": "constant_value_3"
                },
                "update_bitwise_value_08004092": {
                    "1": "update_bitwise_value"
                }
            },
            "called": [
                "FUN_08004092"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 update_and_check_values_080040b0(uint **input_data,undefined4 value)\n\n{\n  uint *pointer;\n  \n  update_bitwise_value(*input_data,value,0);\n  if (((*input_data == (uint *)0x40012c00) && ((constant_value_2 & 0x1111) == 0)) &&\n     ((constant_value_2 & 0x444) == 0)) {\n    constant_value_3 = constant_value_3 & 0xffff7fff;\n  }\n  pointer = *input_data;\n  if (((memory_value_3 & 0x1111) == 0) && ((memory_value_3 & 0x444) == 0)) {\n    *pointer = *pointer & 0xfffffffe;\n  }\n  *(undefined *)((int)input_data + 0x3d) = 1;\n  return 0;\n}\n\n",
            "current_name": "update_and_check_values_080040b0",
            "entrypoint": "0x080040b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040b0": "update_and_check_values_080040b0",
                "param_1": "input_data",
                "param_2": "value",
                "puVar1": "pointer",
                "puVar1[8]": "memory_value_3",
                "uRam40012c20": "constant_value_2",
                "uRam40012c44": "constant_value_3",
                "update_bitwise_value_08004092": "update_bitwise_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004110": {
            "additional_data": {
                "6_ptr_080157BC": {
                    "1": "register_value"
                },
                "FUN_08004110": {
                    "1": "clear_bit_and_set_bit",
                    "2": "update_flags",
                    "3": "update_bit_value",
                    "7": "update_bitwise_value"
                },
                "param_1": {
                    "1": "base_addr",
                    "2": "data_address",
                    "20": "base_address",
                    "4": "register_address"
                },
                "param_2": {
                    "1": "offset",
                    "11": "bit_offset",
                    "15": "bit_position"
                },
                "param_3": {
                    "1": "new_data",
                    "16": "new_value",
                    "3": "value",
                    "9": "bit_value"
                },
                "param_4": {
                    "1": "value_masked"
                },
                "param_5": {
                    "1": "shifted_value"
                },
                "param_6": {
                    "1": "new_value"
                },
                "param_7": {
                    "1": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800412c"
            ],
            "code": "\nvoid update_bitwise_value_08004110(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(4 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bitwise_value_08004110",
            "entrypoint": "0x08004110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004110": "update_bitwise_value_08004110",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800412c": {
            "additional_data": {
                "*param_1": {
                    "1": "data"
                },
                "*puVar1": {
                    "1": "array[0]"
                },
                "0x11": {
                    "1": "index"
                },
                "DAT_08004110": {
                    "1": "bitmask"
                },
                "FUN_0800412c": {
                    "1": "update_bitwise_and_check",
                    "10": "update_bitwise_values",
                    "2": "update_values",
                    "4": "update_and_check_values",
                    "9": "update_bitwise_value"
                },
                "PTR_update_bitwise_value_08004110": {
                    "1": "update_bitwise_value"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "input_data",
                    "3": "bitwise_array",
                    "5": "bitwise_values"
                },
                "param_2": {
                    "1": "bitwise_update_value",
                    "19": "value",
                    "2": "bit_value",
                    "6": "bitwise_value"
                },
                "puVar1": {
                    "1": "bit_array_pointer",
                    "2": "current_array",
                    "3": "data_ptr",
                    "5": "pointer"
                },
                "puVar1[0x11]": {
                    "1": "flag_0x11"
                },
                "puVar1[8]": {
                    "1": "target_flags"
                },
                "update_bitwise_value_08004110": {
                    "2": "update_bitwise_value_helper"
                }
            },
            "called": [
                "FUN_08004110"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 update_bitwise_values_0800412c(uint **bitwise_values,undefined4 value)\n\n{\n  uint *pointer;\n  \n  update_bitwise_value_helper(*bitwise_values,value,0);\n  pointer = *bitwise_values;\n  if (((target_flags & 0x1111) == 0) && ((target_flags & 0x444) == 0)) {\n    flag_0x11 = flag_0x11 & 0xffff7fff;\n  }\n  pointer = *bitwise_values;\n  if (((target_flags & 0x1111) == 0) && ((target_flags & 0x444) == 0)) {\n    *pointer = *pointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_bitwise_values_0800412c",
            "entrypoint": "0x0800412c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800412c": "update_bitwise_values_0800412c",
                "param_1": "bitwise_values",
                "param_2": "value",
                "puVar1": "pointer",
                "puVar1[0x11]": "flag_0x11",
                "puVar1[8]": "target_flags",
                "update_bitwise_value_08004110": "update_bitwise_value_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004178": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004178",
            "entrypoint": "0x08004178",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800417a": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800417a",
            "entrypoint": "0x0800417a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800417c": {
            "additional_data": {
                "&param_1": {
                    "1": "input_array_pointer"
                },
                "((int)param_1 + 0x3a)": {
                    "1": "adjusted_pointer"
                },
                "(int)param_1": {
                    "1": "ptr_data"
                },
                "(int)param_1 + 0x3a": {
                    "1": "char_var"
                },
                "(uint *)(*param_1 + 0x14)": {
                    "1": "element2"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "value_to_clear_pointer1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag2",
                    "8": "value2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value_at_offset_c",
                    "8": "value1"
                },
                "*(undefined *)((int)dataFields + 0x3a)": {
                    "1": "status_field"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "special_char",
                    "6": "flag"
                },
                "*param_1": {
                    "1": "memory_value"
                },
                "*param_1 + 0x14": {
                    "1": "value2"
                },
                "*param_1 + 0xc": {
                    "1": "value1"
                },
                "0x14": {
                    "1": "mask2"
                },
                "0xc": {
                    "1": "first_address_offset"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_0800417c": {
                    "1": "clear_bits_and_set_space_character",
                    "2": "update_flags_and_values",
                    "4": "clear_bits",
                    "6": "clear_flags"
                },
                "PTR_": {
                    "1": ""
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "memory_pointer",
                    "4": "data",
                    "5": "input_array"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "undefined": {
                    "1": "unknown_type"
                }
            },
            "called": [],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nvoid clear_flags_0800417c(integer *input_array)\n\n{\n  *(unsigned_int *)(*input_array + 0xc) = *(unsigned_int *)(*input_array + 0xc) & 0xfffffedf;\n  *(unsigned_int *)(*input_array + 0x14) = *(unsigned_int *)(*input_array + 0x14) & 0xfffffffe;\n  *(unknown_type *)(pointer_to_int + 0x3a) = 0x20;\n  return;\n}\n\n",
            "current_name": "clear_flags_0800417c",
            "entrypoint": "0x0800417c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "pointer_to_int",
                "FUN_0800417c": "clear_flags_0800417c",
                "int": "integer",
                "param_1": "input_array",
                "uint": "unsigned_int",
                "undefined": "unknown_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004198": {
            "additional_data": {
                "(byte *)param_1[8]": {
                    "1": "byte_pointer"
                },
                "(uint)*pbVar2": {
                    "1": "byte_value"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "first_char_of_input",
                    "4": "first_char"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "2": "short_var",
                    "3": "counter"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "ptr_value2",
                    "2": "status"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "ptr_to_write"
                },
                "*(ushort *)param_1[8]": {
                    "1": "updated_value",
                    "2": "value"
                },
                "*(ushort *)param_1[8] & 0x1ff": {
                    "2": "masked_value"
                },
                "*param_1": {
                    "1": "ptr_data"
                },
                "*param_1 + 0xc": {
                    "1": "control_flags"
                },
                "*param_1 + 4": {
                    "1": "output_buffer_offset"
                },
                "FUN_08004198": {
                    "1": "decode_and_update",
                    "12": "process_data",
                    "2": "parse_input",
                    "3": "process_binary_data",
                    "4": "parse_data"
                },
                "byte": {
                    "1": "byte_value"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "parameters",
                    "14": "data",
                    "2": "input_buffer",
                    "4": "input_data",
                    "5": "data_array"
                },
                "param_1[2]": {
                    "1": "value2",
                    "2": "value"
                },
                "param_1[4]": {
                    "1": "value4",
                    "3": "condition"
                },
                "param_1[8]": {
                    "1": "buffer",
                    "3": "pointer"
                },
                "pbVar2": {
                    "1": "ptr_data",
                    "14": "byte_ptr",
                    "2": "data_ptr",
                    "3": "current_byte",
                    "7": "byte_pointer"
                },
                "sVar1": {
                    "1": "decrement",
                    "13": "count",
                    "2": "remaining_count",
                    "4": "counter",
                    "6": "remaining_iterations"
                },
                "short": {
                    "1": "short_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nundefined4 process_data_08004198(integer *data)\n\n{\n  short_value count;\n  byte_value *byte_ptr;\n  \n  if (*(char *)((integer)data + 0x39) != '!') {\n    return 2;\n  }\n  if (value == 0x1000) {\n    *(uinteger *)(*data + 4) = *(ushort_value *)pointer & 0x1ff;\n    if (condition == 0) {\n      pointer = pointer + 2;\n    }\n    else {\n      pointer = pointer + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte_value *)pointer;\n    pointer = (integer)(byte_ptr + 1);\n    *(uinteger *)(*data + 4) = (uinteger)*byte_ptr;\n  }\n  count = *(short_value *)((integer)data + 0x26) + -1;\n  *(short_value *)((integer)data + 0x26) = count;\n  if (count == 0) {\n    *(uinteger *)(*data + 0xc) = *(uinteger *)(*data + 0xc) & 0xffffff7f;\n    *(uinteger *)(*data + 0xc) = *(uinteger *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08004198",
            "entrypoint": "0x08004198",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "byte": "byte_value",
                "int": "integer",
                "param_1": "data",
                "param_1[2]": "value",
                "param_1[4]": "condition",
                "param_1[8]": "pointer",
                "pbVar2": "byte_ptr",
                "sVar1": "count",
                "short": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004204": {
            "additional_data": {
                "FUN_08004204": {
                    "1": "calculate_shifted_values",
                    "2": "update_values",
                    "3": "update_data",
                    "4": "calculate_and_set_values",
                    "7": "calculate_values"
                },
                "get_shifted_data_value_08003c50": {
                    "1": "get_shifted_data_value1"
                },
                "get_shifted_data_value_08003c70": {
                    "1": "get_shifted_data_value2"
                },
                "iRam40013808": {
                    "1": "updated_value",
                    "2": "calculated_value"
                },
                "iVar1": {
                    "1": "shifted_data_1",
                    "10": "value1",
                    "12": "shifted_value1",
                    "4": "data_value1"
                },
                "iVar10": {
                    "1": "data_pointer",
                    "11": "base_address",
                    "3": "data_value10",
                    "4": "shifted_value10",
                    "7": "value10"
                },
                "iVar2": {
                    "1": "shifted_data_2",
                    "10": "value2",
                    "12": "shifted_value2",
                    "4": "shifted_data_value2"
                },
                "iVar3": {
                    "1": "shifted_data_3",
                    "10": "value3",
                    "12": "shifted_value3",
                    "4": "data_value3"
                },
                "iVar4": {
                    "1": "shifted_data_4",
                    "10": "value4",
                    "12": "shifted_value4",
                    "4": "shifted_data_value4"
                },
                "iVar5": {
                    "1": "shifted_data_5",
                    "10": "value5",
                    "12": "shifted_value5",
                    "4": "data_value5"
                },
                "iVar6": {
                    "1": "data_value1",
                    "10": "value6",
                    "11": "shifted_value6",
                    "4": "data_value6"
                },
                "iVar7": {
                    "1": "shifted_data_7",
                    "10": "value7",
                    "11": "shifted_value7",
                    "4": "shifted_data_value7"
                },
                "iVar8": {
                    "1": "shifted_data_8",
                    "10": "value8",
                    "11": "shifted_value8",
                    "4": "shifted_data_value8"
                },
                "iVar9": {
                    "1": "shifted_data_9",
                    "10": "value9",
                    "11": "shifted_value9",
                    "4": "data_value9"
                },
                "param_1": {
                    "1": "input_parameters",
                    "2": "data_array",
                    "3": "input_data",
                    "4": "parameters",
                    "5": "input_array",
                    "7": "data"
                }
            },
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "calling": [
                "FUN_0800441a"
            ],
            "code": "\nvoid calculate_values_08004204(int *data)\n\n{\n  int shifted_value1;\n  int shifted_value2;\n  int shifted_value3;\n  int shifted_value4;\n  int shifted_value5;\n  int shifted_value6;\n  int shifted_value7;\n  int shifted_value8;\n  int shifted_value9;\n  int base_address;\n  \n  *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffcfff | data[3];\n  *(uint *)(*data + 0xc) =\n       data[2] | data[4] | data[5] | *(uint *)(*data + 0xc) & 0xffffe9f3;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffcff | data[6];\n  base_address = *data;\n  if (base_address != 0x40013800) {\n    shifted_value1 = get_shifted_data_value1();\n    shifted_value6 = data[1];\n    shifted_value2 = get_shifted_data_value1();\n    shifted_value7 = data[1];\n    shifted_value3 = get_shifted_data_value1();\n    shifted_value8 = data[1];\n    shifted_value4 = get_shifted_data_value1();\n    shifted_value9 = data[1];\n    shifted_value5 = get_shifted_data_value1();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shifted_value4 * 0x19) / (uint)(shifted_value9 << 2) +\n                        (int)(((ulonglong)(uint)(shifted_value5 * 0x19) / (ulonglong)(uint)(data[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shifted_value2 * 0x19) / (uint)(shifted_value7 << 2) +\n           (int)(((ulonglong)(uint)(shifted_value3 * 0x19) / (ulonglong)(uint)(shifted_value8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shifted_value1 * 0x19) / (ulonglong)(uint)(shifted_value6 << 2)) / 100) * 0x10;\n    return;\n  }\n  base_address = get_shifted_data_value2();\n  shifted_value5 = data[1];\n  shifted_value1 = get_shifted_data_value2();\n  shifted_value6 = data[1];\n  shifted_value2 = get_shifted_data_value2();\n  shifted_value7 = data[1];\n  shifted_value3 = get_shifted_data_value2();\n  shifted_value8 = data[1];\n  shifted_value4 = get_shifted_data_value2();\n  calculated_value = ((uint)((int)((ulonglong)\n                               (((uint)(shifted_value3 * 0x19) / (uint)(shifted_value8 << 2) +\n                                (int)(((ulonglong)(uint)(shifted_value4 * 0x19) /\n                                      (ulonglong)(uint)(data[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shifted_value1 * 0x19) / (uint)(shifted_value6 << 2) +\n                   (int)(((ulonglong)(uint)(shifted_value2 * 0x19) / (ulonglong)(uint)(shifted_value7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(base_address * 0x19) / (ulonglong)(uint)(shifted_value5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "current_name": "calculate_values_08004204",
            "entrypoint": "0x08004204",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004204": "calculate_values_08004204",
                "get_shifted_data_value_08003c50": "get_shifted_data_value1",
                "get_shifted_data_value_08003c70": "get_shifted_data_value2",
                "iRam40013808": "calculated_value",
                "iVar1": "shifted_value1",
                "iVar10": "base_address",
                "iVar2": "shifted_value2",
                "iVar3": "shifted_value3",
                "iVar4": "shifted_value4",
                "iVar5": "shifted_value5",
                "iVar6": "shifted_value6",
                "iVar7": "shifted_value7",
                "iVar8": "shifted_value8",
                "iVar9": "shifted_value9",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080043b4": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "parameter_matrix[3]",
                    "3": "data[3]"
                },
                "(*param_1)[5]": {
                    "1": "data_array[5]",
                    "3": "data[5]"
                },
                "(param_1 + 0xe)": {
                    "1": "parameter_array[0xe]"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "array_ptr[0x39]"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "param_address_offset_2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "array_ptr[0xe]"
                },
                "*param_1": {
                    "1": "data_array"
                },
                "FUN_080043b4": {
                    "1": "check_parameter_validity",
                    "2": "validate_parameters",
                    "3": "check_condition_and_modify",
                    "4": "check_params"
                },
                "baseValue": {
                    "1": "base"
                },
                "dataDifference": {
                    "1": "difference"
                },
                "expectedCondition": {
                    "1": "condition"
                },
                "get_data_08001cc4": {
                    "3": "get_data_value"
                },
                "iVar1": {
                    "1": "data_offset",
                    "12": "data_difference",
                    "3": "data",
                    "4": "data_value"
                },
                "inputArray": {
                    "1": "array"
                },
                "maskValue": {
                    "1": "mask"
                },
                "offsetValue": {
                    "1": "offset"
                },
                "param_1": {
                    "1": "double_pointer",
                    "2": "flags",
                    "3": "input_array",
                    "5": "data",
                    "8": "param_array"
                },
                "param_2": {
                    "1": "flag_check",
                    "2": "bit_mask",
                    "5": "mask",
                    "9": "flag"
                },
                "param_3": {
                    "1": "check_access",
                    "7": "condition"
                },
                "param_4": {
                    "1": "value2",
                    "2": "value_to_compare",
                    "3": "reference_value",
                    "5": "data_offset"
                },
                "param_5": {
                    "1": "max_offset",
                    "2": "max_diff",
                    "3": "threshold",
                    "4": "limit",
                    "9": "max_difference"
                },
                "return": {
                    "1": "result"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08004478"
            ],
            "code": "\nundefined4 check_params_080043b4(unsigned_integer **param_array,unsigned_integer flag,unsigned_integer expected_result,int data_offset,unsigned_integer max_difference)\n\n{\n  int data_difference;\n  \n  do {\n    if (((flag & ~**param_array) == 0) != expected_result) {\n      result 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (data_difference = get_data(), (unsigned_integer)(data_difference - data_offset) <= max_difference))));\n  (*param_array)[3] = (*param_array)[3] & 0xfffffe5f;\n  (*param_array)[5] = (*param_array)[5] & 0xfffffffe;\n  *(undefined *)((int)param_array + 0x39) = 0x20;\n  *(undefined *)((int)param_array + 0x3a) = 0x20;\n  *(undefined *)(param_array + 0xe) = 0;\n  result 3;\n}\n\n",
            "current_name": "check_params_080043b4",
            "entrypoint": "0x080043b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080043b4": "check_params_080043b4",
                "get_data_08001cc4": "get_data",
                "iVar1": "data_difference",
                "param_1": "param_array",
                "param_2": "flag",
                "param_3": "expected_result",
                "param_4": "data_offset",
                "param_5": "max_difference",
                "return": "result",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004418": {
            "called": [],
            "calling": [
                "FUN_0800441a"
            ],
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004418",
            "entrypoint": "0x08004418",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800441a": {
            "additional_data": {
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "value_check",
                    "10": "flag",
                    "2": "is_data_initialized"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "data_structure->something_else",
                    "10": "value2",
                    "3": "value_2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "value4",
                    "10": "value3",
                    "3": "value_3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value2",
                    "10": "value1",
                    "3": "value_1"
                },
                "*(uint *)(*param_1 + 0xc) | 0x2000": {
                    "1": "updated_val_at_param_plus_c"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "data_marker",
                    "3": "status",
                    "4": "flag"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "marker2",
                    "2": "flag2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "value_initialized",
                    "2": "initialized_flag",
                    "3": "status"
                },
                "0x0": {
                    "1": "null"
                },
                "0x10": {
                    "1": "pointer_value2"
                },
                "0x14": {
                    "1": "pointer_value3"
                },
                "0x20": {
                    "1": "new_value"
                },
                "0x2000": {
                    "1": "mask"
                },
                "0x24": {
                    "1": "new_character"
                },
                "0x39": {
                    "1": "flag"
                },
                "0xc": {
                    "1": "pointer_value1"
                },
                "0xf": {
                    "1": "counter"
                },
                "0xffffb7ff": {
                    "1": "bitwise_mask2"
                },
                "0xffffdfff": {
                    "1": "bitwise_mask1"
                },
                "0xffffffd5": {
                    "1": "bitwise_mask3"
                },
                "FUNCH_08004418": {
                    "1": "initialize"
                },
                "FUNC_08004418": {
                    "1": "perform_initialization",
                    "2": "helper_function"
                },
                "FUNC_08004418()": {
                    "1": "do_something"
                },
                "FUN_0800441a": {
                    "1": "initialize_variable",
                    "2": "initialize_parameters",
                    "7": "initialize_data"
                },
                "PTR_08004418": {
                    "1": "reset_function"
                },
                "PTR_0800441c": {
                    "1": "constant_1"
                },
                "PTR_08004420": {
                    "1": "constant_2"
                },
                "calculate_values_08004204": {
                    "1": "perform_calculation",
                    "25": "calculate_values"
                },
                "calculate_values_08004204(param_1)": {
                    "4": "calculate_values"
                },
                "char": {
                    "1": "character"
                },
                "char_39": {
                    "1": "flag"
                },
                "e": {
                    "1": "flag"
                },
                "param + 0xe": {
                    "1": "param_ptr_e"
                },
                "param_1": {
                    "1": "context",
                    "3": "parameter",
                    "4": "param",
                    "8": "data"
                },
                "param_1 + 0x10": {
                    "1": "param_plus_10"
                },
                "param_1 + 0x14": {
                    "1": "param_plus_14"
                },
                "param_1 + 0x39": {
                    "1": "param_plus_39"
                },
                "param_1 + 0x3a": {
                    "1": "values_array[58]"
                },
                "param_1 + 0xe": {
                    "1": "values_array[14]"
                },
                "param_1[0xf]": {
                    "1": "flag2",
                    "2": "value_4",
                    "7": "counter"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "undefined": {
                    "1": "unspecified"
                }
            },
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "calling": [
                "FUN_08004f4c"
            ],
            "code": "\nunspecified4 initialize_data_0800441a(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(character *)((int)data + 0x39) == '\\0') {\n      *(unspecified *)(data + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(unspecified *)((int)data + 0x39) = 0x24;\n    *(unsigned_integer *)(*data + 0xc) = *(unsigned_integer *)(*data + 0xc) & 0xffffdfff;\n    calculate_values;\n    *(unsigned_integer *)(*data + 0x10) = *(unsigned_integer *)(*data + 0x10) & 0xffffb7ff;\n    *(unsigned_integer *)(*data + 0x14) = *(unsigned_integer *)(*data + 0x14) & 0xffffffd5;\n    *(unsigned_integer *)(*data + 0xc) = *(unsigned_integer *)(*data + 0xc) | 0x2000;\n    counter = 0;\n    *(unspecified *)((int)data + 0x39) = 0x20;\n    *(unspecified *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_data_0800441a",
            "entrypoint": "0x0800441a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800441a": "initialize_data_0800441a",
                "calculate_values_08004204": "calculate_values",
                "calculate_values_08004204(param_1)": "calculate_values",
                "char": "character",
                "param_1": "data",
                "param_1[0xf]": "counter",
                "uint": "unsigned_integer",
                "undefined": "unspecified"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004478": {
            "additional_data": {
                "(short *)((int)param_1 + 0x26)": {
                    "1": "short_array_2"
                },
                "(short *)(param_1 + 9)": {
                    "1": "short_array_1"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "condition"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "flag"
                },
                "FUN_08004478": {
                    "1": "decode_data",
                    "23": "process_data",
                    "5": "process_input"
                },
                "check_params_080043b4": {
                    "2": "check_parameters",
                    "4": "check_params"
                },
                "check_params_080043b4()": {
                    "1": "check_parameters"
                },
                "get_data_08001cc4": {
                    "1": "get_additional_data",
                    "5": "get_data"
                },
                "get_data_08001cc4()": {
                    "1": "get_data"
                },
                "iVar1": {
                    "1": "temp_var",
                    "21": "result",
                    "4": "return_value",
                    "5": "check_result"
                },
                "param_1": {
                    "1": "input_list",
                    "2": "input_data",
                    "3": "data_pointer",
                    "4": "data_ptr",
                    "6": "data_array",
                    "7": "input_array"
                },
                "param_2": {
                    "1": "value_ptr",
                    "2": "input_ptr",
                    "3": "input_data",
                    "5": "values"
                },
                "param_3": {
                    "1": "shorts_count",
                    "2": "length",
                    "3": "num_values",
                    "4": "data_size",
                    "5": "input_length"
                },
                "param_4": {
                    "1": "result",
                    "2": "value",
                    "5": "param4",
                    "6": "param",
                    "7": "param_4"
                },
                "uVar2": {
                    "1": "updated_value",
                    "11": "status",
                    "13": "return_value",
                    "2": "output",
                    "4": "result"
                }
            },
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "calling": [
                "FUN_080053d4"
            ],
            "code": "\nundefined4 process_data_08004478(int *input_array,ushort *values,int input_length,undefined4 param_4)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)input_array + 0x39) == ' ') {\n    if (values == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (input_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(input_array + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(input_array + 0xe) = 1;\n      input_array[0xf] = 0;\n      *(undefined *)((int)input_array + 0x39) = 0x21;\n      return_value = get_data;\n      *(short *)(input_array + 9) = (short)input_length;\n      *(short *)((int)input_array + 0x26) = (short)input_length;\n      while (*(short *)((int)input_array + 0x26) != 0) {\n        *(short *)((int)input_array + 0x26) = *(short *)((int)input_array + 0x26) + -1;\n        if (input_array[2] == 0x1000) {\n          result = check_params(input_array,0x80,0,return_value,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_array + 4) = *values & 0x1ff;\n          if (input_array[4] == 0) {\n            values = values + 1;\n          }\n          else {\n            values = (ushort *)((int)values + 1);\n          }\n        }\n        else {\n          result = check_params(input_array,0x80,0,return_value,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_array + 4) = (uint)*(byte *)values;\n          values = (ushort *)((int)values + 1);\n        }\n      }\n      result = check_params(input_array,0x40,0,return_value,param_4);\n      if (result == 0) {\n        *(undefined *)((int)input_array + 0x39) = 0x20;\n        *(undefined *)(input_array + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08004478",
            "entrypoint": "0x08004478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "check_params_080043b4": "check_params",
                "get_data_08001cc4": "get_data",
                "get_data_08001cc4()": "get_data",
                "iVar1": "result",
                "param_1": "input_array",
                "param_2": "values",
                "param_3": "input_length",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800455a": {
            "additional_data": {
                "(*(char *)((int)param_1 + 0x39)": {
                    "1": "character"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "pointer_value"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char_in_param1_offset_0x39",
                    "4": "data_char"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "char_in_param1_offset_e",
                    "3": "flag_char"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_value2",
                    "2": "updated_value3"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "short_in_param1_offset_9",
                    "2": "updated_value2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "param_1_c",
                    "4": "pointer_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "status_char_new",
                    "2": "updated_data_char"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_value",
                    "2": "updated_flag"
                },
                "*param_1": {
                    "1": "input_array[0]"
                },
                "*param_1 + 0xc": {
                    "1": "input_array[12]"
                },
                "<char>param_1+0x39": {
                    "1": "param_array[0x39]"
                },
                "<char>param_1+0xe": {
                    "1": "param_array[0xe]"
                },
                "<int>param_1+0x26": {
                    "1": "param_array[0x26]"
                },
                "<int>param_1+0x39": {
                    "1": "param_array[0x39]"
                },
                "<int>param_1+0xe": {
                    "1": "param_array[0xe]"
                },
                "FUN_0800455a": {
                    "1": "validate_parameters",
                    "3": "process_input",
                    "4": "update_data",
                    "8": "validate_input"
                },
                "char": {
                    "1": "character"
                },
                "char_1": {
                    "1": "character"
                },
                "char_2": {
                    "1": "character"
                },
                "char_param": {
                    "1": "character_param"
                },
                "configData": {
                    "1": "config_data"
                },
                "input_array": {
                    "1": "input_buffer"
                },
                "input_array+0x26": {
                    "1": "param_3_in_array_short"
                },
                "input_array+0x39": {
                    "1": "flag_after_update"
                },
                "input_array+0xe": {
                    "1": "status"
                },
                "input_array+0xf": {
                    "1": "misc"
                },
                "input_array+8": {
                    "1": "param_2_in_array"
                },
                "input_array+9": {
                    "1": "param_3_in_array"
                },
                "input_array[8]": {
                    "1": "result_array[0]"
                },
                "int": {
                    "1": "integer"
                },
                "int_1": {
                    "1": "integer"
                },
                "int_2": {
                    "1": "integer"
                },
                "newValue1": {
                    "1": "new_value1"
                },
                "newValue2": {
                    "1": "new_value2"
                },
                "param_1": {
                    "1": "config_data",
                    "10": "input_array",
                    "2": "input_data",
                    "3": "parameters",
                    "9": "data"
                },
                "param_1 + 0x26": {
                    "1": "data_length"
                },
                "param_1 + 0x39": {
                    "1": "input_array[57]"
                },
                "param_1 + 0xe": {
                    "1": "status_value"
                },
                "param_1 + 0xf": {
                    "1": "input_array[15]"
                },
                "param_1 + 9": {
                    "1": "result_array[1]"
                },
                "param_1+0xe": {
                    "1": "status_after_update"
                },
                "param_1[0xf]": {
                    "1": "result4",
                    "2": "input_array[0xf]",
                    "3": "counter"
                },
                "param_1[8]": {
                    "1": "input_data_8",
                    "2": "updated_value1",
                    "3": "input_array[8]"
                },
                "param_1[9]": {
                    "1": "data_value"
                },
                "param_2": {
                    "1": "size_of_param_1",
                    "19": "value1",
                    "2": "size",
                    "6": "value_1"
                },
                "param_2 == 0": {
                    "1": "is_size_zero"
                },
                "param_3": {
                    "1": "value_of_param_1",
                    "19": "value2",
                    "2": "value",
                    "6": "value_2"
                },
                "param_3 == 0": {
                    "1": "is_value_zero"
                },
                "short": {
                    "1": "short_integer"
                },
                "short *)((int)param_1 + 0x26)": {
                    "1": "another_short_value"
                },
                "short *)(param_1 + 9)": {
                    "1": "short_value"
                },
                "short_1": {
                    "1": "short_value"
                },
                "short_2": {
                    "1": "short_value"
                },
                "short_param": {
                    "1": "short_param"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "uint_1": {
                    "1": "unsigned_integer"
                },
                "undefined_1": {
                    "1": "undefined_value"
                },
                "undefined_2": {
                    "1": "undefined_value"
                },
                "value_1": {
                    "1": "condition_1"
                },
                "value_2": {
                    "1": "condition_2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "code": "\nundefined4 validate_input_0800455a(integer *input_array,integer value1,integer value2)\n\n{\n  if (*(character *)((integer)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(character *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value1;\n    *(short_integer *)(input_array + 9) = (short_integer)value2;\n    *(short_integer *)((integer)input_array + 0x26) = (short_integer)value2;\n    counter = 0;\n    *(undefined *)((integer)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(unsigned_integer *)(*input_array + 0xc) = *(unsigned_integer *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "validate_input_0800455a",
            "entrypoint": "0x0800455a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "char": "character",
                "int": "integer",
                "param_1": "input_array",
                "param_1[0xf]": "counter",
                "param_1[8]": "input_array[8]",
                "param_2": "value1",
                "param_3": "value2",
                "short": "short_integer",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080045a2": {
            "additional_data": {
                "*(char *)((int)data + 0x3a)": {
                    "1": "char_value"
                },
                "*(char *)((int)input_array + 0x3a)": {
                    "1": "char_at_index_58"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "char_at_index_58",
                    "2": "char_value"
                },
                "*(char *)(data + 0xe)": {
                    "1": "char_value2"
                },
                "*(char *)(input_array + 0xe)": {
                    "1": "char_at_index_14"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "input_array_flag"
                },
                "*(short *)((int)data + 0x2e)": {
                    "1": "short_value2"
                },
                "*(short *)((int)input_array + 0x2e)": {
                    "1": "short_at_index_46"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "short_value_at_0x2e",
                    "2": "array_element3"
                },
                "*(short *)(data + 0xb)": {
                    "1": "short_value"
                },
                "*(short *)(input_array + 0xb)": {
                    "1": "short_at_index_11"
                },
                "*(short *)(param_1 + 0xb)": {
                    "1": "short_at_index_11",
                    "2": "input_array[11]"
                },
                "*(uint *)(*data + 0x14)": {
                    "1": "uint_value2"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "uint_value1"
                },
                "*(uint *)(*input_array + 0x14)": {
                    "1": "uint_at_index_20"
                },
                "*(uint *)(*input_array + 0xc)": {
                    "1": "uint_at_index_12"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "data_pointer_14",
                    "3": "pointer_value2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value1",
                    "3": "pointer_value1"
                },
                "*(undefined *)((int)data + 0x3a)": {
                    "1": "undefined_value"
                },
                "*(undefined *)((int)input_array + 0x3a)": {
                    "1": "undefined_at_index_58"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "input_array_modified_value"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "undefined_value2"
                },
                "*(undefined *)(input_array + 0xe)": {
                    "1": "undefined_at_index_14"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_value"
                },
                "*data_array + 0x14": {
                    "1": "flag_2"
                },
                "*data_array + 0xc": {
                    "1": "flag_1"
                },
                "*param_1": {
                    "1": "first_element_value"
                },
                "0x14": {
                    "1": "mask2"
                },
                "0x20": {
                    "1": "mask3"
                },
                "0x22": {
                    "1": "new_char_value"
                },
                "0x2e": {
                    "1": "short_value2"
                },
                "0x3a": {
                    "1": "char_value"
                },
                "0xb": {
                    "1": "array_index2"
                },
                "0xc": {
                    "1": "mask1"
                },
                "0xe": {
                    "1": "char_index"
                },
                "0xf": {
                    "1": "value_index"
                },
                "10": {
                    "1": "array_index1"
                },
                "FUN_080045a2": {
                    "1": "update_data",
                    "15": "validate_input",
                    "2": "validate_data",
                    "3": "process_data"
                },
                "array": {
                    "1": "input_array"
                },
                "char": {
                    "1": "char_value"
                },
                "char_1": {
                    "1": "flag"
                },
                "char_2": {
                    "1": "space_character"
                },
                "data": {
                    "1": "ptr_data"
                },
                "data_array": {
                    "1": "data"
                },
                "data_array + 0x2e": {
                    "1": "updated_value_2"
                },
                "data_array + 0x3a": {
                    "1": "character"
                },
                "data_array + 0xb": {
                    "1": "updated_value_1"
                },
                "data_array + 0xe": {
                    "1": "flag"
                },
                "data_array + 0xf": {
                    "1": "counter"
                },
                "input + 0x3a": {
                    "1": "third_char"
                },
                "inputArray": {
                    "1": "input_array"
                },
                "inputArray + 0x2e": {
                    "1": "another_short_value"
                },
                "inputArray + 0xb": {
                    "1": "short_value"
                },
                "inputArray + 0xe": {
                    "1": "array_item"
                },
                "inputArray + 0xf": {
                    "1": "counter"
                },
                "inputData": {
                    "1": "input_data"
                },
                "input_array": {
                    "1": "array"
                },
                "input_array[10]": {
                    "1": "array_length"
                },
                "input_array[11]": {
                    "1": "value_length"
                },
                "input_array[14]": {
                    "1": "flag"
                },
                "input_array[15]": {
                    "1": "status"
                },
                "input_buffer": {
                    "1": "buf"
                },
                "length": {
                    "1": "buf_length"
                },
                "param2": {
                    "1": "param2"
                },
                "param3": {
                    "1": "param3"
                },
                "param_1": {
                    "1": "input_pointer",
                    "12": "input_array",
                    "3": "data_array",
                    "4": "array",
                    "5": "data"
                },
                "param_1 + 0x2e": {
                    "1": "short_value2"
                },
                "param_1 + 0xb": {
                    "1": "short_value1"
                },
                "param_1 + 0xe": {
                    "1": "input_array_element"
                },
                "param_1[0xf]": {
                    "1": "parameter15",
                    "2": "array_element4",
                    "3": "input_array[15]"
                },
                "param_1[10]": {
                    "1": "data[10]",
                    "2": "array_element1",
                    "5": "input_array[10]"
                },
                "param_1[11]": {
                    "1": "values[11]"
                },
                "param_1[14]": {
                    "1": "values[14]"
                },
                "param_2": {
                    "1": "_value1",
                    "15": "value1",
                    "2": "size",
                    "4": "value_1",
                    "5": "length"
                },
                "param_3": {
                    "1": "length",
                    "15": "value2",
                    "4": "value_2",
                    "5": "value"
                },
                "short": {
                    "1": "short_value"
                },
                "size": {
                    "1": "size_variable"
                },
                "uint_1": {
                    "1": "flag_value1"
                },
                "uint_2": {
                    "1": "flag_value2"
                },
                "uint_3": {
                    "1": "flag_value3"
                },
                "value": {
                    "1": "buf_value"
                },
                "value1": {
                    "1": "some_value",
                    "2": "length"
                },
                "value2": {
                    "1": "new_value2",
                    "2": "size"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "code": "\nundefined4 validate_input_080045a2(int *input_array,int value1,int value2)\n\n{\n  if (*(char_value *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char_value *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short_value *)(input_array + 0xb) = (short_value)value2;\n    *(short_value *)((int)input_array + 0x2e) = (short_value)value2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "validate_input_080045a2",
            "entrypoint": "0x080045a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "char": "char_value",
                "param_1": "input_array",
                "param_1[0xf]": "input_array[15]",
                "param_1[10]": "input_array[10]",
                "param_2": "value1",
                "param_3": "value2",
                "short": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080045fe": {
            "additional_data": {
                "(int)param_1 + 0x39": {
                    "1": "param_offset"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value1",
                    "2": "value_to_modify",
                    "3": "value"
                },
                "*(uint *)(*valuePtr + 0xc)": {
                    "1": "value_to_modify"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag_value",
                    "3": "status"
                },
                "*(undefined *)((int)valuePtr + 0x39)": {
                    "1": "new_value"
                },
                "*param_1": {
                    "1": "value",
                    "2": "flag_value"
                },
                "0x20": {
                    "1": "new_value"
                },
                "0x39": {
                    "1": "flag_offset",
                    "2": "constant"
                },
                "0xc": {
                    "1": "value_offset",
                    "2": "offset"
                },
                "0xffffffbf": {
                    "1": "bit_clear_mask",
                    "3": "bit_mask"
                },
                "FUN_080045fe": {
                    "1": "update_settings",
                    "3": "set_flag_and_process_value",
                    "4": "update_value_and_process",
                    "9": "update_value"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_data",
                    "3": "input",
                    "4": "value_pointer",
                    "9": "value_ptr"
                },
                "param_1[0]": {
                    "1": "value_ptr[0]"
                },
                "process_value_08005604": {
                    "16": "process_value"
                },
                "process_value_08005604()": {
                    "1": "perform_value_processing()",
                    "2": "process_value"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "valuePtr": {
                    "1": "value"
                },
                "valuePtr[0]": {
                    "1": "value[0]"
                }
            },
            "called": [
                "FUN_08005604"
            ],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nundefined4 update_value_080045fe(integer *value_ptr)\n\n{\n  *(unsigned_integer *)(*value_ptr + 0xc) = *(unsigned_integer *)(*value_ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((integer)value_ptr + 0x39) = 0x20;\n  process_value;\n  return 0;\n}\n\n",
            "current_name": "update_value_080045fe",
            "entrypoint": "0x080045fe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080045fe": "update_value_080045fe",
                "int": "integer",
                "param_1": "value_ptr",
                "process_value_08005604": "process_value",
                "process_value_08005604()": "process_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004618": {
            "additional_data": {
                "FUN_08004618": {
                    "1": "process_input_data",
                    "2": "process_binary_data",
                    "5": "parse_string",
                    "8": "process_data"
                },
                "execute_function_080055e0": {
                    "1": "perform_action",
                    "2": "execute_additional_function"
                },
                "param_1": {
                    "1": "param",
                    "11": "data",
                    "2": "string_ptr",
                    "3": "input_data",
                    "5": "input_array"
                },
                "pbVar1": {
                    "1": "current_byte",
                    "16": "byte_ptr",
                    "4": "output_byte",
                    "9": "byte_pointer"
                },
                "puVar3": {
                    "1": "byte_ptr1",
                    "11": "undefined_ptr",
                    "2": "output_pointer",
                    "9": "undefined_pointer"
                },
                "sVar2": {
                    "1": "remaining_steps",
                    "11": "counter",
                    "2": "value",
                    "3": "remaining_count",
                    "7": "count"
                }
            },
            "called": [
                "FUN_080055e0"
            ],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nundefined4 process_data_08004618(int *data)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefined_ptr = (undefined *)data[10];\n    data[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)data[10];\n    data[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_additional_function();\n  return 0;\n}\n\n",
            "current_name": "process_data_08004618",
            "entrypoint": "0x08004618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "execute_function_080055e0": "execute_additional_function",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "puVar3": "undefined_ptr",
                "sVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046b8": {
            "additional_data": {
                "*param_1": {
                    "1": "param"
                },
                "FUNC_08005650": {
                    "1": "finalize_processing",
                    "3": "cleanup"
                },
                "FUN_080046b8": {
                    "14": "process_data",
                    "4": "process_and_update_data",
                    "5": "process_input",
                    "8": "process_flags"
                },
                "LAB_080047d8_1": {
                    "1": "label_1",
                    "2": "label"
                },
                "clear_flags_0800417c": {
                    "5": "clear_flags"
                },
                "iVar1": {
                    "1": "status",
                    "26": "result",
                    "3": "return_value"
                },
                "initialize_data_0800258c": {
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "flag_data",
                    "12": "data",
                    "2": "flags",
                    "3": "data_ptr",
                    "8": "input_data"
                },
                "process_data_08004198": {
                    "1": "handle_case2",
                    "2": "process_data_2"
                },
                "process_data_08004618": {
                    "1": "process_data_case_1",
                    "2": "process_data_1"
                },
                "puVar3": {
                    "1": "pointer_3",
                    "2": "pointer",
                    "3": "ptr_data",
                    "4": "data",
                    "5": "data_ptr",
                    "9": "ptr"
                },
                "puVar6": {
                    "1": "ptr"
                },
                "uVar1": {
                    "1": "flags"
                },
                "uVar2": {
                    "1": "flag_3",
                    "2": "flag2",
                    "3": "flag_value",
                    "4": "value_2",
                    "6": "value1"
                },
                "uVar3": {
                    "1": "temp"
                },
                "uVar4": {
                    "1": "flag2",
                    "2": "flag4",
                    "3": "var4",
                    "5": "value2",
                    "8": "flag"
                },
                "uVar5": {
                    "1": "flag_value",
                    "2": "flag_mask",
                    "3": "value1",
                    "5": "value3"
                },
                "update_value_080045fe": {
                    "5": "update_value"
                }
            },
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "calling": [],
            "code": "\nvoid process_data_080046b8(uint **data)\n\n{\n  int result;\n  uint value1;\n  uint *ptr;\n  uint flag;\n  uint value3;\n  \n  ptr = *data;\n  value3 = *ptr;\n  value1 = ptr[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    process_data_080046b8_1(data);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((flag = ptr[5] & 1, flag == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      process_data_080046b8_2(data);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      update_value(data);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value3 & 4) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value3 & 2) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value3 & 8) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        process_data_080046b8_1(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08005650(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_flags(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08005650(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_08005650(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&label;\n      result = initialize_data(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080046b8",
            "entrypoint": "0x080046b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "LAB_080047d8_1": "label",
                "clear_flags_0800417c": "clear_flags",
                "iVar1": "result",
                "initialize_data_0800258c": "initialize_data",
                "param_1": "data",
                "process_data_08004198": "process_data_2",
                "process_data_08004618": "process_data_1",
                "puVar3": "ptr",
                "uVar2": "value1",
                "uVar3": "temp",
                "uVar4": "flag",
                "uVar5": "value3",
                "update_value_080045fe": "update_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047e8": {
            "additional_data": {
                "(param_1 + 0x39)": {
                    "1": "byte_offset2"
                },
                "(param_1 + 0x3a)": {
                    "1": "byte1"
                },
                "*(byte *)(param_1 + 0x39)": {
                    "1": "byte_two",
                    "8": "byte2"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "1": "first_byte",
                    "8": "byte1"
                },
                "*(byte *)param_1": {
                    "1": "byte_value1"
                },
                "0x39": {
                    "4": "offset2"
                },
                "0x3a": {
                    "4": "offset1"
                },
                "FUN_080047e8": {
                    "31": "combine_bytes"
                },
                "byte": {
                    "1": "result",
                    "3": "combined_byte"
                },
                "param_1": {
                    "1": "start_address",
                    "15": "input",
                    "2": "base_address",
                    "5": "offset",
                    "6": "address"
                },
                "param_1 + 0x39": {
                    "1": "address2"
                },
                "param_1 + 0x3a": {
                    "1": "address1"
                },
                "param_2": {
                    "1": "size"
                },
                "typedef byte __uint8_t": {
                    "1": ""
                },
                "var_1": {
                    "1": "first_byte"
                },
                "var_2": {
                    "1": "byte2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "code": "\ncombined_byte combine_bytes_080047e8(int input)\n\n{\n  return *(combined_byte *)(input + 0x3a) | *(combined_byte *)(input + 0x39);\n}\n\n",
            "current_name": "combine_bytes_080047e8",
            "entrypoint": "0x080047e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "byte": "combined_byte",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047f4": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "&1": {
                    "1": "bit_mask"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_mask"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "target_value"
                },
                "<<0x18)": {
                    "1": "shifted_index"
                },
                ">>": {
                    "1": "right_shift"
                },
                ">>0x1c)": {
                    "1": "shifted_index_right"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "FUN_080047f4": {
                    "1": "retrieve_bit_at_index",
                    "2": "bit_extraction",
                    "3": "retrieve_bit",
                    "9": "get_bit_value"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "param_1": {
                    "1": "bit_result",
                    "12": "value",
                    "2": "bit_position",
                    "4": "input_value",
                    "5": "index"
                },
                "param_2": {
                    "1": "base_pointer",
                    "3": "array_ptr",
                    "4": "base_address",
                    "7": "address"
                },
                "param_3": {
                    "2": "shift_amount"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "code": "\nunsigned_integer get_bit_value_080047f4(unsigned_integer value,int address)\n\n{\n  return *(unsigned_integer *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value bitwise_and 0xf) bitwise_and 1;\n}\n\n",
            "current_name": "get_bit_value_080047f4",
            "entrypoint": "0x080047f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_080047f4": "get_bit_value_080047f4",
                "param_1": "value",
                "param_2": "address",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800480a": {
            "additional_data": {
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "target_address"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_to_set"
                },
                "FUN_0800480a": {
                    "1": "update_bit_value",
                    "14": "set_bit_in_array",
                    "2": "update_bit_in_array",
                    "3": "update_bit"
                },
                "param_1": {
                    "1": "position",
                    "13": "bit_position",
                    "3": "index",
                    "4": "value",
                    "5": "bit_index"
                },
                "param_2": {
                    "1": "array_addr",
                    "12": "array",
                    "2": "memory_address",
                    "4": "array_pointer",
                    "7": "array_address"
                },
                "uVar1": {
                    "1": "word_offset",
                    "2": "shifted_bit_position",
                    "3": "array_index",
                    "5": "index",
                    "8": "shifted_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nvoid set_bit_in_array_0800480a(uint bit_position,int array)\n\n{\n  uint shifted_index;\n  \n  shifted_index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + shifted_index * 4) = *(uint *)(array + shifted_index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_0800480a",
            "entrypoint": "0x0800480a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "shifted_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004828": {
            "additional_data": {
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "array[index]"
                },
                "FUN_08004828": {
                    "1": "set_bit_in_array",
                    "2": "update_value_in_array",
                    "3": "update_bit_value",
                    "6": "update_bit_in_array",
                    "7": "update_bit"
                },
                "param_1": {
                    "1": "data_index",
                    "10": "value",
                    "11": "bit_position",
                    "3": "input_value",
                    "4": "bit_index"
                },
                "param_1 & 0x0f": {
                    "1": "bit_offset"
                },
                "param_1 & 0xf": {
                    "1": "bit_position"
                },
                "param_2": {
                    "1": "memory_offset",
                    "11": "array",
                    "2": "bit_array",
                    "3": "memory_address",
                    "7": "array_address"
                },
                "uVar1": {
                    "1": "bit_mask_position",
                    "2": "array_index",
                    "4": "shifted_index",
                    "8": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nvoid update_bit_08004828(uint bit_position,int array)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "current_name": "update_bit_08004828",
            "entrypoint": "0x08004828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004848": {
            "additional_data": {
                "0": {
                    "1": "base",
                    "2": "memory_address_1",
                    "4": "memory_address_0"
                },
                "1": {
                    "1": "map_param_1",
                    "2": "address1",
                    "4": "memory_address_1"
                },
                "2": {
                    "1": "addr_3",
                    "2": "memory_address_3",
                    "4": "memory_address_2"
                },
                "3": {
                    "1": "address4",
                    "2": "memory_address_4",
                    "4": "memory_address_3"
                },
                "4": {
                    "1": "base_address_5",
                    "2": "address4",
                    "4": "memory_address_4"
                },
                "FUN_08004848": {
                    "1": "map_param_to_address",
                    "2": "map_parameter_value",
                    "25": "get_memory_address"
                },
                "case 0": {
                    "1": "return_address1",
                    "2": "return_address_0"
                },
                "case 1": {
                    "1": "return_address2",
                    "2": "return_address_1"
                },
                "case 2": {
                    "1": "return_address3",
                    "2": "return_address_2"
                },
                "case 3": {
                    "1": "return_address4",
                    "2": "return_address_3"
                },
                "case 4": {
                    "1": "return_address5",
                    "2": "return_address_4"
                },
                "default": {
                    "1": "param_value_other"
                },
                "param_1": {
                    "1": "index",
                    "14": "input",
                    "2": "memory_index",
                    "4": "param",
                    "5": "value"
                },
                "return": {
                    "1": "address",
                    "2": "memory_address"
                },
                "return_value": {
                    "2": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "code": "\nundefined4 get_memory_address_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    memory_address 0x40010800;\n  case 1:\n    memory_address 0x40010c00;\n  case 2:\n    memory_address 0x40011000;\n  case 3:\n    memory_address 0x40011400;\n  case 4:\n    memory_address 0x40011800;\n  param_value_other:\n    memory_address 0;\n  }\n}\n\n",
            "current_name": "get_memory_address_08004848",
            "entrypoint": "0x08004848",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "default": "param_value_other",
                "param_1": "input",
                "return": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004884": {
            "additional_data": {
                "FUN_08004884": {
                    "1": "set_memory_access_flags",
                    "2": "set_flag_and_return_address",
                    "3": "set_memory_access"
                },
                "_DAT_40021018": {
                    "1": "configuration_flag"
                },
                "param_1": {
                    "1": "option",
                    "2": "flag_number",
                    "3": "peripheral_index",
                    "5": "flag"
                },
                "uVar1": {
                    "1": "output",
                    "2": "result",
                    "3": "base_address",
                    "7": "new_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "code": "\n\n\nundefined4 update_register_value_08004884(undefined4 flag)\n\n{\n  undefined4 return_value;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    return_value = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    return_value = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    return_value = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    return_value = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    return_value = 0x40011800;\n    break;\n  default:\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_register_value_08004884",
            "entrypoint": "0x08004884",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004884": "update_register_value_08004884",
                "param_1": "flag",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800492c": {
            "additional_data": {
                "FUN_0800492c": {
                    "1": "convert_value_to_index",
                    "2": "find_value_and_shift_bits",
                    "3": "get_shifted_value"
                },
                "iVar1": {
                    "1": "search_result",
                    "10": "found_value",
                    "14": "result",
                    "4": "found_index"
                },
                "param_1": {
                    "1": "input1",
                    "2": "arg1",
                    "3": "value1",
                    "4": "input_param",
                    "8": "value",
                    "9": "input_value"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "arg2",
                    "3": "value2",
                    "5": "unused_param"
                },
                "param_3": {
                    "1": "data_param_1",
                    "2": "arg3",
                    "3": "param_3",
                    "5": "array"
                },
                "param_4": {
                    "1": "unused_param_3",
                    "2": "arg4",
                    "3": "size",
                    "4": "param_4"
                },
                "uVar2": {
                    "1": "converted_value",
                    "2": "extracted_value",
                    "20": "shifted_value",
                    "7": "shifted_result"
                }
            },
            "called": [
                "FUN_08004cce"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nuint get_shifted_value_0800492c(undefined4 input_value,undefined4 unused_param,undefined4 array,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = find_value_or_negative_08004cce(input_value,&DAT_08007400,array,param_4,param_4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "current_name": "get_shifted_value_0800492c",
            "entrypoint": "0x0800492c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800492c": "get_shifted_value_0800492c",
                "iVar1": "result",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "array",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004948": {
            "additional_data": {
                "FUN_08004948": {
                    "1": "find_boundary_value",
                    "2": "find_result",
                    "3": "find_value_and_return_offset",
                    "4": "find_value"
                },
                "iVar1": {
                    "1": "value_offset",
                    "20": "result",
                    "3": "found_value"
                },
                "param_1": {
                    "1": "input_array",
                    "12": "input_value",
                    "13": "value"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "unknown_param",
                    "9": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "11": "param_3",
                    "2": "param3",
                    "3": "start_index"
                },
                "param_4": {
                    "1": "value4",
                    "13": "param_4",
                    "2": "data3",
                    "3": "end_index"
                },
                "uVar2": {
                    "1": "type_flag",
                    "16": "shifted_value",
                    "8": "shifted_result"
                }
            },
            "called": [
                "FUN_08004cce"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 find_value_08004948(undefined4 value,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = find_value_08004948_or_negative_08004cce(value,&DAT_080074b4,param_3,param_4,param_4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "current_name": "find_value_08004948",
            "entrypoint": "0x08004948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004948": "find_value_08004948",
                "iVar1": "result",
                "param_1": "value",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004974": {
            "additional_data": {
                "DAT_20000080": {
                    "1": "data_1"
                },
                "FUN_08004974": {
                    "1": "update_register_setting",
                    "15": "update_registers",
                    "2": "update_register_flags",
                    "3": "update_register_value"
                },
                "iVar3": {
                    "1": "start_value",
                    "2": "original_value",
                    "3": "input_value",
                    "6": "register_value",
                    "7": "current_value"
                },
                "local_10": {
                    "1": "variable2",
                    "2": "offset",
                    "3": "register_offset",
                    "6": "constant_0"
                },
                "local_14": {
                    "1": "variable1",
                    "2": "num_iterations",
                    "3": "constant1",
                    "5": "constant_1",
                    "6": "register_count"
                },
                "local_18": {
                    "1": "bits_to_update",
                    "10": "bitmask",
                    "14": "bit_mask",
                    "2": "register_mask"
                },
                "param_1": {
                    "1": "input_pointer",
                    "11": "register_value",
                    "2": "register_data",
                    "3": "register_pointer"
                },
                "param_2": {
                    "1": "data_value",
                    "13": "value",
                    "2": "register_param",
                    "3": "flag_value",
                    "4": "param_value"
                },
                "uVar1": {
                    "1": "reg_value",
                    "11": "updated_register_value",
                    "18": "updated_value"
                },
                "uVar2": {
                    "1": "updated_register",
                    "2": "flag_value",
                    "3": "register_flag",
                    "5": "register_flags"
                },
                "update_register_value_08004884": {
                    "1": "update_register_value_helper",
                    "3": "update_register_value"
                },
                "update_registers_08002624": {
                    "2": "update_registers"
                }
            },
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "calling": [
                "FUN_0800213c"
            ],
            "code": "\n\n\nvoid update_registers_08004974(int *register_value,undefined4 value)\n\n{\n  undefined4 updated_value;\n  uint register_flags;\n  int current_value;\n  uint bit_mask;\n  undefined4 register_count;\n  undefined4 constant_0;\n  \n  current_value = *register_value;\n  if (current_value == 0x40012400) {\n    register_flags = _DAT_40021018 | 0x200;\n    current_value = 0x200;\n    _DAT_40021018 = register_flags;\n  }\n  else {\n    register_flags = 0x40012800;\n    if (current_value == 0x40012800) {\n      register_flags = _DAT_40021018 | 0x400;\n      current_value = 0x400;\n      _DAT_40021018 = register_flags;\n    }\n  }\n  updated_value = update_register_value((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,value,register_flags,current_value);\n  bit_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  register_count = 3;\n  constant_0 = 0;\n  update_registers_08004974(updated_value,&bit_mask);\n  return;\n}\n\n",
            "current_name": "update_registers_08004974",
            "entrypoint": "0x08004974",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004974": "update_registers_08004974",
                "iVar3": "current_value",
                "local_10": "constant_0",
                "local_14": "register_count",
                "local_18": "bit_mask",
                "param_1": "register_value",
                "param_2": "value",
                "uVar1": "updated_value",
                "uVar2": "register_flags",
                "update_register_value_08004884": "update_register_value",
                "update_registers_08002624": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049f0": {
            "additional_data": {
                "*param_1": {
                    "1": "config_value",
                    "4": "register_value"
                },
                "0x40012400": {
                    "1": "mask_constant_1"
                },
                "0x40012800": {
                    "1": "masked_bit_2"
                },
                "0xfffffbff": {
                    "1": "mask1"
                },
                "0xfffffdff": {
                    "1": "clear_bit9_mask"
                },
                "FUN_080049f0": {
                    "1": "update_permissions",
                    "2": "update_settings",
                    "4": "update_register_values",
                    "6": "update_control_registers"
                },
                "_DAT_4002100c": {
                    "1": "flag_value1",
                    "3": "register_a",
                    "9": "register1"
                },
                "_DAT_40021018": {
                    "1": "mem_control_reg2",
                    "3": "control_register2",
                    "9": "register2"
                },
                "param_1": {
                    "1": "status_value",
                    "2": "memory_address",
                    "3": "address",
                    "9": "register_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800224c"
            ],
            "code": "\n\n\nvoid update_control_registers_080049f0(int *register_value)\n\n{\n  if (*register_value != 0x40012400) {\n    if (*register_value == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "current_name": "update_control_registers_080049f0",
            "entrypoint": "0x080049f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049f0": "update_control_registers_080049f0",
                "param_1": "register_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "additional_data": {
                "DAR_20000080": {
                    "1": "param_2"
                },
                "DAT_08007400": {
                    "2": "memory_data"
                },
                "DAT_20000080": {
                    "1": "input_param",
                    "2": "input_data",
                    "4": "memory_value"
                },
                "FUN_08004a4c": {
                    "1": "find_offset_value",
                    "2": "process_and_update_data",
                    "3": "process_data"
                },
                "iVar1": {
                    "1": "update_result",
                    "3": "result_code",
                    "7": "result"
                },
                "local_10": {
                    "1": "reg_value2",
                    "2": "var8",
                    "3": "register_5"
                },
                "local_1c": {
                    "1": "register5",
                    "2": "temp7",
                    "5": "constant_value"
                },
                "local_20": {
                    "1": "constant_value_3",
                    "2": "temp6",
                    "3": "register_7"
                },
                "local_24": {
                    "1": "register_5",
                    "2": "reg4",
                    "3": "temp_4",
                    "8": "register_4"
                },
                "local_28": {
                    "1": "register_4",
                    "2": "temp4",
                    "3": "register_6"
                },
                "local_2c": {
                    "1": "data_reg3",
                    "2": "reg_value_3",
                    "3": "temp_3",
                    "9": "register_3"
                },
                "local_30": {
                    "1": "reg_value2",
                    "2": "register2",
                    "3": "var2",
                    "9": "register_2"
                },
                "local_34": {
                    "1": "register_value",
                    "2": "temp1",
                    "3": "temp_1",
                    "9": "register_1"
                },
                "local_38": {
                    "1": "result",
                    "14": "found_value",
                    "4": "value",
                    "6": "value_or_zero"
                },
                "local_3c": {
                    "1": "config2",
                    "2": "config_flag_2",
                    "3": "data_value",
                    "4": "flag2",
                    "5": "config_value_2",
                    "6": "flag_2"
                },
                "local_40": {
                    "1": "config_flag_1",
                    "2": "config_value",
                    "3": "config_value1",
                    "4": "flag1",
                    "5": "config_value_1",
                    "6": "flag_1"
                },
                "local_44": {
                    "2": "shift_value",
                    "25": "shifted_value",
                    "4": "value"
                },
                "local_46": {
                    "1": "result_value",
                    "18": "result",
                    "5": "offset_value",
                    "7": "output_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_parameter",
                    "23": "input_value",
                    "4": "input_param"
                },
                "uVar2": {
                    "1": "memory_check",
                    "15": "memory_value",
                    "2": "memory_value_check"
                }
            },
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "calling": [
                "FUN_08005754"
            ],
            "code": "\nundefined2 process_data_08004a4c(undefined4 input_value)\n\n{\n  int result;\n  uint memory_value;\n  undefined2 result;\n  uint shifted_value;\n  undefined4 flag_1;\n  undefined4 flag_2;\n  int found_value;\n  undefined4 register_1;\n  undefined4 register_2;\n  undefined4 register_3;\n  undefined4 register_6;\n  undefined4 register_4;\n  undefined4 register_7;\n  undefined4 constant_value;\n  undefined4 register_5;\n  \n  fill_memory_080061e0(&found_value,0,0x30);\n  shifted_value = 0;\n  flag_1 = 0;\n  flag_2 = 0;\n  result = 0;\n  found_value = find_value_or_zero_08004c78(input_value,&DAT_08007400);\n  if (found_value == 0) {\n    result = 0;\n  }\n  else {\n    register_1 = 0;\n    register_2 = 0;\n    register_3 = 0;\n    register_4 = 0;\n    constant_value = 0xe0000;\n    register_5 = 0;\n    register_6 = 1;\n    register_7 = 0;\n    DAT_20000080 = (undefined)input_value;\n    result = update_registers_0800213c(&found_value);\n    if (result == 0) {\n      shifted_value = get_shifted_value_0800492c(input_value);\n      if (shifted_value < 0x12) {\n        flag_1 = 1;\n        flag_2 = 2;\n        result = update_configuration_08001e48(&found_value,&shifted_value);\n        if (result == 0) {\n          result = process_data_08004a4c_08002384(&found_value);\n          if (result == 0) {\n            result = initialize_data_processing_08002004(&found_value);\n            if (result == 0) {\n              result = process_data_08004a4c_08001cd0(&found_value,10);\n              if (result == 0) {\n                memory_value = get_memory_value_08001f80(&found_value);\n                if ((memory_value & 0x200) != 0) {\n                  result = get_offset_value_08001e40(&found_value);\n                }\n                result = check_and_update_data_08002348(&found_value);\n                if (result == 0) {\n                  result = update_data_0800224c(&found_value);\n                  if (result != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08004a4c",
            "entrypoint": "0x08004a4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a4c": "process_data_08004a4c",
                "iVar1": "result",
                "local_10": "register_5",
                "local_1c": "constant_value",
                "local_20": "register_7",
                "local_24": "register_4",
                "local_28": "register_6",
                "local_2c": "register_3",
                "local_30": "register_2",
                "local_34": "register_1",
                "local_38": "found_value",
                "local_3c": "flag_2",
                "local_40": "flag_1",
                "local_44": "shifted_value",
                "local_46": "result",
                "param_1": "input_value",
                "uVar2": "memory_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b34": {
            "additional_data": {
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08004b34": {
                    "15": "initialize_registers",
                    "16": "update_registers"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name_2"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "param_1": {
                    "1": "register_update_param"
                },
                "update_registers_08004d90": {
                    "1": "update_registers_impl",
                    "29": "update_registers"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_08004d90"
            ],
            "calling": [
                "FUN_08003ed8"
            ],
            "code": "\nvoid update_registers_08004b34(void)\n\n{\n  update_registers_08004b34();\n  return;\n}\n\n",
            "current_name": "update_registers_08004b34",
            "entrypoint": "0x08004b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b34": "update_registers_08004b34",
                "update_registers_08004d90": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "additional_data": {
                "&DAT_080074b4": {
                    "1": "data_array_1"
                },
                "0": {
                    "1": "no_result"
                },
                "0x100000": {
                    "1": "bitwise_flag"
                },
                "0x18": {
                    "1": "result_18"
                },
                "0xc": {
                    "1": "result_c"
                },
                "4": {
                    "1": "result_4"
                },
                "8": {
                    "1": "result_8"
                },
                "DAT_080074b4": {
                    "1": "data_container"
                },
                "FUN_08004b3c": {
                    "1": "analyze_and_update_values",
                    "5": "update_values",
                    "7": "process_binary_data"
                },
                "find_value_08004948": {
                    "10": "find_value",
                    "2": "find_specific_value"
                },
                "find_value_or_negative_08004cce": {
                    "4": "find_negative_value",
                    "8": "find_value_or_negative"
                },
                "find_value_or_zero_08004c78": {
                    "1": "find_non_negative_value",
                    "3": "find_nonzero_value",
                    "8": "find_value_or_zero"
                },
                "iVar1": {
                    "1": "value1",
                    "2": "value_code",
                    "4": "result",
                    "5": "value_type"
                },
                "local_50": {
                    "1": "result_array",
                    "15": "values_array",
                    "4": "found_values",
                    "9": "values"
                },
                "local_50[0]": {
                    "1": "value_0"
                },
                "param_1": {
                    "1": "param",
                    "12": "input_data",
                    "2": "data",
                    "3": "input",
                    "5": "input_value",
                    "6": "input_param"
                },
                "uVar2": {
                    "1": "value2",
                    "2": "result",
                    "7": "negative_value"
                },
                "update_and_check_values_080040b0": {
                    "1": "update_and_check",
                    "11": "update_and_check_values"
                },
                "update_bitwise_values_0800412c": {
                    "1": "update_bitwise",
                    "11": "update_bitwise_values"
                },
                "update_registers_08003ed8": {
                    "12": "update_registers"
                }
            },
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nvoid process_binary_data_08004b3c(undefined4 input_data)\n\n{\n  int value_type;\n  uint negative_value;\n  int values_array [17];\n  \n  value_0 = find_value_or_zero(input_data,&DAT_080074b4);\n  if ((value_0 != 0) &&\n     ((((value_type = find_value(input_data), value_type == 0 || (value_type == 4)) || (value_type == 8)) ||\n      ((value_type == 0xc || (value_type == 0x18)))))) {\n    negative_value = find_value_or_negative(input_data,&DAT_080074b4);\n    if ((negative_value & 0x100000) == 0) {\n      update_and_check_values(values_array,value_type);\n    }\n    else {\n      update_bitwise_values(values_array,value_type);\n    }\n    update_registers(values_array);\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_data_08004b3c",
            "entrypoint": "0x08004b3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b3c": "process_binary_data_08004b3c",
                "find_value_08004948": "find_value",
                "find_value_or_negative_08004cce": "find_value_or_negative",
                "find_value_or_zero_08004c78": "find_value_or_zero",
                "iVar1": "value_type",
                "local_50": "values_array",
                "local_50[0]": "value_0",
                "param_1": "input_data",
                "uVar2": "negative_value",
                "update_and_check_values_080040b0": "update_and_check_values",
                "update_bitwise_values_0800412c": "update_bitwise_values",
                "update_registers_08003ed8": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b94": {
            "additional_data": {
                "FUN_08004b94": {
                    "1": "get_data",
                    "30": "initialize_data"
                },
                "get_data_08001cc4": {
                    "1": "fetch_and_process_data",
                    "2": "load_data",
                    "24": "fetch_data",
                    "3": "retrieve_data"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_080058e0"
            ],
            "code": "\nvoid initialize_data_08004b94(void)\n\n{\n  fetch_data();\n  return;\n}\n\n",
            "current_name": "initialize_data_08004b94",
            "entrypoint": "0x08004b94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b94": "initialize_data_08004b94",
                "get_data_08001cc4": "fetch_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "called": [],
            "calling": [
                "FUN_08004b9e"
            ],
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004b9c",
            "entrypoint": "0x08004b9c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004b9e": {
            "additional_data": {
                "FUNC_08004b9c": {
                    "1": "execute_sub_function",
                    "2": "additional_function",
                    "4": "execute_function",
                    "7": "perform_additional_tasks"
                },
                "FUN_08004b9e": {
                    "1": "execute_process",
                    "3": "perform_initialization",
                    "6": "initialize_system",
                    "9": "execute_program"
                },
                "calculate_sum_08001cac": {
                    "30": "calculate_sum"
                },
                "execute_initialization_08002582": {
                    "10": "initialize_execution",
                    "13": "execute_initialization",
                    "2": "initialize_system",
                    "3": "initialize_program"
                }
            },
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "calling": [],
            "code": "\nvoid execute_program_08004b9e(void)\n\n{\n  calculate_sum();\n  execute_initialization();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "current_name": "execute_program_08004b9e",
            "entrypoint": "0x08004b9e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b9e": "execute_program_08004b9e",
                "calculate_sum_08001cac": "calculate_sum",
                "execute_initialization_08002582": "execute_initialization"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "additional_data": {
                "FUN_08004bb0": {
                    "1": "update_register_value",
                    "17": "update_registers",
                    "2": "initialize_register"
                },
                "_DAT_40010004": {
                    "1": "register_2"
                },
                "_DAT_40021018": {
                    "1": "register_1"
                },
                "local_14": {
                    "1": "local_var_3",
                    "13": "constant_value",
                    "4": "local_variable",
                    "7": "constant"
                },
                "local_18": {
                    "1": "param_3_updated",
                    "2": "register_value_4",
                    "3": "register2",
                    "4": "local_param_3",
                    "5": "local_param3"
                },
                "local_1c": {
                    "1": "local_param_a",
                    "2": "register_value_3",
                    "3": "register1",
                    "4": "local_param_2",
                    "5": "local_param2"
                },
                "local_20": {
                    "1": "bit_shifted_value",
                    "18": "bit_mask",
                    "2": "mask",
                    "9": "bitmask"
                },
                "param_1": {
                    "1": "input_param",
                    "16": "input_value",
                    "2": "register",
                    "4": "register_index"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "value_1",
                    "4": "value1",
                    "5": "register_value_1",
                    "7": "param_2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "register2",
                    "2": "value_2",
                    "4": "value2",
                    "5": "register_value_2",
                    "7": "param_3",
                    "8": "param3"
                },
                "uVar1": {
                    "1": "update_result",
                    "14": "updated_value",
                    "2": "shifted_value",
                    "4": "register_value",
                    "6": "updated_register_value"
                }
            },
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\n\n\nvoid update_registers_08004bb0(uint input_value,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 updated_value;\n  uint bit_mask;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 constant_value;\n  \n  updated_value = update_register_value_08004884((input_value << 0x18) >> 0x1c);\n  bit_mask = 1 << (input_value & 0xf) & 0xffff;\n  constant_value = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((input_value - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((input_value == 0xf) || (input_value == 0x13)) || (input_value == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  local_param2 = param2;\n  local_param3 = param3;\n  update_registers_08004bb0_08002624(updated_value,&bit_mask);\n  return;\n}\n\n",
            "current_name": "update_registers_08004bb0",
            "entrypoint": "0x08004bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bb0": "update_registers_08004bb0",
                "local_14": "constant_value",
                "local_18": "local_param3",
                "local_1c": "local_param2",
                "local_20": "bit_mask",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c30": {
            "additional_data": {
                "FUN_08004c30": {
                    "1": "set_param_value_conditionally",
                    "2": "set_param_value_based_on_flag",
                    "20": "set_param_value",
                    "6": "set_param_value_based_on_condition"
                },
                "param_1": {
                    "1": "value",
                    "13": "param1",
                    "2": "param_value_1",
                    "4": "value1"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "param2",
                    "2": "param_value2",
                    "4": "value2"
                },
                "param_3": {
                    "1": "param_value3",
                    "16": "condition",
                    "4": "flag",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_value3",
                    "12": "param4",
                    "2": "data"
                },
                "set_param_value_0800281e": {
                    "1": "set_param_value_helper"
                }
            },
            "called": [
                "FUN_0800281e"
            ],
            "calling": [
                "FUN_08005848"
            ],
            "code": "\nvoid set_param_value_08004c30(undefined4 param1,undefined2 param2,int condition,undefined4 param4)\n\n{\n  if (condition == 0) {\n    set_param_value_08004c30(param1,param2,0,param4,param4);\n    return;\n  }\n  set_param_value_08004c30(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "current_name": "set_param_value_08004c30",
            "entrypoint": "0x08004c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c30": "set_param_value_08004c30",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "condition",
                "param_4": "param4",
                "set_param_value_0800281e": "set_param_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c48": {
            "additional_data": {
                "FUN_08004c48": {
                    "1": "check_bit_status",
                    "2": "check_bit",
                    "3": "perform_bit_check",
                    "5": "check_bit_wrapper",
                    "7": "check_bit_and_return"
                },
                "param_1": {
                    "1": "input1",
                    "13": "input_1",
                    "2": "input_value",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "input_2",
                    "2": "index_param",
                    "4": "flag_param"
                },
                "param_3": {
                    "1": "size_param",
                    "13": "input_3",
                    "2": "check_value_1"
                },
                "param_4": {
                    "1": "input4",
                    "13": "input_4",
                    "2": "check_value_2"
                }
            },
            "called": [
                "FUN_08002810"
            ],
            "calling": [
                "FUN_08005890"
            ],
            "code": "\nvoid check_bit_and_return_08004c48(undefined4 input_1,undefined2 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  check_bit_08002810(input_1,input_2,input_3,input_4,input_4);\n  return;\n}\n\n",
            "current_name": "check_bit_and_return_08004c48",
            "entrypoint": "0x08004c48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c48": "check_bit_and_return_08004c48",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c52": {
            "additional_data": {
                "FUN_08004c52": {
                    "1": "initialize_system_and_update_memory",
                    "2": "initialize_system",
                    "28": "initialize_system_and_memory"
                },
                "initialize_and_update_memory_08001b48": {
                    "1": "update_memory",
                    "29": "initialize_and_update_memory"
                },
                "initialize_system_08001c88": {
                    "1": "init_system",
                    "28": "initialize_system"
                }
            },
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "calling": [
                "FUN_08001c32"
            ],
            "code": "\nvoid initialize_system_and_memory_08004c52(void)\n\n{\n  initialize_system();\n  initialize_and_update_memory();\n  return;\n}\n\n",
            "current_name": "initialize_system_and_memory_08004c52",
            "entrypoint": "0x08004c52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c52": "initialize_system_and_memory_08004c52",
                "initialize_and_update_memory_08001b48": "initialize_and_update_memory",
                "initialize_system_08001c88": "initialize_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "next_element",
                    "2": "next_value",
                    "4": "found_value"
                },
                "*param_2": {
                    "1": "current_key_value",
                    "4": "current_value"
                },
                "@param_1": {
                    "1": "@value"
                },
                "@param_2": {
                    "1": "@array"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_ffffffff": {
                    "1": "end_of_pairs"
                },
                "FUN_08004c5e": {
                    "1": "find_target_value",
                    "2": "find_value_offset",
                    "4": "find_value",
                    "6": "find_value_index",
                    "9": "find_value_in_array"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_4h": {
                    "1": "next_key_value"
                },
                "int": {
                    "1": "int"
                },
                "local_1": {
                    "1": "index"
                },
                "param_1": {
                    "1": "key",
                    "13": "target_value",
                    "7": "value_to_find",
                    "9": "value"
                },
                "param_2": {
                    "1": "value_pointer",
                    "11": "array",
                    "2": "array_of_values",
                    "7": "array_ptr"
                },
                "param_2 + 0xc": {
                    "1": "next_param",
                    "2": "next_value"
                }
            },
            "called": [
                "FUN_08004c5e"
            ],
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "code": "\nundefined4 find_value_in_array_08004c5e(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "current_name": "find_value_in_array_08004c5e",
            "entrypoint": "0x08004c5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "target_value",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c78": {
            "additional_data": {
                "FUN_08004c78": {
                    "1": "check_value_and_find_in_array",
                    "12": "find_value_or_zero",
                    "2": "find_value_if_not_negative",
                    "9": "find_value_or_default"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "value",
                    "13": "input_value",
                    "2": "value_to_check",
                    "3": "value_to_find"
                },
                "uVar1": {
                    "1": "returned_value",
                    "19": "found_value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_08004c5e"
            ],
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 find_value_or_zero_08004c78(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_in_array_08004c5e();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "current_name": "find_value_or_zero_08004c78",
            "entrypoint": "0x08004c78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c78": "find_value_or_zero_08004c78",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "additional_data": {
                "*(int *)(array + 4)": {
                    "1": "current_value"
                },
                "*(int *)(param_2 + 4)": {
                    "1": "current_character_position"
                },
                "*(param_2 + 4)": {
                    "1": "array_length"
                },
                "*param_2": {
                    "1": "found_value",
                    "2": "value_at_index",
                    "5": "result"
                },
                "-1": {
                    "1": "index_not_found"
                },
                "DAT_offset_multiplier": {
                    "1": "element_size"
                },
                "FUN_08004c8a": {
                    "1": "find_value_in_list",
                    "3": "find_value_in_array",
                    "4": "find_character",
                    "6": "find_value_index",
                    "8": "find_character_index"
                },
                "PTR_current_value": {
                    "1": "current_element"
                },
                "PTR_funcc": {
                    "1": "compared_value"
                },
                "param_1": {
                    "1": "character_index",
                    "2": "target",
                    "4": "character_to_find",
                    "7": "character",
                    "8": "value"
                },
                "param_2": {
                    "1": "character_list",
                    "2": "array_ptr",
                    "7": "character_array",
                    "9": "array"
                },
                "param_2 + 0xc": {
                    "1": "next_list_item",
                    "2": "next_element",
                    "4": "next_array_element"
                },
                "param_2 + 4": {
                    "1": "current_value",
                    "3": "array_element"
                },
                "param_2+0xc": {
                    "1": "next_list_ptr"
                },
                "param_2+4": {
                    "1": "array_ptr"
                },
                "ptr_2": {
                    "1": "current_ptr"
                },
                "return": {
                    "1": "character_position"
                }
            },
            "called": [
                "FUN_08004c8a"
            ],
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "code": "\nint find_character_index_08004c8a(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      character_position -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  character_position (int)*array;\n}\n\n",
            "current_name": "find_character_index_08004c8a",
            "entrypoint": "0x08004c8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c8a": "find_character_index_08004c8a",
                "param_1": "value",
                "param_2": "array",
                "return": "character_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "find_character_index"
                },
                "FUN_08004ca2": {
                    "1": "find_character",
                    "17": "find_character_index",
                    "2": "find_character_index_or_default",
                    "3": "find_index_of_character"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "input",
                    "6": "input_value"
                },
                "uVar1": {
                    "1": "valid_index",
                    "10": "index",
                    "17": "character_index"
                }
            },
            "called": [
                "FUN_08004c8a"
            ],
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "code": "\nundefined4 find_character_index_08004ca2(int input)\n\n{\n  undefined4 character_index;\n  \n  if (input != 0) {\n    character_index = find_character_index_08004ca2_08004c8a();\n    return character_index;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "find_character_index_08004ca2",
            "entrypoint": "0x08004ca2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ca2": "find_character_index_08004ca2",
                "param_1": "input",
                "uVar1": "character_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "next_value"
                },
                "*(undefined4 *)(param_2 + 8)": {
                    "1": "value_to_return",
                    "6": "found_value"
                },
                "*param_2": {
                    "4": "current_element",
                    "7": "current_value"
                },
                "0xc": {
                    "1": "element_size"
                },
                "0xffffffff": {
                    "1": "not_found"
                },
                "8": {
                    "1": "index_offset"
                },
                "FUN_08004cb2": {
                    "1": "find_first_occurrence",
                    "10": "find_value_in_array",
                    "2": "find_value_by_index",
                    "3": "find_value",
                    "4": "find_value_in_list",
                    "7": "find_value_index"
                },
                "PTR_+0xc": {
                    "1": "next_array_element"
                },
                "param_1": {
                    "1": "index",
                    "12": "value",
                    "2": "target",
                    "3": "target_value"
                },
                "param_2": {
                    "1": "index",
                    "16": "array",
                    "2": "array_ptr",
                    "4": "data_array"
                },
                "param_2 + 0xc": {
                    "1": "next_array_element",
                    "2": "next_value",
                    "3": "next_element"
                },
                "param_2+0xc": {
                    "1": "next_value"
                },
                "ptr": {
                    "1": "array"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [
                "FUN_08004cb2"
            ],
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "code": "\nundefined4 find_value_in_array_08004cb2(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      result 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  result *(undefined4 *)(array + 8);\n}\n\n",
            "current_name": "find_value_in_array_08004cb2",
            "entrypoint": "0x08004cb2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "value",
                "param_2": "array",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004cce": {
            "additional_data": {
                "FUN_08004cce": {
                    "1": "get_value_from_array",
                    "2": "find_value_or_neg_one",
                    "4": "find_value_or_negative_one",
                    "7": "find_value_or_default"
                },
                "param_1": {
                    "11": "value",
                    "14": "input_value",
                    "6": "value_to_find"
                },
                "uVar1": {
                    "1": "array_value",
                    "11": "result",
                    "18": "found_value"
                }
            },
            "called": [
                "FUN_08004cb2"
            ],
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 find_value_or_negative_08004cce(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  found_value = find_value_in_array_08004cb2();\n  return found_value;\n}\n\n",
            "current_name": "find_value_or_negative_08004cce",
            "entrypoint": "0x08004cce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004cce": "find_value_or_negative_08004cce",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "additional_data": {
                "*param_2": {
                    "1": "current_char",
                    "3": "current_element",
                    "4": "current_value"
                },
                "*param_2 == -1": {
                    "1": "current_value_is_negative_one"
                },
                "00": {
                    "1": "array_len"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08004ce2": {
                    "1": "find_value_in_string",
                    "2": "find_value_in_list",
                    "3": "check_value_in_array",
                    "4": "find_value_in_array",
                    "8": "compare_values"
                },
                "PTR_": {
                    "1": ""
                },
                "break": {
                    "2": "value_found"
                },
                "param_1": {
                    "1": "integer",
                    "10": "value",
                    "2": "value_to_check",
                    "3": "search_value",
                    "4": "value1"
                },
                "param_1 == *param_2": {
                    "1": "values_match"
                },
                "param_1 == -1": {
                    "1": "value1_is_negative_one"
                },
                "param_2": {
                    "1": "array_param",
                    "12": "array",
                    "3": "string"
                },
                "param_2 + 0xc": {
                    "1": "next_value"
                },
                "param_2 = param_2 + 0xc": {
                    "1": "advance_to_next_value"
                },
                "ptr": {
                    "1": "current_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nundefined4 compare_values_08004ce2(int value,char *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) value_found;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "current_name": "compare_values_08004ce2",
            "entrypoint": "0x08004ce2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ce2": "compare_values_08004ce2",
                "break": "value_found",
                "param_1": "value",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d06": {
            "additional_data": {
                "FUN_08004d06": {
                    "1": "compare_and_return_higher",
                    "2": "find_nonzero_value",
                    "4": "compare_and_return_nonzero",
                    "5": "compare_and_return_non_zero"
                },
                "param_1": {
                    "1": "input_value_1",
                    "13": "value1",
                    "15": "value_1",
                    "2": "first_number"
                },
                "param_2": {
                    "1": "input_value_2",
                    "13": "value2",
                    "15": "value_2",
                    "2": "second_number"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f4c"
            ],
            "code": "\nint compare_and_return_non_zero_08004d06(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    if (value_1 == 0) {\n      return value_2;\n    }\n    if (value_2 == 0) {\n      return value_1;\n    }\n    value_1 = 0;\n  }\n  return value_1;\n}\n\n",
            "current_name": "compare_and_return_non_zero_08004d06",
            "entrypoint": "0x08004d06",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d06": "compare_and_return_non_zero_08004d06",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d18": {
            "additional_data": {
                "(*DAT_20000260)": {
                    "1": "callback"
                },
                "DAT_20000260": {
                    "13": "callback_function",
                    "2": "callback_function_ptr",
                    "4": "callback_pointer"
                },
                "DAT_20000278": {
                    "1": "parameter",
                    "15": "callback_data",
                    "2": "callback_argument"
                },
                "FUN_08004d18": {
                    "1": "execute_code_callback",
                    "13": "execute_callback_function",
                    "15": "execute_callback"
                },
                "callbackFunction": {
                    "2": "callback"
                },
                "callback_function": {
                    "1": "callback"
                },
                "code": {
                    "10": "callback_function",
                    "2": "callback"
                },
                "executeCallback": {
                    "2": "execute_callback"
                },
                "executeCallbackFunction": {
                    "2": "execute_callback",
                    "3": "execute_callback_function"
                },
                "executeCallbackFunction_param": {
                    "1": "callback_parameter"
                },
                "executeCallbackIfNotNull": {
                    "1": "execute_callback_if_not_null"
                },
                "executeCallbackIfNotNull_PARAMETER": {
                    "1": "callback"
                },
                "executeCallbackIfNotNull_callback": {
                    "1": "callback"
                },
                "executeCallbackParam": {
                    "1": "callback_param"
                },
                "execute_callback": {
                    "1": "execute"
                },
                "execute_callback_function": {
                    "1": "execute_callback"
                },
                "execute_code_callback": {
                    "1": "execute_callback"
                },
                "function_to_execute": {
                    "1": "function"
                },
                "ptr_argument": {
                    "1": "argument"
                },
                "ptr_callbackFunction": {
                    "1": "callback_function"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003ea0"
            ],
            "code": "\nvoid execute_callback_08004d18(void)\n\n{\n  if (DAT_20000260 != (callback_function *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_08004d18",
            "entrypoint": "0x08004d18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d18": "execute_callback_08004d18",
                "code": "callback_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d40": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "infinite_flag"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": "dat"
                },
                "FUNKY_TOWN": {
                    "1": "endless_loop"
                },
                "FUN_08004d40": {
                    "1": "endless_loop",
                    "24": "infinite_loop",
                    "3": "run_infinite_loop"
                },
                "PTR_": {
                    "1": "ptr"
                },
                "PTR_XXXXXXXX": {
                    "1": "unchanged_variable"
                },
                "do": {
                    "1": "while",
                    "2": "start_loop",
                    "3": "do"
                },
                "original variable name": {
                    "1": "new_variable_name"
                },
                "true": {
                    "1": "continue_loop",
                    "4": "true"
                },
                "while": {
                    "1": "check_condition"
                }
            },
            "called": [
                "FUN_08004d40"
            ],
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "code": "\nvoid infinite_loop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } check_condition( true );\n}\n\n",
            "current_name": "infinite_loop_08004d40",
            "entrypoint": "0x08004d40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40",
                "while": "check_condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d44": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "0x8000000": {
                    "1": "memory_offset_value"
                },
                "0x9f0000": {
                    "1": "window_size_value"
                },
                "0xf8800000": {
                    "1": "preserve_bits2"
                },
                "0xfef2ffff": {
                    "1": "preserve_bits"
                },
                "1": {
                    "1": "set_bit"
                },
                "FUN_08004d44": {
                    "1": "initialize_device_settings",
                    "12": "initialize_registers",
                    "2": "initialize_device",
                    "3": "initialize_memory"
                },
                "_": {
                    "1": ""
                },
                "_DAT_40021000": {
                    "1": "status_register",
                    "2": "register_1",
                    "3": "control_register1",
                    "4": "control_register",
                    "5": "register1"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "2": "register_2",
                    "3": "control_register2",
                    "5": "register2"
                },
                "_DAT_40021008": {
                    "1": "memory_address",
                    "2": "register_3",
                    "5": "register3"
                },
                "_DAT_e000ed08": {
                    "1": "flash_memory",
                    "2": "register_4",
                    "3": "interrupt_control_register",
                    "4": "register4"
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_registers_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_registers_08004d44",
            "entrypoint": "0x08004d44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d44": "initialize_registers_08004d44"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d90": {
            "additional_data": {
                "*param_1": {
                    "1": "register_value",
                    "4": "value"
                },
                "0x40000000": {
                    "1": "some_constant_2"
                },
                "0x40000400": {
                    "1": "value_3"
                },
                "0x40000800": {
                    "1": "some_constant_4"
                },
                "0x40012c00": {
                    "1": "flag_a"
                },
                "DAT_40021018": {
                    "1": "setting_toggle1"
                },
                "DAT_4002101c": {
                    "1": "setting_toggle2"
                },
                "FUN_08004d90": {
                    "1": "update_flags_based_on_value",
                    "2": "update_data_flags",
                    "3": "update_settings",
                    "9": "update_registers"
                },
                "_DAT_40021018": {
                    "1": "variable_a",
                    "2": "data_flag_1",
                    "3": "register_a",
                    "4": "register_1"
                },
                "_DAT_4002101c": {
                    "1": "control_register2",
                    "2": "register2",
                    "3": "register_b",
                    "4": "register_2"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "address",
                    "3": "param",
                    "4": "value",
                    "6": "register_value"
                },
                "param_2": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004b34"
            ],
            "code": "\n\n\nvoid update_registers_08004d90(int *register_value)\n\n{\n  if (*register_value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*register_value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*register_value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*register_value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "update_registers_08004d90",
            "entrypoint": "0x08004d90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d90": "update_registers_08004d90",
                "param_1": "register_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004df4": {
            "additional_data": {
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08004df4": {
                    "1": "subtract_4",
                    "27": "subtract_four"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "param_1": {
                    "1": "value",
                    "10": "result",
                    "3": "number",
                    "6": "input"
                },
                "param_2": {
                    "1": "output"
                },
                "return": {
                    "4": "result"
                },
                "return_value": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "code": "\nint subtract_four_08004df4(int result)\n\n{\n  result result + -4;\n}\n\n",
            "current_name": "subtract_four_08004df4",
            "entrypoint": "0x08004df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "result",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004df8": {
            "additional_data": {
                "'\\x01'": {
                    "1": "flag_value"
                },
                "(*(char *)(param_1 + 0x1c)": {
                    "1": "flag_check"
                },
                "(*(code **)(iVar1 + 0x4c)": {
                    "1": "function_pointer"
                },
                "(*(code **)(iVar1 + 0x4c) != (code *)0x0)": {
                    "1": "is_valid_function_present"
                },
                "(**callbackFunctionPtr)(result,0)": {
                    "1": "execute_callback"
                },
                "(char *)": {
                    "1": "data_pointer"
                },
                "(code **)": {
                    "1": "function_pointer"
                },
                "*(char *)(callbackParam + 0x1c)": {
                    "1": "flag"
                },
                "*(char *)(callbackParameter + 0x1c)": {
                    "1": "condition_check"
                },
                "*(char *)(input_value + 0x1c)": {
                    "1": "is_condition_met"
                },
                "*(char *)(param_1 + 0x1c)": {
                    "1": "flag_value"
                },
                "*(code **)(iVar1 + 0x4c)": {
                    "1": "callback",
                    "3": "callback_function"
                },
                "**(code **)(iVar1 + 0x4c)": {
                    "2": "callback_function"
                },
                "0x0": {
                    "6": "null_pointer"
                },
                "0x1c": {
                    "1": "character_offset",
                    "3": "flag_offset"
                },
                "0x4c": {
                    "2": "offset",
                    "3": "function_offset",
                    "4": "callback_offset"
                },
                "CODE_0x4c": {
                    "1": "function_ptr"
                },
                "DAT_0x1c": {
                    "1": "flag"
                },
                "FUN_08004df8": {
                    "1": "execute_callback_function",
                    "2": "execute_callback_if_flag_set",
                    "3": "execute_function_if_condition_met",
                    "4": "execute_callback_if_enabled",
                    "5": "execute_callback_if_condition_met",
                    "7": "execute_callback"
                },
                "callback_ptr": {
                    "1": "function_to_execute"
                },
                "code": {
                    "1": "callback_function",
                    "2": "function_pointer"
                },
                "iVar1": {
                    "1": "callback_function",
                    "15": "result",
                    "2": "callback_handler",
                    "5": "callback_result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "callback_argument",
                    "3": "input_parameter",
                    "4": "callback_data",
                    "5": "callback_parameter"
                },
                "subtract_four_08004df4": {
                    "1": "get_callback_function_ptr",
                    "2": "get_callback_function",
                    "7": "get_function_pointer"
                }
            },
            "called": [
                "FUN_08004df4"
            ],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid execute_callback_08004df8(int input_value)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if ((*(function_pointer **)(result + 0x4c) != (function_pointer *)0x0) && (*(char *)(input_value + 0x1c) == '\\x01')) {\n    (**(function_pointer **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_08004df8",
            "entrypoint": "0x08004df8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004df8": "execute_callback_08004df8",
                "code": "function_pointer",
                "iVar1": "result",
                "param_1": "input_value",
                "subtract_four_08004df4": "get_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e12": {
            "additional_data": {
                "(code *)": {
                    "1": "function"
                },
                "(code *)0x0": {
                    "1": "null_function_pointer"
                },
                "(code **)": {
                    "1": "function_pointer"
                },
                "(code **)(<new_variable_name_1>)": {
                    "1": "function_pointer"
                },
                "(code **)(<new_variable_name_2>)": {
                    "1": "function_pointer"
                },
                "(code **)(iVar1 + 0x48)": {
                    "1": "callback_ptr"
                },
                "(iVar1 + 0x48)": {
                    "1": "function_pointer_address"
                },
                "(result + 0x48)": {
                    "1": "function_address"
                },
                "*(code **)(iVar1 + 0x48)": {
                    "1": "function_pointer"
                },
                "**(code **)(iVar1 + 0x48)": {
                    "1": "function_to_execute"
                },
                "**(code **)(result + 0x48)": {
                    "1": "function_to_execute"
                },
                "0x0": {
                    "1": "null"
                },
                "0x48": {
                    "1": "callback_address",
                    "2": "function_offset",
                    "3": "offset"
                },
                "FUN_08004e12": {
                    "1": "execute_subtract_and_call_function",
                    "2": "execute_subtract_four",
                    "3": "execute_subtract_four_function",
                    "4": "execute_callback_function"
                },
                "PTR_48": {
                    "1": "function_pointer"
                },
                "code": {
                    "1": "callback_function"
                },
                "iVar1": {
                    "1": "callback_ptr",
                    "2": "callback_address",
                    "21": "result",
                    "3": "return_value"
                },
                "subtract_four_08004df4": {
                    "1": "subtract_and_return_pointer",
                    "2": "perform_subtraction",
                    "3": "get_callback_function",
                    "5": "get_function_pointer",
                    "6": "subtract_four"
                }
            },
            "called": [
                "FUN_08004df4"
            ],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid execute_callback_08004e12(void)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(function_pointer **)(result + 0x48) != (function_pointer *)0x0) {\n    (**(function_pointer **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_08004e12",
            "entrypoint": "0x08004e12",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e12": "execute_callback_08004e12",
                "code": "function_pointer",
                "iVar1": "result",
                "subtract_four_08004df4": "subtract_four"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e20": {
            "additional_data": {
                "DAT_2000027c": {
                    "1": "flag",
                    "2": "flags"
                },
                "FUN_08004e20": {
                    "1": "execute_flag_processing",
                    "14": "check_and_process_flags",
                    "2": "process_if_flag_not_zero",
                    "8": "process_flags"
                },
                "process_flags_08003f18": {
                    "1": "execute_flag_processing",
                    "17": "process_flags"
                }
            },
            "called": [
                "FUN_08003f18"
            ],
            "calling": [],
            "code": "\nvoid check_and_process_flags_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    process_flags();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_process_flags_08004e20",
            "entrypoint": "0x08004e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e20": "check_and_process_flags_08004e20",
                "process_flags_08003f18": "process_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e70": {
            "additional_data": {
                "FUN_08004e70": {
                    "1": "decrement_param",
                    "2": "subtract_four_from_parameter",
                    "28": "subtract_four"
                },
                "param_1": {
                    "1": "output",
                    "4": "input_number",
                    "5": "result",
                    "9": "input_value"
                },
                "param_1+4": {
                    "1": "result"
                },
                "return_value": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "code": "\nint subtract_four_08004e70(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "current_name": "subtract_four_08004e70",
            "entrypoint": "0x08004e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e74": {
            "additional_data": {
                "FUN_08004e74": {
                    "1": "process_input_data",
                    "22": "process_input",
                    "3": "process_parameters"
                },
                "code *": {
                    "1": "function_pointer"
                },
                "iVar1": {
                    "1": "return_value",
                    "2": "result_var",
                    "28": "result"
                },
                "param_1": {
                    "1": "input1",
                    "3": "input",
                    "4": "input_param",
                    "6": "input_data",
                    "7": "input_address"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "flag_param",
                    "24": "flag"
                },
                "param_3": {
                    "1": "constant_val",
                    "2": "comparison_value",
                    "3": "condition",
                    "4": "value"
                },
                "param_4": {
                    "1": "input4",
                    "2": "parameter",
                    "3": "undefined_param",
                    "5": "param_4",
                    "7": "param"
                },
                "process_parameters_08002af8": {
                    "1": "process_params",
                    "2": "process_parameters_helper",
                    "27": "process_parameters"
                },
                "subtract_four_08004e70": {
                    "1": "get_return_value",
                    "28": "subtract_four"
                },
                "validate_input_08002b84": {
                    "1": "validate_input_helper",
                    "30": "validate_input"
                }
            },
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "calling": [
                "FUN_08002cf2"
            ],
            "code": "\nvoid process_input_08004e74(int input_address,int flag,int value,undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (value == *(int *)(input_address + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      process_parameters(input_address,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validate_input(input_address,result + 0x68,0x20,8,param);\n  }\n  return;\n}\n\n",
            "current_name": "process_input_08004e74",
            "entrypoint": "0x08004e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e74": "process_input_08004e74",
                "iVar1": "result",
                "param_1": "input_address",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param",
                "process_parameters_08002af8": "process_parameters",
                "subtract_four_08004e70": "subtract_four",
                "validate_input_08002b84": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "additional_data": {
                "(iVar1 + 0x68)": {
                    "1": "function_arg"
                },
                "*(char *)(iVar1 + 0x2c)": {
                    "1": "condition_2"
                },
                "*(char *)(iVar1 + 0x5c)": {
                    "1": "condition_1"
                },
                "*(code **)(iVar1 + 0x60)": {
                    "1": "function_pointer",
                    "2": "function_ptr"
                },
                "FUN_08004ec4": {
                    "1": "execute_subroutine",
                    "2": "initialize_and_call_function",
                    "3": "initialize_and_execute_function",
                    "9": "execute_function"
                },
                "code": {
                    "6": "function_pointer"
                },
                "code **": {
                    "1": "function_pointers"
                },
                "iVar1": {
                    "1": "temp",
                    "27": "result"
                },
                "initialize_data_08002c10": {
                    "30": "initialize_data"
                },
                "param_1": {
                    "1": "command",
                    "2": "input_data",
                    "3": "param",
                    "8": "input_parameter",
                    "9": "input_param"
                },
                "subtract_four_08004e70": {
                    "1": "get_result",
                    "10": "get_function_pointer",
                    "2": "get_subtraction_result",
                    "5": "subtract_four",
                    "7": "get_function_address"
                }
            },
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "code": "\nvoid execute_function_08004ec4(undefined4 input_param)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (((*(function_pointer **)(result + 0x60) != (function_pointer *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(function_pointer **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(input_param);\n  return;\n}\n\n",
            "current_name": "execute_function_08004ec4",
            "entrypoint": "0x08004ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ec4": "execute_function_08004ec4",
                "code": "function_pointer",
                "iVar1": "result",
                "initialize_data_08002c10": "initialize_data",
                "param_1": "input_param",
                "subtract_four_08004e70": "get_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "additional_data": {
                "'\\0'": {
                    "1": "null_character"
                },
                "*((char *)(iVar1 + 0x5d))": {
                    "1": "value_at_offset_0x5d"
                },
                "FUN_08004ef4": {
                    "1": "initialize_data_if_flag_unset",
                    "2": "initialize_data_if_condition_false",
                    "3": "initialize_if_data_not_initialized",
                    "4": "initialize_if_data_not_set",
                    "8": "check_and_initialize_data"
                },
                "iVar1": {
                    "1": "result_variable",
                    "2": "subtracted_value",
                    "23": "result"
                },
                "initialize_data_08002c10": {
                    "1": "initialize_data_at_offset",
                    "15": "initialize_data"
                },
                "param_1": {
                    "1": "parameter_1",
                    "3": "parameter",
                    "5": "input_param",
                    "7": "param"
                },
                "subtract_four_08004e70": {
                    "1": "get_subtracted_value",
                    "2": "perform_subtraction",
                    "3": "get_offset",
                    "4": "subtract_four"
                }
            },
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "calling": [
                "FUN_0800316c"
            ],
            "code": "\nvoid check_and_initialize_data_08004ef4(undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_data(param);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_initialize_data_08004ef4",
            "entrypoint": "0x08004ef4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ef4": "check_and_initialize_data_08004ef4",
                "iVar1": "result",
                "initialize_data_08002c10": "initialize_data",
                "param_1": "param",
                "subtract_four_08004e70": "subtract_four"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "additional_data": {
                "&DAT_0800441a": {
                    "1": "initialize_data"
                },
                "&DAT_08007604": {
                    "1": "uart_pin2_data"
                },
                "&DAT_0800764c": {
                    "1": "uart_pin1_data"
                },
                "&DAT_2000032c": {
                    "1": "uart_pin_mapping"
                },
                "(int)*(char *)((int)param_1 + 0x59)": {
                    "1": "uart_pin2"
                },
                "(int)*(char *)(param_1 + 0x16)": {
                    "1": "uart_pin1"
                },
                "(int)param_1 + 0x59": {
                    "1": "uart_pin_index2"
                },
                "(int)param_1 + 0x5a": {
                    "1": "uart_pin_value"
                },
                "(param_1 + 0x11)": {
                    "1": "uart_pin_index"
                },
                "(param_1 + 0x12)": {
                    "1": "index1"
                },
                "(param_1 + 0x13)": {
                    "1": "index2"
                },
                "(param_1 + 0x14)": {
                    "1": "index3"
                },
                "(param_1 + 0x15)": {
                    "1": "index4"
                },
                "(param_1 + 0x16)": {
                    "1": "uart_pin_index3"
                },
                "*(undefined *)((int)param_1 + 0x59)": {
                    "1": "uart_pin_two_config_value"
                },
                "*(undefined *)((int)param_1 + 0x5a)": {
                    "1": "uart_pin2_value_store"
                },
                "*(undefined *)(param_1 + 0x11)": {
                    "1": "uart_pin1_value_store"
                },
                "*(undefined *)(param_1 + 0x16)": {
                    "1": "uart_pin_one_config_value"
                },
                "0x40004400": {
                    "1": "uart_pin_value2"
                },
                "0x40004800": {
                    "1": "uart_pin_value3"
                },
                "0x40013800": {
                    "1": "uart_pin_value1"
                },
                "0xc": {
                    "1": "some_value"
                },
                "DAT_0800441a": {
                    "1": "initialize_data"
                },
                "DAT_08007604": {
                    "1": "value2_collection",
                    "2": "data2",
                    "3": "peripheral_data2"
                },
                "DAT_0800764c": {
                    "1": "uart_pin_data1",
                    "2": "data1",
                    "3": "peripheral_data1"
                },
                "DAT_2000032c": {
                    "1": "uart_pin_register_addresses"
                },
                "DAT_40010004": {
                    "1": "gpio_moder"
                },
                "DAT_4002100c": {
                    "1": "uart_pin_1_config_register"
                },
                "DAT_40021010": {
                    "1": "uart_pin_2_config_register"
                },
                "DAT_40021018": {
                    "1": "uart_pin_config_register"
                },
                "DAT_4002101c": {
                    "1": "uart_pin_2_mode_register"
                },
                "FUN_08004f4c": {
                    "1": "initialize_uart_pin_configurations",
                    "26": "initialize_uart_pins",
                    "3": "configure_uart_pins"
                },
                "_DAT_40010004": {
                    "1": "register4",
                    "2": "uart_register_value",
                    "3": "register_5"
                },
                "_DAT_4002100c": {
                    "1": "uart_pin_setting1",
                    "2": "uart_cr1",
                    "3": "register1",
                    "4": "register_1",
                    "5": "uart_register1"
                },
                "_DAT_40021010": {
                    "1": "register_two_value_one",
                    "3": "register3",
                    "4": "register_3",
                    "5": "uart_register3"
                },
                "_DAT_40021018": {
                    "1": "uart1_reg2",
                    "3": "register2",
                    "4": "register_2",
                    "5": "uart_register2"
                },
                "_DAT_4002101c": {
                    "1": "register_value4",
                    "2": "register4",
                    "4": "register_4",
                    "5": "uart_register4"
                },
                "compare_and_return_non_zero_08004d06": {
                    "1": "compare_pins",
                    "13": "compare_and_return_non_zero",
                    "4": "compare_uart_pins"
                },
                "find_value_or_negative_08004cce": {
                    "1": "find_uart_value_or_negative",
                    "14": "find_value_or_negative",
                    "2": "find_pin_value_or_negative"
                },
                "find_value_or_zero_08004c78": {
                    "1": "find_uart_pin_value_or_zero",
                    "13": "find_value_or_zero",
                    "2": "find_pin_value_or_zero"
                },
                "iVar1": {
                    "1": "uart_pin_index0x16",
                    "2": "uart_pin_value_1",
                    "3": "uart_pin_1",
                    "9": "uart_pin1_value"
                },
                "iVar2": {
                    "1": "uart_pin_value2",
                    "2": "pin_2_value",
                    "3": "uart_pin_2",
                    "9": "uart_pin2_value"
                },
                "initialize_data_0800441a": {
                    "18": "initialize_data"
                },
                "local_14": {
                    "1": "uart_pin1_update_value",
                    "2": "constant",
                    "3": "register_count",
                    "5": "constant_value"
                },
                "local_18": {
                    "1": "result",
                    "2": "shifted_bits",
                    "3": "pin_shift"
                },
                "local_1c": {
                    "1": "pin_config_bit1",
                    "2": "uart_pin2_mask",
                    "3": "pin_config",
                    "5": "shifted_value"
                },
                "local_20": {
                    "1": "pin_bit_mask",
                    "2": "pin_bitmask",
                    "4": "mask",
                    "5": "pin_mask",
                    "6": "bit_mask"
                },
                "param_1": {
                    "1": "pin_values",
                    "2": "pin_data",
                    "28": "uart_pins"
                },
                "process_and_initialize_data_080068f0": {
                    "1": "process_error",
                    "13": "process_and_initialize_data",
                    "3": "print_error_message"
                },
                "uVar3": {
                    "1": "pin_2_register",
                    "4": "register_value_1",
                    "8": "register_value"
                },
                "uVar4": {
                    "1": "uart_pin2_find_value",
                    "3": "found_value",
                    "4": "register_value_2",
                    "7": "register_value2"
                },
                "update_register_value_08004884": {
                    "1": "update_uart_register_value",
                    "17": "update_register_value"
                },
                "update_registers_08002624": {
                    "14": "update_registers"
                }
            },
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "code": "\n\n\nvoid initialize_uart_pins_08004f4c(int *uart_pins)\n\n{\n  int uart_pin1_value;\n  int uart_pin2_value;\n  undefined4 register_value1;\n  uint register_value2;\n  uint bit_mask;\n  uint shifted_value;\n  uint pin_shift;\n  undefined4 constant_value;\n  \n  if (uart_pins != (int *)0x0) {\n    uart_pin1_value = find_value_or_zero((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n    uart_pin2_value = find_value_or_zero((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n    if ((uart_pin2_value == 0) || (uart_pin1_value == 0)) {\n      process_and_initialize_data(\"ERROR: at least one UART pin has no peripheral\\n\",uart_pin2_value);\n    }\n    else {\n      uart_pin1_value = compare_and_return_non_zero(uart_pin1_value);\n      *uart_pins = uart_pin1_value;\n      if (uart_pin1_value == 0) {\n        process_and_initialize_data(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart_pin1_value == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (uart_pin1_value == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (uart_pin1_value == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        register_value1 = update_register_value((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        register_value2 = find_value_or_negative((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n        bit_mask = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        shifted_value = (register_value2 >> 3 & 1) << 4 | register_value2 & 7;\n        pin_shift = (register_value2 << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((register_value2 << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        constant_value = 3;\n        update_registers(register_value1,&bit_mask);\n        register_value1 = update_register_value((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        register_value2 = find_value_or_negative((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n        bit_mask = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        shifted_value = (register_value2 >> 3 & 1) << 4 | register_value2 & 7;\n        pin_shift = (register_value2 << 0x1a) >> 0x1e;\n        update_registers(register_value1,&bit_mask);\n        (&DAT_2000032c)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        initialize_data(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_uart_pins_08004f4c",
            "entrypoint": "0x08004f4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f4c": "initialize_uart_pins_08004f4c",
                "compare_and_return_non_zero_08004d06": "compare_and_return_non_zero",
                "find_value_or_negative_08004cce": "find_value_or_negative",
                "find_value_or_zero_08004c78": "find_value_or_zero",
                "iVar1": "uart_pin1_value",
                "iVar2": "uart_pin2_value",
                "initialize_data_0800441a": "initialize_data",
                "local_14": "constant_value",
                "local_18": "pin_shift",
                "local_1c": "shifted_value",
                "local_20": "bit_mask",
                "param_1": "uart_pins",
                "process_and_initialize_data_080068f0": "process_and_initialize_data",
                "uVar3": "register_value1",
                "uVar4": "register_value2",
                "update_register_value_08004884": "update_register_value",
                "update_registers_08002624": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005384": {
            "additional_data": {
                "&DAT_08007604": {
                    "1": "ptr_character"
                },
                "&DAT_0800764c": {
                    "1": "ptr_value"
                },
                "&DAT_20000088": {
                    "1": "ptr_pins"
                },
                "DAT_200000d0": {
                    "1": "constant"
                },
                "DAT_200000d4": {
                    "1": "constant"
                },
                "DAT_200000d8": {
                    "1": "unused_2"
                },
                "DAT_200000dc": {
                    "1": "constant"
                },
                "DAT_200000e0": {
                    "1": "constant_value"
                },
                "DAT_200000e1": {
                    "2": "character_index"
                },
                "FUN_08005384": {
                    "1": "initialize_uart_if_device_found",
                    "13": "initialize_uart",
                    "17": "initialize_uart_pins"
                },
                "find_character_index_08004ca2": {
                    "4": "find_character_index"
                },
                "find_value_or_zero_08004c78": {
                    "4": "find_value_or_zero"
                },
                "iVar1": {
                    "1": "value_check1",
                    "11": "value1",
                    "13": "value",
                    "4": "value_found"
                },
                "initialize_uart_pins_08004f4c": {
                    "1": "initialize_pins",
                    "5": "initialize_uart_pins"
                },
                "uVar2": {
                    "1": "another_value_found",
                    "13": "value2",
                    "2": "value_or_zero",
                    "9": "character_index"
                }
            },
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "calling": [
                "FUN_080053d4"
            ],
            "code": "\nvoid initialize_uart_pins_08005384(void)\n\n{\n  int value;\n  undefined4 value2;\n  \n  value = find_value_or_zero(2,&DAT_0800764c);\n  if (value != 0) {\n    value2 = find_value_or_zero(2,&DAT_0800764c);\n    DAT_200000e1 = find_character_index(value2,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    initialize_uart_pins_08005384(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_uart_pins_08005384",
            "entrypoint": "0x08005384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005384": "initialize_uart_pins_08005384",
                "find_character_index_08004ca2": "find_character_index",
                "find_value_or_zero_08004c78": "find_value_or_zero",
                "iVar1": "value",
                "initialize_uart_pins_08004f4c": "initialize_uart_pins",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053d4": {
            "additional_data": {
                "&DAT_0800764c": {
                    "1": "search_array"
                },
                "&DAT_2000032c": {
                    "1": "data_array"
                },
                "DAT_0800764c": {
                    "1": "value_array",
                    "4": "data_array"
                },
                "DAT_200000cc": {
                    "1": "uart_data",
                    "2": "condition"
                },
                "DAT_2000032c": {
                    "1": "comparison_array",
                    "2": "data_buffer"
                },
                "FUN_080053d4": {
                    "1": "process_data_and_return",
                    "13": "process_data",
                    "2": "process_and_check_data",
                    "5": "process_and_validate_data",
                    "7": "process_and_verify_data"
                },
                "find_value_or_zero_08004c78": {
                    "7": "find_value_or_zero"
                },
                "get_data_08001cc4": {
                    "1": "get_data_value",
                    "4": "get_data"
                },
                "iVar1": {
                    "1": "data_value",
                    "10": "data1",
                    "3": "data_value_1",
                    "6": "initial_data",
                    "8": "data_1"
                },
                "iVar2": {
                    "2": "search_result",
                    "3": "data_value_2",
                    "5": "data_2",
                    "7": "data2",
                    "8": "found_value"
                },
                "initialize_uart_pins_08005384": {
                    "12": "initialize_uart_pins"
                },
                "param_1": {
                    "1": "param_a",
                    "11": "input_param",
                    "2": "status",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "output_param",
                    "5": "input_value",
                    "6": "value"
                },
                "process_data_08004478": {
                    "1": "process_data_2",
                    "2": "process_data_helper",
                    "9": "process_data"
                },
                "uVar3": {
                    "1": "loop_index",
                    "19": "index",
                    "2": "loop_counter",
                    "5": "counter"
                }
            },
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08005730"
            ],
            "code": "\nuint process_data_080053d4(undefined4 input_param,uint value)\n\n{\n  int data1;\n  int found_value;\n  uint index;\n  \n  data1 = get_data();\n  found_value = find_value_or_zero(2,&DAT_0800764c);\n  if (found_value == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_2000032c)[index] == 0 ||\n       (found_value = find_value_or_zero(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[index] != found_value))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_200000cc) && (initialize_uart_pins(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    index = (uint)DAT_200000cc;\n  }\n  do {\n    found_value = process_data_080053d4((&DAT_2000032c)[index],input_param,value & 0xffff,1000);\n    if (found_value == 0) {\n      return value;\n    }\n    found_value = get_data();\n  } while ((uint)(found_value - data1) < 1000);\n  return 0;\n}\n\n",
            "current_name": "process_data_080053d4",
            "entrypoint": "0x080053d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053d4": "process_data_080053d4",
                "find_value_or_zero_08004c78": "find_value_or_zero",
                "get_data_08001cc4": "get_data",
                "iVar1": "data1",
                "iVar2": "found_value",
                "initialize_uart_pins_08005384": "initialize_uart_pins",
                "param_1": "input_param",
                "param_2": "value",
                "process_data_08004478": "process_data",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800548c": {
            "additional_data": {
                "&DAT_2000032c": {
                    "1": "combination_data"
                },
                "(*(byte *)(param_1 + 0x44))": {
                    "1": "byte_value"
                },
                "(uVar1 & 0x22) == 0x22": {
                    "1": "is_expected_combination"
                },
                "*(byte *)(address + 0x44)": {
                    "1": "byte_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "index",
                    "5": "byte_value"
                },
                "*DAT_2000032c": {
                    "1": "byte_pattern"
                },
                "*PTR_2000032c": {
                    "1": "data_array"
                },
                "*PTR_44": {
                    "1": "byte_offset"
                },
                "*PTR_DAT_2000032c": {
                    "1": "data"
                },
                "0x22": {
                    "1": "target_pattern"
                },
                "DAT_2000032c": {
                    "1": "data_32c"
                },
                "FUN_0800548c": {
                    "1": "check_bytes_condition",
                    "2": "is_flag_set",
                    "4": "is_combination_valid",
                    "5": "check_combination"
                },
                "byte": {
                    "1": "index"
                },
                "byte_1": {
                    "1": "flag_byte"
                },
                "byte_44": {
                    "1": "flag_data_offset"
                },
                "combine_bytes_080047e8": {
                    "6": "combine_bytes"
                },
                "param_1": {
                    "1": "flag_value",
                    "19": "input_value",
                    "3": "flag",
                    "4": "input"
                },
                "uVar1": {
                    "1": "combined_result",
                    "25": "combined_bytes",
                    "4": "combined_value"
                },
                "uVar1 & 0x22": {
                    "1": "bitwise_result"
                },
                "uVar2": {
                    "1": "combined_value"
                }
            },
            "called": [
                "FUN_080047e8"
            ],
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "code": "\nbool check_combination_0800548c(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_2000032c)[*(index_value *)(input_value + 0x44)]);\n  return (combined_bytes & 0x22) == 0x22;\n}\n\n",
            "current_name": "check_combination_0800548c",
            "entrypoint": "0x0800548c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800548c": "check_combination_0800548c",
                "byte": "index_value",
                "combine_bytes_080047e8": "combine_bytes",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080054b0": {
            "additional_data": {
                "&DAT_2000032c": {
                    "1": "data_array"
                },
                "(*(byte *)(param_1 + 0x44))": {
                    "1": "byte_value"
                },
                "(uVar1 & 0x21)": {
                    "1": "bitwise_result"
                },
                "(uVar1 & 0x21) == 0x21": {
                    "1": "is_desired_value"
                },
                "*(&DAT_2000032c)[*(byte *)(param_1 + 0x44)]": {
                    "1": "byte_data"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_index",
                    "5": "byte_value"
                },
                "*PTR_0x44": {
                    "1": "byte_value"
                },
                "0x21": {
                    "1": "desired_value"
                },
                "DAT_2000032c": {
                    "1": "byte_data",
                    "2": "data"
                },
                "FUN_080054b0": {
                    "1": "is_valid_address",
                    "2": "is_condition_met",
                    "3": "check_condition",
                    "4": "is_flag_set",
                    "7": "is_combination_valid"
                },
                "byte": {
                    "1": "byte_value"
                },
                "combine_bytes_080047e8": {
                    "4": "combine_bytes"
                },
                "param_1": {
                    "1": "input_data",
                    "14": "input_value",
                    "2": "flag_value",
                    "3": "flag",
                    "5": "input"
                },
                "uVar1": {
                    "1": "byte_combined",
                    "20": "combined_bytes",
                    "4": "combined_value"
                }
            },
            "called": [
                "FUN_080047e8"
            ],
            "calling": [],
            "code": "\nbool is_combination_valid_080054b0(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_2000032c)[*(byte_value *)(input_value + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "current_name": "is_combination_valid_080054b0",
            "entrypoint": "0x080054b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080054b0": "is_combination_valid_080054b0",
                "byte": "byte_value",
                "combine_bytes_080047e8": "combine_bytes",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080054d4": {
            "additional_data": {
                "&DAT_2000032c": {
                    "1": "validation_data"
                },
                "(&DAT_2000032c)[*(byte *)(param_1 + 0x44)]": {
                    "1": "validation_code"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "index"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "input_value"
                },
                "DAT_2000032c": {
                    "1": "data_buffer"
                },
                "FUN_080054d4": {
                    "1": "extract_data_and_validate",
                    "10": "process_input",
                    "2": "extract_and_validate_data",
                    "3": "extract_combination"
                },
                "check_combination_0800548c": {
                    "1": "validate_combination"
                },
                "iVar1": {
                    "1": "result",
                    "19": "combination_check_result",
                    "3": "combination_check",
                    "4": "combination_result"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "combination",
                    "3": "input_length",
                    "4": "input_data",
                    "6": "input",
                    "8": "input_value"
                },
                "param_1 + 0x45": {
                    "1": "input_pointer"
                },
                "param_2": {
                    "1": "extracted_address",
                    "10": "output",
                    "2": "output_buffer",
                    "3": "output_data",
                    "5": "output_ptr"
                },
                "param_3": {
                    "1": "validation_parameter_1",
                    "2": "extra_param_1",
                    "3": "size"
                },
                "param_4": {
                    "1": "validation_parameter_2",
                    "2": "flag2",
                    "3": "param4",
                    "4": "param_4"
                },
                "validate_input_080045a2": {
                    "1": "validate",
                    "3": "validate_input"
                }
            },
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "calling": [
                "FUN_0800598a"
            ],
            "code": "\nundefined4 process_input_080054d4(int input_value,undefined *output,undefined4 param3,undefined4 param_4)\n\n{\n  int combination_check_result;\n  \n  if (input_value == 0) {\n    return 0xffffffff;\n  }\n  combination_check_result = validate_combination();\n  if (combination_check_result == 0) {\n    *output = *(undefined *)(input_value + 0x45);\n    validate_input((&DAT_2000032c)[*(byte *)(input_value + 0x44)],input_value + 0x45,1,&DAT_2000032c,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_input_080054d4",
            "entrypoint": "0x080054d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080054d4": "process_input_080054d4",
                "check_combination_0800548c": "validate_combination",
                "iVar1": "combination_check_result",
                "param_1": "input_value",
                "param_2": "output",
                "param_3": "param3",
                "validate_input_080045a2": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005510": {
            "additional_data": {
                "(&DAT_2000032c)[*(byte *)(param_1 + 0x44)]": {
                    "1": "array_at_index"
                },
                "(&DAT_2000032c)[byteVal]": {
                    "1": "data_arr_ptr"
                },
                "(inputParam + 0x45)": {
                    "1": "input_ptr"
                },
                "(int)*(char *)(param_1 + 0x5a)": {
                    "1": "bit_at_index"
                },
                "*(byte *)(inputParam + 0x44)": {
                    "1": "byte_val"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_at_index"
                },
                "*(char *)(inputParam + 0x5a)": {
                    "1": "char_val"
                },
                "*(int *)(&DAT_200002f0 + offset * 4)": {
                    "1": "int_ptr"
                },
                "*(int *)(&DAT_200002f0 + uVar2 * 4)": {
                    "1": "data_value"
                },
                "*(undefined4 *)(&DAT_200002dc + offset * 4)": {
                    "1": "data_ptr"
                },
                "*(undefined4 *)(&DAT_200002dc + uVar2 * 4)": {
                    "1": "data_pointer"
                },
                "FUN_08005510": {
                    "1": "store_input_combination",
                    "12": "update_combination",
                    "3": "update_memory_and_validate_input",
                    "5": "store_combination"
                },
                "byte": {
                    "1": "byte_value"
                },
                "check_combination_0800548c": {
                    "2": "check_combination"
                },
                "iVar1": {
                    "1": "combination_status",
                    "3": "combination_exists",
                    "5": "combination_result",
                    "6": "combination_check_result",
                    "9": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_pointer",
                    "3": "input_data",
                    "5": "input_address",
                    "6": "input",
                    "9": "combination"
                },
                "param_1 + 0x45": {
                    "1": "input_data"
                },
                "param_2": {
                    "1": "input_value_1",
                    "19": "value",
                    "2": "value1",
                    "7": "new_value"
                },
                "param_3": {
                    "1": "param_3",
                    "10": "unused",
                    "2": "value2",
                    "3": "unused1",
                    "7": "unused_param"
                },
                "param_4": {
                    "1": "param",
                    "2": "value3",
                    "3": "unused2",
                    "4": "update_flag",
                    "7": "flag"
                },
                "set_bit_080024f8": {
                    "8": "set_bit"
                },
                "uVar2": {
                    "1": "byte_value",
                    "17": "index",
                    "3": "byte_index",
                    "8": "combination_index"
                },
                "update_memory_08002494": {
                    "8": "update_memory"
                },
                "validate_input_080045a2": {
                    "8": "validate_input"
                }
            },
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "calling": [
                "FUN_08005a68"
            ],
            "code": "\nvoid update_combination_08005510(int combination,undefined4 value,undefined4 unused,undefined4 flag)\n\n{\n  int result;\n  uint index;\n  \n  if (combination != 0) {\n    result = check_combination();\n    if (result == 0) {\n      index = (uint)*(byte_value *)(combination + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = value;\n      *(int *)(&DAT_200002f0 + index * 4) = combination;\n      update_memory((int)*(char *)(combination + 0x5a),0,1,index,flag);\n      set_bit((int)*(char *)(combination + 0x5a));\n      validate_input((&DAT_2000032c)[*(byte_value *)(combination + 0x44)],combination + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_combination_08005510",
            "entrypoint": "0x08005510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005510": "update_combination_08005510",
                "byte": "byte_value",
                "check_combination_0800548c": "check_combination",
                "iVar1": "result",
                "param_1": "combination",
                "param_2": "value",
                "param_3": "unused",
                "param_4": "flag",
                "set_bit_080024f8": "set_bit",
                "uVar2": "index",
                "update_memory_08002494": "update_memory",
                "validate_input_080045a2": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005568": {
            "additional_data": {
                "&DAT_20000304": {
                    "1": "data_value_array"
                },
                "&DAT_20000318": {
                    "1": "data_ptr_array"
                },
                "DAT_20000304": {
                    "1": "data_array_1"
                },
                "DAT_20000318": {
                    "1": "data_array_2"
                },
                "DAT_2000032c": {
                    "1": "data_array_3"
                },
                "FUN_08005568": {
                    "1": "update_input",
                    "2": "update_memory",
                    "3": "update_memory_and_validate",
                    "5": "update_and_validate_input",
                    "6": "update_and_validate_data"
                },
                "bVar1": {
                    "1": "data_entry_index",
                    "17": "byte_value",
                    "2": "byte_val",
                    "3": "byte_index",
                    "6": "index"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_ptr",
                    "3": "input_address",
                    "4": "data_pointer",
                    "5": "data_ptr"
                },
                "param_2": {
                    "1": "param_val",
                    "14": "new_value",
                    "2": "data_value",
                    "3": "data",
                    "9": "value"
                },
                "set_bit_080024f8": {
                    "1": "update_memory_helper2",
                    "8": "set_bit"
                },
                "update_memory_08002494": {
                    "1": "update_memory_helper1",
                    "8": "update_memory"
                },
                "validate_input_0800455a": {
                    "9": "validate_input"
                }
            },
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "calling": [],
            "code": "\nvoid update_and_validate_data_08005568(int data_ptr,undefined4 new_value)\n\n{\n  byte byte_value;\n  \n  if (data_ptr != 0) {\n    byte_value = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byte_value * 4) = new_value;\n    *(int *)(&DAT_20000318 + (uint)byte_value * 4) = data_ptr;\n    update_memory((int)*(char *)(data_ptr + 0x5a),0,2);\n    set_bit((int)*(char *)(data_ptr + 0x5a));\n    validate_input((&DAT_2000032c)[*(byte *)(data_ptr + 0x44)],\n                 *(int *)(data_ptr + 100) + (uint)*(ushort *)(data_ptr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_and_validate_data_08005568",
            "entrypoint": "0x08005568",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005568": "update_and_validate_data_08005568",
                "bVar1": "byte_value",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "set_bit_080024f8": "set_bit",
                "update_memory_08002494": "update_memory",
                "validate_input_0800455a": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055bc": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "find_index_of_value"
                },
                "<param_1>": {
                    "1": "value"
                },
                "FUN_080055bc": {
                    "1": "find_first_occurrence",
                    "12": "find_value_index",
                    "2": "find_element_index",
                    "8": "find_index"
                },
                "param_1": {
                    "19": "value",
                    "2": "number",
                    "7": "input_value"
                },
                "uVar1": {
                    "1": "match_index",
                    "2": "matching_index",
                    "26": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "code": "\nuint find_value_index_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "current_name": "find_value_index_080055bc",
            "entrypoint": "0x080055bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055bc": "find_value_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055e0": {
            "additional_data": {
                "&DAT_200002dc": {
                    "1": "function_pointer_array",
                    "2": "function_table"
                },
                "&DAT_200002f0": {
                    "1": "parameter_table_base"
                },
                "(*(code **)(&DAT_200002dc + uVar1 * 4))": {
                    "1": "function_pointer"
                },
                "(*(undefined4 *)(&DAT_200002f0 + uVar1 * 4))": {
                    "1": "value_address",
                    "2": "parameter"
                },
                "(**(code **)(&DAT_200002dc + uVar1 * 4))": {
                    "2": "function_ptr"
                },
                "DAT_200002dc": {
                    "1": "function_pointers_start",
                    "2": "function_pointer_table",
                    "5": "function_table"
                },
                "DAT_200002f0": {
                    "1": "function_argument_array",
                    "2": "arguments",
                    "6": "argument_table"
                },
                "FUN_080055e0": {
                    "1": "execute_relevant_function",
                    "2": "execute_operation",
                    "3": "execute_selected_function",
                    "9": "execute_function"
                },
                "code": {
                    "1": "function_to_execute",
                    "4": "function_pointer"
                },
                "code **": {
                    "1": "function_pointer"
                },
                "find_value_index_080055bc": {
                    "1": "get_value_index",
                    "19": "find_value_index"
                },
                "uVar1": {
                    "12": "index",
                    "19": "value_index"
                }
            },
            "called": [
                "FUN_080055bc"
            ],
            "calling": [
                "FUN_08004618"
            ],
            "code": "\nvoid execute_function_080055e0(void)\n\n{\n  uint value_index;\n  \n  value_index = find_value_index();\n  if (value_index < 5) {\n    (**(function_pointer **)(&DAT_200002dc + value_index * 4))(*(undefined4 *)(&DAT_200002f0 + value_index * 4));\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_080055e0",
            "entrypoint": "0x080055e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055e0": "execute_function_080055e0",
                "code": "function_pointer",
                "find_value_index_080055bc": "find_value_index",
                "uVar1": "value_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005604": {
            "additional_data": {
                "(&DAT_2000032c)[*(byte *)(iVar3 + 0x44)]": {
                    "1": "input_data"
                },
                "*(byte *)(iVar3 + 0x44)": {
                    "2": "byte_value"
                },
                "*(int *)(iVar3 + 100)": {
                    "1": "offset",
                    "2": "int_value"
                },
                "*(ushort *)(iVar3 + 0x6a)": {
                    "1": "value",
                    "2": "ushort_value"
                },
                "**(code **)(&DAT_20000304 + uVar1 * 4)": {
                    "1": "execute_function"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_20000304": {
                    "1": "data_ptr2",
                    "2": "function_pointers"
                },
                "DAT_20000318": {
                    "1": "data_ptr1"
                },
                "DAT_2000032c": {
                    "1": "input_data_array",
                    "2": "input_data"
                },
                "FUN_08005604": {
                    "1": "execute_operation",
                    "10": "process_value",
                    "2": "process_values",
                    "3": "process_function",
                    "4": "process_data"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "code": {
                    "1": "function_pointer"
                },
                "find_value_index_080055bc": {
                    "1": "find_selected_value_index",
                    "21": "find_value_index"
                },
                "iVar2": {
                    "1": "action_result",
                    "2": "result_code",
                    "26": "result"
                },
                "iVar3": {
                    "1": "value_ptr",
                    "2": "value_pointer",
                    "5": "data_ptr",
                    "8": "value",
                    "9": "data"
                },
                "iVar3 + 0x44": {
                    "1": "data_offset"
                },
                "uVar1": {
                    "23": "value_index",
                    "8": "index"
                },
                "validate_input_0800455a": {
                    "1": "validate_input_0800455a",
                    "21": "validate_input"
                }
            },
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "calling": [
                "FUN_080045fe"
            ],
            "code": "\nvoid process_value_08005604(void)\n\n{\n  uint value_index;\n  int result;\n  int data;\n  \n  value_index = find_value_index();\n  data = *(int *)(&DAT_20000318 + value_index * 4);\n  if ((value_index < 5) && (result = (**(function_pointer **)(&DAT_20000304 + value_index * 4))(data), result != -1)) {\n    validate_input((&DAT_2000032c)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "current_name": "process_value_08005604",
            "entrypoint": "0x08005604",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005604": "process_value_08005604",
                "code": "function_pointer",
                "find_value_index_080055bc": "find_value_index",
                "iVar2": "result",
                "iVar3": "data",
                "uVar1": "value_index",
                "validate_input_0800455a": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005650": {
            "called": [],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005650",
            "entrypoint": "0x08005650",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080056d8": {
            "additional_data": {
                "&DAT_20000340": {
                    "2": "current_memory"
                },
                "&DAT_200006a8": {
                    "1": "initial_memory",
                    "2": "default_memory"
                },
                "&stack0x00000000": {
                    "1": "stack_base"
                },
                "DAT_20000340": {
                    "1": "current_address",
                    "2": "current_pointer",
                    "5": "current_memory"
                },
                "DAT_200006a4": {
                    "1": "error_flag",
                    "12": "error_code"
                },
                "DAT_200006a8": {
                    "1": "initial_ptr",
                    "2": "default_memory",
                    "3": "initial_memory"
                },
                "FUN_080056d8": {
                    "1": "allocate_memory_block",
                    "2": "reserve_memory",
                    "27": "allocate_memory"
                },
                "param_1": {
                    "1": "block_size",
                    "27": "size"
                },
                "puVar1": {
                    "1": "allocated_address",
                    "2": "start_address",
                    "23": "allocated_memory"
                },
                "stack0x00000000": {
                    "1": "stack_pointer",
                    "2": "stack_bottom",
                    "3": "end_of_stack",
                    "7": "stack_end"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006920"
            ],
            "code": "\nundefined * allocate_memory_080056d8(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocated_memory = DAT_20000340;\n  if (DAT_20000340 + size <= stack_limit) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocated_memory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "current_name": "allocate_memory_080056d8",
            "entrypoint": "0x080056d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "&stack0x00000000": "stack_limit",
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "stack0x00000000": "stack_end"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "DAT_XXXX": {
                    "1": "new_data_variable"
                },
                "FUN_08005714": {
                    "1": "get_default_return_value",
                    "2": "initialize_return_value",
                    "5": "get_default_value",
                    "8": "get_return_value"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "PTR_XXXX": {
                    "1": "new_pointer_variable"
                },
                "return": {
                    "1": "result",
                    "2": "return_value"
                },
                "undefined4": {
                    "1": "error_status",
                    "4": "uint32_t"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nunsigned_int get_return_value_08005714(void)\n\n{\n  return_value 0xffffffff;\n}\n\n",
            "current_name": "get_return_value_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "get_return_value_08005714",
                "return": "return_value",
                "undefined4": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800571a": {
            "additional_data": {
                "* (param_2 + 4)": {
                    "1": "permissions"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "buffer_address"
                },
                "0x2000": {
                    "1": "desired_permissions"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "FUN_0800571a": {
                    "1": "set_memory_flag",
                    "4": "set_memory_size",
                    "5": "set_memory_page_size",
                    "9": "initialize_memory"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "3": "param_1",
                    "4": "param",
                    "5": "result",
                    "8": "param1"
                },
                "param_2": {
                    "1": "memory_ptr",
                    "15": "memory_address",
                    "2": "buffer",
                    "3": "address",
                    "5": "target_address"
                },
                "param_2 + 4": {
                    "1": "buffer_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007004"
            ],
            "code": "\nundefined4 initialize_memory_0800571a(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_0800571a",
            "entrypoint": "0x0800571a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005724": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08005724": {
                    "1": "get_status",
                    "11": "get_return_value",
                    "6": "get_one"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "return": {
                    "1": "return_value",
                    "2": "result"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "2": "bool",
                    "3": "void",
                    "5": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007028"
            ],
            "code": "\nint get_return_value_08005724(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_08005724",
            "entrypoint": "0x08005724",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005724": "get_return_value_08005724",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005728": {
            "additional_data": {
                "FUN_08005728": {
                    "1": "calculate_result",
                    "11": "initialize",
                    "2": "get_zero",
                    "3": "initialize_data",
                    "4": "initialize_application",
                    "5": "get_default_value"
                },
                "PTR_08005728": {
                    "1": "program_data"
                },
                "result": {
                    "1": "final_result"
                },
                "ret_val": {
                    "1": "result"
                },
                "return value": {
                    "1": "status"
                },
                "undefined4": {
                    "10": "void",
                    "2": "uint32_t",
                    "3": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007048"
            ],
            "code": "\nvoid initialize_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "initialize_08005728",
            "entrypoint": "0x08005728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005728": "initialize_08005728",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800572c": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_XXXXXXXX": {
                    "1": "unchanged_data"
                },
                "FUN_0800572c": {
                    "1": "get_zero_integer",
                    "10": "initialize",
                    "2": "get_zero",
                    "3": "initialize_data",
                    "4": "get_default_value"
                },
                "PTR_FUN_0800572c": {
                    "1": "data_ptr"
                },
                "PTR_XXXXXXXX": {
                    "1": "unchanged_pointer"
                },
                "PTR_phjSOR0D": {
                    "1": "new_variable1"
                },
                "return": {
                    "1": "status",
                    "4": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "3": "int",
                    "9": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800706c"
            ],
            "code": "\nvoid initialize_0800572c(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_0800572c",
            "entrypoint": "0x0800572c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800572c": "initialize_0800572c",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005730": {
            "additional_data": {
                "FUN_08005730": {
                    "1": "process_data_helper",
                    "2": "process_and_return_data",
                    "26": "process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "unused_param",
                    "2": "unused_parameter",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "input_param_1",
                    "2": "input_param",
                    "6": "data_1"
                },
                "param_3": {
                    "1": "unnamed_param_3",
                    "2": "arg3",
                    "6": "data_param_2"
                },
                "param_4": {
                    "1": "temp_param2",
                    "2": "arg4",
                    "3": "data_3",
                    "4": "unused",
                    "5": "data_param_3"
                },
                "process_data_080053d4": {
                    "1": "process_data_helper"
                }
            },
            "called": [
                "FUN_080053d4"
            ],
            "calling": [
                "FUN_08006f5a"
            ],
            "code": "\nvoid process_data_08005730(undefined4 unused_param,undefined4 data_1,undefined4 data_2,undefined4 data_param_3)\n\n{\n  process_data_08005730_helper(data_1,data_2,data_2,data_param_3,data_param_3);\n  return;\n}\n\n",
            "current_name": "process_data_08005730",
            "entrypoint": "0x08005730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005730": "process_data_08005730",
                "param_1": "unused_param",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_param_3",
                "process_data_080053d4": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800573c": {
            "additional_data": {
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "DAT_abcdefgh": {
                    "1": "unchanged"
                },
                "DO_NOTHING_BLOCK": {
                    "1": "do_nothing"
                },
                "FUN_0800573c": {
                    "1": "do_nothing_loop",
                    "2": "endless_loop",
                    "26": "infinite_loop"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "PTR_12345678": {
                    "1": "unchanged"
                },
                "do": {
                    "1": "infinite_loop"
                },
                "original variable name": {
                    "1": "new_variable_name"
                },
                "original_variable_name_1": {
                    "1": "unused_variable_1"
                },
                "original_variable_name_2": {
                    "1": "unused_variable_2"
                },
                "true": {
                    "1": "infinite_loop"
                }
            },
            "called": [
                "FUN_0800573c"
            ],
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "code": "\nvoid infinite_loop_0800573c(void)\n\n{\n  infinite_loop_0800573c {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( infinite_loop_0800573c );\n}\n\n",
            "current_name": "infinite_loop_0800573c",
            "entrypoint": "0x0800573c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c",
                "do": "infinite_loop",
                "true": "infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005740": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "DAT_200006a4": {
                    "1": "constant_value",
                    "2": "counter",
                    "3": "default_value",
                    "4": "data_value",
                    "6": "initial_value"
                },
                "FUN_08005740": {
                    "1": "set_constant_value",
                    "11": "initialize_data",
                    "2": "initialize_value",
                    "6": "set_default_value",
                    "8": "set_initial_value"
                },
                "return": {
                    "2": "success"
                },
                "return value": {
                    "1": "success"
                },
                "return_value": {
                    "1": "status"
                },
                "undefined4": {
                    "2": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006f00"
            ],
            "code": "\nvoid initialize_data_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  success 0xffffffff;\n}\n\n",
            "current_name": "initialize_data_08005740",
            "entrypoint": "0x08005740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005740": "initialize_data_08005740",
                "return": "success",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005750": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<unnamed_variable>": {
                    "1": "result"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08005750": {
                    "1": "get_status",
                    "2": "get_result",
                    "3": "initialize_flag",
                    "4": "get_return_value",
                    "8": "initialize"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_PARAM_1": {
                    "1": "data_pointer"
                },
                "result": {
                    "1": "return_value"
                },
                "return": {
                    "1": "result",
                    "3": "status"
                },
                "return value": {
                    "1": "success"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "2": "bool",
                    "3": "status",
                    "7": "int"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_08005750"
            ],
            "code": "\nint initialize_08005750(void)\n\n{\n  status 1;\n}\n\n",
            "current_name": "initialize_08005750",
            "entrypoint": "0x08005750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005750": "initialize_08005750",
                "return": "status",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005754": {
            "additional_data": {
                "DAT_200000f4": {
                    "1": "constant_value"
                },
                "FUN_08005754": {
                    "1": "decode_and_process_data",
                    "15": "process_data",
                    "2": "process_input",
                    "3": "process_and_shift_data"
                },
                "bVar1": {
                    "1": "is_small_value",
                    "2": "is_valid_input",
                    "3": "is_valid_range",
                    "7": "is_less_than_0x3c"
                },
                "cVar2": {
                    "1": "processed_data",
                    "2": "processed_character",
                    "4": "character_value",
                    "5": "result_char",
                    "6": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "25": "input_value",
                    "3": "input"
                },
                "uVar3": {
                    "1": "result",
                    "30": "processed_data"
                }
            },
            "called": [
                "FUN_08004a4c"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nuint process_data_08005754(uint input_value)\n\n{\n  bool is_less_than_0x3c;\n  char result;\n  uint processed_data;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_0x3c = true;\n    }\n    else {\n      is_less_than_0x3c = false;\n    }\n  }\n  else {\n    is_less_than_0x3c = input_value < 0x3c;\n  }\n  if (is_less_than_0x3c) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    result = (&DAT_080076f0)[input_value];\n  }\n  else {\n    result = -1;\n  }\n  if (result == -1) {\n    processed_data = 0;\n  }\n  else {\n    processed_data = process_data_08005754_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return processed_data >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return processed_data << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return processed_data;\n}\n\n",
            "current_name": "process_data_08005754",
            "entrypoint": "0x08005754",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005754": "process_data_08005754",
                "bVar1": "is_less_than_0x3c",
                "cVar2": "result",
                "param_1": "input_value",
                "uVar3": "processed_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057b4": {
            "additional_data": {
                "FUN_080057b4": {
                    "1": "process_param",
                    "29": "process_data"
                },
                "compare_values_08004ce2": {
                    "12": "compare_values"
                },
                "get_bit_value_080047f4": {
                    "11": "get_bit_value"
                },
                "iVar1": {
                    "1": "result",
                    "26": "bit_value",
                    "3": "bit_result"
                },
                "iVar3": {
                    "1": "array_index",
                    "2": "value_index",
                    "3": "element",
                    "5": "bit_index",
                    "9": "value"
                },
                "iVar4": {
                    "1": "result"
                },
                "param_1": {
                    "1": "input_value",
                    "26": "index",
                    "3": "data_index"
                },
                "param_2": {
                    "1": "operation_mode",
                    "2": "update_type",
                    "25": "mode"
                },
                "param_3": {
                    "1": "param",
                    "15": "value",
                    "2": "param3"
                },
                "param_4": {
                    "1": "input_data",
                    "14": "data",
                    "2": "array",
                    "3": "buffer",
                    "5": "data_ptr"
                },
                "process_binary_data_08004b3c": {
                    "1": "process_data",
                    "11": "process_binary_data"
                },
                "puVar2": {
                    "1": "value_ptr",
                    "2": "bit_array",
                    "3": "ptr_data",
                    "7": "data_ptr"
                },
                "set_bit_in_array_0800480a": {
                    "14": "set_bit_in_array"
                },
                "update_bit_08004828": {
                    "14": "update_bit"
                },
                "update_registers_08004bb0": {
                    "14": "update_registers"
                }
            },
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_data_080057b4(uint index,undefined4 mode,undefined4 value,undefined *data)\n\n{\n  int bit_value;\n  undefined *data_ptr;\n  int value;\n  \n  if (index < 0x3c) {\n    value = (int)(char)(&DAT_080076f0)[index];\n    data_ptr = &DAT_080076f0;\n  }\n  else {\n    value = -1;\n    data_ptr = data;\n  }\n  if (value != -1) {\n    bit_value = get_bit_value(value,&DAT_20000344,value,data_ptr,data);\n    if (bit_value != 0) {\n      bit_value = compare_values(value,&DAT_080074b4);\n      if (bit_value != 0) {\n        process_binary_data(value);\n      }\n      update_bit(value,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      update_registers(value,0);\n      break;\n    case 1:\n      update_registers(value,1,0);\n      break;\n    case 2:\n      update_registers(value,0,1);\n      break;\n    case 3:\n      update_registers(value,0,2);\n    }\n    set_bit_in_array(value,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080057b4",
            "entrypoint": "0x080057b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057b4": "process_data_080057b4",
                "compare_values_08004ce2": "compare_values",
                "get_bit_value_080047f4": "get_bit_value",
                "iVar1": "bit_value",
                "iVar3": "value",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "value",
                "param_4": "data",
                "process_binary_data_08004b3c": "process_binary_data",
                "puVar2": "data_ptr",
                "set_bit_in_array_0800480a": "set_bit_in_array",
                "update_bit_08004828": "update_bit",
                "update_registers_08004bb0": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005848": {
            "additional_data": {
                "DAT_20000358": {
                    "1": "bit_data"
                },
                "FUN_08005848": {
                    "1": "find_and_set_memory_value",
                    "2": "process_param",
                    "3": "process_parameter",
                    "5": "update_param_value"
                },
                "get_bit_value_080047f4": {
                    "2": "get_bit_value"
                },
                "get_memory_address_08004848": {
                    "2": "get_memory_address"
                },
                "iVar1": {
                    "1": "bit_check_result",
                    "2": "bit_result",
                    "27": "bit_value"
                },
                "param_1": {
                    "1": "value_index",
                    "15": "index",
                    "2": "parameter_index",
                    "3": "input_index",
                    "5": "param_index"
                },
                "param_2": {
                    "1": "param_2",
                    "14": "value",
                    "2": "value_1",
                    "3": "param_value",
                    "6": "value1"
                },
                "param_3": {
                    "1": "address_offset",
                    "2": "memory_address",
                    "6": "value2"
                },
                "param_4": {
                    "1": "input_data",
                    "12": "data",
                    "2": "buffer",
                    "7": "data_ptr"
                },
                "puVar3": {
                    "1": "bit_value_ptr",
                    "2": "char_array",
                    "4": "pointer",
                    "7": "data_ptr"
                },
                "set_param_value_08004c30": {
                    "1": "set_parameter_value"
                },
                "uVar2": {
                    "1": "address_value",
                    "2": "address",
                    "26": "memory_address"
                },
                "uVar4": {
                    "1": "char_index",
                    "13": "char_value",
                    "2": "bit_value",
                    "3": "bit_mask",
                    "4": "value"
                }
            },
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_data_08005848(uint index,undefined4 value,undefined4 value2,undefined *data)\n\n{\n  int bit_value;\n  undefined4 memory_address;\n  undefined *data_ptr;\n  uint char_value;\n  \n  if (index < 0x3c) {\n    char_value = (uint)(char)(&DAT_080076f0)[index];\n    data_ptr = &DAT_080076f0;\n  }\n  else {\n    char_value = 0xffffffff;\n    data_ptr = data;\n  }\n  if ((char_value != 0xffffffff) &&\n     (bit_value = get_bit_value(char_value,&DAT_20000358,value2,data_ptr,data), bit_value != 0)) {\n    memory_address = get_memory_address((char_value << 0x18) >> 0x1c);\n    set_parameter_value(memory_address,1 << (char_value & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08005848",
            "entrypoint": "0x08005848",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005848": "process_data_08005848",
                "get_bit_value_080047f4": "get_bit_value",
                "get_memory_address_08004848": "get_memory_address",
                "iVar1": "bit_value",
                "param_1": "index",
                "param_2": "value",
                "param_3": "value2",
                "param_4": "data",
                "puVar3": "data_ptr",
                "set_param_value_08004c30": "set_parameter_value",
                "uVar2": "memory_address",
                "uVar4": "char_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005890": {
            "additional_data": {
                "FUN_08005890": {
                    "1": "check_and_return_bit_value",
                    "10": "check_and_return_bit",
                    "12": "check_bit_and_return",
                    "2": "check_bit",
                    "3": "check_bit_value"
                },
                "cVar1": {
                    "1": "output_value",
                    "28": "result"
                },
                "iVar2": {
                    "1": "bit_result",
                    "30": "bit_value"
                },
                "param_1": {
                    "1": "index",
                    "16": "input_value",
                    "5": "input",
                    "9": "value"
                },
                "uVar3": {
                    "1": "mem_addr",
                    "28": "memory_address"
                },
                "uVar4": {
                    "1": "array_index",
                    "18": "index",
                    "2": "lookup_index",
                    "3": "lookup_value"
                }
            },
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "code": "\nchar check_bit_and_return_08005890(uint input_value)\n\n{\n  char result;\n  int bit_value;\n  undefined4 memory_address;\n  uint index;\n  \n  if (input_value < 0x3c) {\n    index = (uint)(char)(&DAT_080076f0)[input_value];\n  }\n  else {\n    index = 0xffffffff;\n  }\n  if (index == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bit_value = get_bit_value_080047f4(index,&DAT_20000358);\n    if (bit_value == 0) {\n      result = '\\0';\n    }\n    else {\n      memory_address = get_memory_address_08004848((index << 0x18) >> 0x1c);\n      result = check_bit_and_return_08005890_08004c48(memory_address,1 << (index & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "current_name": "check_bit_and_return_08005890",
            "entrypoint": "0x08005890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005890": "check_bit_and_return_08005890",
                "cVar1": "result",
                "iVar2": "bit_value",
                "param_1": "input_value",
                "uVar3": "memory_address",
                "uVar4": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058e0": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_08004b94": {
                    "1": ""
                },
                "FUN_080058e0": {
                    "1": "initialize_program",
                    "2": "initialize_and_return_data",
                    "27": "initialize_data"
                },
                "initialize_data_08004b94": {
                    "1": "init_data",
                    "18": "initialize_data"
                },
                "return": {
                    "1": ""
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_08004b94"
            ],
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "code": "\nvoid initialize_data_080058e0(void)\n\n{\n  initialize_data_080058e0();\n  return;\n}\n\n",
            "current_name": "initialize_data_080058e0",
            "entrypoint": "0x080058e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058e0": "initialize_data_080058e0",
                "initialize_data_08004b94": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058e8": {
            "called": [],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080058e8",
            "entrypoint": "0x080058e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800591e": {
            "additional_data": {
                "*(short *)(param_1 + 0x134)": {
                    "1": "offset_1_value",
                    "5": "first_value",
                    "6": "value1"
                },
                "*(short *)(param_1 + 0x136)": {
                    "1": "second_value_at_offset",
                    "5": "second_value",
                    "6": "value2"
                },
                "0x134": {
                    "1": "offset_a",
                    "4": "offset1"
                },
                "0x136": {
                    "1": "offset_b",
                    "4": "offset_2"
                },
                "0x3f": {
                    "1": "bitwise_mask"
                },
                "0x40": {
                    "1": "constant_value",
                    "2": "constant_a"
                },
                "FUN_0800591e": {
                    "1": "calculate_modified_value",
                    "17": "calculate_checksum",
                    "2": "calculate_offset_value",
                    "6": "calculate_offset"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input_value",
                    "2": "address",
                    "3": "base_address",
                    "4": "offset",
                    "7": "data_address"
                },
                "param_1 + 0x134": {
                    "1": "memory_location1"
                },
                "param_1 + 0x136": {
                    "1": "memory_location2"
                },
                "param_2": {
                    "1": "offset"
                },
                "short": {
                    "2": "ushort"
                },
                "short_1": {
                    "1": "first_value"
                },
                "short_2": {
                    "1": "second_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005a18"
            ],
            "code": "\nuushort calculate_checksum_0800591e(int input_value)\n\n{\n  return (*(ushort *)(input_value + 0x134) + 0x40) - *(ushort *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "current_name": "calculate_checksum_0800591e",
            "entrypoint": "0x0800591e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800591e": "calculate_checksum_0800591e",
                "param_1": "input_value",
                "short": "ushort"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800598a": {
            "additional_data": {
                "FUN_0800598a": {
                    "1": "update_data",
                    "13": "process_and_store_input",
                    "2": "process_input_and_update",
                    "4": "process_input_and_store",
                    "9": "process_input"
                },
                "iVar1": {
                    "1": "processing_result",
                    "2": "process_result",
                    "28": "result"
                },
                "local_9": {
                    "1": "new_byte",
                    "12": "input_value",
                    "2": "new_char",
                    "3": "input_byte",
                    "6": "new_value"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_param",
                    "23": "input"
                },
                "uVar2": {
                    "1": "current_index",
                    "10": "new_index",
                    "2": "new_value",
                    "3": "incremented_index",
                    "4": "updated_value"
                }
            },
            "called": [
                "FUN_080054d4"
            ],
            "calling": [],
            "code": "\nvoid process_and_store_input_0800598a(int input)\n\n{\n  int result;\n  ushort new_index;\n  undefined input_value;\n  \n  result = process_input_080054d4(input,&input_value);\n  if ((result == 0) &&\n     (new_index = *(short *)(input + 0x60) + 1U & 0x3f, new_index != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = input_value;\n    *(ushort *)(input + 0x60) = new_index;\n  }\n  return;\n}\n\n",
            "current_name": "process_and_store_input_0800598a",
            "entrypoint": "0x0800598a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800598a": "process_and_store_input_0800598a",
                "iVar1": "result",
                "local_9": "input_value",
                "param_1": "input",
                "uVar2": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a18": {
            "called": [
                "FUN_0800591e"
            ],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a18",
            "entrypoint": "0x08005a18",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a44": {
            "additional_data": {
                "*(int *)(param_1 + 0x130)": {
                    "1": "pointer_a",
                    "3": "parameter1"
                },
                "*(int *)(param_1 + 0x138)": {
                    "1": "data_address2",
                    "3": "parameter4"
                },
                "*(undefined2 *)(param_1 + 0x134)": {
                    "1": "pointer_b",
                    "3": "parameter2"
                },
                "*(undefined2 *)(param_1 + 0x136)": {
                    "1": "flag2",
                    "3": "parameter3"
                },
                "*(undefined2 *)(param_1 + 0x13c)": {
                    "1": "pointer_e",
                    "3": "parameter5"
                },
                "*(undefined2 *)(param_1 + 0x13e)": {
                    "1": "initial_value4",
                    "3": "parameter6"
                },
                "0x11": {
                    "1": "offset_value1",
                    "2": "initial_value1"
                },
                "0x130": {
                    "1": "offset_a",
                    "7": "offset1"
                },
                "0x134": {
                    "2": "value_a",
                    "5": "offset2"
                },
                "0x136": {
                    "2": "value_b",
                    "5": "offset3"
                },
                "0x138": {
                    "1": "sub_data_offset",
                    "2": "offset2",
                    "5": "offset4"
                },
                "0x13c": {
                    "2": "value_c",
                    "5": "offset5"
                },
                "0x13e": {
                    "2": "value_d",
                    "5": "offset6"
                },
                "0x51": {
                    "1": "constant2",
                    "2": "initial_value2"
                },
                "FUN_08005a44": {
                    "1": "initialize_memory",
                    "2": "initialize_function",
                    "9": "initialize_data"
                },
                "[param_1 + 0x130]": {
                    "1": "data_ptr->offset1"
                },
                "[param_1 + 0x134]": {
                    "1": "data_ptr->value1"
                },
                "[param_1 + 0x136]": {
                    "1": "data_ptr->value2"
                },
                "[param_1 + 0x138]": {
                    "1": "data_ptr->offset2"
                },
                "[param_1 + 0x13c]": {
                    "1": "data_ptr->value3"
                },
                "[param_1 + 0x13e]": {
                    "1": "data_ptr->value4"
                },
                "param_1": {
                    "1": "param",
                    "20": "base_address",
                    "3": "data"
                },
                "param_1 + 0x11": {
                    "1": "start_value",
                    "3": "value1"
                },
                "param_1 + 0x130": {
                    "1": "pointer_to_offset",
                    "2": "value1_address"
                },
                "param_1 + 0x134": {
                    "1": "pointer_to_first_value",
                    "2": "value2_address"
                },
                "param_1 + 0x136": {
                    "1": "pointer_to_value2"
                },
                "param_1 + 0x138": {
                    "1": "parameter4_address"
                },
                "param_1 + 0x13c": {
                    "1": "parameter5_address"
                },
                "param_1 + 0x13e": {
                    "1": "parameter8"
                },
                "param_1 + 0x51": {
                    "1": "value2"
                },
                "var_1": {
                    "1": "first_int_pointer"
                },
                "var_2": {
                    "1": "second_short_pointer"
                },
                "var_3": {
                    "1": "third_short_pointer"
                },
                "var_4": {
                    "1": "fourth_int_pointer"
                },
                "var_5": {
                    "1": "fifth_short_pointer"
                },
                "var_6": {
                    "1": "sixth_short_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005b54"
            ],
            "code": "\nvoid initialize_data_08005a44(int base_address)\n\n{\n  *(int *)(base_address + 0x130) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x134) = 0;\n  *(undefined2 *)(base_address + 0x136) = 0;\n  *(int *)(base_address + 0x138) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x13c) = 0;\n  *(undefined2 *)(base_address + 0x13e) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08005a44",
            "entrypoint": "0x08005a44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a44": "initialize_data_08005a44",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a68": {
            "additional_data": {
                "FUN_08005a68": {
                    "1": "initialize_uart_pins_and_update_combination",
                    "2": "initialize_hardware_serial",
                    "3": "initialize_serial_communication",
                    "5": "configure_serial_port",
                    "6": "initialize_serial",
                    "7": "initialize_serial_port"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_address",
                    "16": "jump_table",
                    "2": "recovery_function"
                },
                "assertion_failed_0800611c": {
                    "2": "assertion_failed"
                },
                "bVar2": {
                    "1": "option_flag",
                    "2": "bit_mask",
                    "3": "config_bit",
                    "5": "config_bits",
                    "6": "config_mask"
                },
                "extraout_r1": {
                    "1": "extra_output1",
                    "2": "extra_out",
                    "7": "result",
                    "8": "extra_output"
                },
                "iVar3": {
                    "1": "num_bits",
                    "10": "config_value",
                    "2": "config_index",
                    "3": "configuration",
                    "6": "data_bits"
                },
                "initialize_uart_pins_08004f4c": {
                    "3": "initialize_uart_pins"
                },
                "param_1": {
                    "1": "serial_handler",
                    "11": "serial_port",
                    "2": "device",
                    "5": "serial_port_address",
                    "6": "port_address"
                },
                "param_2": {
                    "1": "param2",
                    "30": "baud_rate"
                },
                "param_3": {
                    "1": "config_flags",
                    "2": "options",
                    "3": "config_byte",
                    "5": "serial_config",
                    "7": "configuration"
                },
                "pbVar4": {
                    "1": "byte_data",
                    "3": "data_pointer",
                    "6": "byte_ptr",
                    "9": "byte_pointer"
                },
                "pcVar1": {
                    "1": "file_path",
                    "17": "error_message",
                    "3": "error_msg",
                    "8": "error_string"
                },
                "uRam0000012d": {
                    "1": "updated_value"
                },
                "unaff_r4": {
                    "1": "unaffected_register4",
                    "2": "unaff_r4",
                    "3": "unaffected_r4",
                    "7": "character"
                },
                "unaff_r6": {
                    "1": "unaffected_register6",
                    "12": "offset",
                    "2": "unaff_r6",
                    "3": "unaffected_r6",
                    "7": "base_address"
                },
                "update_combination_08005510": {
                    "3": "update_combination"
                }
            },
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nvoid initialize_serial_port_08005a68(int serial_port,undefined4 baud_rate,byte config)\n\n{\n  uint extra_output;\n  char *error_message;\n  byte config_mask;\n  int config_value;\n  byte *byte_pointer;\n  char character;\n  int offset;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(byte *)(serial_port + 0x140) = config;\n  config_mask = config & 7;\n  if (config_mask == 4) {\n    config_value = 7;\n  }\n  else if (config_mask == 6) {\n    config_value = 8;\n  }\n  else if (config_mask == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    initialize_uart_pins(serial_port + 0xd4);\n    update_combination(serial_port + 0xd4,0x800598b);\n    return;\n  }\n  error_message = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jump_table = (code *)0x8005b12;\n  assertion_failed(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  byte_pointer = *(byte **)(extra_output + offset);\n  error_message[0x1e] = character;\n  *(undefined *)(*byte_pointer + 0x1e) = 0;\n  if (extra_output < 0x3c) {\n    updated_value = (&DAT_080076f0)[extra_output];\n  }\n  else {\n    updated_value = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "initialize_serial_port_08005a68",
            "entrypoint": "0x08005a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a68": "initialize_serial_port_08005a68",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "assertion_failed_0800611c": "assertion_failed",
                "bVar2": "config_mask",
                "extraout_r1": "extra_output",
                "iVar3": "config_value",
                "initialize_uart_pins_08004f4c": "initialize_uart_pins",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "config",
                "pbVar4": "byte_pointer",
                "pcVar1": "error_message",
                "uRam0000012d": "updated_value",
                "unaff_r4": "character",
                "unaff_r6": "offset",
                "update_combination_08005510": "update_combination"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005b24": {
            "additional_data": {
                "*(undefined *)(param_1 + 0x12d)": {
                    "1": "memory_location"
                },
                "<original_function_name>": {
                    "1": "set_special_value"
                },
                "<original_parameter_name_1>": {
                    "1": "index"
                },
                "<original_parameter_name_2>": {
                    "1": "value"
                },
                "FUN_08005b24": {
                    "1": "set_threshold",
                    "2": "set_default_value",
                    "3": "update_parameter_value",
                    "5": "set_byte_value"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "function_pointer",
                    "9": "jump_table"
                },
                "param_1": {
                    "1": "result_pointer",
                    "6": "memory_address",
                    "9": "base_address"
                },
                "param_2": {
                    "1": "source_value",
                    "10": "index",
                    "2": "param_value",
                    "3": "input_value",
                    "4": "value_index",
                    "7": "value"
                },
                "uVar1": {
                    "1": "flag_value",
                    "2": "return_value",
                    "3": "new_value",
                    "4": "updated_value",
                    "6": "byte_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005b54"
            ],
            "code": "\nvoid set_byte_value_08005b24(int base_address,uint index)\n\n{\n  undefined byte_value;\n  code *jump_table;\n  \n  if (index < 0x3c) {\n    byte_value = (&DAT_080076f0)[index];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(undefined *)(base_address + 0x12d) = byte_value;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "set_byte_value_08005b24",
            "entrypoint": "0x08005b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005b24": "set_byte_value_08005b24",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "additional_data": {
                "300": {
                    "1": "buffer_offset"
                },
                "FUN_08005b3c": {
                    "1": "set_byte_with_value",
                    "11": "set_byte_value",
                    "2": "update_parameter"
                },
                "param_1": {
                    "1": "buffer_address",
                    "10": "address",
                    "2": "destination_address",
                    "7": "memory_address",
                    "9": "base_address"
                },
                "param_2": {
                    "1": "value_index",
                    "26": "index"
                },
                "uVar1": {
                    "1": "initialized_value",
                    "11": "value",
                    "3": "updated_value",
                    "7": "byte_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005b54"
            ],
            "code": "\nvoid set_byte_value_08005b3c(int address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 300) = value;\n  return;\n}\n\n",
            "current_name": "set_byte_value_08005b3c",
            "entrypoint": "0x08005b3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005b3c": "set_byte_value_08005b3c",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005b54": {
            "additional_data": {
                "&DAT_08007604": {
                    "1": "character_data_1"
                },
                "&DAT_0800764c": {
                    "1": "character_data2"
                },
                "&DAT_2000036c": {
                    "1": "constant_data"
                },
                "&PTR_LAB_080059c8_1_08007804": {
                    "1": "some_pointer"
                },
                "*param_1": {
                    "1": "pointer_to_data"
                },
                "DAT_08007604": {
                    "1": "data_2",
                    "2": "character_data_1"
                },
                "DAT_0800764c": {
                    "1": "data_3",
                    "2": "character_data_2"
                },
                "DAT_2000036c": {
                    "1": "data_variable_1",
                    "2": "data_1"
                },
                "FUN_08005b54": {
                    "1": "initialize_game_settings",
                    "4": "initialize_params",
                    "6": "initialize_param",
                    "7": "initialize_parameters",
                    "9": "initialize_data"
                },
                "PTR_LAB_080059c8_1_08007804": {
                    "1": "pointer_data"
                },
                "find_character_index_08004ca2": {
                    "1": "find_index_of_character",
                    "16": "find_character_index"
                },
                "initialize_data_08005a44": {
                    "24": "initialize_data"
                },
                "param_1": {
                    "1": "game_data",
                    "2": "output",
                    "3": "params",
                    "4": "data_array",
                    "5": "data",
                    "7": "param_array"
                },
                "param_1 + 0x12d": {
                    "1": "data_index1"
                },
                "param_1 + 0x4b": {
                    "1": "data_index2"
                },
                "param_1[1]": {
                    "1": "data[1]"
                },
                "param_1[2]": {
                    "1": "data[2]"
                },
                "param_2": {
                    "1": "input_character",
                    "17": "character",
                    "3": "character_code",
                    "6": "character_value"
                },
                "param_3": {
                    "1": "value_3",
                    "10": "value",
                    "4": "value1",
                    "9": "value_1"
                },
                "param_4": {
                    "1": "byte_value",
                    "2": "length",
                    "3": "index",
                    "4": "byte_value_2",
                    "5": "value2",
                    "9": "value_2"
                },
                "set_byte_value_08005b24": {
                    "1": "set_value1",
                    "2": "set_byte_value1",
                    "3": "set_byte_value_1",
                    "7": "set_byte_value"
                },
                "set_byte_value_08005b3c": {
                    "1": "set_byte_value_with_flag",
                    "2": "set_byte_value2",
                    "3": "set_byte_value_2",
                    "4": "set_byte_value"
                },
                "uVar1": {
                    "1": "character_index1",
                    "16": "character_index",
                    "4": "char_index",
                    "7": "index"
                }
            },
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "calling": [
                "FUN_08005bb0"
            ],
            "code": "\nundefined4 *\ninitialize_data_08005b54(undefined4 *param_array,undefined4 character,undefined4 value,undefined4 value_2)\n\n{\n  undefined character_index;\n  \n  data[1] = 0;\n  data[2] = 1000;\n  *param_array = &PTR_LAB_080059c8_1_08007804;\n  if (param_array == (undefined4 *)&DAT_2000036c) {\n    set_byte_value(&DAT_2000036c,0,value,&DAT_2000036c,value_2);\n    set_byte_value(&DAT_2000036c,1);\n  }\n  else {\n    character_index = find_character_index(character,&DAT_08007604);\n    *(undefined *)((int)param_array + 0x12d) = character_index;\n    character_index = find_character_index(character,&DAT_0800764c);\n    *(undefined *)(param_array + 0x4b) = character_index;\n  }\n  initialize_data_08005b54(param_array);\n  return param_array;\n}\n\n",
            "current_name": "initialize_data_08005b54",
            "entrypoint": "0x08005b54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005b54": "initialize_data_08005b54",
                "find_character_index_08004ca2": "find_character_index",
                "initialize_data_08005a44": "initialize_data",
                "param_1": "param_array",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_2": "character",
                "param_3": "value",
                "param_4": "value_2",
                "set_byte_value_08005b24": "set_byte_value",
                "set_byte_value_08005b3c": "set_byte_value",
                "uVar1": "character_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "additional_data": {
                "0x40004400": {
                    "1": "data_start_address"
                },
                "0xffff": {
                    "1": "limit"
                },
                "DAT_2000036c": {
                    "1": "data"
                },
                "FUN_08005bb0": {
                    "1": "initialize_if_param_one_is_one",
                    "2": "initialize_if_needed",
                    "3": "initialize_data_if_param1_is_1",
                    "4": "initialize_if_param1_is_one",
                    "5": "initialize_if_param1_is_1"
                },
                "initialize_data_08005b54": {
                    "1": "initialize_data_with_specific_parameters",
                    "4": "initialize_data"
                },
                "initialize_if_param1_is_one": {
                    "1": "initialize_if_param1_is_one"
                },
                "param2_value": {
                    "1": "param2_value"
                },
                "param3_value": {
                    "1": "param3_value"
                },
                "param4_value": {
                    "1": "param4_value"
                },
                "param_1": {
                    "1": "is_parameter_one",
                    "2": "is_param_1",
                    "3": "is_param1_one",
                    "4": "condition"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "param_2_value",
                    "4": "param2_value",
                    "6": "param2",
                    "8": "value"
                },
                "param_3": {
                    "1": "parameter_three",
                    "2": "data_1",
                    "3": "data1",
                    "4": "param3_value",
                    "7": "param3"
                },
                "param_4": {
                    "1": "arg2",
                    "2": "param_4_value",
                    "3": "data2",
                    "4": "param4_value",
                    "7": "param4"
                }
            },
            "called": [
                "FUN_08005b54"
            ],
            "calling": [],
            "code": "\nvoid initialize_if_param1_is_1_08005bb0(int condition,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_data(&DAT_2000036c,0x40004400,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_if_param1_is_1_08005bb0",
            "entrypoint": "0x08005bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bb0": "initialize_if_param1_is_1_08005bb0",
                "initialize_data_08005b54": "initialize_data",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "additional_data": {
                "FUN_08005c1c": {
                    "1": "initialize_function",
                    "2": "set_data",
                    "21": "initialize_data"
                },
                "param_1": {
                    "1": "data_block",
                    "11": "data_pointer",
                    "2": "data_ptr",
                    "4": "output",
                    "5": "output_data"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input1",
                    "21": "value1"
                },
                "param_3": {
                    "1": "input_param_2",
                    "2": "value_2",
                    "21": "value2"
                },
                "param_4": {
                    "1": "value4",
                    "2": "value_3",
                    "21": "value3"
                },
                "param_5": {
                    "1": "input_param_4",
                    "2": "input4",
                    "21": "value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005c38"
            ],
            "code": "\nvoid initialize_data_08005c1c(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_08007858;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "current_name": "initialize_data_08005c1c",
            "entrypoint": "0x08005c1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c38": {
            "additional_data": {
                "DAT_200004b0": {
                    "1": "data_structure"
                },
                "FUN_08005c38": {
                    "1": "initialize_data_if_param_one_is_one_and_param_two_is_max",
                    "16": "initialize_data_if_condition_met"
                },
                "initialize_data_08005c1c": {
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "status_code",
                    "2": "input_condition",
                    "3": "first_param",
                    "6": "condition_1",
                    "7": "flag"
                },
                "param_2": {
                    "1": "second_parameter",
                    "3": "second_param",
                    "6": "condition_2",
                    "8": "value"
                }
            },
            "called": [
                "FUN_08005c1c"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_if_condition_met_08005c38(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    initialize_data(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_if_condition_met_08005c38",
            "entrypoint": "0x08005c38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c38": "initialize_data_if_condition_met_08005c38",
                "initialize_data_08005c1c": "initialize_data",
                "param_1": "flag",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c96": {
            "additional_data": {
                "(*param_1 + 4)": {
                    "1": "string_operation"
                },
                "*(code **)(*param_1 + 4)": {
                    "1": "string_function"
                },
                "**(code **)(*param_1 + 4)": {
                    "1": "function_ptr"
                },
                "*param_1": {
                    "1": "function_pointer"
                },
                "+ 4": {
                    "1": "offset_4"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08005c96": {
                    "1": "process_string_param",
                    "13": "process_string",
                    "2": "execute_function_with_string",
                    "3": "execute_function"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "code": {
                    "1": "function_pointer"
                },
                "find_end_of_string_08000178": {
                    "8": "find_end_of_string"
                },
                "param_1": {
                    "1": "function",
                    "2": "function_ptr",
                    "4": "data",
                    "6": "input_array"
                },
                "param_2": {
                    "1": "str_length",
                    "13": "string_length",
                    "2": "size",
                    "8": "array_length"
                },
                "param_3": {
                    "1": "arg_3",
                    "11": "param_3",
                    "2": "result_1"
                },
                "param_4": {
                    "1": "param",
                    "12": "param_4",
                    "2": "additional_parameter",
                    "3": "additional_param"
                },
                "uVar1": {
                    "1": "end_index",
                    "2": "end_of_string_index",
                    "21": "end_of_string"
                }
            },
            "called": [
                "FUN_08000178"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "code": "\nundefined4 process_string_08005c96(int *input_array,int string_length,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 end_of_string;\n  \n  if (string_length != 0) {\n    end_of_string = find_end_of_string(string_length);\n    end_of_string = (**(function_pointer **)(*input_array + 4))(input_array,string_length,end_of_string,*(function_pointer **)(*input_array + 4),param_4);\n    return end_of_string;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_string_08005c96",
            "entrypoint": "0x08005c96",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c96": "process_string_08005c96",
                "code": "function_pointer",
                "find_end_of_string_08000178": "find_end_of_string",
                "param_1": "input_array",
                "param_2": "string_length",
                "uVar1": "end_of_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "additional_data": {
                "*param_1": {
                    "1": "function_pointer"
                },
                "<original_function_name>": {
                    "1": "execute_function"
                },
                "<param_1>": {
                    "1": "function_pointer"
                },
                "FUN_08005cb6": {
                    "1": "run_code_function",
                    "25": "execute_function",
                    "4": "execute_code"
                },
                "param_1": {
                    "2": "code_pointer",
                    "25": "function_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "current_name": "execute_function_08005cb6",
            "entrypoint": "0x08005cb6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "additional_data": {
                "&DAT_0800786c": {
                    "1": "data_input"
                },
                "**(*functionPointer + 4)": {
                    "1": "callback_function"
                },
                "2": {
                    "1": "constant_value"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_0800786c": {
                    "1": "data_struct",
                    "2": "data"
                },
                "FUN_08005cc0": {
                    "1": "call_and_pass_parameters",
                    "10": "execute_callback",
                    "14": "execute_function",
                    "2": "execute_code",
                    "3": "execute_callback_function"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "code": {
                    "1": "function_ptr"
                },
                "param_1": {
                    "1": "callback_ptr",
                    "10": "function_pointer",
                    "2": "callback_function_ptr",
                    "3": "callback_function",
                    "7": "function_ptr"
                },
                "param_2": {
                    "1": "param_2",
                    "19": "arg1",
                    "2": "param1"
                },
                "param_3": {
                    "1": "param_3",
                    "19": "arg2",
                    "2": "param3"
                },
                "param_4": {
                    "1": "user_input",
                    "16": "arg3",
                    "2": "param3",
                    "3": "callback_function"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "code": "\nvoid execute_function_08005cc0(int *function_pointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  (**(function_ptr **)(*function_pointer + 4))(function_pointer,&DAT_0800786c,2,*(function_ptr **)(*function_pointer + 4),arg3);\n  return;\n}\n\n",
            "current_name": "execute_function_08005cc0",
            "entrypoint": "0x08005cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "code": "function_ptr",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "additional_data": {
                "FUN_08005cd4": {
                    "1": "combine_and_execute",
                    "19": "calculate_sum",
                    "3": "calculate_result"
                },
                "iVar1": {
                    "1": "processed_string_result",
                    "15": "string_result",
                    "2": "string_process_result",
                    "8": "string_processing_result"
                },
                "iVar2": {
                    "1": "executed_result",
                    "11": "function_execution_result",
                    "16": "function_result"
                },
                "param_1": {
                    "1": "string_parameter",
                    "17": "input_value",
                    "2": "input_parameter",
                    "3": "input",
                    "6": "input_param"
                }
            },
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nint calculate_sum_08005cd4(undefined4 input_value)\n\n{\n  int string_result;\n  int function_result;\n  \n  string_result = process_string_08005c96();\n  function_result = execute_function_08005cc0(input_value);\n  return function_result + string_result;\n}\n\n",
            "current_name": "calculate_sum_08005cd4",
            "entrypoint": "0x08005cd4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cd4": "calculate_sum_08005cd4",
                "iVar1": "string_result",
                "iVar2": "function_result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "additional_data": {
                "FUN_08005ce8": {
                    "1": "convert_num_to_string",
                    "13": "convert_base",
                    "2": "convert_number_to_string",
                    "4": "convert_to_base",
                    "8": "convert_decimal_to_base"
                },
                "cVar1": {
                    "1": "converted_char",
                    "11": "digit",
                    "2": "converted_digit"
                },
                "find_end_of_string_08000178": {
                    "1": "find_end_of_string"
                },
                "local_15": {
                    "1": "output_buffer",
                    "2": "converted_num",
                    "7": "converted_number",
                    "8": "buffer"
                },
                "param_1": {
                    "1": "output_buffer",
                    "10": "input_array",
                    "2": "arr",
                    "3": "input_ptr",
                    "4": "result"
                },
                "param_2": {
                    "1": "num_to_convert",
                    "14": "number",
                    "2": "input_number",
                    "3": "num",
                    "9": "decimal_number"
                },
                "param_3": {
                    "1": "base_n",
                    "29": "base"
                },
                "pcVar5": {
                    "1": "result_string",
                    "2": "current_digit",
                    "3": "output_array",
                    "5": "output"
                },
                "uVar2": {
                    "1": "converted_number",
                    "20": "result"
                },
                "uVar3": {
                    "21": "remainder",
                    "3": "digit"
                },
                "uVar4": {
                    "24": "quotient"
                }
            },
            "called": [
                "FUN_08000178"
            ],
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "code": "\nundefined4 convert_base_08005ce8(int *input_array,uint number,uint base)\n\n{\n  char digit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *output;\n  char buffer [9];\n  \n  buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  output = buffer + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    output = output + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *output = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (output == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = find_end_of_string(output);\n    result = (**(code **)(*input_array + 4))(input_array,output,result);\n  }\n  return result;\n}\n\n",
            "current_name": "convert_base_08005ce8",
            "entrypoint": "0x08005ce8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "cVar1": "digit",
                "find_end_of_string_08000178": "find_end_of_string",
                "local_15": "buffer",
                "param_1": "input_array",
                "param_2": "number",
                "param_3": "base",
                "pcVar5": "output",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d42": {
            "additional_data": {
                "FUN_08005d42": {
                    "1": "convert_or_execute",
                    "13": "convert_and_execute",
                    "2": "convert_with_base",
                    "3": "convert_param_to_base",
                    "4": "convert_number",
                    "5": "convert_base_or_execute"
                },
                "convert_base_08005ce8": {
                    "1": "convert_to_base"
                },
                "execute_function_08005cb6": {
                    "2": "execute_function"
                },
                "iVar1": {
                    "1": "return_value",
                    "29": "result"
                },
                "iVar2": {
                    "1": "negate_result",
                    "2": "result2",
                    "21": "negative_result"
                },
                "param_1": {
                    "1": "pointer",
                    "2": "input_ptr",
                    "3": "function_pointer",
                    "4": "input_array",
                    "7": "function_ptr"
                },
                "param_2": {
                    "1": "num",
                    "14": "input_value",
                    "2": "input",
                    "5": "number",
                    "8": "value"
                },
                "param_3": {
                    "1": "number2",
                    "2": "base_or_flag",
                    "25": "base"
                }
            },
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "calling": [
                "FUN_08005d82"
            ],
            "code": "\nint convert_and_execute_08005d42(undefined4 *function_ptr,uint input_value,uint base)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*function_ptr)(function_ptr,input_value & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_to_base(function_ptr,input_value,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)input_value) {\n    result = convert_to_base(function_ptr,input_value,10);\n    return result;\n  }\n  result = execute_function(function_ptr,0x2d);\n  negative_result = convert_to_base(function_ptr,-input_value,10);\n  return negative_result + result;\n}\n\n",
            "current_name": "convert_and_execute_08005d42",
            "entrypoint": "0x08005d42",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d42": "convert_and_execute_08005d42",
                "convert_base_08005ce8": "convert_to_base",
                "execute_function_08005cb6": "execute_function",
                "iVar1": "result",
                "iVar2": "negative_result",
                "param_1": "function_ptr",
                "param_2": "input_value",
                "param_3": "base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d82": {
            "additional_data": {
                "FUN_08005d82": {
                    "1": "execute_conversion_and_execute",
                    "19": "execute_conversion",
                    "8": "execute_converted_function"
                },
                "convert_and_execute_08005d42": {
                    "1": "conversion_executor",
                    "16": "convert_and_execute",
                    "4": "perform_conversion",
                    "6": "convert_and_execute_function"
                },
                "execute_conversion_PARAMETER_1": {
                    "1": "execute_conversion_arg"
                },
                "execute_conversion_parameter": {
                    "1": "parameter"
                }
            },
            "called": [
                "FUN_08005d42"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "code": "\nvoid execute_conversion_08005d82(void)\n\n{\n  convert_and_execute();\n  return;\n}\n\n",
            "current_name": "execute_conversion_08005d82",
            "entrypoint": "0x08005d82",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d82": "execute_conversion_08005d82",
                "convert_and_execute_08005d42": "convert_and_execute"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "additional_data": {
                "**param_1": {
                    "1": "ptr_to_function"
                },
                "0xff": {
                    "1": "mask"
                },
                "<original_function_name>": {
                    "1": "convert_and_execute"
                },
                "<unnamed_variable>": {
                    "1": "converted_flag"
                },
                "FUN_08005d8a": {
                    "1": "convert_base_or_call_function",
                    "2": "convert_or_invoke_function",
                    "3": "convert_and_call",
                    "5": "convert_or_call_function",
                    "8": "convert_or_execute"
                },
                "convert_base_08005ce8": {
                    "1": "convert_data",
                    "6": "convert_base"
                },
                "new_variable_name_1": {
                    "1": "converted_value"
                },
                "param_1": {
                    "1": "conversion_or_execution_fn",
                    "10": "function_pointer",
                    "14": "function_ptr",
                    "2": "data_ptr"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "size",
                    "4": "input_param",
                    "5": "input_value"
                },
                "param_3": {
                    "1": "second_parameter",
                    "12": "flag",
                    "2": "arg2",
                    "4": "value_2"
                },
                "param_4": {
                    "1": "third_parameter",
                    "2": "arg_3",
                    "4": "value_3",
                    "5": "additional_param",
                    "9": "extra_param"
                }
            },
            "called": [
                "FUN_08005ce8"
            ],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nvoid convert_or_execute_08005d8a(undefined4 *function_ptr,uint input_value,uint flag,undefined4 extra_param)\n\n{\n  if (flag != 0) {\n    convert_base(function_ptr,input_value,flag & 0xff);\n    return;\n  }\n  (**(code **)*function_ptr)(function_ptr,input_value & 0xff,0,*(code **)*function_ptr,extra_param);\n  return;\n}\n\n",
            "current_name": "convert_or_execute_08005d8a",
            "entrypoint": "0x08005d8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d8a": "convert_or_execute_08005d8a",
                "convert_base_08005ce8": "convert_base",
                "param_1": "function_ptr",
                "param_2": "input_value",
                "param_3": "flag",
                "param_4": "extra_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005da8": {
            "additional_data": {
                "FUN_08005da8": {
                    "1": "process_and_calculate_value",
                    "15": "process_data",
                    "2": "validate_and_process_input",
                    "3": "process_input"
                },
                "bVar4": {
                    "1": "temp_byte",
                    "11": "counter",
                    "2": "byte_value",
                    "3": "count",
                    "5": "byte_var",
                    "7": "loop_counter"
                },
                "calculate_08000190": {
                    "1": "calculate_conversion"
                },
                "calculate_floating_point_0800074c": {
                    "3": "calculate_floating_point"
                },
                "calculate_result_08000194": {
                    "3": "calculate_result"
                },
                "calculate_result_080004f8": {
                    "1": "calculate_result2",
                    "2": "calculate_result"
                },
                "calculate_shifted_value_08000aa8": {
                    "3": "calculate_shifted_value"
                },
                "check_parameters_08000a2c": {
                    "1": "check_input_parameters",
                    "2": "check_parameters"
                },
                "convert_or_execute_08005d8a": {
                    "3": "convert_or_execute"
                },
                "execute_conversion_08005d82": {
                    "3": "execute_conversion"
                },
                "execute_function_08005cb6": {
                    "3": "execute_function"
                },
                "iVar1": {
                    "1": "check_result",
                    "27": "result"
                },
                "iVar3": {
                    "1": "result",
                    "13": "conversion_result",
                    "3": "temp2",
                    "4": "temp_var2"
                },
                "is_input_empty_080009dc": {
                    "3": "is_input_empty"
                },
                "is_string_empty_08000a18": {
                    "3": "is_string_empty"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input",
                    "3": "arg1",
                    "4": "input_param_1",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "unused_param",
                    "3": "arg2",
                    "4": "param_2",
                    "6": "param2"
                },
                "param_3": {
                    "1": "validation_param",
                    "2": "string_param",
                    "3": "arg3",
                    "4": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_y",
                    "2": "int_param",
                    "3": "arg4",
                    "4": "input_param_4",
                    "5": "param_4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "input_parameter_5",
                    "2": "input_param_5",
                    "3": "byte_param",
                    "7": "param5"
                },
                "process_string_08005c96": {
                    "3": "process_string"
                },
                "reverse_bits_0800040c": {
                    "3": "reverse_bits"
                },
                "reverse_bits_0800042c": {
                    "1": "reverse_bits3",
                    "2": "reverse_bits"
                },
                "reverse_bits_08000a58": {
                    "1": "reverse_bits2",
                    "2": "reverse_bits"
                },
                "uVar2": {
                    "1": "result_value",
                    "12": "temp_var",
                    "2": "temp_var_1",
                    "3": "temp_var1",
                    "6": "shifted_value"
                },
                "uVar5": {
                    "1": "floating_point_calc",
                    "2": "floating_result",
                    "3": "floating_point_var",
                    "6": "floating_point_value"
                },
                "uVar6": {
                    "1": "reversed_bits_value",
                    "2": "floating_var2",
                    "4": "reversed_bits"
                },
                "validate_and_return_result_080009f0": {
                    "1": "validate_and_return",
                    "2": "validate_and_return_result"
                }
            },
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "calling": [
                "FUN_08005f2c"
            ],
            "code": "\nint process_data_08005da8(undefined4 input_param,undefined4 param2,undefined4 param3,uint param4,byte param5)\n\n{\n  int result;\n  undefined4 temp_var;\n  int conversion_result;\n  byte counter;\n  undefined8 floating_point_value;\n  undefined8 reversed_bits;\n  \n  result = check_parameters(param3,param4,param3,param4);\n  if (result == 0) {\n    result = check_parameters(param3,param4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = validate_and_return_result(param3,param4 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = process_string(input_param,&DAT_08007860);\n    }\n    else {\n      result = is_string_empty(param3,param4,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = is_input_empty(param3,param4,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = is_input_empty(param3,param4,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function(input_param,0x2d);\n            param4 = param4 + 0x80000000;\n          }\n          floating_point_value = 0x3fe0000000000000;\n          for (counter = 0; temp_var = (undefined4)((ulonglong)floating_point_value >> 0x20), counter < param5;\n              counter = counter + 1) {\n            floating_point_value = calculate_floating_point((int)floating_point_value,temp_var,0,0x40240000);\n          }\n          floating_point_value = calculate_result(param3,param4,(int)floating_point_value,temp_var);\n          temp_var = calculate_shifted_value();\n          reversed_bits = reverse_bits();\n          floating_point_value = calculate_value((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),(int)reversed_bits,\n                               (int)((ulonglong)reversed_bits >> 0x20));\n          conversion_result = convert_or_execute(input_param,temp_var,10);\n          result = result + conversion_result;\n          if (param5 != 0) {\n            conversion_result = process_string(input_param,&DAT_08007868);\n            result = result + conversion_result;\n          }\n          while (param5 != 0) {\n            floating_point_value = calculate_result((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),0,0x40240000);\n            temp_var = reverse_bits();\n            conversion_result = execute_conversion(input_param,temp_var,10);\n            result = result + conversion_result;\n            reversed_bits = reverse_bits(temp_var);\n            floating_point_value = calculate_value((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),(int)reversed_bits,\n                                 (int)((ulonglong)reversed_bits >> 0x20));\n            param5 = param5 - 1;\n          }\n        }\n        else {\n          result = process_string(input_param,&DAT_08007864);\n        }\n      }\n      else {\n        result = process_string(input_param,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = process_string(input_param,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08005da8",
            "entrypoint": "0x08005da8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005da8": "process_data_08005da8",
                "bVar4": "counter",
                "calculate_08000190": "calculate_value",
                "calculate_floating_point_0800074c": "calculate_floating_point",
                "calculate_result_08000194": "calculate_result",
                "calculate_result_080004f8": "calculate_result",
                "calculate_shifted_value_08000aa8": "calculate_shifted_value",
                "check_parameters_08000a2c": "check_parameters",
                "convert_or_execute_08005d8a": "convert_or_execute",
                "execute_conversion_08005d82": "execute_conversion",
                "execute_function_08005cb6": "execute_function",
                "iVar1": "result",
                "iVar3": "conversion_result",
                "is_input_empty_080009dc": "is_input_empty",
                "is_string_empty_08000a18": "is_string_empty",
                "param_1": "input_param",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "process_string_08005c96": "process_string",
                "reverse_bits_0800040c": "reverse_bits",
                "reverse_bits_0800042c": "reverse_bits",
                "reverse_bits_08000a58": "reverse_bits",
                "uVar2": "temp_var",
                "uVar5": "floating_point_value",
                "uVar6": "reversed_bits",
                "validate_and_return_result_080009f0": "validate_and_return_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "new_variable_name"
                },
                "FUN_08005f2c": {
                    "1": "process_data_wrapper",
                    "24": "process_data",
                    "3": "process_and_return_data"
                },
                "process_data_08005da8": {
                    "1": "process_data2",
                    "10": "process_data_helper",
                    "16": "process_data"
                }
            },
            "called": [
                "FUN_08005da8"
            ],
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "code": "\nvoid process_data_08005f2c(void)\n\n{\n  process_data_08005f2c();\n  return;\n}\n\n",
            "current_name": "process_data_08005f2c",
            "entrypoint": "0x08005f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f2c": "process_data_08005f2c",
                "process_data_08005da8": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f40": {
            "additional_data": {
                "FUN_08005f40": {
                    "1": "sum_of_processed_data",
                    "18": "calculate_sum",
                    "4": "calculate_total"
                },
                "iVar1": {
                    "1": "data_value",
                    "11": "data_processing_result",
                    "3": "data_processed",
                    "7": "data_result"
                },
                "iVar2": {
                    "1": "executed_result",
                    "16": "function_result",
                    "2": "executed_function_result",
                    "8": "function_execution_result"
                },
                "param_1": {
                    "1": "param",
                    "13": "input_value",
                    "3": "input_data",
                    "4": "input_parameter",
                    "5": "input_param"
                }
            },
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nint calculate_sum_08005f40(undefined4 input_value)\n\n{\n  int data_processing_result;\n  int function_result;\n  \n  data_processing_result = process_data_08005f2c();\n  function_result = execute_function_08005cc0(input_value);\n  return function_result + data_processing_result;\n}\n\n",
            "current_name": "calculate_sum_08005f40",
            "entrypoint": "0x08005f40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f40": "calculate_sum_08005f40",
                "iVar1": "data_processing_result",
                "iVar2": "function_result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "called": [],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005f5c",
            "entrypoint": "0x08005f5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005f5e": {
            "additional_data": {
                "FUN_08005f5e": {
                    "1": "configure_system_and_memory",
                    "23": "initialize_system",
                    "6": "initialize_system_and_memory"
                },
                "initialize_system_and_memory_08001c32": {
                    "1": "initialize_system_resources",
                    "2": "initialize_system",
                    "21": "initialize_system_and_memory",
                    "4": "initialize_memory"
                },
                "update_configuration_08002470": {
                    "1": "configure_system",
                    "24": "update_configuration",
                    "3": "set_configuration"
                }
            },
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "calling": [
                "FUN_08006198"
            ],
            "code": "\nvoid initialize_system_08005f5e(void)\n\n{\n  update_configuration(3);\n  initialize_system_08005f5e_and_memory();\n  return;\n}\n\n",
            "current_name": "initialize_system_08005f5e",
            "entrypoint": "0x08005f5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f5e": "initialize_system_08005f5e",
                "initialize_system_and_memory_08001c32": "initialize_system_and_memory",
                "update_configuration_08002470": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "additional_data": {
                "FUNC_08005a18": {
                    "1": "finalize_system",
                    "2": "perform_cleanup",
                    "3": "finalize_process",
                    "8": "cool_down_oven"
                },
                "FUNC_08005f5c": {
                    "1": "initialize_components",
                    "13": "preheat_oven",
                    "9": "initialize_system"
                },
                "FUN_08005f6c": {
                    "1": "continuous_data_processing",
                    "14": "run_reflow_oven",
                    "6": "run_reflow_process"
                },
                "initialize_reflow_oven_08000bcc": {
                    "1": "initialize_reflow",
                    "27": "initialize_reflow_oven",
                    "3": "initialize_oven"
                },
                "process_data_08000cd0": {
                    "31": "process_data"
                }
            },
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid run_reflow_oven_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  initialize_reflow_oven();\n  do {\n    process_data();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "current_name": "run_reflow_oven_08005f6c",
            "entrypoint": "0x08005f6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f6c": "run_reflow_oven_08005f6c",
                "initialize_reflow_oven_08000bcc": "initialize_reflow_oven",
                "process_data_08000cd0": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "additional_data": {
                "FUN_08005f8c": {
                    "1": "binary_to_binary_logarithm",
                    "19": "count_set_bits",
                    "3": "count_bits_set",
                    "4": "count_bits"
                },
                "cVar1": {
                    "1": "set_bit_count",
                    "22": "bit_count",
                    "3": "count"
                },
                "param_1": {
                    "1": "n",
                    "12": "num",
                    "14": "number",
                    "4": "input_number"
                }
            },
            "called": [],
            "calling": [
                "FUN_080060e4"
            ],
            "code": "\nchar count_set_bits_08005f8c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "current_name": "count_set_bits_08005f8c",
            "entrypoint": "0x08005f8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "cVar1": "bit_count",
                "param_1": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "additional_data": {
                "&DAT_20000000": {
                    "1": "memory_pointer"
                },
                "&DAT_200004b8": {
                    "1": "var1"
                },
                "&DAT_200004c4": {
                    "1": "var2"
                },
                "&DAT_200004cc": {
                    "1": "var3"
                },
                "&DAT_200004d8": {
                    "1": "var4"
                },
                "&DAT_200004e0": {
                    "1": "var5"
                },
                "&DAT_200004ec": {
                    "1": "var6"
                },
                "&DAT_200004f4": {
                    "1": "var7"
                },
                "&DAT_20000500": {
                    "1": "var8"
                },
                "&DAT_20000508": {
                    "1": "var9"
                },
                "&DAT_20000514": {
                    "1": "var10"
                },
                "&DAT_2000051c": {
                    "1": "var11"
                },
                "&DAT_20000528": {
                    "1": "var12"
                },
                "&DAT_20000530": {
                    "1": "var13"
                },
                "&DAT_2000053c": {
                    "1": "var14"
                },
                "&DAT_20000544": {
                    "1": "var15"
                },
                "&DAT_20000550": {
                    "1": "var16"
                },
                "&DAT_20000558": {
                    "1": "var17"
                },
                "&DAT_20000564": {
                    "1": "var18"
                },
                "&DAT_2000056c": {
                    "1": "var19"
                },
                "&DAT_20000578": {
                    "1": "var20"
                },
                "&DAT_20000580": {
                    "1": "var21"
                },
                "&DAT_2000058c": {
                    "1": "var22"
                },
                "&DAT_20000594": {
                    "1": "var23"
                },
                "&DAT_200005a0": {
                    "1": "var24"
                },
                "&DAT_200005a8": {
                    "1": "var25"
                },
                "&DAT_200005b4": {
                    "1": "var26"
                },
                "&DAT_200005bc": {
                    "1": "var27"
                },
                "&DAT_200005c8": {
                    "1": "var28"
                },
                "&DAT_200005d0": {
                    "1": "var29"
                },
                "&DAT_200005dc": {
                    "1": "var30"
                },
                "&DAT_200005e4": {
                    "1": "var31"
                },
                "&DAT_200005f0": {
                    "1": "var32"
                },
                "&LAB_08005fa0_1": {
                    "1": "unused3"
                },
                "FUN_08005fc8": {
                    "1": "initialize_config",
                    "16": "initialize_data",
                    "2": "initialize_values",
                    "3": "initialize_memory",
                    "5": "initialize_parameters"
                },
                "LAB_08005fa0_1": {
                    "1": "label08005fa0",
                    "2": "unused3",
                    "4": "unused_label",
                    "5": "label"
                },
                "condition": {
                    "2": "condition"
                },
                "firstParam": {
                    "1": "first_param"
                },
                "flag": {
                    "2": "flag"
                },
                "flagParam": {
                    "1": "flag"
                },
                "fourthParam": {
                    "1": "fourth_param"
                },
                "initializeConfig": {
                    "1": "initialize_config"
                },
                "initializeData": {
                    "4": "initialize_data"
                },
                "initializeFunction": {
                    "1": "initialize_data"
                },
                "initializeParameters": {
                    "1": "initialize_parameters"
                },
                "initializeSettings": {
                    "1": "initialize_settings"
                },
                "initializeValues": {
                    "1": "initialize_values"
                },
                "inputFlag": {
                    "1": "input_flag"
                },
                "inputParam": {
                    "1": "input_param"
                },
                "label08005fa0": {
                    "1": "label08005fa0"
                },
                "label1": {
                    "1": "label_flag"
                },
                "new_flagParam": {
                    "1": "flag_param"
                },
                "new_inputParam": {
                    "1": "input_param"
                },
                "new_label": {
                    "1": "label"
                },
                "param": {
                    "1": "param"
                },
                "param_1": {
                    "1": "param1",
                    "15": "flag",
                    "2": "input_param",
                    "8": "condition"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "code",
                    "22": "value"
                },
                "param_3": {
                    "1": "param",
                    "2": "undefined1",
                    "3": "unused_param",
                    "4": "unused_param_1",
                    "6": "unused1"
                },
                "param_4": {
                    "1": "auxiliary2",
                    "2": "undefined2",
                    "4": "unused_param2",
                    "5": "unused_param_2",
                    "6": "unused2"
                },
                "param_ptr": {
                    "1": "param_ptr"
                },
                "secondParam": {
                    "1": "second_param"
                },
                "shiftDataLeft": {
                    "1": "shift_data_left"
                },
                "shiftLeftBy32": {
                    "2": "shift_left_by32"
                },
                "shiftValueLeftBy32": {
                    "1": "shift_value"
                },
                "shift_left_by32_08006112": {
                    "1": "shift_values_left_by32",
                    "10": "shift_left_by32",
                    "2": "perform_shift"
                },
                "status": {
                    "1": "status"
                },
                "thirdParam": {
                    "1": "third_param"
                },
                "undefined1": {
                    "1": "undefined1"
                },
                "undefined2": {
                    "1": "undefined2"
                },
                "unusedParam": {
                    "1": "unused_param"
                },
                "unusedParam1": {
                    "1": "unused_param1"
                },
                "unusedParam2": {
                    "1": "unused_param2"
                },
                "unusedParam_2": {
                    "1": "unused_param_2"
                },
                "value": {
                    "4": "value"
                }
            },
            "called": [
                "FUN_08006112"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_08005fc8(int flag,int value,undefined4 unused1,undefined4 unused2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    shift_left_by32(0,unused3,&DAT_20000000,&DAT_200004b8,unused2);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08005fc8",
            "entrypoint": "0x08005fc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08005fa0_1": "unused3",
                "FUN_08005fc8": "initialize_data_08005fc8",
                "LAB_08005fa0_1": "label",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2",
                "shift_left_by32_08006112": "shift_left_by32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080060d4": {
            "additional_data": {
                "&DAT_200004c4": {
                    "1": "some_array"
                },
                "DAT_200004c4": {
                    "1": "data",
                    "2": "data_array"
                },
                "FUN_080060d4": {
                    "1": "process_data_if_not_null",
                    "16": "process_data",
                    "2": "process_or_recurse",
                    "4": "process_and_check_data"
                },
                "PTR_DAT_200004c4": {
                    "1": "bit_array"
                },
                "count_set_bits_08005f8c": {
                    "1": "calculate_bit_count",
                    "21": "count_set_bits"
                },
                "iVar1": {
                    "1": "count",
                    "26": "bit_count",
                    "3": "bits_count"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "data_param",
                    "5": "input_param",
                    "6": "data_ptr",
                    "8": "data"
                },
                "param_1 + 8": {
                    "1": "data_ptr"
                },
                "process_data_08007090": {
                    "1": "process_data_step",
                    "20": "process_data"
                }
            },
            "called": [
                "FUN_08007090"
            ],
            "calling": [
                "FUN_080060e4"
            ],
            "code": "\nvoid process_data_080060d4(int data)\n\n{\n  int bit_count;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  process_data_080060d4();\n  bit_count = count_set_bits();\n  if ((&DAT_200004c4)[bit_count * 5] != 0) {\n    process_data_080060d4();\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080060d4",
            "entrypoint": "0x080060d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080060d4": "process_data_080060d4",
                "count_set_bits_08005f8c": "count_set_bits",
                "iVar1": "bit_count",
                "param_1": "data",
                "process_data_08007090": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080060e4": {
            "additional_data": {
                "&DAT_200004c4": {
                    "1": "data",
                    "2": "data_array"
                },
                "DAT_200004c4": {
                    "1": "data_buffer",
                    "2": "data_array"
                },
                "FUN_080060e4": {
                    "1": "check_bit_and_process_data",
                    "12": "check_and_process_data",
                    "3": "process_bits",
                    "7": "process_set_bits"
                },
                "PTR_08005f8c": {
                    "1": "count_set_bits"
                },
                "count_set_bits_08005f8c": {
                    "1": "calculate_bit_count",
                    "11": "count_set_bits",
                    "3": "get_bit_count"
                },
                "iVar1": {
                    "1": "bits_set_count",
                    "2": "num_set_bits",
                    "21": "bit_count"
                },
                "process_data_080060d4": {
                    "1": "process_extracted_data",
                    "19": "process_data"
                }
            },
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "calling": [
                "FUN_0800282c"
            ],
            "code": "\nvoid check_and_process_data_080060e4(void)\n\n{\n  int bit_count;\n  \n  bit_count = count_set_bits();\n  if ((&DAT_200004c4)[bit_count * 5] != 0) {\n    process_data();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_process_data_080060e4",
            "entrypoint": "0x080060e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080060e4": "check_and_process_data_080060e4",
                "count_set_bits_08005f8c": "count_set_bits",
                "iVar1": "bit_count",
                "process_data_080060d4": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006112": {
            "additional_data": {
                "FUN_08006112": {
                    "1": "shift_left_by32_and_return",
                    "24": "shift_left_by32",
                    "4": "shift_left_by_32"
                },
                "param_1": {
                    "1": "source_value",
                    "2": "destination",
                    "3": "input_param",
                    "5": "input_value",
                    "7": "source"
                },
                "param_2": {
                    "1": "output_shift",
                    "2": "source",
                    "3": "input_2",
                    "5": "shift_amount",
                    "7": "destination"
                }
            },
            "called": [
                "FUN_08006158"
            ],
            "calling": [
                "FUN_08005fc8"
            ],
            "code": "\nvoid shift_left_by32_08006112(undefined4 source,undefined4 destination)\n\n{\n  shift_left_by32_08006112_08006158(destination,source);\n  return;\n}\n\n",
            "current_name": "shift_left_by32_08006112",
            "entrypoint": "0x08006112",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006112": "shift_left_by32_08006112",
                "param_1": "source",
                "param_2": "destination"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800611c": {
            "additional_data": {
                "FUN_0800611c": {
                    "1": "assertion_failed_handler",
                    "2": "print_assertion_failed",
                    "3": "process_assertion",
                    "4": "process_assertion_failed",
                    "9": "assertion_failed"
                },
                "param_1": {
                    "1": "message",
                    "14": "file",
                    "2": "assertion_message",
                    "5": "assertion",
                    "7": "file_name"
                },
                "param_2": {
                    "1": "file_name",
                    "13": "line",
                    "7": "file",
                    "8": "line_number"
                },
                "param_3": {
                    "1": "function",
                    "2": "function_name",
                    "3": "assertion",
                    "4": "condition",
                    "5": "assertion_message",
                    "7": "message"
                },
                "param_4": {
                    "1": "message",
                    "15": "function",
                    "3": "additional_info",
                    "6": "function_name"
                },
                "pcVar2": {
                    "1": "info_message",
                    "2": "delimiter",
                    "4": "prefix"
                },
                "process_data_08006174": {
                    "1": "print_assertion_error"
                },
                "process_data_08006ac0": {
                    "1": "get_current_time"
                },
                "uVar1": {
                    "1": "assertion_address",
                    "2": "data_address",
                    "4": "file_pointer",
                    "7": "file_ptr"
                },
                "uVar3": {
                    "1": "process_data_result",
                    "22": "result",
                    "3": "process_result",
                    "5": "processed_data"
                },
                "uVar4": {
                    "1": "message_ptr",
                    "2": "extra_info",
                    "4": "function_ptr"
                }
            },
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "calling": [
                "FUN_08005a68"
            ],
            "code": "\nvoid assertion_failed_0800611c(undefined4 file,undefined4 line,char *message,undefined4 function)\n\n{\n  undefined4 file_ptr;\n  char *message;\n  undefined8 result;\n  undefined4 function_ptr;\n  \n  file_ptr = *(undefined4 *)(DAT_200000f8 + 0xc);\n  function_ptr = function;\n  if (message == (char *)0x0) goto LAB_08006140;\n  message = \", function: \";\n  do {\n    print_assertion_failure_message(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,message,message,function_ptr);\n    result = get_current_time();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    file_ptr = (undefined4)result;\nLAB_08006140:\n    message = \"\";\n    message = message;\n  } while( true );\n}\n\n",
            "current_name": "assertion_failed_0800611c",
            "entrypoint": "0x0800611c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800611c": "assertion_failed_0800611c",
                "param_1": "file",
                "param_2": "line",
                "param_3": "message",
                "param_4": "function",
                "pcVar2": "message",
                "process_data_08006174": "print_assertion_failure_message",
                "process_data_08006ac0": "get_current_time",
                "uVar1": "file_ptr",
                "uVar3": "result",
                "uVar4": "function_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006158": {
            "additional_data": {
                "<undefined_variable>": {
                    "1": "<new_variable_name>"
                },
                "FUN_08006158": {
                    "1": "shift_left_u_int64",
                    "2": "shift_param_to64_bits",
                    "3": "shift_left_by32"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "param1",
                    "4": "input1",
                    "5": "flags"
                },
                "param_2": {
                    "1": "input_param",
                    "3": "input_value",
                    "4": "input2",
                    "6": "shift_amount",
                    "9": "value"
                },
                "param_3": {
                    "1": "new_param_name"
                },
                "param_4": {
                    "1": "new_param_name"
                },
                "param_n": {
                    "1": "new_parameter_n"
                },
                "ulonglong": {
                    "1": "converted_value",
                    "2": "unsigned_long_long"
                },
                "var_1": {
                    "1": "shifted_value"
                },
                "var_2": {
                    "1": "new_variable_name"
                },
                "var_n": {
                    "1": "new_variable_name"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006112"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shift_left_by32_08006158(undefined4 flags,uint value)\n\n{\n  return (unsigned_long_long)value << 0x20;\n}\n\n",
            "current_name": "shift_left_by32_08006158",
            "entrypoint": "0x08006158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006158": "shift_left_by32_08006158",
                "param_1": "flags",
                "param_2": "value",
                "ulonglong": "unsigned_long_long"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006174": {
            "additional_data": {
                "FUN_08006174": {
                    "1": "process_and_validate_data",
                    "11": "process_and_store_data",
                    "16": "process_data",
                    "2": "process_and_return_data"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_value_1",
                    "3": "input_param",
                    "7": "data_1"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "input_2",
                    "3": "input_param_2",
                    "7": "data_2"
                },
                "param_3": {
                    "1": "input1",
                    "2": "data_param_1",
                    "3": "temp_param_1"
                },
                "param_4": {
                    "1": "output_param_2",
                    "2": "data_param_2",
                    "3": "data_4"
                },
                "uStack_4": {
                    "1": "data_value_2",
                    "2": "temp_var_2",
                    "3": "stack_var_2"
                },
                "uStack_8": {
                    "1": "data_value",
                    "2": "data_variable_1",
                    "3": "stack_var_1"
                }
            },
            "called": [
                "FUN_08006394"
            ],
            "calling": [
                "FUN_0800611c"
            ],
            "code": "\nvoid process_data_08006174(undefined4 data_1,undefined4 data_2,undefined4 temp_param_1,undefined4 temp_param_2)\n\n{\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  \n  stack_var_1 = temp_param_1;\n  stack_var_2 = temp_param_2;\n  process_data_08006174_08006394(DAT_200000f8,data_1,data_2,&stack_var_1,data_1,&stack_var_1);\n  return;\n}\n\n",
            "current_name": "process_data_08006174",
            "entrypoint": "0x08006174",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006174": "process_data_08006174",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "temp_param_1",
                "param_4": "temp_param_2",
                "uStack_4": "stack_var_2",
                "uStack_8": "stack_var_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006198": {
            "additional_data": {
                "&DAT_08007944[iVar1]": {
                    "1": "function_array[index]"
                },
                "FUC_08007328": {
                    "1": "cleanup_operations"
                },
                "FUNC_08007328": {
                    "1": "cleanup_function_set",
                    "2": "cleanup_operations"
                },
                "FUN_08006198": {
                    "1": "execute_all_functions",
                    "2": "execute_function_sequence",
                    "20": "execute_functions",
                    "3": "execute_function_list"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "22": "index",
                    "6": "counter"
                }
            },
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_functions_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  FUNC_08007328();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_08006198",
            "entrypoint": "0x08006198",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080061e0": {
            "additional_data": {
                "FUN_080061e0": {
                    "1": "copy_value_to_array",
                    "15": "fill_memory",
                    "3": "initialize_memory",
                    "4": "fill_memory_with_byte",
                    "5": "memset"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "10": "memory",
                    "13": "destination",
                    "2": "dest"
                },
                "param_2": {
                    "1": "byte",
                    "26": "value",
                    "4": "byte_to_fill"
                },
                "param_3": {
                    "1": "num",
                    "10": "length",
                    "12": "size",
                    "2": "size_in_bytes",
                    "4": "num_bytes"
                },
                "puVar1": {
                    "1": "end",
                    "10": "end_address",
                    "2": "end_pointer",
                    "3": "end_memory"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "code": "\nvoid fill_memory_080061e0(undefined *destination,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + size;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_080061e0",
            "entrypoint": "0x080061e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080061f0": {
            "additional_data": {
                "DAT_200005f8": {
                    "1": "global_var"
                },
                "FUNC_08006eac": {
                    "1": "some_function",
                    "2": "initialize"
                },
                "FUNC_08006eae": {
                    "1": "finalize_linked_list",
                    "2": "process_data"
                },
                "FUN_080061f0": {
                    "1": "reverse_order_list",
                    "10": "process_data",
                    "2": "update_data_structure",
                    "7": "update_linked_list"
                },
                "extraout_r1": {
                    "1": "extra_out",
                    "2": "next_node",
                    "3": "extra_output",
                    "5": "temp1"
                },
                "param_1": {
                    "1": "result_pointer",
                    "10": "output",
                    "3": "list_head",
                    "4": "output_array",
                    "5": "result"
                },
                "param_2": {
                    "1": "input_pointer",
                    "13": "size",
                    "3": "num_elements",
                    "6": "input_size"
                },
                "param_3": {
                    "1": "input_param_1",
                    "16": "param3",
                    "2": "arg1",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "value2",
                    "16": "param4",
                    "2": "arg2",
                    "4": "arg4"
                },
                "piVar3": {
                    "1": "current_value",
                    "2": "temp",
                    "5": "temp4"
                },
                "ppiVar1": {
                    "1": "previous_array",
                    "2": "temp_pointer1",
                    "5": "temp2",
                    "6": "current_node"
                },
                "ppiVar2": {
                    "1": "next_array_ptr",
                    "2": "temp_pointer2",
                    "5": "temp3",
                    "6": "next_node"
                },
                "ppiVar4": {
                    "1": "temp4",
                    "2": "temp_pointer3",
                    "3": "temp_var4",
                    "4": "prev_node",
                    "5": "temp5"
                },
                "ppiVar5": {
                    "1": "list4",
                    "2": "new_element",
                    "3": "temp_var5",
                    "5": "temp6",
                    "7": "new_node"
                }
            },
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "code": "\nvoid process_data_080061f0(undefined4 *output,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **temp1;\n  int **current_node;\n  int **next_node;\n  int *temp4;\n  int **temp5;\n  int **new_node;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  FUNC_08006eac();\n  next_node = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current_node = temp1;\n    DAT_200005f8 = new_node;\n  }\n  else {\n    next_node = DAT_200005f8;\n    if (new_node < DAT_200005f8) {\n      current_node = (int **)*new_node;\n      next_node = (int **)((int)new_node + (int)current_node);\n      if (DAT_200005f8 == next_node) {\n        temp4 = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        next_node = (int **)((int)temp4 + (int)current_node);\n        *new_node = (int *)next_node;\n      }\n      new_node[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = new_node;\n    }\n    else {\n      do {\n        temp5 = next_node;\n        next_node = (int **)temp5[1];\n        if (next_node == (int **)0x0) break;\n      } while (next_node <= new_node);\n      current_node = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)current_node) == new_node) {\n        current_node = (int **)((int)current_node + (int)*new_node);\n        *temp5 = (int *)current_node;\n        if (next_node == (int **)((int)temp5 + (int)current_node)) {\n          temp4 = *next_node;\n          next_node = (int **)next_node[1];\n          current_node = (int **)((int)current_node + (int)temp4);\n          *temp5 = (int *)current_node;\n          temp5[1] = (int *)next_node;\n        }\n      }\n      else if (new_node < (int **)((int)temp5 + (int)current_node)) {\n        *output = 0xc;\n      }\n      else {\n        current_node = (int **)((int)new_node + (int)*new_node);\n        if (next_node == current_node) {\n          temp4 = *next_node;\n          next_node = (int **)next_node[1];\n          current_node = (int **)((int)temp4 + (int)*new_node);\n          *new_node = (int *)current_node;\n        }\n        new_node[1] = (int *)next_node;\n        temp5[1] = (int *)new_node;\n      }\n    }\n  }\n  FUNC_08006eae(output,current_node,next_node,param4);\n  return;\n}\n\n",
            "current_name": "process_data_080061f0",
            "entrypoint": "0x080061f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080061f0": "process_data_080061f0",
                "extraout_r1": "temp1",
                "param_1": "output",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar3": "temp4",
                "ppiVar1": "current_node",
                "ppiVar2": "next_node",
                "ppiVar4": "temp5",
                "ppiVar5": "new_node"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006288": {
            "additional_data": {
                "FUN_08006288": {
                    "1": "allocate_and_initialize_block",
                    "2": "allocate_and_update_memory",
                    "20": "allocate_and_assign_memory",
                    "3": "allocate_memory"
                },
                "iVar2": {
                    "1": "space_left",
                    "11": "difference",
                    "2": "block_size",
                    "4": "remaining_size",
                    "8": "offset"
                },
                "param_1": {
                    "1": "dest_ptr",
                    "12": "result",
                    "2": "destination",
                    "3": "output_buffer",
                    "4": "output"
                },
                "param_2": {
                    "1": "required_size",
                    "2": "input_size",
                    "25": "size"
                },
                "puVar1": {
                    "1": "current_entry",
                    "16": "current_block",
                    "2": "current_chunk",
                    "4": "current"
                },
                "puVar3": {
                    "1": "next_node",
                    "2": "previous_chunk",
                    "3": "previous",
                    "5": "next_block",
                    "7": "previous_block"
                },
                "puVar5": {
                    "1": "previous_previous_chunk",
                    "3": "prev_block",
                    "4": "previous_ptr",
                    "5": "previous_block"
                },
                "uVar4": {
                    "1": "block_size",
                    "3": "offset",
                    "4": "block_diff",
                    "8": "difference"
                },
                "uVar6": {
                    "1": "new_block_size",
                    "10": "aligned_size",
                    "12": "allocated_size",
                    "2": "new_size",
                    "3": "adjusted_size"
                }
            },
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "code": "\nuint allocate_and_assign_memory_08006288(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *previous_block;\n  uint difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current_block = DAT_200005f8;\n    previous_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == previous_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block != previous_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          previous_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080062ec;\n      }\n      previous_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = allocate_and_assign_memory_08006288_08006920(result);\n    }\n    current_block = (uint *)allocate_and_assign_memory_08006288_08006920(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (difference = allocate_and_assign_memory_08006288_08006920(result,(int)previous_block - (int)current_block), difference != -1)))) {\n      *previous_block = allocated_size;\nLAB_080062ec:\n      FUNC_08006eae(result);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08006eae(result);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_assign_memory_08006288",
            "entrypoint": "0x08006288",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006288": "allocate_and_assign_memory_08006288",
                "iVar2": "difference",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "puVar3": "previous_block",
                "puVar5": "previous_block",
                "uVar4": "difference",
                "uVar6": "allocated_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006344": {
            "additional_data": {
                "DAT_080078e4": {
                    "1": "dat_080078e4"
                },
                "DAT_08007904": {
                    "1": "constant_array_1"
                },
                "DAT_08007924": {
                    "1": "constant_array_2"
                },
                "FUN_08006344": {
                    "1": "process_and_update_data",
                    "14": "process_input",
                    "2": "process_input_data",
                    "9": "process_data"
                },
                "iVar1": {
                    "1": "data_comparison",
                    "2": "temp_variable",
                    "4": "temp_var1",
                    "5": "result"
                },
                "initialize_data_08006cb4": {
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "data_param",
                    "2": "input_1",
                    "3": "input_param",
                    "5": "data_ptr",
                    "8": "input_data"
                },
                "param_2": {
                    "1": "new_byte",
                    "15": "byte_value",
                    "2": "input_2",
                    "3": "value",
                    "7": "input_byte"
                },
                "param_3": {
                    "1": "data_array_param",
                    "2": "pointers",
                    "3": "input_data",
                    "5": "data_array",
                    "6": "data_ptr"
                },
                "pbVar2": {
                    "1": "pb_minus1",
                    "2": "current_byte",
                    "3": "ptr1"
                },
                "pbVar3": {
                    "1": "data_pointer2",
                    "2": "temp_byte_ptr",
                    "3": "ptr2"
                },
                "process_data_080069e4": {
                    "1": "process_data_helper",
                    "2": "process_data_1"
                },
                "process_data_08006be0": {
                    "1": "process_data2",
                    "2": "process_data_2"
                },
                "uVar4": {
                    "1": "result_as_uint",
                    "12": "result",
                    "13": "return_value"
                }
            },
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "calling": [
                "FUN_08006370"
            ],
            "code": "\nuint process_input_08006344(int input_data,byte byte_value,byte **data_ptr)\n\n{\n  int result;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint return_value;\n  \n  temp_var2 = data_ptr[2] + -1;\n  data_ptr[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_ptr[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_ptr;\n    *data_ptr = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_data();\n  }\n  if (data_ptr == (byte **)&DAT_08007904) {\n    data_ptr = *(byte ***)(input_data + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_08007924) {\n    data_ptr = *(byte ***)(input_data + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_080078e4) {\n    data_ptr = *(byte ***)(input_data + 0xc);\n  }\n  data_ptr[2] = data_ptr[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_ptr + 3);\n  result = (int)temp_var3 << 0x1c;\n  if (((result < 0) && (temp_var3 = data_ptr[4], temp_var3 != (byte *)0x0)) ||\n     (result = process_data_1(input_data,data_ptr,result,temp_var3,temp_var2), result == 0)) {\n    return_value = (uint)byte_value;\n    result = (int)*data_ptr - (int)data_ptr[4];\n    if ((result < (int)data_ptr[5]) || (result = process_data_2(input_data,data_ptr), result == 0)) {\n      data_ptr[2] = data_ptr[2] + -1;\n      temp_var2 = *data_ptr;\n      *data_ptr = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(result + 1) != data_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      result = process_data_2(input_data,data_ptr);\n      if (result == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_input_08006344",
            "entrypoint": "0x08006344",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "iVar1": "result",
                "initialize_data_08006cb4": "initialize_data",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "data_ptr",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "process_data_080069e4": "process_data_1",
                "process_data_08006be0": "process_data_2",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006370": {
            "additional_data": {
                "FUN_08006370": {
                    "1": "process_and_return_input_count",
                    "3": "process_and_increment",
                    "4": "process_and_return_result",
                    "9": "process_and_count_input"
                },
                "iVar1": {
                    "1": "last_index",
                    "23": "result"
                },
                "iVar3": {
                    "1": "current_len",
                    "14": "current_index",
                    "2": "current_size",
                    "7": "current_length"
                },
                "param_1": {
                    "1": "first_param",
                    "11": "arg1",
                    "2": "input_param_1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "second_param",
                    "11": "arg2",
                    "2": "input_2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "input_ptr",
                    "11": "input_data",
                    "3": "data"
                },
                "param_4": {
                    "1": "size",
                    "2": "array_size",
                    "3": "input_size",
                    "5": "length",
                    "8": "array_length",
                    "9": "input_length"
                },
                "puVar2": {
                    "1": "end",
                    "10": "end_ptr",
                    "2": "end_of_array",
                    "3": "end_of_data",
                    "4": "end_pointer",
                    "6": "end_of_input"
                }
            },
            "called": [
                "FUN_08006344"
            ],
            "calling": [
                "FUN_08006394"
            ],
            "code": "\nint process_input_08006370(undefined4 arg1,undefined4 arg2,undefined *input_array,int input_length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = input_array + input_length;\n  current_index = input_length;\n  do {\n    if (input_array == end_ptr) {\n      return 0;\n    }\n    result = process_input_08006370_08006344(arg1,*input_array,arg2,input_length,current_index);\n    input_length = result + 1;\n    input_array = input_array + 1;\n  } while (input_length != 0);\n  return result;\n}\n\n",
            "current_name": "process_input_08006370",
            "entrypoint": "0x08006370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006370": "process_input_08006370",
                "iVar1": "result",
                "iVar3": "current_index",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "input_array",
                "param_4": "input_length",
                "puVar2": "end_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006394": {
            "additional_data": {
                "FUN_08006394": {
                    "1": "process_input_data",
                    "14": "process_data",
                    "2": "process_and_convert_data",
                    "4": "process_input_and_convert_data",
                    "5": "process_input"
                },
                "bVar3": {
                    "1": "has_number",
                    "2": "is_valid",
                    "5": "is_number",
                    "6": "is_numeric",
                    "7": "is_digit"
                },
                "findCharacter_08006e90": {
                    "1": "find_char"
                },
                "find_character_08006e90": {
                    "3": "find_character"
                },
                "iVar1": {
                    "23": "result",
                    "7": "return_value"
                },
                "iVar6": {
                    "1": "result",
                    "2": "temp_var2",
                    "3": "temp_value",
                    "4": "value",
                    "5": "index",
                    "8": "temp_var"
                },
                "initializeData_08006cb4": {
                    "1": "initialize_data"
                },
                "initialize_data_08006cb4": {
                    "3": "initialize_data"
                },
                "local_10": {
                    "1": "temp_flag"
                },
                "local_30": {
                    "1": "zero_pad",
                    "2": "length",
                    "3": "zero_flag"
                },
                "local_45": {
                    "1": "numeric_flag",
                    "2": "flag45",
                    "3": "flag3",
                    "4": "hash_flag"
                },
                "local_6e": {
                    "1": "char2",
                    "16": "plus_flag",
                    "2": "plus",
                    "3": "flag2"
                },
                "local_6f": {
                    "1": "local_var1",
                    "16": "space_flag",
                    "2": "space",
                    "3": "flag1"
                },
                "local_70": {
                    "1": "flag_char",
                    "2": "conversion_type",
                    "3": "format_char",
                    "6": "conversion_specifier"
                },
                "local_74": {
                    "1": "total_bytes_written",
                    "2": "total",
                    "3": "total_bytes",
                    "6": "total_size",
                    "7": "total_length"
                },
                "local_7c": {
                    "1": "local_var4",
                    "15": "width",
                    "2": "number"
                },
                "local_80": {
                    "1": "undefined4",
                    "2": "unused",
                    "3": "padding",
                    "4": "alignment"
                },
                "local_84": {
                    "1": "flag2",
                    "17": "precision",
                    "2": "decimal",
                    "3": "int_value"
                },
                "local_88": {
                    "1": "flag_value",
                    "18": "flags"
                },
                "local_8c": {
                    "1": "output_data_ptr",
                    "3": "result_ptr",
                    "4": "output_size_ptr",
                    "6": "output_ptr"
                },
                "local_c": {
                    "1": "temp_flag2"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "arg1",
                    "3": "data_pointer",
                    "5": "data_ptr",
                    "8": "input_data"
                },
                "param_2": {
                    "1": "conversion_data",
                    "2": "format_specifier",
                    "3": "config_ptr"
                },
                "param_3": {
                    "1": "input_str",
                    "11": "input_string",
                    "3": "byte_array",
                    "4": "input",
                    "5": "input_data"
                },
                "param_4": {
                    "1": "result_pointer",
                    "2": "output",
                    "3": "output_length",
                    "5": "result",
                    "6": "output_size"
                },
                "pbVar4": {
                    "1": "curr_char",
                    "15": "current_char",
                    "2": "byte_ptr1",
                    "3": "current_char_ptr"
                },
                "pbVar5": {
                    "1": "byte_pointer2",
                    "16": "next_char",
                    "2": "current_byte",
                    "3": "byte_ptr2"
                },
                "piVar2": {
                    "1": "temp_pointer",
                    "2": "counter_ptr",
                    "3": "ptr_var",
                    "6": "ptr"
                },
                "processData_080069e4": {
                    "1": "process_data"
                },
                "processInput_08006370": {
                    "1": "process_input_data"
                },
                "process_and_convert_data_080066b0": {
                    "4": "process_and_convert_data"
                },
                "process_data_080069e4": {
                    "1": "process_data"
                },
                "process_input_08006370": {
                    "3": "process_input"
                },
                "unaff_r9": {
                    "1": "unaffected_r9",
                    "2": "temp_var",
                    "3": "additional_data",
                    "4": "conversion_result"
                }
            },
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint process_data_08006394(int input_data,undefined4 *config_ptr,byte *input_string,int *output_size)\n\n{\n  int result;\n  int *ptr;\n  bool is_digit;\n  byte *current_char;\n  byte *next_char;\n  int conversion_result;\n  int temp_var;\n  int *output_ptr;\n  uint flags;\n  int precision;\n  undefined4 alignment;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined hash_flag;\n  undefined4 zero_flag;\n  \n  output_ptr = output_size;\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_data();\n  }\n  if (config_ptr == &DAT_08007904) {\n    config_ptr = *(undefined4 **)(input_data + 4);\n  }\n  else if (config_ptr == (undefined4 *)&DAT_08007924) {\n    config_ptr = *(undefined4 **)(input_data + 8);\n  }\n  else if (config_ptr == (undefined4 *)&DAT_080078e4) {\n    config_ptr = *(undefined4 **)(input_data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(config_ptr + 3) << 0x1c)) || (config_ptr[4] == 0)) &&\n     (temp_var = process_data_08006394(input_data,config_ptr), temp_var != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = input_string;\nLAB_080063d6:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  temp_var = (int)next_char - (int)input_string;\n  if (temp_var != 0) {\n    result = process_input(input_data,config_ptr,input_string,temp_var);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(config_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + temp_var;\n  }\n  if (*next_char == 0) goto LAB_08006580;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  alignment = 0;\n  hash_flag = 0;\n  zero_flag = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    temp_var = find_character(\"#-0+ \",*current_char);\n    input_string = current_char + 1;\n    if (temp_var == 0) break;\n    flags = 1 << (temp_var + 0xf7ff8750U & 0xff) | flags;\n    current_char = input_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = output_ptr + 1;\n    temp_var = *output_ptr;\n    output_ptr = ptr;\n    if (temp_var < 0) {\n      width = -temp_var;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    is_digit = false;\n    temp_var = width;\n    input_string = current_char;\n    while( true ) {\n      if (9 < *input_string - 0x30) break;\n      temp_var = temp_var * 10 + (*input_string - 0x30);\n      is_digit = true;\n      input_string = input_string + 1;\n    }\n    if (!is_digit) goto LAB_080064be;\n  }\n  width = temp_var;\nLAB_080064be:\n  if (*input_string == 0x2e) {\n    if (input_string[1] == 0x2a) {\n      input_string = input_string + 2;\n      ptr = output_ptr + 1;\n      precision = *output_ptr;\n      output_ptr = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      temp_var = 0;\n      precision = 0;\n      while( true ) {\n        input_string = input_string + 1;\n        if (9 < *input_string - 0x30) break;\n        temp_var = temp_var * 10 + (*input_string - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = temp_var;\n      }\n    }\n  }\n  temp_var = find_character(&DAT_080078b6,*input_string,3);\n  if (temp_var != 0) {\n    input_string = input_string + 1;\n    flags = flags | 0x40 << (temp_var + 0xf7ff874aU & 0xff);\n  }\n  conversion_specifier = *input_string;\n  input_string = input_string + 1;\n  temp_var = find_character(\"efgEFG\",conversion_specifier,6);\n  if (temp_var == 0) {\n    conversion_result = process_and_convert_data(input_data,&flags,config_ptr,0x8006371,&output_ptr);\n    if (conversion_result == -1) goto LAB_08006580;\n  }\n  else {\n    output_ptr = (int *)(((int)output_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + conversion_result;\n  current_char = input_string;\n  goto LAB_080063d6;\n}\n\n",
            "current_name": "process_data_08006394",
            "entrypoint": "0x08006394",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006394": "process_data_08006394",
                "bVar3": "is_digit",
                "find_character_08006e90": "find_character",
                "iVar1": "result",
                "iVar6": "temp_var",
                "initialize_data_08006cb4": "initialize_data",
                "local_30": "zero_flag",
                "local_45": "hash_flag",
                "local_6e": "plus_flag",
                "local_6f": "space_flag",
                "local_70": "conversion_specifier",
                "local_74": "total_length",
                "local_7c": "width",
                "local_80": "alignment",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "output_ptr",
                "param_1": "input_data",
                "param_2": "config_ptr",
                "param_3": "input_string",
                "param_4": "output_size",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "piVar2": "ptr",
                "process_and_convert_data_080066b0": "process_and_convert_data",
                "process_data_080069e4": "process_data",
                "process_input_08006370": "process_input",
                "unaff_r9": "conversion_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080065c0": {
            "additional_data": {
                "0xffffffff": {
                    "1": "error_value"
                },
                "FUN_080065c0": {
                    "1": "count_reversed_bytes",
                    "18": "process_data",
                    "2": "decode_and_process_data"
                },
                "bVar5": {
                    "1": "has_char",
                    "2": "condition_check",
                    "3": "is_flag_set",
                    "4": "flag",
                    "5": "is_condition_met",
                    "7": "condition"
                },
                "bVar8": {
                    "1": "is_case3"
                },
                "byteData": {
                    "1": "case2_data"
                },
                "byteFlag": {
                    "1": "case2_flag"
                },
                "byteValue": {
                    "1": "case1_value"
                },
                "byte_43": {
                    "1": "has_flag"
                },
                "byte_45": {
                    "1": "copy_flag"
                },
                "iVar1": {
                    "1": "outer_loop_counter",
                    "14": "index",
                    "2": "loop_index1",
                    "3": "loop_index"
                },
                "iVar2": {
                    "1": "index",
                    "13": "result",
                    "2": "callback_result",
                    "4": "return_value"
                },
                "iVar6": {
                    "1": "status"
                },
                "iVar7": {
                    "1": "index"
                },
                "param_1": {
                    "1": "input1",
                    "11": "input",
                    "2": "input_param",
                    "3": "input_data",
                    "4": "input_value",
                    "5": "data"
                },
                "param_2": {
                    "1": "metadata",
                    "2": "header",
                    "4": "params",
                    "6": "data",
                    "8": "data_array"
                },
                "param_3": {
                    "1": "output_count",
                    "3": "output_value",
                    "4": "output_length",
                    "6": "result",
                    "7": "output"
                },
                "param_4": {
                    "1": "input3",
                    "12": "param_4",
                    "3": "param4",
                    "4": "param",
                    "5": "additional_param"
                },
                "param_5": {
                    "1": "processing_function",
                    "16": "callback",
                    "4": "callback_function",
                    "6": "callback_func"
                },
                "uVar10": {
                    "1": "temp_count"
                },
                "uVar3": {
                    "1": "max_output_length",
                    "16": "max_value",
                    "2": "max_count",
                    "4": "max_length",
                    "7": "max_size"
                },
                "uVar4": {
                    "1": "u_var4",
                    "11": "offset",
                    "2": "additional_length",
                    "3": "temp_value"
                },
                "uVar9": {
                    "1": "count"
                }
            },
            "called": [],
            "calling": [
                "FUN_080066b0"
            ],
            "code": "\nundefined4\nprocess_data_080065c0(undefined4 input,uint *data_array,uint *output,undefined4 param_4,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint offset;\n  bool condition;\n  \n  max_value = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_value = data_array[2];\n  }\n  *output = max_value;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output = max_value + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *output); index = index + 1) {\n      result = (*callback)(input,param_4,(int)data_array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data_array + max_value + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  index = (*callback)(input,param_4,(int)data_array + 0x43,offset);\n  if (index != -1) {\n    max_value = data_array[3];\n    condition = (*data_array & 6) != 4;\n    if (condition) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!condition) {\n      max_value = max_value - *output;\n    }\n    if (!condition) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_value = max_value + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param_4,(int)data_array + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_080065c0",
            "entrypoint": "0x080065c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "bVar5": "condition",
                "iVar1": "index",
                "iVar2": "result",
                "param_1": "input",
                "param_2": "data_array",
                "param_3": "output",
                "param_5": "callback",
                "uVar3": "max_value",
                "uVar4": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080066b0": {
            "additional_data": {
                "FUN_080066b0": {
                    "1": "convert_and_process_data",
                    "2": "decode_and_process_data",
                    "3": "reverse_and_process_data",
                    "4": "process_and_convert_data"
                },
                "bVar1": {
                    "1": "first_character",
                    "14": "byte_value",
                    "2": "first_byte",
                    "4": "byte_var",
                    "7": "byte_val"
                },
                "dataArray": {
                    "1": "data_arr"
                },
                "dataArray + 0x43": {
                    "1": "data_ptr"
                },
                "dataArray[0]": {
                    "1": "data_val0"
                },
                "dataArray[1]": {
                    "1": "data_val1"
                },
                "dataPtr": {
                    "1": "data_ptr"
                },
                "dataVal0": {
                    "1": "data_val0"
                },
                "formData": {
                    "1": "form_data"
                },
                "formData - dataPtr": {
                    "1": "form_data_len"
                },
                "formDataLen": {
                    "1": "form_data_len"
                },
                "iVar2": {
                    "1": "int_var",
                    "17": "index",
                    "2": "result",
                    "3": "loop_index"
                },
                "iVar4": {
                    "1": "loop_var2",
                    "10": "result",
                    "2": "int_var2",
                    "3": "inner_index"
                },
                "local_24": {
                    "1": "local_vals",
                    "14": "local_array"
                },
                "paramArr": {
                    "1": "param_arr"
                },
                "paramArr + 1": {
                    "1": "param_arr_ptr"
                },
                "param_1": {
                    "1": "param",
                    "2": "data",
                    "3": "arg1",
                    "4": "input",
                    "5": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "10": "data",
                    "2": "input_data",
                    "3": "buffer",
                    "5": "data_array"
                },
                "param_2 + 0x45": {
                    "1": "format_char"
                },
                "param_2 + 6": {
                    "1": "data_array[6]"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "arg3",
                    "3": "param",
                    "5": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "convert_func",
                    "3": "conversion_function",
                    "4": "callback_function",
                    "6": "callback_func",
                    "9": "callback"
                },
                "param_5": {
                    "1": "counter_ptr",
                    "2": "output_param",
                    "3": "output"
                },
                "pcVar11": {
                    "1": "output_str",
                    "2": "output_string",
                    "3": "temp_char_ptr",
                    "5": "char_ptr2"
                },
                "pcVar12": {
                    "1": "input_pointer",
                    "2": "str_ptr",
                    "3": "str",
                    "5": "char_ptr3"
                },
                "pcVar5": {
                    "1": "char_array",
                    "5": "hex_digits",
                    "7": "hex_chars",
                    "9": "char_ptr"
                },
                "ppcVar8": {
                    "1": "string_ptr_ptr",
                    "2": "char_ptr_ptr"
                },
                "ppuVar7": {
                    "1": "double_ptr",
                    "3": "ptr_ptr"
                },
                "puVar3": {
                    "1": "pointer_value",
                    "13": "ptr",
                    "2": "temp_ptr",
                    "3": "ptr1",
                    "4": "pointer"
                },
                "uVar10": {
                    "1": "value_2",
                    "2": "temp_length",
                    "3": "temp",
                    "4": "value2"
                },
                "uVar6": {
                    "1": "uint_var",
                    "2": "num",
                    "3": "temp_var",
                    "4": "base",
                    "5": "value"
                },
                "uVar9": {
                    "1": "number_value",
                    "2": "value1",
                    "3": "converted_value",
                    "4": "result_value",
                    "5": "result",
                    "8": "value"
                }
            },
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "calling": [
                "FUN_08006394"
            ],
            "code": "\nuint process_and_convert_data_080066b0(undefined4 param1,uint *data,undefined4 param3,code *callback,uint **output)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int result;\n  char *char_ptr;\n  uint temp_value;\n  uint **ptr_ptr;\n  char **char_ptr_ptr;\n  uint value;\n  uint value2;\n  char *char_ptr2;\n  char *char_ptr3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data + 6);\n  char_ptr3 = (char *)((int)data + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800686a;\n          if (byte_value != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_080067fa:\n          temp_value = *data;\n          ptr = *output;\n          *output = ptr + 1;\n          if (((temp_value & 0x80) == 0) && ((int)(temp_value << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(temp_value << 0x1f) < 0) {\n            *data = temp_value | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          temp_value = 0x10;\nLAB_08006790:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080066e0;\n          value = *data;\n          ptr = *output;\n          if ((value & 0x80) == 0) {\n            *output = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08006700;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output = ptr + 1;\nLAB_08006700:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          temp_value = 10;\n        }\n        value2 = data[1];\n        data[2] = value2;\n        char_ptr2 = char_ptr3;\n        if ((int)value2 < 0) {\n          if (value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)data + 0x42) = *char_ptr;\n          char_ptr2 = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (value2 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              value2 = value / temp_value;\n              char_ptr2 = char_ptr2 + -1;\n              *char_ptr2 = char_ptr[value - temp_value * value2];\n              value = value2;\n            } while (value2 != 0);\n          }\n        }\n        if (((temp_value == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          char_ptr2[-1] = '0';\n          char_ptr2 = char_ptr2 + -1;\n        }\n        data[4] = (int)char_ptr3 - (int)char_ptr2;\n        char_ptr3 = char_ptr2;\n        goto LAB_080067d6;\n      }\n      ptr = *output;\n      *output = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08006740:\n      char_ptr3 = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08006766:\n            value = *data;\n            ptr = *output;\n            if ((value & 0x80) == 0) {\n              *output = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08006774;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output = ptr + 1;\nLAB_08006774:\n              value = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              temp_value = 8;\n            }\n            else {\n              temp_value = 10;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byte_value == 0x70) {\n            *data = *data | 0x20;\nLAB_08006726:\n            char_ptr = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08006766;\n          if (byte_value == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)data + 0x42) = byte_value;\n        goto LAB_08006740;\n      }\n      char_ptr_ptr = (char **)*output;\n      *output = (uint *)(char_ptr_ptr + 1);\n      char_ptr3 = *char_ptr_ptr;\n      index = find_character_08006e90(char_ptr3,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)char_ptr3;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  value = *data;\n  ptr_ptr = (uint **)*output;\n  temp_value = data[5];\n  if ((value & 0x80) == 0) {\n    *output = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\n    if ((value & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptr = (short)temp_value;\n  }\n  else {\n    *output = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\nLAB_08006856:\n    *ptr = temp_value;\n  }\nLAB_0800686a:\n  data[4] = 0;\nLAB_080067d6:\n  index = process_data_080065c0(param1,data,local_array,param3,callback);\n  if ((index == -1) || (index = (*callback)(param1,param3,char_ptr3,data[4]), index == -1)) {\nLAB_080067ea:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - local_array[0]); index = index + 1) {\n        result = (*callback)(param1,param3,(int)data + 0x19,1);\n        if (result == -1) goto LAB_080067ea;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "current_name": "process_and_convert_data_080066b0",
            "entrypoint": "0x080066b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080066b0": "process_and_convert_data_080066b0",
                "bVar1": "byte_value",
                "iVar2": "index",
                "iVar4": "result",
                "local_24": "local_array",
                "param_1": "param1",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "output",
                "pcVar11": "char_ptr2",
                "pcVar12": "char_ptr3",
                "pcVar5": "char_ptr",
                "ppcVar8": "char_ptr_ptr",
                "ppuVar7": "ptr_ptr",
                "puVar3": "ptr",
                "uVar10": "value2",
                "uVar6": "temp_value",
                "uVar9": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080068f0": {
            "additional_data": {
                "FUN_080068f0": {
                    "1": "execute_data_processing",
                    "10": "process_data",
                    "20": "process_and_initialize_data"
                },
                "iVar1": {
                    "1": "data_1",
                    "2": "data",
                    "3": "data_pointer",
                    "4": "data_address",
                    "5": "data_variable",
                    "8": "data_ptr"
                },
                "param_1": {
                    "1": "input1",
                    "11": "input_param",
                    "2": "input_data",
                    "3": "input_param_1",
                    "4": "data_param"
                },
                "param_2": {
                    "1": "input_2",
                    "13": "param_2",
                    "2": "second_param",
                    "3": "input_param_2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "output_param_2",
                    "13": "param_3",
                    "2": "third_param",
                    "3": "input_param_3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "input4",
                    "13": "param_4",
                    "2": "fourth_param",
                    "3": "input_param_4",
                    "4": "arg4"
                },
                "uStack_4": {
                    "1": "fourth_var",
                    "2": "temp_stack_4",
                    "3": "stack_4"
                },
                "uStack_8": {
                    "1": "third_var",
                    "2": "param_3_copy",
                    "3": "stack_var2"
                },
                "uStack_c": {
                    "1": "param_2_var",
                    "2": "temp_stack_c",
                    "3": "stack_c"
                },
                "uVar2": {
                    "1": "result",
                    "2": "input_ptr",
                    "3": "param_1_copy",
                    "6": "input_var"
                }
            },
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "calling": [
                "FUN_08004f4c"
            ],
            "code": "\nvoid process_and_initialize_data_080068f0(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_ptr;\n  undefined4 input_var;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  \n  data_ptr = DAT_200000f8;\n  input_var = input_param;\n  stack_var1 = param_2;\n  stack_var2 = param_3;\n  stack_var3 = param_4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_08006cb4(DAT_200000f8);\n  }\n  process_data_08006394(data_ptr,*(undefined4 *)(data_ptr + 8),input_param,&stack_var1,input_var,&stack_var1);\n  return;\n}\n\n",
            "current_name": "process_and_initialize_data_080068f0",
            "entrypoint": "0x080068f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080068f0": "process_and_initialize_data_080068f0",
                "iVar1": "data_ptr",
                "param_1": "input_param",
                "uStack_4": "stack_var3",
                "uStack_8": "stack_var2",
                "uStack_c": "stack_var1",
                "uVar2": "input_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006920": {
            "additional_data": {
                "*param_1": {
                    "1": "result_ptr"
                },
                "DAT_200006a4": {
                    "1": "assigned_memory"
                },
                "FUN_08006920": {
                    "1": "allocate_memory",
                    "13": "allocate_and_assign_memory",
                    "2": "allocate_and_check_memory",
                    "4": "allocate_and_store_memory",
                    "7": "initialize_memory"
                },
                "iVar1": {
                    "1": "allocated_ptr",
                    "17": "allocation_result",
                    "2": "memory_allocation_result",
                    "5": "allocated_memory"
                },
                "param_1": {
                    "1": "memory_location",
                    "2": "memory_address",
                    "4": "result_pointer",
                    "6": "output_pointer",
                    "7": "result"
                },
                "param_2": {
                    "1": "required_size",
                    "2": "allocation_size",
                    "20": "size",
                    "7": "memory_size"
                }
            },
            "called": [
                "FUN_080056d8"
            ],
            "calling": [
                "FUN_08006288"
            ],
            "code": "\nvoid allocate_and_assign_memory_08006920(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_200006a4 = 0;\n  allocation_result = allocate_memory_080056d8(size);\n  if ((allocation_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_and_assign_memory_08006920",
            "entrypoint": "0x08006920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006920": "allocate_and_assign_memory_08006920",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069e4": {
            "additional_data": {
                "&DAT_080078e4": {
                    "1": "constant_3"
                },
                "&DAT_08007904": {
                    "1": "value_a",
                    "2": "constant_1"
                },
                "&DAT_08007924": {
                    "1": "constant2"
                },
                "(undefined4 *)&DAT_080078e4": {
                    "1": "constant_3"
                },
                "(undefined4 *)&DAT_08007924": {
                    "1": "constant2_ptr"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "data"
                },
                "*(ushort *)(param_2 + 3) & 0x280": {
                    "1": "check_value"
                },
                "DAT_200000f8": {
                    "1": "data_ptr"
                },
                "FUNC_08006cb4": {
                    "1": "initialize_input",
                    "2": "cleanup_data"
                },
                "FUN_080069e4": {
                    "1": "process_and_get_result",
                    "28": "process_data"
                },
                "iVar1": {
                    "1": "data_addr",
                    "3": "data_offset",
                    "4": "base_address",
                    "6": "data_address",
                    "8": "data_ptr"
                },
                "initialize_memory_08006e10": {
                    "8": "initialize_memory"
                },
                "param_1": {
                    "1": "output_buffer",
                    "11": "output",
                    "3": "result",
                    "8": "output_param"
                },
                "param_2": {
                    "1": "input_value",
                    "12": "input",
                    "3": "input_ptr",
                    "4": "input_data",
                    "9": "input_param"
                },
                "param_2[0xd]": {
                    "1": "pointer_to_data"
                },
                "param_2[4]": {
                    "1": "pointer_to_memory"
                },
                "param_2[5]": {
                    "1": "value"
                },
                "process_data_080061f0": {
                    "1": "process_data_function",
                    "3": "process_data_helper"
                },
                "uVar2": {
                    "1": "status",
                    "25": "result",
                    "4": "return_value"
                },
                "uVar3": {
                    "1": "input_data_value",
                    "19": "flags",
                    "3": "flag",
                    "6": "input_value"
                }
            },
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "code": "\nuint process_data_080069e4(undefined4 *output,undefined4 *input)\n\n{\n  int data_ptr;\n  uint result;\n  ushort flags;\n  \n  data_ptr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_08006cb4(DAT_200000f8);\n  }\n  if (input == &DAT_08007904) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)&DAT_08007924) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)&DAT_080078e4) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)pointer_to_data != (undefined4 *)0x0) {\n        if ((undefined4 *)pointer_to_data != input + 0x11) {\n          process_data_080069e4_helper(output);\n        }\n        pointer_to_data = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = pointer_to_memory;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((pointer_to_memory == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    initialize_memory(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = value;\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -value;\n  }\n  if (pointer_to_memory == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          process_data_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n",
            "current_name": "process_data_080069e4",
            "entrypoint": "0x080069e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "iVar1": "data_ptr",
                "initialize_memory_08006e10": "initialize_memory",
                "param_1": "output",
                "param_2": "input",
                "param_2[0xd]": "pointer_to_data",
                "param_2[4]": "pointer_to_memory",
                "param_2[5]": "value",
                "process_data_080061f0": "process_data_helper",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "additional_data": {
                "FUN_08006ac0": {
                    "1": "handle_data_processing",
                    "22": "process_data",
                    "3": "initialize_and_process_data"
                },
                "LAB_08006aea": {
                    "1": "label_2"
                },
                "LAB_08006bc6": {
                    "1": "label_1"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_function",
                    "2": "jumptable_function",
                    "3": "jump_table_func",
                    "4": "unrecovered_jumptable",
                    "9": "jump_table"
                },
                "bVar11": {
                    "1": "is_set",
                    "2": "is_true",
                    "4": "flag",
                    "6": "is_zero"
                },
                "iVar10": {
                    "1": "variable_6"
                },
                "iVar11": {
                    "1": "variable_7"
                },
                "iVar12": {
                    "1": "variable_8"
                },
                "iVar13": {
                    "1": "variable_9"
                },
                "iVar14": {
                    "1": "variable_10"
                },
                "iVar15": {
                    "1": "variable_11"
                },
                "iVar16": {
                    "1": "variable_12"
                },
                "iVar17": {
                    "1": "variable_13"
                },
                "iVar18": {
                    "1": "variable_14"
                },
                "iVar19": {
                    "1": "variable_15"
                },
                "iVar2": {
                    "1": "variable1",
                    "2": "temp",
                    "4": "temp_var",
                    "6": "offset"
                },
                "iVar20": {
                    "1": "variable_16"
                },
                "iVar21": {
                    "1": "variable_17"
                },
                "iVar22": {
                    "1": "variable_18"
                },
                "iVar23": {
                    "1": "variable_19"
                },
                "iVar24": {
                    "1": "variable_20"
                },
                "iVar25": {
                    "1": "variable_21"
                },
                "iVar26": {
                    "1": "variable_22"
                },
                "iVar27": {
                    "1": "variable_23"
                },
                "iVar28": {
                    "1": "variable_24"
                },
                "iVar29": {
                    "1": "variable_25"
                },
                "iVar30": {
                    "1": "variable_26"
                },
                "iVar31": {
                    "1": "variable_27"
                },
                "iVar4": {
                    "1": "loop_var2"
                },
                "iVar5": {
                    "1": "variable_2"
                },
                "iVar6": {
                    "1": "variable_3"
                },
                "iVar7": {
                    "1": "variable2",
                    "2": "loop_counter"
                },
                "iVar8": {
                    "1": "variable_5"
                },
                "iVar9": {
                    "1": "var_5",
                    "2": "loop_counter"
                },
                "infinite_loop_0800573c": {
                    "1": "infinite_loop_function",
                    "13": "infinite_loop"
                },
                "initialize_function_08006f00": {
                    "13": "initialize_function",
                    "2": "initialize"
                },
                "pcVar8": {
                    "1": "function",
                    "2": "code_ptr",
                    "3": "callback_function",
                    "5": "function_pointer"
                },
                "piVar3": {
                    "1": "function_params",
                    "3": "pointer1",
                    "4": "data_pointer",
                    "7": "data_ptr"
                },
                "piVar4": {
                    "1": "temp_vars",
                    "2": "temp_pointer"
                },
                "process_data_080061f0": {
                    "1": "process_data_func",
                    "2": "process_data"
                },
                "puVar1": {
                    "1": "result",
                    "2": "value_ptr",
                    "3": "data_ptr"
                },
                "uVar10": {
                    "1": "u_var_2",
                    "2": "temp_uint",
                    "8": "temp_value"
                },
                "uVar12": {
                    "1": "var_7",
                    "2": "return_value",
                    "3": "function_result",
                    "6": "result",
                    "8": "loop_result"
                },
                "uVar5": {
                    "1": "flag_value",
                    "2": "data_value",
                    "3": "value",
                    "5": "ushort_value"
                },
                "uVar6": {
                    "1": "data_flag",
                    "11": "flags",
                    "2": "temp_ushort"
                }
            },
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "code": "\nvoid process_data_08006ac0(void)\n\n{\n  uint *data_ptr;\n  int offset;\n  int *data_ptr;\n  int *data2;\n  uint ushort_value;\n  ushort flags;\n  int temp_var2;\n  code *function_pointer;\n  int loop_var;\n  uint temp_value;\n  code *jump_table;\n  bool is_zero;\n  undefined8 loop_result;\n  \n  initialize_function(6);\n  jump_table = (code *)0x8006acf;\n  loop_result = infinite_loop(1);\n  data_ptr = (int *)((ulonglong)loop_result >> 0x20);\n  data_ptr = (uint *)loop_result;\n  flags = *(ushort *)(data_ptr + 3);\n  ushort_value = (uint)flags;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    offset = data_ptr[4];\n    if (offset != 0) {\n      temp_var2 = ushort_value << 0x1e;\n      is_zero = temp_var2 != 0;\n      if (is_zero) {\n        temp_var2 = 0;\n      }\n      loop_var = *data_ptr;\n      if (!is_zero) {\n        temp_var2 = data_ptr[5];\n      }\n      *data_ptr = offset;\n      data_ptr[2] = temp_var2;\n      for (loop_var = loop_var - offset; 0 < loop_var; loop_var = loop_var - temp_var2) {\n        temp_var2 = (*(code *)data_ptr[10])(data_ptr,data_ptr[8],offset,loop_var);\n        if (temp_var2 < 1) {\n          flags = *(ushort *)(data_ptr + 3);\n          goto label_1;\n        }\n        offset = offset + temp_var2;\n      }\n    }\n  }\n  else if (((0 < data_ptr[1]) || (0 < data_ptr[0x10])) &&\n          (function_pointer = (code *)data_ptr[0xb], function_pointer != (code *)0x0)) {\n    temp_value = *data_ptr;\n    *data_ptr = 0;\n    if ((flags & 0x1000) == 0) {\n      offset = (*function_pointer)(data_ptr,data_ptr[8],ushort_value & 0x1000,1);\n      if ((offset == -1) && (ushort_value = *data_ptr, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *data_ptr = temp_value;\n        goto label_2;\n      }\n    }\n    else {\n      offset = data_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_ptr + 3) << 0x1d) < 0) &&\n       (offset = offset - data_ptr[1], data_ptr[0xd] != 0)) {\n      offset = offset - data_ptr[0x10];\n    }\n    offset = (*(code *)data_ptr[0xb])(data_ptr,data_ptr[8],offset,0);\n    flags = *(ushort *)(data_ptr + 3);\n    if ((offset == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nlabel_1:\n      *(ushort *)(data_ptr + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    data_ptr[1] = 0;\n    *data_ptr = data_ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((offset != -1 || (*data_ptr == 0)))) {\n      data_ptr[0x15] = offset;\n    }\n    data2 = (int *)data_ptr[0xd];\n    *data_ptr = temp_value;\n    if (data2 != (int *)0x0) {\n      if (data2 != data_ptr + 0x11) {\n        process_data_08006ac0(data_ptr);\n      }\n      data_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nlabel_2:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "process_data_08006ac0",
            "entrypoint": "0x08006ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ac0": "process_data_08006ac0",
                "LAB_08006aea": "label_2",
                "LAB_08006bc6": "label_1",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "is_zero",
                "iVar2": "offset",
                "iVar4": "loop_var2",
                "iVar7": "temp_var2",
                "iVar9": "loop_var",
                "infinite_loop_0800573c": "infinite_loop",
                "initialize_function_08006f00": "initialize_function",
                "pcVar8": "function_pointer",
                "piVar3": "data_ptr",
                "piVar4": "data2",
                "process_data_080061f0": "process_data",
                "puVar1": "data_ptr",
                "uVar10": "temp_value",
                "uVar12": "loop_result",
                "uVar5": "ushort_value",
                "uVar6": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006be0": {
            "additional_data": {
                "FUN_08006be0": {
                    "1": "process_binary_data",
                    "21": "process_data"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jumptable_func",
                    "2": "recovery_table",
                    "8": "jump_table"
                },
                "bVar10": {
                    "1": "condition_flag"
                },
                "bVar11": {
                    "1": "condition"
                },
                "bVar12": {
                    "1": "bool_var2"
                },
                "iVar2": {
                    "1": "var2",
                    "2": "temp_var1",
                    "6": "offset",
                    "8": "count"
                },
                "iVar6": {
                    "1": "temp3",
                    "2": "offset",
                    "3": "temp_value",
                    "4": "increment"
                },
                "iVar8": {
                    "1": "var_i",
                    "2": "temp_var6",
                    "3": "counter",
                    "4": "length"
                },
                "param_1": {
                    "1": "data_buffer",
                    "10": "data",
                    "2": "input_data",
                    "3": "data_ptr",
                    "5": "data_array",
                    "6": "input_array"
                },
                "param_2": {
                    "1": "control_array",
                    "2": "output_data",
                    "3": "info",
                    "6": "config"
                },
                "pcVar7": {
                    "1": "function",
                    "10": "function_ptr",
                    "4": "func_ptr",
                    "5": "callback",
                    "6": "function_pointer"
                },
                "piVar3": {
                    "1": "value2_ptr",
                    "2": "temp_var2",
                    "3": "temp_ptr",
                    "4": "tmp_ptr",
                    "6": "ptr"
                },
                "uVar1": {
                    "14": "result",
                    "16": "return_value"
                },
                "uVar10": {
                    "1": "bool_result",
                    "2": "u_var10",
                    "3": "bool_value",
                    "6": "bool_var"
                },
                "uVar11": {
                    "1": "temp_var3"
                },
                "uVar4": {
                    "1": "value2",
                    "2": "temp_uint",
                    "3": "u_var4",
                    "4": "ushort_value",
                    "7": "value"
                },
                "uVar5": {
                    "1": "parameter",
                    "12": "flag",
                    "2": "temp_ushort",
                    "4": "flags"
                },
                "uVar9": {
                    "1": "temporary_value",
                    "2": "temp_var",
                    "3": "temp_var2"
                },
                "unaff_r4": {
                    "1": "variable1",
                    "2": "arg1",
                    "3": "unaffected_r4",
                    "4": "unused_var1",
                    "5": "unaff_r4"
                },
                "unaff_r5": {
                    "1": "variable2",
                    "2": "variable5",
                    "3": "unaffected_r5",
                    "4": "unused_var2",
                    "5": "unaff_r5"
                }
            },
            "called": [
                "FUN_08006cb4"
            ],
            "calling": [
                "FUN_08006344"
            ],
            "code": "\nundefined4 process_data_08006be0(uint *data,int *config)\n\n{\n  undefined4 return_value;\n  int count;\n  int *ptr;\n  uint value;\n  ushort flag;\n  int increment;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *function_ptr;\n  int length;\n  uint temp;\n  code *jump_table;\n  bool boolean_var;\n  \n  if (config[4] != 0) {\n    if ((data != (uint *)0x0) && (data[6] == 0)) {\n      initialize_data_08006cb4();\n    }\n    if (config == &DAT_08007904) {\n      config = (int *)data[1];\n    }\n    else if (config == (int *)&DAT_08007924) {\n      config = (int *)data[2];\n    }\n    else if (config == (int *)&DAT_080078e4) {\n      config = (int *)data[3];\n    }\n    if (*(short *)(config + 3) != 0) {\n      flag = *(ushort *)(config + 3);\n      value = (uint)flag;\n      if ((int)(value << 0x1c) < 0) {\n        count = config[4];\n        if (count != 0) {\n          increment = value << 0x1e;\n          boolean_var = increment != 0;\n          if (boolean_var) {\n            increment = 0;\n          }\n          length = *config;\n          if (!boolean_var) {\n            increment = config[5];\n          }\n          *config = count;\n          config[2] = increment;\n          for (length = length - count; 0 < length; length = length - increment) {\n            increment = (*(code *)config[10])(data,config[8],count,length,unaff_r4,unaff_r5);\n            if (increment < 1) {\n              flag = *(ushort *)(config + 3);\n              goto LAB_08006bc6;\n            }\n            count = count + increment;\n          }\n        }\n      }\n      else if (((0 < config[1]) || (0 < config[0x10])) &&\n              (function_ptr = (code *)config[0xb], function_ptr != (code *)0x0)) {\n        temp = *data;\n        *data = 0;\n        if ((flag & 0x1000) == 0) {\n          count = (*function_ptr)(data,config[8],value & 0x1000,1);\n          if ((count == -1) && (value = *data, value != 0)) {\n            if ((value != 0x1d) && (value != 0x16)) {\n              *(ushort *)(config + 3) = *(ushort *)(config + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              return_value = (*jump_table)();\n              return return_value;\n            }\n            *data = temp;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          count = config[0x15];\n        }\n        if (((int)((uint)*(ushort *)(config + 3) << 0x1d) < 0) &&\n           (count = count - config[1], config[0xd] != 0)) {\n          count = count - config[0x10];\n        }\n        count = (*(code *)config[0xb])(data,config[8],count,0);\n        flag = *(ushort *)(config + 3);\n        if ((count == -1) &&\n           ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(config + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)(0xffffffff);\n          return return_value;\n        }\n        config[1] = 0;\n        *config = config[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((count != -1 || (*data == 0)))) {\n          config[0x15] = count;\n        }\n        ptr = (int *)config[0xd];\n        *data = temp;\n        if (ptr != (int *)0x0) {\n          if (ptr != config + 0x11) {\n            process_data_08006be0_080061f0(data);\n          }\n          config[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)();\n          return return_value;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      return_value = (*jump_table)(0);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            process_data_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08006be0",
            "entrypoint": "0x08006be0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "boolean_var",
                "iVar2": "count",
                "iVar6": "increment",
                "iVar8": "length",
                "param_1": "data",
                "param_2": "config",
                "pcVar7": "function_ptr",
                "piVar3": "ptr",
                "uVar1": "return_value",
                "uVar4": "value",
                "uVar5": "flag",
                "uVar9": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c40": {
            "additional_data": {
                "FUN_08006c40": {
                    "1": "initialize_structure",
                    "3": "initialize_parameters",
                    "4": "initialize_data_struct",
                    "6": "initialize_memory",
                    "8": "initialize_data",
                    "9": "initialize_data_structure"
                },
                "LAB_08006fb6_1": {
                    "1": "label",
                    "3": "label_08006fb6_1",
                    "4": "some_label",
                    "6": "label1"
                },
                "fill_memory_080061e0": {
                    "1": "fill_memory_block",
                    "17": "fill_memory"
                },
                "memory": {
                    "1": "memory"
                },
                "param_1": {
                    "1": "memory_array",
                    "2": "parameters",
                    "3": "data_pointer",
                    "4": "data_struct",
                    "5": "data",
                    "9": "data_structure"
                },
                "param_2": {
                    "1": "param_value1",
                    "23": "value1",
                    "4": "value_1"
                },
                "param_3": {
                    "1": "val2",
                    "23": "value2",
                    "4": "value_2"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                }
            },
            "called": [
                "FUN_080061e0"
            ],
            "calling": [
                "FUN_08006cb4"
            ],
            "code": "\nvoid initialize_data_structure_08006c40(undefined4 *data_structure,undefined2 value1,undefined2 value2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value1;\n  data_structure[0x19] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value2;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[6] = 0;\n  fill_memory(data_structure + 0x17,0,8);\n  data_structure[8] = data_structure;\n  data_structure[9] = 0x8006f39;\n  data_structure[10] = 0x8006f5b;\n  data_structure[0xb] = 0x8006f93;\n  data_structure[0xc] = &label1;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08006c40",
            "entrypoint": "0x08006c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c40": "initialize_data_structure_08006c40",
                "LAB_08006fb6_1": "label1",
                "fill_memory_080061e0": "fill_memory",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c88": {
            "additional_data": {
                "FUN_08006c88": {
                    "1": "allocate_memory_with_initialization",
                    "17": "allocate_and_initialize_memory",
                    "3": "initialize_memory",
                    "6": "allocate_and_fill_memory"
                },
                "fill_memory_080061e0": {
                    "1": "initialize_memory_with_zeroes"
                },
                "iVar2": {
                    "1": "block_size",
                    "3": "memory_offset",
                    "6": "offset",
                    "7": "total_size",
                    "8": "memory_size"
                },
                "param_1": {
                    "1": "param",
                    "2": "base_address",
                    "3": "param_address",
                    "4": "memory_address"
                },
                "param_2": {
                    "1": "num_instances",
                    "13": "num_elements",
                    "2": "element_count",
                    "3": "count",
                    "6": "size"
                },
                "puVar1": {
                    "1": "new_memory",
                    "2": "memory_ptr",
                    "20": "allocated_memory"
                }
            },
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "calling": [
                "FUN_08006d14"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_08006c88(undefined4 input_value,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int memory_size;\n  \n  memory_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_and_assign_memory_08006288(input_value,memory_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    initialize_memory_with_zeroes(allocated_memory + 3,0,memory_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08006c88",
            "entrypoint": "0x08006c88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_08006c88",
                "fill_memory_080061e0": "initialize_memory_with_zeroes",
                "iVar2": "memory_size",
                "param_1": "input_value",
                "param_2": "num_elements",
                "puVar1": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "additional_data": {
                "&DAT_200000fc": {
                    "1": "constant_data"
                },
                "&LAB_08006c34_1": {
                    "1": "label"
                },
                "FUN_08006cb4": {
                    "1": "initialize_memory_and_data_structures",
                    "2": "initialize_process",
                    "3": "initialize_function",
                    "4": "initialize_memory",
                    "5": "initialize_memory_if_needed",
                    "8": "initialize_data"
                },
                "LAB_08006c34_1": {
                    "1": "label"
                },
                "initialize_data_structure_08006c40": {
                    "1": "initialize_substructure",
                    "15": "initialize_data_structure"
                },
                "initialize_memory_08006d14": {
                    "1": "initialize_memory_block",
                    "10": "initialize_memory",
                    "7": "allocate_memory"
                },
                "param_1": {
                    "1": "memory_array",
                    "2": "data_structure",
                    "3": "param",
                    "5": "parameters"
                },
                "puVar2": {
                    "1": "pointer_variable",
                    "11": "pointer",
                    "2": "data_pointer",
                    "6": "temp_ptr"
                },
                "uVar1": {
                    "1": "memory_ptr",
                    "13": "result",
                    "2": "value",
                    "3": "initialized_memory",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "code": "\nvoid initialize_data_08006cb4(undefined4 *parameters)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    pointer = &DAT_200000fc;\n    parameters[10] = label;\n    if (parameters == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_200000fc) {\n      parameters[6] = pointer;\n    }\n    result = initialize_memory();\n    parameters[1] = result;\n    result = initialize_memory(parameters);\n    parameters[2] = result;\n    result = initialize_memory(parameters);\n    parameters[3] = result;\n    initialize_data_08006cb4_structure(parameters[1],4,0);\n    initialize_data_08006cb4_structure(parameters[2],9,1);\n    initialize_data_08006cb4_structure(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08006cb4",
            "entrypoint": "0x08006cb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08006c34_1": "label",
                "FUN_08006cb4": "initialize_data_08006cb4",
                "LAB_08006c34_1": "label",
                "initialize_data_structure_08006c40": "initialize_data_structure",
                "initialize_memory_08006d14": "initialize_memory",
                "param_1": "parameters",
                "puVar2": "pointer",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d14": {
            "additional_data": {
                "*ppiVar3": {
                    "1": "current_list"
                },
                "DAT_200000fc": {
                    "1": "global_dat"
                },
                "DAT_20000114": {
                    "1": "global_variable"
                },
                "DAT_20000144": {
                    "1": "memory_list"
                },
                "FUNC_08006cb4": {
                    "1": "initialize_memory"
                },
                "FUN_08006d14": {
                    "1": "reverse_and_allocate_memory",
                    "3": "initialize_data_structure",
                    "6": "process_data",
                    "7": "initialize_memory"
                },
                "allocate_and_initialize_memory_08006c88": {
                    "1": "allocate_memory",
                    "10": "allocate_and_initialize_memory"
                },
                "fill_memory_080061e0": {
                    "1": "clear_memory",
                    "11": "fill_memory"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "output",
                    "2": "output_param",
                    "6": "result"
                },
                "param_2": {
                    "1": "param_a",
                    "2": "input_param_1",
                    "3": "arg2",
                    "4": "input1",
                    "6": "param_2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "size_2",
                    "2": "input_2",
                    "3": "arg3",
                    "4": "input2",
                    "6": "param_3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "memory_param",
                    "2": "input_param_3",
                    "3": "arg4",
                    "4": "input3",
                    "6": "param_4",
                    "7": "param4"
                },
                "piVar1": {
                    "1": "pointer_1",
                    "2": "current_block",
                    "3": "current_ptr1",
                    "5": "current_element"
                },
                "piVar2": {
                    "1": "current_pointer2",
                    "2": "sub_item",
                    "3": "current_ptr2"
                },
                "ppiVar3": {
                    "1": "structures",
                    "2": "memory_list_ptr",
                    "3": "list_ptr"
                }
            },
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "calling": [
                "FUN_08006cb4"
            ],
            "code": "\nint * initialize_memory_08006d14(undefined4 *output,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *current_element;\n  int *current_ptr2;\n  int **list_ptr;\n  \n  if (DAT_20000114 == 0) {\n    initialize_data_08006cb4(&DAT_200000fc);\n  }\n  list_ptr = (int **)&DAT_20000144;\n  do {\n    current_ptr2 = list_ptr[2];\n    current_element = list_ptr[1];\n    while (current_element = (int *)((int)current_element + -1), -1 < (int)current_element) {\n      if (*(short *)(current_ptr2 + 3) == 0) {\n        *(undefined2 *)((int)current_ptr2 + 0xe) = 0xffff;\n        current_ptr2[0x19] = 0;\n        *(undefined2 *)(current_ptr2 + 3) = 1;\n        *current_ptr2 = 0;\n        current_ptr2[2] = 0;\n        current_ptr2[1] = 0;\n        current_ptr2[4] = 0;\n        current_ptr2[5] = 0;\n        current_ptr2[6] = 0;\n        fill_memory(current_ptr2 + 0x17,0,8,1,param4);\n        current_ptr2[0xd] = 0;\n        current_ptr2[0xe] = 0;\n        current_ptr2[0x12] = 0;\n        current_ptr2[0x13] = 0;\n        return current_ptr2;\n      }\n      current_ptr2 = current_ptr2 + 0x1a;\n    }\n    if (*list_ptr == (int *)0x0) {\n      current_element = (int *)allocate_and_initialize_memory_08006d14(output,4);\n      *list_ptr = current_element;\n      if (current_element == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    list_ptr = (int **)*list_ptr;\n  } while( true );\n}\n\n",
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n",
            "current_name": "initialize_memory_08006d14",
            "entrypoint": "0x08006d14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d14": "initialize_memory_08006d14",
                "allocate_and_initialize_memory_08006c88": "allocate_and_initialize_memory",
                "fill_memory_080061e0": "fill_memory",
                "param_1": "output",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "current_element",
                "piVar2": "current_ptr2",
                "ppiVar3": "list_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dc8": {
            "additional_data": {
                "FUN_08006dc8": {
                    "1": "reinitialize_memory",
                    "16": "initialize_and_check_memory",
                    "2": "initialize_memory_and_check_flags",
                    "3": "initialize_memory",
                    "4": "initialize_memory_check"
                },
                "auStack_4c": {
                    "1": "temporary_stack_variable",
                    "2": "auxiliary_stack",
                    "3": "temporary_buffer",
                    "4": "stack_variable",
                    "5": "stack_buffer"
                },
                "iVar1": {
                    "1": "result_code",
                    "3": "initialize_result",
                    "7": "init_result",
                    "9": "result"
                },
                "local_48": {
                    "1": "flag_check",
                    "13": "local_variable",
                    "2": "local_flags",
                    "5": "local_var"
                },
                "param_1": {
                    "1": "context",
                    "2": "input_param",
                    "3": "arg1",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "memory_address",
                    "2": "param2",
                    "3": "input_data"
                },
                "param_3": {
                    "1": "output_status",
                    "2": "result",
                    "3": "output_parameter",
                    "7": "output_param"
                },
                "param_4": {
                    "1": "param_four",
                    "2": "memory_flag",
                    "3": "status_param",
                    "5": "status"
                },
                "uVar2": {
                    "1": "status_value",
                    "2": "flag_value",
                    "4": "status",
                    "7": "return_value"
                }
            },
            "called": [
                "FUN_08007004"
            ],
            "calling": [
                "FUN_08006e10"
            ],
            "code": "\nundefined4 initialize_and_check_memory_08006dc8(undefined4 param_1,int input_data,undefined4 *output_param,uint *status)\n\n{\n  int result;\n  undefined4 return_value;\n  undefined stack_buffer [4];\n  uint local_variable;\n  \n  if ((*(short *)(input_data + 0xe) < 0) ||\n     (result = initialize_memory_08007004(param_1,(int)*(short *)(input_data + 0xe),stack_buffer), result < 0)) {\n    *status = 0;\n    if ((int)((uint)*(ushort *)(input_data + 0xc) << 0x18) < 0) {\n      return_value = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *status = (uint)((local_variable & 0xf000) == 0x2000);\n  }\n  return_value = 0x400;\nLAB_08006e08:\n  *output_param = return_value;\n  return 0;\n}\n\n",
            "current_name": "initialize_and_check_memory_08006dc8",
            "entrypoint": "0x08006dc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dc8": "initialize_and_check_memory_08006dc8",
                "auStack_4c": "stack_buffer",
                "iVar1": "result",
                "local_48": "local_variable",
                "param_2": "input_data",
                "param_3": "output_param",
                "param_4": "status",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e10": {
            "additional_data": {
                "&LAB_08006c34_1": {
                    "1": "return_label"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "flag"
                },
                "FUN_08006e10": {
                    "1": "initialize_memory_and_return",
                    "16": "initialize_memory",
                    "2": "process_memory_allocation",
                    "5": "initialize_and_assign_memory"
                },
                "LAB_08006c34_1": {
                    "1": "some_label"
                },
                "allocate_and_assign_memory_08006288": {
                    "3": "allocate_and_assign_memory"
                },
                "iVar2": {
                    "1": "memory_allocation_result",
                    "15": "allocated_memory",
                    "2": "allocated_value",
                    "6": "allocation_result"
                },
                "initialize_and_check_memory_08006dc8": {
                    "1": "init_and_check_memory",
                    "2": "initialize_and_check_memory"
                },
                "local_14": {
                    "1": "updated_memory",
                    "2": "updated_memory_block"
                },
                "local_18": {
                    "1": "local_param1",
                    "2": "allocated_memory_size",
                    "3": "memory_size",
                    "6": "size"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "base_address",
                    "3": "param1",
                    "6": "memory_address"
                },
                "param_2": {
                    "1": "memory_params",
                    "2": "memory_array",
                    "3": "param2",
                    "9": "memory_block"
                },
                "uVar1": {
                    "1": "initialization_value",
                    "11": "initialized_value",
                    "2": "initialized_flag",
                    "7": "return_value"
                },
                "update_return_value_08007028": {
                    "5": "update_return_value"
                }
            },
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "calling": [
                "FUN_080069e4"
            ],
            "code": "\nvoid initialize_memory_08006e10(int base_address,int *memory_block)\n\n{\n  ushort initialized_value;\n  int allocated_memory;\n  int size;\n  int *local_memory2;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n    size = base_address;\n    local_memory2 = memory_block;\n    initialized_value = initialize_and_check_memory(base_address,memory_block,&size,&local_memory2);\n    allocated_memory = allocate_and_assign_memory(base_address,size);\n    if (allocated_memory != 0) {\n      *(undefined **)(base_address + 0x28) = return_label;\n      *memory_block = allocated_memory;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[4] = allocated_memory;\n      memory_block[5] = size;\n      if ((local_memory2 != (int *)0x0) &&\n         (allocated_memory = update_return_value(base_address,(int)*(short *)((int)memory_block + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = initialized_value | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}\n\n",
            "current_name": "initialize_memory_08006e10",
            "entrypoint": "0x08006e10",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08006c34_1": "return_label",
                "FUN_08006e10": "initialize_memory_08006e10",
                "LAB_08006c34_1": "some_label",
                "allocate_and_assign_memory_08006288": "allocate_and_assign_memory",
                "iVar2": "allocated_memory",
                "initialize_and_check_memory_08006dc8": "initialize_and_check_memory",
                "local_14": "local_memory2",
                "local_18": "size",
                "param_1": "base_address",
                "param_2": "memory_block",
                "uVar1": "initialized_value",
                "update_return_value_08007028": "update_return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e90": {
            "additional_data": {
                "FUN_08006e90": {
                    "1": "find_char_position",
                    "13": "find_character",
                    "2": "find_character_position",
                    "5": "find_first_occurrence",
                    "6": "find_character_in_string"
                },
                "param_1": {
                    "2": "str",
                    "27": "string"
                },
                "param_2": {
                    "1": "character_to_find",
                    "22": "character",
                    "3": "target_character",
                    "4": "target_char"
                },
                "param_3": {
                    "1": "str_length",
                    "22": "length",
                    "8": "string_length"
                },
                "pcVar1": {
                    "1": "ptr_current_char",
                    "3": "current",
                    "6": "current_character",
                    "7": "current_position",
                    "9": "current_char"
                },
                "pcVar2": {
                    "1": "result",
                    "3": "next",
                    "5": "next_character",
                    "6": "next_position",
                    "8": "next_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "current_name": "find_character_08006e90",
            "entrypoint": "0x08006e90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006eac": {
            "called": [],
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08006eac",
            "entrypoint": "0x08006eac",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08006eae": {
            "called": [],
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08006eae",
            "entrypoint": "0x08006eae",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08006f00": {
            "additional_data": {
                "DAT_200000f8": {
                    "1": "function_data_array"
                },
                "DAT_200006a4": {
                    "1": "error_code"
                },
                "FUN_08006f00": {
                    "1": "initialize_and_process_data",
                    "2": "initialize_data",
                    "3": "process_data",
                    "5": "initialize_and_execute",
                    "7": "initialize_function"
                },
                "iVar3": {
                    "1": "data_var",
                    "3": "data",
                    "4": "result",
                    "5": "data_value"
                },
                "in_lr": {
                    "1": "unused_register_lr",
                    "8": "return_address"
                },
                "initialize_data_08005740": {
                    "1": "initialize_data_function"
                },
                "param_1": {
                    "1": "param",
                    "2": "value",
                    "3": "input_parameter",
                    "5": "input",
                    "6": "input_param"
                },
                "pcVar4": {
                    "1": "pointer_to_var4",
                    "10": "function_pointer",
                    "16": "function_ptr",
                    "2": "code_ptr"
                },
                "piVar1": {
                    "1": "ptr_value",
                    "2": "data",
                    "3": "result",
                    "7": "data_pointer",
                    "8": "data_ptr"
                },
                "puVar5": {
                    "1": "ptr_data",
                    "2": "data_pointer_address",
                    "3": "data_ptr",
                    "4": "data_pointer",
                    "8": "data_ptr_ptr"
                },
                "thunk_initialize_08005750": {
                    "1": "thunk_initialize_function"
                },
                "uVar2": {
                    "1": "status",
                    "12": "result",
                    "2": "thunk_value",
                    "4": "return_value",
                    "8": "thunk_result"
                },
                "unaff_r4": {
                    "1": "temp_register4"
                },
                "unaff_r5": {
                    "1": "temp_register5"
                }
            },
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "calling": [
                "FUN_08006ac0"
            ],
            "code": "\nint initialize_function_08006f00(uint input_value)\n\n{\n  int *data_ptr;\n  undefined4 result;\n  int data_value;\n  code *function_ptr;\n  undefined4 special_value1;\n  undefined4 special_value2;\n  undefined4 return_address;\n  undefined4 *data_ptr_ptr;\n  \n  data_ptr = DAT_200000f8;\n  data_ptr_ptr = &DAT_200000f8;\n  if (0x1f < input_value) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  data_value = DAT_200000f8[0x11];\n  if ((data_value != 0) && (function_ptr = *(code **)(data_value + input_value * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(data_value + input_value * 4) = 0;\n      (*function_ptr)(input_value);\n    }\n    return 0;\n  }\n  result = thunk_initialize_function_08006f00(DAT_200000f8);\n  DAT_200006a4 = 0;\n  data_value = initialize_data_function(result,input_value,input_value,0,data_ptr_ptr,special_value1,special_value2,return_address);\n  if ((data_value == -1) && (DAT_200006a4 != 0)) {\n    *data_ptr = DAT_200006a4;\n  }\n  return data_value;\n}\n\n",
            "current_name": "initialize_function_08006f00",
            "entrypoint": "0x08006f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f00": "initialize_function_08006f00",
                "iVar3": "data_value",
                "in_lr": "return_address",
                "initialize_data_08005740": "initialize_data_function",
                "param_1": "input_value",
                "pcVar4": "function_ptr",
                "piVar1": "data_ptr",
                "puVar5": "data_ptr_ptr",
                "thunk_initialize_08005750": "thunk_initialize_function",
                "uVar2": "result",
                "unaff_r4": "special_value1",
                "unaff_r5": "special_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006f38": {
            "additional_data": {
                "*param_2 + 0x54": {
                    "1": "value_pointer"
                },
                "*param_2 + 0xc": {
                    "1": "short_value"
                },
                "FUN_08006f38": {
                    "1": "calculate_result",
                    "17": "update_value",
                    "4": "update_values",
                    "5": "update_data"
                },
                "bVar3": {
                    "1": "is_success",
                    "20": "is_positive",
                    "3": "is_initialized",
                    "6": "is_valid"
                },
                "iVar1": {
                    "1": "init_check_result",
                    "25": "result",
                    "3": "initialized_value"
                },
                "initialize_and_check_0800706c": {
                    "2": "initialize_and_check"
                },
                "param_1": {
                    "1": "ptr_value",
                    "2": "arg1",
                    "3": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "arg2",
                    "3": "input2",
                    "4": "data",
                    "6": "param2"
                },
                "uVar2": {
                    "1": "calculated_value",
                    "18": "updated_value",
                    "2": "new_val",
                    "9": "new_value"
                }
            },
            "called": [
                "FUN_0800706c"
            ],
            "calling": [],
            "code": "\nvoid update_value_08006f38(undefined4 param1,int param2)\n\n{\n  int result;\n  uint updated_value;\n  bool is_positive;\n  \n  result = initialize_and_check(param1,(int)*(short *)(param2 + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    updated_value = *(int *)(param2 + 0x54) + result;\n  }\n  else {\n    updated_value = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(param2 + 0x54) = updated_value;\n  }\n  if (!is_positive) {\n    *(short *)(param2 + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_08006f38",
            "entrypoint": "0x08006f38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f38": "update_value_08006f38",
                "bVar3": "is_positive",
                "iVar1": "result",
                "initialize_and_check_0800706c": "initialize_and_check",
                "param_1": "param1",
                "param_2": "param2",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "additional_data": {
                "FUN_08006f5a": {
                    "1": "process_and_initialize_data",
                    "2": "process_and_initialize",
                    "20": "process_data"
                },
                "iVar1": {
                    "1": "result_code",
                    "21": "result",
                    "5": "return_value"
                },
                "in_lr": {
                    "1": "unnamed_param_3",
                    "2": "return_address",
                    "3": "unused_var3",
                    "4": "link_register"
                },
                "initialize_and_check_error_08007048": {
                    "1": "initialize_and_handle_error"
                },
                "param_1": {
                    "1": "output_buffer",
                    "15": "output",
                    "3": "output_array",
                    "6": "result"
                },
                "param_2": {
                    "1": "input_data",
                    "3": "input_array",
                    "7": "data_ptr",
                    "9": "data"
                },
                "param_3": {
                    "1": "param_1",
                    "10": "param_a",
                    "2": "parameter3",
                    "3": "param_3",
                    "5": "param1"
                },
                "param_4": {
                    "1": "var2",
                    "10": "param_b",
                    "2": "input_2",
                    "3": "arg2",
                    "5": "param2"
                },
                "process_data_08005730": {
                    "2": "process_data"
                },
                "unaff_r4": {
                    "1": "reg4",
                    "2": "register4",
                    "3": "unused_var1"
                },
                "unaff_r5": {
                    "1": "var_b",
                    "2": "unused2",
                    "3": "unused_var2"
                }
            },
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "calling": [],
            "code": "\nvoid process_data_08006f5a(int *output,int data,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 link_register;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_and_handle_error(output,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  result = process_data_08006f5a((int)*(short *)(data + 0xe),param_a,param_b,param_b,param_b,unused_var1,\n                       unused_var2,link_register);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08006f5a",
            "entrypoint": "0x08006f5a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "iVar1": "result",
                "in_lr": "link_register",
                "initialize_and_check_error_08007048": "initialize_and_handle_error",
                "param_1": "output",
                "param_2": "data",
                "param_3": "param_a",
                "param_4": "param_b",
                "process_data_08005730": "process_data",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006f92": {
            "additional_data": {
                "FUN_08006f92": {
                    "1": "initialize_and_update_value",
                    "2": "initialize_error_check",
                    "3": "initialize_and_update_flags",
                    "4": "initialize_and_update_status"
                },
                "bVar3": {
                    "1": "error",
                    "2": "has_error",
                    "28": "is_error"
                },
                "iVar1": {
                    "1": "status",
                    "18": "result",
                    "9": "error_code"
                },
                "param_1": {
                    "1": "connection_ptr",
                    "2": "input_param",
                    "4": "param",
                    "5": "param_1"
                },
                "param_2": {
                    "1": "context",
                    "2": "data_ptr",
                    "4": "arg2",
                    "5": "buffer"
                },
                "uVar2": {
                    "1": "updated_flag",
                    "2": "status_flags",
                    "3": "flags",
                    "7": "modified_value"
                }
            },
            "called": [
                "FUN_08007048"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_check_08006f92(undefined4 param_1,int buffer)\n\n{\n  int result;\n  ushort updated_value;\n  bool is_error;\n  \n  result = initialize_and_check_08006f92_error_08007048(param_1,(int)*(short *)(buffer + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    updated_value = *(ushort *)(buffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(buffer + 0x54) = result;\n    updated_value = *(ushort *)(buffer + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(buffer + 0xc) = updated_value;\n  }\n  if (!is_error) {\n    *(ushort *)(buffer + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_08006f92",
            "entrypoint": "0x08006f92",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f92": "initialize_and_check_08006f92",
                "bVar3": "is_error",
                "iVar1": "result",
                "param_2": "buffer",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007004": {
            "additional_data": {
                "DAT_200006a4": {
                    "1": "init_value"
                },
                "FUN_08007004": {
                    "1": "initialize_memory_and_set_param",
                    "17": "initialize_memory",
                    "2": "initialize_memory_check",
                    "6": "initialize_and_check_memory"
                },
                "iVar1": {
                    "1": "result_status",
                    "2": "initialize_result",
                    "5": "init_result",
                    "7": "result"
                },
                "param_1": {
                    "1": "result_pointer",
                    "15": "result",
                    "2": "result_ptr",
                    "3": "output_pointer",
                    "4": "output"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "input1",
                    "3": "param_2",
                    "7": "arg1",
                    "8": "size"
                },
                "param_3": {
                    "1": "value2",
                    "2": "size_2",
                    "4": "param_3",
                    "6": "value",
                    "7": "arg2"
                },
                "param_4": {
                    "1": "parameter_4",
                    "2": "value2",
                    "4": "param_4",
                    "6": "flag",
                    "7": "arg3"
                }
            },
            "called": [
                "FUN_0800571a"
            ],
            "calling": [
                "FUN_08006dc8"
            ],
            "code": "\nvoid initialize_memory_08007004(int *result,undefined4 size,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = initialize_memory_08007004_0800571a(size,arg2,arg2,0,arg3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_08007004",
            "entrypoint": "0x08007004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007004": "initialize_memory_08007004",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007028": {
            "additional_data": {
                "DAT_200006a4": {
                    "1": "error_flag"
                },
                "FUN_08007028": {
                    "1": "check_return_value_and_update",
                    "11": "update_return_value",
                    "2": "extract_return_value_and_update_param",
                    "3": "process_return_value",
                    "4": "check_return_value_and_update_param"
                },
                "get_return_value_08005724": {
                    "1": "get_return_value"
                },
                "iVar1": {
                    "1": "return_value_code",
                    "29": "return_value"
                },
                "param_1": {
                    "1": "error_storage",
                    "11": "result",
                    "2": "result_ptr",
                    "3": "result_pointer",
                    "4": "output",
                    "5": "output_value"
                },
                "param_2": {
                    "21": "input_value",
                    "4": "value",
                    "6": "input"
                }
            },
            "called": [
                "FUN_08005724"
            ],
            "calling": [
                "FUN_08006e10"
            ],
            "code": "\nvoid update_return_value_08007028(int *result,undefined4 input_value)\n\n{\n  int return_value;\n  \n  DAT_200006a4 = 0;\n  return_value = get_return_value(input_value);\n  if ((return_value == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "update_return_value_08007028",
            "entrypoint": "0x08007028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007028": "update_return_value_08007028",
                "get_return_value_08005724": "get_return_value",
                "iVar1": "return_value",
                "param_1": "result",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007048": {
            "additional_data": {
                "*param_1": {
                    "1": "error_code"
                },
                "FUN_08007048": {
                    "1": "initialize_and_assign_result",
                    "2": "initialize_and_check_result",
                    "4": "initialize_and_check",
                    "5": "initialize_and_assign",
                    "6": "initialize_and_assign_value",
                    "8": "initialize_and_check_error"
                },
                "iVar1": {
                    "1": "init_status",
                    "10": "init_result",
                    "3": "initialize_result",
                    "9": "result"
                },
                "initialize_08005728": {
                    "1": "initialize_08005728"
                },
                "param_1": {
                    "1": "output_variable",
                    "14": "result",
                    "2": "result_ptr",
                    "3": "output_value",
                    "8": "output"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "arg1",
                    "2": "input1",
                    "3": "arg_1",
                    "5": "input_1"
                },
                "param_3": {
                    "1": "input_param_2",
                    "13": "arg2",
                    "2": "input_parameter_2",
                    "3": "arg_2",
                    "5": "input_2"
                },
                "param_4": {
                    "1": "input_2",
                    "13": "arg3",
                    "2": "input3",
                    "3": "arg_3",
                    "5": "input_3"
                }
            },
            "called": [
                "FUN_08005728"
            ],
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "code": "\nvoid initialize_and_check_error_08007048(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_200006a4 = 0;\n  init_result = initialize_08005728(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_error_08007048",
            "entrypoint": "0x08007048",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007048": "initialize_and_check_error_08007048",
                "iVar1": "init_result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800706c": {
            "additional_data": {
                "FUN_0800706c": {
                    "1": "initialize_and_assign_result",
                    "2": "initialize_and_check_value",
                    "5": "initialize_and_check_error",
                    "6": "initialize_and_check"
                },
                "iVar1": {
                    "1": "result_code",
                    "15": "init_result",
                    "2": "error_code",
                    "3": "result"
                },
                "param_1": {
                    "1": "result_code",
                    "19": "result",
                    "2": "output",
                    "5": "result_ptr"
                },
                "param_2": {
                    "1": "input1",
                    "17": "arg1",
                    "2": "param_2",
                    "3": "value1"
                },
                "param_3": {
                    "1": "input_2",
                    "17": "arg2",
                    "2": "param_3",
                    "3": "value2"
                },
                "param_4": {
                    "1": "config_param_3",
                    "17": "arg3",
                    "2": "arg_3",
                    "3": "value3"
                }
            },
            "called": [
                "FUN_0800572c"
            ],
            "calling": [
                "FUN_08006f38"
            ],
            "code": "\nvoid initialize_and_check_0800706c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_200006a4 = 0;\n  init_result = initialize_0800572c(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_0800706c",
            "entrypoint": "0x0800706c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800706c": "initialize_and_check_0800706c",
                "iVar1": "init_result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007090": {
            "additional_data": {
                "DAT_20000600": {
                    "1": "variable_12",
                    "2": "data_00"
                },
                "DAT_20000604": {
                    "1": "variable_11",
                    "2": "data_04"
                },
                "DAT_20000608": {
                    "1": "variable_10",
                    "2": "data_08"
                },
                "DAT_2000060c": {
                    "1": "data_9",
                    "2": "data_0c"
                },
                "DAT_20000610": {
                    "1": "variable_8",
                    "2": "data_10"
                },
                "DAT_20000614": {
                    "1": "data_7",
                    "2": "data_14"
                },
                "DAT_20000618": {
                    "1": "data_6",
                    "2": "data_18"
                },
                "DAT_2000061c": {
                    "1": "data_5",
                    "2": "data_1c"
                },
                "DAT_20000620": {
                    "1": "data_4",
                    "2": "data_20"
                },
                "DAT_20000624": {
                    "1": "variable_3",
                    "2": "data_24"
                },
                "DAT_20000628": {
                    "1": "variable_2",
                    "2": "data_28"
                },
                "DAT_2000062c": {
                    "1": "data_1",
                    "2": "data_2c"
                },
                "FUN_08007090": {
                    "1": "process_and_call",
                    "13": "process_data",
                    "4": "process_and_call_function",
                    "6": "process_and_jump"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jmp_table",
                    "13": "jump_table",
                    "2": "process_function",
                    "3": "function_to_call"
                },
                "process_data_08006ac0": {
                    "12": "process_data"
                },
                "unordered_names": {
                    "1": "updated_names"
                }
            },
            "called": [
                "FUN_08006ac0"
            ],
            "calling": [
                "FUN_080060d4"
            ],
            "code": "\nvoid process_data_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = process_data_08007090;\n  process_data_08007090();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "process_data_08007090",
            "entrypoint": "0x08007090",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007090": "process_data_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "process_data_08006ac0": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007328": {
            "called": [],
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08007328",
            "entrypoint": "0x08007328",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08007334": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08007334",
            "entrypoint": "0x08007334",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_08004d44();\n  execute_functions_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  run_reflow_oven_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x08001be8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "DAT_:": {
                    "1": "dat_:"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "PTR_:": {
                    "1": "ptr_:"
                },
                "PTR_FUN_08005750": {
                    "1": "initialize_ptr"
                },
                "return_value": {
                    "2": "result"
                },
                "thunk_FUN_08005750": {
                    "1": "initialize_answer",
                    "2": "get_default_value",
                    "3": "get_return_value",
                    "5": "get_status",
                    "7": "get_one",
                    "8": "initialize"
                },
                "undefined4": {
                    "1": "result",
                    "2": "uint32_t",
                    "5": "status"
                }
            },
            "called": [
                "FUN_08005750"
            ],
            "calling": [
                "FUN_08006f00"
            ],
            "code": "\nstatus initialize_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "current_name": "initialize_thunk_08005750",
            "entrypoint": "0x08006f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_08005750": "initialize_thunk_08005750",
                "undefined4": "status"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 893347
}