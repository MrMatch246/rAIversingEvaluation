{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "get_last_character_index_08000178",
            "code": "\nchar * get_last_character_index_08000178(char *input_string)\n\n{\n  char current_character_value;\n  char *next_character;\n  char *current_character;\n  \n  current_character = input_string;\n  do {\n    next_character = current_character + 1;\n    current_character_value = *current_character;\n    current_character = next_character;\n  } while (current_character_value != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "get_last_character_index_08000178",
                "param_1": "input_string",
                "pcVar2": "next_character",
                "pcVar3": "current_character",
                "cVar1": "current_character_value"
            },
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "reverse_binary_operation_08000190",
            "code": "\nulonglong reverse_binary_operation_08000190(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  int index_var_1;\n  byte bool_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint result_var_1;\n  uint result_var_2;\n  int index_var_2;\n  uint temp_var_6;\n  uint temp_var_7;\n  uint temp_var_8;\n  uint temp_var_9;\n  bool bool_var_13;\n  bool bool_var_14;\n  bool bool_var_15;\n  \n  result_var_1 = input_param_4 ^ 0x80000000;\n  temp_var_6 = input_param_2 << 1;\n  input_param_4 = input_param_4 << 1;\n  bool_var_13 = ((input_param_2 ^ result_var_1) & 0x7fffffff) == 0;\n  bool_var_14 = bool_var_13 && input_param_1 == input_param_3;\n  if (!bool_var_13 || input_param_1 != input_param_3) {\n    bool_var_14 = (temp_var_6 | input_param_1) == 0;\n  }\n  if (!bool_var_14) {\n    bool_var_14 = (input_param_4 | input_param_3) == 0;\n  }\n  index_var_2 = (int)temp_var_6 >> 0x15;\n  if (!bool_var_14) {\n    bool_var_14 = index_var_2 == -1;\n  }\n  index_var_1 = (int)input_param_4 >> 0x15;\n  if (!bool_var_14) {\n    bool_var_14 = index_var_1 == -1;\n  }\n  if (bool_var_14) {\n    if (index_var_2 == -1 || index_var_1 == -1) {\n      temp_var_6 = result_var_1;\n      temp_var_8 = input_param_3;\n      if (index_var_2 == -1) {\n        temp_var_6 = input_param_2;\n        temp_var_8 = input_param_1;\n      }\n      if (index_var_2 != -1 || index_var_1 != -1) {\n        input_param_3 = temp_var_8;\n        result_var_1 = temp_var_6;\n      }\n      bool_var_14 = (temp_var_8 | temp_var_6 << 0xc) == 0;\n      if (bool_var_14) {\n        bool_var_14 = (input_param_3 | result_var_1 << 0xc) == 0;\n      }\n      if (bool_var_14) {\n        bool_var_14 = temp_var_6 == result_var_1;\n      }\n      if (!bool_var_14) {\n        temp_var_6 = temp_var_6 | 0x80000;\n      }\n      return CONCAT44(temp_var_6,temp_var_8);\n    }\n    if (((input_param_2 ^ result_var_1) & 0x7fffffff) != 0 || input_param_1 != input_param_3) {\n      if ((temp_var_6 | input_param_1) == 0) {\n        input_param_1 = input_param_3;\n        input_param_2 = result_var_1;\n      }\n      return CONCAT44(input_param_2,input_param_1);\n    }\n    if (input_param_2 != result_var_1) {\n      return 0;\n    }\n    if (temp_var_6 >> 0x15 == 0) {\n      bool_var_14 = (input_param_1 & 0x80000000) != 0;\n      result_var_1 = input_param_2 * 2 + (uint)bool_var_14;\n      if (CARRY4(input_param_2,input_param_2) || CARRY4(input_param_2 * 2,(uint)bool_var_14)) {\n        result_var_1 = result_var_1 | 0x80000000;\n      }\n      return CONCAT44(result_var_1,input_param_1 << 1);\n    }\n    if (temp_var_6 < 0xffc00000) {\n      return CONCAT44(input_param_2 + 0x100000,input_param_1);\n    }\n    input_param_2 = input_param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input_param_2 | 0x7ff00000) << 0x20;\n  }\n  temp_var_6 = temp_var_6 >> 0x15;\n  input_param_4 = input_param_4 >> 0x15;\n  temp_var_8 = input_param_4 - temp_var_6;\n  bool_var_14 = temp_var_8 != 0;\n  if (input_param_4 < temp_var_6) {\n    temp_var_8 = -temp_var_8;\n  }\n  temp_var_7 = input_param_1;\n  result_var_2 = input_param_2;\n  if (bool_var_14 && temp_var_6 <= input_param_4) {\n    temp_var_6 = temp_var_6 + temp_var_8;\n    temp_var_7 = input_param_3;\n    result_var_2 = result_var_1;\n    input_param_3 = input_param_1;\n    result_var_1 = input_param_2;\n  }\n  if (0x36 < temp_var_8) {\n    return CONCAT44(result_var_2,temp_var_7);\n  }\n  temp_var_4 = result_var_2 & 0xfffff | 0x100000;\n  if ((result_var_2 & 0x80000000) != 0) {\n    bool_var_14 = temp_var_7 != 0;\n    temp_var_7 = -temp_var_7;\n    temp_var_4 = -temp_var_4 - (uint)bool_var_14;\n  }\n  result_var_2 = result_var_1 & 0xfffff | 0x100000;\n  if ((result_var_1 & 0x80000000) != 0) {\n    bool_var_14 = input_param_3 != 0;\n    input_param_3 = -input_param_3;\n    result_var_2 = -result_var_2 - (uint)bool_var_14;\n  }\n  if (temp_var_6 == temp_var_8) {\n    result_var_2 = result_var_2 ^ 0x100000;\n    if (temp_var_6 == 0) {\n      temp_var_4 = temp_var_4 ^ 0x100000;\n      temp_var_6 = 1;\n    }\n    else {\n      temp_var_8 = temp_var_8 - 1;\n    }\n  }\n  result_var_1 = -temp_var_8 + 0x20;\n  if ((int)temp_var_8 < 0x21) {\n    temp_var_9 = input_param_3 << (result_var_1 & 0xff);\n    input_param_3 = input_param_3 >> (temp_var_8 & 0xff);\n    temp_var_3 = temp_var_7 + input_param_3;\n    temp_var_5 = result_var_2 << (result_var_1 & 0xff);\n    result_var_1 = temp_var_3 + temp_var_5;\n    temp_var_4 = temp_var_4 + CARRY4(temp_var_7,input_param_3) + ((int)result_var_2 >> (temp_var_8 & 0xff)) +\n            (uint)CARRY4(temp_var_3,temp_var_5);\n  }\n  else {\n    temp_var_9 = result_var_2 << (-temp_var_8 + 0x40 & 0xff);\n    if (input_param_3 != 0) {\n      temp_var_9 = temp_var_9 | 2;\n    }\n    result_var_2 = (int)result_var_2 >> (temp_var_8 - 0x20 & 0xff);\n    result_var_1 = temp_var_7 + result_var_2;\n    temp_var_4 = temp_var_4 + ((int)result_var_2 >> 0x1f) + (uint)CARRY4(temp_var_7,result_var_2);\n  }\n  input_param_2 = temp_var_4 & 0x80000000;\n  temp_var_8 = temp_var_4;\n  if ((int)temp_var_4 < 0) {\n    bool_var_14 = temp_var_9 == 0;\n    temp_var_9 = -temp_var_9;\n    temp_var_8 = -result_var_1;\n    result_var_1 = -(uint)!bool_var_14 - result_var_1;\n    temp_var_8 = -(uint)(bool_var_14 <= temp_var_8) - temp_var_4;\n  }\n  if (0xfffff < temp_var_8) {\n    temp_var_7 = temp_var_6 - 1;\n    if (0x1fffff < temp_var_8) {\n      temp_var_7 = temp_var_8 & 1;\n      temp_var_8 = temp_var_8 >> 1;\n      bool_var_2 = (byte)result_var_1;\n      result_var_1 = (uint)(temp_var_7 != 0) << 0x1f | result_var_1 >> 1;\n      temp_var_9 = (uint)(bool_var_2 & 1) << 0x1f | temp_var_9 >> 1;\n      temp_var_7 = temp_var_6;\n      if (0xffbfffff < temp_var_6 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bool_var_14 = 0x7fffffff < temp_var_9;\n    if (temp_var_9 == 0x80000000) {\n      bool_var_14 = (result_var_1 & 1) != 0;\n    }\n    return CONCAT44(temp_var_8 + temp_var_7 * 0x100000 + (uint)CARRY4(result_var_1,(uint)bool_var_14) | input_param_2,\n                    result_var_1 + bool_var_14);\n  }\n  bool_var_13 = (temp_var_9 & 0x80000000) != 0;\n  temp_var_9 = temp_var_9 << 1;\n  temp_var_7 = result_var_1 * 2;\n  bool_var_14 = CARRY4(result_var_1,result_var_1);\n  result_var_1 = result_var_1 * 2 + (uint)bool_var_13;\n  temp_var_8 = temp_var_8 * 2 + (uint)(bool_var_14 || CARRY4(temp_var_7,(uint)bool_var_13));\n  temp_var_7 = temp_var_6 - 2;\n  if ((temp_var_8 & 0x100000) != 0) goto LAB_080002a0;\n  result_var_2 = result_var_1;\n  temp_var_6 = temp_var_8;\n  if (temp_var_8 == 0) {\n    result_var_2 = 0;\n    temp_var_6 = result_var_1;\n  }\n  index_var_2 = LZCOUNT(temp_var_6);\n  if (temp_var_8 == 0) {\n    index_var_2 = index_var_2 + 0x20;\n  }\n  temp_var_8 = index_var_2 - 0xb;\n  bool_var_15 = SBORROW4(temp_var_8,0x20);\n  result_var_1 = index_var_2 - 0x2b;\n  bool_var_14 = (int)result_var_1 < 0;\n  bool_var_13 = result_var_1 == 0;\n  if ((int)temp_var_8 < 0x20) {\n    bool_var_15 = SCARRY4(result_var_1,0xc);\n    index_var_2 = index_var_2 + -0x1f;\n    bool_var_14 = index_var_2 < 0;\n    bool_var_13 = index_var_2 == 0;\n    result_var_1 = temp_var_8;\n    if (!bool_var_13 && bool_var_14 == bool_var_15) {\n      result_var_2 = temp_var_6 << (temp_var_8 & 0xff);\n      temp_var_6 = temp_var_6 >> (0xcU - index_var_2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bool_var_13 || bool_var_14 != bool_var_15) {\n    temp_var_9 = 0x20 - result_var_1;\n  }\n  temp_var_6 = temp_var_6 << (result_var_1 & 0xff);\n  if (bool_var_13 || bool_var_14 != bool_var_15) {\n    temp_var_6 = temp_var_6 | result_var_2 >> (temp_var_9 & 0xff);\n  }\n  if (bool_var_13 || bool_var_14 != bool_var_15) {\n    result_var_2 = result_var_2 << (result_var_1 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp_var_8 <= (int)temp_var_7) {\n    return CONCAT44(temp_var_6 + (temp_var_7 - temp_var_8) * 0x100000 | input_param_2,result_var_2);\n  }\n  result_var_1 = ~(temp_var_7 - temp_var_8);\n  if ((int)result_var_1 < 0x1f) {\n    index_var_2 = result_var_1 - 0x13;\n    if (index_var_2 != 0 && index_var_2 < 0 == SCARRY4(result_var_1 - 0x1f,0xc)) {\n      return CONCAT44(temp_var_4,result_var_2 >> (0x20 - (0xcU - index_var_2) & 0xff) | temp_var_6 << (0xcU - index_var_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_var_1 = result_var_1 + 1;\n    return CONCAT44(input_param_2 | temp_var_6 >> (result_var_1 & 0xff),\n                    result_var_2 >> (result_var_1 & 0xff) | temp_var_6 << (0x20 - result_var_1 & 0xff));\n  }\n  return CONCAT44(temp_var_4,temp_var_6 >> (result_var_1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "reverse_binary_operation_08000190",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "index_var_1",
                "bVar2": "bool_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "result_var_1",
                "uVar7": "result_var_2",
                "iVar8": "index_var_2",
                "uVar9": "temp_var_6",
                "uVar10": "temp_var_7",
                "uVar11": "temp_var_8",
                "uVar12": "temp_var_9",
                "bVar13": "bool_var_13",
                "bVar14": "bool_var_14",
                "bVar15": "bool_var_15"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_sum_08000194",
            "code": "\nulonglong calculateSum_08000194(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int bitShift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int bitShift2;\n  uint shiftedNum2;\n  uint shiftedNum3;\n  uint sum1;\n  uint sum2;\n  uint shiftedCarry;\n  uint shiftedSum;\n  bool isZeroCarry;\n  bool isZero;\n  bool overflow;\n  \n  shiftedNum2 = num2 << 1;\n  sum1 = num4 << 1;\n  isZeroCarry = ((num2 ^ num4) & 0x7fffffff) == 0;\n  isZero = isZeroCarry && num1 == num3;\n  if (!isZeroCarry || num1 != num3) {\n    isZero = (shiftedNum2 | num1) == 0;\n  }\n  if (!isZero) {\n    isZero = (sum1 | num3) == 0;\n  }\n  bitShift2 = (int)shiftedNum2 >> 0x15;\n  if (!isZero) {\n    isZero = bitShift2 == -1;\n  }\n  bitShift1 = (int)sum1 >> 0x15;\n  if (!isZero) {\n    isZero = bitShift1 == -1;\n  }\n  if (isZero) {\n    if (bitShift2 == -1 || bitShift1 == -1) {\n      sum1 = num4;\n      shiftedNum2 = num3;\n      if (bitShift2 == -1) {\n        sum1 = num2;\n        shiftedNum2 = num1;\n      }\n      if (bitShift2 != -1 || bitShift1 != -1) {\n        num3 = shiftedNum2;\n        num4 = sum1;\n      }\n      isZero = (shiftedNum2 | sum1 << 0xc) == 0;\n      if (isZero) {\n        isZero = (num3 | num4 << 0xc) == 0;\n      }\n      if (isZero) {\n        isZero = sum1 == num4;\n      }\n      if (!isZero) {\n        sum1 = sum1 | 0x80000;\n      }\n      return CONCAT44(sum1,shiftedNum2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shiftedNum2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shiftedNum2 >> 0x15 == 0) {\n      isZero = (num1 & 0x80000000) != 0;\n      sum1 = num2 * 2 + (uint)isZero;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)isZero)) {\n        sum1 = sum1 | 0x80000000;\n      }\n      return CONCAT44(sum1,num1 << 1);\n    }\n    if (shiftedNum2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shiftedNum2 = shiftedNum2 >> 0x15;\n  sum1 = sum1 >> 0x15;\n  sum2 = sum1 - shiftedNum2;\n  isZero = sum2 != 0;\n  if (sum1 < shiftedNum2) {\n    sum2 = -sum2;\n  }\n  shiftedNum3 = num1;\n  temp3 = num2;\n  if (isZero && shiftedNum2 <= sum1) {\n    shiftedNum2 = shiftedNum2 + sum2;\n    shiftedNum3 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < sum2) {\n    return CONCAT44(temp3,shiftedNum3);\n  }\n  sum1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    isZero = shiftedNum3 != 0;\n    shiftedNum3 = -shiftedNum3;\n    sum1 = -sum1 - (uint)isZero;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    isZero = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)isZero;\n  }\n  if (shiftedNum2 == sum2) {\n    temp3 = temp3 ^ 0x100000;\n    if (shiftedNum2 == 0) {\n      sum1 = sum1 ^ 0x100000;\n      shiftedNum2 = 1;\n    }\n    else {\n      sum2 = sum2 - 1;\n    }\n  }\n  shiftedSum = -sum2 + 0x20;\n  if ((int)sum2 < 0x21) {\n    shiftedCarry = num3 << (shiftedSum & 0xff);\n    num3 = num3 >> (sum2 & 0xff);\n    temp1 = shiftedNum3 + num3;\n    temp2 = temp3 << (shiftedSum & 0xff);\n    shiftedSum = temp1 + temp2;\n    sum1 = sum1 + CARRY4(shiftedNum3,num3) + ((int)temp3 >> (sum2 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    shiftedCarry = temp3 << (-sum2 + 0x40 & 0xff);\n    if (num3 != 0) {\n      shiftedCarry = shiftedCarry | 2;\n    }\n    temp3 = (int)temp3 >> (sum2 - 0x20 & 0xff);\n    shiftedSum = shiftedNum3 + temp3;\n    sum1 = sum1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shiftedNum3,temp3);\n  }\n  num2 = sum1 & 0x80000000;\n  sum2 = sum1;\n  if ((int)sum1 < 0) {\n    isZero = shiftedCarry == 0;\n    shiftedCarry = -shiftedCarry;\n    sum2 = -shiftedSum;\n    shiftedSum = -(uint)!isZero - shiftedSum;\n    sum2 = -(uint)(isZero <= sum2) - sum1;\n  }\n  if (0xfffff < sum2) {\n    shiftedNum3 = shiftedNum2 - 1;\n    if (0x1fffff < sum2) {\n      sum1 = sum2 & 1;\n      sum2 = sum2 >> 1;\n      carry = (byte)shiftedSum;\n      shiftedSum = (uint)(sum1 != 0) << 0x1f | shiftedSum >> 1;\n      shiftedCarry = (uint)(carry & 1) << 0x1f | shiftedCarry >> 1;\n      shiftedNum3 = shiftedNum2;\n      if (0xffbfffff < shiftedNum2 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    isZero = 0x7fffffff < shiftedCarry;\n    if (shiftedCarry == 0x80000000) {\n      isZero = (shiftedSum & 1) != 0;\n    }\n    return CONCAT44(sum2 + shiftedNum3 * 0x100000 + (uint)CARRY4(shiftedSum,(uint)isZero) | num2,\n                    shiftedSum + isZero);\n  }\n  isZeroCarry = (shiftedCarry & 0x80000000) != 0;\n  shiftedCarry = shiftedCarry << 1;\n  shiftedNum3 = shiftedSum * 2;\n  isZero = CARRY4(shiftedSum,shiftedSum);\n  shiftedSum = shiftedSum * 2 + (uint)isZeroCarry;\n  sum2 = sum2 * 2 + (uint)(isZero || CARRY4(shiftedNum3,(uint)isZeroCarry));\n  shiftedNum3 = shiftedNum2 - 2;\n  if ((sum2 & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = shiftedSum;\n  shiftedNum2 = sum2;\n  if (sum2 == 0) {\n    temp3 = 0;\n    shiftedNum2 = shiftedSum;\n  }\n  bitShift2 = LZCOUNT(shiftedNum2);\n  if (sum2 == 0) {\n    bitShift2 = bitShift2 + 0x20;\n  }\n  shiftedSum = bitShift2 - 0xb;\n  overflow = SBORROW4(shiftedSum,0x20);\n  sum2 = bitShift2 - 0x2b;\n  isZero = (int)sum2 < 0;\n  isZeroCarry = sum2 == 0;\n  if ((int)shiftedSum < 0x20) {\n    overflow = SCARRY4(sum2,0xc);\n    bitShift2 = bitShift2 + -0x1f;\n    isZero = bitShift2 < 0;\n    isZeroCarry = bitShift2 == 0;\n    sum2 = shiftedSum;\n    if (!isZeroCarry && isZero == overflow) {\n      temp3 = shiftedNum2 << (shiftedSum & 0xff);\n      shiftedNum2 = shiftedNum2 >> (0xcU - bitShift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZeroCarry || isZero != overflow) {\n    shiftedCarry = 0x20 - sum2;\n  }\n  shiftedNum2 = shiftedNum2 << (sum2 & 0xff);\n  if (isZeroCarry || isZero != overflow) {\n    shiftedNum2 = shiftedNum2 | temp3 >> (shiftedCarry & 0xff);\n  }\n  if (isZeroCarry || isZero != overflow) {\n    temp3 = temp3 << (sum2 & 0xff);\n  }\nLAB_08000318:\n  if ((int)shiftedSum <= (int)shiftedNum3) {\n    return CONCAT44(shiftedNum2 + (shiftedNum3 - shiftedSum) * 0x100000 | num2,temp3);\n  }\n  sum2 = ~(shiftedNum3 - shiftedSum);\n  if ((int)sum2 < 0x1f) {\n    bitShift2 = sum2 - 0x13;\n    if (bitShift2 != 0 && bitShift2 < 0 == SCARRY4(sum2 - 0x1f,0xc)) {\n      return CONCAT44(sum1,temp3 >> (0x20 - (0xcU - bitShift2) & 0xff) | shiftedNum2 << (0xcU - bitShift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    sum2 = sum2 + 1;\n    return CONCAT44(num2 | shiftedNum2 >> (sum2 & 0xff),\n                    temp3 >> (sum2 & 0xff) | shiftedNum2 << (0x20 - sum2 & 0xff));\n  }\n  return CONCAT44(sum1,shiftedNum2 >> (sum2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "calculate_sum_08000194",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "bitShift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "bitShift2",
                "uVar7": "shiftedNum2",
                "uVar8": "shiftedNum3",
                "uVar9": "sum1",
                "uVar10": "sum2",
                "uVar11": "shiftedCarry",
                "uVar12": "shiftedSum",
                "bVar13": "isZeroCarry",
                "bVar14": "isZero",
                "bVar15": "overflow"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "shift_and_rotate_0800040c",
            "code": "\nulonglong shiftAndRotate_0800040c(uint input)\n\n{\n  uint result;\n  uint shift;\n  int count;\n  uint offset;\n  uint mask;\n  bool isNegative;\n  bool isZero;\n  bool carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  count = LZCOUNT(input);\n  offset = count + 0x15;\n  carry = SBORROW4(offset,0x20);\n  shift = count - 0xb;\n  isNegative = (int)shift < 0;\n  isZero = shift == 0;\n  if (offset < 0x20) {\n    carry = SCARRY4(shift,0xc);\n    isNegative = false;\n    isZero = count + 1 == 0;\n    shift = offset;\n    if (!isZero && carry == false) {\n      result = input << offset;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto continueShift;\n    }\n  }\n  if (isZero || isNegative != carry) {\n    mask = 0x20 - shift;\n  }\n  input = input << (shift & 0xff);\n  if (isZero || isNegative != carry) {\n    input = input | 0U >> (mask & 0xff);\n  }\n  if (isZero || isNegative != carry) {\n    result = 0 << (shift & 0xff);\n  }\ncontinueShift:\n  if (offset < 0x433) {\n    return CONCAT44(input + (0x432 - offset) * 0x100000,result);\n  }\n  shift = ~(0x432 - offset);\n  if (0x1e < (int)shift) {\n    return (ulonglong)(input >> (shift - 0x1f & 0xff));\n  }\n  count = shift - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(input >> (shift & 0xff),\n                    result >> (shift & 0xff) | input << (0x20 - shift & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "shift_and_rotate_0800040c",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift",
                "iVar3": "count",
                "uVar4": "offset",
                "in_r12": "mask",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "carry",
                "LAB_08000318": "continueShift"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "bitwise_shift_operation_0800042c",
            "code": "\nulonglong bitwise_shift_operation_0800042c(uint input_value)\n\n{\n  uint shift_count;\n  uint absolute_value;\n  uint shift_amount;\n  int leading_zero_count;\n  uint shift_limit;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  absolute_value = input_value;\n  if ((int)sign_bit < 0) {\n    absolute_value = -input_value;\n  }\n  shift_count = 0;\n  leading_zero_count = leading_zero_count(absolute_value);\n  shift_limit = leading_zero_count + 0x15;\n  carry_flag = SBORROW4(shift_limit,0x20);\n  shift_amount = leading_zero_count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_limit < 0x20) {\n    carry_flag = signed_carry_4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zero_count + 1 == 0;\n    shift_amount = shift_limit;\n    if (!is_zero && carry_flag == false) {\n      shift_count = absolute_value << shift_limit;\n      absolute_value = absolute_value >> (0xcU - (leading_zero_count + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  absolute_value = absolute_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    absolute_value = absolute_value | zero >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shift_count = 0 << (shift_amount & 0xff);\n  }\nLAB_08000318:\n  if (shift_limit < 0x433) {\n    return concatenate_44(absolute_value + (0x432 - shift_limit) * 0x100000 | sign_bit,shift_count);\n  }\n  shift_amount = ~(0x432 - shift_limit);\n  if (0x1e < (int)shift_amount) {\n    return concatenate_44(input_value,absolute_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zero_count = shift_amount - 0x13;\n  if (leading_zero_count == 0 || leading_zero_count < 0 != signed_carry_4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate_44(sign_bit | absolute_value >> (shift_amount & 0xff),\n                    shift_count >> (shift_amount & 0xff) | absolute_value << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate_44(input_value,shift_count >> (0x20 - (0xcU - leading_zero_count) & 0xff) | absolute_value << (0xcU - leading_zero_count & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "bitwise_shift_operation_0800042c",
                "param_1": "input_value",
                "uVar1": "shift_count",
                "uVar2": "absolute_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zero_count",
                "uVar5": "shift_limit",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "LZCOUNT": "leading_zero_count",
                "SCARRY4": "signed_carry_4",
                "CONCAT44": "concatenate_44",
                "0U": "zero"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_floating_point_080004f8",
            "code": "\nulonglong calculateFloatingPoint_080004f8(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint unaff_r5;\n  uint temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedValue;\n  \n  combinedValue = CONCAT44(value2,value1);\n  temp5 = 0x7ff;\n  temp2 = value2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    unaff_r5 = value4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    combinedValue = convert_to_double_080006d4();\n  }\n  temp1 = (uint)(combinedValue >> 0x20);\n  temp3 = temp2 + unaff_r5;\n  temp2 = temp1 ^ value4;\n  temp1 = temp1 & ~(temp5 << 0x15);\n  value4 = value4 & ~(temp5 << 0x15);\n  flag1 = ((uint)combinedValue | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (value3 | value4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  value4 = value4 | 0x100000;\n  if (flag1) {\n    value3 = (uint)combinedValue | value3;\n    value4 = (temp2 & 0x80000000 | temp1) ^ value4;\n    temp2 = temp5 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp5,temp4);\n      temp1 = temp5 - temp4;\n      flag1 = temp5 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      value4 = value4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(value4,value3);\n    }\n    value4 = value4 | 0x100000;\n    temp5 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combinedValue & 0xffffffff) * (ulonglong)value3;\n    combinedValue = (combinedValue & 0xffffffff) * (ulonglong)value4 +\n             (ulonglong)temp1 * (ulonglong)value3 + (result1 >> 0x20);\n    temp6 = (uint)combinedValue;\n    result2 = (ulonglong)temp1 * (ulonglong)value4 + (combinedValue >> 0x20);\n    temp5 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp6 = temp6 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp6 & 0x80000000) != 0;\n      temp6 = temp6 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp5,temp5) || CARRY4(temp5 * 2,(uint)flag1)),\n                       temp5 * 2 + (uint)flag1);\n    }\n    value4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    value3 = (uint)result2 << 0xb | temp6 >> 0x15;\n    temp5 = temp6 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp5;\n      if (temp5 == 0x80000000) {\n        flag1 = (temp6 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(value4 + temp4 * 0x100000 + (uint)CARRY4(value3,(uint)flag1),value3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(value4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    value3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    value4 = value4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(value4,value3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = value3 >> (temp1 & 0xff) | value4 << (0x20 - temp1 & 0xff);\n    temp2 = (value4 >> (temp1 & 0xff) & ~((value4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp5 | value3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(value4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp6 = value3 << (temp4 + 0x20 & 0xff);\n    temp1 = value3 >> (temp2 & 0xff) | value4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp6 >> 0x1f);\n    if ((temp5 | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44((value4 & 0x80000000) +\n                    ((value4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp6 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = value3 << (temp2 & 0xff);\n  temp2 = value3 >> (0x20 - temp2 & 0xff) | value4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp5 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((value4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_floating_point_080004f8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedValue"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "convert_to_double_080006d4",
            "code": "\nulonglong convertToDouble_080006d4(uint number1,uint number2,uint number3,uint number4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & number4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    isZero = (number1 | number2 << 1) == 0;\n    if (!isZero) {\n      isZero = (number3 | number4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((number2 ^ number4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = number2 & 0x80000000;\n      do {\n        bit1 = number1 & 0x80000000;\n        number1 = number1 << 1;\n        number2 = number2 * 2 + (uint)(bit1 != 0);\n      } while ((number2 & 0x100000) == 0);\n      number2 = number2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(number2,number1);\n      }\n    }\n    do {\n      bit3 = number3 & 0x80000000;\n      number3 = number3 << 1;\n      number4 = number4 * 2 + (uint)(bit3 != 0);\n    } while ((number4 & 0x100000) == 0);\n    return CONCAT44(number2,number1);\n  }\n  isZero = (number1 | number2 << 1) == 0;\n  if (isZero) {\n    number2 = number4;\n    number1 = number3;\n  }\n  if (!isZero) {\n    isZero = (number3 | number4 << 1) == 0;\n  }\n  bit4 = number2;\n  if (((!isZero) && ((bit2 != bit5 || ((number1 | number2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (number1 = number3, bit4 = number4, (number3 | number4 << 0xc) == 0)))) {\n    return (ulonglong)((number2 ^ number4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,number1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "convert_to_double_080006d4",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "number3",
                "param_4": "number4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_floating_point_0800074c",
            "code": "\nulonglong calculateFloatingPoint_0800074c(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 output;\n  \n  output = CONCAT44(value2,value1);\n  temp14 = 0x7ff;\n  temp7 = value2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = value4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    output = calculate_floating_point_080008ba();\n  }\n  temp9 = (uint)((ulonglong)output >> 0x20);\n  temp12 = (uint)output;\n  temp8 = temp7 - temp10;\n  if ((value3 | value4 << 0xc) == 0) {\n    temp7 = (temp9 ^ value4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (value4 << 0xc) >> 4 | 0x10000000 | value3 >> 0x18;\n    temp14 = value3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ value4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((value3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800086a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "output"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "calculate_floating_point_080008ba",
            "code": "\nulonglong calculateFloatingPoint_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "calculate_floating_point_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_conditions_0800092c",
            "code": "\nuint check_conditions_0800092c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (input_1 | input_2 << 1) == 0;\n  if (isZero) {\n    isZero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = input_2 == input_4;\n  }\n  if (isZero) {\n    isZero = input_1 == input_3;\n  }\n  if (!isZero) {\n    result = input_2 ^ input_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = input_2 == input_4;\n    }\n    isNegative = -1 < (int)result && input_4 <= input_2;\n    if (isZero) {\n      isNegative = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!isNegative) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_conditions_0800092c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "validate_and_return_080009a8",
            "code": "\nvoid validate_and_return_080009a8(undefined4 input_1,undefined4 input_2,undefined4 data_1,undefined4 data_2)\n\n{\n  validate_and_return_080009a8_080009b8(data_1,data_2,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "validate_and_return_080009a8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_1",
                "param_4": "data_2"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "validate_and_return_080009b8",
            "code": "\nundefined4 validate_and_return_080009b8(undefined4 input_value)\n\n{\n  check_conditions_0800092c();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "validate_and_return_080009b8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_validation_success_080009c8",
            "code": "\nbool check_validation_success_080009c8(void)\n\n{\n  char is_valid;\n  \n  validate_and_return_080009b8();\n  return is_valid != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_validation_success_080009c8",
                "in_ZR": "is_valid"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_null_terminated_080009dc",
            "code": "\nbool is_null_terminated_080009dc(void)\n\n{\n  char input_char;\n  \n  validate_and_return_080009b8();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_null_terminated_080009dc",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "validate_and_return_080009f0",
            "code": "\nbool validate_and_return_080009f0(void)\n\n{\n  undefined zero_register;\n  undefined carry_flag;\n  \n  validate_and_return_080009f0_080009b8();\n  return !(bool)carry_flag || (bool)zero_register;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "validate_and_return_080009f0",
                "in_ZR": "zero_register",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "validate_and_return_zero_or_flags_08000a04",
            "code": "\nbool validate_and_return_zero_or_flags_08000a04(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_and_return_080009a8();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "validate_and_return_zero_or_flags_08000a04",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "is_valid_08000a18",
            "code": "\nbool is_valid_08000a18(void)\n\n{\n  char input_char;\n  \n  validate_and_return_080009a8();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "is_valid_08000a18",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "is_valid_parameters_08000a2c",
            "code": "\nundefined4 is_valid_parameters_08000a2c(uint data_1,int data_2,uint data_3,int data_4)\n\n{\n  if ((((data_2 << 1) >> 0x15 != -1) || ((data_1 | data_2 << 0xc) == 0)) &&\n     (((data_4 << 1) >> 0x15 != -1 || ((data_3 | data_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "is_valid_parameters_08000a2c",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "calculate_parameter_value_08000a58",
            "code": "\nuint calculateParameterValue_08000a58(uint inputValue1,uint maskedValue)\n\n{\n  uint result;\n  int tempVar;\n  uint modifiedValue;\n  \n  tempVar = maskedValue * 2 + 0x200000;\n  if (maskedValue * 2 < 0xffe00000) {\n    if (-1 < tempVar) {\n      return 0;\n    }\n    result = tempVar >> 0x15;\n    modifiedValue = -result - 0x3e1;\n    if (result < 0xfffffc20 && modifiedValue != 0) {\n      result = (maskedValue << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (modifiedValue & 0xff);\n      if ((maskedValue & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((inputValue1 | maskedValue << 0xc) != 0) {\n    return 0;\n  }\n  maskedValue = maskedValue & 0x80000000;\n  if (maskedValue == 0) {\n    maskedValue = 0x7fffffff;\n  }\n  return maskedValue;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "calculate_parameter_value_08000a58",
                "param_1": "inputValue1",
                "param_2": "maskedValue",
                "uVar1": "result",
                "iVar2": "tempVar",
                "uVar3": "modifiedValue"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_result_08000aa8",
            "code": "\nuint calculateResult_08000aa8(uint inputValue1,uint inputValue2)\n\n{\n  int tempVar;\n  uint shiftAmount;\n  \n  if ((inputValue2 & 0x80000000) != 0) {\n    return 0;\n  }\n  tempVar = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < tempVar) {\n      return 0;\n    }\n    shiftAmount = -(tempVar >> 0x15) - 0x3e1;\n    if (-1 < (int)shiftAmount) {\n      return (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (shiftAmount & 0xff);\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_result_08000aa8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "iVar1": "tempVar",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_system_call_08000ae8",
            "code": "\nvoid execute_system_call_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_system_call_08000ae8"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_system_call_08000aec",
            "code": "\nundefined4 execute_system_call_08000aec(undefined4 input,undefined4 unused_param,undefined4 unused_param_2,undefined4 output)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = execute_system_call_08000aec_08000ae8(1,input,0,0,output);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_system_call_08000aec",
                "param_1": "input",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "output",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_if_params_valid_08000b08",
            "code": "\nvoid initialize_if_params_valid_08000b08(int param1,int param2)\n\n{\n  if ((param1 == 1) && (param2 == 0xffff)) {\n    initialize_data(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    update_parameters(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    initialize_memory(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_if_params_valid_08000b08",
                "param_1": "param1",
                "param_2": "param2",
                "initialize_and_return_param_08001b18": "initialize_data",
                "initialize_and_update_parameters_08001510": "update_parameters",
                "initialize_memory_0800157c": "initialize_memory"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_and_execute_08000bcc",
            "code": "\nvoid initialize_and_execute_08000bcc(void)\n\n{\n  retrieve_and_set_param_value(DAT_20000064,0);\n  process_memory(DAT_20000064,1);\n  retrieve_and_set_param_value(DAT_20000004,0);\n  process_memory(DAT_20000004,1);\n  retrieve_and_set_param_value(DAT_20000060,0);\n  process_memory(DAT_20000060,1);\n  retrieve_and_set_param_value(DAT_20000004,1);\n  process_parameters(&DAT_20000194,8,2,0);\n  update_and_execute(&DAT_20000194,0,&DAT_20000008);\n  update_parameter_values(&DAT_20000194);\n  process_param(&DAT_20000194,\"Reflow\");\n  update_parameter_values_08001366(&DAT_20000194,0,1);\n  process_param(&DAT_20000194,\"Oven 1.2\");\n  retrieve_and_set_param_value(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  update_parameter_values(&DAT_20000194);\n  initialize_hardware_serial(&DAT_2000036c,0xe100,6);\n  retrieve_and_set_param_value(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initialize();\n  DAT_200001b4 = initialize();\n  execute_system_call(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_and_execute_08000bcc",
                "retrieve_and_set_param_value_08005848": "retrieve_and_set_param_value",
                "process_memory_080057b4": "process_memory",
                "process_parameters_080013a4": "process_parameters",
                "update_and_execute_08001550": "update_and_execute",
                "update_parameter_values_0800135a": "update_parameter_values",
                "process_param_08005c96": "process_param",
                "initialize_hardware_serial_08005a68": "initialize_hardware_serial",
                "initialize_080058e0": "initialize",
                "execute_system_call_08000aec": "execute_system_call"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "process_data_08000cd0",
            "code": "\nvoid processData_08000cd0(void)\n\n{\n  uint initializedValue;\n  undefined4 resultPart1;\n  int resultFlag;\n  undefined4 resultPart2;\n  undefined4 validationResult1;\n  undefined4 validationResult2;\n  undefined4 validationResult3;\n  undefined8 calculationResult;\n  \n  initializedValue = initialize_080058e0();\n  if (DAT_200001b4 < initializedValue) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    calculationResult = calculate_result_080015f8(&DAT_2000024c,0);\n    resultPart2 = (undefined4)((ulonglong)calculationResult >> 0x20);\n    resultPart1 = (undefined4)calculationResult;\n    DAT_20000188 = resultPart1;\n    DAT_2000018c = resultPart2;\n    resultFlag = check_validation_success_080009c8(resultPart1,resultPart2,0,0x40c38800);\n    if (((resultFlag != 0) || (resultFlag = check_validation_success_080009c8(resultPart1,resultPart2,0,0x40c38880), resultFlag != 0)) ||\n       (resultFlag = check_validation_success_080009c8(resultPart1,resultPart2,0,0x40c38900), resultFlag != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  initializedValue = initialize_080058e0();\n  resultPart1 = DAT_20000060;\n  if (DAT_200001b0 < initializedValue) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      resultFlag = check_parameter_value_08005890(DAT_20000060);\n      retrieve_and_set_param_value_08005848(resultPart1,resultFlag == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      convert_to_base_08005d82(&DAT_2000036c,DAT_20000250,10);\n      process_param_08005c96(&DAT_2000036c,&DAT_08007368);\n      validate_and_process_parameters_08005f2c(&DAT_2000036c,validationResult1,DAT_20000240,DAT_20000244,2);\n      process_param_08005c96(&DAT_2000036c,&DAT_08007368);\n      validate_and_process_parameters_08005f2c(&DAT_2000036c,validationResult2,DAT_20000188,DAT_2000018c,2);\n      process_param_08005c96(&DAT_2000036c,&DAT_08007368);\n      process_and_execute_08005f40(&DAT_2000036c,validationResult3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      retrieve_and_set_param_value_08005848(DAT_20000060,1);\n    }\n    update_parameter_values_0800135a(&DAT_20000194);\n    process_param_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    update_parameter_values_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      process_param_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      validate_and_process_parameters_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      update_parameter_values_0800134e(&DAT_20000194,0);\n      process_param_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  resultPart2 = DAT_2000018c;\n  resultPart1 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    resultFlag = validate_and_return_zero_or_flags_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (resultFlag == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_sum_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        calculationResult = bitwise_shift_operation_0800042c(DAT_20000258);\n        update_data_08001960(&DAT_200001c0,(int)((ulonglong)calculationResult >> 0x20),0,0,calculationResult);\n        perform_calculations_08001918(&DAT_200001c0,1000);\n        update_parameter_value_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    resultFlag = validate_and_return_zero_or_flags_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (resultFlag != 0) {\n      calculationResult = initialize_080058e0();\n      DAT_20000254 = (int)calculationResult + 9000;\n      initialize_data_structures_080018f8(&DAT_200001c0,(int)((ulonglong)calculationResult >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    initializedValue = initialize_080058e0();\n    if (DAT_20000254 < initializedValue) {\n      resultFlag = initialize_080058e0();\n      DAT_20000254 = resultFlag + 9000;\n      calculationResult = calculate_sum_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)calculationResult >> 0x20);\n      DAT_20000240 = (undefined4)calculationResult;\n      calculationResult = is_valid_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)calculationResult != 0) {\n        initialize_data_structures_080018f8(&DAT_200001c0,(int)((ulonglong)calculationResult >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    calculationResult = validate_and_return_zero_or_flags_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)calculationResult != 0) {\n      initialize_data_structures_080018f8(&DAT_200001c0,(int)((ulonglong)calculationResult >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    resultFlag = validate_and_return_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (resultFlag != 0) {\n      resultFlag = initialize_080058e0();\n      DAT_20000180 = resultFlag + 1000;\n      retrieve_and_set_param_value_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    initializedValue = initialize_080058e0();\n    if (DAT_20000180 < initializedValue) {\n      retrieve_and_set_param_value_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    resultFlag = is_null_terminated_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (resultFlag != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    resultFlag = check_validation_success_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((resultFlag == 0) && (resultFlag = check_validation_success_080009c8(resultPart1,resultPart2,0,0x40c38880), resultFlag == 0)) &&\n       (resultFlag = check_validation_success_080009c8(resultPart1,resultPart2,0,0x40c38900), resultFlag == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    resultFlag = process_and_shift_data_08005754(DAT_20000068);\n    if (resultFlag == 0) {\n      resultFlag = initialize_080058e0();\n      if (0x32 < (uint)(resultFlag - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    resultFlag = process_and_shift_data_08005754(DAT_20000068);\n    if (resultFlag == 0) {\n      DAT_20000190 = initialize_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (resultFlag = process_and_shift_data_08005754(DAT_20000068), resultFlag != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    resultFlag = initialize_080058e0();\n    calculate_result_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(resultFlag - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    calculationResult = shift_and_rotate_0800040c(resultFlag - DAT_2000025c);\n    resultFlag = is_null_terminated_080009dc((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (resultFlag == 0) {\n      retrieve_and_set_param_value_08005848(DAT_20000064,0);\n    }\n    else {\n      retrieve_and_set_param_value_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    retrieve_and_set_param_value_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "uVar1": "initializedValue",
                "uVar2": "resultPart1",
                "iVar3": "resultFlag",
                "uVar4": "resultPart2",
                "extraout_r1": "validationResult1",
                "extraout_r1_00": "validationResult2",
                "extraout_r1_01": "validationResult3",
                "uVar5": "calculationResult"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_parameters_08001294",
            "code": "\nvoid setParameters_08001294(int objAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(objAddress + 0x18) = value1;\n  *(undefined *)(objAddress + 0x19) = value2;\n  *(undefined *)(objAddress + 0x1a) = value3;\n  *(undefined *)(objAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "objAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "set_param_values_080012a2",
            "code": "\nvoid setParamValues_080012a2(int param)\n\n{\n  retrieveAndSetParamValue(*(undefined *)(param + 10),0);\n  retrieveAndSetParamValue(*(undefined *)(param + 10),1);\n  retrieveAndSetParamValue(*(undefined *)(param + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "set_param_values_080012a2",
                "param_1": "param",
                "retrieve_and_set_param_value_08005848": "retrieveAndSetParamValue"
            },
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "set_param_values_080012c0",
            "code": "\nvoid setParamValues_080012c0(int paramArray,int value)\n\n{\n  uint iter;\n  \n  for (iter = 0; (int)iter < 4; iter = iter + 1) {\n    retrieveAndSetParamValue(*(undefined *)(paramArray + iter + 0xb),value >> (iter & 0xff) & 1);\n  }\n  setParamValues_080012c0Final(paramArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "set_param_values_080012c0",
                "param_1": "paramArray",
                "param_2": "value",
                "uVar1": "iter",
                "retrieve_and_set_param_value_08005848": "retrieveAndSetParamValue",
                "set_param_values_080012a2": "setParamValuesFinal"
            },
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "set_param_values_and_retrieve_080012e8",
            "code": "\nvoid setParamValuesAndRetrieve_080012e8(int arg1,int arg2)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 8; index = index + 1) {\n    retrieve_and_set_param_value_08005848(*(undefined *)(arg1 + index + 0xb),arg2 >> (index & 0xff) & 1);\n  }\n  set_param_values_080012a2(arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "set_param_values_and_retrieve_080012e8",
                "param_1": "arg1",
                "param_2": "arg2",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "update_parameter_values_08001310",
            "code": "\nvoid updateParameterValues_08001310(int paramPtr,uint value,undefined4 firstValue,undefined4 secondValue)\n\n{\n  retrieve_and_set_param_value_08005848(*(undefined *)(paramPtr + 8),firstValue,firstValue,secondValue,secondValue);\n  if (*(char *)(paramPtr + 9) != -1) {\n    retrieve_and_set_param_value_08005848(*(char *)(paramPtr + 9),0);\n  }\n  if ((*(byte *)(paramPtr + 0x13) & 0x10) == 0) {\n    set_param_values_080012c0(paramPtr,value >> 4);\n    set_param_values_080012c0(paramPtr,value);\n    return;\n  }\n  set_param_values_and_retrieve_080012e8(paramPtr,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "update_parameter_values_08001310",
                "param_1": "paramPtr",
                "param_2": "value",
                "param_3": "firstValue",
                "param_4": "secondValue"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "update_parameter_values_0800134e",
            "code": "\nundefined4 update_parameter_values_0800134e(undefined4 ptr_data_1,undefined4 ptr_data_2,undefined4 ptr_data_3,undefined4 ptr_data_4)\n\n{\n  update_parameter_values_0800134e_08001310(ptr_data_1,ptr_data_2,1,ptr_data_4,ptr_data_4);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "update_parameter_values_0800134e",
                "param_1": "ptr_data_1",
                "param_2": "ptr_data_2",
                "param_3": "ptr_data_3",
                "param_4": "ptr_data_4"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "update_parameter_values_0800135a",
            "code": "\nvoid update_parameter_values_0800135a(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  update_parameter_values_0800135a_08001310(param_1,1,0,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "update_parameter_values_0800135a"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "update_parameter_values_08001366",
            "code": "\nvoid updateParameterValues_08001366(int inputPointer,char character,uint limit,undefined4 paramFour)\n\n{\n  char selectedCharacter;\n  \n  if (3 < limit) {\n    limit = 3;\n  }\n  if ((int)(uint)*(byte *)(inputPointer + 0x17) <= (int)limit) {\n    limit = *(byte *)(inputPointer + 0x17) - 1 & 0xff;\n  }\n  selectedCharacter = *(char *)(limit + inputPointer + 0x18);\n  update_parameter_values_08001310(inputPointer,character + selectedCharacter | 0x80,0,selectedCharacter,paramFour);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "update_parameter_values_08001366",
                "param_1": "inputPointer",
                "param_2": "character",
                "param_3": "limit",
                "param_4": "paramFour",
                "cVar1": "selectedCharacter"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "update_parameter_and_value_0800138e",
            "code": "\nvoid update_parameter_and_value_0800138e(int param_ptr,undefined4 param_val_1,undefined4 param_val_2,undefined4 param_val_3)\n\n{\n  byte current_byte;\n  \n  current_byte = *(byte *)(param_ptr + 0x14);\n  *(byte *)(param_ptr + 0x14) = current_byte | 4;\n  update_param_vals(param_ptr,current_byte | 0xc,0,param_val_3,param_val_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "update_parameter_and_value_0800138e",
                "param_1": "param_ptr",
                "param_2": "param_val_1",
                "param_3": "param_val_2",
                "param_4": "param_val_3",
                "bVar1": "current_byte",
                "update_parameter_values_08001310": "update_param_vals"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "process_parameters_080013a4",
            "code": "\nvoid processParameters_080013a4(int param1,int param2,int param3,int param4)\n\n{\n  int variable1;\n  int variable2;\n  \n  if (1 < param3) {\n    *(byte *)(param1 + 0x13) = *(byte *)(param1 + 0x13) | 8;\n  }\n  *(char *)(param1 + 0x17) = (char)param3;\n  set_parameters_08001294(param1,0,0x40,param2,param2 + 0x40);\n  if ((param4 != 0) && (param3 == 1)) {\n    *(byte *)(param1 + 0x13) = *(byte *)(param1 + 0x13) | 4;\n  }\n  process_memory_080057b4(*(undefined *)(param1 + 8),1);\n  if (*(char *)(param1 + 9) != -1) {\n    process_memory_080057b4(*(char *)(param1 + 9),1);\n  }\n  process_memory_080057b4(*(undefined *)(param1 + 10),1);\n  variable2 = 0;\n  while( true ) {\n    if ((*(byte *)(param1 + 0x13) & 0x10) == 0) {\n      variable1 = 4;\n    }\n    else {\n      variable1 = 8;\n    }\n    if (variable1 <= variable2) break;\n    process_memory_080057b4(*(undefined *)(param1 + variable2 + 0xb),1);\n    variable2 = variable2 + 1;\n  }\n  retrieve_and_set_param_value_08005848(*(undefined *)(param1 + 8),0);\n  retrieve_and_set_param_value_08005848(*(undefined *)(param1 + 10),0);\n  if (*(char *)(param1 + 9) != -1) {\n    retrieve_and_set_param_value_08005848(*(char *)(param1 + 9),0);\n  }\n  if ((*(byte *)(param1 + 0x13) & 0x10) == 0) {\n    set_param_values_080012c0(param1,3);\n    set_param_values_080012c0(param1,3);\n    set_param_values_080012c0(param1,3);\n    set_param_values_080012c0(param1,2);\n  }\n  else {\n    update_parameter_values_08001310(param1,*(byte *)(param1 + 0x13) | 0x20,0);\n    update_parameter_values_08001310(param1,*(byte *)(param1 + 0x13) | 0x20,0);\n    update_parameter_values_08001310(param1,*(byte *)(param1 + 0x13) | 0x20,0);\n  }\n  update_parameter_values_08001310(param1,*(byte *)(param1 + 0x13) | 0x20,0);\n  *(undefined *)(param1 + 0x14) = 4;\n  update_parameter_and_value_0800138e(param1);\n  update_parameter_values_0800135a(param1);\n  *(undefined *)(param1 + 0x15) = 2;\n  update_parameter_values_08001310(param1,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "process_parameters_080013a4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "variable1",
                "iVar2": "variable2"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "initialize_parameters_080014ba",
            "code": "\nvoid initializeParameters_080014ba(int buffer,int flag,undefined valueA,undefined4 valueB,undefined valueC,\n                 undefined valueD,undefined valueE,undefined valueF,undefined valueG,\n                 undefined valueH,undefined valueI,undefined valueJ,undefined valueK)\n\n{\n  *(undefined *)(buffer + 8) = valueA;\n  *(char *)(buffer + 9) = (char)valueB;\n  *(undefined *)(buffer + 10) = valueC;\n  *(undefined *)(buffer + 0xb) = valueD;\n  *(undefined *)(buffer + 0xc) = valueE;\n  *(undefined *)(buffer + 0xd) = valueF;\n  *(undefined *)(buffer + 0xe) = valueG;\n  *(undefined *)(buffer + 0xf) = valueH;\n  *(undefined *)(buffer + 0x10) = valueI;\n  *(undefined *)(buffer + 0x11) = valueJ;\n  *(undefined *)(buffer + 0x12) = valueK;\n  if (flag == 0) {\n    *(undefined *)(buffer + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(buffer + 0x13) = 0;\n  }\n  processParameters(buffer,0x10,1,0,valueB);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "initialize_parameters_080014ba",
                "param_1": "buffer",
                "param_2": "flag",
                "param_3": "valueA",
                "param_4": "valueB",
                "param_5": "valueC",
                "param_6": "valueD",
                "param_7": "valueE",
                "param_8": "valueF",
                "param_9": "valueG",
                "param_10": "valueH",
                "param_11": "valueI",
                "param_12": "valueJ",
                "param_13": "valueK",
                "process_parameters_080013a4": "processParameters"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_and_update_parameters_08001510",
            "code": "\nundefined4 *\ninitialize_and_update_parameters_08001510(undefined4 *parameters,undefined4 value_1,undefined4 value_2,undefined4 value_3,\n            undefined param_5,undefined param_6,undefined param_7)\n\n{\n  parameters[1] = 0;\n  *parameters = &PTR_update_parameter_values_0800134e_1_080073f8;\n  initialize_parameters_080014ba(parameters,1,value_1,0xff,value_2,value_3,param_5,param_6,param_7,0,0,0,0);\n  return parameters;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_and_update_parameters_08001510",
                "param_1": "parameters",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "update_and_execute_08001550",
            "code": "\nvoid update_and_execute_08001550(undefined4 *parameter_array,uint flags,int data_ptr)\n\n{\n  int index;\n  \n  update_parameter_values_08001310(parameter_array,(flags & 7) << 3 | 0x40,0);\n  for (index = 0; index < 8; index = index + 1) {\n    (**(code **)*parameter_array)(parameter_array,*(undefined *)(data_ptr + index));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "update_and_execute_08001550",
                "param_1": "parameter_array",
                "param_2": "flags",
                "param_3": "data_ptr",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_memory_0800157c",
            "code": "\nundefined * initializeMemory_0800157c(undefined *memoryBuffer,undefined4 value1,undefined value2,undefined value3)\n\n{\n  *memoryBuffer = (char)value1;\n  memoryBuffer[1] = value2;\n  memoryBuffer[2] = value3;\n  process_memory_080057b4(value1,0);\n  process_memory_080057b4(memoryBuffer[1],1);\n  process_memory_080057b4(memoryBuffer[2],1);\n  retrieve_and_set_param_value_08005848(memoryBuffer[1],1);\n  retrieve_and_set_param_value_08005848(memoryBuffer[2],0);\n  return memoryBuffer;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_memory_0800157c",
                "param_1": "memoryBuffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "retrieve_param_flags_080015b2",
            "code": "\nuint retrieve_param_flags_080015b2(undefined *param_values)\n\n{\n  int value_check_result;\n  uint bit_index;\n  uint result_flag;\n  \n  retrieve_and_set_value(param_values[1],0);\n  result_flag = 0;\n  for (bit_index = 0x1f; -1 < (int)bit_index; bit_index = bit_index - 1) {\n    retrieve_and_set_value(param_values[2],1);\n    value_check_result = check_value(*param_values);\n    if (value_check_result != 0) {\n      result_flag = result_flag | 1 << (bit_index & 0xff);\n    }\n    retrieve_and_set_value(param_values[2],0);\n  }\n  retrieve_and_set_value(param_values[1],1);\n  return result_flag;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "retrieve_param_flags_080015b2",
                "param_1": "param_values",
                "iVar1": "value_check_result",
                "uVar2": "bit_index",
                "uVar3": "result_flag",
                "retrieve_and_set_param_value_08005848": "retrieve_and_set_value",
                "check_parameter_value_08005890": "check_value"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_result_080015f8",
            "code": "\nundefined8 calculate_result_080015f8(undefined4 param_flags,int flag,undefined4 param_3,undefined4 param_4)\n\n{\n  uint flags;\n  undefined8 result;\n  \n  flags = retrieve_param_flags_080015b2();\n  if ((flags & 0x10000) == 0) {\n    flags = flags >> 0x12;\n    result = shift_and_rotate_0800040c(flags & 0x1fff);\n    if ((flags & 0x2000) != 0) {\n      result = shift_and_rotate_0800040c(~flags & 0x1fff);\n      result = calculate_sum_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,param_4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = calculate_floating_point_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (flag == 1) {\n      result = calculate_floating_point_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = calculate_floating_point_0800074c((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = calculate_sum_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    flags = flags & 7;\n    if (flags == 2) {\n      return 0x40c3888000000000;\n    }\n    if (flags == 4) {\n      return 0x40c3890000000000;\n    }\n    if (flags != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_result_080015f8",
                "param_1": "param_flags",
                "param_2": "flag",
                "uVar1": "flags",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "calculate_result_080016b4",
            "code": "\nchar calculateResult_080016b4(int input)\n\n{\n  char flag;\n  int initializedValue;\n  int isValid;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  char flag1;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  undefined8 temp14;\n  undefined8 temp15;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  \n  flag1 = *(char *)(input + 0x70);\n  if (flag1 != '\\0') {\n    initializedValue = initializeValue();\n    if ((uint)(initializedValue - *(int *)(input + 0x44)) < *(uint *)(input + 0x58)) {\n      flag1 = '\\0';\n    }\n    else {\n      temp2 = **(undefined4 **)(input + 0x38);\n      temp5 = (*(undefined4 **)(input + 0x38))[1];\n      temp12 = reverseBinaryOperation(**(undefined4 **)(input + 0x40),(*(undefined4 **)(input + 0x40))[1])\n      ;\n      temp11 = (undefined4)((ulonglong)temp12 >> 0x20);\n      temp13 = reverseBinaryOperation(temp2,temp5,*(undefined4 *)(input + 0x50),\n                            *(undefined4 *)(input + 0x54));\n      temp1 = (undefined4)((ulonglong)temp13 >> 0x20);\n      temp14 = calculateFloatingPoint(intValue2,temp11,*(undefined4 *)(input + 0x20),\n                            *(undefined4 *)(input + 0x24));\n      temp14 = calculateSum((int)temp14,(int)((ulonglong)temp14 >> 0x20),\n                            *(undefined4 *)(input + 0x48),*(undefined4 *)(input + 0x4c));\n      *(undefined8 *)(input + 0x48) = temp14;\n      flag = *(char *)(input + 0x71);\n      if (flag == '\\0') {\n        temp15 = calculateFloatingPoint(intValue4,temp1,*(undefined4 *)(input + 0x18),\n                              *(undefined4 *)(input + 0x1c));\n        temp14 = reverseBinaryOperation((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp15,\n                              (int)((ulonglong)temp15 >> 0x20));\n        *(undefined8 *)(input + 0x48) = temp14;\n      }\n      temp3 = *(undefined4 *)(input + 0x48);\n      temp6 = *(undefined4 *)(input + 0x4c);\n      temp9 = *(undefined4 *)(undefined8 *)(input + 0x68);\n      temp10 = *(undefined4 *)(input + 0x6c);\n      temp14 = *(undefined8 *)(input + 0x68);\n      isValid = isValidFunction(temp3,temp6,temp9,temp10);\n      if (isValid == 0) {\n        temp4 = *(undefined4 *)(input + 0x60);\n        temp7 = *(undefined4 *)(input + 100);\n        isValid = isNullTerminated(temp3,temp6);\n        if (isValid != 0) {\n          *(undefined4 *)(input + 0x48) = temp4;\n          *(undefined4 *)(input + 0x4c) = temp7;\n        }\n      }\n      else {\n        *(undefined4 *)(input + 0x48) = temp9;\n        *(undefined4 *)(input + 0x4c) = temp10;\n      }\n      if (flag == '\\0') {\n        temp12 = 0;\n      }\n      else {\n        temp12 = calculateFloatingPoint(intValue2,temp11,*(undefined4 *)(input + 0x18),\n                              *(undefined4 *)(input + 0x1c));\n      }\n      localVar2 = (undefined4)((ulonglong)temp12 >> 0x20);\n      localVar1 = (undefined4)temp12;\n      temp11 = *(undefined4 *)(input + 0x48);\n      temp3 = *(undefined4 *)(input + 0x4c);\n      temp12 = calculateFloatingPoint(intValue4,temp1,*(undefined4 *)(input + 0x28),\n                            *(undefined4 *)(input + 0x2c));\n      temp12 = reverseBinaryOperation(temp11,temp3,intValue2,(int)((ulonglong)temp12 >> 0x20));\n      temp12 = calculateSum(localVar1,localVar2,intValue2,(int)((ulonglong)temp12 >> 0x20));\n      temp11 = (undefined4)((ulonglong)temp12 >> 0x20);\n      isValid = isNullTerminated(temp9,temp10,intValue2,temp11);\n      if (isValid == 0) {\n        temp14 = *(undefined8 *)(input + 0x60);\n        isValid = isNullTerminated(intValue2,temp11,*(undefined4 *)(undefined8 *)(input + 0x60),\n                             *(undefined4 *)(input + 100));\n        if (isValid == 0) {\n          temp14 = temp12;\n        }\n      }\n      **(undefined8 **)(input + 0x3c) = temp14;\n      *(undefined4 *)(input + 0x50) = temp2;\n      *(undefined4 *)(input + 0x54) = temp5;\n      *(int *)(input + 0x44) = initializedValue;\n    }\n  }\n  return flag1;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "calculate_result_080016b4",
                "param_1": "input",
                "cVar1": "flag",
                "iVar2": "initializedValue",
                "iVar3": "isValid",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar12": "temp9",
                "uVar13": "temp10",
                "uVar14": "temp11",
                "uVar15": "temp12",
                "uVar16": "temp13",
                "uVar17": "temp14",
                "uVar18": "temp15",
                "local_38": "localVar1",
                "uStack_34": "localVar2",
                "(int)uVar15": "intValue2",
                "(int)uVar16": "intValue4",
                "calculate_floating_point_080004f8": "calculateFloatingPoint",
                "reverse_binary_operation_08000190": "reverseBinaryOperation",
                "calculate_sum_08000194": "calculateSum",
                "initialize_080058e0": "initializeValue",
                "is_valid_08000a18": "isValidFunction",
                "is_null_terminated_080009dc": "isNullTerminated"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "initialize_data_structures_08001814",
            "code": "\nvoid initializeDataStructures_08001814(undefined4 *dataStruct,undefined4 param1,undefined4 str1,undefined4 str2,\n                 undefined4 str3,undefined4 str4,undefined4 str5,undefined4 str6,\n                 int flag)\n\n{\n  int isTerminated;\n  undefined4 floatingPointVal;\n  undefined flagVal;\n  bool isFlagSet;\n  undefined8 shiftedVal;\n  undefined8 result1;\n  undefined8 result2;\n  \n  isTerminated = is_null_terminated_080009dc(str1,str2,0,0);\n  if (((isTerminated == 0) && (isTerminated = is_null_terminated_080009dc(str3,str4,0,0), isTerminated == 0)) &&\n     (isTerminated = is_null_terminated_080009dc(str5,str6,0,0), isTerminated == 0)) {\n    dataStruct[0xd] = flag;\n    isFlagSet = flag != 1;\n    if (isFlagSet) {\n      flag = 0;\n    }\n    flagVal = (undefined)flag;\n    if (!isFlagSet) {\n      flagVal = 1;\n    }\n    *(undefined *)((int)dataStruct + 0x71) = flagVal;\n    *dataStruct = str1;\n    dataStruct[1] = str2;\n    dataStruct[2] = str3;\n    dataStruct[3] = str4;\n    dataStruct[4] = str5;\n    dataStruct[5] = str6;\n    shiftedVal = shift_and_rotate_0800040c(dataStruct[0x16]);\n    shiftedVal = calculate_floating_point_0800074c((int)shiftedVal,(int)((ulonglong)shiftedVal >> 0x20),0,0x408f4000);\n    floatingPointVal = (undefined4)((ulonglong)shiftedVal >> 0x20);\n    dataStruct[6] = str1;\n    dataStruct[7] = str2;\n    result1 = calculate_floating_point_080004f8(str3,str4,(int)shiftedVal,floatingPointVal);\n    *(undefined8 *)(dataStruct + 8) = result1;\n    shiftedVal = calculate_floating_point_0800074c(str5,str6,(int)shiftedVal,floatingPointVal);\n    *(undefined8 *)(dataStruct + 10) = shiftedVal;\n    if (dataStruct[0xc] == 1) {\n      result2 = reverse_binary_operation_08000190(0,0,str1,str2);\n      *(undefined8 *)(dataStruct + 6) = result2;\n      result1 = reverse_binary_operation_08000190(0,0,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      *(undefined8 *)(dataStruct + 8) = result1;\n      shiftedVal = reverse_binary_operation_08000190(0,0,(int)shiftedVal,(int)((ulonglong)shiftedVal >> 0x20));\n      *(undefined8 *)(dataStruct + 10) = shiftedVal;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "initialize_data_structures_08001814",
                "param_1": "dataStruct",
                "param_2": "param1",
                "param_3": "str1",
                "param_4": "str2",
                "param_5": "str3",
                "param_6": "str4",
                "param_7": "str5",
                "param_8": "str6",
                "param_9": "flag",
                "iVar1": "isTerminated",
                "uVar2": "floatingPointVal",
                "uVar3": "flagVal",
                "bVar4": "isFlagSet",
                "uVar5": "shiftedVal",
                "uVar6": "result1",
                "uVar7": "result2"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_data_structures_080018f8",
            "code": "\nvoid initializeDataStructures_080018f8(void)\n\n{\n  initializeDataStructures_080018f8Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_data_structures_080018f8",
                "initialize_data_structures_08001814": "initializeDataStructuresHelper"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "perform_calculations_08001918",
            "code": "\nvoid performCalculations_08001918(int inputData,int count,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result1;\n  undefined8 shiftedValue;\n  undefined8 rotatedValue;\n  \n  if (0 < count) {\n    shiftedValue = bitwise_shift_operation_0800042c(count);\n    rotatedValue = shift_and_rotate_0800040c(*(undefined4 *)(inputData + 0x58));\n    shiftedValue = calculate_floating_point_0800074c((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)rotatedValue,\n                         (int)((ulonglong)rotatedValue >> 0x20),param4);\n    result1 = (undefined4)((ulonglong)shiftedValue >> 0x20);\n    rotatedValue = calculate_floating_point_080004f8((int)shiftedValue,result1,*(undefined4 *)(inputData + 0x20),\n                         *(undefined4 *)(inputData + 0x24));\n    *(undefined8 *)(inputData + 0x20) = rotatedValue;\n    shiftedValue = calculate_floating_point_0800074c(*(undefined4 *)(inputData + 0x28),*(undefined4 *)(inputData + 0x2c),(int)shiftedValue,\n                         result1);\n    *(undefined8 *)(inputData + 0x28) = shiftedValue;\n    *(int *)(inputData + 0x58) = count;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "perform_calculations_08001918",
                "param_1": "inputData",
                "param_2": "count",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "shiftedValue",
                "uVar3": "rotatedValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_data_08001960",
            "code": "\nvoid updateData_08001960(int dataPtr,undefined4 param2,undefined4 newValue1,undefined4 newValue2,\n                 undefined4 newValue3,undefined4 newValue4)\n\n{\n  int validationResult;\n  undefined4 *ptr;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  validationResult = validate_and_return_zero_or_flags_08000a04(newValue1,newValue2,newValue3,newValue4,newValue2);\n  if (validationResult == 0) {\n    *(undefined4 *)(dataPtr + 0x60) = newValue1;\n    *(undefined4 *)(dataPtr + 100) = newValue2;\n    *(undefined4 *)(dataPtr + 0x68) = newValue3;\n    *(undefined4 *)(dataPtr + 0x6c) = newValue4;\n    if (*(char *)(dataPtr + 0x70) != '\\0') {\n      ptr = *(undefined4 **)(dataPtr + 0x3c);\n      value1 = *ptr;\n      value3 = ptr[1];\n      validationResult = is_null_terminated_080009dc(newValue3,newValue4,value1,value3);\n      if (validationResult == 0) {\n        validationResult = is_valid_08000a18(newValue1,newValue2,value1,value3);\n        if (validationResult != 0) {\n          *ptr = newValue1;\n          ptr[1] = newValue2;\n        }\n      }\n      else {\n        *ptr = newValue3;\n        ptr[1] = newValue4;\n      }\n      value1 = *(undefined4 *)(dataPtr + 0x48);\n      value3 = *(undefined4 *)(dataPtr + 0x4c);\n      value2 = *(undefined4 *)(dataPtr + 0x68);\n      value4 = *(undefined4 *)(dataPtr + 0x6c);\n      validationResult = is_valid_08000a18(value1,value3,value2,value4);\n      if (validationResult != 0) {\n        *(undefined4 *)(dataPtr + 0x48) = value2;\n        *(undefined4 *)(dataPtr + 0x4c) = value4;\n        return;\n      }\n      value2 = *(undefined4 *)(dataPtr + 0x60);\n      value4 = *(undefined4 *)(dataPtr + 100);\n      validationResult = is_null_terminated_080009dc(value1,value3,value2,value4);\n      if (validationResult != 0) {\n        *(undefined4 *)(dataPtr + 0x48) = value2;\n        *(undefined4 *)(dataPtr + 0x4c) = value4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_data_08001960",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "newValue1",
                "param_4": "newValue2",
                "param_5": "newValue3",
                "param_6": "newValue4",
                "iVar1": "validationResult",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "value4"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "update_values_080019f6",
            "code": "\nvoid updateValues_080019f6(int baseAddress)\n\n{\n  int isValid;\n  undefined4 value1;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 value2;\n  \n  ptr1 = **(undefined4 **)(baseAddress + 0x3c);\n  ptr2 = (*(undefined4 **)(baseAddress + 0x3c))[1];\n  *(undefined4 *)(baseAddress + 0x48) = ptr1;\n  *(undefined4 *)(baseAddress + 0x4c) = ptr2;\n  value1 = (*(undefined4 **)(baseAddress + 0x38))[1];\n  *(undefined4 *)(baseAddress + 0x50) = **(undefined4 **)(baseAddress + 0x38);\n  *(undefined4 *)(baseAddress + 0x54) = value1;\n  value1 = *(undefined4 *)(baseAddress + 0x68);\n  value2 = *(undefined4 *)(baseAddress + 0x6c);\n  isValid = is_valid_08000a18(ptr1,ptr2,value1,value2);\n  if (isValid == 0) {\n    value1 = *(undefined4 *)(baseAddress + 0x60);\n    value2 = *(undefined4 *)(baseAddress + 100);\n    isValid = is_null_terminated_080009dc(ptr1,ptr2,value1,value2);\n    if (isValid != 0) {\n      *(undefined4 *)(baseAddress + 0x48) = value1;\n      *(undefined4 *)(baseAddress + 0x4c) = value2;\n    }\n    return;\n  }\n  *(undefined4 *)(baseAddress + 0x48) = value1;\n  *(undefined4 *)(baseAddress + 0x4c) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "update_values_080019f6",
                "param_1": "baseAddress",
                "iVar1": "isValid",
                "uVar2": "value1",
                "uVar3": "ptr1",
                "uVar4": "ptr2",
                "uVar5": "value2"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_parameter_value_08001a44",
            "code": "\nvoid updateParameterValue_08001a44(int paramAddress,int updateFlag)\n\n{\n  undefined flagValue;\n  \n  if (updateFlag == 1) {\n    flagValue = 1;\n    if (*(char *)(paramAddress + 0x70) == '\\0') {\n      update_values_080019f6();\n    }\n  }\n  else {\n    flagValue = 0;\n  }\n  *(undefined *)(paramAddress + 0x70) = flagValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_parameter_value_08001a44",
                "param_1": "paramAddress",
                "param_2": "updateFlag",
                "uVar1": "flagValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_values_based_on_condition_08001a66",
            "code": "\nvoid updateValuesBasedOnCondition_08001a66(int data,int newValue,undefined4 unusedParam_1,undefined4 unusedParam_2)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(data + 0x70) != '\\0') && (*(int *)(data + 0x30) != newValue)) {\n    result = performBinaryOperation(0,0,*(undefined4 *)(data + 0x18),*(undefined4 *)(data + 0x1c),unusedParam_2\n                        );\n    *(undefined8 *)(data + 0x18) = result;\n    result = performBinaryOperation(0,0,*(undefined4 *)(data + 0x20),*(undefined4 *)(data + 0x24));\n    *(undefined8 *)(data + 0x20) = result;\n    result = performBinaryOperation(0,0,*(undefined4 *)(data + 0x28),*(undefined4 *)(data + 0x2c));\n    *(undefined8 *)(data + 0x28) = result;\n  }\n  *(int *)(data + 0x30) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_values_based_on_condition_08001a66",
                "param_1": "data",
                "param_2": "newValue",
                "param_3": "unusedParam_1",
                "param_4": "unusedParam_2",
                "uVar1": "result",
                "reverse_binary_operation_08000190": "performBinaryOperation"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_and_calculate_values_08001ab0",
            "code": "\nint initializeAndCalculateValues_08001ab0(int dataStruct,undefined4 input1,undefined4 input2,undefined4 input3,\n                undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                undefined4 param9,undefined4 param10,undefined4 param11,undefined4 param12)\n\n{\n  int result;\n  undefined4 extraReturn;\n  \n  *(undefined4 *)(dataStruct + 0x3c) = input2;\n  *(undefined4 *)(dataStruct + 0x38) = input1;\n  *(undefined4 *)(dataStruct + 0x40) = input3;\n  *(undefined *)(dataStruct + 0x70) = 0;\n  updateData(dataStruct,input1,0,0,0,0x406fe000);\n  *(undefined4 *)(dataStruct + 0x58) = 100;\n  updateValuesBasedOnCondition(dataStruct,param12);\n  initializeDataStructures(dataStruct,extraReturn,param5,param6,param7,param8,param9,param10,param11);\n  result = initializeFunction();\n  *(int *)(dataStruct + 0x44) = result - *(int *)(dataStruct + 0x58);\n  return dataStruct;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_and_calculate_values_08001ab0",
                "param_1": "dataStruct",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "iVar1": "result",
                "extraout_r1": "extraReturn",
                "update_data_08001960": "updateData",
                "update_values_based_on_condition_08001a66": "updateValuesBasedOnCondition",
                "initialize_data_structures_08001814": "initializeDataStructures",
                "initialize_080058e0": "initializeFunction"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_param_08001b18",
            "code": "\nundefined4 initialize_and_return_param_08001b18(undefined4 input_param)\n\n{\n  initialize_data_and_calculate_values();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_param_08001b18",
                "param_1": "input_param",
                "initialize_and_calculate_values_08001ab0": "initialize_data_and_calculate_values"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_board_08001b48",
            "code": "\nvoid initializeBoard_08001b48(void)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined4 settings [2];\n  undefined4 settingValue;\n  undefined4 deviceAddress;\n  undefined4 powerMode;\n  undefined4 memoryOffset;\n  undefined4 memorySize;\n  undefined4 readSize;\n  undefined4 sensorData [4];\n  undefined4 sensorPin;\n  undefined4 bufferSize;\n  undefined4 sensorType;\n  undefined4 loopCount;\n  undefined4 configuration;\n  \n  sensorData[0] = 2;\n  sensorPin = 1;\n  bufferSize = 0x10;\n  sensorType = 2;\n  loopCount = 0;\n  configuration = 0x380000;\n  iVar1 = checkAndWait(sensorData);\n  if (iVar1 != 0) {\n    runInfiniteLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  deviceAddress = 0xf;\n  powerMode = 2;\n  memoryOffset = 0;\n  memorySize = 0x400;\n  readSize = 0;\n  iVar1 = updateMemoryConfiguration(&deviceAddress);\n  if (iVar1 != 0) {\n    runInfiniteLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  settings[0] = 2;\n  settingValue = 0x8000;\n  iVar1 = updateSettings(settings);\n  if (iVar1 != 0) {\n    runInfiniteLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  uVar2 = globalValue();\n  setParameterValues(uVar2 / 1000);\n  updateFlag(4);\n  applyBitsToMemory(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_board_08001b48",
                "local_30": "sensorData",
                "local_20": "sensorPin",
                "local_1c": "bufferSize",
                "local_14": "sensorType",
                "local_10": "loopCount",
                "local_c": "configuration",
                "check_and_wait_08003688": "checkAndWait",
                "run_infinite_loop_08004d40": "runInfiniteLoop",
                "local_44": "deviceAddress",
                "local_40": "powerMode",
                "local_3c": "memoryOffset",
                "local_38": "memorySize",
                "local_34": "readSize",
                "update_memory_configuration_08003ad4": "updateMemoryConfiguration",
                "local_54": "settings",
                "local_4c": "settingValue",
                "update_settings_08003c90": "updateSettings",
                "get_global_variable_08003c44": "globalValue",
                "set_param_values_08002514": "setParameterValues",
                "update_flag_08002560": "updateFlag",
                "apply_bits_to_memory_08002494": "applyBitsToMemory"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08001be8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  set_hardware_flags_08004d44();\n  execute_functions_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  execute_data_processing_loop_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_game_08001c32",
            "code": "\nvoid initializeGame_08001c32(void)\n\n{\n  initializeGame_08001c32Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_game_08001c32",
                "initialize_game_08004c52": "initializeGameHelper"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "set_memory_configuration_08001c3c",
            "code": "\nundefined4 setMemoryConfiguration_08001c3c(uint configurationValue)\n\n{\n  int result;\n  \n  result = set_param_values_08002514(DAT_20000084 / (1000 / DAT_20000078));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < configurationValue) {\n    return 1;\n  }\n  applyBitsToMemory(0xffffffff,configurationValue,0);\n  DAT_2000007c = configurationValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "set_memory_configuration_08001c3c",
                "param_1": "configurationValue",
                "iVar1": "result",
                "apply_bits_to_memory_08002494": "applyBitsToMemory"
            },
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_system_08001c88",
            "code": "\n\n\nundefined4 initializeSystem_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  updateData(3);\n  setMemoryConfiguration(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_system_08001c88",
                "update_data_08002470": "updateData",
                "set_memory_configuration_08001c3c": "setMemoryConfiguration"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "add_global_to_accumulator_08001cac",
            "code": "\nvoid addGlobalToAccumulator_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "add_global_to_accumulator_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_08001cc4",
            "code": "\nundefined4 get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4"
            },
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "validate_input_08001cd0",
            "code": "\nundefined4 validateInput_08001cd0(uint **inputData,uint threshold)\n\n{\n  int initialValue;\n  uint shiftedResult;\n  int comparisonValue;\n  undefined4 result;\n  uint *currentData;\n  uint modifiedThreshold;\n  uint counter;\n  \n  counter = 0;\n  initialValue = get_data_08001cc4();\n  modifiedThreshold = DAT_20000084;\n  currentData = *inputData;\n  if ((currentData[2] & 0x100) == 0) {\n    if (((currentData[1] & 0x100) == 0) && ((currentData[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**inputData & 2) != 0) goto LAB_08001de2;\n      } while ((threshold == 0xffffffff) ||\n              ((threshold != 0 && (comparisonValue = get_data_08001cc4(), (uint)(comparisonValue - initialValue) <= threshold))));\n      inputData[10] = (uint *)((uint)inputData[10] | 4);\n      *(undefined *)(inputData + 9) = 0;\n      result = 3;\n    }\n    else {\n      shiftedResult = calculate_shifted_result_08003da4(2);\n      currentData = *inputData;\n      if (((currentData[4] & 0x24924924) == 0) && ((currentData[3] & 0x924924) == 0)) {\n        if ((currentData[4] & 0x12492492) == 0) {\n          if ((currentData[3] & 0x492492) == 0) {\n            comparisonValue = 0x14;\n          }\n          else {\n            comparisonValue = 0x29;\n          }\n        }\n        else {\n          comparisonValue = 0x29;\n        }\n      }\n      else if (((currentData[4] & 0x12492492) == 0) && ((currentData[3] & 0x492492) == 0)) {\n        comparisonValue = 0x54;\n      }\n      else if ((currentData[4] & 0x249249) == 0) {\n        if ((currentData[3] & 0x249249) == 0) {\n          comparisonValue = 0x54;\n        }\n        else {\n          comparisonValue = 0xfc;\n        }\n      }\n      else {\n        comparisonValue = 0xfc;\n      }\n      modifiedThreshold = (modifiedThreshold / shiftedResult) * comparisonValue;\n      for (; counter <= modifiedThreshold && modifiedThreshold - counter != 0; counter = counter + 1) {\n        if ((threshold != 0xffffffff) &&\n           ((threshold == 0 || (comparisonValue = get_data_08001cc4(), threshold < (uint)(comparisonValue - initialValue))))) {\n          inputData[10] = (uint *)((uint)inputData[10] | 4);\n          *(undefined *)(inputData + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **inputData = 0xffffffed;\n      inputData[10] = (uint *)((uint)inputData[10] | 0x200);\n      if (((*inputData)[2] & 0xe0000) == 0xe0000) {\n        if (inputData[3] == (uint *)0x0) {\n          inputData[10] = (uint *)((uint)inputData[10] & 0xfffffeff);\n          if (((uint)inputData[10] & 0x1000) == 0) {\n            inputData[10] = (uint *)((uint)inputData[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    inputData[10] = (uint *)((uint)inputData[10] | 0x20);\n    *(undefined *)(inputData + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "validate_input_08001cd0",
                "param_1": "inputData",
                "param_2": "threshold",
                "iVar1": "initialValue",
                "uVar2": "shiftedResult",
                "iVar3": "comparisonValue",
                "uVar4": "result",
                "puVar5": "currentData",
                "uVar6": "modifiedThreshold",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_value_08001e40",
            "code": "\nundefined4 getOffsetValue_08001e40(int *offsetPtr)\n\n{\n  return *(undefined4 *)(*offsetPtr + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "offsetPtr"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_configuration_08001e48",
            "code": "\nundefined4 updateConfiguration_08001e48(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 result;\n  uint dataIndex;\n  int loopIndex;\n  \n  if (*(char *)(configPtr + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 9) = 1;\n    dataIndex = dataPtr[1];\n    if (dataIndex < 7) {\n      dataIndex = dataIndex * 5 - 5;\n      *(uint *)(*configPtr + 0x34) =\n           *dataPtr << (dataIndex & 0xff) | *(uint *)(*configPtr + 0x34) & ~(0x1f << (dataIndex & 0xff));\n    }\n    else if (dataIndex < 0xd) {\n      dataIndex = dataIndex * 5 - 0x23;\n      *(uint *)(*configPtr + 0x30) =\n           *dataPtr << (dataIndex & 0xff) | *(uint *)(*configPtr + 0x30) & ~(0x1f << (dataIndex & 0xff));\n    }\n    else {\n      dataIndex = dataIndex * 5 - 0x41;\n      *(uint *)(*configPtr + 0x2c) =\n           *dataPtr << (dataIndex & 0xff) | *(uint *)(*configPtr + 0x2c) & ~(0x1f << (dataIndex & 0xff));\n    }\n    dataIndex = *dataPtr;\n    if (dataIndex < 10) {\n      *(uint *)(*configPtr + 0x10) =\n           dataPtr[2] << (dataIndex * 3 & 0xff) |\n           *(uint *)(*configPtr + 0x10) & ~(7 << (dataIndex * 3 & 0xff));\n    }\n    else {\n      dataIndex = dataIndex * 3 - 0x1e;\n      *(uint *)(*configPtr + 0xc) =\n           dataPtr[2] << (dataIndex & 0xff) | *(uint *)(*configPtr + 0xc) & ~(7 << (dataIndex & 0xff));\n    }\n    if (*dataPtr - 0x10 < 2) {\n      if (*configPtr == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*dataPtr == 0x10) {\n            for (loopIndex = (DAT_20000084 / 1000000) * 10; loopIndex != 0; loopIndex = loopIndex + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        configPtr[10] = configPtr[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(configPtr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_configuration_08001e48",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "result",
                "uVar2": "dataIndex",
                "local_c": "loopIndex"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_value_from_offset_08001f80",
            "code": "\nundefined4 getValueFromOffset_08001f80(int baseAddress)\n\n{\n  return *(undefined4 *)(baseAddress + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_value_from_offset_08001f80",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "set_flag_if_not_set_08001f84",
            "code": "\nundefined4 setFlagIfNotSet_08001f84(int *data,undefined4 value)\n\n{\n  int dataDiff;\n  undefined4 returnValue;\n  int dataPtr;\n  uint loopCounter;\n  \n  dataPtr = *data;\n  if ((*(uint *)(dataPtr + 8) & 1) == 0) {\n    *(uint *)(dataPtr + 8) = *(uint *)(dataPtr + 8) | 1;\n    for (loopCounter = DAT_20000084 / 1000000; loopCounter != 0; loopCounter = loopCounter - 1) {\n    }\n    dataPtr = get_data_08001cc4(data,value,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      dataDiff = get_data_08001cc4();\n    } while ((uint)(dataDiff - dataPtr) < 3);\n    data[10] = data[10] | 0x10;\n    data[0xb] = data[0xb] | 1;\n    *(undefined *)(data + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "set_flag_if_not_set_08001f84",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "dataDiff",
                "iVar3": "dataPtr",
                "uVar2": "returnValue",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "update_flag_08002004",
            "code": "\n\n\nint updateFlag_08002004(int *param)\n\n{\n  int result;\n  undefined4 *ptr;\n  int temp;\n  \n  if (*(char *)(param + 9) != '\\x01') {\n    *(undefined *)(param + 9) = 1;\n    result = checkFlag;\n    if (result == 0) {\n      value = value & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*param;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        value = value | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          value = value & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        value = value & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          value = value & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((value & 0x1000U) == 0) {\n        value2 = 0;\n      }\n      else {\n        value2 = value2 & 0xfffffff9;\n      }\n      *(undefined *)(param + 9) = 0;\n      *ptr = 0xfffffffd;\n      temp = *param;\n      if (((*(uint *)(temp + 8) & 0xe0000) == 0xe0000) &&\n         ((temp != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(temp + 8) = *(uint *)(temp + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(temp + 8) = *(uint *)(temp + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(param + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "update_flag_08002004",
                "param_1": "param",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "temp",
                "set_flag_if_not_set_08001f84()": "checkFlag",
                "param_1[10]": "value",
                "param_1[0xb]": "value2"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_data_status_080020f0",
            "code": "\nundefined4 updateDataStatus_080020f0(int *data)\n\n{\n  int currentValue;\n  int initialValue;\n  \n  initialValue = *data;\n  if ((*(uint *)(initialValue + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(initialValue + 8) = *(uint *)(initialValue + 8) & 0xfffffffe;\n  initialValue = get_data_08001cc4();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    currentValue = get_data_08001cc4();\n  } while ((uint)(currentValue - initialValue) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_data_status_080020f0",
                "param_1": "data",
                "iVar1": "currentValue",
                "iVar2": "initialValue"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "update_and_check_data_status_0800213c",
            "code": "\nundefined4 update_and_check_data_status_0800213c(int *data_structure)\n\n{\n  int status;\n  uint combined_flags;\n  uint permissions;\n  \n  if (data_structure == (int *)0x0) {\n    return 1;\n  }\n  if (data_structure[10] == 0) {\n    data_structure[0xb] = 0;\n    *(undefined *)(data_structure + 9) = 0;\n    update_memory_permissions();\n  }\n  status = update_data_status(data_structure);\n  if (((data_structure[10] & 0x10U) == 0) && (status == 0)) {\n    data_structure[10] = data_structure[10] & 0xffffeefdU | 2;\n    combined_flags = data_structure[1] | data_structure[7] | data_structure[3] << 1;\n    if (data_structure[2] == 0x100) {\n      permissions = 0x100;\n    }\n    else {\n      permissions = 0;\n      if (data_structure[2] == 1) {\n        permissions = 0x100;\n      }\n    }\n    if (data_structure[5] == 1) {\n      if (data_structure[3] == 0) {\n        permissions = permissions | (data_structure[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        data_structure[10] = data_structure[10] | 0x20;\n        data_structure[0xb] = data_structure[0xb] | 1;\n      }\n    }\n    *(uint *)(*data_structure + 4) = permissions | *(uint *)(*data_structure + 4) & 0xffff16ff;\n    *(uint *)(*data_structure + 8) = *(uint *)(*data_structure + 8) & 0xffe1f7fd | combined_flags;\n    if ((data_structure[2] == 0x100) || (data_structure[2] == 1)) {\n      permissions = (data_structure[4] + -1) * 0x100000;\n    }\n    else {\n      permissions = 0;\n    }\n    *(uint *)(*data_structure + 0x2c) = permissions | *(uint *)(*data_structure + 0x2c) & 0xff0fffff;\n    if (combined_flags != (*(uint *)(*data_structure + 8) & 0xff1f0efe)) {\n      data_structure[10] = data_structure[10] & 0xffffffedU | 0x10;\n      data_structure[0xb] = data_structure[0xb] | 1;\n      return 1;\n    }\n    data_structure[0xb] = 0;\n    data_structure[10] = data_structure[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  data_structure[10] = data_structure[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "update_and_check_data_status_0800213c",
                "param_1": "data_structure",
                "iVar1": "status",
                "uVar2": "combined_flags",
                "uVar3": "permissions",
                "update_memory_permissions_08004974": "update_memory_permissions",
                "update_data_status_080020f0": "update_data_status"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "update_data_status_0800224c",
            "code": "\nint updateDataStatus_0800224c(int *dataPointer)\n\n{\n  int returnStatus;\n  \n  if (dataPointer == (int *)0x0) {\n    returnStatus = 1;\n  }\n  else {\n    dataPointer[10] = dataPointer[10] | 2;\n    returnStatus = update_data_status_080020f0();\n    if (returnStatus == 0) {\n      *(undefined4 *)*dataPointer = 0xffffffe0;\n      *(uint *)(*dataPointer + 4) = *(uint *)(*dataPointer + 4) & 0xff3f0000;\n      *(uint *)(*dataPointer + 8) = *(uint *)(*dataPointer + 8) & 0xff0106f0;\n      *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xff000000;\n      *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xc0000000;\n      *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x20) = *(uint *)(*dataPointer + 0x20) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x24) = *(uint *)(*dataPointer + 0x24) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x28) = *(uint *)(*dataPointer + 0x28) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x2c) = *(uint *)(*dataPointer + 0x2c) & 0xff000000;\n      *(uint *)(*dataPointer + 0x2c) = *(uint *)(*dataPointer + 0x2c) & 0xff000000;\n      *(uint *)(*dataPointer + 0x30) = *(uint *)(*dataPointer + 0x30) & 0xc0000000;\n      *(uint *)(*dataPointer + 0x34) = *(uint *)(*dataPointer + 0x34) & 0xc0000000;\n      *(uint *)(*dataPointer + 0x38) = *(uint *)(*dataPointer + 0x38) & 0xffc00000;\n      *(uint *)(*dataPointer + 0x38) = *(uint *)(*dataPointer + 0x38) & 0xffc00000;\n      update_memory_protection_080049f0(dataPointer);\n      dataPointer[0xb] = 0;\n      dataPointer[10] = 0;\n    }\n    *(undefined *)(dataPointer + 9) = 0;\n  }\n  return returnStatus;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "update_data_status_0800224c",
                "param_1": "dataPointer",
                "iVar1": "returnStatus"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "handle_data_status_08002348",
            "code": "\nint handle_data_status_08002348(int data_ptr)\n\n{\n  int status;\n  \n  if (*(char *)(data_ptr + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_ptr + 0x24) = 1;\n  status = update_data_status();\n  if (status == 0) {\n    *(uint *)(data_ptr + 0x28) = *(uint *)(data_ptr + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data_ptr + 0x24) = 0;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002348": "handle_data_status_08002348",
                "param_1": "data_ptr",
                "iVar1": "status",
                "update_data_status_080020f0": "update_data_status"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "check_and_update_data_status_08002384",
            "code": "\nint check_and_update_data_status_08002384(int *data_array)\n\n{\n  uint division_result;\n  int status;\n  uint shifted_result;\n  int initial_data;\n  int current_data;\n  int loop_counter;\n  \n  if (*(char *)(data_array + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_array + 9) = 1;\n  status = update_data_status_080020f0();\n  if (status == 0) {\n    data_array[10] = data_array[10] & 0xffffeefdU | 2;\n    division_result = DAT_20000084;\n    shifted_result = calculate_shifted_result_08003da4(2);\n    for (loop_counter = division_result / shifted_result << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    set_flag_if_not_set_08001f84(data_array);\n    *(uint *)(*data_array + 8) = *(uint *)(*data_array + 8) | 8;\n    initial_data = get_data_08001cc4();\n    while (current_data = *data_array, (*(uint *)(current_data + 8) & 8) != 0) {\n      current_data = get_data_08001cc4();\n      if (10 < (uint)(current_data - initial_data)) {\n        data_array[10] = data_array[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data_array + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_data + 8) = *(uint *)(current_data + 8) | 4;\n    initial_data = get_data_08001cc4();\n    while ((*(uint *)(*data_array + 8) & 4) != 0) {\n      current_data = get_data_08001cc4();\n      if (10 < (uint)(current_data - initial_data)) {\n        data_array[10] = data_array[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data_array + 9) = 0;\n        return 1;\n      }\n    }\n    data_array[10] = data_array[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data_array + 9) = 0;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002384": "check_and_update_data_status_08002384",
                "param_1": "data_array",
                "uVar1": "division_result",
                "iVar2": "status",
                "uVar3": "shifted_result",
                "iVar4": "initial_data",
                "iVar5": "current_data",
                "local_14": "loop_counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_data_08002470",
            "code": "\n\n\nvoid updateData_08002470(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_data_08002470",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "apply_bits_to_memory_08002494",
            "code": "\n\n\nvoid applyBitsToMemory_08002494(uint address,uint value1,uint value2)\n\n{\n  uint shiftCount;\n  uint clampValue;\n  \n  shiftCount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  clampValue = 7 - shiftCount;\n  if (3 < clampValue) {\n    clampValue = 4;\n  }\n  if (shiftCount + 4 < 7) {\n    shiftCount = 0;\n  }\n  else {\n    shiftCount = shiftCount - 3;\n  }\n  shiftCount = (value1 & (1 << (clampValue & 0xff)) - 1U) << (shiftCount & 0xff) |\n          (1 << (shiftCount & 0xff)) - 1U & value2;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftCount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftCount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "apply_bits_to_memory_08002494",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shiftCount",
                "uVar2": "clampValue"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_in_array_080024f8",
            "code": "\nvoid setBitInArray_080024f8(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_in_array_080024f8",
                "param_1": "index"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "set_param_values_08002514",
            "code": "\n\n\nundefined4 set_param_values_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "set_param_values_08002514",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_08002540",
            "code": "\nvoid setBit_08002540(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_08002540",
                "param_1": "index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_flag_08002560",
            "code": "\n\n\nvoid updateFlag_08002560(int input)\n\n{\n  if (input != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_flag_08002560",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "initialize_08002582",
            "code": "\nvoid initialize_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "initialize_08002582"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "set_configuration_0800258c",
            "code": "\n\n\nundefined4 setConfiguration_0800258c(uint **configList)\n\n{\n  uint *currentConfig;\n  \n  if (*(char *)((int)configList + 0x21) != '\\x02') {\n    configList[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **configList = **configList & 0xfffffff1;\n  **configList = **configList & 0xfffffffe;\n  currentConfig = *configList;\n  if (currentConfig == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentConfig == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentConfig == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentConfig == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentConfig == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentConfig == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)configList + 0x21) = 1;\n  *(undefined *)(configList + 8) = 0;\n  if (configCallback != (uint *)0x0) {\n    (*(code *)configCallback)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "set_configuration_0800258c",
                "param_1": "configList",
                "puVar1": "currentConfig",
                "param_1[0xd]": "configCallback"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_bits_08002624",
            "code": "\n\n\nvoid updateBits_08002624(uint *bitArray1,uint *bitArray2)\n\n{\n  uint *ptrBitArray1;\n  uint bitMask;\n  uint bitValue;\n  uint bitIndex;\n  uint tempValue;\n  uint updatedValue;\n  int shiftOffset1;\n  int shiftOffset2;\n  \n  updatedValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    bitValue = *bitArray2 & bitMask;\n    if (bitMask == bitValue) {\n      tempValue = bitArray2[1];\n      if (tempValue == 0x12) {\n        updatedValue = bitArray2[3] + 0xc;\n      }\n      else if (tempValue < 0x13) {\n        if (tempValue == 2) {\n          updatedValue = bitArray2[3] + 8;\n        }\n        else if (tempValue < 3) {\n          if (tempValue == 0) goto LAB_08002776;\n          if (tempValue == 1) {\n            updatedValue = bitArray2[3];\n          }\n        }\n        else if (tempValue == 3) {\n          updatedValue = 0;\n        }\n        else if (tempValue == 0x11) {\n          updatedValue = bitArray2[3] + 4;\n        }\n      }\n      else if (tempValue == 0x10210000) {\nLAB_08002776:\n        if (bitArray2[2] == 0) {\n          updatedValue = 4;\n        }\n        else if (bitArray2[2] == 1) {\n          bitArray1[4] = bitMask;\n          updatedValue = 8;\n        }\n        else {\n          bitArray1[5] = bitMask;\n          updatedValue = 8;\n        }\n      }\n      else if (tempValue < 0x10210001) {\n        if ((tempValue == 0x10110000) || (tempValue == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((tempValue == 0x10310000) || ((tempValue == 0x10320000 || (tempValue == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = bitIndex;\n      ptrBitArray1 = bitArray1;\n      if (0xff < bitValue) {\n        bitMask = bitIndex - 8;\n        ptrBitArray1 = bitArray1 + 1;\n      }\n      *ptrBitArray1 = *ptrBitArray1 & ~(0xf << (bitMask << 2 & 0xff)) | updatedValue << (bitMask << 2 & 0xff);\n      if ((bitArray2[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftOffset1 = (bitIndex & 3) << 2;\n        if (bitArray1 == (uint *)0x40010800) {\n          shiftOffset2 = 0;\n        }\n        else if (bitArray1 == (uint *)0x40010c00) {\n          shiftOffset2 = 1;\n        }\n        else if (bitArray1 == (uint *)0x40011000) {\n          shiftOffset2 = 2;\n        }\n        else if (bitArray1 == (uint *)0x40011400) {\n          shiftOffset2 = 3;\n        }\n        else {\n          shiftOffset2 = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shiftOffset1) | shiftOffset2 << shiftOffset1;\n        if ((bitArray2[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitValue;\n        }\n        if ((bitArray2[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitValue;\n        }\n        if ((bitArray2[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitValue;\n        }\n        if ((bitArray2[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitValue;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bitArray1",
                "param_2": "bitArray2",
                "puVar1": "ptrBitArray1",
                "uVar2": "bitMask",
                "uVar3": "bitValue",
                "uVar4": "bitIndex",
                "uVar5": "tempValue",
                "uVar6": "updatedValue",
                "iVar7": "shiftOffset1",
                "iVar8": "shiftOffset2"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bitwise_intersection_08002810",
            "code": "\nundefined4 check_bitwise_intersection_08002810(int data_ptr,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(data_ptr + 8)) == 0) {\n    result 0;\n  }\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bitwise_intersection_08002810",
                "param_1": "data_ptr",
                "param_2": "bit_mask",
                "return": "result"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_param_value_0800281e",
            "code": "\nvoid setParamValue_0800281e(int objPtr,int value,int isExtended)\n\n{\n  if (isExtended == 0) {\n    *(int *)(objPtr + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(objPtr + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "objPtr",
                "param_2": "value",
                "param_3": "isExtended"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "process_data_if_flag_set_0800282c",
            "code": "\n\n\nvoid process_data_if_flag_set_0800282c(uint flag_to_check)\n\n{\n  if ((_DAT_40010414 & flag_to_check) != 0) {\n    _DAT_40010414 = flag_to_check;\n    process_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "process_data_if_flag_set_0800282c",
                "param_1": "flag_to_check",
                "check_and_process_data_080060e4": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_status_08002848",
            "code": "\nundefined4 updateStatus_08002848(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (data[20] == 0) {\n      *(uint *)(*data + 0x10) = data[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = data[17] & 0xffU | 1;\n    }\n  }\n  else if (data[4] == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = data[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = data[17] & 0xffU | 1;\n    }\n  }\n  else if (data[20] == 0) {\n    *(uint *)(*data + 0x10) = (uint)(data[17] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (data[20] == 1) {\n    *(uint *)(*data + 0x10) = (uint)(data[17] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_status_08002848",
                "param_1": "data",
                "param_1[0x14]": "data[20]",
                "param_1[4]": "data[4]",
                "(int)param_1": "(int)data",
                "param_1[0x11]": "data[17]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "store_byte_from_parameter_080028d2",
            "code": "\nundefined4 storeByteFromParameter_080028d2(int *parameter)\n\n{\n  *(uint *)(*parameter + 0x10) = parameter[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "store_byte_from_parameter_080028d2",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "set_flags_based_on_conditions_080028de",
            "code": "\nundefined4 setFlagsBasedOnConditions_080028de(uint **param)\n\n{\n  uint *flagPtr;\n  \n  flagPtr = param[0xb];\n  if ((*(char *)((int)param + 0x3d) == '\\\"') &&\n     ((flagPtr2 != (uint *)0x0 || (*(char *)((int)param + 0x3e) != '@')))) {\n    if ((flagPtr2 == (uint *)0x0) && (flagPtr3 == (uint *)0xc000)) {\n      **param = **param | 0x100;\n      flagPtr2 = (uint *)((int)flagPtr2 + 1);\n    }\n    else {\n      if (*(short *)((int)param + 0x2a) == 0) {\n        **param = **param | 0x200;\n      }\n      else if (*(short *)((int)param + 0x2a) == 1) {\n        if (flagPtr == (uint *)0xffff0000) {\n          **param = **param & 0xfffffbff;\n          flagPtr = *param;\n          if ((flagPtr[1] & 0x800) == 0) {\n            *flagPtr = *flagPtr | 0x200;\n          }\n          else {\n            *flagPtr = *flagPtr & 0xfffffbff;\n          }\n        }\n        else if (((flagPtr == (uint *)0x4) || (flagPtr == (uint *)0x8)) ||\n                (param[0xc] == (uint *)0x12)) {\n          **param = **param & 0xfffffbff;\n          **param = **param | 0x200;\n        }\n        else if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)param + 0x2a) == 2) {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param | 0x800;\n          **param = **param & 0xfffffbff;\n        }\n        flagPtr = *param;\n        if ((flagPtr[1] & 0x800) != 0) {\n          flagPtr[1] = flagPtr[1] | 0x1000;\n        }\n      }\n      else {\n        **param = **param | 0x400;\n        flagPtr = *param;\n        if ((flagPtr[1] & 0x800) != 0) {\n          flagPtr[1] = flagPtr[1] | 0x1000;\n        }\n      }\n      flagPtr2 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "set_flags_based_on_conditions_080028de",
                "param_1": "param",
                "puVar1": "flagPtr",
                "param_1[0x14]": "flagPtr2",
                "param_1[4]": "flagPtr3"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_pointer_and_decrement_08002ab8",
            "code": "\nundefined4 updatePointerAndDecrement_08002ab8(int *pointerArray)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)pointerArray + 0x2a) != 0) {\n    bytePointer = (byte *)pointerArray[9];\n    pointerArray[9] = (int)(bytePointer + 1);\n    *(uint *)(*pointerArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)pointerArray + 0x2a) = *(short *)((int)pointerArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_pointer_and_decrement_08002ab8",
                "param_1": "pointerArray",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_param_08002ad8",
            "code": "\nundefined4 updateParam_08002ad8(int *paramArray)\n\n{\n  undefined *nextPtr;\n  \n  if (*(short *)((int)paramArray + 0x2a) != 0) {\n    nextPtr = (undefined *)paramArray[9];\n    paramArray[9] = (int)(nextPtr + 1);\n    *nextPtr = (char)*(undefined4 *)(*paramArray + 0x10);\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_param_08002ad8",
                "param_1": "paramArray",
                "puVar1": "nextPtr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "check_and_initialize_parameters_08002af8",
            "code": "\nundefined4 checkAndInitializeParameters_08002af8(uint **functionParameters,uint *param2,int param3,uint *param4)\n\n{\n  undefined4 returnValue;\n  uint *ptrVar2;\n  \n  if (*(char *)((int)functionParameters + 0x3d) == '(') {\n    if (param2 == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (param3 == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(functionParameters + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(functionParameters + 0xf) = 1;\n      ptrVar2 = *functionParameters;\n      if ((*ptrVar2 & 1) == 0) {\n        *ptrVar2 = *ptrVar2 | 1;\n      }\n      **functionParameters = **functionParameters & 0xfffff7ff;\n      *(undefined *)((int)functionParameters + 0x3d) = 0x29;\n      *(undefined *)((int)functionParameters + 0x3e) = 0x20;\n      returnValue = 0;\n      functionParameters[0x10] = (uint *)0x0;\n      functionParameters[9] = param2;\n      *(short *)((int)functionParameters + 0x2a) = (short)param3;\n      functionParameters[0xb] = param4;\n      *(undefined2 *)(functionParameters + 10) = *(undefined2 *)((int)functionParameters + 0x2a);\n      *(undefined *)(functionParameters + 0xf) = 0;\n      (*functionParameters)[1] = (*functionParameters)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "check_and_initialize_parameters_08002af8",
                "param_1": "functionParameters",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "returnValue",
                "puVar2": "ptrVar2"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "handle_input_08002b84",
            "code": "\nundefined4 handle_input_08002b84(uint **input_param,uint *buffer_param,int length_param,uint *result_param)\n\n{\n  undefined4 status;\n  uint *ptr_var;\n  \n  if (*(char *)((int)input_param + 0x3d) == '(') {\n    if (buffer_param == (uint *)0x0) {\n      status = 1;\n    }\n    else if (length_param == 0) {\n      status = 1;\n    }\n    else if (*(char *)(input_param + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(input_param + 0xf) = 1;\n      ptr_var = *input_param;\n      if ((*ptr_var & 1) == 0) {\n        *ptr_var = *ptr_var | 1;\n      }\n      **input_param = **input_param & 0xfffff7ff;\n      *(undefined *)((int)input_param + 0x3d) = 0x2a;\n      *(undefined *)((int)input_param + 0x3e) = 0x20;\n      status = 0;\n      input_param[0x10] = (uint *)0x0;\n      input_param[9] = buffer_param;\n      *(short *)((int)input_param + 0x2a) = (short)length_param;\n      input_param[0xb] = result_param;\n      *(undefined2 *)(input_param + 10) = *(undefined2 *)((int)input_param + 0x2a);\n      *(undefined *)(input_param + 0xf) = 0;\n      (*input_param)[1] = (*input_param)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "handle_input_08002b84",
                "param_1": "input_param",
                "param_2": "buffer_param",
                "param_3": "length_param",
                "param_4": "result_param",
                "uVar1": "status",
                "puVar2": "ptr_var"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initialize_flags_08002c10",
            "code": "\nundefined4 initializeFlags_08002c10(uint **flags)\n\n{\n  uint *flagPtr;\n  \n  if (*(char *)((int)flags + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)flags + 0x3d) = 0x28;\n  flagPtr = *flags;\n  if ((*flagPtr & 1) == 0) {\n    *flagPtr = *flagPtr | 1;\n  }\n  **flags = **flags | 0x400;\n  (*flags)[1] = (*flags)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initialize_flags_08002c10",
                "param_1": "flags",
                "puVar1": "flagPtr"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "update_param_08002c54",
            "code": "\nundefined4 updateParam_08002c54(int *paramArray)\n\n{\n  char character;\n  byte *byteArray;\n  \n  character = *(char *)((int)paramArray + 0x3d);\n  if (*(short *)((int)paramArray + 0x2a) != 0) {\n    byteArray = (byte *)paramArray[9];\n    paramArray[9] = (int)(byteArray + 1);\n    *(uint *)(*paramArray + 0x10) = (uint)*byteArray;\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    if ((*(short *)((int)paramArray + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*paramArray + 4) = *(uint *)(*paramArray + 4) & 0xfffffbff;\n      paramArray[0xc] = 0x21;\n      *(undefined *)((int)paramArray + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "update_param_08002c54",
                "param_1": "paramArray",
                "cVar1": "character",
                "pbVar2": "byteArray"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_data_08002ca6",
            "code": "\nundefined4 updateData_08002ca6(int *data)\n\n{\n  char char_1;\n  undefined *ptr;\n  \n  char_1 = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_1 == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_data_08002ca6",
                "param_1": "data",
                "cVar1": "char_1",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "process_input_and_return_zero_08002cf2",
            "code": "\nundefined4 processInputAndReturnZero_08002cf2(int *inputPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selectedValue;\n  uint inputData;\n  \n  inputData = *(uint *)(*inputPointer + 0x18);\n  if ((inputData & 0x80) == 0) {\n    selectedValue = *(undefined2 *)(inputPointer + 3);\n  }\n  else {\n    selectedValue = *(undefined2 *)(inputPointer + 6);\n  }\n  processInput(inputPointer,(*(uint *)(*inputPointer + 0x18) & 4) == 0,selectedValue,inputData,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "process_input_and_return_zero_08002cf2",
                "param_1": "inputPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selectedValue",
                "uVar2": "inputData",
                "process_input_08004e74": "processInput"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "initialize_security_settings_08002d1c",
            "code": "\nundefined4 initialize_security_settings_08002d1c(uint **security_settings_ptr)\n\n{\n  if (((setting_ptr == (uint *)0x4) || (setting_ptr == (uint *)0x8)) &&\n     (*(char *)((int)security_settings_ptr + 0x3d) == '(')) {\n    setting_ptr = (uint *)0xffff0000;\n    (*security_settings_ptr)[1] = (*security_settings_ptr)[1] & 0xfffff8ff;\n    (*security_settings_ptr)[5] = 0xfffffbff;\n    **security_settings_ptr = **security_settings_ptr & 0xfffffbff;\n    mode_ptr = (uint *)0x0;\n    *(undefined *)((int)security_settings_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)security_settings_ptr + 0x3e) = 0;\n    initialize_and_execute_security();\n  }\n  else if (*(char *)((int)security_settings_ptr + 0x3d) == '!') {\n    setting_ptr = (uint *)0xffff0000;\n    mode_ptr = (uint *)0x21;\n    *(undefined *)((int)security_settings_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)security_settings_ptr + 0x3e) = 0;\n    (*security_settings_ptr)[1] = (*security_settings_ptr)[1] & 0xfffff8ff;\n    (*security_settings_ptr)[5] = 0xfffffbff;\n    **security_settings_ptr = **security_settings_ptr & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*security_settings_ptr)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "initialize_security_settings_08002d1c",
                "param_1": "security_settings_ptr",
                "param_1[0xb]": "setting_ptr",
                "param_1[0xc]": "mode_ptr",
                "initialize_and_execute_08004ec4": "initialize_and_execute_security"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_data_08002db2",
            "code": "\nundefined4 processData_08002db2(uint **data)\n\n{\n  char charValue;\n  uint *ptrValue;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  ptrValue = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (charValue == '!')) {\n    if ((ptrValue == (uint *)0x4) || ((ptrValue == (uint *)0x8 || (ptrValue == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((charValue == '!') || ((*(char *)((int)data + 0x3e) == '@' && (charValue == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptrValue = data[9];\n          data[9] = (uint *)((int)ptrValue + 1);\n          (*data)[4] = (uint)*(byte *)ptrValue;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrValue = data[9];\n      data[9] = (uint *)((int)ptrValue + 1);\n      (*data)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptrValue"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_param_08002efc",
            "code": "\nundefined4 processParam_08002efc(uint **params)\n\n{\n  uint *param_9;\n  \n  param_9 = params[0xb];\n  if (*(char *)((int)params + 0x3d) == '!') {\n    if (*(short *)((int)params + 0x2a) == 0) {\n      if (((param_9 == (uint *)0x4) || (param_9 == (uint *)0x8)) || (param_9 == (uint *)0xffff0000)) {\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        **params = **params | 0x200;\n        param_c = (uint *)0x0;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        if (*(char *)((int)params + 0x3e) == '@') {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        param_c = (uint *)0x11;\n        *(undefined *)((int)params + 0x3e) = 0;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      param_9 = params[9];\n      params[9] = (uint *)((int)param_9 + 1);\n      (*params)[4] = (uint)*(byte *)param_9;\n      *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_param_08002efc",
                "param_1": "params",
                "puVar1": "param_9",
                "param_1[0xc]": "param_c"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "process_parameter_08002f9c",
            "code": "\nundefined4 processParameter_08002f9c(uint **param)\n\n{\n  uint *tempVar;\n  \n  if (*(char *)((int)param + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)param + 0x2a) < 4) {\n      if (*(ushort *)((int)param + 0x2a) - 2 < 2) {\n        if (condition1 == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n          **param = **param | 0x800;\n        }\n        (*param)[1] = (*param)[1] & 0xfffffbff;\n      }\n      else {\n        if (condition1 == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n        }\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        tempVar = pointer;\n        pointer = (uint *)((int)tempVar + 1);\n        *(char *)tempVar = (char)(*param)[4];\n        *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        nullPointer = (uint *)0x0;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      tempVar = pointer;\n      pointer = (uint *)((int)tempVar + 1);\n      *(char *)tempVar = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "process_parameter_08002f9c",
                "param_1": "param",
                "puVar1": "tempVar",
                "param_1[0xb]": "condition1",
                "param_1[9]": "pointer",
                "param_1[0xc]": "nullPointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_input_0800306c",
            "code": "\nundefined4 processInput_0800306c(uint **inputArray)\n\n{\n  uint *currentValue;\n  \n  currentValue = inputArray[11];\n  if (*(short *)((int)inputArray + 0x2a) == 3) {\n    if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) || (currentValue == (uint *)0xffff0000)) {\n      **inputArray = **inputArray & 0xfffffbff;\n    }\n    currentValue = inputArray[9];\n    inputArray[9] = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*inputArray)[4];\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n  }\n  else if (*(short *)((int)inputArray + 0x2a) == 2) {\n    if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) || (currentValue == (uint *)0xffff0000)) {\n      (*inputArray)[1] = (*inputArray)[1] & 0xfffffcff;\n      **inputArray = **inputArray | 0x200;\n    }\n    else {\n      if (currentValue == (uint *)0x2) {\n        **inputArray = **inputArray | 0x400;\n      }\n      else {\n        **inputArray = **inputArray & 0xfffffbff;\n      }\n      (*inputArray)[1] = (*inputArray)[1] & 0xfffffcff;\n    }\n    currentValue = inputArray[9];\n    inputArray[9] = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*inputArray)[4];\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    currentValue = inputArray[9];\n    inputArray[9] = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*inputArray)[4];\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    *(undefined *)((int)inputArray + 0x3d) = 0x20;\n    inputArray[12] = (uint *)0x0;\n    if (*(char *)((int)inputArray + 0x3e) == '@') {\n      *(undefined *)((int)inputArray + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)((int)inputArray + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    currentValue = inputArray[9];\n    inputArray[9] = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*inputArray)[4];\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_input_0800306c",
                "param_1": "inputArray",
                "puVar1": "currentValue",
                "param_1[0xb]": "inputArray[11]",
                "param_1[9]": "inputArray[9]",
                "param_1[0xc]": "inputArray[12]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "execute_configuration_0800316c",
            "code": "\nvoid executeConfiguration_0800316c(uint **configParams)\n\n{\n  int result;\n  uint *flagPtr;\n  uint *configPtr;\n  \n  if (*(byte *)((int)configParams + 0x3d) - 0x29 < 2) {\n    configParams[0xc] = (uint *)0x0;\n    *(undefined *)((int)configParams + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)configParams + 0x3d) != '`') && (((*configParams)[1] & 0x800) == 0)) {\n      *(undefined *)((int)configParams + 0x3d) = 0x20;\n    }\n    configParams[0xc] = (uint *)0x0;\n    *(undefined *)((int)configParams + 0x3e) = 0;\n  }\n  **configParams = **configParams & 0xfffff7ff;\n  configPtr = *configParams;\n  if ((configPtr[1] & 0x800) == 0) {\n    if (*(char *)((int)configParams + 0x3d) == '`') {\n      *(undefined *)((int)configParams + 0x3d) = 0x20;\n      configParams[0x10] = (uint *)0x0;\n      if ((configPtr[5] & 0x40) != 0) {\n        flagPtr = configParams[9];\n        configParams[9] = (uint *)((int)flagPtr + 1);\n        *(char *)flagPtr = (char)configPtr[4];\n      }\n      **configParams = **configParams & 0xfffffffe;\n      FUNC_0800316a(configParams);\n    }\n    else {\n      if ((configPtr[5] & 0x40) != 0) {\n        flagPtr = configParams[9];\n        configParams[9] = (uint *)((int)flagPtr + 1);\n        *(char *)flagPtr = (char)configPtr[4];\n      }\n      initialize_flags_if_not_set_08004ef4(configParams);\n    }\n  }\n  else {\n    configPtr[1] = configPtr[1] & 0xfffff7ff;\n    if (*(char *)((int)configParams[0xd] + 0x21) == '\\x01') {\n      configParams[0xe][0xd] = (uint)&LAB_080035fc_1;\n      result = set_configuration_0800258c(configParams[0xe]);\n      if (result != 0) {\n        if (((*configParams)[5] & 0x40) != 0) {\n          configPtr = configParams[9];\n          configParams[9] = (uint *)((int)configPtr + 1);\n          *(char *)configPtr = (char)(*configParams)[4];\n        }\n        **configParams = **configParams & 0xfffffffe;\n        *(undefined *)((int)configParams + 0x3d) = 0x20;\n        (*(code *)configParams[0xe][0xd])();\n      }\n    }\n    else {\n      configParams[0xd][0xd] = (uint)&LAB_080035fc_1;\n      result = set_configuration_0800258c(configParams[0xd]);\n      if (result != 0) {\n        **configParams = **configParams & 0xfffffffe;\n        *(undefined *)((int)configParams + 0x3d) = 0x20;\n        (*(code *)configParams[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)configParams + 0x3d) == '(') && (((uint)configParams[0x10] & 4) != 0)) {\n    configParams[0xb] = (uint *)0xffff0000;\n    configParams[0xc] = (uint *)0x0;\n    *(undefined *)((int)configParams + 0x3d) = 0x20;\n    *(undefined *)((int)configParams + 0x3e) = 0;\n    initialize_and_execute_08004ec4(configParams);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "execute_configuration_0800316c",
                "param_1": "configParams",
                "iVar1": "result",
                "puVar2": "flagPtr",
                "puVar3": "configPtr"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_binary_data_080032b4",
            "code": "\nundefined4 process_binary_data_080032b4(uint **array_ptr)\n\n{\n  char char_value;\n  uint *ptr_1;\n  uint *ptr_2;\n  \n  char_value = *(char *)((int)array_ptr + 0x3d);\n  (*array_ptr)[1] = (*array_ptr)[1] & 0xfffff8ff;\n  **array_ptr = **array_ptr | 1;\n  **array_ptr = **array_ptr & 0xfffffbff;\n  ptr_1 = *array_ptr;\n  if ((ptr_1[1] & 0x800) != 0) {\n    if ((*(char *)((int)array_ptr + 0x3d) == '\\\"') || (*(char *)((int)array_ptr + 0x3d) == '*')) {\n      *(short *)((int)array_ptr + 0x2a) = (short)*(undefined4 *)(*array_ptr[0xe] + 4);\n    }\n    else {\n      *(short *)((int)array_ptr + 0x2a) = (short)*(undefined4 *)(*array_ptr[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)array_ptr + 0x2a) != 0) {\n    if ((ptr_1[5] & 4) != 0) {\n      ptr_2 = array_ptr[9];\n      array_ptr[9] = (uint *)((int)ptr_2 + 1);\n      *(char *)ptr_2 = (char)ptr_1[4];\n      *(short *)((int)array_ptr + 0x2a) = *(short *)((int)array_ptr + 0x2a) + -1;\n    }\n    if (((*array_ptr)[5] & 0x40) != 0) {\n      ptr_1 = array_ptr[9];\n      array_ptr[9] = (uint *)((int)ptr_1 + 1);\n      *(char *)ptr_1 = (char)(*array_ptr)[4];\n      *(short *)((int)array_ptr + 0x2a) = *(short *)((int)array_ptr + 0x2a) + -1;\n    }\n    array_ptr[0x10] = (uint *)((uint)array_ptr[0x10] | 4);\n  }\n  if (array_ptr[0x10] == (uint *)0x0) {\n    if (((char_value == '(') || (char_value == '*')) || (char_value == ')')) {\n      array_ptr[0xb] = (uint *)0xffff0000;\n      array_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)array_ptr + 0x3d) = 0x20;\n      *(undefined *)((int)array_ptr + 0x3e) = 0;\n      initialize_and_execute_08004ec4();\n    }\n    else if ((array_ptr[0xc] == (uint *)0x22) || (char_value == '\\\"')) {\n      array_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)array_ptr + 0x3d) = 0x20;\n      *(undefined *)((int)array_ptr + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    execute_configuration_0800316c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_binary_data_080032b4",
                "param_1": "array_ptr",
                "cVar1": "char_value",
                "puVar2": "ptr_1",
                "puVar3": "ptr_2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_function_080033b8",
            "code": "\nvoid processFunction_080033b8(int *input)\n\n{\n  int tempVar1;\n  uint param2Value;\n  uint param3Value;\n  uint param4Value;\n  \n  tempVar1 = *input;\n  param4Value = *(uint *)(tempVar1 + 0x18);\n  param2Value = *(uint *)(tempVar1 + 0x14);\n  param3Value = *(uint *)(tempVar1 + 4);\n  if ((*(char *)((int)input + 0x3e) == '\\x10') || (*(char *)((int)input + 0x3e) == '@')) {\n    if (((param2Value & 0x10001) == 0) || ((param3Value & 0x200) == 0)) {\n      if (((param2Value & 0x10008) == 0) || ((param3Value & 0x200) == 0)) {\n        if (((param2Value & 0x10002) != 0) && ((param3Value & 0x200) != 0)) {\n          set_flags_based_on_conditions_080028de(input);\n        }\n      }\n      else {\n        store_byte_from_parameter_080028d2(input);\n      }\n    }\n    else {\n      update_status_08002848(input);\n    }\n    if ((param4Value & 0x100004) == 0) {\n      if ((((param2Value & 0x10040) != 0) && ((param3Value & 0x400) != 0)) && ((param2Value & 0x10004) == 0)) {\n        process_parameter_08002f9c(input);\n        return;\n      }\n      if (((param2Value & 0x10004) != 0) && ((param3Value & 0x200) != 0)) {\n        process_input_0800306c(input);\n        return;\n      }\n    }\n    else {\n      if ((((param2Value & 0x10080) != 0) && ((param3Value & 0x400) != 0)) && ((param2Value & 0x10004) == 0)) {\n        process_data_08002db2(input);\n        return;\n      }\n      if (((param2Value & 0x10004) != 0) && ((param3Value & 0x200) != 0)) {\n        process_param_08002efc(input);\n        return;\n      }\n    }\n  }\n  else {\n    if (((param2Value & 0x10002) != 0) && ((param3Value & 0x200) != 0)) {\n      process_input_and_return_zero_08002cf2();\n      return;\n    }\n    if (((param2Value & 0x10010) != 0) && ((param3Value & 0x200) != 0)) {\n      process_binary_data_080032b4(input);\n      return;\n    }\n    if ((param4Value & 0x100004) == 0) {\n      if ((((param2Value & 0x10040) != 0) && ((param3Value & 0x400) != 0)) && ((param2Value & 0x10004) == 0)) {\n        update_data_08002ca6(input);\n        return;\n      }\n      if (((param2Value & 0x10004) != 0) && ((param3Value & 0x200) != 0)) {\n        update_param_08002ad8(input);\n      }\n    }\n    else {\n      if ((((param2Value & 0x10080) != 0) && ((param3Value & 0x400) != 0)) && ((param2Value & 0x10004) == 0)) {\n        update_param_08002c54(input);\n        return;\n      }\n      if (((param2Value & 0x10004) != 0) && ((param3Value & 0x200) != 0)) {\n        update_pointer_and_decrement_08002ab8(input);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_function_080033b8",
                "param_1": "input",
                "iVar1": "tempVar1",
                "uVar2": "param2Value",
                "uVar3": "param3Value",
                "uVar4": "param4Value"
            },
            "calling": [],
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "configure_security_settings_08003520",
            "code": "\nvoid configureSecuritySettings_08003520(uint **configParams)\n\n{\n  char characterVar;\n  uint *ptrToUintVar;\n  uint accessFlags;\n  uint permissionFlags;\n  \n  ptrToUintVar = *configParams;\n  accessFlags = ptrToUintVar[5];\n  permissionFlags = ptrToUintVar[1];\n  if (((accessFlags & 0x10100) != 0) && ((permissionFlags & 0x100) != 0)) {\n    configParams[0x10] = (uint *)((uint)configParams[0x10] | 1);\n    ptrToUintVar[5] = 0xfffffeff;\n    **configParams = **configParams | 0x8000;\n  }\n  if (((accessFlags & 0x10200) != 0) && ((permissionFlags & 0x100) != 0)) {\n    configParams[0x10] = (uint *)((uint)configParams[0x10] | 2);\n    (*configParams)[5] = 0xfffffdff;\n  }\n  if (((accessFlags & 0x10400) != 0) && ((permissionFlags & 0x100) != 0)) {\n    characterVar = *(char *)((int)configParams + 0x3d);\n    if (((*(char *)((int)configParams + 0x3e) == ' ') && (*(short *)((int)configParams + 0x2a) == 0)) &&\n       (((characterVar == '!' || (characterVar == ')')) || ((characterVar == '(' && (configParams[0xc] == (uint *)0x21)))))) {\n      initialize_security_settings_08002d1c(configParams);\n    }\n    else {\n      configParams[0x10] = (uint *)((uint)configParams[0x10] | 4);\n      if (*(char *)((int)configParams + 0x3e) == '\\x10') {\n        **configParams = **configParams | 0x200;\n      }\n      (*configParams)[5] = 0xfffffbff;\n    }\n  }\n  if (((accessFlags & 0x10800) != 0) && ((permissionFlags & 0x100) != 0)) {\n    configParams[0x10] = (uint *)((uint)configParams[0x10] | 8);\n    (*configParams)[5] = 0xfffff7ff;\n  }\n  if (configParams[0x10] != (uint *)0x0) {\n    execute_configuration_0800316c(configParams);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "configure_security_settings_08003520",
                "param_1": "configParams",
                "cVar1": "characterVar",
                "puVar2": "ptrToUintVar",
                "uVar3": "accessFlags",
                "uVar4": "permissionFlags"
            },
            "calling": [],
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "delay_function_0800365c",
            "code": "\nvoid delayFunction_0800365c(int inputValue)\n\n{\n  bool isDelayComplete;\n  int delayCounter;\n  \n  delayCounter = inputValue * (DAT_20000084 / 8000);\n  do {\n    isDelayComplete = delayCounter != 0;\n    delayCounter = delayCounter + -1;\n  } while (isDelayComplete);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "delay_function_0800365c",
                "param_1": "inputValue",
                "local_4": "delayCounter",
                "bVar1": "isDelayComplete"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_and_wait_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 check_and_wait_08003688(uint *parameters)\n\n{\n  int initialTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool isMustSet;\n  \n  if ((*parameters & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = parameters[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (parameters[1] == 0) {\n        initialTime = get_data_08001cc4();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_data_08001cc4();\n          if (100 < (uint)(currentTime - initialTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialTime = get_data_08001cc4();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_data_08001cc4();\n          if (100 < (uint)(currentTime - initialTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | parameters[5] << 3;\n    }\n    else if (parameters[4] == 0) {\n      _DAT_42420000 = 0;\n      initialTime = get_data_08001cc4();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_data_08001cc4();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialTime = get_data_08001cc4();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_data_08001cc4();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | parameters[5] << 3;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[6] == 0) {\n      _DAT_42420480 = 0;\n      initialTime = get_data_08001cc4();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_data_08001cc4();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialTime = get_data_08001cc4();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_data_08001cc4();\n        if (2 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n      delay_function_0800365c(1);\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    isMustSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isMustSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialTime = get_data_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_data_08001cc4();\n        if (100 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    value = parameters[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (parameters[3] == 0) {\n      initialTime = get_data_08001cc4();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_data_08001cc4();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialTime = get_data_08001cc4();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_data_08001cc4();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isMustSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (parameters[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (parameters[7] == 2) {\n    _DAT_42420060 = 0;\n    initialTime = get_data_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (parameters[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | parameters[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | parameters[8] | parameters[9];\n        _DAT_42420060 = 1;\n        initialTime = get_data_08001cc4();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_data_08001cc4();\n        } while ((uint)(currentTime - initialTime) < 3);\n        return 3;\n      }\n      currentTime = get_data_08001cc4();\n    } while ((uint)(currentTime - initialTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialTime = get_data_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_data_08001cc4();\n    } while ((uint)(currentTime - initialTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_and_wait_08003688",
                "param_1": "parameters",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "isMustSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_elapsed_time_08003a68",
            "code": "\n\n\nuint calculateElapsedTime_08003a68(void)\n\n{\n  uint uVar1;\n  undefined2 elapsedTime;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  constant4 = 0x10100f0e;\n  constant3 = 0xd0c0b0a;\n  constant2 = 0x9080706;\n  constant1 = 0x5040302;\n  elapsedTime = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&constant1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&elapsedTime - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_elapsed_time_08003a68",
                "local_1c": "elapsedTime",
                "uStack_18": "constant1",
                "uStack_14": "constant2",
                "uStack_10": "constant3",
                "uStack_c": "constant4"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "update_memory_configuration_08003ad4",
            "code": "\n\n\nundefined4 updateMemoryConfiguration_08003ad4(uint *configParams,uint maxLength)\n\n{\n  int initialValue;\n  int currentValue;\n  uint elapsedTime;\n  \n  if ((_DAT_40022000 & 7) < maxLength) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | maxLength;\n    if (maxLength != (maxLength & 7)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configParams[2];\n  }\n  if ((*configParams & 1) != 0) {\n    elapsedTime = configParams[1];\n    if (elapsedTime == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((elapsedTime != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = elapsedTime | _DAT_40021004 & 0xfffffffc;\n    initialValue = getCurrentValue();\n    if (configParams[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentValue = getCurrentValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else if (configParams[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentValue = getCurrentValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentValue = getCurrentValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (maxLength < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | maxLength;\n    if (maxLength != (maxLength & 7)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configParams[3];\n  }\n  if ((*configParams & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configParams[4] << 3;\n  }\n  elapsedTime = calculateElapsedTime();\n  DAT_20000084 = elapsedTime >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  setMemoryConfiguration(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "update_memory_configuration_08003ad4",
                "param_1": "configParams",
                "param_2": "maxLength",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "elapsedTime",
                "get_data_08001cc4": "getCurrentValue",
                "calculate_elapsed_time_08003a68": "calculateElapsedTime",
                "set_memory_configuration_08001c3c": "setMemoryConfiguration"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "configure_memory_08003afa",
            "code": "\n\n\nundefined4 configureMemory_08003afa(uint *flags,uint size)\n\n{\n  int startTime;\n  int currentTime;\n  uint elapsedTime;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    elapsedTime = flags[1];\n    if (elapsedTime == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((elapsedTime != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = elapsedTime | _DAT_40021004 & 0xfffffffc;\n    startTime = get_data_08001cc4();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = get_data_08001cc4();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = get_data_08001cc4();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = get_data_08001cc4();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  elapsedTime = calculate_elapsed_time_08003a68();\n  DAT_20000084 = elapsedTime >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  set_memory_configuration_08001c3c(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "configure_memory_08003afa",
                "param_1": "flags",
                "param_2": "size",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "elapsedTime"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_global_variable_08003c44",
            "code": "\nundefined4 getGlobalVariable_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_global_variable_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "shifted_value_08003c50",
            "code": "\n\n\nuint shiftedValue_08003c50(void)\n\n{\n  uint globalVariable;\n  \n  globalVariable = getGlobalVariable();\n  return globalVariable >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "shifted_value_08003c50",
                "uVar1": "globalVariable",
                "get_global_variable_08003c44": "getGlobalVariable"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_shifted_result_08003c70",
            "code": "\n\n\nuint get_shifted_result_08003c70(void)\n\n{\n  uint global_variable_result;\n  \n  global_variable_result = get_global_variable_08003c44();\n  return global_variable_result >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_shifted_result_08003c70",
                "uVar1": "global_variable_result"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "update_settings_08003c90",
            "code": "\n\n\nundefined4 updateSettings_08003c90(uint *settings)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int startValue;\n  int currentValue;\n  bool isFlagSet;\n  \n  if ((*settings & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startValue = get_data_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_08001cc4();\n        if (100 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (settings[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        startValue = get_data_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_data_08001cc4();\n          if (5000 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | settings[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | settings[2];\n  }\n  if ((*settings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | settings[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "update_settings_08003c90",
                "param_1": "settings",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "startValue",
                "iVar4": "currentValue",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_shifted_result_08003da4",
            "code": "\n\n\nuint calculate_shifted_result_08003da4(int input_value)\n\n{\n  uint result;\n  undefined2 shift_constant;\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  undefined4 constant_4;\n  \n  constant_4 = 0x10100f0e;\n  constant_3 = 0xd0c0b0a;\n  constant_2 = 0x9080706;\n  constant_1 = 0x5040302;\n  shift_constant = 0x201;\n  if (input_value == 2) {\n    result = get_shifted_result_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shift_constant - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&constant_1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_shifted_result_08003da4",
                "param_1": "input_value",
                "uVar1": "result",
                "local_24": "shift_constant",
                "uStack_20": "constant_1",
                "uStack_1c": "constant_2",
                "uStack_18": "constant_3",
                "uStack_14": "constant_4"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "initialize_callback_and_flag_08003ea0",
            "code": "\n\n\nvoid initializeCallbackAndFlag_08003ea0(uint **callbackData)\n\n{\n  if (((**callbackData & 2) != 0) && (((*callbackData)[1] & 2) != 0)) {\n    executeCallbackIfNotNull();\n    (*callbackData)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)callbackData + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "initialize_callback_and_flag_08003ea0",
                "param_1": "callbackData",
                "execute_callback_if_not_null_08004d18": "executeCallbackIfNotNull"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "update_values_08003ed8",
            "code": "\nvoid update_values_08003ed8(uint **ptr_to_array)\n\n{\n  uint *ptr_to_uint;\n  \n  *(undefined *)((int)ptr_to_array + 0x3d) = 2;\n  ptr_to_uint = *ptr_to_array;\n  if ((ptr_to_uint[8] & 0x1111) == 0) {\n    if ((ptr_to_uint[8] & 0x444) == 0) {\n      *ptr_to_uint = *ptr_to_uint & 0xfffffffe;\n    }\n  }\n  update_values_08003ed8_helper(ptr_to_array);\n  *(undefined *)((int)ptr_to_array + 0x3d) = 0;\n  *(undefined *)(ptr_to_array + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "update_values_08003ed8",
                "param_1": "ptr_to_array",
                "puVar1": "ptr_to_uint",
                "update_values_08004b34": "update_values_helper"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_flags_08003f18",
            "code": "\nvoid processFlags_08003f18(int *flags)\n\n{\n  int value;\n  \n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      executeCondition();\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      executeCondition(flags);\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      executeCondition(flags);\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      executeCondition(flags);\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    subtractAndCall(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800417a(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08003f16(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_08004178(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_flags_08003f18",
                "param_1": "flags",
                "iVar1": "value",
                "execute_if_condition_is_met_08004df8": "executeCondition",
                "execute_if_condition_is_met_08004df8(param_1)": "executeCondition(flags)",
                "execute_subtract_and_call_08004e12": "subtractAndCall"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bits_08004092",
            "code": "\nvoid updateBits_08004092(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bits_08004092",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "update_and_check_bits_080040b0",
            "code": "\nundefined4 update_and_check_bits_080040b0(uint **bit_array_ptr,undefined4 bit_value)\n\n{\n  uint *ptr;\n  \n  update_bits_08004092(*bit_array_ptr,bit_value,0);\n  if (((*bit_array_ptr == (uint *)0x40012c00) && ((constant_2 & 0x1111) == 0)) &&\n     ((constant_2 & 0x444) == 0)) {\n    constant_3 = constant_3 & 0xffff7fff;\n  }\n  ptr = *bit_array_ptr;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)bit_array_ptr + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "update_and_check_bits_080040b0",
                "param_1": "bit_array_ptr",
                "param_2": "bit_value",
                "puVar1": "ptr",
                "uRam40012c20": "constant_2",
                "uRam40012c44": "constant_3"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_bitwise_value_08004110",
            "code": "\nvoid updateBitwiseValue_08004110(int inputPointer,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(inputPointer + 0x20) = *(uint *)(inputPointer + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(inputPointer + 0x20) = *(uint *)(inputPointer + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_bitwise_value_08004110",
                "param_1": "inputPointer",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "update_and_check_bitwise_values_0800412c",
            "code": "\nundefined4 update_and_check_bitwise_values_0800412c(uint **bitwise_values,undefined4 value)\n\n{\n  uint *current_bitwise_values;\n  \n  update_bitwise_value_08004110(*bitwise_values,value,0);\n  current_bitwise_values = *bitwise_values;\n  if (((current_bitwise_values[8] & 0x1111) == 0) && ((current_bitwise_values[8] & 0x444) == 0)) {\n    current_bitwise_values[0x11] = current_bitwise_values[0x11] & 0xffff7fff;\n  }\n  current_bitwise_values = *bitwise_values;\n  if (((current_bitwise_values[8] & 0x1111) == 0) && ((current_bitwise_values[8] & 0x444) == 0)) {\n    *current_bitwise_values = *current_bitwise_values & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "update_and_check_bitwise_values_0800412c",
                "param_1": "bitwise_values",
                "param_2": "value",
                "puVar1": "current_bitwise_values"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "update_flags_and_values_0800417c",
            "code": "\nvoid updateFlagsAndValues_0800417c(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xfffffedf;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputArray + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "update_flags_and_values_0800417c",
                "param_1": "inputArray"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "decode_data_08004198",
            "code": "\nundefined4 decode_data_08004198(int *input_data)\n\n{\n  short remaining_iterations;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)input_data + 0x39) != '!') {\n    return 2;\n  }\n  if (data_size == 0x1000) {\n    *(uint *)(*input_data + 4) = *(ushort *)offset & 0x1ff;\n    if (check_value == 0) {\n      offset = offset + 2;\n    }\n    else {\n      offset = offset + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)offset;\n    offset = (int)(byte_ptr + 1);\n    *(uint *)(*input_data + 4) = (uint)*byte_ptr;\n  }\n  remaining_iterations = *(short *)((int)input_data + 0x26) + -1;\n  *(short *)((int)input_data + 0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    *(uint *)(*input_data + 0xc) = *(uint *)(*input_data + 0xc) & 0xffffff7f;\n    *(uint *)(*input_data + 0xc) = *(uint *)(*input_data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "decode_data_08004198",
                "param_1": "input_data",
                "sVar1": "remaining_iterations",
                "pbVar2": "byte_ptr",
                "param_1[2]": "data_size",
                "param_1[4]": "check_value",
                "param_1[8]": "offset"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_shifted_value_08004204",
            "code": "\nvoid calculateShiftedValue_08004204(int *inputArray)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int inputValue1;\n  int inputValue2;\n  int inputValue3;\n  int inputValue4;\n  int shiftedValue10;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       inputArray[2] | inputArray[4] | inputArray[5] | *(uint *)(*inputArray + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  shiftedValue10 = *inputArray;\n  if (shiftedValue10 != 0x40013800) {\n    shiftedValue1 = shifted_value_08003c50();\n    inputValue1 = inputArray[1];\n    shiftedValue2 = shifted_value_08003c50();\n    inputValue2 = inputArray[1];\n    shiftedValue3 = shifted_value_08003c50();\n    inputValue3 = inputArray[1];\n    shiftedValue4 = shifted_value_08003c50();\n    inputValue4 = inputArray[1];\n    shiftedValue5 = shifted_value_08003c50();\n    *(uint *)(shiftedValue10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(inputValue4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(inputValue2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(inputValue3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(inputValue1 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue10 = get_shifted_result_08003c70();\n  shiftedValue5 = inputArray[1];\n  shiftedValue1 = get_shifted_result_08003c70();\n  inputValue1 = inputArray[1];\n  shiftedValue2 = get_shifted_result_08003c70();\n  inputValue2 = inputArray[1];\n  shiftedValue3 = get_shifted_result_08003c70();\n  inputValue3 = inputArray[1];\n  shiftedValue4 = get_shifted_result_08003c70();\n  result = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedValue3 * 0x19) / (uint)(inputValue3 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedValue4 * 0x19) /\n                                      (ulonglong)(uint)(inputArray[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedValue1 * 0x19) / (uint)(inputValue1 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(inputValue2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(shiftedValue10 * 0x19) / (ulonglong)(uint)(shiftedValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_shifted_value_08004204",
                "param_1": "inputArray",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "inputValue1",
                "iVar7": "inputValue2",
                "iVar8": "inputValue3",
                "iVar9": "inputValue4",
                "iRam40013808": "result"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_condition_080043b4",
            "code": "\nundefined4 checkCondition_080043b4(uint **pointerArray,uint mask,uint expectedResult,int value,uint maxDifference)\n\n{\n  int dataDifference;\n  \n  do {\n    if (((mask & ~**pointerArray) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((maxDifference == 0xffffffff) ||\n          ((maxDifference != 0 && (dataDifference = get_data_08001cc4(), (uint)(dataDifference - value) <= maxDifference))));\n  (*pointerArray)[3] = (*pointerArray)[3] & 0xfffffe5f;\n  (*pointerArray)[5] = (*pointerArray)[5] & 0xfffffffe;\n  *(undefined *)((int)pointerArray + 0x39) = 0x20;\n  *(undefined *)((int)pointerArray + 0x3a) = 0x20;\n  *(undefined *)(pointerArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_condition_080043b4",
                "param_1": "pointerArray",
                "param_2": "mask",
                "param_3": "expectedResult",
                "param_4": "value",
                "param_5": "maxDifference",
                "iVar1": "dataDifference"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "FUNC_0800441a",
            "code": "\nundefined4 FUNC_0800441a(int *param_1)\n\n{\n  if (param_1 != (int *)0x0) {\n    if (*(char *)((int)param_1 + 0x39) == '\\0') {\n      *(undefined *)(param_1 + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(undefined *)((int)param_1 + 0x39) = 0x24;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) & 0xffffdfff;\n    calculate_shifted_value_08004204(param_1);\n    *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffb7ff;\n    *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xffffffd5;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) | 0x2000;\n    param_1[0xf] = 0;\n    *(undefined *)((int)param_1 + 0x39) = 0x20;\n    *(undefined *)((int)param_1 + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "FUNC_0800441a"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 processData_08004478(int *dataPointer,ushort *ushortPointer,int length,undefined4 param4)\n\n{\n  int conditionResult;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataPointer + 0x39) == ' ') {\n    if (ushortPointer == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (length == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataPointer + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataPointer + 0xe) = 1;\n      dataPointer[0xf] = 0;\n      *(undefined *)((int)dataPointer + 0x39) = 0x21;\n      returnValue = get_data_08001cc4();\n      *(short *)(dataPointer + 9) = (short)length;\n      *(short *)((int)dataPointer + 0x26) = (short)length;\n      while (*(short *)((int)dataPointer + 0x26) != 0) {\n        *(short *)((int)dataPointer + 0x26) = *(short *)((int)dataPointer + 0x26) + -1;\n        if (dataPointer[2] == 0x1000) {\n          conditionResult = check_condition_080043b4(dataPointer,0x80,0,returnValue,param4);\n          if (conditionResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPointer + 4) = *ushortPointer & 0x1ff;\n          if (dataPointer[4] == 0) {\n            ushortPointer = ushortPointer + 1;\n          }\n          else {\n            ushortPointer = (ushort *)((int)ushortPointer + 1);\n          }\n        }\n        else {\n          conditionResult = check_condition_080043b4(dataPointer,0x80,0,returnValue,param4);\n          if (conditionResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPointer + 4) = (uint)*(byte *)ushortPointer;\n          ushortPointer = (ushort *)((int)ushortPointer + 1);\n        }\n      }\n      conditionResult = check_condition_080043b4(dataPointer,0x40,0,returnValue,param4);\n      if (conditionResult == 0) {\n        *(undefined *)((int)dataPointer + 0x39) = 0x20;\n        *(undefined *)(dataPointer + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "dataPointer",
                "param_2": "ushortPointer",
                "param_3": "length",
                "param_4": "param4",
                "iVar1": "conditionResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "FUNC_0800455a",
            "code": "\nundefined4 FUNC_0800455a(int *param_1,int param_2,int param_3)\n\n{\n  if (*(char *)((int)param_1 + 0x39) != ' ') {\n    return 2;\n  }\n  if (param_2 == 0) {\n    return 1;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  if (*(char *)(param_1 + 0xe) != '\\x01') {\n    param_1[8] = param_2;\n    *(short *)(param_1 + 9) = (short)param_3;\n    *(short *)((int)param_1 + 0x26) = (short)param_3;\n    param_1[0xf] = 0;\n    *(undefined *)((int)param_1 + 0x39) = 0x21;\n    *(undefined *)(param_1 + 0xe) = 0;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "FUNC_0800455a"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "validate_and_set_080045a2",
            "code": "\nundefined4 validate_and_set_080045a2(int *array,int value1,int value2)\n\n{\n  if (*(char *)((int)array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    result1 = value1;\n    *(short *)(array + 0xb) = (short)value2;\n    *(short *)((int)array + 0x2e) = (short)value2;\n    result4 = 0;\n    *(undefined *)((int)array + 0x3a) = 0x22;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x100;\n    *(uint *)(*array + 0x14) = *(uint *)(*array + 0x14) | 1;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "validate_and_set_080045a2",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "result1",
                "param_1[0xf]": "result4"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "set_bit_and_execute_match_080045fe",
            "code": "\nundefined4 setBitAndExecuteMatch_080045fe(int *param)\n\n{\n  *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xffffffbf;\n  *(undefined *)((int)param + 0x39) = 0x20;\n  execute_match_function_08005604();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "set_bit_and_execute_match_080045fe",
                "param_1": "param"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "process_data_08004618",
            "code": "\nundefined4 processData_08004618(int *inputData)\n\n{\n  byte *bytePtr;\n  short updatedCount;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)inputData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      *(ushort *)inputData[10] = (ushort)((uint)(*(int *)(*inputData + 4) << 0x17) >> 0x17);\n      inputData[10] = inputData[10] + 2;\n    }\n    else {\n      *(ushort *)inputData[10] = (ushort)*(undefined4 *)(*inputData + 4) & 0xff;\n      inputData[10] = inputData[10] + 1;\n    }\n  }\n  else if (inputData[4] == 0) {\n    undefinedPtr = (undefined *)inputData[10];\n    inputData[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*inputData + 4);\n  }\n  else {\n    bytePtr = (byte *)inputData[10];\n    inputData[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*inputData + 4) & 0x7f;\n  }\n  updatedCount = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = updatedCount;\n  if (updatedCount != 0) {\n    return 0;\n  }\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xffffffdf;\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xfffffeff;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  execute_matched_index_080055e0();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "inputData",
                "pbVar1": "bytePtr",
                "sVar2": "updatedCount",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_data_080046b8",
            "code": "\nvoid process_data_080046b8(uint **data)\n\n{\n  int result;\n  uint data_2;\n  uint *data_ptr;\n  uint flag;\n  uint data_1;\n  \n  data_ptr = *data;\n  data_1 = *data_ptr;\n  data_2 = data_ptr[3];\n  if ((((data_1 & 0xf) == 0) && ((data_1 & 0x20) != 0)) && ((data_2 & 0x20) != 0)) {\n    process_data_080046b8_08004618(data);\n    return;\n  }\n  if (((data_1 & 0xf) == 0) || ((flag = data_ptr[5] & 1, flag == 0 && ((data_2 & 0x120) == 0)))) {\n    if (((data_1 & 0x80) != 0) && ((data_2 & 0x80) != 0)) {\n      decode_data_08004198(data);\n      return;\n    }\n    if (((data_1 & 0x40) != 0) && ((data_2 & 0x40) != 0)) {\n      set_bit_and_execute_match_080045fe(data);\n    }\n  }\n  else {\n    if (((data_1 & 1) != 0) && ((data_2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((data_1 & 4) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((data_1 & 2) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((data_1 & 8) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((data_1 & 0x20) != 0) && ((data_2 & 0x20) != 0)) {\n        process_data_080046b8_08004618(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08005650(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      update_flags_and_values_0800417c(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        FUNC_08005650(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_08005650(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_080047d8_1;\n      result = set_configuration_0800258c(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "data_2",
                "puVar3": "data_ptr",
                "uVar4": "flag",
                "uVar5": "data_1"
            },
            "calling": [],
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "input"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "retrieve_bit_080047f4",
            "code": "\nuint retrieveBit_080047f4(uint value,int address)\n\n{\n  return *(uint *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "retrieve_bit_080047f4",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_in_array_0800480a",
            "code": "\nvoid setBitInArray_0800480a(uint bitIndex,int arrayAddress)\n\n{\n  uint bitOffset;\n  \n  bitOffset = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + bitOffset * 4) = *(uint *)(arrayAddress + bitOffset * 4) | 1 << (bitIndex & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "bitIndex",
                "param_2": "arrayAddress",
                "uVar1": "bitOffset"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_bit_08004828",
            "code": "\nvoid updateBit_08004828(uint inputValue,int dataArray)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(dataArray + shiftedIndex * 4) = *(uint *)(dataArray + shiftedIndex * 4) & ~(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "inputValue",
                "param_2": "dataArray",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "map_param_to_address_08004848",
            "code": "\nundefined4 mapParamToAddress_08004848(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "map_param_to_address_08004848",
                "param_1": "param"
            },
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_memory_permissions_08004884",
            "code": "\n\n\nundefined4 setMemoryPermissions_08004884(undefined4 permissionCode)\n\n{\n  undefined4 returnValue;\n  \n  switch(permissionCode) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnValue = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnValue = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnValue = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnValue = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnValue = 0x40011800;\n    break;\n  default:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_memory_permissions_08004884",
                "param_1": "permissionCode",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "check_value_range_0800492c",
            "code": "\nuint check_value_range_0800492c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = get_result_08004cce(input_1,&DAT_08007400,input_3,input_4,input_4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "check_value_range_0800492c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "get_shifted_value_08004948",
            "code": "\nundefined4 get_shifted_value_08004948(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = get_result_08004cce(input_1,&DAT_080074b4,input_3,input_4,input_4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "get_shifted_value_08004948",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "update_memory_permissions_08004974",
            "code": "\n\n\nvoid update_memory_permissions_08004974(int *address_ptr,undefined4 permissions)\n\n{\n  undefined4 result;\n  uint updated_permissions;\n  int current_address_value;\n  uint bit_mask;\n  undefined4 num_bits;\n  undefined4 offset;\n  \n  current_address_value = *address_ptr;\n  if (current_address_value == 0x40012400) {\n    updated_permissions = _DAT_40021018 | 0x200;\n    current_address_value = 0x200;\n    _DAT_40021018 = updated_permissions;\n  }\n  else {\n    updated_permissions = 0x40012800;\n    if (current_address_value == 0x40012800) {\n      updated_permissions = _DAT_40021018 | 0x400;\n      current_address_value = 0x400;\n      _DAT_40021018 = updated_permissions;\n    }\n  }\n  result = set_memory_permissions_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,permissions,updated_permissions,current_address_value);\n  bit_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  num_bits = 3;\n  offset = 0;\n  update_bits_08002624(result,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "update_memory_permissions_08004974",
                "param_1": "address_ptr",
                "param_2": "permissions",
                "uVar1": "result",
                "uVar2": "updated_permissions",
                "iVar3": "current_address_value",
                "local_18": "bit_mask",
                "local_14": "num_bits",
                "local_10": "offset"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_memory_protection_080049f0",
            "code": "\n\n\nvoid updateMemoryProtection_080049f0(int *memoryAddress)\n\n{\n  if (*memoryAddress != 0x40012400) {\n    if (*memoryAddress == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_memory_protection_080049f0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "process_data_08004a4c",
            "code": "\nundefined2 processData_08004a4c(undefined4 inputValue)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 offsetValue;\n  uint valueRange;\n  undefined4 configStatus;\n  undefined4 dataStatus;\n  int result;\n  undefined4 VAR_34;\n  undefined4 VAR_30;\n  undefined4 VAR_2c;\n  undefined4 VAR_28;\n  undefined4 VAR_24;\n  undefined4 VAR_20;\n  undefined4 VAR_1c;\n  undefined4 VAR_10;\n  \n  initializeMemory(&result,0,0x30);\n  valueRange = 0;\n  configStatus = 0;\n  dataStatus = 0;\n  offsetValue = 0;\n  result = findValue(inputValue,&DAT_08007400);\n  if (result == 0) {\n    offsetValue = 0;\n  }\n  else {\n    VAR_34 = 0;\n    VAR_30 = 0;\n    VAR_2c = 0;\n    VAR_24 = 0;\n    VAR_1c = 0xe0000;\n    VAR_10 = 0;\n    VAR_28 = 1;\n    VAR_20 = 0;\n    DAT_20000080 = (undefined)inputValue;\n    iVar1 = updateCheckDataStatus(&result);\n    if (iVar1 == 0) {\n      valueRange = checkValueRange(inputValue);\n      if (valueRange < 0x12) {\n        configStatus = 1;\n        dataStatus = 2;\n        iVar1 = updateConfiguration(&result,&valueRange);\n        if (iVar1 == 0) {\n          iVar1 = checkAndUpdateDataStatus(&result);\n          if (iVar1 == 0) {\n            iVar1 = updateFlag(&result);\n            if (iVar1 == 0) {\n              iVar1 = validateInput(&result,10);\n              if (iVar1 == 0) {\n                uVar2 = getValueFromOffset(&result);\n                if ((uVar2 & 0x200) != 0) {\n                  offsetValue = getOffsetValue(&result);\n                }\n                iVar1 = handleDataStatus(&result);\n                if (iVar1 == 0) {\n                  iVar1 = updateDataStatus(&result);\n                  if (iVar1 != 0) {\n                    offsetValue = 0;\n                  }\n                }\n                else {\n                  offsetValue = 0;\n                }\n              }\n              else {\n                offsetValue = 0;\n              }\n            }\n            else {\n              offsetValue = 0;\n            }\n          }\n          else {\n            offsetValue = 0;\n          }\n        }\n        else {\n          offsetValue = 0;\n        }\n      }\n      else {\n        offsetValue = 0;\n      }\n    }\n    else {\n      offsetValue = 0;\n    }\n  }\n  return offsetValue;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "process_data_08004a4c",
                "param_1": "inputValue",
                "local_46": "offsetValue",
                "local_44": "valueRange",
                "local_40": "configStatus",
                "local_3c": "dataStatus",
                "local_38": "result",
                "local_34": "VAR_34",
                "local_30": "VAR_30",
                "local_2c": "VAR_2c",
                "local_28": "VAR_28",
                "local_24": "VAR_24",
                "local_20": "VAR_20",
                "local_1c": "VAR_1c",
                "local_10": "VAR_10",
                "fill_memory_080061e0": "initializeMemory",
                "find_value_if_not_minus_one_08004c78": "findValue",
                "update_and_check_data_status_0800213c": "updateCheckDataStatus",
                "check_value_range_0800492c": "checkValueRange",
                "update_configuration_08001e48": "updateConfiguration",
                "check_and_update_data_status_08002384": "checkAndUpdateDataStatus",
                "update_flag_08002004": "updateFlag",
                "validate_input_08001cd0": "validateInput",
                "get_value_from_offset_08001f80": "getValueFromOffset",
                "get_offset_value_08001e40": "getOffsetValue",
                "handle_data_status_08002348": "handleDataStatus",
                "update_data_status_0800224c": "updateDataStatus"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "update_values_08004b34",
            "code": "\nvoid update_values_08004b34(void)\n\n{\n  update_values_08004b34_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "update_values_08004b34",
                "update_values_08004d90": "update_values_helper"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "process_data_08004b3c",
            "code": "\nvoid process_data_08004b3c(undefined4 input_data)\n\n{\n  int shifted_value;\n  uint result;\n  int values [17];\n  \n  values[0] = find_value_if_not_minus_one_08004c78(input_data,&DAT_080074b4);\n  if ((values[0] != 0) &&\n     ((((shifted_value = get_shifted_value_08004948(input_data), shifted_value == 0 || (shifted_value == 4)) || (shifted_value == 8)) ||\n      ((shifted_value == 0xc || (shifted_value == 0x18)))))) {\n    result = get_result_08004cce(input_data,&DAT_080074b4);\n    if ((result & 0x100000) == 0) {\n      update_and_check_bits_080040b0(values,shifted_value);\n    }\n    else {\n      update_and_check_bitwise_values_0800412c(values,shifted_value);\n    }\n    update_values_08003ed8(values);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "process_data_08004b3c",
                "param_1": "input_data",
                "iVar1": "shifted_value",
                "uVar2": "result",
                "local_50": "values"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "initialize_data_08004b94",
            "code": "\nvoid initializeData_08004b94(void)\n\n{\n  fetchData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "initialize_data_08004b94",
                "get_data_08001cc4": "fetchData"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "initialize_and_process_data_08004b9e",
            "code": "\nvoid initialize_and_process_data_08004b9e(void)\n\n{\n  add_global_data_to_accumulator();\n  initialize_data_structures();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "initialize_and_process_data_08004b9e",
                "add_global_to_accumulator_08001cac": "add_global_data_to_accumulator",
                "initialize_08002582": "initialize_data_structures"
            },
            "calling": [],
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_memory_permissions_08004bb0",
            "code": "\n\n\nvoid initializeMemoryPermissions_08004bb0(uint inputParameter,undefined4 memoryParameter1,undefined4 memoryParameter2)\n\n{\n  undefined4 memoryPermissions;\n  uint bitMask;\n  undefined4 localMemoryParam1;\n  undefined4 localMemoryParam2;\n  undefined4 localVariable;\n  \n  memoryPermissions = set_memory_permissions_08004884((inputParameter << 0x18) >> 0x1c);\n  bitMask = 1 << (inputParameter & 0xf) & 0xffff;\n  localVariable = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((inputParameter - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((inputParameter == 0xf) || (inputParameter == 0x13)) || (inputParameter == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localMemoryParam1 = memoryParameter1;\n  localMemoryParam2 = memoryParameter2;\n  update_bits_08002624(memoryPermissions,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_memory_permissions_08004bb0",
                "param_1": "inputParameter",
                "param_2": "memoryParameter1",
                "param_3": "memoryParameter2",
                "uVar1": "memoryPermissions",
                "local_20": "bitMask",
                "local_1c": "localMemoryParam1",
                "local_18": "localMemoryParam2",
                "local_14": "localVariable"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_param_value_08004c30",
            "code": "\nvoid setParamValue_08004c30(undefined4 param1,undefined2 param2,int param3,undefined4 param4)\n\n{\n  if (param3 == 0) {\n    setParamValue_08004c300800281e(param1,param2,0,param4,param4);\n    return;\n  }\n  setParamValue_08004c300800281e(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_param_value_08004c30",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "set_param_value_0800281e": "setParamValue0800281e"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "bitwise_intersection_check_08004c48",
            "code": "\nvoid bitwiseIntersectionCheck_08004c48(undefined4 input1,undefined2 input2,undefined4 input3,undefined4 input4)\n\n{\n  check_bitwise_intersection_08002810(input1,input2,input3,input4,input4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "bitwise_intersection_check_08004c48",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_game_08004c52",
            "code": "\nvoid initialize_game_08004c52(void)\n\n{\n  initialize_system();\n  initialize_board();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_game_08004c52",
                "initialize_system_08001c88": "initialize_system",
                "initialize_board_08001b48": "initialize_board"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_by_index_08004c5e",
            "code": "\nundefined4 find_value_by_index_08004c5e(int index,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == index) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_by_index_08004c5e",
                "param_1": "index",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "find_value_if_not_minus_one_08004c78",
            "code": "\nundefined4 find_value_if_not_minus_one_08004c78(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_by_index_08004c5e();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "find_value_if_not_minus_one_08004c78",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_parameter_08004c8a",
            "code": "\nint find_parameter_08004c8a(int search_value,char *data)\n\n{\n  while( true ) {\n    if (*(int *)(data + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(data + 4) == search_value) break;\n    data = data + 0xc;\n  }\n  return (int)*data;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_parameter_08004c8a",
                "param_1": "search_value",
                "param_2": "data"
            },
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "get_valid_parameter_08004ca2",
            "code": "\nundefined4 getValidParameter_08004ca2(int inputParam)\n\n{\n  undefined4 foundParameter;\n  \n  if (inputParam != 0) {\n    foundParameter = find_parameter_08004c8a();\n    return foundParameter;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "get_valid_parameter_08004ca2",
                "param_1": "inputParam",
                "uVar1": "foundParameter"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_from_array_08004cb2",
            "code": "\nundefined4 find_value_from_array_08004cb2(int value_to_find,char *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0xffffffff;\n    }\n    if (*array_ptr == value_to_find) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return *(undefined4 *)(array_ptr + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_from_array_08004cb2",
                "param_1": "value_to_find",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "get_result_08004cce",
            "code": "\nundefined4 get_result_08004cce(int input)\n\n{\n  undefined4 result;\n  \n  if (input == -1) {\n    return 0xffffffff;\n  }\n  result = find_value_from_array_08004cb2();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "get_result_08004cce",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "check_param_08004ce2",
            "code": "\nundefined4 check_param_08004ce2(int input_value,char *parameter_array)\n\n{\n  if (input_value == -1) {\n    result 0;\n  }\n  while( true ) {\n    if (*parameter_array == -1) {\n      result 0;\n    }\n    if (input_value == *parameter_array) break;\n    parameter_array = parameter_array + 0xc;\n  }\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "check_param_08004ce2",
                "param_1": "input_value",
                "param_2": "parameter_array",
                "return": "result"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_non_zero_08004d06",
            "code": "\nint compareAndReturnNonZero_08004d06(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_non_zero_08004d06",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_if_not_null_08004d18",
            "code": "\nvoid executeCallbackIfNotNull_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_if_not_null_08004d18"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "run_infinite_loop_08004d40",
            "code": "\nvoid runInfiniteLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "run_infinite_loop_08004d40"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "set_hardware_flags_08004d44",
            "code": "\n\n\nvoid setHardwareFlags_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "set_hardware_flags_08004d44"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_values_08004d90",
            "code": "\n\n\nvoid updateValues_08004d90(int *input)\n\n{\n  if (*input == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*input == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*input == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*input == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_values_08004d90",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtract_four_08004df4(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "input_num"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_if_condition_is_met_08004df8",
            "code": "\nvoid executeIfConditionIsMet_08004df8(int inputParameter)\n\n{\n  int result;\n  \n  result = getFunctionPointer();\n  if ((*(functionPointer **)(result + 0x4c) != (functionPointer *)0x0) && (*(char *)(inputParameter + 0x1c) == '\\x01')) {\n    (**(functionPointer **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_if_condition_is_met_08004df8",
                "param_1": "inputParameter",
                "iVar1": "result",
                "subtract_four_08004df4": "getFunctionPointer",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_subtract_and_call_08004e12",
            "code": "\nvoid executeSubtractAndCall_08004e12(void)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_subtract_and_call_08004e12",
                "iVar1": "result",
                "subtract_four_08004df4": "subtractFour"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "check_flags_and_process_08004e20",
            "code": "\nvoid checkFlagsAndProcess_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    processFlags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "check_flags_and_process_08004e20",
                "process_flags_08003f18": "processFlags"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtractFour_08004e70(int originalValue)\n\n{\n  return originalValue + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "originalValue"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "process_input_08004e74",
            "code": "\nvoid processInput_08004e74(int input,int flag,int target,undefined4 parameter)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (target == *(int *)(input + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      initializeParameters(input,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    handleInput(input,result + 0x68,0x20,8,parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "process_input_08004e74",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "target",
                "param_4": "parameter",
                "iVar1": "result",
                "subtract_four_08004e70": "subtractFour",
                "check_and_initialize_parameters_08002af8": "initializeParameters",
                "handle_input_08002b84": "handleInput"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "initialize_and_execute_08004ec4",
            "code": "\nvoid initialize_and_execute_08004ec4(undefined4 input_param)\n\n{\n  int subtract_four_result;\n  \n  subtract_four_result = subtract_four_08004e70();\n  if (((*(code **)(subtract_four_result + 0x60) != (code *)0x0) && (*(char *)(subtract_four_result + 0x5c) == '\\x01')) &&\n     (*(char *)(subtract_four_result + 0x2c) != ' ')) {\n    (**(code **)(subtract_four_result + 0x60))(subtract_four_result + 0x68);\n  }\n  initialize_flags_08002c10(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "initialize_and_execute_08004ec4",
                "param_1": "input_param",
                "iVar1": "subtract_four_result"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "initialize_flags_if_not_set_08004ef4",
            "code": "\nvoid initialize_flags_if_not_set_08004ef4(undefined4 input_parameter)\n\n{\n  int result;\n  \n  result = get_offset();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_flags_08002c10(input_parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "initialize_flags_if_not_set_08004ef4",
                "param_1": "input_parameter",
                "iVar1": "result",
                "subtract_four_08004e70": "get_offset"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "initialize_uart_08004f4c",
            "code": "\n\n\nvoid initializeUART_08004f4c(int *uartConfig)\n\n{\n  int uartPeripheral1;\n  int uartPeripheral2;\n  undefined4 permission1;\n  uint result;\n  uint pinBitmask;\n  uint pinConfig;\n  uint pinLevel;\n  undefined4 bitmask;\n  \n  if (uartConfig != (int *)0x0) {\n    uartPeripheral1 = find_value_if_not_minus_one_08004c78((int)*(char *)(uartConfig + 0x16),&DAT_0800764c);\n    uartPeripheral2 = find_value_if_not_minus_one_08004c78((int)*(char *)((int)uartConfig + 0x59),&DAT_08007604);\n    if ((uartPeripheral2 == 0) || (uartPeripheral1 == 0)) {\n      decode_and_process_data_080068f0(\"ERROR: at least one UART pin has no peripheral\\n\",uartPeripheral2);\n    }\n    else {\n      uartPeripheral1 = compare_and_return_non_zero_08004d06(uartPeripheral1);\n      *uartConfig = uartPeripheral1;\n      if (uartPeripheral1 == 0) {\n        decode_and_process_data_080068f0(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPeripheral1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uartConfig + 0x11) = 0;\n          *(undefined *)((int)uartConfig + 0x5a) = 0x25;\n        }\n        else if (uartPeripheral1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uartConfig + 0x11) = 1;\n          *(undefined *)((int)uartConfig + 0x5a) = 0x26;\n        }\n        else if (uartPeripheral1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uartConfig + 0x11) = 2;\n          *(undefined *)((int)uartConfig + 0x5a) = 0x27;\n        }\n        permission1 = set_memory_permissions_08004884((uint)((int)*(char *)((int)uartConfig + 0x59) << 0x18) >> 0x1c);\n        result = get_result_08004cce((int)*(char *)((int)uartConfig + 0x59),&DAT_08007604);\n        pinBitmask = 1 << (*(byte *)((int)uartConfig + 0x59) & 0xf) & 0xffff;\n        pinConfig = (result >> 3 & 1) << 4 | result & 7;\n        pinLevel = (result << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((result << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        bitmask = 3;\n        update_bits_08002624(permission1,&pinBitmask);\n        permission1 = set_memory_permissions_08004884((uint)((int)*(char *)(uartConfig + 0x16) << 0x18) >> 0x1c);\n        result = get_result_08004cce((int)*(char *)(uartConfig + 0x16),&DAT_0800764c);\n        pinBitmask = 1 << (*(byte *)(uartConfig + 0x16) & 0xf) & 0xffff;\n        pinConfig = (result >> 3 & 1) << 4 | result & 7;\n        pinLevel = (result << 0x1a) >> 0x1e;\n        update_bits_08002624(permission1,&pinBitmask);\n        (&DAT_2000032c)[*(byte *)(uartConfig + 0x11)] = uartConfig + 1;\n        uartConfig[1] = *uartConfig;\n        uartConfig[2] = uartConfig[0x12];\n        uartConfig[3] = uartConfig[0x13];\n        uartConfig[4] = uartConfig[0x14];\n        uartConfig[5] = uartConfig[0x15];\n        uartConfig[6] = 0xc;\n        uartConfig[7] = 0;\n        uartConfig[8] = 0;\n        FUNC_0800441a(uartConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "initialize_uart_08004f4c",
                "param_1": "uartConfig",
                "iVar1": "uartPeripheral1",
                "iVar2": "uartPeripheral2",
                "uVar3": "permission1",
                "uVar4": "result",
                "local_20": "pinBitmask",
                "local_1c": "pinConfig",
                "local_18": "pinLevel",
                "local_14": "bitmask"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initialize_uart_08005384(void)\n\n{\n  int result1;\n  undefined4 result2;\n  \n  result1 = find_value_if_not_minus_one_08004c78(2,&DAT_0800764c);\n  if (result1 != 0) {\n    result2 = find_value_if_not_minus_one_08004c78(2,&DAT_0800764c);\n    DAT_200000e1 = get_valid_parameter_08004ca2(result2,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    initialize_uart_08005384_08004f4c(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_data_080053d4",
            "code": "\nuint process_data_080053d4(undefined4 input_param,uint output_param)\n\n{\n  int data_value_1;\n  int data_value_2;\n  uint counter;\n  \n  data_value_1 = get_data();\n  data_value_2 = find_value(2,&DAT_0800764c);\n  if (data_value_2 == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 5 &&\n      (((&DAT_2000032c)[counter] == 0 ||\n       (data_value_2 = find_value(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[counter] != data_value_2))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (4 < counter) {\n    if ((4 < DAT_200000cc) && (initialize_uart(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    counter = (uint)DAT_200000cc;\n  }\n  do {\n    data_value_2 = process_data_080053d4_operation((&DAT_2000032c)[counter],input_param,output_param & 0xffff,1000);\n    if (data_value_2 == 0) {\n      return output_param;\n    }\n    data_value_2 = get_data();\n  } while ((uint)(data_value_2 - data_value_1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_data_080053d4",
                "param_1": "input_param",
                "param_2": "output_param",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "uVar3": "counter",
                "initialize_uart_08005384": "initialize_uart",
                "process_data_08004478": "process_data_operation",
                "get_data_08001cc4": "get_data",
                "find_value_if_not_minus_one_08004c78": "find_value"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "FUNC_0800548c",
            "code": "\nbool FUNC_0800548c(int param_1)\n\n{\n  uint uVar1;\n  \n  uVar1 = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(param_1 + 0x44)]);\n  return (uVar1 & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "FUNC_0800548c"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "check_flag_validity_080054b0",
            "code": "\nbool check_flag_validity_080054b0(int flag_index)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(flag_index + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "check_flag_validity_080054b0",
                "param_1": "flag_index",
                "uVar1": "combined_bytes"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "extract_value_and_validate_080054d4",
            "code": "\nundefined4 extract_value_and_validate_080054d4(int input_index,undefined *output_value,undefined4 length_of_param_4,undefined4 validation_param)\n\n{\n  int result;\n  \n  if (input_index == 0) {\n    return 0xffffffff;\n  }\n  result = FUNC_0800548c();\n  if (result == 0) {\n    *output_value = *(undefined *)(input_index + 0x45);\n    validate_and_set_080045a2((&DAT_2000032c)[*(byte_value *)(input_index + 0x44)],input_index + 0x45,1,&DAT_2000032c,validation_param);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "extract_value_and_validate_080054d4",
                "param_1": "input_index",
                "param_2": "output_value",
                "param_3": "length_of_param_4",
                "param_4": "validation_param",
                "iVar1": "result",
                "byte": "byte_value"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "update_data_08005510",
            "code": "\nvoid updateData_08005510(int dataPtr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  uint index;\n  \n  if (dataPtr != 0) {\n    result = FUNC_0800548c();\n    if (result == 0) {\n      index = (uint)*(byte *)(dataPtr + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = value1;\n      *(int *)(&DAT_200002f0 + index * 4) = dataPtr;\n      apply_bits_to_memory_08002494((int)*(char *)(dataPtr + 0x5a),0,1,index,value3);\n      set_bit_in_array_080024f8((int)*(char *)(dataPtr + 0x5a));\n      validate_and_set_080045a2((&DAT_2000032c)[*(byte *)(dataPtr + 0x44)],dataPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "update_data_08005510",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "update_memory_and_apply_bits_08005568",
            "code": "\nvoid update_memory_and_apply_bits_08005568(int ptr_to_data,undefined4 new_value)\n\n{\n  byte byte_value;\n  \n  if (ptr_to_data != 0) {\n    byte_value = *(byte *)(ptr_to_data + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byte_value * 4) = new_value;\n    *(int *)(&DAT_20000318 + (uint)byte_value * 4) = ptr_to_data;\n    apply_bits_to_memory((int)*(char *)(ptr_to_data + 0x5a),0,2);\n    set_bit_in_array((int)*(char *)(ptr_to_data + 0x5a));\n    FUNC_0800455a((&DAT_2000032c)[*(byte *)(ptr_to_data + 0x44)],\n                 *(int *)(ptr_to_data + 100) + (uint)*(ushort *)(ptr_to_data + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "update_memory_and_apply_bits_08005568",
                "param_1": "ptr_to_data",
                "param_2": "new_value",
                "bVar1": "byte_value",
                "apply_bits_to_memory_08002494": "apply_bits_to_memory",
                "set_bit_in_array_080024f8": "set_bit_in_array"
            },
            "calling": [],
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_match_index_080055bc",
            "code": "\nuint find_match_index_080055bc(int input_value)\n\n{\n  uint match_index;\n  \n  if (input_value == 0) {\n    match_index = 5;\n  }\n  else {\n    match_index = 0;\n    while( true ) {\n      if (4 < match_index) {\n        return match_index;\n      }\n      if (input_value == (&DAT_2000032c)[match_index]) break;\n      match_index = match_index + 1 & 0xff;\n    }\n  }\n  return match_index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_match_index_080055bc",
                "param_1": "input_value",
                "uVar1": "match_index"
            },
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_matched_index_080055e0",
            "code": "\nvoid execute_matched_index_080055e0(void)\n\n{\n  uint match_index;\n  \n  match_index = find_match_index();\n  if (match_index < 5) {\n    (**(code **)(&DAT_200002dc + match_index * 4))(*(undefined4 *)(&DAT_200002f0 + match_index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_matched_index_080055e0",
                "uVar1": "match_index",
                "find_match_index_080055bc": "find_match_index"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "execute_match_function_08005604",
            "code": "\nvoid executeMatchFunction_08005604(void)\n\n{\n  uint matchIndex;\n  int result;\n  int data;\n  \n  matchIndex = find_match_index_080055bc();\n  data = *(int *)(&DAT_20000318 + matchIndex * 4);\n  if ((matchIndex < 5) && (result = (**(code **)(&DAT_20000304 + matchIndex * 4))(data), result != -1)) {\n    FUNC_0800455a((&DAT_2000032c)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "execute_match_function_08005604",
                "uVar1": "matchIndex",
                "iVar2": "result",
                "iVar3": "data"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocate_memory_080056d8(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocated_memory = DAT_20000340;\n  if (DAT_20000340 + size <= end_of_stack) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocated_memory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "&stack0x00000000": "end_of_stack"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_value_08005714",
            "code": "\nunsignedInt initializeValue_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_value_08005714",
                "undefined4": "unsignedInt"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "initialize_memory_0800571a",
            "code": "\nundefined4 initializeMemory_0800571a(undefined4 baseAddress,int bufferAddress)\n\n{\n  *(undefined4 *)(bufferAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_1": "baseAddress",
                "param_2": "bufferAddress"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "initialize_program_08005724",
            "code": "\nvoid initializeProgram_08005724(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "initialize_program_08005724",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "get_default_value_08005728",
            "code": "\nundefined4 getDefaultValue_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "get_default_value_08005728"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_0800572c",
            "code": "\nvoid initialize_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_0800572c",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "process_data_08005730",
            "code": "\nvoid process_data_08005730(undefined4 unused_param,undefined4 data_param,undefined4 param_3,undefined4 param_4)\n\n{\n  process_data_08005730_080053d4(data_param,param_3,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "process_data_08005730",
                "param_1": "unused_param",
                "param_2": "data_param"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_data_08005740",
            "code": "\nundefined4 initializeData_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_data_08005740"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "get_return_value_08005750",
            "code": "\nuint32 getReturnValue_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "get_return_value_08005750",
                "undefined4": "uint32"
            },
            "calling": [
                "thunk_FUN_08005750"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "process_and_shift_data_08005754",
            "code": "\nuint process_and_shift_data_08005754(uint input_value)\n\n{\n  bool is_less_than_threshold;\n  char result_character;\n  uint processed_data;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_threshold = true;\n    }\n    else {\n      is_less_than_threshold = false;\n    }\n  }\n  else {\n    is_less_than_threshold = input_value < 0x3c;\n  }\n  if (is_less_than_threshold) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    result_character = (&DAT_080076f0)[input_value];\n  }\n  else {\n    result_character = -1;\n  }\n  if (result_character == -1) {\n    processed_data = 0;\n  }\n  else {\n    processed_data = process_data_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return processed_data >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return processed_data << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return processed_data;\n}\n\n",
            "renaming": {
                "FUN_08005754": "process_and_shift_data_08005754",
                "param_1": "input_value",
                "bVar1": "is_less_than_threshold",
                "cVar2": "result_character",
                "uVar3": "processed_data"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "process_memory_080057b4",
            "code": "\nvoid processMemory_080057b4(uint index,undefined4 mode,undefined4 param,undefined *data)\n\n{\n  int bitCheckResult;\n  undefined *bitCheckArray;\n  int value;\n  \n  if (index < 0x3c) {\n    value = (int)(char)(&DAT_080076f0)[index];\n    bitCheckArray = &DAT_080076f0;\n  }\n  else {\n    value = -1;\n    bitCheckArray = data;\n  }\n  if (value != -1) {\n    bitCheckResult = retrieveBit(value,&DAT_20000344,param,bitCheckArray,data);\n    if (bitCheckResult != 0) {\n      bitCheckResult = checkParameter(value,&DAT_080074b4);\n      if (bitCheckResult != 0) {\n        processData(value);\n      }\n      updateBit(value,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      initializeMemoryPermissions(value,0);\n      break;\n    case 1:\n      initializeMemoryPermissions(value,1,0);\n      break;\n    case 2:\n      initializeMemoryPermissions(value,0,1);\n      break;\n    case 3:\n      initializeMemoryPermissions(value,0,2);\n    }\n    setBitInArray(value,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "process_memory_080057b4",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "param",
                "param_4": "data",
                "iVar1": "bitCheckResult",
                "puVar2": "bitCheckArray",
                "iVar3": "value",
                "initialize_memory_permissions_08004bb0": "initializeMemoryPermissions",
                "retrieve_bit_080047f4": "retrieveBit",
                "check_param_08004ce2": "checkParameter",
                "process_data_08004b3c": "processData",
                "update_bit_08004828": "updateBit",
                "set_bit_in_array_0800480a": "setBitInArray"
            },
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "retrieve_and_set_param_value_08005848",
            "code": "\nvoid retrieve_and_set_param_value_08005848(uint index,undefined4 value,undefined4 param_data,undefined *data_ptr)\n\n{\n  int result;\n  undefined4 address;\n  undefined *bit_values_array;\n  uint bit_value;\n  \n  if (index < 0x3c) {\n    bit_value = (uint)(char)(&DAT_080076f0)[index];\n    bit_values_array = &DAT_080076f0;\n  }\n  else {\n    bit_value = 0xffffffff;\n    bit_values_array = data_ptr;\n  }\n  if ((bit_value != 0xffffffff) &&\n     (result = retrieve_bit_080047f4(bit_value,&DAT_20000358,param_data,bit_values_array,data_ptr), result != 0)) {\n    address = map_param_to_address_08004848((bit_value << 0x18) >> 0x1c);\n    set_param_value_08004c30(address,1 << (bit_value & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "retrieve_and_set_param_value_08005848",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_data",
                "param_4": "data_ptr",
                "iVar1": "result",
                "uVar2": "address",
                "uVar4": "bit_value",
                "puVar3": "bit_values_array"
            },
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_parameter_value_08005890",
            "code": "\nchar checkParameterValue_08005890(uint parameter)\n\n{\n  char result;\n  int bitValue;\n  undefined4 address;\n  uint lookupValue;\n  \n  if (parameter < 0x3c) {\n    lookupValue = (uint)(char)(&DAT_080076f0)[parameter];\n  }\n  else {\n    lookupValue = 0xffffffff;\n  }\n  if (lookupValue == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bitValue = retrieve_bit_080047f4(lookupValue,&DAT_20000358);\n    if (bitValue == 0) {\n      result = '\\0';\n    }\n    else {\n      address = map_param_to_address_08004848((lookupValue << 0x18) >> 0x1c);\n      result = bitwise_intersection_check_08004c48(address,1 << (lookupValue & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_parameter_value_08005890",
                "param_1": "parameter",
                "cVar1": "result",
                "iVar2": "bitValue",
                "uVar3": "address",
                "uVar4": "lookupValue"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "initialize_080058e0",
            "code": "\nvoid initialize_080058e0(void)\n\n{\n  initialize_080058e0_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "initialize_080058e0",
                "initialize_data_08004b94": "initialize_data"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_modified_value_0800591e",
            "code": "\nushort calculateModifiedValue_0800591e(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_modified_value_0800591e",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "update_data_0800598a",
            "code": "\nvoid updateData_0800598a(int data)\n\n{\n  int validationResult;\n  ushort updatedValueIndex;\n  undefined newValue;\n  \n  validationResult = extract_value_and_validate_080054d4(data,&newValue);\n  if ((validationResult == 0) &&\n     (updatedValueIndex = *(short *)(data + 0x60) + 1U & 0x3f, updatedValueIndex != *(ushort *)(data + 0x62))) {\n    *(undefined *)(*(int *)(data + 0x5c) + (uint)*(ushort *)(data + 0x60)) = newValue;\n    *(ushort *)(data + 0x60) = updatedValueIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "param_1": "data",
                "iVar1": "validationResult",
                "uVar2": "updatedValueIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_data_structure_08005a44",
            "code": "\nvoid initializeDataStructure_08005a44(int dataStructure)\n\n{\n  *(int *)(dataStructure + 0x130) = dataStructure + 0x11;\n  *(undefined2 *)(dataStructure + 0x134) = 0;\n  *(undefined2 *)(dataStructure + 0x136) = 0;\n  *(int *)(dataStructure + 0x138) = dataStructure + 0x51;\n  *(undefined2 *)(dataStructure + 0x13c) = 0;\n  *(undefined2 *)(dataStructure + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_data_structure_08005a44",
                "param_1": "dataStructure"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_hardware_serial_08005a68",
            "code": "\nvoid initializeHardwareSerial_08005a68(int serialInstance,undefined4 baudRate,byte config)\n\n{\n  uint extraOutput;\n  char *errorMessage;\n  byte configMask;\n  int configValue;\n  byte *dataPointer;\n  char uartMode;\n  int baseAddress;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialInstance + 0x11c) = baudRate;\n  *(byte *)(serialInstance + 0x140) = config;\n  configMask = config & 7;\n  if (configMask == 4) {\n    configValue = 7;\n  }\n  else if (configMask == 6) {\n    configValue = 8;\n  }\n  else if (configMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serialInstance + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serialInstance + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialInstance + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serialInstance + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialInstance + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialInstance + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialInstance + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    initialize_uart_08004f4c(serialInstance + 0xd4);\n    update_data_08005510(serialInstance + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTable = (code *)0x8005b12;\n  assertion_failed_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  dataPointer = *(byte **)(extraOutput + baseAddress);\n  errorMessage[0x1e] = uartMode;\n  *(undefined *)(*dataPointer + 0x1e) = 0;\n  if (extraOutput < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[extraOutput];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_hardware_serial_08005a68",
                "param_1": "serialInstance",
                "param_2": "baudRate",
                "param_3": "config",
                "extraout_r1": "extraOutput",
                "pcVar1": "errorMessage",
                "bVar2": "configMask",
                "iVar3": "configValue",
                "pbVar4": "dataPointer",
                "unaff_r4": "uartMode",
                "unaff_r6": "baseAddress",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_flag_based_on_input_08005b24",
            "code": "\nvoid setFlagBasedOnInput_08005b24(int inputAddress,uint inputValue)\n\n{\n  undefined flagValue;\n  code *jumpTable;\n  \n  if (inputValue < 0x3c) {\n    flagValue = (&DAT_080076f0)[inputValue];\n  }\n  else {\n    flagValue = 0xff;\n  }\n  *(undefined *)(inputAddress + 0x12d) = flagValue;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_flag_based_on_input_08005b24",
                "param_1": "inputAddress",
                "param_2": "inputValue",
                "uVar1": "flagValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "get_updated_value_08005b3c",
            "code": "\nvoid getUpdatedValue_08005b3c(int address,uint index)\n\n{\n  undefined updatedValue;\n  \n  if (index < 0x3c) {\n    updatedValue = (&DAT_080076f0)[index];\n  }\n  else {\n    updatedValue = 0xff;\n  }\n  *(undefined *)(address + 300) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "get_updated_value_08005b3c",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_data_structure_08005b54",
            "code": "\nundefined4 *\ninitialize_data_structure_08005b54(undefined4 *data_structure,undefined4 input_parameter,undefined4 extra_parameter,undefined4 another_parameter)\n\n{\n  undefined valid_parameter;\n  \n  data_structure[1] = 0;\n  data_structure[2] = 1000;\n  *data_structure = &PTR_LAB_080059c8_1_08007804;\n  if (data_structure == (undefined4 *)&DAT_2000036c) {\n    set_flag_based_on_input(&DAT_2000036c,0,extra_parameter,&DAT_2000036c,another_parameter);\n    get_updated_value(&DAT_2000036c,1);\n  }\n  else {\n    valid_parameter = get_valid_parameter(input_parameter,&DAT_08007604);\n    *(undefined *)((int)data_structure + 0x12d) = valid_parameter;\n    valid_parameter = get_valid_parameter(input_parameter,&DAT_0800764c);\n    *(undefined *)(data_structure + 0x4b) = valid_parameter;\n  }\n  initialize_data_structure_08005b54_helper(data_structure);\n  return data_structure;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_data_structure_08005b54",
                "param_1": "data_structure",
                "param_2": "input_parameter",
                "param_3": "extra_parameter",
                "param_4": "another_parameter",
                "uVar1": "valid_parameter",
                "set_flag_based_on_input_08005b24": "set_flag_based_on_input",
                "get_updated_value_08005b3c": "get_updated_value",
                "get_valid_parameter_08004ca2": "get_valid_parameter",
                "initialize_data_structure_08005a44": "initialize_data_structure_helper"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_data_structure_if_param1_is_set_08005bb0",
            "code": "\nvoid initialize_data_structure_if_param1_is_set_08005bb0(int is_param1_set,int param2_value,undefined4 param3_value,undefined4 param4_value)\n\n{\n  if (is_param1_set != 1) {\n    return;\n  }\n  if (param2_value == 0xffff) {\n    initialize_data_structure(&DAT_2000036c,0x40004400,param3_value,0xffff,param4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_data_structure_if_param1_is_set_08005bb0",
                "param_1": "is_param1_set",
                "param_2": "param2_value",
                "param_3": "param3_value",
                "param_4": "param4_value",
                "initialize_data_structure_08005b54": "initialize_data_structure"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initializeData_08005c1c(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08007858;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_data_if_param1_is_1_and_param2_is_ffff_08005c38",
            "code": "\nvoid initialize_data_if_param1_is_1_and_param2_is_ffff_08005c38(int is_param1_equal_to_1,int is_param2_equal_to_ffff)\n\n{\n  if ((is_param1_equal_to_1 == 1) && (is_param2_equal_to_ffff == 0xffff)) {\n    initialize_data(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_data_if_param1_is_1_and_param2_is_ffff_08005c38",
                "param_1": "is_param1_equal_to_1",
                "param_2": "is_param2_equal_to_ffff",
                "initialize_data_08005c1c": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "process_param_08005c96",
            "code": "\nundefined4 process_param_08005c96(int *ptr_param,int num_elements,undefined4 result,undefined4 data)\n\n{\n  undefined4 last_character_index;\n  \n  if (num_elements != 0) {\n    last_character_index = get_last_character_index_08000178(num_elements);\n    last_character_index = (**(code **)(*ptr_param + 4))(ptr_param,num_elements,last_character_index,*(code **)(*ptr_param + 4),data);\n    return last_character_index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "process_param_08005c96",
                "param_1": "ptr_param",
                "param_2": "num_elements",
                "param_3": "result",
                "param_4": "data",
                "uVar1": "last_character_index"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_ptr)\n\n{\n  (**(code **)*function_ptr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_ptr"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_callback_08005cc0",
            "code": "\nvoid executeCallback_08005cc0(int *callbackPtr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  (**(code **)(*callbackPtr + 4))(callbackPtr,&DAT_0800786c,2,*(code **)(*callbackPtr + 4),arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_callback_08005cc0",
                "param_1": "callbackPtr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_sum_08005cd4",
            "code": "\nint calculateSum_08005cd4(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_param_08005c96();\n  result2 = execute_callback_08005cc0(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_sum_08005cd4",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_decimal_to_base_08005ce8",
            "code": "\nundefined4 convertDecimalToBase_08005ce8(int *arrayPtr,uint number,uint base)\n\n{\n  char convertedDigit;\n  undefined4 returnValue;\n  uint remainder;\n  uint quotient;\n  char *currentChar;\n  char convertedNumber [9];\n  \n  convertedNumber[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  currentChar = convertedNumber + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    currentChar = currentChar + -1;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *currentChar = convertedDigit;\n    number = quotient;\n  } while (quotient != 0);\n  if (currentChar == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    returnValue = get_last_character_index_08000178(currentChar);\n    returnValue = (**(code **)(*arrayPtr + 4))(arrayPtr,currentChar,returnValue);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_decimal_to_base_08005ce8",
                "param_1": "arrayPtr",
                "param_2": "number",
                "param_3": "base",
                "cVar1": "convertedDigit",
                "uVar2": "returnValue",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "currentChar",
                "local_15": "convertedNumber"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "convert_to_base_08005d42",
            "code": "\nint convert_to_base_08005d42(undefined4 *input_array,uint input_number,uint base)\n\n{\n  int result;\n  int significance;\n  \n  if (base == 0) {\n    result = (**(code **)*input_array)(input_array,input_number & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_decimal_to_base_08005ce8(input_array,input_number,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)input_number) {\n    result = convert_decimal_to_base_08005ce8(input_array,input_number,10);\n    return result;\n  }\n  result = execute_function_08005cb6(input_array,0x2d);\n  significance = convert_decimal_to_base_08005ce8(input_array,-input_number,10);\n  return significance + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "convert_to_base_08005d42",
                "param_1": "input_array",
                "param_2": "input_number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "significance"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "convert_to_base_08005d82",
            "code": "\nvoid convert_to_base_08005d82(void)\n\n{\n  convert_to_base_08005d82_08005d42();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "convert_to_base_08005d82"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "convert_to_base_or_call_function_08005d8a",
            "code": "\nvoid convertToBaseOrCallFunction_08005d8a(undefined4 *functionPtr,uint value1,uint value2,undefined4 functionPtr2)\n\n{\n  if (value2 != 0) {\n    convert_decimal_to_base_08005ce8(functionPtr,value1,value2 & 0xff);\n    return;\n  }\n  (**(code **)*functionPtr)(functionPtr,value1 & 0xff,0,*(code **)*functionPtr,functionPtr2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "convert_to_base_or_call_function_08005d8a",
                "param_1": "functionPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "functionPtr2"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "validate_and_process_parameters_08005da8",
            "code": "\nint validate_and_process_parameters_08005da8(undefined4 pointer_arg_1,undefined4 pointer_arg_2,undefined4 pointer_arg_3,uint uint_arg,byte byte_arg)\n\n{\n  int result;\n  undefined4 temp_var_1;\n  int temp_var_2;\n  byte loop_counter;\n  undefined8 floating_point_result;\n  undefined8 shift_rotate_result;\n  \n  result = is_valid_parameters_08000a2c(pointer_arg_3,uint_arg,pointer_arg_3,uint_arg);\n  if (result == 0) {\n    result = is_valid_parameters_08000a2c(pointer_arg_3,uint_arg & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = validate_and_return_080009f0(pointer_arg_3,uint_arg & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = process_param_08005c96(pointer_arg_1,&DAT_08007860);\n    }\n    else {\n      result = is_valid_08000a18(pointer_arg_3,uint_arg,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = is_null_terminated_080009dc(pointer_arg_3,uint_arg,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = is_null_terminated_080009dc(pointer_arg_3,uint_arg,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function_08005cb6(pointer_arg_1,0x2d);\n            uint_arg = uint_arg + 0x80000000;\n          }\n          floating_point_result = 0x3fe0000000000000;\n          for (loop_counter = 0; temp_var_1 = (undefined4)((ulonglong)floating_point_result >> 0x20), loop_counter < byte_arg;\n              loop_counter = loop_counter + 1) {\n            floating_point_result = calculate_floating_point_0800074c((int)floating_point_result,temp_var_1,0,0x40240000);\n          }\n          floating_point_result = calculate_sum_08000194(pointer_arg_3,uint_arg,(int)floating_point_result,temp_var_1);\n          temp_var_1 = calculate_result_08000aa8();\n          shift_rotate_result = shift_and_rotate_0800040c();\n          floating_point_result = reverse_binary_operation_08000190((int)floating_point_result,(int)((ulonglong)floating_point_result >> 0x20),(int)shift_rotate_result,\n                               (int)((ulonglong)shift_rotate_result >> 0x20));\n          temp_var_2 = convert_to_base_or_call_function_08005d8a(pointer_arg_1,temp_var_1,10);\n          result = result + temp_var_2;\n          if (byte_arg != 0) {\n            temp_var_2 = process_param_08005c96(pointer_arg_1,&DAT_08007868);\n            result = result + temp_var_2;\n          }\n          while (byte_arg != 0) {\n            floating_point_result = calculate_floating_point_080004f8((int)floating_point_result,(int)((ulonglong)floating_point_result >> 0x20),0,0x40240000);\n            temp_var_1 = calculate_parameter_value_08000a58();\n            temp_var_2 = convert_to_base_08005d82(pointer_arg_1,temp_var_1,10);\n            result = result + temp_var_2;\n            shift_rotate_result = bitwise_shift_operation_0800042c(temp_var_1);\n            floating_point_result = reverse_binary_operation_08000190((int)floating_point_result,(int)((ulonglong)floating_point_result >> 0x20),(int)shift_rotate_result,\n                                 (int)((ulonglong)shift_rotate_result >> 0x20));\n            byte_arg = byte_arg - 1;\n          }\n        }\n        else {\n          result = process_param_08005c96(pointer_arg_1,&DAT_08007864);\n        }\n      }\n      else {\n        result = process_param_08005c96(pointer_arg_1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = process_param_08005c96(pointer_arg_1,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "validate_and_process_parameters_08005da8",
                "param_1": "pointer_arg_1",
                "param_2": "pointer_arg_2",
                "param_3": "pointer_arg_3",
                "param_4": "uint_arg",
                "param_5": "byte_arg",
                "iVar1": "result",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_2",
                "bVar4": "loop_counter",
                "uVar5": "floating_point_result",
                "uVar6": "shift_rotate_result"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "validate_and_process_parameters_08005f2c",
            "code": "\nvoid validateAndProcessParameters_08005f2c(void)\n\n{\n  validateAndProcessParameters_08005f2cHelper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "validate_and_process_parameters_08005f2c",
                "validate_and_process_parameters_08005da8": "validateAndProcessParametersHelper"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "process_and_execute_08005f40",
            "code": "\nint process_and_execute_08005f40(undefined4 input_parameter)\n\n{\n  int parameter_validation_result;\n  int callback_execution_result;\n  \n  parameter_validation_result = validate_and_process_parameters_08005f2c();\n  callback_execution_result = execute_callback_08005cc0(input_parameter);\n  return callback_execution_result + parameter_validation_result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "process_and_execute_08005f40",
                "param_1": "input_parameter",
                "iVar1": "parameter_validation_result",
                "iVar2": "callback_execution_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_game_08005f5e",
            "code": "\nvoid initialize_game_08005f5e(void)\n\n{\n  update_data(3);\n  initialize_game_08005f5e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_game_08005f5e",
                "update_data_08002470": "update_data",
                "initialize_game_08001c32": "initialize_game"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "execute_data_processing_loop_08005f6c",
            "code": "\nvoid execute_data_processing_loop_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  initialize_and_execute_component();\n  do {\n    process_data();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "execute_data_processing_loop_08005f6c",
                "initialize_and_execute_08000bcc": "initialize_and_execute_component",
                "process_data_08000cd0": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar countSetBits_08005f8c(uint number)\n\n{\n  char bitsCount;\n  \n  bitsCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitsCount = bitsCount + '\\x01';\n  }\n  return bitsCount;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "number",
                "cVar1": "bitsCount"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_params_08005fc8",
            "code": "\nvoid initializeParams_08005fc8(int value1,int value2,undefined4 value3,undefined4 value4)\n\n{\n  if (value1 != 1) {\n    return;\n  }\n  if (value2 == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    shift_params_to_longlong_08006112(0,&LAB_08005fa0_1,&DAT_20000000,&DAT_200004b8,value4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_params_08005fc8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "process_data_080060d4",
            "code": "\nvoid processData_080060d4(int data)\n\n{\n  int bitCount;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  update_data_and_process_08007090();\n  bitCount = count_set_bits_08005f8c();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    processData_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "process_data_080060d4",
                "param_1": "data",
                "iVar1": "bitCount"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_and_process_data_080060e4",
            "code": "\nvoid checkAndProcessData_080060e4(void)\n\n{\n  int bitCount;\n  \n  bitCount = count_set_bits_08005f8c();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_and_process_data_080060e4",
                "iVar1": "bitCount",
                "process_data_080060d4": "processData"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "shift_params_to_longlong_08006112",
            "code": "\nvoid shift_params_to_longlong_08006112(undefined4 destination,undefined4 source)\n\n{\n  shift_left(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "shift_params_to_longlong_08006112",
                "param_1": "destination",
                "param_2": "source",
                "left_shift_param_to_longlong_08006158": "shift_left"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "assertion_failed_0800611c",
            "code": "\nvoid assertion_failed_0800611c(undefined4 assertion_message,undefined4 file_name,char *line_number,undefined4 function_name)\n\n{\n  undefined4 assertion_data;\n  char *suffix;\n  undefined8 result;\n  undefined4 param_4_copy;\n  \n  assertion_data = *(undefined4 *)(DAT_200000f8 + 0xc);\n  param_4_copy = function_name;\n  if (line_number == (char *)0x0) goto LAB_08006140;\n  suffix = \", function: \";\n  do {\n    process_and_decode_data_08006174(assertion_data,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_name,assertion_message,file_name\n                 ,suffix,line_number,param_4_copy);\n    result = process_and_update_data_08006ac0();\n    file_name = (undefined4)((ulonglong)result >> 0x20);\n    assertion_data = (undefined4)result;\nLAB_08006140:\n    line_number = \"\";\n    suffix = line_number;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "assertion_failed_0800611c",
                "param_1": "assertion_message",
                "param_2": "file_name",
                "param_3": "line_number",
                "param_4": "function_name",
                "uVar1": "assertion_data",
                "pcVar2": "suffix",
                "uVar3": "result",
                "uVar4": "param_4_copy"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "left_shift_param_to_longlong_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong left_shift_param_to_longlong_08006158(undefined4 param_pointer,uint unsigned_integer)\n\n{\n  return (unsigned_long_long)unsigned_integer << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "left_shift_param_to_longlong_08006158",
                "param_1": "param_pointer",
                "param_2": "unsigned_integer",
                "ulonglong": "unsigned_long_long"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "process_and_decode_data_08006174",
            "code": "\nvoid processAndDecodeData_08006174(undefined4 data1,undefined4 data2,undefined4 decodedData1,undefined4 decodedData2)\n\n{\n  undefined4 decodedData1Copy;\n  undefined4 decodedData2Copy;\n  \n  decodedData1Copy = decodedData1;\n  decodedData2Copy = decodedData2;\n  process_and_decode_data_08006394(DAT_200000f8,data1,data2,&decodedData1Copy,data1,&decodedData1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "process_and_decode_data_08006174",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "decodedData1",
                "param_4": "decodedData2",
                "uStack_8": "decodedData1Copy",
                "uStack_4": "decodedData2Copy"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_functions_08006198",
            "code": "\nvoid executeFunctions_08006198(void)\n\n{\n  int loopCounter;\n  \n  for (loopCounter = 0; loopCounter != 0; loopCounter = loopCounter + 1) {\n    (*(code *)(&DAT_08007944)[loopCounter])();\n  }\n  FUNC_08007328();\n  for (loopCounter = 0; loopCounter != 10; loopCounter = loopCounter + 1) {\n    (*(code *)(&DAT_08007944)[loopCounter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "loopCounter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fillMemory_080061e0(undefined *memory,undefined value,int size)\n\n{\n  undefined *endPointer;\n  \n  endPointer = memory + size;\n  for (; memory != endPointer; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "update_data_structure_080061f0",
            "code": "\nvoid updateDataStructure_080061f0(undefined4 *resultPtr,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **tempVar;\n  int **currentElement;\n  int **nextElement;\n  int *ptrOffset;\n  int **prevElement;\n  int **dataStructure;\n  \n  if (size == 0) {\n    return;\n  }\n  dataStructure = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    dataStructure = (int **)((int)dataStructure + *(int *)(size + -4));\n  }\n  FUNC_08006eac();\n  nextElement = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    dataStructure[1] = (int *)0x0;\n    currentElement = tempVar;\n    DAT_200005f8 = dataStructure;\n  }\n  else {\n    nextElement = DAT_200005f8;\n    if (dataStructure < DAT_200005f8) {\n      currentElement = (int **)*dataStructure;\n      nextElement = (int **)((int)dataStructure + (int)currentElement);\n      if (DAT_200005f8 == nextElement) {\n        ptrOffset = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        nextElement = (int **)((int)ptrOffset + (int)currentElement);\n        *dataStructure = (int *)nextElement;\n      }\n      dataStructure[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = dataStructure;\n    }\n    else {\n      do {\n        prevElement = nextElement;\n        nextElement = (int **)prevElement[1];\n        if (nextElement == (int **)0x0) break;\n      } while (nextElement <= dataStructure);\n      currentElement = (int **)*prevElement;\n      if ((int **)((int)prevElement + (int)currentElement) == dataStructure) {\n        currentElement = (int **)((int)currentElement + (int)*dataStructure);\n        *prevElement = (int *)currentElement;\n        if (nextElement == (int **)((int)prevElement + (int)currentElement)) {\n          ptrOffset = *nextElement;\n          nextElement = (int **)nextElement[1];\n          currentElement = (int **)((int)currentElement + (int)ptrOffset);\n          *prevElement = (int *)currentElement;\n          prevElement[1] = (int *)nextElement;\n        }\n      }\n      else if (dataStructure < (int **)((int)prevElement + (int)currentElement)) {\n        *resultPtr = 0xc;\n      }\n      else {\n        currentElement = (int **)((int)dataStructure + (int)*dataStructure);\n        if (nextElement == currentElement) {\n          ptrOffset = *nextElement;\n          nextElement = (int **)nextElement[1];\n          currentElement = (int **)((int)ptrOffset + (int)*dataStructure);\n          *dataStructure = (int *)currentElement;\n        }\n        dataStructure[1] = (int *)nextElement;\n        prevElement[1] = (int *)dataStructure;\n      }\n    }\n  }\n  FUNC_08006eae(resultPtr,currentElement,nextElement,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "update_data_structure_080061f0",
                "param_1": "resultPtr",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "tempVar",
                "ppiVar1": "currentElement",
                "ppiVar2": "nextElement",
                "piVar3": "ptrOffset",
                "ppiVar4": "prevElement",
                "ppiVar5": "dataStructure"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_memory_08006288",
            "code": "\nuint allocate_memory_08006288(undefined4 *result,uint size)\n\n{\n  uint *current;\n  int offset;\n  uint *previous;\n  uint difference;\n  uint *previous_prev;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current = DAT_200005f8;\n    previous_prev = DAT_200005f8;\n    while (previous = current, previous != (uint *)0x0) {\n      difference = *previous - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_prev == previous) {\n            current = (uint *)previous_prev[1];\n            DAT_200005f8 = current;\n          }\n          else {\n            current = (uint *)previous[1];\n          }\n          if (previous_prev != previous) {\n            previous_prev[1] = (uint)current;\n            previous_prev = previous;\n          }\n        }\n        else {\n          *previous = difference;\n          *(uint *)((int)previous + difference) = allocated_size;\n          previous_prev = (uint *)((int)previous + difference);\n        }\n        goto LAB_080062ec;\n      }\n      previous_prev = previous;\n      current = (uint *)previous[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = initialize_memory_08006920(result);\n    }\n    current = (uint *)initialize_memory_08006920(result,allocated_size);\n    if ((current != (uint *)0xffffffff) &&\n       ((previous_prev = (uint *)((int)current + 3U & 0xfffffffc), current == previous_prev ||\n        (offset = initialize_memory_08006920(result,(int)previous_prev - (int)current), offset != -1)))) {\n      *previous_prev = allocated_size;\nLAB_080062ec:\n      FUNC_08006eae(result);\n      allocated_size = (int)previous_prev + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(previous_prev + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_prev + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08006eae(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current",
                "iVar2": "offset",
                "puVar3": "previous",
                "uVar4": "difference",
                "puVar5": "previous_prev",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_input_08006344",
            "code": "\nuint process_input_08006344(int ptr_data,byte input_byte,byte **ptr_arr)\n\n{\n  int data_offset;\n  byte *data_ptr;\n  byte *offset_ptr;\n  uint result;\n  \n  data_ptr = ptr_arr[2] + -1;\n  ptr_arr[2] = data_ptr;\n  if ((-1 < (int)data_ptr) ||\n     (((int)ptr_arr[6] <= (int)data_ptr && (data_ptr = (byte *)(uint)input_byte, data_ptr != (byte *)0xa))))\n  {\n    data_ptr = *ptr_arr;\n    *ptr_arr = data_ptr + 1;\n    *data_ptr = input_byte;\n    return (uint)input_byte;\n  }\n  if ((ptr_data != 0) && (*(int *)(ptr_data + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (ptr_arr == (byte **)&DAT_08007904) {\n    ptr_arr = *(byte ***)(ptr_data + 4);\n  }\n  else if (ptr_arr == (byte **)&DAT_08007924) {\n    ptr_arr = *(byte ***)(ptr_data + 8);\n  }\n  else if (ptr_arr == (byte **)&DAT_080078e4) {\n    ptr_arr = *(byte ***)(ptr_data + 0xc);\n  }\n  ptr_arr[2] = ptr_arr[6];\n  offset_ptr = (byte *)(uint)*(ushort *)(ptr_arr + 3);\n  data_offset = (int)offset_ptr << 0x1c;\n  if (((data_offset < 0) && (offset_ptr = ptr_arr[4], offset_ptr != (byte *)0x0)) ||\n     (data_offset = process_data_080069e4(ptr_data,ptr_arr,data_offset,offset_ptr,data_ptr), data_offset == 0)) {\n    result = (uint)input_byte;\n    data_offset = (int)*ptr_arr - (int)ptr_arr[4];\n    if ((data_offset < (int)ptr_arr[5]) || (data_offset = process_data_08006be0(ptr_data,ptr_arr), data_offset == 0)) {\n      ptr_arr[2] = ptr_arr[2] + -1;\n      data_ptr = *ptr_arr;\n      *ptr_arr = data_ptr + 1;\n      *data_ptr = input_byte;\n      if ((byte *)(data_offset + 1) != ptr_arr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(ptr_arr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      data_offset = process_data_08006be0(ptr_data,ptr_arr);\n      if (data_offset == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "ptr_data",
                "param_2": "input_byte",
                "param_3": "ptr_arr",
                "iVar1": "data_offset",
                "pbVar2": "data_ptr",
                "pbVar3": "offset_ptr",
                "uVar4": "result"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "process_input_08006370",
            "code": "\nint processInput_08006370(undefined4 arg1,undefined4 arg2,undefined *data,int length)\n\n{\n  int result;\n  undefined *endPointer;\n  int currentLength;\n  \n  endPointer = data + length;\n  currentLength = length;\n  do {\n    if (data == endPointer) {\n      return 0;\n    }\n    result = process_input_08006344(arg1,*data,arg2,length,currentLength);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "process_input_08006370",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPointer",
                "iVar3": "currentLength"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "process_and_decode_data_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint process_and_decode_data_08006394(int data_pointer,undefined4 *option_pointer,byte *string_pointer,int *count_pointer)\n\n{\n  int result;\n  int *temp_pointer;\n  bool found_flag;\n  byte *byte_pointer1;\n  byte *byte_pointer2;\n  int temp_variable;\n  int temp_variable2;\n  int *count_pointer_local;\n  uint options;\n  int integer_value1;\n  undefined4 undefined_value;\n  int integer_value2;\n  int total_bytes;\n  byte character;\n  undefined undefined_value2;\n  undefined undefined_value3;\n  undefined flag;\n  undefined4 undefined_value4;\n  \n  count_pointer_local = count_pointer;\n  if ((data_pointer != 0) && (*(int *)(data_pointer + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (option_pointer == &DAT_08007904) {\n    option_pointer = *(undefined4 **)(data_pointer + 4);\n  }\n  else if (option_pointer == (undefined4 *)&DAT_08007924) {\n    option_pointer = *(undefined4 **)(data_pointer + 8);\n  }\n  else if (option_pointer == (undefined4 *)&DAT_080078e4) {\n    option_pointer = *(undefined4 **)(data_pointer + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(option_pointer + 3) << 0x1c)) || (option_pointer[4] == 0)) &&\n     (temp_variable2 = process_data_080069e4(data_pointer,option_pointer), temp_variable2 != 0)) {\n    return -1;\n  }\n  total_bytes = 0;\n  undefined_value2 = 0x20;\n  undefined_value3 = 0x30;\n  byte_pointer1 = string_pointer;\nLAB_080063d6:\n  byte_pointer2 = byte_pointer1;\n  if (*byte_pointer2 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  byte_pointer1 = byte_pointer2 + 1;\n  if (*byte_pointer2 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  temp_variable2 = (int)byte_pointer2 - (int)string_pointer;\n  if (temp_variable2 != 0) {\n    result = process_input_08006370(data_pointer,option_pointer,string_pointer,temp_variable2);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(option_pointer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_bytes;\n    }\n    total_bytes = total_bytes + temp_variable2;\n  }\n  if (*byte_pointer2 == 0) goto LAB_08006580;\n  options = 0;\n  integer_value2 = 0;\n  integer_value1 = -1;\n  undefined_value = 0;\n  flag = 0;\n  undefined_value4 = 0;\n  byte_pointer1 = byte_pointer2 + 1;\n  while( true ) {\n    temp_variable2 = find_character_08006e90(\"#-0+ \",*byte_pointer1);\n    string_pointer = byte_pointer1 + 1;\n    if (temp_variable2 == 0) break;\n    options = 1 << (temp_variable2 + 0xf7ff8750U & 0xff) | options;\n    byte_pointer1 = string_pointer;\n  }\n  if ((int)(options << 0x1b) < 0) {\n    flag = 0x20;\n  }\n  if ((int)(options << 0x1c) < 0) {\n    flag = 0x2b;\n  }\n  if (*byte_pointer1 == 0x2a) {\n    temp_pointer = count_pointer_local + 1;\n    temp_variable2 = *count_pointer_local;\n    count_pointer_local = temp_pointer;\n    if (temp_variable2 < 0) {\n      integer_value2 = -temp_variable2;\n      options = options | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    found_flag = false;\n    temp_variable2 = integer_value2;\n    string_pointer = byte_pointer1;\n    while( true ) {\n      if (9 < *string_pointer - 0x30) break;\n      temp_variable2 = temp_variable2 * 10 + (*string_pointer - 0x30);\n      found_flag = true;\n      string_pointer = string_pointer + 1;\n    }\n    if (!found_flag) goto LAB_080064be;\n  }\n  integer_value2 = temp_variable2;\nLAB_080064be:\n  if (*string_pointer == 0x2e) {\n    if (string_pointer[1] == 0x2a) {\n      string_pointer = string_pointer + 2;\n      temp_pointer = count_pointer_local + 1;\n      integer_value1 = *count_pointer_local;\n      count_pointer_local = temp_pointer;\n      if (integer_value1 < 0) {\n        integer_value1 = -1;\n      }\n    }\n    else {\n      found_flag = false;\n      temp_variable2 = 0;\n      integer_value1 = 0;\n      while( true ) {\n        string_pointer = string_pointer + 1;\n        if (9 < *string_pointer - 0x30) break;\n        temp_variable2 = temp_variable2 * 10 + (*string_pointer - 0x30);\n        found_flag = true;\n      }\n      if (found_flag) {\n        integer_value1 = temp_variable2;\n      }\n    }\n  }\n  temp_variable2 = find_character_08006e90(&DAT_080078b6,*string_pointer,3);\n  if (temp_variable2 != 0) {\n    string_pointer = string_pointer + 1;\n    options = options | 0x40 << (temp_variable2 + 0xf7ff874aU & 0xff);\n  }\n  character = *string_pointer;\n  string_pointer = string_pointer + 1;\n  temp_variable2 = find_character_08006e90(\"efgEFG\",character,6);\n  if (temp_variable2 == 0) {\n    temp_variable = decode_and_process_data_080066b0(data_pointer,&options,option_pointer,0x8006371,&count_pointer_local);\n    if (temp_variable == -1) goto LAB_08006580;\n  }\n  else {\n    count_pointer_local = (int *)(((int)count_pointer_local + 7U & 0xfffffff8) + 8);\n  }\n  total_bytes = total_bytes + temp_variable;\n  byte_pointer1 = string_pointer;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "process_and_decode_data_08006394",
                "param_1": "data_pointer",
                "param_2": "option_pointer",
                "param_3": "string_pointer",
                "param_4": "count_pointer",
                "iVar1": "result",
                "piVar2": "temp_pointer",
                "bVar3": "found_flag",
                "pbVar4": "byte_pointer1",
                "pbVar5": "byte_pointer2",
                "unaff_r9": "temp_variable",
                "iVar6": "temp_variable2",
                "local_8c": "count_pointer_local",
                "local_88": "options",
                "local_84": "integer_value1",
                "local_80": "undefined_value",
                "local_7c": "integer_value2",
                "local_74": "total_bytes",
                "local_70": "character",
                "local_6f": "undefined_value2",
                "local_6e": "undefined_value3",
                "local_45": "flag",
                "local_30": "undefined_value4"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "decode_and_count_080065c0",
            "code": "\nundefined4\ndecode_and_count_080065c0(undefined4 input_value,uint *parameters1,uint *parameters2,undefined4 input_code,code *function_ptr)\n\n{\n  int i;\n  int j;\n  uint max_value;\n  uint added_value;\n  bool is_positive;\n  \n  max_value = parameters1[4];\n  if ((int)parameters1[4] < (int)parameters1[2]) {\n    max_value = parameters1[2];\n  }\n  *parameters2 = max_value;\n  if (*(char *)((int)parameters1 + 0x43) != '\\0') {\n    *parameters2 = max_value + 1;\n  }\n  if ((int)(*parameters1 << 0x1a) < 0) {\n    *parameters2 = *parameters2 + 2;\n  }\n  if ((*parameters1 & 6) == 0) {\n    for (i = 0; i < (int)(parameters1[3] - *parameters2); i = i + 1) {\n      j = (*function_ptr)(input_value,input_code,(int)parameters1 + 0x19,1);\n      if (j == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)parameters1 + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  added_value = max_value;\n  if ((int)(*parameters1 << 0x1a) < 0) {\n    *(undefined *)((int)parameters1 + max_value + 0x43) = 0x30;\n    added_value = max_value + 2;\n    *(undefined *)((int)parameters1 + max_value + 0x44) = *(undefined *)((int)parameters1 + 0x45);\n  }\n  i = (*function_ptr)(input_value,input_code,(int)parameters1 + 0x43,added_value);\n  if (i != -1) {\n    max_value = parameters1[3];\n    is_positive = (*parameters1 & 6) != 4;\n    if (is_positive) {\n      max_value = 0;\n    }\n    added_value = 0;\n    if (!is_positive) {\n      max_value = max_value - *parameters2;\n    }\n    if (!is_positive) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)parameters1[4] < (int)parameters1[2]) {\n      max_value = max_value + (parameters1[2] - parameters1[4]);\n    }\n    while( true ) {\n      if (max_value == added_value) {\n        return 0;\n      }\n      i = (*function_ptr)(input_value,input_code,(int)parameters1 + 0x1a,1);\n      if (i == -1) break;\n      added_value = added_value + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "decode_and_count_080065c0",
                "param_1": "input_value",
                "param_2": "parameters1",
                "param_3": "parameters2",
                "param_4": "input_code",
                "param_5": "function_ptr",
                "iVar1": "i",
                "iVar2": "j",
                "uVar3": "max_value",
                "uVar4": "added_value",
                "bVar5": "is_positive"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "decode_and_process_data_080066b0",
            "code": "\nuint decode_and_process_data_080066b0(undefined4 input,uint *data,undefined4 param,code *callback,uint **counter)\n\n{\n  byte byteVal;\n  int index;\n  uint *ptr;\n  int result;\n  char *charSet;\n  uint mask;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint copy;\n  char *charPtr;\n  char *output;\n  uint length [2];\n  \n  byteVal = *(byte *)(data + 6);\n  output = (char *)((int)data + 0x43);\n  if (byteVal != 0x6e) {\n    if (byteVal < 0x6f) {\n      if (byteVal != 99) {\n        if (byteVal < 100) {\n          if (byteVal == 0) goto LAB_0800686a;\n          if (byteVal != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          charSet = \"0123456789ABCDEF\";\nLAB_080067fa:\n          mask = *data;\n          ptr = *counter;\n          *counter = ptr + 1;\n          if (((mask & 0x80) == 0) && ((int)(mask << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(mask << 0x1f) < 0) {\n            *data = mask | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          mask = 0x10;\nLAB_08006790:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byteVal != 100) && (byteVal != 0x69)) goto LAB_080066e0;\n          value = *data;\n          ptr = *counter;\n          if ((value & 0x80) == 0) {\n            *counter = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08006700;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *counter = ptr + 1;\nLAB_08006700:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          charSet = \"0123456789ABCDEF\";\n          mask = 10;\n        }\n        copy = data[1];\n        data[2] = copy;\n        charPtr = output;\n        if ((int)copy < 0) {\n          if (value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)data + 0x42) = *charSet;\n          charPtr = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (copy != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              copy = value / mask;\n              charPtr = charPtr + -1;\n              *charPtr = charSet[value - mask * copy];\n              value = copy;\n            } while (copy != 0);\n          }\n        }\n        if (((mask == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          charPtr[-1] = '0';\n          charPtr = charPtr + -1;\n        }\n        data[4] = (int)output - (int)charPtr;\n        output = charPtr;\n        goto LAB_080067d6;\n      }\n      ptr = *counter;\n      *counter = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08006740:\n      output = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byteVal != 0x73) {\n        if (byteVal < 0x74) {\n          if (byteVal == 0x6f) {\nLAB_08006766:\n            value = *data;\n            ptr = *counter;\n            if ((value & 0x80) == 0) {\n              *counter = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08006774;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *counter = ptr + 1;\nLAB_08006774:\n              value = *ptr;\n            }\n            if (byteVal == 0x6f) {\n              mask = 8;\n            }\n            else {\n              mask = 10;\n            }\n            charSet = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byteVal == 0x70) {\n            *data = *data | 0x20;\nLAB_08006726:\n            charSet = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byteVal == 0x75) goto LAB_08006766;\n          if (byteVal == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)data + 0x42) = byteVal;\n        goto LAB_08006740;\n      }\n      ppcVar8 = (char **)*counter;\n      *counter = (uint *)(ppcVar8 + 1);\n      output = *ppcVar8;\n      index = find_character_08006e90(output,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)output;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  value = *data;\n  ppuVar7 = (uint **)*counter;\n  mask = data[5];\n  if ((value & 0x80) == 0) {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptr = (short)mask;\n  }\n  else {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_08006856:\n    *ptr = mask;\n  }\nLAB_0800686a:\n  data[4] = 0;\nLAB_080067d6:\n  index = decode_and_count_080065c0(input,data,length,param,callback);\n  if ((index == -1) || (index = (*callback)(input,param,output,data[4]), index == -1)) {\nLAB_080067ea:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - length[0]); index = index + 1) {\n        result = (*callback)(input,param,(int)data + 0x19,1);\n        if (result == -1) goto LAB_080067ea;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)length[0]) {\n      value = length[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "decode_and_process_data_080066b0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "param",
                "param_4": "callback",
                "param_5": "counter",
                "bVar1": "byteVal",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "charSet",
                "uVar6": "mask",
                "uVar9": "value",
                "uVar10": "copy",
                "pcVar11": "charPtr",
                "pcVar12": "output",
                "local_24": "length"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "decode_and_process_data_080068f0",
            "code": "\nvoid decode_and_process_data_080068f0(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_ptr;\n  undefined4 input_var;\n  undefined4 param_c;\n  undefined4 param_8;\n  undefined4 param_4;\n  \n  data_ptr = DAT_200000f8;\n  input_var = input_param;\n  param_c = param_2;\n  param_8 = param_3;\n  param_4 = param_4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_08006cb4(DAT_200000f8);\n  }\n  process_and_decode_data_08006394(data_ptr,*(undefined4 *)(data_ptr + 8),input_param,&param_c,input_var,&param_c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "decode_and_process_data_080068f0",
                "param_1": "input_param",
                "iVar1": "data_ptr",
                "uVar2": "input_var",
                "uStack_c": "param_c",
                "uStack_8": "param_8",
                "uStack_4": "param_4"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "initialize_memory_08006920",
            "code": "\nvoid initializeMemory_08006920(int *outputPtr,undefined4 size)\n\n{\n  int allocatedMemory;\n  \n  DAT_200006a4 = 0;\n  allocatedMemory = allocate_memory_080056d8(size);\n  if ((allocatedMemory == -1) && (DAT_200006a4 != 0)) {\n    *outputPtr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "initialize_memory_08006920",
                "param_1": "outputPtr",
                "param_2": "size",
                "iVar1": "allocatedMemory"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint process_data_080069e4(undefined4 *output_param,undefined4 *input_param)\n\n{\n  int data_ptr;\n  uint result;\n  ushort flags;\n  \n  data_ptr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data_08006cb4(DAT_200000f8);\n  }\n  if (input_param == &DAT_08007904) {\n    input_param = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_08007924) {\n    input_param = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_080078e4) {\n    input_param = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_param = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          update_data_structure_080061f0(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_program_08006e10(output_param,input_param);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input_param[5];\n    }\n    input_param[2] = result;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] == 0) {\n    flags = *(ushort *)(input_param + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input_param + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output_param",
                "param_2": "input_param",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_data_structure_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_program_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "process_and_update_data_08006ac0",
            "code": "\nvoid process_and_update_data_08006ac0(void)\n\n{\n  uint *data_pointer;\n  int offset_value;\n  int *data_values;\n  int *data_structure;\n  uint ushort_value;\n  ushort expanded_ushort_value;\n  int temp_offset_value;\n  code *function_pointer;\n  int remaining_value;\n  uint uVar10;\n  code *jump_table;\n  bool is_condition_true;\n  undefined8 infinite_loop_result;\n  \n  initialize_data(6);\n  jump_table = (code *)0x8006acf;\n  infinite_loop_result = run_infinite_loop(1);\n  data_values = (int *)((ulonglong)infinite_loop_result >> 0x20);\n  data_pointer = (uint *)infinite_loop_result;\n  expanded_ushort_value = *(ushort *)(data_values + 3);\n  ushort_value = (uint)expanded_ushort_value;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    offset_value = data_values[4];\n    if (offset_value != 0) {\n      temp_offset_value = ushort_value << 0x1e;\n      is_condition_true = temp_offset_value != 0;\n      if (is_condition_true) {\n        temp_offset_value = 0;\n      }\n      remaining_value = *data_values;\n      if (!is_condition_true) {\n        temp_offset_value = data_values[5];\n      }\n      *data_values = offset_value;\n      data_values[2] = temp_offset_value;\n      for (remaining_value = remaining_value - offset_value; 0 < remaining_value; remaining_value = remaining_value - temp_offset_value) {\n        temp_offset_value = (*(code *)data_values[10])(data_pointer,data_values[8],offset_value,remaining_value);\n        if (temp_offset_value < 1) {\n          expanded_ushort_value = *(ushort *)(data_values + 3);\n          goto LAB_08006bc6;\n        }\n        offset_value = offset_value + temp_offset_value;\n      }\n    }\n  }\n  else if (((0 < data_values[1]) || (0 < data_values[0x10])) &&\n          (function_pointer = (code *)data_values[0xb], function_pointer != (code *)0x0)) {\n    uVar10 = *data_pointer;\n    *data_pointer = 0;\n    if ((expanded_ushort_value & 0x1000) == 0) {\n      offset_value = (*function_pointer)(data_pointer,data_values[8],ushort_value & 0x1000,1);\n      if ((offset_value == -1) && (ushort_value = *data_pointer, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(data_values + 3) = *(ushort *)(data_values + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *data_pointer = uVar10;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      offset_value = data_values[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_values + 3) << 0x1d) < 0) &&\n       (offset_value = offset_value - data_values[1], data_values[0xd] != 0)) {\n      offset_value = offset_value - data_values[0x10];\n    }\n    offset_value = (*(code *)data_values[0xb])(data_pointer,data_values[8],offset_value,0);\n    expanded_ushort_value = *(ushort *)(data_values + 3);\n    if ((offset_value == -1) &&\n       ((0x1d < *data_pointer || (-1 < (int)((0x20400001U >> (*data_pointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(data_values + 3) = expanded_ushort_value | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    data_values[1] = 0;\n    *data_values = data_values[4];\n    if (((int)((uint)expanded_ushort_value << 0x13) < 0) && ((offset_value != -1 || (*data_pointer == 0)))) {\n      data_values[0x15] = offset_value;\n    }\n    data_structure = (int *)data_values[0xd];\n    *data_pointer = uVar10;\n    if (data_structure != (int *)0x0) {\n      if (data_structure != data_values + 0x11) {\n        update_data_structure(data_pointer);\n      }\n      data_values[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "process_and_update_data_08006ac0",
                "piVar3": "data_values",
                "puVar1": "data_pointer",
                "iVar2": "offset_value",
                "piVar4": "data_structure",
                "uVar5": "ushort_value",
                "uVar6": "expanded_ushort_value",
                "iVar7": "temp_offset_value",
                "pcVar8": "function_pointer",
                "iVar9": "remaining_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "is_condition_true",
                "uVar12": "infinite_loop_result",
                "process_data_08006f00": "initialize_data",
                "infinite_loop_0800573c": "run_infinite_loop",
                "update_data_structure_080061f0": "update_data_structure"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *dataPointer,int *infoArray)\n\n{\n  undefined4 returnValue;\n  int tempVar1;\n  int *tempVar2;\n  uint tempVar3;\n  ushort tempVar4;\n  int tempVar5;\n  undefined4 unaffVar1;\n  undefined4 unaffVar2;\n  code *funcPointer;\n  int tempVar6;\n  uint tempVar7;\n  code *jumpTable;\n  bool condition;\n  \n  if (infoArray[4] != 0) {\n    if ((dataPointer != (uint *)0x0) && (dataPointer[6] == 0)) {\n      initialize_data_08006cb4();\n    }\n    if (infoArray == &DAT_08007904) {\n      infoArray = (int *)dataPointer[1];\n    }\n    else if (infoArray == (int *)&DAT_08007924) {\n      infoArray = (int *)dataPointer[2];\n    }\n    else if (infoArray == (int *)&DAT_080078e4) {\n      infoArray = (int *)dataPointer[3];\n    }\n    if (*(short *)(infoArray + 3) != 0) {\n      tempVar4 = *(ushort *)(infoArray + 3);\n      tempVar3 = (uint)tempVar4;\n      if ((int)(tempVar3 << 0x1c) < 0) {\n        tempVar1 = infoArray[4];\n        if (tempVar1 != 0) {\n          tempVar5 = tempVar3 << 0x1e;\n          condition = tempVar5 != 0;\n          if (condition) {\n            tempVar5 = 0;\n          }\n          tempVar6 = *infoArray;\n          if (!condition) {\n            tempVar5 = infoArray[5];\n          }\n          *infoArray = tempVar1;\n          infoArray[2] = tempVar5;\n          for (tempVar6 = tempVar6 - tempVar1; 0 < tempVar6; tempVar6 = tempVar6 - tempVar5) {\n            tempVar5 = (*(code *)infoArray[10])(dataPointer,infoArray[8],tempVar1,tempVar6,unaffVar1,unaffVar2);\n            if (tempVar5 < 1) {\n              tempVar4 = *(ushort *)(infoArray + 3);\n              goto LAB_08006bc6;\n            }\n            tempVar1 = tempVar1 + tempVar5;\n          }\n        }\n      }\n      else if (((0 < infoArray[1]) || (0 < infoArray[0x10])) &&\n              (funcPointer = (code *)infoArray[0xb], funcPointer != (code *)0x0)) {\n        tempVar7 = *dataPointer;\n        *dataPointer = 0;\n        if ((tempVar4 & 0x1000) == 0) {\n          tempVar1 = (*funcPointer)(dataPointer,infoArray[8],tempVar3 & 0x1000,1);\n          if ((tempVar1 == -1) && (tempVar3 = *dataPointer, tempVar3 != 0)) {\n            if ((tempVar3 != 0x1d) && (tempVar3 != 0x16)) {\n              *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataPointer = tempVar7;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          tempVar1 = infoArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoArray + 3) << 0x1d) < 0) &&\n           (tempVar1 = tempVar1 - infoArray[1], infoArray[0xd] != 0)) {\n          tempVar1 = tempVar1 - infoArray[0x10];\n        }\n        tempVar1 = (*(code *)infoArray[0xb])(dataPointer,infoArray[8],tempVar1,0);\n        tempVar4 = *(ushort *)(infoArray + 3);\n        if ((tempVar1 == -1) &&\n           ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(infoArray + 3) = tempVar4 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        infoArray[1] = 0;\n        *infoArray = infoArray[4];\n        if (((int)((uint)tempVar4 << 0x13) < 0) && ((tempVar1 != -1 || (*dataPointer == 0)))) {\n          infoArray[0x15] = tempVar1;\n        }\n        tempVar2 = (int *)infoArray[0xd];\n        *dataPointer = tempVar7;\n        if (tempVar2 != (int *)0x0) {\n          if (tempVar2 != infoArray + 0x11) {\n            update_data_structure_080061f0(dataPointer);\n          }\n          infoArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "dataPointer",
                "param_2": "infoArray",
                "uVar1": "returnValue",
                "iVar2": "tempVar1",
                "piVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "iVar6": "tempVar5",
                "unaff_r4": "unaffVar1",
                "unaff_r5": "unaffVar2",
                "pcVar7": "funcPointer",
                "iVar8": "tempVar6",
                "uVar9": "tempVar7",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar10": "condition"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_data_structure_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_memory_08006c40",
            "code": "\nvoid initializeMemory_08006c40(undefined4 *memoryArray,undefined2 value1,undefined2 value2)\n\n{\n  *memoryArray = 0;\n  memoryArray[1] = 0;\n  memoryArray[2] = 0;\n  *(undefined2 *)(memoryArray + 3) = value1;\n  memoryArray[25] = 0;\n  *(undefined2 *)((int)memoryArray + 0xe) = value2;\n  memoryArray[4] = 0;\n  memoryArray[5] = 0;\n  memoryArray[6] = 0;\n  fill_memory_080061e0(memoryArray + 0x17,0,8);\n  memoryArray[8] = memoryArray;\n  memoryArray[9] = 0x8006f39;\n  memoryArray[10] = 0x8006f5b;\n  memoryArray[11] = 0x8006f93;\n  memoryArray[12] = &LAB_08006fb6_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_memory_08006c40",
                "param_1": "memoryArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "memoryArray[1]",
                "param_1[2]": "memoryArray[2]",
                "param_1[0x19]": "memoryArray[25]",
                "param_1[4]": "memoryArray[4]",
                "param_1[5]": "memoryArray[5]",
                "param_1[6]": "memoryArray[6]",
                "param_1[8]": "memoryArray[8]",
                "param_1[9]": "memoryArray[9]",
                "param_1[10]": "memoryArray[10]",
                "param_1[0xb]": "memoryArray[11]",
                "param_1[0xc]": "memoryArray[12]"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_and_fill_memory_08006c88",
            "code": "\nundefined4 * allocate_and_fill_memory_08006c88(undefined4 initial_data,int num_elements)\n\n{\n  undefined4 *new_memory;\n  int memory_size;\n  \n  memory_size = (num_elements + -1) * 0x68;\n  new_memory = (undefined4 *)allocate_memory(initial_data,memory_size + 0x74);\n  if (new_memory != (undefined4 *)0x0) {\n    *new_memory = 0;\n    new_memory[1] = num_elements;\n    new_memory[2] = new_memory + 3;\n    fill_memory(new_memory + 3,0,memory_size + 0x68);\n  }\n  return new_memory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_and_fill_memory_08006c88",
                "param_1": "initial_data",
                "param_2": "num_elements",
                "puVar1": "new_memory",
                "iVar2": "memory_size",
                "allocate_memory_08006288": "allocate_memory",
                "fill_memory_080061e0": "fill_memory"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_08006cb4",
            "code": "\nvoid initializeData_08006cb4(undefined4 *data)\n\n{\n  undefined4 temp;\n  undefined4 *pointer;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    pointer = &DAT_200000fc;\n    data[10] = &LAB_08006c34_1;\n    if (data == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000fc) {\n      data[6] = pointer;\n    }\n    temp = initializePointer();\n    data[1] = temp;\n    temp = initializePointer(data);\n    data[2] = temp;\n    temp = initializePointer(data);\n    data[3] = temp;\n    initializeMemory(data[1],4,0);\n    initializeMemory(data[2],9,1);\n    initializeMemory(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data",
                "uVar1": "temp",
                "puVar2": "pointer",
                "find_and_initialize_pointer_08006d14": "initializePointer",
                "initialize_memory_08006c40": "initializeMemory"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "find_and_initialize_pointer_08006d14",
            "code": "\nint * findAndInitializePointer_08006d14(undefined4 *output_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *current_ptr;\n  int *nested_ptr;\n  int **pointer_ptr_ptr;\n  \n  if (DAT_20000114 == 0) {\n    initialize_data_08006cb4(&DAT_200000fc);\n  }\n  pointer_ptr_ptr = (int **)&DAT_20000144;\n  do {\n    nested_ptr = pointer_ptr_ptr[2];\n    current_ptr = pointer_ptr_ptr[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short *)(nested_ptr + 3) == 0) {\n        *(undefined2 *)((int)nested_ptr + 0xe) = 0xffff;\n        nested_ptr[0x19] = 0;\n        *(undefined2 *)(nested_ptr + 3) = 1;\n        *nested_ptr = 0;\n        nested_ptr[2] = 0;\n        nested_ptr[1] = 0;\n        nested_ptr[4] = 0;\n        nested_ptr[5] = 0;\n        nested_ptr[6] = 0;\n        fill_memory_080061e0(nested_ptr + 0x17,0,8,1,param_4);\n        nested_ptr[0xd] = 0;\n        nested_ptr[0xe] = 0;\n        nested_ptr[0x12] = 0;\n        nested_ptr[0x13] = 0;\n        return nested_ptr;\n      }\n      nested_ptr = nested_ptr + 0x1a;\n    }\n    if (*pointer_ptr_ptr == (int *)0x0) {\n      current_ptr = (int *)allocate_and_fill_memory_08006c88(output_ptr,4);\n      *pointer_ptr_ptr = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *output_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    pointer_ptr_ptr = (int **)*pointer_ptr_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "find_and_initialize_pointer_08006d14",
                "param_1": "output_ptr",
                "piVar1": "current_ptr",
                "piVar2": "nested_ptr",
                "ppiVar3": "pointer_ptr_ptr"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_fill_memory_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "calculate_permission_08006dc8",
            "code": "\nundefined4 calculatePermission_08006dc8(undefined4 input1,int input2,undefined4 *outputArray,uint *outputValue)\n\n{\n  int result;\n  undefined4 permission;\n  undefined temporaryArray [4];\n  uint localValue;\n  \n  if ((*(short *)(input2 + 0xe) < 0) ||\n     (result = initialize_memory_and_assign_08007004(input1,(int)*(short *)(input2 + 0xe),temporaryArray), result < 0)) {\n    *outputValue = 0;\n    if ((int)((uint)*(ushort *)(input2 + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *outputValue = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_08006e08:\n  *outputArray = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "calculate_permission_08006dc8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "outputArray",
                "param_4": "outputValue",
                "iVar1": "result",
                "auStack_4c": "temporaryArray",
                "local_48": "localValue",
                "uVar2": "permission"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "allocate_and_initialize_program_08006e10",
            "code": "\nvoid allocateAndInitializeProgram_08006e10(int programId,int *programData)\n\n{\n  ushort permissions;\n  int allocatedMemory;\n  int programSize;\n  int *tempData;\n  \n  if (-1 < (int)((uint)*(ushort *)(programData + 3) << 0x1e)) {\n    programSize = programId;\n    tempData = programData;\n    permissions = calculate_permission_08006dc8(programId,programData,&programSize,&tempData);\n    allocatedMemory = allocate_memory_08006288(programId,programSize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(programId + 0x28) = &LAB_08006c34_1;\n      *programData = allocatedMemory;\n      *(ushort *)(programData + 3) = *(ushort *)(programData + 3) | 0x80;\n      programData[4] = allocatedMemory;\n      programData[5] = programSize;\n      if ((tempData != (int *)0x0) &&\n         (allocatedMemory = initialize_and_check_program_08007028(programId,(int)*(short *)((int)programData + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(programData + 3) = *(ushort *)(programData + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(programData + 3) = permissions | *(ushort *)(programData + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(programData + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(programData + 3) = *(ushort *)(programData + 3) & 0xfffc | 2;\n  }\n  *programData = (int)programData + 0x47;\n  programData[4] = (int)programData + 0x47;\n  programData[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "allocate_and_initialize_program_08006e10",
                "param_1": "programId",
                "param_2": "programData",
                "uVar1": "permissions",
                "iVar2": "allocatedMemory",
                "local_18": "programSize",
                "local_14": "tempData"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_08006e90",
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *pointer;\n  char *current_pointer;\n  \n  pointer = string;\n  do {\n    current_pointer = pointer;\n    if (current_pointer == string + length) {\n      return (char *)0x0;\n    }\n    pointer = current_pointer + 1;\n  } while (*current_pointer != character);\n  return current_pointer;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "pointer",
                "pcVar2": "current_pointer"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_data_08006f00",
            "code": "\nint processData_08006f00(uint input)\n\n{\n  int *dataPtr;\n  undefined4 returnValue;\n  int index;\n  code *codePtr;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 registerLR;\n  undefined4 *dataPtrPtr;\n  \n  dataPtr = DAT_200000f8;\n  dataPtrPtr = &DAT_200000f8;\n  if (0x1f < input) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  index = DAT_200000f8[0x11];\n  if ((index != 0) && (codePtr = *(code **)(index + input * 4), codePtr != (code *)0x0)) {\n    if (codePtr != (code *)0x1) {\n      if (codePtr == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + input * 4) = 0;\n      (*codePtr)(input);\n    }\n    return 0;\n  }\n  returnValue = thunk_get_return_value_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  index = initialize_data_08005740(returnValue,input,input,0,dataPtrPtr,register4,register5,registerLR);\n  if ((index == -1) && (DAT_200006a4 != 0)) {\n    *dataPtr = DAT_200006a4;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "process_data_08006f00",
                "param_1": "input",
                "piVar1": "dataPtr",
                "uVar2": "returnValue",
                "iVar3": "index",
                "pcVar4": "codePtr",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "registerLR",
                "puVar5": "dataPtrPtr"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "entrypoint": "0x08006f34",
            "current_name": "get_return_value_thunk_08005750",
            "code": "\nint getReturnValue_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005750": "get_return_value_thunk_08005750",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_error_code_08006f38",
            "code": "\nvoid updateErrorCode_08006f38(undefined4 errorCode,int dataAddress)\n\n{\n  int initializedErrorCode;\n  uint updatedValue;\n  bool isInitialized;\n  \n  initializedErrorCode = initialize_and_assign_error_code_0800706c(errorCode,(int)*(short *)(dataAddress + 0xe));\n  isInitialized = -1 < initializedErrorCode;\n  if (isInitialized) {\n    updatedValue = *(int *)(dataAddress + 0x54) + initializedErrorCode;\n  }\n  else {\n    updatedValue = *(ushort *)(dataAddress + 0xc) & 0xffffefff;\n  }\n  if (isInitialized) {\n    *(uint *)(dataAddress + 0x54) = updatedValue;\n  }\n  if (!isInitialized) {\n    *(short *)(dataAddress + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_error_code_08006f38",
                "param_1": "errorCode",
                "param_2": "dataAddress",
                "iVar1": "initializedErrorCode",
                "uVar2": "updatedValue",
                "bVar3": "isInitialized"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "process_and_set_data_08006f5a",
            "code": "\nvoid processAndSetData_08006f5a(int *resultPointer,int dataPointer,undefined4 param3,undefined4 param4)\n\n{\n  int resultCode;\n  undefined4 auxiliaryParam1;\n  undefined4 auxiliaryParam2;\n  undefined4 linkRegister;\n  \n  if ((int)((uint)*(ushort *)(dataPointer + 0xc) << 0x17) < 0) {\n    set_default_value_08007048(resultPointer,(int)*(short *)(dataPointer + 0xe),0,2);\n  }\n  *(ushort *)(dataPointer + 0xc) = *(ushort *)(dataPointer + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  resultCode = process_data_08005730((int)*(short *)(dataPointer + 0xe),param3,param4,param4,param4,auxiliaryParam1,\n                       auxiliaryParam2,linkRegister);\n  if ((resultCode == -1) && (DAT_200006a4 != 0)) {\n    *resultPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "process_and_set_data_08006f5a",
                "param_1": "resultPointer",
                "param_2": "dataPointer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "resultCode",
                "unaff_r4": "auxiliaryParam1",
                "unaff_r5": "auxiliaryParam2",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "set_default_value_08006f92",
            "code": "\nvoid setDefaultValue_08006f92(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort modifiedValue;\n  bool isDefaultSet;\n  \n  result = set_default_value_08007048(param1,(int)*(short *)(param2 + 0xe));\n  isDefaultSet = result == -1;\n  if (isDefaultSet) {\n    modifiedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = result;\n    modifiedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isDefaultSet) {\n    *(ushort *)(param2 + 0xc) = modifiedValue;\n  }\n  if (!isDefaultSet) {\n    *(ushort *)(param2 + 0xc) = modifiedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "set_default_value_08006f92",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "modifiedValue",
                "bVar3": "isDefaultSet"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "initialize_memory_and_assign_08007004",
            "code": "\nvoid initializeMemoryAndAssign_08007004(int *result,undefined4 size_1,undefined4 size_2,undefined4 param_4)\n\n{\n  int initResult;\n  \n  DAT_200006a4 = 0;\n  initResult = initialize_memory_0800571a(size_1,size_2,size_2,0,param_4);\n  if ((initResult == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "initialize_memory_and_assign_08007004",
                "param_1": "result",
                "param_2": "size_1",
                "param_3": "size_2",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "initialize_and_check_program_08007028",
            "code": "\nvoid initialize_and_check_program_08007028(int *result,undefined4 program_input)\n\n{\n  int init_result;\n  \n  DAT_200006a4 = 0;\n  init_result = initialize_program_08005724(program_input);\n  if ((init_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "initialize_and_check_program_08007028",
                "param_1": "result",
                "param_2": "program_input",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "set_default_value_08007048",
            "code": "\nvoid setDefaultValue_08007048(int *outputValue,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  int returnValue;\n  \n  DAT_200006a4 = 0;\n  returnValue = get_default_value_08005728(inputValue1,inputValue2,inputValue3,inputValue3,inputValue3);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *outputValue = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "set_default_value_08007048",
                "param_1": "outputValue",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "initialize_and_assign_error_code_0800706c",
            "code": "\nvoid initializeAndAssignErrorCode_0800706c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_200006a4 = 0;\n  initResult = initialize_0800572c(arg1,arg2,arg3,arg3,arg3);\n  if ((initResult == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "initialize_and_assign_error_code_0800706c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "update_data_and_process_08007090",
            "code": "\nvoid updateDataAndProcess_08007090(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = updateDataAndProcess_08007090;\n  process_and_update_data_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "update_data_and_process_08007090",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 183037,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": []
}