{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "set_priority_group_08002470",
                "PriorityGroup": "priority_group",
                "DAT_08002490": "PTR_DAT_08002490",
                "uint32_t": "uint32_t",
                "uint": "uint32_t",
                "priority_reg": "priority_reg",
                "priority_mask": "priority_mask",
                "priority_value": "priority_value"
            },
            "code": "void set_priority_group_08002470(uint32_t priority_group) {\n    uint32_t *priority_reg = (uint32_t *)(DAT_08002490 + 0xc);\n    uint32_t priority_mask = *(uint *)(DAT_08002490 + 0xc) & 0xf8ff;\n    uint32_t priority_value = (priority_group & 7) << 8 | priority_mask | 0x5fa0000;\n    *priority_reg = priority_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "imported": false,
            "current_name": "set_priority_group_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "get_file_status_08007004",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "puVar1": "error_ptr",
                "iVar2": "status"
            },
            "code": "void get_file_status_08007004(int* error_code, int file_descriptor, struct stat* file_status) {\n  undefined* error_ptr = PTR_errno_08007024;\n  *(undefined4*)PTR_errno_08007024 = 0;\n  int status = _fstat(file_descriptor, file_status);\n  if (status == -1 && *(int*)error_ptr != 0) {\n    *error_code = *(int*)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_080063d6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__080065a4,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_080065b0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_080064b0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080064b0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar5 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar5;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar8 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_080065b0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_080065b4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "__sfputs_r",
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "reset_I2C_DMA_080035fc",
                "hdma": "dma_handle",
                "hi2c": "i2c_handle",
                "CR1": "I2C_CR1",
                "XferCount": "transfer_count",
                "hdmatx": "dma_tx_handle",
                "hdmarx": "dma_rx_handle",
                "State": "i2c_state",
                "Mode": "i2c_mode",
                "ErrorCode": "error_code",
                "Instance": "i2c_instance",
                "HAL_I2C_StateTypeDef": "HAL_I2C_STATE",
                "HAL_I2C_ModeTypeDef": "HAL_I2C_MODE",
                "HAL_I2C_ErrorCallback": "i2c_error_callback",
                "HAL_I2C_AbortCpltCallback": "i2c_abort_callback"
            },
            "code": "void reset_I2C_DMA_080035fc(DMA_HandleTypeDef *dma_handle)\n{\n  I2C_HandleTypeDef *i2c_handle;\n  i2c_handle = (I2C_HandleTypeDef *)dma_handle->Parent;\n  i2c_handle->Instance->CR1 &=~ I2C_CR1_TXDMAEN | I2C_CR1_RXDMAEN;\n  i2c_handle->XferCount = 0;\n  i2c_handle->hdmatx->XferAbortCallback = NULL;\n  i2c_handle->hdmarx->XferAbortCallback = NULL;\n  if (i2c_handle->State != HAL_I2C_STATE_ABORT) {\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Instance->CR1 &=~ I2C_CR1_PE;\n    HAL_I2C_ErrorCallback(i2c_handle);\n    return;\n  }\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Instance->CR1 &=~ I2C_CR1_PE;\n  HAL_I2C_AbortCpltCallback(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [],
            "imported": false,
            "current_name": "reset_I2C_DMA_080035fc"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_errno_to_22_08005740",
                "pid_UNUSED": "pid_unused",
                "sig_UNUSED": "sig_unused",
                "PTR_errno_0800574c": "PTR_errno_0800574c"
            },
            "code": "int set_errno_to_22_08005740(int pid_unused, int sig_unused)\n{\n    *(undefined4 *)PTR_errno_0800574c = 22;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_to_22_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_08006158",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "DAT_08006170": "global_var_1",
                "CONCAT44": "CONCAT_64",
                "ulonglong": "uint64_t"
            },
            "code": "long long calculate_result_08006158(uint32_t input_param_1, uint32_t input_param_2)\n{\n  if (DAT_08006170 != 0) {\n    return CONCAT_64(input_param_1, 2);\n  }\n  return (uint64_t)input_param_2 << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "calculate_result_08006158"
        },
        "FUN_08006d8c": {
            "renaming": {
                "FUN_08006d8c": "iterate_over_data_08006d8c",
                "param_1": "data_pointer",
                "param_2": "function_pointer",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar3": "current_data",
                "iVar4": "current_item",
                "iVar6": "current_item_count",
                "uVar1": "function_result",
                "uVar5": "result"
            },
            "code": "uint iterate_over_data_08006d8c(int data_pointer, code* function_pointer, undefined4 param_3, undefined4 param_4) {\n  uint result = 0;\n  for (int* current_data = (int*)(data_pointer + 0x48); current_data != (int*)0x0; current_data = (int*)*current_data) {\n    int current_item = current_data[2];\n    int current_item_count = current_data[1];\n    while (current_item_count = current_item_count - 1, -1 < current_item_count) {\n      if ((1 < *(ushort*)(current_item + 0xc)) && (int item_length = *(short*)(current_item + 0xe) + 1, item_length != 0)) {\n        uint function_result = (*function_pointer)(data_pointer, current_item, param_3, item_length, param_4);\n        result = result | function_result;\n      }\n      current_item = current_item + 0x68;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8c",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "iterate_over_data_08006d8c"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "handle_i2c_event_interrupt_08004f2c",
                "PTR_i2c_handles_08004f38": "PTR_i2c_handles",
                "*PTR_i2c_handles_08004f38": "i2c_handles_ptr",
                "I2C_HandleTypeDef": "I2C_handle",
                "**(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4)": "i2c_handle",
                "HAL_I2C_EV_IRQHandler": "handle_i2c_event_interrupt"
            },
            "code": "void handle_i2c_event_interrupt_08004f2c(void)\n{\n  I2C_HandleTypeDef* **(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4) = *(I2C_HandleTypeDef**)(PTR_**(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4)s_08004f38_08004f38 + 4);\n  HAL_I2C_EV_IRQHandler(**(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4));\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08004f2c"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nHAL_StatusTypeDef_conflict FUNC_08003688(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  HAL_StatusTypeDef_conflict HVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  bool bVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08003948;\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar5 = RCC_OscInitStruct->HSEState;\n      if (uVar5 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar5 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar5 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_0800394c = 0;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003950 = 0;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar6 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar6) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar5 = RCC_OscInitStruct->LSEState;\n    if (uVar5 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar5 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar5 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[8] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar6) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  uVar5 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar5 == 0) {\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if (uVar5 == 2) {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        DAT_08003a60[1] =\n             DAT_08003a60[1] & 0xffc2ffff |\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLMUL;\n        *DAT_08003a64 = 1;\n        uVar5 = HAL_GetTick();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar5 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "i2c_slave_receive_handler_08004ec4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "remaining_bytes",
                "i2c_onSlaveReceive": "on_slave_receive_callback",
                "slaveMode": "mode",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "HAL_I2C_EnableListen_IT": "HAL_I2C_EnableListen_IT"
            },
            "code": "void i2c_slave_receive_handler_08004ec4(I2C_HandleTypeDef *i2c_handle)\n{\n  i2c_t *i2c_obj;\n  uint8_t remaining_bytes;\n  i2c_obj = get_i2c_object(i2c_handle);\n  if ((i2c_obj->on_slave_receive_callback != NULL) && (i2c_obj->mode == I2C_SLAVE_MODE))\n  {\n    remaining_bytes = 0x20 - *(uint8_t *)&(i2c_obj->handle).XferSize & 0xff;\n    if (remaining_bytes != 0)\n    {\n      (*i2c_obj->on_slave_receive_callback)(i2c_obj->tx_rx_buffer, remaining_bytes);\n    }\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "I2C_Slave_AF",
                "I2C_Slave_STOPF",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "i2c_slave_receive_handler_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "calculate_string_length_08000178",
                "__s": "input_string",
                "pcVar3": "current_char_ptr",
                "pcVar2": "next_char_ptr",
                "cVar1": "current_char",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "size_t calculate_string_length_08000178(char* input_string) {\n  char current_char;\n  char* current_char_ptr;\n  char* start_of_string_ptr;\n  \n  current_char_ptr = input_string;\n  start_of_string_ptr = input_string;\n  do {\n    current_char = *current_char_ptr;\n    current_char_ptr++;\n  } while (current_char != '\\0');\n  return (size_t)(current_char_ptr + (-1 - (int)start_of_string_ptr));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "printNumber",
                "print"
            ],
            "imported": false,
            "current_name": "calculate_string_length_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_for_structs_and_set_defaults_08006c88",
                "param_1": "num_structs",
                "param_2": "struct_size",
                "puVar1": "struct_array_ptr",
                "iVar2": "total_size"
            },
            "code": "undefined4* allocate_memory_for_structs_and_set_defaults_08006c88(int num_structs, int struct_size)\n{\n  undefined4 *struct_array_ptr;\n  int total_size;\n  total_size = (num_structs - 1) * struct_size + 0x74;\n  struct_array_ptr = (undefined4 *)_malloc_r(param_1,total_size);\n  if (struct_array_ptr != (undefined4 *)0x0) {\n    *struct_array_ptr = 0;\n    struct_array_ptr[1] = num_structs;\n    struct_array_ptr[2] = struct_array_ptr + 3;\n    memset(struct_array_ptr + 3,0,total_size - 0x74);\n  }\n  return struct_array_ptr;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_structs_and_set_defaults_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "handle_gpio_interrupt_080060e4",
                "GPIO_Pin": "pin_number",
                "bVar1": "pin_id"
            },
            "code": "void handle_gpio_interrupt_080060e4(uint16_t pin_number)\n{\n  uint8_t pin_id = get_pin_id(pin_number);\n  if (*(int *)(PTR_gpio_irq_conf_08006100 + (uint)pin_id * 0x14 + 0xc) != 0) {\n    std::function<void()>::operator__ ((function_void___ *)(PTR_gpio_irq_conf_08006100 + (uint)pin_id * 0x14 + 4));\n  }\n  return;\n}",
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "set_dma_to_ready_state_0800258c",
                "hdma": "dma_handle",
                "uVar1": "dma_channel_id",
                "pDVar2": "dma_channel"
            },
            "code": "HAL_StatusTypeDef_conflict set_dma_to_ready_state_0800258c(DMA_HandleTypeDef *dma_handle)\n{\n  int dma_channel_id;\n  DMA_Channel_TypeDef *dma_channel;\n  if (dma_handle->State != HAL_DMA_STATE_BUSY) {\n    dma_handle->ErrorCode = 4;\n    return HAL_ERROR;\n  }\n  dma_channel = dma_handle->Instance;\n  dma_channel->CCR &= ~0x0E;\n  if (dma_channel == PTR_DAT_0800261c) {\n    dma_channel_id = 1;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&DAT_0800261c[1].CNDTR) {\n    dma_channel_id = 16;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&DAT_0800261c[2].CPAR) {\n    dma_channel_id = 256;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&DAT_0800261c[3].CMAR) {\n    dma_channel_id = 4096;\n  }\n  else if (dma_channel == PTR_DAT_0800261c + 5) {\n    dma_channel_id = 65536;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&DAT_0800261c[6].CNDTR) {\n    dma_channel_id = 1048576;\n  }\n  else {\n    dma_channel_id = 16777216;\n  }\n  *(int *)(PTR_DAT_08002620 + 4) = dma_channel_id;\n  dma_handle->State = HAL_DMA_STATE_READY;\n  dma_handle->Lock = HAL_UNLOCKED;\n  if (dma_handle->XferAbortCallback != (_func_void___DMA_HandleTypeDef_ptr *)0x0) {\n    (*dma_handle->XferAbortCallback)(dma_handle);\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_dma_to_ready_state_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "handle_timer_interrupt_08004e20",
                "PTR_timer_handles_08004e30": "PTR_timer_handles_08004e30",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_08004e20(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)PTR_timer_handles_08004e30;\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "code": "void infinite_loop_0800573c(int status_UNUSED)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "infinite_loop_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "i2c_data_transfer_080032b4",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "puVar3": "buffer_ptr",
                "tmpreg": "tmp_reg"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_data_transfer_080032b4(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state = handle->State;\n  I2C_TypeDef *instance = handle->Instance;\n  uint8_t *buffer_ptr;\n  uint32_t tmp_reg;\n  instance->CR2 &= 0xfffff8ff;\n  instance->CR1 |= 1;\n  instance->CR1 &= 0xfffffbff;\n  if ((instance->CR2 & 0x800) != 0) {\n    if ((handle->State == HAL_I2C_STATE_BUSY_RX) || (handle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      handle->XferCount = (uint16_t)handle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      handle->XferCount = (uint16_t)handle->hdmatx->Instance->CNDTR;\n    }\n  }\n  if (handle->XferCount != 0) {\n    if ((instance->SR1 & 4) != 0) {\n      buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)instance->DR;\n      handle->XferCount--;\n    }\n    if ((instance->SR1 & 0x40) != 0) {\n      buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)instance->DR;\n      handle->XferCount--;\n    }\n    handle->ErrorCode |= 4;\n  }\n  if (handle->ErrorCode == 0) {\n    if (((state == HAL_I2C_STATE_LISTEN) || (state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      handle->XferOptions = 0x01;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(handle);\n    }\n    else if ((handle->PreviousState == 0x22) || (state == HAL_I2C_STATE_BUSY_RX)) {\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(handle);\n    }\n  }\n  else {\n    I2C_ITError(handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_data_transfer_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "combine_pointers_08004d06",
                "a": "ptr1",
                "b": "ptr2"
            },
            "code": "void combine_pointers_08004d06(void *ptr1, void *ptr2)\n{\n    if (ptr1 != ptr2) {\n        if (ptr1 == NULL) {\n            return ptr2;\n        }\n        if (ptr2 == NULL) {\n            return ptr1;\n        }\n        ptr1 = NULL;\n    }\n    return ptr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "combine_pointers_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "incr": "size",
                "pcVar1": "current_pointer",
                "pcVar2": "new_pointer"
            },
            "code": "caddr_t allocate_memory_080056d8(int size)\n{\n  caddr_t current_pointer;\n  caddr_t new_pointer;\n  \n  if (*(int *)PTR_heap_end_08005708 == 0) {\n    *(undefined **)PTR_heap_end_08005708 = PTR__ebss_0800570c;\n  }\n  current_pointer = *(caddr_t *)PTR_heap_end_08005708;\n  new_pointer = current_pointer + size;\n  if (new_pointer <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_08005708 = new_pointer;\n    return current_pointer;\n  }\n  *(undefined4 *)PTR_errno_08005710 = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "calculate_output_080019f6",
                "this": "pid",
                "myOutput": "current_output_ptr",
                "myInput": "current_input_ptr",
                "outputSum": "output_sum",
                "lastInput": "last_input",
                "outMax": "output_max",
                "outMin": "output_min",
                "iVar1": "is_output_within_range",
                "uVar2": "output_limit",
                "uVar3": "current_output",
                "uVar4": "previous_output",
                "uVar5": "output_limit_2",
                "__aeabi_dcmpgt": "__aeabi_fcmpgt",
                "__aeabi_dcmplt": "__aeabi_fcmplt",
                "undefined4": "float",
                "*(undefined4 *)": "*(float *)",
                "*(undefined4 *)((int)": "*((float *)&",
                " + 4)": " + 1)",
                "iVar1 =": "bool ",
                "== 0": "",
                "if (": "bool ",
                " != 0) {": ") {",
                "}": "",
                "return;": ""
            },
            "code": "void __thiscall calculate_output_080019f6(PID *pid) {\n  float current_output = *(float *)pid->myOutput;\n  float previous_output = *(float *)((int)pid->myOutput + 4);\n  pid->output_sum = current_output;\n  *((float *)&pid->output_sum + 1) = previous_output;\n  float current_input = *(float *)((int)pid->myInput + 4);\n  pid->last_input = *(float *)pid->myInput;\n  *((float *)&pid->last_input + 1) = current_input;\n  float output_max = *(float *)&pid->outMax;\n  float output_min = *(float *)&pid->outMin;\n  bool is_current_output_greater_than_previous_output = __aeabi_fcmpgt(current_output, previous_output);\n  if (is_current_output_greater_than_previous_output) {\n    pid->output_sum = output_max;\n    *((float *)&pid->output_sum + 1) = *(float *)((int)&pid->outMax + 4);\n  } else {\n    bool is_current_output_less_than_previous_output = __aeabi_fcmplt(current_output, previous_output);\n    if (is_current_output_less_than_previous_output) {\n      pid->output_sum = output_min;\n      *((float *)&pid->output_sum + 1) = *(float *)((int)&pid->outMin + 4);\n    }\n  }\n}",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "SetMode"
            ],
            "imported": false,
            "current_name": "calculate_output_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "receive_data_from_i2c_08002f9c",
                "*hi2c": "*i2c_handle",
                "puVar1": "data_ptr",
                "HAL_I2C_STATE_BUSY_RX": "HAL_I2C_STATE_RECEIVING",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_IDLE",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEMORY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NO_TRANSFER",
                "HAL_I2C_MasterRxCpltCallback": "HAL_I2C_MasterReceiveCompleteCallback",
                "HAL_I2C_MemRxCpltCallback": "HAL_I2C_MemoryReceiveCompleteCallback",
                "XferCount": "remaining_data_count",
                "XferOptions": "transfer_options",
                "Instance": "i2c_instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "pBuffPtr": "data_buffer_pointer",
                "DR": "data_register",
                "PreviousState": "previous_state"
            },
            "code": "HAL_StatusTypeDef_conflict receive_data_from_i2c_08002f9c(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *data_ptr;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX) {\n    if (i2c_handle->XferCount < 4) {\n      if (i2c_handle->XferCount - 2 < 2) {\n        if (i2c_handle->XferOptions == 2) {\n          i2c_handle->Instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_handle->Instance->CR1 &= 0xfffffbff;\n          i2c_handle->Instance->CR1 |= 0x800;\n        }\n        i2c_handle->Instance->CR2 &= 0xfffffbff;\n      }\n      else {\n        if (i2c_handle->XferOptions == 2) {\n          i2c_handle->Instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_handle->Instance->CR1 &= 0xfffffbff;\n        }\n        i2c_handle->Instance->CR2 &= 0xfffff8ff;\n        data_ptr = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = data_ptr + 1;\n        *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n        i2c_handle->XferCount--;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->PreviousState = 0;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(i2c_handle);\n        }\n      }\n    }\n    else {\n      data_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = data_ptr + 1;\n      *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n      i2c_handle->XferCount--;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_from_i2c_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "receive_data_08005510",
                "obj": "serial_obj",
                "callback": "callback_func_ptr",
                "uVar2": "rx_active",
                "bVar1": "index"
            },
            "code": "void receive_data_08005510(serial_t *serial_obj, _func_void_serial_t_ptr *callback_func_ptr)\n{\n  byte index;\n  uint8_t rx_active;\n  \n  if (serial_obj != NULL) {\n    rx_active = serial_rx_active(serial_obj);\n    if (rx_active == 0) {\n      index = serial_obj->index;\n      *(_func_void_serial_t_ptr **)(PTR_rx_callback_0800555c + (uint)index * 4) = callback_func_ptr;\n      *(serial_t **)(PTR_rx_callback_obj_08005560 + (uint)index * 4) = serial_obj;\n      HAL_NVIC_SetPriority(serial_obj->irq, 0, 1);\n      HAL_NVIC_EnableIRQ(serial_obj->irq);\n      HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_08005564 + (uint)serial_obj->index * 4), &serial_obj->recv, 1);\n    }\n  }\n}",
            "called": [
                "serial_rx_active",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "receive_data_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_process_id_08005750"
            },
            "code": "__pid_t get_process_id_08005750(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "check_address_match_08002cf2",
                "*hi2c": "*i2c_handle",
                "AddrMatchCode": "address_match_code",
                "&(hi2c->Init).OwnAddress1": "&(i2c_handle->Init).OwnAddress1",
                "&(hi2c->Init).OwnAddress2": "&(i2c_handle->Init).OwnAddress2"
            },
            "code": "HAL_StatusTypeDef_conflict check_address_match_08002cf2(I2C_HandleTypeDef *i2c_handle)\n{\n  uint16_t address_match_code;\n  if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n  }\n  else {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2c_handle,(i2c_handle->Instance->SR2 & 4) == 0,address_match_code);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_address_match_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "error_code",
                "param_2": "requested_size",
                "puVar1": "start_of_malloc_sbrk",
                "uVar2": "result_of_sbrk_r",
                "puVar3": "current_block",
                "iVar4": "difference",
                "puVar5": "block_size_pointer",
                "uVar6": "block_size",
                "puVar7": "previous_block",
                "uVar8": "adjusted_size"
            },
            "code": "uint allocate_memory_08006288(uint *error_code, uint requested_size) {\n  uint *current_block, *previous_block;\n  uint adjusted_size, block_size;\n\n  adjusted_size = (requested_size + 3) & ~3U) + 8;\n  if (adjusted_size < 12) {\n    adjusted_size = 12;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < requested_size)) {\n    *error_code = 12;\n    return 0;\n  }\n  __malloc_lock();\n  current_block = *(uint **)PTR___malloc_free_list_0800633c;\n  previous_block = current_block;\n  while (current_block != (uint *)0x0) {\n    block_size = *current_block;\n    if (block_size >= adjusted_size) {\n      if (block_size < adjusted_size + 12) {\n        if (previous_block == current_block) {\n          *(uint **)PTR___malloc_free_list_0800633c = *(uint *)(current_block + 1);\n        } else {\n          *(uint *)(previous_block + 1) = *(uint *)(current_block + 1);\n        }\n      } else {\n        *current_block = adjusted_size;\n        *(uint *)((int)current_block + adjusted_size) = block_size;\n        previous_block = current_block;\n        current_block = (uint *)((int)current_block + adjusted_size);\n        *current_block = block_size - adjusted_size;\n        *(uint *)((int)current_block + block_size - adjusted_size) = block_size - adjusted_size;\n      }\n      __malloc_unlock();\n      return (int)current_block + 8;\n    }\n    previous_block = current_block;\n    current_block = (uint *)*(uint *)(current_block + 1);\n  }\n  if (*(int *)PTR___malloc_sbrk_start_08006340 == 0) {\n    sbrk(0);\n  }\n  current_block = (uint *)sbrk(adjusted_size);\n  if (current_block == (uint *)0xffffffff) {\n    *error_code = 12;\n    __malloc_unlock();\n    return 0;\n  }\n  *current_block = adjusted_size;\n  *(uint *)((int)current_block + adjusted_size) = adjusted_size;\n  __malloc_unlock();\n  return (int)current_block + 8;\n}",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006288"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "FUNC_08000188"
            },
            "code": "\nulonglong FUNC_08000188(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000188"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "enable_ADC_08002004",
                "hadc": "adc",
                "HVar1": "status",
                "pAVar2": "adc_instance"
            },
            "code": "HAL_StatusTypeDef_conflict enable_ADC_08002004(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *adc_instance;\n  \n  if (adc->Lock != HAL_LOCKED) {\n    adc->Lock = HAL_LOCKED;\n    status = ADC_Enable(adc);\n    if (status == HAL_OK) {\n      adc->State = (adc->State & 0xfffffcfe) | 0x100;\n      adc_instance = adc->Instance;\n      if ((adc_instance == PTR_DAT_080020e8) && ((PTR_DAT_080020e8[-0xd].JOFR1 & 0xf0000) != 0)) {\n        adc->State |= 0x100000;\n        if ((*(uint *)(PTR_DAT_080020ec + 4) & 0x400) != 0) {\n          adc->State = (adc->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        adc->State &= 0xffefffff;\n        if ((adc_instance->CR1 & 0x400) != 0) {\n          adc->State = (adc->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((adc->State & 0x1000) == 0) {\n        adc->ErrorCode = 0;\n      }\n      else {\n        adc->ErrorCode &= 0xfffffff9;\n      }\n      adc->Lock = HAL_UNLOCKED;\n      adc_instance->SR = 0xfffffffd;\n      adc_instance = adc->Instance;\n      if (((adc_instance->CR2 & 0xe0000) == 0xe0000) &&\n         ((adc_instance != PTR_DAT_080020e8 || ((PTR_DAT_080020e8[-0xd].JOFR1 & 0xf0000) == 0)))) {\n        adc_instance->CR2 |= 0x500000;\n      }\n      else {\n        adc_instance->CR2 |= 0x100000;\n      }\n    }\n    else {\n      adc->Lock = HAL_UNLOCKED;\n    }\n    return status;\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "ADC_Enable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "enable_ADC_08002004"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "i2c_error_handler_08004f3c",
                "PTR_i2c_handles_08004f48": "PTR_i2c_handles",
                "i2c_handle_ptr": "i2c_handle"
            },
            "code": "void i2c_error_handler_08004f3c(void)\n{\n    I2C_HandleTypeDef* i2c_handle_ptr = *(I2C_HandleTypeDef**)(PTR_i2c_handles_08004f48_08004f48 + 4);\n    HAL_I2C_ER_IRQHandler(i2c_handle_ptr);\n    return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [],
            "imported": false,
            "current_name": "i2c_error_handler_08004f3c"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "digital_pin_to_adc_value_08005754",
                "ulPin": "pin_number",
                "bVar1": "pin_within_range",
                "pin": "pin_name",
                "uVar2": "adc_value",
                "uVar3": "result",
                "uVar4": "resolution_bits"
            },
            "code": "uint32_t digital_pin_to_adc_value_08005754(uint32_t pin_number)\n{\n  bool pin_within_range = false;\n  PinName_conflict pin_name;\n  uint16_t adc_value;\n  uint32_t result;\n  uint resolution_bits;\n\n  if (pin_number < 14) {\n    if (pin_number + 46 < 60) {\n      pin_within_range = true;\n    }\n  }\n  else {\n    pin_within_range = pin_number < 60;\n  }\n\n  if (pin_within_range) {\n    if (pin_number < 14) {\n      pin_number += 46;\n    }\n    pin_name = digitalPin_080057ac[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n\n  if (pin_name == NC) {\n    result = 0;\n  }\n  else {\n    adc_value = adc_read_value(pin_name);\n    result = (uint32_t)adc_value;\n    resolution_bits = *(uint *)readResolution_080057b0;\n    if (resolution_bits != 12) {\n      if (resolution_bits < 12) {\n        return (uint)(adc_value >> (12 - resolution_bits & 0xff));\n      }\n      return result << (resolution_bits - 12 & 0xff);\n    }\n  }\n  return result;\n}",
            "called": [
                "adc_read_value"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "digital_pin_to_adc_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "configure_gpio_irq_08005fc8",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "puVar1": "gpio_irq_conf"
            },
            "code": "void configure_gpio_irq_08005fc8(int should_initialize, int priority) {\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    volatile uint8_t* gpio_irq_conf = PTR_gpio_irq_conf_08006068;\n    gpio_irq_conf[0] = 6;\n    gpio_irq_conf[0xc / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x14 / sizeof(uint8_t)] = 7;\n    gpio_irq_conf[0x20 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x28 / sizeof(uint8_t)] = 8;\n    gpio_irq_conf[0x34 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x3c / sizeof(uint8_t)] = 9;\n    gpio_irq_conf[0x48 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x50 / sizeof(uint8_t)] = 10;\n    gpio_irq_conf[100 / sizeof(uint8_t)] = 0x17;\n    gpio_irq_conf[0x70 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x78 / sizeof(uint8_t)] = 0x17;\n    gpio_irq_conf[0x84 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x8c / sizeof(uint8_t)] = 0x17;\n    gpio_irq_conf[0x98 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0xa0 / sizeof(uint8_t)] = 0x17;\n    gpio_irq_conf[0xac / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0xb4 / sizeof(uint8_t)] = 0x17;\n    gpio_irq_conf[0xc0 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[200 / sizeof(uint8_t)] = 0x28;\n    gpio_irq_conf[0xd4 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0xdc / sizeof(uint8_t)] = 0x28;\n    gpio_irq_conf[0xe8 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0xf0 / sizeof(uint8_t)] = 0x28;\n    gpio_irq_conf[0xfc / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x104 / sizeof(uint8_t)] = 0x28;\n    gpio_irq_conf[0x110 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[0x118 / sizeof(uint8_t)] = 0x28;\n    gpio_irq_conf[0x124 / sizeof(uint8_t)] = 0;\n    gpio_irq_conf[300 / sizeof(uint8_t)] = 0x28;\n    __aeabi_atexit(0, DAT_08006070, PTR___dso_handle_0800606c);\n  }\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "configure_gpio_irq_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "transfer_byte_08002ab8",
                "*hi2c": "*i2c_handle",
                "pbVar1": "buffer_pointer",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR"
            },
            "code": "HAL_StatusTypeDef_conflict transfer_byte_08002ab8(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  \n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    i2c_handle->Instance->DR = (uint8_t)*buffer_pointer;\n    i2c_handle->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "format_string_080068f0",
                "__format": "format",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "iVar1": "impure_ptr",
                "pcVar2": "format_string",
                "uStack_c": "stack_var1",
                "uStack_8": "stack_var2",
                "uStack_4": "stack_var3"
            },
            "code": "int format_string_080068f0(char* format, ...)\n{\n  int impure_ptr = *(int*)PTR__impure_ptr_0800691c;\n  char* format_string_080068f0 = format;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  arg1 = in_r1;\n  arg2 = in_r2;\n  arg3 = in_r3;\n  if (impure_ptr != 0 && *(int*)(impure_ptr + 0x18) == 0)\n  {\n    __sinit(impure_ptr);\n  }\n  impure_ptr = _vfformat_string_080068f0_r(impure_ptr, *(undefined4*)(impure_ptr + 8), format, &arg1, format_string_080068f0, &arg1);\n  return impure_ptr;\n}",
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "format_string_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08006700;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08006774;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar6 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08006856:\n    *puVar3 = uVar7;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "setControlBit": "setControlBit",
                "this": "lcd",
                "_setControlBitcontrol": "_controlByte",
                "bVar1": "controlByte",
                "FUN_0800138e": "setControlBit_0800138e"
            },
            "code": "void __thiscall LiquidCrystal::setControlBit_0800138e(LiquidCrystal *lcd)\\n{\\n  byte controlByte = lcd->_controlByte;\\n  lcd->_controlByte = controlByte | 0b00000100;\\n  send(lcd, controlByte | 0b00001100, \"\\0\");\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setControlBit_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "receive_data_0800598a",
                "obj": "serial_obj",
                "iVar1": "uart_read_status",
                "uVar2": "next_rx_head",
                "c": "received_char"
            },
            "code": "void receive_data_0800598a(serial_t_conflict *serial_obj)\n{\n  int uart_read_status;\n  ushort next_rx_head;\n  uchar received_char;\n  \n  uart_read_status = uart_getc((serial_t *)serial_obj, &received_char);\n  if ((uart_read_status == 0) && ((next_rx_head = serial_obj->rx_head + 1 & 0x3f) != serial_obj->rx_tail)) {\n    serial_obj->rx_buff[serial_obj->rx_head] = received_char;\n    serial_obj->rx_head = next_rx_head;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "receive_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_up_system_08001c88",
                "DAT_08001ca8": "ptr_system_control_reg",
                "HAL_NVIC_SetPriorityGrouping": "NVIC_SetPriorityGrouping",
                "FUN_08001c88Tick": "set_up_system_tick",
                "HAL_MspInit": "initialize_peripheral",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef_conflict set_up_system_08001c88(void)\n{\n  *DAT_08001ca8 = *DAT_08001ca8 | SYSTEM_CONTROL_REG_BIT_4;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITY_GROUP_4);\n  set_up_system_08001c88_tick(SYSTEM_TICK_FREQ);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "set_up_system_08001c88"
        },
        "FUN_08004e34": {
            "renaming": {
                "FUN_08004e34": "handle_timer_interrupt_08004e34",
                "PTR_timer_handles_08004e44": "PTR_timer_handles",
                "TIM_HandleTypeDef": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08004e34(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e44_08004e44 + 4);\n    if (timer_handle != NULL)\n    {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e34",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e34"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_auto_mode_08001a44",
                "Mode": "mode",
                "bVar1": "is_auto",
                "this->inAuto": "this->in_auto",
                "Initialize": "initialize"
            },
            "code": "void __thiscall set_auto_mode_08001a44(PID *this, int mode) {\n  bool is_auto;\n  \n  if (mode == 1) {\n    is_auto = true;\n    if (!this->in_auto) {\n      initialize(this);\n    }\n  }\n  else {\n    is_auto = false;\n  }\n  this->in_auto = is_auto;\n  return;\n}",
            "called": [
                "Initialize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "set_auto_mode_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "i2c_data_transfer_08002c54",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pbVar2": "buffer_ptr",
                "hi2c->State": "handle->State",
                "hi2c->XferCount": "handle->XferCount",
                "hi2c->pBuffPtr": "handle->pBuffPtr",
                "hi2c->Instance->DR": "handle->Instance->DR",
                "hi2c->Instance->CR2": "handle->Instance->CR2",
                "hi2c->PreviousState": "handle->PreviousState",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_data_transfer_08002c54(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state;\n  uint8_t *buffer_ptr;\n  state = handle->State;\n  if (handle->XferCount != 0) {\n    buffer_ptr = handle->pBuffPtr;\n    handle->pBuffPtr = buffer_ptr + 1;\n    handle->Instance->DR = (uint32_t)*buffer_ptr;\n    handle->XferCount--;\n    if ((handle->XferCount == 0) && (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      handle->Instance->CR2 &= 0xfffffbff;\n      handle->PreviousState = 0x21;\n      handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_data_transfer_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "uart_flag_check_080043b4",
                "*huart": "*uart_handle",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "tick_start",
                "Timeout": "timeout",
                "uVar1": "current_tick",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "gState": "general_state",
                "RxState": "receive_state",
                "Lock": "lock"
            },
            "code": "HAL_StatusTypeDef uart_flag_check_080043b4(UART_HandleTypeDef *uart_handle, uint32_t flag, FlagStatus status, uint32_t tick_start, uint32_t timeout)\n{\n  uint32_t current_tick;\n  do {\n    if (((flag & ~uart_handle->Instance->SR) == 0) != (bool)status) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (current_tick = HAL_GetTick(), current_tick - tick_start <= timeout))));\n  uart_handle->Instance->CR1 = uart_handle->Instance->CR1 & 0xfffffe5f;\n  uart_handle->Instance->CR3 = uart_handle->Instance->CR3 & 0xfffffffe;\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "uart_flag_check_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "huart": "uart_handle",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef_conflict",
                "HAL_UART_MspInit": "initialize_uart_msp",
                "UART_SetConfig": "configure_uart",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "gState": "global_state",
                "RxState": "receive_state",
                "ErrorCode": "error_code",
                "Lock": "lock"
            },
            "code": "HAL_StatusTypeDef_conflict initialize_uart_0800441a(UART_HandleTypeDef *uart_handle)\n{\n  if (uart_handle != NULL)\n  {\n    if (uart_handle->gState == HAL_UART_STATE_RESET)\n    {\n      uart_handle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart_handle);\n    }\n    uart_handle->gState = HAL_UART_STATE_BUSY;\n    uart_handle->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart_handle);\n    uart_handle->Instance->CR2 &= ~(1 << 11);\n    uart_handle->Instance->CR3 &= ~(1 << 2);\n    uart_handle->Instance->CR1 |= (1 << 13);\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_READY;\n    uart_handle->RxState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_rtc_user_callback_08004d18",
                "hrtc": "rtc_handle",
                "PTR_RTCUserCallback_08004d28": "callback_func_ptr",
                "PTR_callbackUserData_08004d2c": "callback_user_data_ptr"
            },
            "code": "void execute_rtc_user_callback_08004d18(RTC_HandleTypeDef *rtc_handle)\n{\n    code **PTR_RTCUserCallback_08004d28 = *(code ***)PTR_RTCUserCallback_08004d28;\n    if (*PTR_RTCUserCallback_08004d28 != NULL)\n    {\n        (*PTR_RTCUserCallback_08004d28)(*(undefined4 *)PTR_callbackUserData_08004d2c);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "execute_rtc_user_callback_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_value_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_3",
                "unaff_r4": "temp_4",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "in_r12": "temp_6",
                "bVar4": "flag_1"
            },
            "code": "unsigned long long calculate_value_080006d4(unsigned int input_1, unsigned int input_2, unsigned int input_3, unsigned int input_4) {\n  unsigned int temp_1, temp_2, temp_3, temp_4, temp_5, temp_6;\n  bool flag_1, flag_2;\n  temp_1 = input_4 >> 0x14;\n  if (input_2 != input_3 && temp_1 != input_3) {\n    flag_1 = (input_1 | input_2 << 1) == 0;\n    if (!flag_1) {\n      flag_1 = (input_3 | input_4 << 1) == 0;\n    }\n    if (flag_1) {\n      return (unsigned long long)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (input_3 == 0) {\n      temp_2 = input_2 & 0x80000000;\n      do {\n        temp_3 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (unsigned int)(temp_3 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_2;\n      if (temp_1 != 0) {\n        return ((unsigned long long)input_2 << 0x20) | input_1;\n      }\n    }\n    do {\n      temp_4 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (unsigned int)(temp_4 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return ((unsigned long long)input_2 << 0x20) | input_1;\n  }\n  flag_1 = (input_1 | input_2 << 1) == 0;\n  if (flag_1) {\n    temp_2 = input_4;\n    temp_1 = input_3;\n  }\n  if (!flag_1) {\n    flag_2 = (input_3 | input_4 << 1) == 0;\n  }\n  temp_5 = input_2;\n  if (((!flag_2) && ((input_2 != input_3 || ((input_1 | input_2 << 0xc) == 0)))) && ((temp_1 != input_3 || (input_1 = input_4, temp_5 = input_3, (input_3 | input_4 << 0xc) == 0)))) {\n    return ((unsigned long long)(input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return ((unsigned long long)temp_5 << 0x20) | input_1 | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_value_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "SetControllerDirection",
                "Compute",
                "printFloat",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "read_formatted_output_from_file_08006174",
                "__stream": "file_pointer",
                "__format": "format_string",
                "uStack_8": "stack_arg_1",
                "uStack_4": "stack_arg_2"
            },
            "code": "int read_formatted_output_from_file_08006174(FILE* file_pointer, char* format_string, ...)\n{\n  int return_value;\n  undefined4 in_r2;\n  undefined4 in_r3;\n  undefined4 stack_arg_1;\n  undefined4 stack_arg_2;\n  \n  stack_arg_1 = in_r2;\n  stack_arg_2 = in_r3;\n  return_value = _vread_formatted_output_from_file_08006174_r(*(undefined4 *)PTR__impure_ptr_08006194, file_pointer, format_string, &stack_arg_1, file_pointer, &stack_arg_1);\n  return return_value;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "read_formatted_output_from_file_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "check_terminal_08007028",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_terminal_08007028(int *error_code, int file_descriptor)\n{\n  undefined *error_ptr;\n  int is_terminal;\n  error_ptr = PTR_errno_08007044;\n  *(undefined4 *)PTR_errno_08007044 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_terminal_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "__aeabi_drsub",
                "Compute",
                "printFloat",
                "readThermocouple",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_interrupt_priority_08002494",
                "IRQn_Type_conflict": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "group_priority_bits",
                "uVar3": "group_priority",
                "DAT_080024f0": "PTR_DAT_080024f0",
                "DAT_080024f4": "PTR_DAT_080024f4"
            },
            "code": "void set_interrupt_priority_08002494(IRQn_Type_conflict irq, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint8_t irq_num = (uint8_t)irq;\n  uint8_t group_priority_bits = (uint8_t)(*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint8_t group_priority = 7 - group_priority_bits;\n  if (group_priority > 3) {\n    group_priority = 4;\n  }\n  if (group_priority_bits + 4 < 7) {\n    group_priority_bits = 0;\n  }\n  else {\n    group_priority_bits = group_priority_bits - 3;\n  }\n  uint32_t priority = (preempt_priority & ((1 << (group_priority & 0xff)) - 1U)) << (group_priority_bits & 0xff) |\n          ((1 << (group_priority_bits & 0xff)) - 1U & sub_priority);\n  if ((int)irq_num < 0) {\n    *(char *)(DAT_080024f4 + (irq_num & 0xf)) = (char)(priority << 4);\n  }\n  else {\n    *(char *)(irq_num + 0xe000e400) = (char)(priority << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "SystemClock_Config",
                "uart_attach_tx_callback",
                "HAL_InitTick",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar4;\n  GPIO_TypeDef *pGVar5;\n  uint32_t uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c);\n    }\n    else {\n      pUVar4 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar4;\n      pUVar3 = DAT_08005214;\n      pUVar2 = DAT_08005210;\n      pUVar1 = DAT_0800520c;\n      if (pUVar4 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (pUVar4 == DAT_0800520c) {\n          DAT_0800520c[0x7b7].BRR = DAT_0800520c[0x7b7].BRR | 0x4000;\n          pUVar1[0x7b7].BRR = pUVar1[0x7b7].BRR & 0xffffbfff;\n          pUVar1[0x7b7].CR3 = pUVar1[0x7b7].CR3 | 0x4000;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar4 == DAT_08005210) {\n          DAT_08005210[0x106e].BRR = DAT_08005210[0x106e].BRR | 0x20000;\n          pUVar2[0x106e].BRR = pUVar2[0x106e].BRR & 0xfffdffff;\n          pUVar2[0x106e].CR3 = pUVar2[0x106e].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar4 == DAT_08005214) {\n          DAT_08005214[0x1049].CR3 = DAT_08005214[0x1049].CR3 | 0x40000;\n          pUVar3[0x1049].CR3 = pUVar3[0x1049].CR3 & 0xfffbffff;\n          pUVar3[0x104a].DR = pUVar3[0x104a].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08005228 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "pinmap_peripheral",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "iprintf",
                "HAL_UART_Init"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_uart_handler_index_080055bc",
                "huart": "uart_handle",
                "uVar1": "index"
            },
            "code": "uint8_t find_uart_handler_index_080055bc(UART_HandleTypeDef *uart_handle)\n{\n  uint8_t index = 0;\n  if (uart_handle == NULL) {\n    index = 5;\n  }\n  else {\n    while (index < 5) {\n      if (uart_handle == *(UART_HandleTypeDef **)(PTR_uart_handlers_080055dc + index * 4)) {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "find_uart_handler_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "update_output_limits_08001960",
                "this": "pid",
                "Min": "min_output",
                "Max": "max_output",
                "iVar1": "min_comparison_result",
                "pdVar2": "output",
                "uVar3": "output_sum",
                "uVar4": "output_sum",
                "uVar5": "outMax",
                "uVar6": "outMax"
            },
            "code": "void update_output_limits_08001960(PID *pid, double min_output, double max_output) {\n    int min_comparison_result = __aeabi_dcmpge(max_output, min_output);\n    if (min_comparison_result == 0) {\n        pid->outMin = max_output;\n        pid->outMax = min_output;\n        if (pid->inAuto) {\n            double *output = pid->myOutput;\n            int output_below_min = __aeabi_dcmplt(output[0], output[1], min_output, min_output);\n            if (output_below_min == 0) {\n                int output_above_max = __aeabi_dcmpgt(output[0], output[1], max_output, max_output);\n                if (output_above_max != 0) {\n                    output[0] = max_output;\n                    output[1] = max_output;\n                }\n            } else {\n                output[0] = min_output;\n                output[1] = min_output;\n            }\n            double output_sum = pid->outputSum;\n            int output_sum_above_max = __aeabi_dcmpgt(output_sum, output_sum, max_output, max_output);\n            if (output_sum_above_max != 0) {\n                pid->outputSum = max_output;\n            }\n            int output_sum_below_min = __aeabi_dcmplt(output_sum, output_sum, min_output, min_output);\n            if (output_sum_below_min != 0) {\n                pid->outputSum = min_output;\n            }\n        }\n    }\n}",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "update_output_limits_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "find_pin_for_peripheral_08004ca2",
                "PVar1": "pin_name"
            },
            "code": "PinName_conflict find_pin_for_peripheral_08004ca2(void *peripheral, PinMap_conflict *map) {\n  PinName_conflict pin_name;\n  \n  if (peripheral != NULL) {\n    pin_name = pinmap_find_pin(peripheral, map);\n    return pin_name;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "find_pin_for_peripheral_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "get_gpio_pin_state_08002810",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PTR_GPIO_TypeDef": "GPIO_TypeDef",
                "PTR_uint16_t": "uint16_t",
                "DAT_08003000": "GPIO_PIN_RESET",
                "DAT_08003001": "GPIO_PIN_SET"
            },
            "code": "GPIO_PinState get_gpio_pin_state_08002810(PTR_GPIO_TypeDef *gpio, PTR_uint16_t pin)\n{\n  if ((pin & gpio->IDR) == 0) {\n    return DAT_08003000;\n  }\n  return DAT_08003001;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "digital_io_read"
            ],
            "imported": false,
            "current_name": "get_gpio_pin_state_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "stop_adc_conversion_0800224c",
                "*hadc": "*adc_handle",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef_conflict stop_adc_conversion_0800224c(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (adc_handle == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    adc_handle->State |= 2;\n    status = ADC_ConversionStop_Disable(adc_handle);\n    if (status == HAL_OK) {\n      adc_handle->Instance->SR = 0xffffffe0;\n      adc_handle->Instance->CR1 = ADC_CR1_RESET_VALUE & adc_handle->Instance->CR1;\n      adc_handle->Instance->CR2 = ADC_CR2_RESET_VALUE & adc_handle->Instance->CR2;\n      adc_handle->Instance->SMPR1 &= 0xff000000;\n      adc_handle->Instance->SMPR2 &= 0xc0000000;\n      adc_handle->Instance->JOFR1 &= 0xfffff000;\n      adc_handle->Instance->JOFR2 &= 0xfffff000;\n      adc_handle->Instance->JOFR3 &= 0xfffff000;\n      adc_handle->Instance->JOFR4 &= 0xfffff000;\n      adc_handle->Instance->HTR &= 0xfffff000;\n      adc_handle->Instance->LTR &= 0xfffff000;\n      adc_handle->Instance->SQR1 &= 0xff000000;\n      adc_handle->Instance->SQR2 &= 0xc0000000;\n      adc_handle->Instance->SQR3 &= 0xc0000000;\n      adc_handle->Instance->JSQR &= 0xffc00000;\n      HAL_ADC_MspDeInit(adc_handle);\n      adc_handle->ErrorCode = 0;\n      adc_handle->State = 0;\n    }\n    adc_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_adc_conversion_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_uart_transmit_complete_080054b0",
                "obj": "serial",
                "HVar1": "uart_state"
            },
            "code": "bool is_uart_transmit_complete_080054b0(serial_t *serial) {\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(*(UART_HandleTypeDef **)(PTR_uart_handlers_080054d0 + (uint)serial->index * 4));\n  return (uart_state & 0x21U) == 0x21;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "calculate_signal_08006f00",
                "__sig": "signal",
                "iVar1": "result",
                "_FUN_08006f00_r": "_calculate_signal_r"
            },
            "code": "int calculate_signal_08006f00(int signal) {\n  int result = _calculate_signal_08006f00_r(*(undefined4 *)PTR__impure_ptr_08006f0c, signal);\n  return result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "calculate_signal_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "__thiscall PID::FUN_080016b4": "calculate_output",
                "this": "self",
                "inAuto": "in_auto",
                "lastTime": "last_time",
                "SampleTime": "sample_time",
                "myInput": "input_ptr",
                "mySetpoint": "setpoint_ptr",
                "lastInput": "last_input",
                "outputSum": "output_sum",
                "pOnE": "proportional_on_error",
                "kp": "proportional_gain",
                "ki": "integral_gain",
                "kd": "derivative_gain",
                "outMin": "output_min",
                "outMax": "output_max",
                "myOutput": "output_ptr",
                "FUN_080016b4": "PID::calculate_output_080016b4"
            },
            "code": "bool __thiscall PID::calculate_output_080016b4(PID *this)\n{\n  bool in_auto = this->inAuto;\n  if (!in_auto) {\n    return false;\n  }\n  uint32_t current_time = millis();\n  if (current_time - this->lastTime < this->SampleTime) {\n    return false;\n  }\n  double input = *(double *)this->myInput;\n  double setpoint = *(double *)this->mySetpoint;\n  double error = setpoint - input;\n  double d_input = input - this->lastInput;\n  double output = 0.0;\n  output += this->kp * error;\n  output += this->ki * this->outputSum;\n  output -= this->kd * d_input;\n  if (output > this->outMax) {\n    output = this->outMax;\n  }\n  else if (output < this->outMin) {\n    output = this->outMin;\n  }\n  *(double *)this->myOutput = output;\n  this->lastInput = input;\n  this->lastTime = current_time;\n  this->outputSum += error;\n  return true;\n}",
            "called": [
                "__aeabi_dadd",
                "millis",
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "PID::calculate_output_080016b4"
        },
        "FUN_08004e48": {
            "renaming": {
                "FUN_08004e48": "handle_timer_interrupt_08004e48",
                "PTR_timer_handles_08004e58": "PTR_timer_handles_08004e58",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler",
                "current_timer_handle": "current_timer_handle"
            },
            "code": "void handle_timer_interrupt_08004e48(void)\n{\n  TIM_HandleTypeDef* current_timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08004e58 + 8);\n  if (current_timer_handle != NULL) {\n    HAL_TIM_IRQHandler(current_timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e48",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e48"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "PID::FUN_080018f8": "update_pid_parameters",
                "this": "pid",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "in_stack_ffffffec": "on_time",
                "this->pOn": "pid->pOn",
                "FUN_080018f8": "update_pid_parameters_080018f8"
            },
            "code": "void update_pid_parameters_080018f8(PID *pid, double proportional_gain, double integral_gain, double derivative_gain)\n{\n  double on_time = pid->pOn;\n  double integral_term = integral_gain * on_time;\n  double derivative_term = derivative_gain * on_time;\n  update_pid_parameters_080018f8(pid, proportional_gain, integral_gain, integral_term, derivative_term);\n  return;\n}",
            "called": [
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "update_pid_parameters_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "read_digital_pin_08005890",
                "ulPin": "pin",
                "_Var1": "is_pin_configured",
                "port": "port",
                "uVar2": "pin_value",
                "uVar3": "pin_index"
            },
            "code": "int read_digital_pin_08005890(uint32_t pin) {\n  bool is_pin_configured;\n  GPIO_TypeDef *port;\n  uint32_t pin_index;\n  uint8_t pin_value;\n  if (pin < 0x3c) {\n    pin_index = (uint32_t)(char)PTR_digitalPin_080058d8[pin];\n  }\n  else {\n    pin_index = 0xffffffff;\n  }\n  if (pin_index == 0xffffffff) {\n    pin_value = 0;\n  }\n  else {\n    is_pin_configured = is_pin_configured((PinName_conflict)pin_index,(uint32_t *)PTR_g_digPinConfigured_080058dc);\n    if (is_pin_configured) {\n      port = get_GPIO_Port((pin_index << 0x18) >> 0x1c);\n      pin_value = digital_io_read(port,1 << (pin_index & 0xf) & 0xffff) & 0xff;\n    }\n    else {\n      pin_value = 0;\n    }\n  }\n  if (pin_value != 0) {\n    pin_value = 1;\n  }\n  return pin_value;\n}",
            "called": [
                "is_pin_configured",
                "get_GPIO_Port",
                "digital_io_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "readData",
                "loop"
            ],
            "imported": false,
            "current_name": "read_digital_pin_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "print_convert_base_08005da0",
                "b": "input",
                "sVar1": "output"
            },
            "code": "size_t __thiscall print_convert_base_08005da0(Print *this, uchar input, int base) {\n  size_t output;\n  output = print_convert_base_08005da0(this, (uint)input, base);\n  return output;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_convert_base_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_pin_function_08004cb2",
                "pin": "desired_pin",
                "map": "pin_map"
            },
            "code": "uint32_t find_pin_function_08004cb2(PinName_conflict desired_pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == desired_pin) break;\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "enable_i2c_listen_interrupt_08004ef4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_object",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_interrupt_08004ef4(I2C_HandleTypeDef *i2c_handle)\\n{\\n  i2c_t *i2c_object = get_i2c_object(i2c_handle);\\n  if (i2c_object->is_master == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handle);\\n  }\\n  return;\\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_interrupt_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_08001294": "set_row_offsets",
                "this": "lcd",
                "row0": "first_row_offset",
                "row1": "second_row_offset",
                "row2": "third_row_offset",
                "row3": "fourth_row_offset",
                "_row_offsets": "row_offsets",
                "uint8_t": "unsigned 8-bit integer",
                "FUN_08001294": "set_row_offsets_08001294"
            },
            "code": "void set_row_offsets_08001294(LiquidCrystal *lcd, int first_row_offset, int second_row_offset, int third_row_offset, int fourth_row_offset) {\n  lcd->row_offsets[0] = (uint8_t)first_row_offset;\n  lcd->row_offsets[1] = (uint8_t)second_row_offset;\n  lcd->row_offsets[2] = (uint8_t)third_row_offset;\n  lcd->row_offsets[3] = (uint8_t)fourth_row_offset;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_row_offsets_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "stop_and_disable_conversion_08002384",
                "*hadc": "*hadc",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict",
                "HVar1": "status",
                "uVar2": "periph_clk_freq",
                "uVar3": "current_time",
                "pAVar4": "adc_instance",
                "uVar5": "system_core_clk",
                "wait_loop_index": "wait_time"
            },
            "code": "HAL_StatusTypeDef_conflict stop_and_disable_conversion_08002384(ADC_HandleTypeDef *hadc)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t periph_clk_freq, wait_time;\n    ADC_TypeDef *adc_instance;\n\n    if (hadc->Lock == HAL_LOCKED) {\n        return HAL_BUSY;\n    }\n\n    hadc->Lock = HAL_LOCKED;\n    status = ADC_ConversionStop_Disable(hadc);\n\n    if (status == HAL_OK) {\n        hadc->State &= 0xffffeefd | 2;\n        periph_clk_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n        wait_time = (uint32_t)(SystemCoreClock / periph_clk_freq) << 1;\n\n        for (uint32_t i = 0; i < wait_time; i++);\n\n        ADC_Enable(hadc);\n        hadc->Instance->CR2 |= 8;\n        uint32_t start_time = HAL_GetTick();\n\n        while ((hadc->Instance->CR2 & 8) != 0) {\n            uint32_t current_time = HAL_GetTick();\n            if (current_time - start_time > 10) {\n                hadc->State &= 0xffffffed | 0x10;\n                hadc->Lock = HAL_UNLOCKED;\n                return HAL_ERROR;\n            }\n        }\n\n        adc_instance = hadc->Instance;\n        adc_instance->CR2 |= 4;\n        start_time = HAL_GetTick();\n\n        while ((hadc->Instance->CR2 & 4) != 0) {\n            uint32_t current_time = HAL_GetTick();\n            if (current_time - start_time > 10) {\n                hadc->State &= 0xffffffed | 0x10;\n                hadc->Lock = HAL_UNLOCKED;\n                return HAL_ERROR;\n            }\n        }\n\n        hadc->State &= 0xfffffffc | 1;\n    }\n\n    hadc->Lock = HAL_UNLOCKED;\n    return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_and_disable_conversion_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "receive_uart_data_08005650",
                "huart": "uart_handle",
                "tmpval": "temp_value"
            },
            "code": "void receive_uart_data_08005650(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t temp_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "HAL_UART_IRQHandler",
                "UART_DMAAbortOnError"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08005650"
        },
        "FUN_08006fb6": {
            "renaming": {
                "FUN_08006fb6": "close_file_descriptor_08006fb6",
                "param_1": "fd",
                "param_2": "offset"
            },
            "code": "void close_file_descriptor_08006fb6(undefined4 fd, int offset) {\n    _close_r(fd, (int)*(short *)(offset + 0xe));\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fb6",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08006fb6"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "receive_byte_08002ad8",
                "hi2c": "i2c_handle",
                "puVar1": "data_ptr",
                "HAL_StatusTypeDef_conflict": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict receive_byte_08002ad8(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *data_ptr;\n  \n  if (i2c_handle->XferCount != 0) {\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_byte_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "set_uart_config_08004204",
                "*huart": "*uart_handle",
                "uVar1": "baud_rate_divider",
                "uVar2": "apb_index",
                "uVar3": "pclk_freq",
                "uVar4": "pclk_freq",
                "uVar5": "pclk_freq",
                "uVar6": "pclk_freq",
                "uVar7": "pclk_freq",
                "uVar8": "baud_rate",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "pUVar12": "uart_instance",
                "USART_TypeDef": "uart_instance",
                "CR1": "uart_instance->CR1",
                "CR2": "uart_instance->CR2",
                "CR3": "uart_instance->CR3",
                "BRR": "uart_instance->BRR",
                "Init": "uart_handle->Init",
                "StopBits": "uart_handle->Init.StopBits",
                "WordLength": "uart_handle->Init.WordLength",
                "Parity": "uart_handle->Init.Parity",
                "Mode": "uart_handle->Init.Mode",
                "HwFlowCtl": "uart_handle->Init.HwFlowCtl"
            },
            "code": "void set_uart_config_08004204(UART_HandleTypeDef* uart_handle)\n{\n  uint32_t pclk_freq;\n  uint32_t baud_rate_divider;\n  uint32_t apb_index;\n  uint32_t apb_freq;\n  uint32_t baud_rate = uart_handle->Init.BaudRate;\n  USART_TypeDef* uart_instance = uart_handle->Instance;\n  \n  // Set stop bits\n  uart_instance->CR2 = (uart_instance->CR2 & 0xffffcfff) | uart_handle->Init.StopBits;\n  \n  // Set word length, parity, and mode\n  uart_instance->CR1 = (uart_handle->Init.WordLength | uart_handle->Init.Parity | uart_handle->Init.Mode) | (uart_instance->CR1 & 0xffffe9f3);\n  \n  // Set hardware flow control\n  uart_instance->CR3 = (uart_instance->CR3 & 0xfffffcff) | uart_handle->Init.HwFlowCtl;\n  \n  // Calculate baud rate divider based on APB frequency and baud rate\n  if(uart_instance == USART1 || uart_instance == USART6)\n  {\n    apb_index = 2;\n  }\n  else\n  {\n    apb_index = 1;\n  }\n  \n  if(apb_index == 1)\n  {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  else\n  {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  \n  apb_freq = pclk_freq * 2;\n  baud_rate_divider = (apb_freq / baud_rate);\n  baud_rate_divider = (baud_rate_divider >> 1) + (baud_rate_divider & 1);\n  \n  // Set baud rate\n  uart_instance->BRR = (baud_rate_divider << 4);\n}\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "print_double_08005da8",
                "this": "printer",
                "number": "number",
                "digits": "digits",
                "iVar1": "is_nan",
                "n": "int_part",
                "sVar2": "int_printed",
                "sVar3": "printed",
                "bVar4": "i",
                "lVar5": "int_part",
                "uVar6": "decimal_part",
                "uVar7": "decimal_digit"
            },
            "code": "size_t print_double_08005da8(Print* printer, double number, uint8_t digits) {\\n\\\n    int is_nan = __unorddf2();\\n\\\n    if (is_nan == 0) {\\n\\\n        is_nan = __unorddf2();\\n\\\n        if ((is_nan == 0) && (__aeabi_dcmple(number, 0.0) == 0)) {\\n\\\n            return print(printer, PTR_DAT_08005f20);\\n\\\n        }\\n\\\n        else {\\n\\\n            int is_greater = __aeabi_dcmpgt(number, 0.0);\\n\\\n            if (is_greater == 0) {\\n\\\n                int is_less = __aeabi_dcmplt(number, 0.0);\\n\\\n                if (is_less == 0) {\\n\\\n                    return 0;\\n\\\n                }\\n\\\n                else {\\n\\\n                    size_t printed = print(printer, \"-\");\\n\\\n                    long long int_part = (long long) DAT_08005f14 << 0x20;\\n\\\n                    for (uint8_t i = 0; i < digits; i++) {\\n\\\n                        int_part = __divdf3((int)int_part, (int)((unsigned long long)int_part >> 0x20), 0, DAT_08005f18);\\n\\\n                    }\\n\\\n                    double decimal_part = __aeabi_dadd(number, -int_part);\\n\\\n                    uint64_t decimal_digits = 1;\\n\\\n                    for (uint8_t i = 0; i < digits; i++) {\\n\\\n                        decimal_part *= 10.0;\\n\\\n                        decimal_digits *= 10;\\n\\\n                    }\\n\\\n                    decimal_part += 0.5;\\n\\\n                    decimal_part = (double)((uint64_t)decimal_part / decimal_digits);\\n\\\n                    size_t int_printed = print(printer, (unsigned long long)int_part, 10);\\n\\\n                    printed += int_printed;\\n\\\n                    if (digits != 0) {\\n\\\n                        size_t decimal_point_printed = print(printer, PTR_DAT_08005f28);\\n\\\n                        printed += decimal_point_printed;\\n\\\n                    }\\n\\\n                    for (uint8_t i = 0; i < digits; i++) {\\n\\\n                        decimal_part *= 10.0;\\n\\\n                        uint64_t decimal_digit = (uint64_t)decimal_part;\\n\\\n                        size_t decimal_printed = print(printer, decimal_digit, 10);\\n\\\n                        printed += decimal_printed;\\n\\\n                        decimal_part -= (double)decimal_digit;\\n\\\n                    }\\n\\\n                    return printed;\\n\\\n                }\\n\\\n            }\\n\\\n            else {\\n\\\n                return print(printer, PTR_DAT_08005f24);\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    else {\\n\\\n        return print(printer, PTR_DAT_08005f1c);\\n\\\n    }\\n\\\n}",
            "called": [
                "__unorddf2",
                "__aeabi_dadd",
                "print",
                "__floatsidf",
                "print",
                "__divdf3",
                "print",
                "__subdf3",
                "__aeabi_dcmplt",
                "__fixunsdfsi",
                "__fixdfsi",
                "__muldf3",
                "__floatunsidf",
                "__aeabi_dcmpgt",
                "print",
                "__aeabi_dcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_double_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "reset_uart_state_080045fe",
                "huart": "uart",
                "Instance": "instance",
                "CR1": "control_register_1",
                "gState": "global_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY",
                "HAL_UART_TxCpltCallback": "UART_transmit_complete_callback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef reset_uart_state_080045fe(UART_HandleTypeDef *uart)\n{\n  // Clear the UART control register bit 6 to disable the transmitter\n  uart->Instance->CR1 &= ~(1 << 6);\n  // Set the UART global state to ready\n  uart->gState = HAL_UART_STATE_READY;\n  // Call the UART transmit complete callback function\n  HAL_UART_TxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_state_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "print_float_08005f2c",
                "this": "print_obj",
                "n": "number",
                "digits": "digits",
                "sVar1": "total_len",
                "in_stack_fffffff4": "num",
                "FUN_08005f2cFloat": "snprintf",
                "CONCAT44": "",
                "uint": "uint32_t"
            },
            "code": "size_t print_float_08005f2c(Print *print_obj, double number, int digits) {\n  uint32_t num = (uint32_t)number;\n  double decimal = number - num;\n  size_t num_len = snprintf(NULL, 0, \"%d\", num);\n  size_t decimal_len = snprintf(NULL, 0, \"%.*f\", digits, decimal);\n  char num_str[num_len + 1];\n  char decimal_str[decimal_len + 1];\n  snprintf(num_str, num_len + 1, \"%d\", num);\n  snprintf(decimal_str, decimal_len + 1, \"%.*f\", digits, decimal);\n  size_t total_len = num_len + decimal_len + 1;\n  char result[total_len + 1];\n  snprintf(result, total_len + 1, \"%s.%s\", num_str, decimal_str);\n  return print_obj->write(result, total_len);\n}",
            "called": [
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "loop",
                "println"
            ],
            "imported": false,
            "current_name": "print_float_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_uart_rx_callback_080055e0",
                "*huart": "*uart_handle",
                "bVar1": "uart_index",
                "uVar2": "callback_index",
                "(uint)bVar1": "(uint8_t)uart_index",
                "PTR_rx_callback_080055fc": "PTR_rx_callback_functions",
                "PTR_rx_callback_obj_08005600": "PTR_rx_callback_objects",
                "code": "callback_function",
                "*(code**)(PTR_rx_callback_080055fc + uVar2 * 4)": "*(code**)(PTR_rx_callback_functions + callback_index * 4)",
                "undefined4": "void",
                "*(undefined4 *)(PTR_rx_callback_obj_08005600 + uVar2 * 4)": "*(void**)(PTR_rx_callback_objects + callback_index * 4)"
            },
            "code": "void execute_uart_rx_callback_080055e0(UART_HandleTypeDef* uart_handle)\n{\n  uint8_t uart_index = uart_get_index(uart_handle);\n  uint8_t callback_index = (uint8_t)uart_index;\n  if (callback_index < 5) {\n    code* callback_function = *(code**)(PTR_rx_callback_080055fc + callback_index * 4);\n    void* callback_object = *(void**)(PTR_rx_callback_obj_08005600 + callback_index * 4);\n    (*callback_function)(callback_object);\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "execute_uart_rx_callback_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "print_double_with_precision_08005f40",
                "this": "printer",
                "num": "number",
                "digits": "precision",
                "in_stack_ffffffec": "int_part",
                "sVar1": "bytes_written",
                "sVar2": "total_bytes_written"
            },
            "code": "size_t print_double_with_precision_08005f40(Print *printer, double number, int precision) {\n    size_t sVar1;\n    size_t sVar2;\n    uint32_t int_part = (uint32_t)number;\n    uint32_t frac_part = (uint32_t)((number - int_part) * pow(10, precision));\n    double modified_num = (double)int_part + (double)frac_part / pow(10, precision);\n    sVar1 = print(printer, modified_num, precision);\n    sVar2 = print_double_with_precision_08005f40(printer, modified_num);\n    return sVar2 + sVar1;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_double_with_precision_08005f40"
        },
        "FUN_08006f10": {
            "renaming": {
                "FUN_08006f10": "kill_process_if_running_08006f10",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_number",
                "puVar1": "error_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_running_08006f10(int *error_code, int process_id, int signal_number)\n{\n  undefined *error_ptr;\n  int kill_result;\n  error_ptr = PTR_errno_08006f30;\n  *(undefined4 *)PTR_errno_08006f30 = 0;\n  kill_result = _kill(process_id, signal_number);\n  if ((kill_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f10",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_08006f10"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "configure_ADC_0800213c",
                "hadc": "adc",
                "HVar1": "status",
                "uVar2": "u_var_2",
                "uVar3": "u_var_3",
                "uVar4": "u_var_4",
                "uVar5": "u_var_5",
                "state_bits": "state_bits",
                "cr1_bits": "cr1_bits",
                "cr2_bits": "cr2_bits",
                "sqr1_bits": "sqr1_bits"
            },
            "code": "HAL_StatusTypeDef_conflict configure_ADC_0800213c(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t state_bits;\n  uint32_t cr1_bits;\n  uint32_t cr2_bits;\n  uint32_t sqr1_bits;\n  uint32_t uVar5;\n  uint uVar3;\n  uint uVar4;\n  uint32_t uVar2;\n  \n  if (adc == NULL) {\n    return HAL_ERROR;\n  }\n  if (adc->State == HAL_ADC_STATE_RESET) {\n    adc->ErrorCode = HAL_ADC_ERROR_NONE;\n    adc->Lock = HAL_UNLOCKED;\n    HAL_ADC_MspInit(adc);\n  }\n  status = ADC_ConversionStop_Disable(adc);\n  state_bits = adc->State & HAL_ADC_STATE_REG_CONFIGURED;\n  if ((state_bits == 0) && (status == HAL_OK)) {\n    adc->State = (adc->State & ~HAL_ADC_STATE_MASK) | HAL_ADC_STATE_READY;\n    uVar5 = adc->Init.ContinuousConvMode;\n    uVar3 = adc->Init.DataAlign | adc->Init.ExternalTrigConv | (uVar5 << 1);\n    uVar2 = adc->Init.ScanConvMode;\n    if (uVar2 == ADC_SCAN_DISABLE) {\n      uVar4 = 0x100;\n    }\n    else if (uVar2 == ADC_SCAN_ENABLE) {\n      uVar4 = 0x100;\n    }\n    if (adc->Init.DiscontinuousConvMode == ENABLE) {\n      if (uVar5 == DISABLE) {\n        uVar4 |= ((adc->Init.NbrOfDiscConversion - 1) * 0x2000) | 0x800;\n      }\n      else {\n        adc->State |= HAL_ADC_STATE_DISCONVERED;\n        adc->ErrorCode |= HAL_ADC_ERROR_INVALID_DISC_MODE;\n      }\n    }\n    cr1_bits = adc->Instance->CR1 & 0xFFFF16FF;\n    adc->Instance->CR1 = uVar4 | cr1_bits;\n    cr2_bits = adc->Instance->CR2 & DAT_08002244;\n    adc->Instance->CR2 = cr2_bits | uVar3;\n    uVar2 = adc->Init.ScanConvMode;\n    if ((uVar2 == ADC_SCAN_DISABLE) || (uVar2 == ADC_SCAN_ENABLE)) {\n      sqr1_bits = ((adc->Init.NbrOfConversion - 1) * 0x100000);\n    }\n    else {\n      sqr1_bits = 0;\n    }\n    adc->Instance->SQR1 = sqr1_bits | (adc->Instance->SQR1 & 0xFF0FFFFF);\n    if (uVar3 != (DAT_08002248 & adc->Instance->CR2)) {\n      adc->State = (adc->State & ~HAL_ADC_STATE_MASK) | HAL_ADC_STATE_ERROR_CONFIG;\n      adc->ErrorCode |= HAL_ADC_ERROR_INVALID_CONFIG;\n      return HAL_ERROR;\n    }\n    adc->ErrorCode = HAL_ADC_ERROR_NONE;\n    adc->State = (adc->State & ~HAL_ADC_STATE_MASK) | HAL_ADC_STATE_REG_CONFIGURED;\n    return HAL_OK;\n  }\n  adc->State |= HAL_ADC_STATE_ERROR_CONFIG;\n  return HAL_ERROR;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_ADC_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_uart_state_ready_0800455a",
                "*huart": "uart_handle",
                "*pData": "data",
                "Size": "size",
                "huart->gState": "uart_handle->gState",
                "pData == (uint8_t *)0x0": "data == NULL",
                "Size == 0": "size == 0",
                "huart->Lock": "uart_handle->Lock",
                "huart->pTxBuffPtr": "uart_handle->pTxBuffPtr",
                "huart->TxXferSize": "uart_handle->TxXferSize",
                "huart->TxXferCount": "uart_handle->TxXferCount",
                "huart->ErrorCode": "uart_handle->ErrorCode",
                "huart->gState = HAL_UART_STATE_BUSY_TX": "uart_handle->gState = HAL_UART_STATE_BUSY_TX",
                "huart->Lock = HAL_UNLOCKED": "uart_handle->Lock = HAL_UNLOCKED",
                "huart->Instance->CR1": "uart_handle->Instance->CR1"
            },
            "code": "HAL_StatusTypeDef_conflict check_uart_state_ready_0800455a(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size) {\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == (uint8_t *)0x0) {\n        return HAL_ERROR;\n    }\n    if (size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n        uart_handle->pTxBuffPtr = data;\n        uart_handle->TxXferSize = size;\n        uart_handle->TxXferCount = size;\n        uart_handle->ErrorCode = 0;\n        uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n        uart_handle->Lock = HAL_UNLOCKED;\n        uart_handle->Instance->CR1 = uart_handle->Instance->CR1 | 0x80;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "check_uart_state_ready_0800455a"
        },
        "FUN_08004d30": {
            "renaming": {
                "FUN_08004d30": "handle_rtc_alarm_interrupt_08004d30",
                "PTR_RtcHandle_08004d3c": "rtc_handle"
            },
            "code": "void handle_rtc_alarm_interrupt_08004d30(void)\n{\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_08004d3c);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d30",
            "calling": [],
            "imported": false,
            "current_name": "handle_rtc_alarm_interrupt_08004d30"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_controller_direction_08001a66",
                "this": "self",
                "Direction": "new_direction",
                "dVar1": "new_value",
                "inAuto": "in_auto",
                "controllerDirection": "controller_direction",
                "kp": "proportional_gain",
                "ki": "integral_gain",
                "kd": "derivative_gain"
            },
            "code": "void __thiscall update_controller_direction_08001a66(PID *this, int new_direction)\n{\n  double new_kp, new_ki, new_kd;\n  if ((this->in_auto != false) && (this->controller_direction != new_direction)) {\n    new_kp = -this->kp;\n    new_ki = -this->ki;\n    new_kd = -this->kd;\n    this->kp = new_kp;\n    this->ki = new_ki;\n    this->kd = new_kd;\n  }\n  this->controller_direction = new_direction;\n  return;\n}",
            "called": [
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "update_controller_direction_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_system_core_clock_08003c44",
                "PTR_SystemCoreClock_08003c4c": "system_core_clock_ptr"
            },
            "code": "uint32_t get_system_core_clock_08003c44(void)\n{\n  uint32_t* PTR_SystemCoreClock_08003c4c = (uint32_t*) PTR_SystemCoreClock_08003c4c;\n  return *PTR_SystemCoreClock_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "SystemClock_Config",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "imported": false,
            "current_name": "get_system_core_clock_08003c44"
        },
        "FUN_08006074": {
            "renaming": {
                "FUN_08006074": "handle_gpio_exti_irq_08006074"
            },
            "code": "void handle_gpio_exti_irq_08006074(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006074",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_08006074"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "send_i2c_data_080028d2",
                "*hi2c": "*i2c_handle",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "hi2c->Devaddress": "i2c_handle->Devaddress",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "HAL_StatusTypeDef send_i2c_data_080028d2(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t device_address = i2c_handle->Devaddress & 0xff;\n  i2c_handle->Instance->DR = device_address;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_i2c_data_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08000a18(void)\n{\n  char current_char;\n  __aeabi_cdrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "loop"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "pin": "digital_pin",
                "obj": "serial_debug_obj",
                "PVar1": "tx_pin",
                "pvVar2": "peripheral_obj",
                "PTR_digitalPin_080053c4": "digitalPin_1",
                "PTR_PinMap_UART_TX_080053c8": "PinMap_UART_TX",
                "PTR_PinMap_UART_RX_080053cc": "PinMap_UART_RX",
                "PTR_serial_debug_080053d0": "serial_debug"
            },
            "code": "void initialize_uart_08005384(void)\n{\n  PinName_conflict digital_pin;\n  undefined *PTR_serial_debug_080053d0_obj;\n  PinName_conflict tx_pin;\n  void *peripheral_obj;\n\n  digital_pin = PTR_digitalPin_080053c4;\n  peripheral_obj = pinmap_peripheral(digital_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n  if (peripheral_obj != (void *)0x0) {\n    peripheral_obj = pinmap_peripheral(digital_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n    tx_pin = pinmap_pin(peripheral_obj, (PinMap_conflict *)PTR_PinMap_UART_RX_080053cc);\n    PTR_serial_debug_080053d0_obj = PTR_serial_debug_080053d0;\n    PTR_serial_debug_080053d0[0x59] = tx_pin;\n    PTR_serial_debug_080053d0_obj[0x58] = digital_pin;\n    *(undefined4 *)(PTR_serial_debug_080053d0_obj + 0x48) = 0x2580;\n    *(undefined4 *)(PTR_serial_debug_080053d0_obj + 0x54) = 0;\n    *(undefined4 *)(PTR_serial_debug_080053d0_obj + 0x4c) = 0;\n    *(undefined4 *)(PTR_serial_debug_080053d0_obj + 0x50) = 0;\n    uart_init((serial_t *)PTR_serial_debug_080053d0_obj);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "pinmap_peripheral",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_tx_pin_08005b3c",
                "this": "serial",
                "_tx": "tx_pin_index",
                "PVar1": "tx_pin",
                "PTR_digitalPin_08005b50": "digital_pins"
            },
            "code": "void __thiscall set_tx_pin_08005b3c(HardwareSerial *serial, uint32_t tx_pin_index)\n{\n  PinName tx_pin;\n  if (tx_pin_index < 0x3c) {\n    tx_pin = PTR_digitalPin_08005b50[tx_pin_index];\n  }\n  else {\n    tx_pin = NC;\n  }\n  (serial->_serial).pin_tx = tx_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_tx_pin_08005b3c"
        },
        "FUN_0800091c": {
            "renaming": {
                "FUN_0800091c": "check_parameters_0800091c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "bVar2": "is_param1_or_param3_not_zero",
                "bVar3": "is_param4_less_than_or_equal_to_param2"
            },
            "code": "uint check_parameters_0800091c(uint param1, uint param2, uint param3, uint param4)\n{\n  uint result;\n  bool is_param2_or_param4_negative;\n  bool is_param1_or_param3_not_zero;\n  bool are_param2_and_param4_equal;\n  bool are_param1_and_param3_equal;\n  bool is_xor_of_param2_and_param4_zero;\n  bool is_param4_less_than_or_equal_to_param2;\n  bool is_param3_less_than_or_equal_to_param1;\n  \n  is_param2_or_param4_negative = ((int)(param2 << 1) >> 0x15 == -1 || (int)(param4 << 1) >> 0x15 == -1);\n  is_param1_or_param3_not_zero = ((int)(param2 << 1) >> 0x15 == -1 && ((param1 | param2 << 0xc) != 0)) || (((int)(param4 << 1) >> 0x15 == -1 && ((param3 | param4 << 0xc) != 0)));\n  \n  if (is_param2_or_param4_negative && is_param1_or_param3_not_zero)\n  {\n    result = 0xffffffff;\n  }\n  else\n  {\n    are_param2_and_param4_equal = param2 == param4;\n    are_param1_and_param3_equal = param1 == param3;\n    is_xor_of_param2_and_param4_zero = (param2 ^ param4) == 0;\n    is_param4_less_than_or_equal_to_param2 = -1 < (int)(param2 ^ param4) && param4 <= param2;\n    \n    if (is_xor_of_param2_and_param4_zero)\n    {\n      is_param3_less_than_or_equal_to_param1 = param3 <= param1;\n      result = is_param3_less_than_or_equal_to_param1 ? 1 : 0xfffffffe;\n    }\n    else\n    {\n      result = is_param4_less_than_or_equal_to_param2 ? 1 : 0xfffffffe;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800091c",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_0800091c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "uart_handler_080046b8",
                "*huart": "*uart_handle",
                "HVar1": "hal_status",
                "uVar2": "cr1_register",
                "pUVar3": "usart_instance",
                "uVar4": "cr3_check",
                "uVar5": "sr_register"
            },
            "code": "void uart_handler_080046b8(UART_HandleTypeDef *huart) {\n  HAL_StatusTypeDef_conflict hal_status;\n  uint32_t sr_register;\n  USART_TypeDef *usart_instance;\n  uint32_t cr1_register;\n  uint32_t cr3_register;\n\n  usart_instance = huart->Instance;\n  sr_register = usart_instance->SR;\n  cr1_register = usart_instance->CR1;\n  cr3_register = usart_instance->CR3;\n\n  if (((sr_register & USART_SR_RXNE) == 0) && ((sr_register & USART_SR_IDLE) != 0)) && ((cr1_register & USART_CR1_IDLEIE) != 0)) {\n    UART_Receive_IT(huart);\n    return;\n  }\n\n  if (((sr_register & USART_SR_RXNE) == 0) || ((cr3_register & USART_CR3_EIE) == 0 && ((cr1_register & (USART_CR1_PEIE | USART_CR1_RXNEIE)) == 0))) {\n    if (((sr_register & USART_SR_TXE) != 0) && ((cr1_register & USART_CR1_TXEIE) != 0)) {\n      UART_Transmit_IT(huart);\n      return;\n    }\n    if (((sr_register & USART_SR_TC) != 0) && ((cr1_register & USART_CR1_TCIE) != 0)) {\n      UART_EndTransmit_IT(huart);\n    }\n  }\n  else {\n    if (((sr_register & USART_SR_PE) != 0) && ((cr1_register & USART_CR1_PEIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_PE;\n    }\n    if (((sr_register & USART_SR_FE) != 0) && ((cr3_register & USART_CR3_EIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_FE;\n    }\n    if (((sr_register & USART_SR_NE) != 0) && ((cr3_register & USART_CR3_EIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_NE;\n    }\n    if (((sr_register & USART_SR_ORE) != 0) && ((cr3_register & USART_CR3_EIE) != 0)) {\n      huart->ErrorCode |= HAL_UART_ERROR_ORE;\n    }\n    if (huart->ErrorCode != 0) {\n      if (((sr_register & USART_SR_IDLE) != 0) && ((cr1_register & USART_CR1_IDLEIE) != 0)) {\n        UART_Receive_IT(huart);\n      }\n      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) == 0) && ((usart_instance->CR3 & USART_CR3_DMAR) == 0)) {\n        HAL_UART_ErrorCallback(huart);\n        huart->ErrorCode = 0;\n        return;\n      }\n      UART_EndRxTransfer(huart);\n      usart_instance = huart->Instance;\n      if ((usart_instance->CR3 & USART_CR3_DMAR) == 0) {\n        HAL_UART_ErrorCallback(huart);\n        return;\n      }\n      usart_instance->CR3 &= ~USART_CR3_DMAR;\n      if (huart->hdmarx == NULL) {\n        HAL_UART_ErrorCallback(huart);\n        return;\n      }\n      huart->hdmarx->XferAbortCallback = uart_dma_abort;\n      hal_status = HAL_DMA_Abort_IT(huart->hdmarx);\n      if (hal_status != HAL_OK) {\n        (*huart->hdmarx->XferAbortCallback)(huart->hdmarx);\n        return;\n      }\n    }\n  }\n  return;\n}\n",
            "called": [
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT",
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "uart_handler_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_pin_name_conflict_08004c8a",
                "PinName_conflict": "PinName_conflict",
                "void *peripheral": "void *peripheral",
                "PinMap_conflict *map": "PinMap_conflict *map_array",
                "NC": "NC",
                "map": "map_array",
                "peripheral": "peripheral"
            },
            "code": "PinName_conflict find_pin_name_conflict_08004c8a(void *peripheral, PinMap_conflict *map_array){\n    while(true){\n        if(map_array->peripheral == (void*)0x0){\n            return NC;\n        }\n        if(map_array->peripheral == peripheral){\n            break;\n        }\n        map_array++;\n    }\n    return map_array->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "find_pin_name_conflict_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "adc_conversion_08001cd0",
                "*hadc": "hadc",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "pAVar5": "adc_instance",
                "Conversion_Timeout_CPU_cycles": "conversion_timeout_cpu_cycles",
                "HAL_GetTick": "HAL_GetTick",
                "SR": "ADC_FLAG_EOC",
                "LAB_08001de2": "conversion_complete",
                "State": "ADC_STATE_xxx",
                "Lock": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "PTR_SystemCoreClock_08001e2c": "PTR_SystemCoreClock_08001e2c",
                "uVar3": "sys_clk",
                "RCC_PERIPHCLK_ADC": "RCC_PERIPHCLK_ADC",
                "sample_time": "sample_time",
                "ADC_SAMPLETIME_xCYCLES": "ADC_SAMPLETIME_xCYCLES",
                "cpu_cycles": "cpu_cycles",
                "ADC_STATE_INJ_EOC": "ADC_STATE_INJ_EOC",
                "ADC_FLAG_EOC": "ADC_FLAG_EOC",
                "ADC_STATE_REG_EOC": "ADC_STATE_REG_EOC",
                "ADC_CR2_EOCS": "ADC_CR2_EOCS",
                "ADC_STATE_READY": "ADC_STATE_READY",
                "HAL_OK": "HAL_OK",
                "ADC_STATE_ERROR_INTERNAL": "ADC_STATE_ERROR_INTERNAL",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef_conflict adc_conversion_08001cd0(ADC_HandleTypeDef *hadc, uint32_t timeout) \n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t start_time = HAL_GetTick();\n  ADC_TypeDef *adc_instance = hadc->Instance;\n  uint32_t conversion_timeout_cpu_cycles = 0;\n  if ((adc_instance->CR2 & 0x100) == 0) {\n    if (((adc_instance->CR1 & 0x100) == 0) && ((adc_instance->SQR1 & 0xf00000) == 0)) {\n      do {\n        if ((hadc->Instance->SR & ADC_FLAG_EOC) != 0) goto conversion_complete;\n      } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - start_time <= timeout))));\n      hadc->State = hadc->State | ADC_STATE_TIMEOUT;\n      hadc->Lock = HAL_UNLOCKED;\n      status = HAL_TIMEOUT;\n    }\n    else {\n      uint32_t sys_clk = *(uint *)PTR_SystemCoreClock_08001e2c;\n      uint32_t adc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);\n      uint32_t sample_time = 0;\n      if (((adc_instance->SMPR2 & ADC_SAMPLETIME_3CYCLES) == 0) && ((adc_instance->SMPR1 & (ADC_SAMPLETIME_3CYCLES + 0xdc000000)) == 0)) {\n        if ((adc_instance->SMPR2 & ADC_SAMPLETIME_15CYCLES) == 0) {\n          if ((adc_instance->SMPR1 & ADC_SAMPLETIME_28CYCLES) == 0) {\n            sample_time = 20;\n          }\n          else {\n            sample_time = 41;\n          }\n        }\n        else {\n          sample_time = 41;\n        }\n      }\n      else if (((adc_instance->SMPR2 & ADC_SAMPLETIME_15CYCLES) == 0) && ((adc_instance->SMPR1 & (ADC_SAMPLETIME_15CYCLES + 0xee000000)) == 0)) {\n        sample_time = 84;\n      }\n      else if ((ADC_SAMPLETIME_480CYCLES & adc_instance->SMPR2) == 0) {\n        if ((ADC_SAMPLETIME_480CYCLES & adc_instance->SMPR1) == 0) {\n          sample_time = 84;\n        }\n        else {\n          sample_time = 252;\n        }\n      }\n      else {\n        sample_time = 252;\n      }\n      uint32_t cpu_cycles = (sys_clk / adc_clk) * sample_time;\n      for (; conversion_timeout_cpu_cycles <= cpu_cycles && cpu_cycles - conversion_timeout_cpu_cycles != 0; conversion_timeout_cpu_cycles++) {\n        if ((timeout != 0xffffffff) && ((timeout == 0 || (HAL_GetTick() - start_time > timeout)))) {\n          hadc->State = hadc->State | ADC_STATE_TIMEOUT;\n          hadc->Lock = HAL_UNLOCKED;\n          return HAL_TIMEOUT;\n        }\n      }\nconversion_complete:\n      adc_instance->SR = ADC_FLAG_EOC;\n      hadc->State = hadc->State | ADC_STATE_REG_EOC;\n      if ((adc_instance->CR2 & ADC_CR2_EOCS) == ADC_CR2_EOCS) {\n        if ((hadc->Init).ContinuousConvMode == 0) {\n          hadc->State = hadc->State & (~ADC_STATE_INJ_EOC);\n          if ((hadc->State & ADC_STATE_REG_EOC) == 0) {\n            hadc->State = hadc->State | ADC_STATE_READY;\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        status = HAL_OK;\n      }\n    }\n  }\n  else {\n    hadc->State = hadc->State | ADC_STATE_ERROR_INTERNAL;\n    hadc->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "adc_conversion_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08000130": {
            "renaming": {
                "FUN_08000130": "execute_function_if_initialized_08000130",
                "DAT_08000164": "is_initialized",
                "PTR__edata_08000170": "data_end_address",
                "DAT_08000174": "function_pointer",
                "PTR_object_8672_0800016c": "object_pointer"
            },
            "code": "void execute_function_if_initialized_08000130(void)\n{\n    if (DAT_08000164 == 0) {\n        if ((*(int *)PTR__edata_08000170 != 0) && (DAT_08000174 != (code *)0x0)) {\n            (*DAT_08000174)();\n            return;\n        }\n        return;\n    }\n    if ((*(int *)PTR__edata_08000170 != 0) && (DAT_08000174 != (code *)0x0)) {\n        (*DAT_08000174)(PTR__edata_08000170, PTR_object_8672_0800016c);\n        return;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000130",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_initialized_08000130"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "read_pin_adc_08004a4c",
                "pin": "pin",
                "HVar1": "hal_status",
                "uVar2": "adc_value",
                "uhADCxConvertedValue": "converted_value",
                "AdcChannelConf": "adc_channel",
                "AdcHandle": "adc_handle"
            },
            "code": "uint16_t read_pin_adc_08004a4c(PinName_conflict pin)\n{\n  HAL_StatusTypeDef_conflict hal_status;\n  uint32_t adc_value;\n  uint16_t converted_value = 0;\n  ADC_ChannelConfTypeDef adc_channel;\n  ADC_HandleTypeDef adc_handle;\n  \n  memset(&adc_handle, 0, sizeof(adc_handle));\n  adc_channel.Channel = 0;\n  adc_channel.Rank = 0;\n  adc_channel.SamplingTime = 0;\n  adc_handle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin,(PinMap_conflict *)PTR_PinMap_ADC_08004b2c);\n  if (adc_handle.Instance == (ADC_TypeDef *)0x0) {\n    converted_value = 0;\n  }\n  else {\n    adc_handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;\n    adc_handle.Init.ScanConvMode = DISABLE;\n    adc_handle.Init.ContinuousConvMode = DISABLE;\n    adc_handle.Init.DiscontinuousConvMode = DISABLE;\n    adc_handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;\n    adc_handle.State = HAL_ADC_STATE_RESET;\n    adc_handle.Init.NbrOfConversion = 1;\n    adc_handle.Init.NbrOfDiscConversion = 0;\n    *PTR_g_current_pin_08004b30 = pin;\n    hal_status = HAL_ADC_Init(&adc_handle);\n    if (hal_status == HAL_OK) {\n      adc_channel.Channel = get_adc_channel(pin);\n      if (adc_channel.Channel < 0x12) {\n        adc_channel.Rank = 1;\n        adc_channel.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;\n        hal_status = HAL_ADC_ConfigChannel(&adc_handle, &adc_channel);\n        if (hal_status == HAL_OK) {\n          hal_status = HAL_ADCEx_Calibration_Start(&adc_handle);\n          if (hal_status == HAL_OK) {\n            hal_status = HAL_ADC_Start(&adc_handle);\n            if (hal_status == HAL_OK) {\n              hal_status = HAL_ADC_PollForConversion(&adc_handle, 10);\n              if (hal_status == HAL_OK) {\n                uint32_t adc_state = HAL_ADC_GetState(&adc_handle);\n                if ((adc_state & HAL_ADC_STATE_REG_EOC) != 0) {\n                  adc_value = HAL_ADC_GetValue(&adc_handle);\n                  converted_value = (uint16_t)adc_value;\n                }\n                hal_status = HAL_ADC_Stop(&adc_handle);\n                if (hal_status == HAL_OK) {\n                  hal_status = HAL_ADC_DeInit(&adc_handle);\n                  if (hal_status != HAL_OK) {\n                    converted_value = 0;\n                  }\n                }\n                else {\n                  converted_value = 0;\n                }\n              }\n              else {\n                converted_value = 0;\n              }\n            }\n            else {\n              converted_value = 0;\n            }\n          }\n          else {\n            converted_value = 0;\n          }\n        }\n        else {\n          converted_value = 0;\n        }\n      }\n      else {\n        converted_value = 0;\n      }\n    }\n    else {\n      converted_value = 0;\n    }\n  }\n  return converted_value;\n}",
            "called": [
                "get_adc_channel",
                "HAL_ADC_GetValue",
                "HAL_ADC_Start",
                "memset",
                "HAL_ADC_GetState",
                "pinmap_peripheral",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_Stop",
                "HAL_ADC_PollForConversion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "analogRead"
            ],
            "imported": false,
            "current_name": "read_pin_adc_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "register_exit_function_08006112",
                "param_1": "exit_function",
                "param_2": "exit_parameter"
            },
            "code": "void register_exit_function_08006112(void (*exit_function)(void*), void* exit_parameter){\n  __cxa_atexit(exit_parameter, exit_function);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_function_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "set_gpio_mode_08004974",
                "*hadc": "*adc_handle",
                "puVar1": "current_pin",
                "GPIOx": "gpio",
                "tmpreg": "tmp_reg",
                "tmpreg_1": "tmp_reg_1",
                "GPIO_InitStruct": "gpio_init_struct"
            },
            "code": "void set_gpio_mode_08004974(ADC_HandleTypeDef *adc_handle)\n{\n    GPIO_TypeDef *gpio;\n    uint32_t tmp_reg;\n    uint32_t tmp_reg_1;\n    GPIO_InitTypeDef gpio_init_struct;\n    \n    if (adc_handle->Instance == g_dat_080049e0) {\n        *(uint *)(g_dat_080049ec + 0x18) |= 0x200;\n    }\n    else if (adc_handle->Instance == g_dat_080049e4) {\n        *(uint *)(g_dat_080049ec + 0x18) |= 0x400;\n    }\n    \n    uint8_t* current_pin = g_current_pin_080049e8;\n    gpio = set_GPIO_Port_Clock((uint)((int)(char)*current_pin << 0x18) >> 0x1c);\n    gpio_init_struct.Pin = 1 << (*current_pin & 0xf) & 0xffff;\n    gpio_init_struct.Mode = GPIO_MODE_ANALOG;\n    gpio_init_struct.Pull = GPIO_NOPULL;\n    HAL_GPIO_Init(gpio, &gpio_init_struct);\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "HAL_ADC_Init"
            ],
            "imported": false,
            "current_name": "set_gpio_mode_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "check_i2c_status_08003520",
                "hi2c": "handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "uVar3": "sr1",
                "uVar4": "cr2",
                "DAT_080035f8": "I2C_SR1_ARLO",
                "0x100": "I2C_CR2_ITEVTEN",
                "1": "I2C_ERROR_ARLO",
                "0xfffffeff": "~I2C_SR1_ARLO",
                "0x8000": "I2C_CR1_SWRST",
                "2": "I2C_ERROR_AF",
                "0x10200": "I2C_SR1_AF",
                "0xfffffdff": "~I2C_SR1_AF",
                "0x10400": "I2C_SR1_BERR",
                "4": "I2C_ERROR_BERR",
                "0x21": "0x21",
                "8": "I2C_ERROR_OVR",
                "0x10800": "I2C_SR1_OVR",
                "0xfffff7ff": "~I2C_SR1_OVR",
                "HAL_I2C_MODE_SLAVE": "HAL_I2C_MODE_SLAVE",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_MODE_MASTER": "HAL_I2C_MODE_MASTER",
                "I2C_Slave_AF": "I2C_Slave_AF",
                "I2C_ITError": "I2C_ITError"
            },
            "code": "void check_i2c_status_08003520(I2C_HandleTypeDef *handle)\n{\n    HAL_I2C_StateTypeDef state;\n    I2C_TypeDef *instance;\n    uint16_t sr1;\n    uint16_t cr2;\n\n    instance = handle->Instance;\n    sr1 = instance->SR1;\n    cr2 = instance->CR2;\n\n    if ((sr1 & DAT_080035f8) && (cr2 & I2C_CR2_ITEVTEN)) {\n        handle->ErrorCode |= I2C_ERROR_ARLO;\n        instance->SR1 = ~DAT_080035f8;\n        instance->CR1 |= I2C_CR1_SWRST;\n    }\n\n    if ((sr1 & I2C_SR1_AF) && (cr2 & I2C_CR2_ITEVTEN)) {\n        handle->ErrorCode |= I2C_ERROR_AF;\n        instance->SR1 = ~I2C_SR1_AF;\n    }\n\n    if ((sr1 & I2C_SR1_BERR) && (cr2 & I2C_CR2_ITEVTEN)) {\n        state = handle->State;\n        if (((handle->Mode == HAL_I2C_MODE_SLAVE) && (handle->XferCount == 0)) && (((state == HAL_I2C_STATE_BUSY_TX) || (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((state == HAL_I2C_STATE_LISTEN) && (handle->PreviousState == 0x21)))) {\n            I2C_Slave_AF(handle);\n        }\n        else {\n            handle->ErrorCode |= I2C_ERROR_BERR;\n            if (handle->Mode == HAL_I2C_MODE_MASTER) {\n                instance->CR1 |= I2C_CR1_STOP;\n            }\n            instance->SR1 = ~I2C_SR1_BERR;\n        }\n    }\n\n    if ((sr1 & I2C_SR1_OVR) && (cr2 & I2C_CR2_ITEVTEN)) {\n        handle->ErrorCode |= I2C_ERROR_OVR;\n        instance->SR1 = ~I2C_SR1_OVR;\n    }\n\n    if (handle->ErrorCode != 0) {\n        I2C_ITError(handle);\n    }\n}",
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "read_i2c_data_08002ca6",
                "*hi2c": "*i2c_handle",
                "HVar1": "current_state",
                "*puVar2": "*buffer_pointer"
            },
            "code": "HAL_StatusTypeDef_conflict read_i2c_data_08002ca6(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_StateTypeDef current_state;\n  uint8_t *buffer_pointer;\n  current_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    if ((i2c_handle->XferCount == 0) && (current_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "read_i2c_data_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54::FUN_08005b54": "initialize_serial_connection",
                "this": "serial_object",
                "peripheral": "peripheral",
                "PVar1": "rx_pin",
                "extraout_r1": "ctx_2",
                "extraout_r1_00": "ctx_1",
                "ctx": "ctx_2",
                "this->super_Stream": "serial_object->super_Stream",
                "this->super_Stream.super_Print.write_error": "serial_object->super_Stream.super_Print.write_error",
                "this->super_Stream._timeout": "serial_object->super_Stream._timeout",
                "this->super_Stream.super_Print._vptr_Print": "serial_object->super_Stream.super_Print._vptr_Print",
                "PTR_Serial2_08005ba4": "PTR_Serial2_08005ba4",
                "setRx": "setRx",
                "setTx": "setTx",
                "PTR_PinMap_UART_RX_08005ba8": "PTR_PinMap_UART_RX_08005ba8",
                "serial_object->_serial": "serial_object->_serial",
                "serial_object->_serial.pin_rx": "serial_object->_serial.pin_rx",
                "PTR_PinMap_UART_TX_08005bac": "PTR_PinMap_UART_TX_08005bac",
                "serial_object->_serial.pin_tx": "serial_object->_serial.pin_tx",
                "init": "init",
                "FUN_08005b54": "initialize_serial_connection_08005b54"
            },
            "code": "initialize_serial_connection_08005b54 * __thiscall initialize_serial_connection_08005b54(initialize_serial_connection_08005b54 *serial_object, void *peripheral) {\n  PinName rx_pin;\n  EVP_PKEY_CTX *ctx_1;\n  EVP_PKEY_CTX *ctx_2;\n  \n  (serial_object->super_Stream).super_Print.write_error = 0;\n  (serial_object->super_Stream)._timeout = 1000;\n  (serial_object->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)PTR_PTR_write_1_08005ba0;\n  if (serial_object == (initialize_serial_connection_08005b54 *)PTR_Serial2_08005ba4) {\n    setRx(serial_object,0);\n    setTx(serial_object,1);\n    ctx_1 = extraout_r1_00;\n  }\n  else {\n    rx_pin = pinmap_pin(peripheral,(PinMap_conflict *)PTR_PinMap_UART_RX_08005ba8);\n    (serial_object->_serial).pin_rx = rx_pin;\n    rx_pin = pinmap_pin(peripheral,(PinMap_conflict *)PTR_PinMap_UART_TX_08005bac);\n    (serial_object->_serial).pin_tx = rx_pin;\n    ctx_2 = extraout_r1;\n  }\n  init(serial_object,ctx_2);\n  return serial_object;\n}",
            "called": [
                "pinmap_pin",
                "setTx",
                "setRx",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_serial_connection_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "receive_data_08004618",
                "*huart": "*uart",
                "pbVar1": "byte_pointer",
                "uVar2": "remaining_bytes",
                "puVar3": "buffer_pointer",
                "HAL_UART_STATE_BUSY_RX": "HAL_BUSY",
                "HAL_UART_STATE_READY": "HAL_OK",
                "huart->RxState": "uart->RxState",
                "huart->Init": "uart->Init",
                "huart->Instance->DR": "uart->Instance->DR",
                "huart->pRxBuffPtr": "uart->pRxBuffPtr",
                "huart->RxXferCount": "uart->RxXferCount",
                "huart->Instance->CR1": "uart->Instance->CR1",
                "huart->Instance->CR3": "uart->Instance->CR3",
                "*(ushort *)huart->pRxBuffPtr": "*(ushort *)uart->pRxBuffPtr",
                "(uint8_t)huart->Instance->DR": "(uint8_t)uart->Instance->DR",
                "(byte)huart->Instance->DR": "(byte)uart->Instance->DR",
                "huart->pRxBuffPtr + 2": "uart->pRxBuffPtr += 2",
                "huart->pRxBuffPtr + 1": "uart->pRxBuffPtr++"
            },
            "code": "HAL_StatusTypeDef_conflict receive_data_08004618(UART_HandleTypeDef *uart)\n{\n    uint16_t remaining_bytes;\n    uint8_t *buffer_pointer;\n    byte *byte_pointer;\n    \n    if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n        return HAL_BUSY;\n    }\n    \n    if ((uart->Init).WordLength == 0x1000) {\n        if ((uart->Init).Parity == 0) {\n            *(ushort *)uart->pRxBuffPtr = (ushort)((uart->Instance->DR << 0x17) >> 0x17);\n            uart->pRxBuffPtr += 2;\n        }\n        else {\n            *(ushort *)uart->pRxBuffPtr = (ushort)uart->Instance->DR & 0xff;\n            uart->pRxBuffPtr++;\n        }\n    }\n    else if ((uart->Init).Parity == 0) {\n        buffer_pointer = uart->pRxBuffPtr;\n        uart->pRxBuffPtr++;\n        *buffer_pointer = (uint8_t)uart->Instance->DR;\n    }\n    else {\n        byte_pointer = uart->pRxBuffPtr;\n        uart->pRxBuffPtr++;\n        *byte_pointer = (byte)uart->Instance->DR & 0x7f;\n    }\n    \n    remaining_bytes = uart->RxXferCount - 1;\n    uart->RxXferCount = remaining_bytes;\n    \n    if (remaining_bytes != 0) {\n        return HAL_OK;\n    }\n    \n    uart->Instance->CR1 &= 0xffffffdf;\n    uart->Instance->CR1 &= 0xfffffeff;\n    uart->Instance->CR3 &= 0xfffffffe;\n    uart->RxState = HAL_UART_STATE_READY;\n    HAL_UART_RxCpltCallback(uart);\n    return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08004618"
        },
        "FUN_080060a6": {
            "renaming": {
                "FUN_080060a6": "handle_gpio_exti_irq_080060a6",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_irq_080060a6(void)\n{\n  uint16_t gpio_pin = 0x20;\n  while (gpio_pin < 0x201) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin <<= 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060a6",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080060a6"
        },
        "FUN_08001c30": {
            "renaming": {
                "FUN_08001c30": "infinite_loop_08001c30"
            },
            "code": "void infinite_loop_08001c30(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c30",
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08001c30"
        },
        "FUN_08005c72": {
            "renaming": {
                "__thiscall Print::FUN_08005c72": "print_buffer",
                "this": "print_object",
                "buffer": "buffer",
                "size": "buffer_size",
                "pPVar1": "current_print_object",
                "sVar2": "bytes_printed",
                "FUN_08005c72": "print_buffer_08005c72"
            },
            "code": "size_t __thiscall print_buffer_08005c72(Print *print_object, uint8_t *buffer, size_t buffer_size) {\n    Print *current_print_object = print_object;\n    size_t bytes_printed = 0;\n    \n    while(buffer_size > 0) {\n        if (current_print_object == NULL) {\n            return bytes_printed;\n        }\n        current_print_object = (Print *)(*print_object->_vptr_Print)(current_print_object, (uint)*buffer);\n        if (current_print_object == NULL) {\n            break;\n        }\n        bytes_printed++;\n        buffer++;\n        buffer_size--;\n    }\n    return bytes_printed;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c72",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_08005c72"
        },
        "FUN_08006c40": {
            "renaming": {
                "std_isra_0": "initialize_data",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "unused_variable",
                "FUN_08006c40": "initialize_data_08006c40"
            },
            "code": "void initialize_data_08006c40(undefined4 *data, undefined2 value1, undefined2 value2) {\n    *data = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(undefined2 *)(data + 3) = value1;\n    data[25] = 0;\n    *(undefined2 *)((int)data + 0xe) = value2;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    memset(data + 0x17, 0, 8);\n    data[8] = data;\n    data[9] = DAT_08006c78;\n    data[10] = DAT_08006c7c;\n    data[11] = DAT_08006c80;\n    data[12] = DAT_08006c84;\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_08006c40"
        },
        "FUN_0800048c": {
            "renaming": {
                "FUN_0800048c": "calculate_double_precision_0800048c",
                "param_1": "first_number",
                "param_2": "second_number",
                "bVar1": "byte_value",
                "uVar2": "temp_2",
                "uVar3": "shift_amount_1",
                "uVar4": "temp_1",
                "iVar5": "counter_1",
                "uVar6": "shift_amount_2",
                "iVar7": "shift_amount_3",
                "uVar8": "temp_3",
                "bVar9": "carry_flag_1",
                "bVar10": "carry_flag_2",
                "bVar11": "carry_flag_3"
            },
            "code": "ulonglong calculate_double_precision_0800048c(uint first_number, uint second_number)\n{\n    byte byte_value;\n    uint shift_amount_1;\n    uint shift_amount_2;\n    int shift_amount_3;\n    uint temp_1;\n    uint temp_2;\n    uint temp_3;\n    int counter_1;\n    bool carry_flag_1;\n    bool carry_flag_2;\n    bool carry_flag_3;\n    \n    if ((first_number | second_number) == 0) {\n        return CONCAT44(second_number, first_number);\n    }\n    \n    shift_amount_3 = 0x432;\n    temp_3 = second_number >> 0x16;\n    if (temp_3 != 0) {\n        shift_amount_3 = 3;\n        if (second_number >> 0x19 != 0) {\n            shift_amount_3 = 6;\n        }\n        if (second_number >> 0x1c != 0) {\n            shift_amount_3 += 3;\n        }\n        shift_amount_1 = shift_amount_3 - ((int)second_number >> 0x1f);\n        temp_3 = first_number << (0x20 - shift_amount_1 & 0xff);\n        first_number = first_number >> (shift_amount_1 & 0xff) | second_number << (0x20 - shift_amount_1 & 0xff);\n        second_number = second_number >> (shift_amount_1 & 0xff);\n        shift_amount_3 = shift_amount_1 + 0x432;\n    }\n    if (0xfffff < second_number) {\n        if (0x1fffff < second_number) {\n            temp_1 = second_number & 1;\n            second_number = second_number >> 1;\n            byte_value = (byte)first_number;\n            first_number = (uint)(temp_1 != 0) << 0x1f | first_number >> 1;\n            temp_3 = (uint)(byte_value & 1) << 0x1f | temp_3 >> 1;\n            shift_amount_3 += 1;\n            if (0xffbfffff < (uint)(shift_amount_3 * 0x200000)) {\n                return 0x7ff0000000000000;\n            }\n        }\n        \n        carry_flag_2 = 0x7fffffff < temp_3;\n        if (temp_3 == 0x80000000) {\n            carry_flag_2 = (first_number & 1) != 0;\n        }\n        return CONCAT44(second_number + shift_amount_3 * 0x100000 + (uint)CARRY4(first_number,(uint)carry_flag_2), first_number + carry_flag_2);\n    }\n    carry_flag_1 = (temp_3 & 0x80000000) != 0;\n    temp_3 = temp_3 << 1;\n    temp_1 = first_number * 2;\n    carry_flag_2 = CARRY4(first_number, first_number);\n    first_number = first_number * 2 + (uint)carry_flag_1;\n    second_number = second_number * 2 + (uint)(carry_flag_2 || CARRY4(temp_1,(uint)carry_flag_1));\n    shift_amount_3 += -1;\n    if ((second_number & 0x100000) != 0) {\n        goto LAB_080002a0;\n    }\n    \n    temp_2 = first_number;\n    temp_1 = second_number;\n    if (second_number == 0) {\n        temp_2 = 0;\n        temp_1 = first_number;\n    }\n    \n    counter_1 = count_leading_zeroes(temp_1);\n    if (second_number == 0) {\n        counter_1 = counter_1 + 0x20;\n    }\n    \n    shift_amount_2 = counter_1 - 0xb;\n    carry_flag_3 = SBORROW4(shift_amount_2,0x20);\n    shift_amount_1 = counter_1 - 0x2b;\n    carry_flag_2 = (int)shift_amount_1 < 0;\n    carry_flag_1 = shift_amount_1 == 0;\n    if ((int)shift_amount_2 < 0x20) {\n        carry_flag_3 = SCARRY4(shift_amount_1,0xc);\n        counter_1 = counter_1 + -0x1f;\n        carry_flag_2 = counter_1 < 0;\n        carry_flag_1 = counter_1 == 0;\n        shift_amount_2 = shift_amount_1;\n        if (!carry_flag_1 && carry_flag_2 == carry_flag_3) {\n            temp_2 = temp_1 << (shift_amount_1 & 0xff);\n            temp_1 = temp_1 >> (0xcU - counter_1 & 0xff);\n            goto LAB_08000318;\n        }\n    }\n    if (carry_flag_1 || carry_flag_2 != carry_flag_3) {\n        shift_amount_3 = 0x20 - shift_amount_2;\n    }\n    temp_1 = temp_1 << (shift_amount_2 & 0xff);\n    if (carry_flag_1 || carry_flag_2 != carry_flag_3) {\n        temp_1 = temp_1 | temp_2 >> (shift_amount_3 & 0xff);\n    }\n    if (carry_flag_1 || carry_flag_2 != carry_flag_3) {\n        temp_2 = temp_2 << (shift_amount_2 & 0xff);\n    }\n    \n    LAB_08000318:\n    if ((int)shift_amount_2 <= shift_amount_3) {\n        return CONCAT44(temp_1 + (shift_amount_3 - shift_amount_2) * 0x100000, temp_2);\n    }\n    temp_3 = ~(shift_amount_3 - shift_amount_2);\n    if (0x1e < (int)temp_3) {\n        return (ulonglong)(temp_1 >> (temp_3 - 0x1f & 0xff));\n    }\n    shift_amount_3 = temp_3 - 0x13;\n    if (shift_amount_3 == 0 || shift_amount_3 < 0 != SCARRY4(temp_3 - 0x1f,0xc)) {\n        temp_3 = temp_3 + 1;\n        return CONCAT44(temp_1 >> (temp_3 & 0xff),temp_2 >> (temp_3 & 0xff) | temp_1 << (0x20 - temp_3 & 0xff));\n    }\n    return (ulonglong)(temp_2 >> (0x20 - (0xcU - shift_amount_3) & 0xff) | temp_1 << (0xcU - shift_amount_3 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800048c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_double_precision_0800048c"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c::FUN_0800157c": "initialize_pins",
                "this": "self",
                "SO": "so_pin",
                "CS": "cs_pin",
                "SCK": "sck_pin",
                "PTR_": "ptr_",
                "DAT_": "dat_",
                "FUN_0800157c": "initialize_pins_0800157c"
            },
            "code": "initialize_pins_0800157c * __thiscall initialize_pins_0800157c(initialize_pins_0800157c *this, uchar so_pin, uchar cs_pin, uchar sck_pin)\n{\n  this->so = so_pin;\n  this->cs = cs_pin;\n  this->sck = sck_pin;\n  pinMode((uint)so_pin, INPUT);\n  pinMode((uint)this->cs, OUTPUT);\n  pinMode((uint)this->sck, OUTPUT);\n  digitalWrite((uint)this->cs, HIGH);\n  digitalWrite((uint)this->sck, LOW);\n  return this;\n}",
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_pins_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "check_uart_rx_state_080045a2",
                "*huart": "*uart_handle",
                "pData": "data",
                "Size": "size",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "pRxBuffPtr": "rx_buffer_pointer",
                "RxXferSize": "rx_transfer_size",
                "RxXferCount": "rx_transfer_count",
                "ErrorCode": "error_code",
                "RxState": "rx_state",
                "Lock": "lock",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_OK": "HAL_OK",
                "uint8_t": "uint8_t",
                "uint16_t": "uint16_t"
            },
            "code": "HAL_StatusTypeDef_conflict check_uart_rx_state_080045a2(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size)\n{\n    if (uart_handle->RxState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL) {\n        return HAL_ERROR;\n    }\n    if (size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n        uart_handle->pRxBuffPtr = data;\n        uart_handle->RxXferSize = size;\n        uart_handle->RxXferCount = size;\n        uart_handle->ErrorCode = 0;\n        uart_handle->RxState = HAL_UART_STATE_BUSY_RX;\n        uart_handle->Lock = HAL_UNLOCKED;\n        uart_handle->Instance->CR1 |= USART_CR1_RXNEIE;\n        uart_handle->Instance->CR3 |= USART_CR3_EIE;\n        uart_handle->Instance->CR1 |= USART_CR1_RE;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "check_uart_rx_state_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_evp_pkey_context_08001c32",
                "ctx": "evp_pkey_ctx_param",
                "hw_config_FUN_08001c32": "initialize_hw_config"
            },
            "code": "int initialize_evp_pkey_context_08001c32(EVP_PKEY_CTX *evp_pkey_ctx_param) {\n    initialize_hw_config();\n    return (int)evp_pkey_ctx_param;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_evp_pkey_context_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "get_uart_rx_and_global_state_080047e8",
                "*huart": "*uart_handler",
                "huart": "uart_handler",
                "RxState": "rx_state",
                "gState": "global_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_rx_and_global_state_080047e8(UART_HandleTypeDef *huart) {\n    HAL_UART_StateTypeDef rx_state = huart->RxState;\n    HAL_UART_StateTypeDef global_state = huart->gState;\n    return rx_state | global_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "imported": false,
            "current_name": "get_uart_rx_and_global_state_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "ulPin": "pin_number",
                "ulMode": "pin_mode",
                "_Var1": "pin_configured",
                "pin": "pin_name",
                "PTR_digitalPin_08005838": "digital_pin_array",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured",
                "PTR_g_anOutputPinConfigured_0800583c": "output_pin_config_array",
                "pin_in_pinmap": "pin_in_pinmap",
                "PinMap_PWM_08005840": "PWM_pin_map_array",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_08005844": "digital_pin_configured_array"
            },
            "code": "void configure_pin_080057b4(uint32_t pin_number, uint32_t pin_mode) {\n  _Bool pin_configured;\n  PinName_conflict pin_name;\n\n  if (pin_number < 0x3c) {\n    pin_name = PTR_digitalPin_08005838[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    pin_configured = is_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    if (pin_configured) {\n      pin_configured = pin_in_pinmap(pin_name, (PinMap_conflict *)PWM_pin_map_array);\n      if (pin_configured) {\n        pwm_stop(pin_name);\n      }\n      reset_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    }\n    switch (pin_mode) {\n    case 0:\n      digital_io_init(pin_name, 0, 0);\n      break;\n    case 1:\n      digital_io_init(pin_name, 1, 0);\n      break;\n    case 2:\n      digital_io_init(pin_name, 0, 1);\n      break;\n    case 3:\n      digital_io_init(pin_name, 0, 2);\n    }\n    set_pin_configured(pin_name, (uint32_t *)PTR_g_digPinConfigured_08005844);\n  }\n  return;\n}",
            "called": [
                "digital_io_init",
                "pwm_stop",
                "is_pin_configured",
                "reset_pin_configured",
                "pin_in_pinmap",
                "set_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "setup",
                "MAX31855",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "init_controller_08001b18",
                "this": "controller",
                "Input": "input",
                "Output": "output",
                "Setpoint": "set_point",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "ControllerDirection": "controller_direction"
            },
            "code": "init_controller_08001b18 * __thiscall init_controller_08001b18(init_controller_08001b18 *controller,double *input,double *output,double *set_point,double proportional_gain,double integral_gain,double derivative_gain, int controller_direction)\n{\n  init_controller_08001b18(controller, input, output, set_point, proportional_gain, integral_gain, derivative_gain, 1, controller_direction);\n  return controller;\n}",
            "called": [
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "init_controller_08001b18"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_of_second_param_and_fourth_param",
                "bVar2": "is_zero_first_param",
                "bVar3": "is_xor_negative",
                "is_negative_second_param": "is_negative_second_param",
                "is_negative_fourth_param": "is_negative_fourth_param",
                "are_second_param_and_fourth_param_equal": "are_second_param_and_fourth_param_equal",
                "are_first_param_and_third_param_equal": "are_first_param_and_third_param_equal",
                "is_xor_zero": "is_xor_zero",
                "is_fourth_param_less_than_or_equal_to_second_param": "is_fourth_param_less_than_or_equal_to_second_param",
                "is_third_param_less_than_or_equal_to_first_param": "is_third_param_less_than_or_equal_to_first_param",
                "param_4 >> 0x1f": "param_4_shifted",
                "~param_4": "inverted_param_4"
            },
            "code": "uint check_parameters_0800092c(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_negative_second_param = (int)(second_param << 1) >> 0x15 == -1;\n  bool is_negative_fourth_param = (int)(fourth_param << 1) >> 0x15 == -1;\n  if (is_negative_second_param || is_negative_fourth_param)\n  {\n    if ((is_negative_second_param && ((first_param | second_param << 0xc) != 0)) || (is_negative_fourth_param && ((third_param | fourth_param << 0xc) != 0)))\n    {\n      result = 1;\n    }\n    else\n    {\n      result = 0;\n    }\n  }\n  else\n  {\n    bool is_zero_first_param = (first_param | second_param << 1) == 0;\n    bool is_zero_third_param = (third_param | fourth_param << 1) == 0;\n    bool are_second_param_and_fourth_param_equal = second_param == fourth_param;\n    bool are_first_param_and_third_param_equal = first_param == third_param;\n    if (is_zero_first_param && is_zero_third_param)\n    {\n      result = 0;\n    }\n    else if (are_second_param_and_fourth_param_equal && are_first_param_and_third_param_equal)\n    {\n      result = 1;\n    }\n    else\n    {\n      uint xor_of_second_param_and_fourth_param = second_param ^ fourth_param;\n      bool is_xor_zero = xor_of_second_param_and_fourth_param == 0;\n      bool is_xor_negative = -1 < (int)xor_of_second_param_and_fourth_param;\n      bool is_fourth_param_less_than_or_equal_to_second_param = fourth_param <= second_param;\n      bool is_third_param_less_than_or_equal_to_first_param = third_param <= first_param;\n      if (is_xor_zero)\n      {\n        result = is_fourth_param_less_than_or_equal_to_second_param | 1;\n      }\n      else if (is_xor_negative)\n      {\n        result = is_fourth_param_less_than_or_equal_to_second_param | 1;\n      }\n      else\n      {\n        result = is_third_param_less_than_or_equal_to_first_param | 1;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_parameters_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "__thiscall Print::FUN_08005d8a": "print_number",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "result",
                "FUN_08005d8a": "print_number_08005d8a"
            },
            "code": "size_t __thiscall print_number_08005d8a(Print *this, ulong number, int base) {\n  size_t sVar1;\n  if (base != 0) {\n    sVar1 = print_number_08005d8a(this, number, (uint8_t)base);\n    return sVar1;\n  }\n  sVar1 = (**this->_vptr_Print)(this, number & 0xff);\n  return sVar1;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_number_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_clock_source_08002560",
                "CLKSource": "clk_source",
                "*DAT_0800257c": "clock_data"
            },
            "code": "void set_clock_source_08002560(uint32_t clk_source) {\n    if (clk_source != 4) {\n        *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n        return;\n    }\n    *DAT_0800257c = *DAT_0800257c | 4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_byte_in_memory_08006e90",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "memory_size",
                "pbVar1": "current_byte",
                "pbVar2": "current_byte_check"
            },
            "code": "void * find_byte_in_memory_08006e90(void *memory, int byte_to_find, size_t memory_size) {\n  unsigned char *current_byte = (unsigned char *)memory;\n  while (current_byte < (unsigned char *)(memory_size + (int)memory)) {\n    if (*current_byte == (byte_to_find & 0xff)) {\n      return current_byte;\n    }\n    current_byte++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "allocate_memory_08006920",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_08006920(int *error_code, int size) {\n    undefined *errno_ptr;\n    caddr_t memory_ptr;\n    errno_ptr = PTR_errno_0800693c;\n    *(undefined4 *)PTR_errno_0800693c = 0;\n    memory_ptr = _sbrk(size);\n    if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n        *error_code = *(int *)errno_ptr;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_6",
                "unaff_r4": "unaff_r4",
                "uVar2": "mask",
                "uVar3": "temp_2",
                "in_r12": "in_r12",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_080008ba(uint input_1, uint input_2, uint input_3, uint input_4) {\n  uint temp_1, temp_2, temp_3, temp_4;\n  bool is_zero;\n  temp_1 = input_1;\n  temp_2 = input_2;\n  temp_3 = input_3;\n  temp_4 = input_4;\n  uint mask = in_r12 & (temp_4 >> 0x14);\n  if (unaff_r4 != in_r12 || mask != in_r12) {\n    if (unaff_r4 == in_r12) {\n      is_zero = ((input_1 | (input_2 << 0xc)) == 0);\n      if (is_zero && mask != in_r12) {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (mask == in_r12) {\n      is_zero = ((input_3 | (input_4 << 0xc)) == 0);\n      if (is_zero) {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n      temp_1 = input_3;\n      temp_2 = input_4;\n    }\n    else {\n      is_zero = ((input_1 | (input_2 << 1)) == 0);\n      if (!is_zero) {\n        is_zero = ((input_3 | (input_4 << 1)) == 0);\n      }\n      if (!is_zero) {\n        if (unaff_r4 == 0) {\n          uint temp_5 = input_2 & 0x80000000;\n          do {\n            uint temp_6 = input_1 & 0x80000000;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(temp_6 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | temp_5;\n          if (mask != 0) {\n            return CONCAT44(input_2, input_1);\n          }\n        }\n        do {\n          uint temp_7 = input_3 & 0x80000000;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp_7 != 0);\n        } while ((input_4 & 0x100000) == 0);\n        temp_2 = input_4;\n      }\n      else {\n        if ((input_1 | (input_2 << 1)) != 0) {\n          return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n        }\n        if ((input_3 | (input_4 << 1)) != 0) {\n          return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n        }\n      }\n    }\n  }\n  return CONCAT44(temp_2, temp_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "i2c_handle_listen_or_tx_complete_08002d1c",
                "*hi2c": "*i2c_handle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "hi2c->XferOptions": "i2c_handle->XferOptions",
                "hi2c->State": "i2c_handle->State",
                "hi2c->Instance->CR2": "i2c_handle->Instance->CR2",
                "hi2c->Instance->SR1": "i2c_handle->Instance->SR1",
                "hi2c->Instance->CR1": "i2c_handle->Instance->CR1",
                "hi2c->PreviousState": "i2c_handle->PreviousState",
                "hi2c->Mode": "i2c_handle->Mode",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback",
                "4": "I2C_XFER_OPTIONS_RELOAD",
                "8": "I2C_XFER_OPTIONS_OTHER"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_handle_listen_or_tx_complete_08002d1c(I2C_HandleTypeDef *i2c_handle) {\n  if (((i2c_handle->XferOptions == I2C_XFER_OPTIONS_RELOAD) || (i2c_handle->XferOptions == I2C_XFER_OPTIONS_OTHER)) && (i2c_handle->State == HAL_I2C_STATE_LISTEN)) {\n    i2c_handle->XferOptions = DAT_08002dac;\n    i2c_handle->Instance->CR2 &= ~(7 << 16);\n    i2c_handle->Instance->SR1 &= ~(1 << 10);\n    i2c_handle->Instance->CR1 &= ~(1 << 10);\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2c_handle);\n  }\n  else if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n    i2c_handle->XferOptions = DAT_08002dac;\n    i2c_handle->PreviousState = 0x21;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Instance->CR2 &= ~(7 << 16);\n    i2c_handle->Instance->SR1 &= ~(1 << 10);\n    i2c_handle->Instance->CR1 &= ~(1 << 10);\n    HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n  }\n  else {\n    i2c_handle->Instance->SR1 &= ~(1 << 10);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_listen_or_tx_complete_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_08005714",
                "file_UNUSED": "file"
            },
            "code": "int return_error_08005714(int file){\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_clock_frequency_08003da4",
                "PeriphClk": "peripheral_clock",
                "uVar1": "frequency",
                "uVar2": "var_2",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pll_mul_factor_table",
                "PTR_DAT_08003e8c": "PREDIV_FACTOR_TABLE_ADDRESS",
                "DAT_08003e90": "PLLMUL_FACTOR_TABLE_ADDRESS",
                "DAT_08003e94": "var_1",
                "DAT_08003e98": "var_2",
                "DAT_08003e9c": "var_3"
            },
            "code": "uint32_t calculate_clock_frequency_08003da4(uint32_t peripheral_clock)\n{\n    uint32_t frequency = 0;\n    uint prediv_factor_table[2];\n    uint pll_mul_factor_table[16];\n    pll_mul_factor_table[0] = *(uint32_t *)(DAT_08003e90);\n    pll_mul_factor_table[1] = *(uint32_t *)(DAT_08003e90 + 4);\n    pll_mul_factor_table[2] = *(uint32_t *)(DAT_08003e90 + 8);\n    prediv_factor_table[0] = *(uint8_t *)(PTR_DAT_08003e8c);\n    prediv_factor_table[1] = *(uint8_t *)(PTR_DAT_08003e8c + 1);\n\n    if (peripheral_clock == 2) {\n        frequency = HAL_RCC_GetPCLK2Freq();\n        frequency = frequency / ((((DAT_08003e90[1] << 16) >> 30) + 1) * 2);\n    }\n    else if (peripheral_clock == 0x10) {\n        if ((*DAT_08003e90 & 0x1000000) == 0) {\n            frequency = 0;\n        }\n        else {\n            uint mul_factor = pll_mul_factor_table[(DAT_08003e90[1] << 10) >> 0x1c];\n            uint prediv = prediv_factor_table[-((int)(DAT_08003e90[1] << 14) >> 0x1f)];\n            frequency = mul_factor * DAT_08003e94 / prediv;\n            if ((DAT_08003e90[1] & 0x400000) == 0) {\n                frequency = (uint32_t)((uint64_t)DAT_08003e98 * (uint64_t)(frequency * 2) >> 0x21);\n            }\n        }\n    }\n    else if (peripheral_clock == 1) {\n        if ((DAT_08003e90[8] & 0x302) == 0x102) {\n            frequency = 0x8000;\n        }\n        else {\n            uint uVar2 = DAT_08003e90[8] & 0x300;\n            if ((uVar2 == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n                frequency = 32000;\n            }\n            else if (uVar2 == 0x300) {\n                if ((*DAT_08003e90 & 0x20000) == 0) {\n                    frequency = 0;\n                }\n                else {\n                    frequency = 0xf424;\n                }\n            }\n            else {\n                frequency = 0;\n            }\n        }\n    }\n    else {\n        frequency = 0;\n    }\n    return frequency;\n}",
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "imported": false,
            "current_name": "calculate_clock_frequency_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_serial_08005a44",
                "this": "serial",
                "ctx": "context",
                "_serial": "serial_data",
                "rx_buff": "rx_buffer",
                "_rx_buffer": "rx_buffer_data",
                "rx_head": "rx_buffer_head",
                "rx_tail": "rx_buffer_tail",
                "tx_buff": "tx_buffer",
                "_tx_buffer": "tx_buffer_data",
                "tx_head": "tx_buffer_head",
                "tx_tail": "tx_buffer_tail"
            },
            "code": "int __thiscall initialize_serial_08005a44(HardwareSerial *serial, EVP_PKEY_CTX *context)\n{\n    (serial->_serial).rx_buffer = serial->_rx_buffer;\n    (serial->_serial).rx_head = 0;\n    (serial->_serial).rx_tail = 0;\n    (serial->_serial).tx_buffer = serial->_tx_buffer;\n    (serial->_serial).tx_head = 0;\n    (serial->_serial).tx_tail = 0;\n    return (int)serial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initialize_serial_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_end_of_string_080009dc",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009dc(void)\n{\n  char current_char;\n  __aeabi_cdcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "reset_uart_state_0800417c",
                "huart": "uart_handle",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "rx_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY"
            },
            "code": "void reset_uart_state_0800417c(UART_HandleTypeDef *uart_handle)\n{\n  uart_handle->Instance->CR1 &= ~(1 << 13);\n  uart_handle->Instance->CR3 &= ~(1 << 0);\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_state_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_current_tick_08004b94",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004b94(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_current_milli_seconds_080058e0",
                "uVar1": "current_milli_seconds"
            },
            "code": "uint32_t get_current_milli_seconds_080058e0(void)\n{\n  uint32_t current_milli_seconds = GetCurrentMilli();\n  return current_milli_seconds;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "setup",
                "Compute",
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "get_current_milli_seconds_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "pid_update_constants_08001918",
                "this": "pid",
                "NewSampleTime": "new_sample_time",
                "uVar1": "unused_variable",
                "uVar2": "new_sample_time_float",
                "uVar3": "old_sample_time_float",
                "dVar4": "unused_variable",
                "SampleTime": "sample_time",
                "ki": "ki",
                "kd": "kd"
            },
            "code": "void __thiscall pid_update_constants_08001918(PID *pid, int new_sample_time) {\n  if (new_sample_time > 0) {\n    double new_sample_time_float = (double)new_sample_time;\n    double old_sample_time_float = (double)pid->sample_time;\n    double sample_time_ratio = new_sample_time_float / old_sample_time_float;\n    double ki = pid->ki * sample_time_ratio;\n    double kd = pid->kd / sample_time_ratio;\n    pid->ki = ki;\n    pid->kd = kd;\n    pid->sample_time = new_sample_time;\n  }\n}",
            "called": [
                "__floatsidf",
                "__divdf3",
                "__muldf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "pid_update_constants_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "print_assertion_failed_0800611c",
                "param_1": "assertion",
                "param_2": "file_name",
                "param_3": "message",
                "param_4": "line_number",
                "PTR_s__08006154": "default_string",
                "PTR_s___function__0800614c": "function_name",
                "PTR_s_assertion___s__failed__file___s__08006150": "assertion_failed_string",
                "PTR__impure_ptr_08006148": "impure_ptr"
            },
            "code": "void print_assertion_failed_0800611c(FILE* file, const char* assertion, const char* file_name, int line_number, const char* PTR_s___function__0800614c, const char* message)\n{\n    const char* PTR_s__08006154 = \"\";\n    const char* function = PTR_s___function__0800614c ? PTR_s___function__0800614c : PTR_s__08006154;\n    const char* msg = message ? message : PTR_s__08006154;\n    const char* file = file_name ? file_name : PTR_s__08006154;\n    fprintf(file, \"Assertion '%s' failed in file %s, line %d, function %s. Message: %s\\n\", assertion, file, line_number, function, msg);\n    abort();\n}",
            "called": [
                "fiprintf",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_0800611c"
        },
        "FUN_0800049c": {
            "renaming": {
                "FUN_0800049c": "calculate_result_0800049c",
                "param_1": "num1",
                "param_2": "num2",
                "bVar1": "temp_byte",
                "uVar2": "temp_uint1",
                "uVar3": "temp_uint2",
                "uVar4": "temp_uint3",
                "iVar5": "temp_int1",
                "uVar6": "temp_uint4",
                "iVar7": "temp_int2",
                "uVar8": "temp_uint5",
                "uVar9": "temp_uint6",
                "bVar10": "temp_bool1",
                "bVar11": "temp_bool2",
                "bVar12": "temp_bool3"
            },
            "code": "ulonglong calculate_result_0800049c(uint num1, uint num2)\n{\n    byte temp_byte;\n    uint temp_uint1;\n    uint temp_uint2;\n    uint temp_uint3;\n    int temp_int1;\n    uint temp_uint4;\n    int temp_int2;\n    uint temp_uint5;\n    uint temp_uint6;\n    bool temp_bool1;\n    bool temp_bool2;\n    bool temp_bool3;\n\n    if ((num1 | num2) == 0) {\n        return CONCAT44(num2,num1);\n    }\n    temp_uint5 = num2 & 0x80000000;\n    temp_uint2 = num2;\n    if ((int)temp_uint5 < 0) {\n        temp_bool2 = num1 != 0;\n        num1 = -num1;\n        temp_uint2 = -num2 - (uint)temp_bool2;\n    }\n    temp_int2 = 0x432;\n    temp_uint6 = temp_uint2 >> 0x16;\n    if (temp_uint6 != 0) {\n        temp_int2 = 3;\n        if (temp_uint2 >> 0x19 != 0) {\n            temp_int2 = 6;\n        }\n        if (temp_uint2 >> 0x1c != 0) {\n            temp_int2 = temp_int2 + 3;\n        }\n        temp_uint3 = temp_int2 - ((int)temp_uint2 >> 0x1f);\n        temp_uint6 = num1 << (0x20 - temp_uint3 & 0xff);\n        num1 = num1 >> (temp_uint3 & 0xff) | temp_uint2 << (0x20 - temp_uint3 & 0xff);\n        temp_uint2 = temp_uint2 >> (temp_uint3 & 0xff);\n        temp_int2 = temp_uint3 + 0x432;\n    }\n    if (0xfffff < temp_uint2) {\n        if (0x1fffff < temp_uint2) {\n            temp_uint3 = temp_uint2 & 1;\n            temp_uint2 = temp_uint2 >> 1;\n            temp_byte = (byte)num1;\n            num1 = (uint)(temp_uint3 != 0) << 0x1f | num1 >> 1;\n            temp_uint6 = (uint)(temp_byte & 1) << 0x1f | temp_uint6 >> 1;\n            temp_int2 = temp_int2 + 1;\n            if (0xffbfffff < (uint)(temp_int2 * 0x200000)) {\n                return (ulonglong)(temp_uint5 | 0x7ff00000) << 0x20;\n            }\n        }\n    LABEL_080002a0:\n        temp_bool2 = 0x7fffffff < temp_uint6;\n        if (temp_uint6 == 0x80000000) {\n            temp_bool2 = (num1 & 1) != 0;\n        }\n        return CONCAT44(temp_uint2 + temp_int2 * 0x100000 + (uint)CARRY4(num1,(uint)temp_bool2) | temp_uint5,\n                        num1 + temp_bool2);\n    }\n    temp_bool1 = (temp_uint6 & 0x80000000) != 0;\n    temp_uint6 = temp_uint6 << 1;\n    temp_uint3 = num1 * 2;\n    temp_bool2 = CARRY4(num1,num1);\n    num1 = num1 * 2 + (uint)temp_bool1;\n    temp_uint2 = temp_uint2 * 2 + (uint)(temp_bool2 || CARRY4(temp_uint3,(uint)temp_bool1));\n    temp_int2 = temp_int2 + -1;\n    if ((temp_uint2 & 0x100000) != 0) goto LABEL_080002a0;\n    temp_uint1 = num1;\n    temp_uint3 = temp_uint2;\n    if (temp_uint2 == 0) {\n        temp_uint1 = 0;\n        temp_uint3 = num1;\n    }\n    temp_int1 = count_leading_zeroes(temp_uint3);\n    if (temp_uint2 == 0) {\n        temp_int1 = temp_int1 + 0x20;\n    }\n    temp_uint4 = temp_int1 - 0xb;\n    temp_bool3 = SBORROW4(temp_uint4,0x20);\n    temp_uint2 = temp_int1 - 0x2b;\n    temp_bool2 = (int)temp_uint2 < 0;\n    temp_bool1 = temp_uint2 == 0;\n    if ((int)temp_uint4 < 0x20) {\n        temp_bool3 = SCARRY4(temp_uint2,0xc);\n        temp_int1 = temp_int1 + -0x1f;\n        temp_bool2 = temp_int1 < 0;\n        temp_bool1 = temp_int1 == 0;\n        temp_uint4 = temp_uint4;\n        temp_uint2 = temp_uint4;\n        if (!temp_bool1 && temp_bool2 == temp_bool3) {\n            temp_uint6 = temp_uint3 << (temp_uint4 & 0xff);\n            temp_uint3 = temp_uint3 >> (0xcU - temp_int1 & 0xff);\n            goto LABEL_08000318;\n        }\n    }\n    if (temp_bool1 || temp_bool2 != temp_bool3) {\n        temp_uint5 = 0x20 - temp_uint3;\n    }\n    temp_uint3 = temp_uint3 << (temp_uint4 & 0xff);\n    if (temp_bool1 || temp_bool2 != temp_bool3) {\n        temp_uint3 = temp_uint3 | temp_uint1 >> (temp_uint5 & 0xff);\n    }\n    if (temp_bool1 || temp_bool2 != temp_bool3) {\n        temp_uint1 = temp_uint1 << (temp_uint4 & 0xff);\n    }\nLABEL_08000318:\n    if ((int)temp_uint4 <= temp_int2) {\n        return CONCAT44(temp_uint3 + (temp_int2 - temp_uint4) * 0x100000 | temp_uint5,temp_uint1);\n    }\n    temp_uint2 = ~(temp_int2 - temp_uint4);\n    if (0x1e < (int)temp_uint2) {\n        return CONCAT44(num2,temp_uint3 >> (temp_uint2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n    }\n    temp_int2 = temp_uint2 - 0x13;\n    if (temp_int2 == 0 || temp_int2 < 0 != SCARRY4(temp_uint2 - 0x1f,0xc)) {\n        temp_uint2 = temp_uint2 + 1;\n        return CONCAT44(temp_uint5 | temp_uint3 >> (temp_uint2 & 0xff),\n                        temp_uint1 >> (temp_uint2 & 0xff) | temp_uint3 << (0x20 - temp_uint2 & 0xff));\n    }\n    return CONCAT44(num2,temp_uint1 >> (0x20 - (0xcU - temp_int2) & 0xff) | temp_uint3 << (0xcU - temp_int2 & 0xff))\n           & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800049c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_0800049c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "is_pin_high_080047f4",
                "pin": "pin",
                "map": "map"
            },
            "code": "\nbool is_pin_high_080047f4(PinName_conflict pin, uint32_t *map)\n{\n    uint32_t index = ((uint32_t)pin << 0x18) >> 0x1c;\n    uint32_t offset = (uint32_t)pin & 0xfU;\n    uint8_t val = map[index] >> offset;\n    return (bool)(val & 1);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "digitalWrite",
                "digitalRead",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_high_080047f4"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "listen_i2c_08002c10",
                "hi2c": "i2c_handle",
                "pIVar1": "i2c_instance",
                "HAL_I2C_STATE_READY": "I2C_READY",
                "HAL_BUSY": "I2C_BUSY",
                "HAL_I2C_STATE_LISTEN": "I2C_LISTEN",
                "CR1": "I2C_CR1",
                "CR2": "I2C_CR2"
            },
            "code": "HAL_StatusTypeDef_conflict listen_i2c_08002c10(I2C_HandleTypeDef *i2c_handle) {\n  I2C_TypeDef *i2c_instance;\n  if (i2c_handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  i2c_handle->State = HAL_I2C_STATE_LISTEN;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->CR1 & 1) == 0) {\n    i2c_instance->CR1 = i2c_instance->CR1 | 1;\n  }\n  i2c_instance->CR1 |= 0x400;\n  i2c_instance->CR2 |= 0x300;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "listen_i2c_08002c10"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_not_equal_to_zero_or_nan_080009f0",
                "in_CY": "is_nan",
                "in_ZR": "is_not_zero"
            },
            "code": "bool is_not_equal_to_zero_or_nan_080009f0(void)\n{\n  bool is_nan = __aeabi_cdcmpeq() != 0;\n  bool is_not_zero = (bool)in_ZR != true;\n  return !is_nan || is_not_zero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_equal_to_zero_or_nan_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "send_command_0800134e",
                "this": "lcd",
                "value": "command"
            },
            "code": "size_t __thiscall send_command_0800134e(LiquidCrystal *lcd, uint8_t command) {\n    send(lcd, command, '\\x01');\n    return 1;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "send_command_0800134e"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "flush_if_buffer_not_empty_08006be0",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "param_3": "mode",
                "param_4": "flags",
                "uVar1": "result",
                "PTR___sf_fake_stdin_08006c28": "PTR___sf_fake_stdin_08006c28",
                "PTR___sf_fake_stdout_08006c2c": "PTR___sf_fake_stdout_08006c2c",
                "PTR___sf_fake_stderr_08006c30": "PTR___sf_fake_stderr_08006c30",
                "short": "short",
                "DAT_08006c18": "DAT_08006c18",
                "DAT_08006c1c": "DAT_08006c1c",
                "DAT_08006c20": "DAT_08006c20"
            },
            "code": "int flush_if_buffer_not_empty_08006be0(int file_descriptor, void *stream, int mode, int flags) {\n  int result = 0;\n  int *stream_flags = (int *)(stream + 0x10);\n  if (*stream_flags != 0) {\n    int *file_flags = (int *)(file_descriptor + 0x18);\n    if (file_descriptor != 0 && *file_flags == 0) {\n      __sinit();\n    }\n    if (stream == PTR___sf_fake_stdin_08006c28) {\n      stream = *(void **)(file_descriptor + 4);\n    }\n    else if (stream == PTR___sf_fake_stdout_08006c2c) {\n      stream = *(void **)(file_descriptor + 8);\n    }\n    else if (stream == PTR___sf_fake_stderr_08006c30) {\n      stream = *(void **)(file_descriptor + 0xc);\n    }\n    short *buffer_status = (short *)(stream + 0xc);\n    if (*buffer_status != 0) {\n      result = __sflush_r(file_descriptor, stream, mode, flags);\n    }\n  }\n  return result;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_not_empty_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "set_data_pins_080012e8",
                "value": "data_value",
                "uVar1": "bit_position",
                "_data_pins": "data_pins"
            },
            "code": "void __thiscall set_data_pins_080012e8(LiquidCrystal *this,uint8_t value)\n{\n  uint8_t bit_position;\n  for (bit_position = 0; bit_position < 8; bit_position++) {\n    digitalWrite((uint8_t)this->_data_pins[bit_position], (uint8_t)value >> (bit_position & 0xff) & 1);\n  }\n  pulseEnable(this);\n  return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "send"
            ],
            "imported": false,
            "current_name": "set_data_pins_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "write_to_stream_08006370",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_length",
                "puVar2": "buffer_end",
                "iVar3": "bytes_written",
                "iVar1": "result"
            },
            "code": "int write_to_stream_08006370(int stream, int character, void *buffer, int buffer_length)\n{\n  int result;\n  void *buffer_end = buffer + buffer_length;\n  int bytes_written = buffer_length;\n  do {\n    if (buffer == buffer_end) {\n      return 0;\n    }\n    result = __sfputc_r(stream, *buffer, character, buffer_length, bytes_written);\n    buffer_length = result + 1;\n    buffer = buffer + 1;\n  } while (buffer_length != 0);\n  return result;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_interrupt_080024f8",
                "IRQn": "irq_number",
                "uVar1": "irq_index",
                "DAT_08002510": "irq_data"
            },
            "code": "void set_interrupt_080024f8(IRQn_Type_conflict irq_number)\n{\n  uint32_t irq_index = (uint32_t)irq_number;\n  if (irq_index >= 0) {\n    uint32_t irq_word_index = irq_index >> 5;\n    uint32_t irq_bit_index = irq_index & 0x1f;\n    *(int32_t *)(DAT_08002510 + irq_word_index * 4) = 1 << irq_bit_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "uart_attach_tx_callback",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_080024f8"
        },
        "FUN_0800594e": {
            "renaming": {
                "FUN_0800594e": "read_byte_0800594e",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "bVar1": "received_byte",
                "uVar2": "tail_index",
                "this": "serial_obj"
            },
            "code": "ssize_t __thiscall read_byte_0800594e(HardwareSerial *serial_obj, int file_descriptor, void *buffer, size_t num_bytes) {\n  byte received_byte;\n  ushort tail_index;\n\n  tail_index = (serial_obj->_serial).rx_tail;\n  if ((uint)(serial_obj->_serial).rx_head != (uint)tail_index) {\n    received_byte = (serial_obj->_serial).rx_buff[tail_index];\n    (serial_obj->_serial).rx_tail = (tail_index + 1) & 0x3f;\n    return (uint)received_byte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800594e",
            "calling": [],
            "imported": false,
            "current_name": "read_byte_0800594e"
        },
        "FUN_080056a8": {
            "renaming": {
                "FUN_080056a8": "handle_UART_interrupt_080056a8",
                "USART2_IRQn": "UART_interrupt",
                "PTR_uart_handlers_080056bc": "uart_handlers_ptr",
                "huart": "UART_handle"
            },
            "code": "void handle_UART_interrupt_080056a8(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  UART_HandleTypeDef *huart = *(UART_HandleTypeDef **)(PTR_uart_handlers_080056bc + 4);\n  HAL_UART_IRQHandler(huart);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_080056a8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "pid_controller_08001ab0",
                "*Input": "input",
                "*Output": "output",
                "*Setpoint": "setpoint",
                "Kp": "kp",
                "Ki": "ki",
                "Kd": "kd",
                "POn": "p_on",
                "ControllerDirection": "controller_direction",
                "POn_00": "p_on_00",
                "in_stack_ffffffe8": "lower_limit",
                "in_stack_ffffffec": "upper_limit",
                "in_stack_fffffff4": "unused",
                "this->myOutput": "this->my_output",
                "this->myInput": "this->my_input",
                "this->mySetpoint": "this->my_setpoint",
                "this->inAuto": "this->in_auto",
                "SetOutputLimits": "set_output_limits",
                "this->SampleTime": "this->sample_time",
                "SetControllerDirection": "set_controller_direction",
                "SetTunings": "set_tunings",
                "millis": "current_time",
                "this->lastTime": "this->last_time"
            },
            "code": "pid_controller_08001ab0* __thiscall pid_controller_08001ab0(pid_controller_08001ab0* this, double* input, double* output, double* setpoint, double Kp, double Ki, double Kd, int p_on, int controller_direction)\n{\n  uint32_t current_time;\n  int p_on_00;\n  undefined4 lower_limit;\n  undefined4 upper_limit;\n  \n  this->my_output = output;\n  this->my_input = input;\n  this->my_setpoint = setpoint;\n  this->in_auto = false;\n  set_output_limits(this, (double)CONCAT44(PTR_DAT_08001b14, PTR_DAT_08001b10), (double)CONCAT44(upper_limit, lower_limit));\n  this->sample_time = 100;\n  set_controller_direction(this, controller_direction);\n  set_tunings(this, Ki, Kd, (double)CONCAT44(p_on_00, PTR_DAT_08001b18), p_on);\n  current_time = millis();\n  this->last_time = current_time - this->sample_time;\n  return this;\n}",
            "called": [
                "SetControllerDirection",
                "millis",
                "SetOutputLimits",
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "pid_controller_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "raise_signal_6_and_exit_08006ac0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "\n#include <signal.h>\n#include <stdlib.h>\n\nvoid raise_signal_6_and_exit_08006ac0(void)\n{\n  raise(SIGABRT);\n  _exit(EXIT_FAILURE);\n}\n",
            "called": [
                "raise",
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "imported": false,
            "current_name": "raise_signal_6_and_exit_08006ac0"
        },
        "FUN_08007220": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_08007220": "set_wchar_t_ctype_flags",
                "FUN_08007220": "set_wchar_t_ctype_flags_08007220"
            },
            "code": "void set_wchar_t_ctype_flags_08007220() {\\n\\\n  if (*(int *)PTR_id_08007284 < 0) {\\n\\\n    *(undefined4 *)PTR_id_08007284 = 1;\\n\\\n  }\\n\\\n  if (*(int *)PTR_id_08007288 < 0) {\\n\\\n    *(undefined4 *)PTR_id_08007288 = 1;\\n\\\n  }\\n\\\n  if (*(int *)PTR_id_0800728c < 0) {\\n\\\n    *(undefined4 *)PTR_id_0800728c = 1;\\n\\\n  }\\n\\\n  if (*(int *)PTR_id_08007290 < 0) {\\n\\\n    *(undefined4 *)PTR_id_08007290 = 1;\\n\\\n  }\\n\\\n  if (*(int *)PTR_id_08007294 < 0) {\\n\\\n    *(undefined4 *)PTR_id_08007294 = 1;\\n\\\n  }\\n\\\n  if (*(int *)PTR_id_08007298 < 0) {\\n\\\n    *(undefined4 *)PTR_id_08007298 = 1;\\n\\\n  }\\n\\\n  if (*(int *)PTR_id_0800729c < 0) {\\n\\\n    *(undefined4 *)PTR_id_0800729c = 1;\\n\\\n  }\\n\\\n  if (*(int *)PTR_id_080072a0 < 0) {\\n\\\n    *(undefined4 *)PTR_id_080072a0 = 1;\\n\\\n  }\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007220",
            "calling": [],
            "imported": false,
            "current_name": "set_wchar_t_ctype_flags_08007220"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "send_data_over_uart_08004198",
                "huart": "uart_handle",
                "uVar1": "data_length",
                "pbVar2": "data_buffer",
                "HAL_UART_STATE_BUSY_TX": "HAL_UART_STATE_BUSY_TRANSMITTING",
                "HAL_BUSY": "HAL_ERROR_BUSY",
                "(huart->Init).WordLength": "uart_handle->Init.WordLength",
                "0x1000": "UART_WORDLENGTH_9B",
                "huart->Instance->DR": "uart_handle->Instance->DR",
                "huart->pTxBuffPtr": "uart_handle->pTxBuffPtr",
                "(huart->Init).Parity": "uart_handle->Init.Parity",
                "huart->TxXferCount": "uart_handle->TxXferCount",
                "HAL_OK": "HAL_OK",
                "0": "UART_CR1_CLEAR_TE_BIT",
                "0x40": "UART_CR1_SET_TCIE_BIT"
            },
            "code": "HAL_StatusTypeDef_conflict send_data_over_uart_08004198(UART_HandleTypeDef *uart_handle)\n{\n  uint16_t data_length;\n  byte *data_buffer;\n\n  if (uart_handle->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uart_handle->Init).WordLength == UART_WORDLENGTH_9B) {\n    uart_handle->Instance->DR = *(ushort *)uart_handle->pTxBuffPtr & UART_9BIT_MASK;\n    if ((uart_handle->Init).Parity == UART_PARITY_NONE) {\n      uart_handle->pTxBuffPtr += 2;\n    }\n    else {\n      uart_handle->pTxBuffPtr += 1;\n    }\n  }\n  else {\n    data_buffer = uart_handle->pTxBuffPtr;\n    uart_handle->pTxBuffPtr += 1;\n    uart_handle->Instance->DR = (uint)*data_buffer;\n  }\n  data_length = uart_handle->TxXferCount - 1;\n  uart_handle->TxXferCount = data_length;\n  if (data_length == 0) {\n    uart_handle->Instance->CR1 &= UART_CR1_CLEAR_TE_BIT;\n    uart_handle->Instance->CR1 |= UART_CR1_SET_TCIE_BIT;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_data_over_uart_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "configure_systick_08001c3c",
                "TickPriority": "tick_priority",
                "uVar1": "systick_config",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "PTR_SystemCoreClock_08001c80": "PTR_SystemCoreClock_08001c80",
                "PTR_uwTickFreq_08001c7c": "PTR_uwTickFreq_08001c7c",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08001c84": "PTR_uwTickPrio_08001c84",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict configure_systick_08001c3c(uint32_t tick_priority)\n{\n  uint32_t clock_speed = *(uint *)PTR_SystemCoreClock_08001c80;\n  uint32_t tick_frequency = *(byte *)PTR_uwTickFreq_08001c7c;\n  uint32_t systick_config = clock_speed / (1000 / tick_frequency);\n  HAL_StatusTypeDef_conflict status = HAL_SYSTICK_Config(systick_config);\n\n  if (status != HAL_OK) {\n    return HAL_ERROR;\n  }\n\n  if (tick_priority > 0xf) {\n    return HAL_ERROR;\n  }\n\n  HAL_NVIC_SetPriority(SysTick_IRQn, tick_priority, 0);\n  *(uint32_t *)PTR_uwTickPrio_08001c84 = tick_priority;\n\n  return HAL_OK;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "configure_systick_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "<original_function_name>": "is_valid_input",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "FUN_08000a2c": "is_valid_input_08000a2c"
            },
            "code": "bool is_valid_input_08000a2c(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n                      bool is_input1_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n                      bool is_input2_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n                      if (is_input1_valid && is_input2_valid) {\n                        return true;\n                      }\n                      return false;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "set_cursor_position_08001366",
                "col": "column",
                "row": "row",
                "uVar1": "row_index",
                "_numlines": "_number_of_lines",
                "_row_offsets": "_row_offsets",
                "send": "send"
            },
            "code": "void __thiscall set_cursor_position_08001366(LiquidCrystal *this, uint8_t column, uint8_t row) {\\n  uint8_t row_index;\\n  if (row > 3) {\\n    row_index = 3;\\n  } else {\\n    row_index = row;\\n  }\\n  if (this->_numlines <= row_index) {\\n    row_index = (this->_numlines - 1) & 0xFF;\\n  }\\n  uint8_t position = column + this->_row_offsets[row_index] | 0x80;\\n  send(this, position, \"\\0\");\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "set_cursor_position_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "write_digital_pin_08005848",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "_Var1": "is_pin_configured_result",
                "port": "gpio_port",
                "uVar2": "digital_pin_number",
                "PTR_digitalPin_08005888": "PTR_digitalPin_08005888",
                "PTR_g_digPinConfigured_0800588c": "PTR_g_digPinConfigured_0800588c",
                "GPIO_TypeDef": "GPIO_TypeDef",
                "PinName_conflict": "PinName_conflict",
                "get_GPIO_Port": "get_GPIO_Port",
                "digital_io_write": "digital_io_write"
            },
            "code": "void write_digital_pin_08005848(uint32_t pin_number, uint32_t pin_value)\n{\n  bool is_pin_configured_result;\n  GPIO_TypeDef *gpio_port;\n  uint32_t digital_pin_number;\n  \n  if (pin_number < 0x3c) {\n    digital_pin_number = (uint32_t)(char)PTR_digitalPin_08005888[pin_number];\n  }\n  else {\n    digital_pin_number = 0xffffffff;\n  }\n  if ((digital_pin_number != 0xffffffff) && (is_pin_configured_result = is_pin_configured((PinName_conflict)digital_pin_number, (uint32_t *)PTR_g_digPinConfigured_0800588c), is_pin_configured_result)) {\n    gpio_port = get_GPIO_Port((digital_pin_number << 0x18) >> 0x1c);\n    digital_io_write(gpio_port, 1 << (digital_pin_number & 0xf) & 0xffff, pin_value);\n  }\n  return;\n}",
            "called": [
                "is_pin_configured",
                "digital_io_write",
                "get_GPIO_Port"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "readData",
                "write4bits",
                "send",
                "setup",
                "MAX31855",
                "begin",
                "write8bits",
                "pulseEnable",
                "loop"
            ],
            "imported": false,
            "current_name": "write_digital_pin_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "software_interrupt_handler_08000ae8",
                "a0": "data",
                "a1": "interrupt_code",
                "a2": "status"
            },
            "code": "uint32_t software_interrupt_handler_08000ae8(uint32_t interrupt_code, uint32_t data, int32_t status)\n{\n  software_interrupt(interrupt_code);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "software_interrupt_handler_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "reset_timer_08003ed8",
                "htim": "timer",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "pTVar1": "timer_instance"
            },
            "code": "HAL_StatusTypeDef_conflict reset_timer_08003ed8(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *timer_instance;\n  timer->State = HAL_TIM_STATE_BUSY;\n  timer_instance = timer->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 = timer_instance->CR1 & ~(1);\n  }\n  HAL_TIM_PWM_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "reset_timer_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_with_byte_080061e0",
                "__s": "memory",
                "__c": "byte",
                "__n": "num_bytes",
                "puVar1": "ptr"
            },
            "code": "void * fill_memory_with_byte_080061e0(void *memory, int byte, size_t num_bytes){\n    unsigned char *ptr = (unsigned char *)memory;\n    unsigned char byte_as_char = (unsigned char)byte;\n    for (size_t i = 0; i < num_bytes; i++) {\n        *ptr = byte_as_char;\n        ptr++;\n    }\n    return memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "__sfp",
                "adc_read_value",
                "std.isra.0",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "fill_memory_with_byte_080061e0"
        },
        "FUN_08004f0c": {
            "renaming": {
                "FUN_08004f0c": "handle_i2c_event_08004f0c",
                "PTR_i2c_handles_08004f18": "PTR_i2c_handles",
                "I2C_HandleTypeDef": "i2c_handle"
            },
            "code": "void handle_i2c_event_08004f0c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08004f18_08004f18;\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f0c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_08004f0c"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "transmit_data_using_uart_08005604",
                "huart": "uart_handle",
                "bVar1": "uart_index_value",
                "uVar2": "uart_index_value",
                "iVar3": "callback_function_result",
                "iVar4": "callback_function_address",
                "PTR_tx_callback_obj_08005644": "PTR_tx_callback_obj_08005644",
                "PTR_tx_callback_08005648": "PTR_tx_callback_08005648",
                "PTR_uart_handlers_0800564c": "PTR_uart_handlers_0800564c"
            },
            "code": "void transmit_data_using_uart_08005604(UART_HandleTypeDef *uart_handle) {\n  uint8_t uart_index_value = get_uart_index(uart_handle);\n  uint8_t callback_obj_index = uart_index_value * 4;\n  int callback_function_address = *(int *)(PTR_tx_callback_obj_08005644 + callback_obj_index);\n  if ((uart_index_value < 5) && (callback_function_address != -1)) {\n    int uart_handler_address = *(int *)(callback_function_address + 100);\n    uint16_t data_address = *(uint16_t *)(callback_function_address + 0x6a);\n    uint8_t *data = (uint8_t *)(uart_handler_address + data_address);\n    HAL_UART_Transmit_IT(uart_handle, data, 1);\n  }\n  return;\n}",
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_using_uart_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "always_returns_one_08005724",
                "file_UNUSED": "file_unused"
            },
            "code": "int always_returns_one_08005724(int file_unused) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "always_returns_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "zero_return_08005728",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "int zero_return_08005728(int file_unused, int ptr_unused, int dir_unused) {\n                    return 0;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "zero_return_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "send_instruction_to_lcd_0800135a",
                "this": "lcd_instance",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void __thiscall send_instruction_to_lcd_0800135a(LiquidCrystal *lcd_instance, char instruction, char padding) {\n    send(lcd_instance, instruction, padding);\n    return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "setup",
                "begin",
                "loop"
            ],
            "imported": false,
            "current_name": "send_instruction_to_lcd_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "__thiscall Print::FUN_08005c96": "print_string",
                "this": "self",
                "str": "string",
                "sVar1": "string_length",
                "sVar2": "printed_length",
                "FUN_08005c96": "print_string_08005c96"
            },
            "code": "size_t __thiscall print_string_08005c96(Print *this, char *string) {\n  size_t string_length;\n  size_t printed_length;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    printed_length = (*this->_vptr_Print[1])(string_length, string, string_length);\n    return printed_length;\n  }\n  return 0;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "setup",
                "printFloat",
                "println",
                "loop"
            ],
            "imported": false,
            "current_name": "print_string_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_file_mode_to_directory_0800571a",
                "file_UNUSED": "unused_file_parameter",
                "st": "file_stats",
                "st_mode": "file_mode"
            },
            "code": "int set_file_mode_to_directory_0800571a(stat *file_stats){\n    file_stats->st_mode = S_IFDIR;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "handle_i2c_transfer_08002efc",
                "*hi2c": "*i2c_handle",
                "uVar1": "transfer_options",
                "pbVar2": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_transfer_08002efc(I2C_HandleTypeDef *i2c_handle) {\n  uint32_t transfer_options;\n  byte *buffer_pointer;\n  transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2c_handle->XferCount == 0) {\n      if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n        i2c_handle->PreviousState = 0;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2c_handle);\n        }\n      }\n      else {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->PreviousState = 0x11;\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      buffer_pointer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_pointer + 1;\n      i2c_handle->Instance->DR = (uint)*buffer_pointer;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "delay_in_milliseconds_0800365c",
                "mdelay": "milliseconds",
                "Delay": "delay_cycles",
                "bVar1": "delay_completed"
            },
            "code": "void delay_in_milliseconds_0800365c(uint32_t milliseconds)\n{\n  bool delay_completed;\n  uint32_t delay_cycles = milliseconds * (uint)((ulonglong)DAT_08003684 * (ulonglong)*(uint *)PTR_SystemCoreClock_08003680 >> 0x29);\n  do {\n    delay_completed = delay_cycles != 0;\n    delay_cycles--;\n  } while (delay_completed);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_in_milliseconds_0800365c"
        },
        "FUN_08006ad0": {
            "renaming": {
                "FUN_08006ad0": "decode_data_08006ad0",
                "param_1": "data",
                "param_2": "params",
                "iVar1": "current_offset",
                "piVar2": "block_size",
                "uVar3": "total_size",
                "uVar4": "flags",
                "iVar5": "block_size",
                "pcVar6": "block_decoder",
                "iVar7": "current_offset",
                "uVar8": "original_data",
                "bVar9": "has_error",
                "DAT_08006bdc": "some_data"
            },
            "code": "uint32_t decode_data_08006ad0(uint32_t *data, int *params)\n{\n    int current_offset;\n    int block_size;\n    int total_size;\n    uint16_t flags;\n    uint32_t result = 0;\n    uint16_t flag_0x40 = 0x40;\n    bool has_error = false;\n    uint32_t original_data = *data;\n\n    flags = *(uint16_t *)(params + 3);\n    total_size = (int)flags;\n    if ((total_size << 0x1c) < 0)\n    {\n        current_offset = params[4];\n        if (current_offset != 0)\n        {\n            block_size = total_size << 0x1e;\n            if (block_size != 0)\n            {\n                block_size = 0;\n            }\n            else\n            {\n                block_size = params[5];\n            }\n            params[0] = current_offset;\n            params[2] = block_size;\n            for (current_offset = current_offset - params[0]; current_offset > 0; current_offset -= block_size)\n            {\n                block_size = (*(code *)params[10])(data, params[8], current_offset, block_size);\n                if (block_size < 1)\n                {\n                    flags |= flag_0x40;\n                    has_error = true;\n                    goto end;\n                }\n                params[0] += block_size;\n            }\n        }\n    }\n    else\n    {\n        if ((params[1] > 0 || params[0x10] > 0) && params[0xb] != 0)\n        {\n            code *block_decoder = (code *)params[0xb];\n            uint32_t original_data = *data;\n            *data = 0;\n            if ((flags & 0x1000) == 0)\n            {\n                block_size = (*block_decoder)(data, params[8], flags & 0x1000, 1);\n                if (block_size == -1 && *data != 0)\n                {\n                    if (*data != 0x1d && *data != 0x16)\n                    {\n                        flags |= flag_0x40;\n                        has_error = true;\n                        goto end;\n                    }\n                    *data = original_data;\n                    goto end;\n                }\n            }\n            else\n            {\n                block_size = params[0x15];\n            }\n            if ((int)(flags << 0x1d) < 0 && params[0xd] != 0)\n            {\n                block_size -= params[1];\n                if (params[0xd] != params + 0x11)\n                {\n                    _free_r(data);\n                }\n                params[0xd] = 0;\n            }\n            block_size = (*(code *)params[0xb])(data, params[8], block_size, 0);\n            if (block_size == -1 && (*data > 0x1d || (-1 < (int)(DAT_08006bdc >> (*data & 0xff)) << 0x1f)))\n            {\n                flags |= flag_0x40;\n                has_error = true;\n                goto end;\n            }\n            params[1] = 0;\n            params[0] = params[4];\n            if ((int)(flags << 0x13) < 0 && (block_size != -1 || *data == 0))\n            {\n                params[0x15] = block_size;\n            }\n        }\n    }\nend:\n    *data = original_data;\n    return has_error ? 0xffffffff : result;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ad0",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_data_08006ad0"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "i2c_handler_080033b8",
                "hi2c": "handle",
                "pIVar1": "instance",
                "uVar2": "sr1",
                "uVar3": "cr2",
                "uVar4": "sr2",
                "DAT_08003518": "I2C_SR1_ADDR",
                "DAT_08003504": "I2C_SR1_TXE",
                "DAT_0800350c": "I2C_SR2_BUSY",
                "DAT_0800351c": "I2C_SR1_RXNE",
                "DAT_08003514": "I2C_SR1_BTF",
                "I2C_Master_ADDR": "i2c_master_addr",
                "I2C_Master_ADD10": "i2c_master_add10",
                "I2C_Master_SB": "i2c_master_sb",
                "I2C_MasterReceive_RXNE": "i2c_master_receive_rxne",
                "I2C_MasterReceive_BTF": "i2c_master_receive_btf",
                "I2C_MasterTransmit_TXE": "i2c_master_transmit_txe",
                "I2C_MasterTransmit_BTF": "i2c_master_transmit_btf",
                "I2C_Slave_ADDR": "i2c_slave_addr",
                "I2C_Slave_STOPF": "i2c_slave_stopf",
                "I2C_SlaveReceive_RXNE": "i2c_slave_receive_rxne",
                "I2C_SlaveReceive_BTF": "i2c_slave_receive_btf",
                "I2C_SlaveTransmit_TXE": "i2c_slave_transmit_txe",
                "I2C_SlaveTransmit_BTF": "i2c_slave_transmit_btf"
            },
            "code": "void i2c_handler_080033b8(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *instance;\n  uint32_t sr2;\n  uint32_t sr1;\n  uint32_t cr2;\n\n  instance = handle->Instance;\n  sr2 = instance->SR2;\n  sr1 = instance->SR1;\n  cr2 = instance->CR2;\n\n  if ((handle->Mode == HAL_I2C_MODE_MASTER) || (handle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((sr1 & DAT_08003518) == 0) || ((cr2 & I2C_CR2_ITEVTEN) == 0)) {\n      if (((DAT_08003504 & sr1) == 0) || ((cr2 & I2C_CR2_ITEVTEN) == 0)) {\n        if (((DAT_08003514 & sr1) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n          I2C_Master_ADDR(handle);\n        }\n      }\n      else {\n        I2C_Master_ADD10(handle);\n      }\n    }\n    else {\n      I2C_Master_SB(handle);\n    }\n    if ((I2C_SR2_MSL & sr2) == 0) {\n      if ((((DAT_0800351c & sr1) != 0) && ((cr2 & I2C_CR2_ITBUFEN) != 0)) && ((DAT_08003514 & sr1) == 0)\n         ) {\n        I2C_MasterReceive_RXNE(handle);\n        return;\n      }\n      if (((DAT_08003514 & sr1) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_MasterReceive_BTF(handle);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08003504 & sr1) != 0) && ((cr2 & I2C_CR2_ITBUFEN) != 0)) && ((DAT_08003514 & sr1) == 0)\n         ) {\n        I2C_MasterTransmit_TXE(handle);\n        return;\n      }\n      if (((DAT_08003514 & sr1) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_MasterTransmit_BTF(handle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08003518 & sr1) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n      I2C_Slave_ADDR(handle);\n      return;\n    }\n    if (((I2C_SR1_STOPF & sr1) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n      I2C_Slave_STOPF(handle);\n      return;\n    }\n    if ((I2C_SR2_MSL & sr2) == 0) {\n      if ((((DAT_0800351c & sr1) != 0) && ((cr2 & I2C_CR2_ITBUFEN) != 0)) && ((DAT_08003514 & sr1) == 0)\n         ) {\n        I2C_SlaveReceive_RXNE(handle);\n        return;\n      }\n      if (((DAT_08003514 & sr1) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_SlaveReceive_BTF(handle);\n      }\n    }\n    else {\n      if ((((DAT_08003504 & sr1) != 0) && ((cr2 & I2C_CR2_ITBUFEN) != 0)) && ((DAT_08003514 & sr1) == 0)\n         ) {\n        I2C_SlaveTransmit_TXE(handle);\n        return;\n      }\n      if (((DAT_08003514 & sr1) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_SlaveTransmit_BTF(handle);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_ADDR",
                "I2C_Slave_STOPF",
                "I2C_Master_ADD10",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_SB",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_ADDR",
                "I2C_MasterReceive_RXNE"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handler_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "process_input_output_streams_080069e4",
                "param_1": "input_stream",
                "param_2": "output_stream",
                "uVar1": "return_value",
                "uVar2": "stream_flags",
                "iVar3": "impure_ptr"
            },
            "code": "uint process_input_output_streams_080069e4(undefined4 *input_stream, undefined4 *output_stream) {\n  uint return_value;\n  ushort stream_flags;\n  int impure_ptr = *(int *)PTR__impure_ptr_08006ab0;\n\n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n\n  if (output_stream == (undefined4 *)PTR___sf_fake_stdin_08006ab4) {\n    output_stream = *(undefined4 **)(impure_ptr + 4);\n  }\n  else if (output_stream == (undefined4 *)PTR___sf_fake_stdout_08006ab8) {\n    output_stream = *(undefined4 **)(impure_ptr + 8);\n  }\n  else if (output_stream == (undefined4 *)PTR___sf_fake_stderr_08006abc) {\n    output_stream = *(undefined4 **)(impure_ptr + 0xc);\n  }\n\n  stream_flags = *(ushort *)(output_stream + 3);\n  return_value = (uint)stream_flags;\n\n  if (-1 < (int)(return_value << 0x1c)) {\n    if (-1 < (int)(return_value << 0x1b)) {\n      *input_stream = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(return_value << 0x1d) < 0) {\n      if ((undefined4 *)output_stream[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)output_stream[0xd] != output_stream + 0x11) {\n          _free_r(input_stream);\n        }\n        output_stream[0xd] = 0;\n      }\n      *(ushort *)(output_stream + 3) = *(ushort *)(output_stream + 3) & 0xffdb;\n      output_stream[1] = 0;\n      *output_stream = output_stream[4];\n    }\n    *(ushort *)(output_stream + 3) = *(ushort *)(output_stream + 3) | 8;\n  }\n\n  if ((output_stream[4] == 0) && ((*(ushort *)(output_stream + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(input_stream,output_stream);\n  }\n\n  stream_flags = *(ushort *)(output_stream + 3);\n  return_value = stream_flags & 1;\n  if ((stream_flags & 1) == 0) {\n    if (-1 < (int)((uint)stream_flags << 0x1e)) {\n      return_value = output_stream[5];\n    }\n    output_stream[2] = return_value;\n  }\n  else {\n    output_stream[2] = 0;\n    output_stream[6] = -output_stream[5];\n  }\n\n  if (output_stream[4] == 0) {\n    stream_flags = *(ushort *)(output_stream + 3);\n    return_value = (int)(short)stream_flags & 0x80;\n    if (return_value != 0) {\n      *(ushort *)(output_stream + 3) = stream_flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "process_input_output_streams_080069e4"
        },
        "FUN_080060bc": {
            "renaming": {
                "FUN_080060bc": "handle_gpio_exti_irq_080060bc",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_irq_080060bc(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while (gpio_pin < 0x8001) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin = gpio_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060bc",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080060bc"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "update_systick_handler_08004b9e"
            },
            "code": "void update_systick_handler_08004b9e(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  noOsSystickHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "update_systick_handler_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08006940": {
            "renaming": {
                "FUN_08006940": "send_char_to_output_08006940",
                "param_1": "output_stream",
                "param_2": "character",
                "param_3": "stream_ptr",
                "param_4": "setup",
                "iVar1": "stream_length",
                "uVar2": "bitshifted_length",
                "puVar3": "stream_pointer"
            },
            "code": "uint send_char_to_output_08006940(int output_stream, uint character, int *stream_ptr, undefined4 setup)\n{\n  int stream_length;\n  uint bitshifted_length;\n  undefined *stream_pointer;\n  if ((output_stream != 0) && (*(int *)(output_stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream_ptr == (int *)PTR___sf_fake_stdin_080069d8) {\n    stream_ptr = *(int **)(output_stream + 4);\n  }\n  else if (stream_ptr == (int *)PTR___sf_fake_stdout_080069dc) {\n    stream_ptr = *(int **)(output_stream + 8);\n  }\n  else if (stream_ptr == (int *)PTR___sf_fake_stderr_080069e0) {\n    stream_ptr = *(int **)(output_stream + 0xc);\n  }\n  stream_ptr[2] = stream_ptr[6];\n  bitshifted_length = (uint)*(ushort *)(stream_ptr + 3);\n  stream_length = bitshifted_length << 0x1c;\n  if (((stream_length < 0) && (bitshifted_length = stream_ptr[4], bitshifted_length != 0)) || (stream_length = __swsetup_r(output_stream, stream_ptr, stream_length, bitshifted_length, setup), stream_length == 0)) {\n    character = character & 0xff;\n    stream_length = *stream_ptr - stream_ptr[4];\n    if ((stream_length < stream_ptr[5]) || (stream_length = _fflush_r(output_stream, stream_ptr), stream_length == 0)) {\n      stream_ptr[2] = stream_ptr[2] + -1;\n      stream_pointer = (undefined *)*stream_ptr;\n      *stream_ptr = (int)(stream_pointer + 1);\n      *stream_pointer = (char)character;\n      if (stream_length + 1 != stream_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream_ptr + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      stream_length = _fflush_r(output_stream, stream_ptr);\n      if (stream_length == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006940",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "send_char_to_output_08006940"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "send_uart_debug_message_08005730",
                "file_UNUSED": "file_unused",
                "ptr": "message",
                "len": "message_len",
                "sVar1": "message_size",
                "*": "*"
            },
            "code": "int send_uart_debug_message_08005730(int file_unused, char *message, int message_len)\n{\n  size_t message_size;\n  message_size = uart_debug_send((uint8_t *)message, message_len);\n  return message_size;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "send_uart_debug_message_08005730"
        },
        "FUN_080058ea": {
            "renaming": {
                "FUN_080058ea": "calculate_new_tail_position_080058ea",
                "obj": "serial_conflict_obj",
                "iVar3": "new_tail_position",
                "uVar1": "tail_as_ushort",
                "uVar2": "masked_tail"
            },
            "code": "int calculate_new_tail_position_080058ea(serial_t_conflict *serial_conflict_obj) {\n    int new_tail_position = serial_conflict_obj->tx_tail + 1;\n    ushort tail_as_ushort = (ushort)new_tail_position;\n    uint16_t masked_tail = tail_as_ushort & 0x7f;\n    if (new_tail_position == 0) {\n        masked_tail = -(-tail_as_ushort & 0x7f);\n    }\n    serial_conflict_obj->tx_tail = masked_tail;\n    if (serial_conflict_obj->tx_head != serial_conflict_obj->tx_tail) {\n        return 0;\n    }\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ea",
            "calling": [],
            "imported": false,
            "current_name": "calculate_new_tail_position_080058ea"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "run_systick_callback_08002582"
            },
            "code": "void run_systick_callback_08002582(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "run_systick_callback_08002582"
        },
        "FUN_08005976": {
            "renaming": {
                "FUN_08005976": "wait_until_tx_queue_is_empty_08005976",
                "_written": "has_data_to_write",
                "_serial": "tx_queue",
                "tx_head": "head",
                "tx_tail": "tail"
            },
            "code": "void __thiscall wait_until_tx_queue_is_empty_08005976(HardwareSerial *this)\n{\n    if (this->has_data_to_write) {\n        while ((this->tx_queue).head != (this->tx_queue).tail);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005976",
            "calling": [],
            "imported": false,
            "current_name": "wait_until_tx_queue_is_empty_08005976"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "get_gpio_08004884",
                "port_idx": "port_index",
                "pGVar1": "gpio",
                "tmpreg": "gpio_reg",
                "tmpreg_1": "unused",
                "tmpreg_2": "unused",
                "tmpreg_3": "unused",
                "tmpreg_4": "unused",
                "DAT_08004914": "gpio_base",
                "DAT_08004918": "unused",
                "DAT_0800491c": "unused",
                "DAT_08004920": "unused",
                "DAT_08004924": "unused",
                "DAT_08004928": "unused"
            },
            "code": "GPIO_TypeDef * get_gpio_08004884(uint32_t port_index)\n{\n  GPIO_TypeDef *gpio;\n  uint32_t gpio_reg;\n  const uint32_t* DAT_08004914 = (const uint32_t*)0x08004914;\n\n  switch(port_index) {\n  case 0:\n    gpio_reg = *(DAT_08004914 + 0x18) | 4;\n    gpio = (GPIO_TypeDef*)0x08004918;\n    break;\n  case 1:\n    gpio_reg = *(DAT_08004914 + 0x18) | 8;\n    gpio = (GPIO_TypeDef*)0x0800491c;\n    break;\n  case 2:\n    gpio_reg = *(DAT_08004914 + 0x18) | 0x10;\n    gpio = (GPIO_TypeDef*)0x08004920;\n    break;\n  case 3:\n    gpio_reg = *(DAT_08004914 + 0x18) | 0x20;\n    gpio = (GPIO_TypeDef*)0x08004924;\n    break;\n  case 4:\n    gpio_reg = *(DAT_08004914 + 0x18) | 0x40;\n    gpio = (GPIO_TypeDef*)0x08004928;\n    break;\n  default:\n    gpio = (GPIO_TypeDef*)0x0;\n  }\n  return gpio;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_gpio_08004884"
        },
        "FUN_08005fa0": {
            "renaming": {
                "FUN_08005fa0": "free_gpio_irq_configurations_08005fa0",
                "param_1": "list_start",
                "puVar1": "current_node",
                "puVar2": "previous_node"
            },
            "code": "void free_gpio_irq_configurations_08005fa0(void *list_start)\n{\n  undefined *current_node;\n  undefined *previous_node;\n  \n  current_node = PTR___malloc_free_list_08005fc0;\n  while (previous_node = current_node, previous_node != PTR_gpio_irq_conf_08005fc4) {\n    current_node = previous_node + -0x14;\n    if (*(code **)(previous_node + -8) != (code *)0x0) {\n      (**(code **)(previous_node + -8))(previous_node + -0x10,previous_node + -0x10,3);\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fa0",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configurations_08005fa0"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "index",
                "puVar2": "data_pointer",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_system_08001be8(void)\n{\n    int index = 0;\n    undefined4 *data_pointer;\n    code *jump_table;\n\n    for (index = 0; PTR___dso_handle_08001c20 + index < PTR__edata_08001c24; index += 4) {\n        *(undefined4 *)(PTR___dso_handle_08001c20 + index) = *(undefined4 *)(PTR__sidata_08001c1c + index);\n    }\n\n    for (data_pointer = (undefined4 *)PTR_completed_8667_08001c28; data_pointer < PTR__ebss_08001c2c; data_pointer++) {\n        *data_pointer = 0;\n    }\n\n    SystemInit();\n    __libc_init_array();\n\n    jump_table = (code *)0x8001c1a;\n    main();\n\n    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n    /* WARNING: Treating indirect jump as call */\n    (*jump_table)();\n    return;\n}",
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "filler_1",
                "param_4": "filler_2",
                "puVar1": "free_list",
                "extraout_r1": "extra_out_r1",
                "ppiVar2": "prev_block",
                "ppiVar3": "next_block",
                "piVar4": "current_block_data",
                "ppiVar5": "current_free_block",
                "ppiVar6": "prev_free_block",
                "ppiVar7": "current_memory_block"
            },
            "code": "void allocate_memory_080061f0(int* error_code, int size, int filler_1, int filler_2)\n{\n    if (size == 0) {\n        return;\n    }\n    int** current_memory_block = (int**)(size - 4);\n    if (*(int*)(size - 4) < 0) {\n        current_memory_block = (int**)((int)current_memory_block + *(int*)(size - 4));\n    }\n    __malloc_lock();\n    void* free_list = PTR___malloc_free_list_08006284;\n    int** current_free_block = *(int***)(PTR___malloc_free_list_08006284);\n    if (current_free_block == (int**)0x0) {\n        current_memory_block[1] = (int*)0x0;\n        *(int***)free_list = current_memory_block;\n        int** extra_out_r1 = NULL;\n        int** new_block = (int**)free_list;\n    }\n    else if (current_memory_block < current_free_block) {\n        int** prev_block = (int**)*current_memory_block;\n        int** next_block = (int**)((int)current_memory_block + (int)prev_block);\n        if (current_free_block == next_block) {\n            int* current_block_data = *current_free_block;\n            current_free_block = (int**)current_free_block[1];\n            next_block = (int**)((int)current_block_data + (int)prev_block);\n            *current_memory_block = (int*)next_block;\n        }\n        current_memory_block[1] = (int*)current_free_block;\n        *(int***)free_list = current_memory_block;\n    }\n    else {\n        do {\n            int** prev_free_block = current_free_block;\n            int** next_free_block = (int**)current_free_block[1];\n            if (next_free_block == (int**)0x0) {\n                break;\n            }\n            current_free_block = next_free_block;\n        } while (next_free_block <= current_memory_block);\n        int** prev_block = (int**)*prev_free_block;\n        if ((int**)((int)prev_free_block + (int)prev_block) == current_memory_block) {\n            prev_block = (int**)((int)prev_block + (int)*current_memory_block);\n            *prev_free_block = (int*)prev_block;\n            if (next_free_block == (int**)((int)prev_free_block + (int)prev_block)) {\n                int* current_block_data = *next_free_block;\n                next_free_block = (int**)next_free_block[1];\n                prev_block = (int**)((int)prev_block + (int)current_block_data);\n                *prev_free_block = (int*)prev_block;\n                prev_free_block[1] = (int*)next_free_block;\n            }\n        }\n        else if (current_memory_block < (int**)((int)prev_free_block + (int)prev_block)) {\n            *error_code = 0xc;\n        }\n        else {\n            int** next_block = (int**)((int)current_memory_block + (int)*current_memory_block);\n            if (next_free_block == next_block) {\n                int* current_block_data = *next_free_block;\n                next_free_block = (int**)next_free_block[1];\n                next_block = (int**)((int)current_block_data + (int)*current_memory_block);\n                *current_memory_block = (int*)next_block;\n            }\n            current_memory_block[1] = (int*)next_free_block;\n            prev_free_block[1] = (int*)current_memory_block;\n        }\n    }\n    __malloc_unlock(error_code, extra_out_r1, new_block, filler_2);\n    return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "__sflush_r",
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "stop_and_disable_conversion_08002348",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "hadc->Lock": "adc_handle->Lock",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_OK": "HAL_OK",
                "hadc->State": "adc_handle->State",
                "0xffffeefe": "0xffffeefe",
                "1": "1",
                "HAL_UNLOCKED": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef_conflict stop_and_disable_conversion_08002348(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (adc_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adc_handle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adc_handle);\n  if (status == HAL_OK) {\n    adc_handle->State = (adc_handle->State & 0xffffeefe) | 1;\n  }\n  adc_handle->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_and_disable_conversion_08002348"
        },
        "FUN_08004f1c": {
            "renaming": {
                "FUN_08004f1c": "handle_i2c_error_08004f1c",
                "PTR_i2c_handles_08004f28": "PTR_i2c_handles",
                "I2C_HandleTypeDef": "I2C_Handle",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_error_08004f1c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08004f28_08004f28;\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f1c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_08004f1c"
        },
        "FUN_080060d4": {
            "renaming": {
                "__thiscall std::function<void()>::operator__": "invoke",
                "this": "function_pointer",
                "super__Function_base": "parent",
                "_M_manager": "manager",
                "_M_invoker": "invoker",
                "_Any_data": "data",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_080060d4": "std::function<void_080060d4"
            },
            "code": "void __thiscall std::function<void_080060d4()>::invoke(function_void___ *function_pointer) {\n  if ((function_pointer->super__Function_base)._M_manager != (_Manager_type)0x0) {\n    (*function_pointer->_M_invoker)((_Any_data *)function_pointer);\n    return;\n  }\n  __throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "std::function<void_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "initialize_settings_08005a68",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "config_masked",
                "iVar2": "databits",
                "PTR_s__home_bo__arduino15_packages_STM_08005b20": "assertion_message",
                "PTR___PRETTY_FUNCTION___08005b1c": "function_name",
                "PTR_s_databits__0_08005b18": "databits_message"
            },
            "code": "void __thiscall initialize_settings_08005a68(HardwareSerial *serial, ulong baudrate, byte config) {\n  byte config_masked = config & 7;\n  int databits = 0;\n  int parity = 0;\n  int stopbits = 0;\n  int uart_config = 0;\n\n  if (config_masked == 4) {\n    databits = 7;\n  }\n  else if (config_masked == 6) {\n    databits = 8;\n  }\n  else if (config_masked == 2) {\n    databits = 6;\n  }\n\n  if ((config & 0x30) == 0x30) {\n    parity = 0x600;\n    databits++;\n  }\n  else if ((config & 0x20) == 0) {\n    parity = 0;\n  }\n  else {\n    parity = 0x400;\n    databits++;\n  }\n\n  if ((config & 8) == 0) {\n    stopbits = 0;\n  }\n  else {\n    stopbits = 0x2000;\n  }\n\n  if (databits == 8) {\n    uart_config = 0;\n  }\n  else if (databits == 9) {\n    uart_config = 0x1000;\n  }\n\n  serial->_serial.baudrate = baudrate;\n  serial->_config = config;\n  serial->_serial.databits = uart_config;\n  serial->_serial.parity = parity;\n  serial->_serial.stopbits = stopbits;\n\n  if (uart_config != 0) {\n    uart_init((serial_t *)&serial->_serial);\n    uart_attach_rx_callback((serial_t *)&serial->_serial, HardwareSerial::rx_callback);\n    return;\n  }\n\n  __assert_func(PTR_s__home_bo__arduino15_packages_STM_08005b20, 299, PTR___PRETTY_FUNCTION___08005b1c, PTR_s_databits__0_08005b18);\n}",
            "called": [
                "__assert_func",
                "uart_attach_rx_callback",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_settings_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "initialize_controller_parameters_08001814",
                "this": "pid",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "POn": "on_percentage",
                "iVar1": "is_less_than_zero",
                "uVar2": "sample_time_in_seconds_upper",
                "in_r2": "proportional_gain_upper",
                "in_r3": "proportional_gain_lower",
                "uVar3": "is_on_percentage_one",
                "bVar4": "is_on_percentage_not_one",
                "uVar5": "sample_time_in_seconds",
                "dVar6": "proportional_gain_in_seconds",
                "dVar7": "integral_gain_in_seconds",
                "dVar8": "derivative_gain_in_seconds"
            },
            "code": "void initialize_controller_parameters_08001814(PID *pid, double proportional_gain, double integral_gain, double derivative_gain, int on_percentage)\n{\n    bool is_on_percentage_one = (on_percentage != 1);\n    pid->on_percentage = on_percentage;\n    pid->on_percentage_enabled = is_on_percentage_one;\n    pid->displayed_proportional_gain = proportional_gain;\n    pid->displayed_integral_gain = integral_gain;\n    pid->displayed_derivative_gain = derivative_gain;\n    double sample_time_in_seconds = (double)pid->SampleTime / 1000.0;\n    double proportional_gain_in_seconds = proportional_gain * sample_time_in_seconds;\n    double integral_gain_in_seconds = integral_gain / sample_time_in_seconds;\n    double derivative_gain_in_seconds = derivative_gain / sample_time_in_seconds;\n    if (pid->controller_direction == 1) {\n        pid->proportional_gain = -proportional_gain_in_seconds;\n        pid->integral_gain = -integral_gain_in_seconds;\n        pid->derivative_gain = -derivative_gain_in_seconds;\n    }\n    else {\n        pid->proportional_gain = proportional_gain_in_seconds;\n        pid->integral_gain = integral_gain_in_seconds;\n        pid->derivative_gain = derivative_gain_in_seconds;\n    }\n}",
            "called": [
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "SetTunings",
                "PID"
            ],
            "imported": false,
            "current_name": "initialize_controller_parameters_08001814"
        },
        "FUN_080056c0": {
            "renaming": {
                "FUN_080056c0": "handle_USART3_interrupt_080056c0",
                "PTR_uart_handlers_080056d4": "uart_handlers_ptr",
                "USART3_IRQn": "USART3_interrupt",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4 + 8)": "uart_handle_ptr",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "HAL_UART_IRQHandler": "handle_UART_interrupt"
            },
            "code": "void handle_USART3_interrupt_080056c0(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  if (*(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4 + 8) != NULL) {\n    HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4 + 8));\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART3_interrupt_080056c0"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "call_afl_with_ticks_08000aec",
                "ticks": "ticks",
                "uVar1": "afl_result",
                "PTR_noHyperCall_08000b04": "PTR_noHyperCall_08000b04",
                "aflCall": "aflCall"
            },
            "code": "int call_afl_with_ticks_08000aec(int ticks)\n{\n  uint32_t afl_result;\n  if (*(int *)PTR_noHyperCall_08000b04 != 0) {\n    return 0;\n  }\n  afl_result = aflCall(1, ticks, 0);\n  return afl_result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_with_ticks_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "zero_out_file_0800572c",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "len_UNUSED": "len_unused"
            },
            "code": "int zero_out_file_0800572c(int file_unused, char *ptr_unused, int len_unused) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "zero_out_file_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_timer_handler_08004e12",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "irq_handler"
            },
            "code": "void execute_timer_handler_08004e12(TIM_HandleTypeDef *timer_handle) {\n  stimer_t *timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->irq_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->irq_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "execute_timer_handler_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_to_int_08000a58",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result",
                "iVar2": "temp_var",
                "uVar3": "temp_var2"
            },
            "code": "uint convert_to_int_08000a58(uint input_1, uint input_2)\n{\n  uint result;\n  int temp_var;\n  uint temp_var2;\n  if (input_2 * 2 < 0xffe00000)\n  {\n    temp_var = input_2 * 2 + 0x200000;\n    if (temp_var >= -1)\n    {\n      return 0;\n    }\n    temp_var2 = (-temp_var >> 0x15) - 0x3e1;\n    if (temp_var2 != 0 && temp_var2 < 0xfffffc20)\n    {\n      result = (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (temp_var2 & 0xff);\n      if ((input_2 & 0x80000000) != 0)\n      {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0)\n  {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0)\n  {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "convert_to_int_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_clocks_08001b48",
                "HVar1": "status",
                "uVar2": "hclk_freq",
                "RCC_PeriphCLKInitTypeDef": "periph_clk_init",
                "RCC_ClkInitTypeDef": "clk_init_struct",
                "RCC_OscInitTypeDef": "osc_init_struct",
                "OscillatorType": "OscillatorType",
                "HSIState": "HSIState",
                "HSICalibrationValue": "HSICalibrationValue",
                "PLLState": "PLLState",
                "PLLSource": "PLLSource",
                "PLLMUL": "PLLMUL",
                "ClockType": "ClockType",
                "SYSCLKSource": "SYSCLKSource",
                "AHBCLKDivider": "AHBCLKDivider",
                "APB1CLKDivider": "APB1CLKDivider",
                "APB2CLKDivider": "APB2CLKDivider",
                "PeriphClockSelection": "PeriphClockSelection",
                "AdcClockSelection": "AdcClockSelection",
                "HAL_RCC_OscConfig": "HAL_RCC_OscConfig",
                "_Error_Handler": "_Error_Handler",
                "HAL_RCC_ClockConfig": "HAL_RCC_ClockConfig",
                "HAL_RCCEx_PeriphCLKConfig": "HAL_RCCEx_PeriphCLKConfig",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_SYSTICK_CLKSourceConfig": "HAL_SYSTICK_CLKSourceConfig",
                "SysTick_IRQn": "SysTick_IRQn"
            },
            "code": "void initialize_clocks_08001b48(void)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t hclk_freq;\n  RCC_PeriphCLKInitTypeDef periph_clk_init;\n  RCC_ClkInitTypeDef clk_init_struct;\n  RCC_OscInitTypeDef osc_init_struct;\n  \n  osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  osc_init_struct.HSIState = RCC_HSI_ON;\n  osc_init_struct.HSICalibrationValue = 0x10;\n  osc_init_struct.PLL.PLLState = RCC_PLL_ON;\n  osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init_struct);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x88);\n  }\n  \n  clk_init_struct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init_struct.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init_struct.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x95);\n  }\n  \n  periph_clk_init.PeriphClockSelection = RCC_PERIPHCLK_ADC;\n  periph_clk_init.AdcClockSelection = RCC_ADCPCLK2_DIV6;\n  status = HAL_RCCEx_PeriphCLKConfig(&periph_clk_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x9c);\n  }\n  \n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)((uint64_t)SYSTICK_CLOCK_FREQ * hclk_freq / (1 << 26)));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n  return;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config",
                "HAL_RCC_OscConfig",
                "HAL_RCCEx_PeriphCLKConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_CLKSourceConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "update_channel_state_of_timer_08004092",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channel_state",
                "CCER": "cc_register_mask"
            },
            "code": "void update_channel_state_of_timer_08004092(TIM_TypeDef *timer, uint32_t channel, uint32_t channel_state) {\n\tuint32_t channel_bit = channel & 0xff;\n\tuint32_t cc_register_mask = ~(1 << channel_bit);\n\n\ttimer->CCER &= cc_register_mask;\n\ttimer->CCER |= channel_state << channel_bit;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "update_channel_state_of_timer_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "print_and_get_size_08005cd4",
                "this": "print_instance",
                "c": "string_to_print",
                "sVar1": "print_size",
                "sVar2": "total_size"
            },
            "code": "size_t __thiscall print_and_get_size_08005cd4(Print *print_instance, char *string_to_print){\n  size_t print_size = print(print_instance, string_to_print);\n  size_t total_size = print_and_get_size_08005cd4(print_instance);\n  return total_size + print_size;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_and_get_size_08005cd4"
        },
        "FUN_08000450": {
            "renaming": {
                "reverse_and_improve": "reverse_and_improve",
                "param_1": "input_value",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "highest_bit_of_input_value",
                "uVar2": "temp_var_1",
                "uVar3": "modified_input_value",
                "uVar4": "shifted_input_value_divided_by_16",
                "uVar5": "shifted_input_value",
                "uVar7": "temp_var_3",
                "in_r12": "in_r12",
                "bVar8": "is_temp_var_4_zero",
                "bVar9": "is_shifted_input_value_zero",
                "bVar10": "is_subtraction_overflow",
                "leading_zeroes_count": "leading_zeroes_count",
                "temp_var_1": "temp_var_1",
                "temp_var_2": "temp_var_2",
                "temp_var_3": "temp_var_3",
                "temp_var_4": "temp_var_4",
                "temp_var_5": "temp_var_5",
                "temp_var_6": "temp_var_6",
                "FUN_08000450": "reverse_and_improve_08000450"
            },
            "code": "ulonglong reverse_and_improve_08000450(uint input_value, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint shifted_input_value = input_value << 1;\n  bool is_shifted_input_value_zero = shifted_input_value == 0;\n  uint highest_bit_of_input_value = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  uint shifted_input_value_divided_by_16 = (uint)((int)shifted_input_value >> 3) >> 1;\n  uint modified_input_value = highest_bit_of_input_value | shifted_input_value_divided_by_16;\n  input_value = input_value << 0x1d;\n  if (!is_shifted_input_value_zero) {\n    uint input_value_masked = shifted_input_value & 0xff000000;\n    is_shifted_input_value_zero = input_value_masked == 0;\n  }\n  if (!is_shifted_input_value_zero) {\n    is_shifted_input_value_zero = (shifted_input_value & 0xff000000) == 0xff000000;\n  }\n  if (!is_shifted_input_value_zero) {\n    return CONCAT44(modified_input_value, input_value) ^ 0x3800000000000000;\n  }\n  if (shifted_input_value == 0 || (shifted_input_value & 0xff000000) == 0xff000000) {\n    return CONCAT44(modified_input_value, input_value);\n  }\n  uint temp_var_1 = input_value;\n  uint temp_var_2 = shifted_input_value_divided_by_16;\n  if (shifted_input_value_divided_by_16 == 0) {\n    temp_var_1 = 0;\n    temp_var_2 = input_value;\n  }\n  int leading_zeroes_count = count_leading_zeroes(temp_var_2);\n  if (shifted_input_value_divided_by_16 == 0) {\n    leading_zeroes_count = leading_zeroes_count + 0x20;\n  }\n  uint temp_var_3 = leading_zeroes_count - 0xb;\n  bool is_subtraction_overflow = SBORROW4(temp_var_3,0x20);\n  uint temp_var_4 = leading_zeroes_count - 0x2b;\n  bool is_temp_var_4_negative = (int)temp_var_4 < 0;\n  bool is_temp_var_4_zero = temp_var_4 == 0;\n  if ((int)temp_var_3 < 0x20) {\n    is_subtraction_overflow = SCARRY4(temp_var_4,0xc);\n    leading_zeroes_count = leading_zeroes_count + -0x1f;\n    is_temp_var_4_negative = leading_zeroes_count < 0;\n    is_temp_var_4_zero = leading_zeroes_count == 0;\n    temp_var_3 = temp_var_4;\n    if (!is_temp_var_4_zero && is_temp_var_4_negative == is_subtraction_overflow) {\n      temp_var_1 = shifted_input_value_divided_by_16 << (temp_var_4 & 0xff);\n      shifted_input_value_divided_by_16 = shifted_input_value_divided_by_16 >> (0xcU - leading_zeroes_count & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_temp_var_4_zero || is_temp_var_4_negative != is_subtraction_overflow) {\n    uint in_r12 = 0x20 - temp_var_3;\n  }\n  shifted_input_value_divided_by_16 = shifted_input_value_divided_by_16 << (temp_var_3 & 0xff);\n  if (is_temp_var_4_zero || is_temp_var_4_negative != is_subtraction_overflow) {\n    shifted_input_value_divided_by_16 = shifted_input_value_divided_by_16 | temp_var_1 >> (in_r12 & 0xff);\n  }\n  if (is_temp_var_4_zero || is_temp_var_4_negative != is_subtraction_overflow) {\n    temp_var_1 = temp_var_1 << (temp_var_3 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp_var_3 < 0x381) {\n    return CONCAT44(shifted_input_value_divided_by_16 + (0x380 - temp_var_3) * 0x100000 | highest_bit_of_input_value, temp_var_1);\n  }\n  uint temp_var_5 = ~(0x380 - temp_var_3);\n  if ((int)temp_var_5 < 0x1f) {\n    int temp_var_6 = temp_var_5 - 0x13;\n    if (temp_var_6 != 0 && temp_var_6 < 0 == SCARRY4(temp_var_5 - 0x1f,0xc)) {\n      return CONCAT44(modified_input_value, temp_var_1 >> (0x20 - (0xcU - temp_var_6) & 0xff) | shifted_input_value_divided_by_16 << (0xcU - temp_var_6 & 0xff)) & 0x80000000ffffffff;\n    }\n    temp_var_5 = temp_var_5 + 1;\n    return CONCAT44(highest_bit_of_input_value | shifted_input_value_divided_by_16 >> (temp_var_5 & 0xff), temp_var_1 >> (temp_var_5 & 0xff) | shifted_input_value_divided_by_16 << (0x20 - temp_var_5 & 0xff));\n  }\n  return CONCAT44(modified_input_value, shifted_input_value_divided_by_16 >> (temp_var_5 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000450",
            "calling": [],
            "imported": false,
            "current_name": "reverse_and_improve_08000450"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_hardware_serial_08005bb0",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level"
            },
            "code": "void initialize_hardware_serial_08005bb0(int should_initialize, int priority_level) {\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    HardwareSerial::HardwareSerial((HardwareSerial *)PTR_Serial2_08005bd0,DAT_08005bcc);\n  }\n  return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "imported": false,
            "current_name": "initialize_hardware_serial_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "set_pin_values_080014ba",
                "this": "self",
                "fourbitmode": "four_bit_mode",
                "rs": "rs_pin",
                "rw": "rw_pin",
                "enable": "enable_pin",
                "d0": "data_pin_0",
                "d1": "data_pin_1",
                "d2": "data_pin_2",
                "d3": "data_pin_3",
                "d4": "data_pin_4",
                "d5": "data_pin_5",
                "d6": "data_pin_6",
                "d7": "data_pin_7"
            },
            "code": "void __thiscall set_pin_values_080014ba(LiquidCrystal *self, uint8_t four_bit_mode, uint8_t rs_pin, uint8_t rw_pin, uint8_t enable_pin, uint8_t data_pin_0, uint8_t data_pin_1, uint8_t data_pin_2, uint8_t data_pin_3, uint8_t data_pin_4, uint8_t data_pin_5, uint8_t data_pin_6, uint8_t data_pin_7){\n  self->rs_pin = rs_pin;\n  self->rw_pin = rw_pin;\n  self->enable_pin = enable_pin;\n  self->data_pins[0] = data_pin_0;\n  self->data_pins[1] = data_pin_1;\n  self->data_pins[2] = data_pin_2;\n  self->data_pins[3] = data_pin_3;\n  self->data_pins[4] = data_pin_4;\n  self->data_pins[5] = data_pin_5;\n  self->data_pins[6] = data_pin_6;\n  self->data_pins[7] = data_pin_7;\n  if (four_bit_mode == 0) {\n    self->display_function = 0x10;\n  }\n  else {\n    self->display_function = 0;\n  }\n  begin(self, 0x10, 0x01, 0);\n  return;\n}",
            "called": [
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "LiquidCrystal"
            ],
            "imported": false,
            "current_name": "set_pin_values_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "configure_RCC_peripheral_clocks_08003c90",
                "*PeriphClkInit": "*peripheral_clk_init",
                "iVar1": "i",
                "*puVar2": "*ptr1",
                "uVar3": "tickstart",
                "uVar4": "tickend",
                "uVar5": "selection",
                "bVar6": "flag",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef_conflict configure_RCC_peripheral_clocks_08003c90(RCC_PeriphCLKInitTypeDef_conflict *peripheral_clk_init) {\n    int i;\n    uint32_t *ptr1;\n    uint32_t tickstart;\n    uint32_t tickend;\n    uint selection;\n    bool flag;\n    uint32_t tmpreg;\n    \n    if ((peripheral_clk_init->PeriphClockSelection & RCC_PERIPHCLK_RTC) != 0) {\n        flag = (*(uint *)(PTR_DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n        if (flag) {\n            *(uint *)(PTR_DAT_08003d98 + 0x1c) = *(uint *)(PTR_DAT_08003d98 + 0x1c) | 0x10000000;\n        }\n        if ((*PTR_DAT_08003d9c & 0x100) == 0) {\n            *PTR_DAT_08003d9c = *PTR_DAT_08003d9c | 0x100;\n            tickstart = HAL_GetTick();\n            while ((*PTR_DAT_08003d9c & 0x100) == 0) {\n                tickend = HAL_GetTick();\n                if (100 < tickend - tickstart) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        ptr1 = PTR_DAT_08003da0;\n        i = PTR_DAT_08003d98;\n        selection = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0x300;\n        if ((selection != 0) && (selection != (peripheral_clk_init->RTCClockSelection & 0x300))) {\n            selection = *(uint *)(PTR_DAT_08003d98 + 0x20);\n            *PTR_DAT_08003da0 = 1;\n            *ptr1 = 0;\n            *(uint *)(i + 0x20) = selection & 0xfffffcff;\n            if ((selection & 1) != 0) {\n                tickstart = HAL_GetTick();\n                while ((*(uint *)(PTR_DAT_08003d98 + 0x20) & 2) == 0) {\n                    tickend = HAL_GetTick();\n                    if (5000 < tickend - tickstart) {\n                        return HAL_TIMEOUT;\n                    }\n                }\n            }\n        }\n        i = PTR_DAT_08003d98;\n        *(uint *)(PTR_DAT_08003d98 + 0x20) = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0xfffffcff | peripheral_clk_init->RTCClockSelection;\n        if (flag) {\n            *(uint *)(i + 0x1c) = *(uint *)(i + 0x1c) & 0xefffffff;\n        }\n    }\n    if ((peripheral_clk_init->PeriphClockSelection & RCC_PERIPHCLK_ADC) != 0) {\n        *(uint *)(PTR_DAT_08003d98 + 4) = *(uint *)(PTR_DAT_08003d98 + 4) & 0xffff3fff | peripheral_clk_init->AdcClockSelection;\n    }\n    if ((peripheral_clk_init->PeriphClockSelection & RCC_PERIPHCLK_USB) != 0) {\n        *(uint *)(PTR_DAT_08003d98 + 4) = *(uint *)(PTR_DAT_08003d98 + 4) & 0xffbfffff | peripheral_clk_init->UsbClockSelection;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_RCC_peripheral_clocks_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "calculate_ticks_08002514",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_ptr",
                "DAT_08002538": "ticks_data",
                "DAT_0800253c": "ticks_info"
            },
            "code": "uint32_t calculate_ticks_08002514(uint32_t ticks_number) {\n                      undefined4 *ticks_ptr;\n                      ticks_ptr = DAT_08002538;\n                      if (ticks_number - 1 < 0x1000000) {\n                        DAT_08002538[1] = ticks_number - 1;\n                        *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n                        ticks_ptr[2] = 0;\n                        *ticks_ptr = 7;\n                        return 0;\n                      }\n                      return 1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "create_ip_address_08005c1c",
                "*this": "this",
                "first_octet": "first_octet",
                "second_octet": "second_octet",
                "third_octet": "third_octet",
                "fourth_octet": "fourth_octet",
                "(this->super_Printable)._vptr_Printable": "this->super_Printable.vptr_Printable",
                "(this->_address).bytes[0]": "this->_address.bytes[0]",
                "(this->_address).bytes[1]": "this->_address.bytes[1]",
                "(this->_address).bytes[2]": "this->_address.bytes[2]",
                "(this->_address).bytes[3]": "this->_address.bytes[3]"
            },
            "code": "\\\ntypedef struct {\n    _func_int_varargs** vptr_Printable;\n} Printable;\n\ntypedef struct {\n    uint8_t bytes[4];\n} Address;\n\ntypedef struct {\n    Printable super_Printable;\n    Address _address;\n} IP_Address;\n\nIP_Address* create_ip_address_08005c1c(IP_Address* this, uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet) {\n    this->super_Printable.vptr_Printable = (_func_int_varargs **)PTR_DAT_08005c34;\n    this->_address.bytes[0] = first_octet;\n    this->_address.bytes[1] = second_octet;\n    this->_address.bytes[2] = third_octet;\n    this->_address.bytes[3] = fourth_octet;\n    return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "create_ip_address_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info_offset",
                "param_3": "result",
                "param_4": "permissions_result",
                "iVar1": "file_stat_result",
                "uVar2": "result_value",
                "auStack_4c": "null_pointer",
                "local_48": "file_stat_mode"
            },
            "code": "int check_file_permissions_08006dc8(undefined4 file_descriptor, int file_info_offset, undefined4 *result, uint *permissions_result) {\n  int file_info = *(short *)(file_info_offset + 0xe);\n  int file_stat_result = _fstat_r(file_descriptor, file_info, NULL);\n  if (file_info < 0 || file_stat_result < 0) {\n    *permissions_result = 0;\n    if ((int)((uint)*(ushort *)(file_info_offset + 0xc) << 0x18) < 0) {\n      *result = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *permissions_result = (uint)((file_stat_result & 0xf000) == 0x2000);\n  }\n  *result = 0x400;\nLAB_08006e08:\n  return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_permissions_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "configure_timer_channel_0800412c",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "timer_instance",
                "HAL_StatusTypeDef_conflict": "HAL_OK",
                "TIM_CCxNChannelCmd": "TIM_CCxNChannelCmd",
                "Instance": "Instance",
                "CCER": "CCER",
                "BDTR": "BDTR",
                "CR1": "CR1"
            },
            "code": "HAL_StatusTypeDef_conflict configure_timer_channel_0800412c(TIM_HandleTypeDef *timer_handle, uint32_t channel) {\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  TIM_CCxNChannelCmd(timer_instance, channel, DISABLE);\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR &= 0xffff7fff;\n  }\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "configure_timer_channel_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "std::FUN_08007090": "std_abort_function",
                "FUN_08007090": "std_abort_function_08007090"
            },
            "code": "void std_abort_function_08007090(void)\n{\n    abort();\n}",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "std_abort_function_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "get_adc_channel_0800492c",
                "pin": "pin",
                "uVar1": "adc_function",
                "PTR_PinMap_ADC_08004944": "PTR_PinMap_ADC_08004944",
                "PinMap_conflict": "PinMap_conflict",
                "0xc": "12",
                "0x1b": "27",
                "0x10": "16"
            },
            "code": "uint32_t get_adc_channel_0800492c(PinName_conflict pin) {\n    uint32_t adc_function = pinmap_function(pin, (PinMap_conflict*)PTR_PinMap_ADC_08004944);\n    uint32_t channel_number = (adc_function << 12) >> 27;\n    if (channel_number > 15) {\n        channel_number = 0;\n    }\n    return channel_number;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_channel_0800492c"
        },
        "FUN_08000cbc": {
            "renaming": {
                "FUN_08000cbc": "initialize_static_data_08000cbc"
            },
            "code": "void initialize_static_data_08000cbc()\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08000cbc"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_pin_state_0800480a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "1": "pin_mask"
            },
            "code": "void set_pin_state_0800480a(PinName_conflict pin, uint32_t *pin_map) {\n  uint32_t pin_index = (uint32_t)pin >> 28;\n  uint32_t pin_mask = 1 << ((uint32_t)pin & 0xF);\n  pin_map[pin_index] |= pin_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_state_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "max31855_get_temperature_080015f8",
                "this": "self",
                "unit": "temperature_unit",
                "uVar1": "data",
                "uVar2": "raw_temp",
                "uVar4": "temp",
                "uVar5": "temp_calc",
                "dVar3": "temperature",
                "extraout_d0": "default_temperature",
                "DAT_080016a0": "0x80000000",
                "DAT_080016a4": "0.041276",
                "DAT_080016a8": "1.8",
                "DAT_080016ac": "5.0",
                "DAT_080016b0": "32.0"
            },
            "code": "double __thiscall max31855_get_temperature_080015f8(MAX31855 *this, unit_t unit) {\n  ulong data = read_data(this);\n  if ((data & 0x10000) != 0) {\n    uint error_code = data & 7;\n    if (error_code == 2 || error_code == 4) {\n      return 0.0;\n    }\n    else {\n      return extraout_d0;\n    }\n  }\n  else {\n    uint raw_temp = data >> 0x12;\n    double temp_c = (double)raw_temp * 0.25;\n    if (unit == FAHRENHEIT) {\n      double temp_f = temp_c * DAT_080016a8 + DAT_080016b0;\n      return temp_f;\n    }\n    else {\n      return temp_c;\n    }\n  }\n}",
            "called": [
                "readData",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "max31855_get_temperature_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "initialize_priority_08005c38",
                "__initialize_p": "is_initialize",
                "__priority": "priority"
            },
            "code": "void initialize_priority_08005c38(int is_initialize, int priority) {\n    if (is_initialize == 1 && priority == 0xffff) {\n        IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08005c60, '\\0', '\\0', '\\0', '\\0');\n        return;\n    }\n    return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_priority_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "get_pin_bit_position_08005f8c",
                "pin": "pin",
                "uVar1": "current_pin",
                "uVar2": "bit_position"
            },
            "code": "uint8_t get_pin_bit_position_08005f8c(uint16_t pin)\n{\n  uint16_t current_pin = pin;\n  uint8_t bit_position = 0;\n  while (current_pin != 1)\n  {\n    current_pin >>= 1;\n    bit_position++;\n  }\n  return bit_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "get_pin_bit_position_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "write_data_to_file_08006f5a",
                "param_1": "file_descriptor",
                "param_2": "data_offset",
                "param_3": "data",
                "param_4": "data_size",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "uint": "uint32_t",
                "ushort": "uint16_t"
            },
            "code": "void write_data_to_file_08006f5a(int file_descriptor, int data_offset, void* data, int data_size) {\n    \n    uint16_t* data_offset_ptr = (uint16_t*)(data_offset + 0xc);\n    uint32_t file_offset = (uint32_t)(*data_offset_ptr) << 0x17;\n    \n    if ((int)file_offset < 0) {\n        _lseek_r(file_descriptor, (int)*(short*)(data_offset + 0xe), 0, 2);\n    }\n    \n    *data_offset_ptr = *data_offset_ptr & 0xefff;\n    \n    _write_r(file_descriptor, (int)*(short*)(data_offset + 0xe), data, data_size);\n    \n    return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "initialize_components_08000b08",
                "__initialize_p": "is_initialized",
                "__priority": "priority",
                "PID::PID": "PID oven_pid",
                "PTR_reflowOvenPID_08000b9c": "oven_pid_ptr",
                "PTR_input_08000b98": "input_ptr",
                "PTR_output_08000b94": "output_ptr",
                "PTR_setpoint_08000b90": "setpoint_ptr",
                "PTR_kp_08000b8c": "kp_ptr",
                "PTR_ki_08000b88": "ki_ptr",
                "PTR_kd_08000b84": "kd_ptr",
                "LiquidCrystal::LiquidCrystal": "LiquidCrystal lcd",
                "PTR_lcd_08000bb8": "lcd_ptr",
                "PTR_lcdRsPin_08000ba0": "lcd_rs_pin_ptr",
                "PTR_lcdEPin_08000ba4": "lcd_e_pin_ptr",
                "PTR_lcdD4Pin_08000ba8": "lcd_d4_pin_ptr",
                "PTR_lcdD5Pin_08000bac": "lcd_d5_pin_ptr",
                "PTR_lcdD6Pin_08000bb0": "lcd_d6_pin_ptr",
                "PTR_lcdD7Pin_08000bb4": "lcd_d7_pin_ptr",
                "MAX31855::MAX31855": "MAX31855 thermocouple",
                "PTR_thermocouple_08000bc8": "thermocouple_ptr",
                "PTR_thermocoupleSOPin_08000bc4": "thermocouple_so_pin_ptr",
                "PTR_thermocoupleCSPin_08000bc0": "thermocouple_cs_pin_ptr",
                "PTR_thermocoupleCLKPin_08000bbc": "thermocouple_clk_pin_ptr"
            },
            "code": "void initialize_components_08000b08(int is_initialized, int priority) {\n  if ((is_initialized == 1) && (priority == 0xffff)) {\n    PID oven_pid((PID *)PTR_reflowOvenPID_08000b9c, (double *)PTR_input_08000b98, (double *)PTR_output_08000b94, (double *)PTR_setpoint_08000b90, *(double *)PTR_kp_08000b8c, *(double *)PTR_ki_08000b88, *(double *)PTR_kd_08000b84, 0);\n    LiquidCrystal lcd((LiquidCrystal *)PTR_lcd_08000bb8, *PTR_lcdRsPin_08000ba0, *PTR_lcdEPin_08000ba4, *PTR_lcdD4Pin_08000ba8, *PTR_lcdD5Pin_08000bac, *PTR_lcdD6Pin_08000bb0, *PTR_lcdD7Pin_08000bb4);\n    MAX31855 thermocouple((MAX31855 *)PTR_thermocouple_08000bc8, *PTR_thermocoupleSOPin_08000bc4, *PTR_thermocoupleCSPin_08000bc0, *PTR_thermocoupleCLKPin_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "MAX31855",
                "LiquidCrystal",
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [
                "_GLOBAL__sub_I_lcdMessagesReflowStatus"
            ],
            "imported": false,
            "current_name": "initialize_components_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_params_08006cb4",
                "param_1": "param",
                "uVar1": "sfp1",
                "iVar2": "global_impure_ptr",
                "bVar3": "is_equal",
                "PTR__global_impure_ptr_08006d0c": "PTR__global_impure_ptr_08006d0c",
                "DAT_08006d10": "DAT_08006d10"
            },
            "code": "void initialize_params_08006cb4(int param_1)\n{\n    undefined4 sfp1;\n    undefined4 sfp2;\n    undefined4 sfp3;\n    int global_impure_ptr = *(int *)PTR__global_impure_ptr_08006d0c;\n    if (*(int *)(param_1 + 0x18) == 0)\n    {\n        *(undefined4 *)(param_1 + 0x48) = 0;\n        *(undefined4 *)(param_1 + 0x4c) = 0;\n        *(undefined4 *)(param_1 + 0x50) = 0;\n        *(undefined4 *)(param_1 + 0x28) = DAT_08006d10;\n        if (param_1 == global_impure_ptr)\n        {\n            *(int *)(param_1 + 0x18) = 1;\n        }\n        sfp1 = __sfp();\n        sfp2 = __sfp(param_1);\n        sfp3 = __sfp(param_1);\n        std_isra_0(sfp1, 4, 0);\n        std_isra_0(sfp2, 9, 1);\n        std_isra_0(sfp3, 0x12, 2);\n        *(int *)(param_1 + 0x18) = 1;\n    }\n}\n",
            "called": [
                "__sfp",
                "std.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "__sfp",
                "__swbuf_r",
                "_fflush_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_params_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_peripheral_from_pin_08004c5e",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "void* find_peripheral_from_pin_08004c5e(PinName_conflict target_pin, PinMap_conflict* pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return (void*) 0x0;\n    }\n    if (pin_map->pin == target_pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_from_pin_08004c5e"
        },
        "FUN_08007098": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08007098": "set_id_flags",
                "PTR_id_0800712c": "id_flags[0]",
                "PTR_id_08007130": "id_flags[1]",
                "PTR_id_08007134": "id_flags[2]",
                "PTR_id_08007138": "id_flags[3]",
                "PTR_id_0800713c": "id_flags[4]",
                "PTR_id_08007140": "id_flags[5]",
                "PTR_id_08007144": "id_flags[6]",
                "PTR_id_08007148": "id_flags[7]",
                "PTR_id_0800714c": "id_flags[8]",
                "PTR_id_08007150": "id_flags[9]",
                "PTR_id_08007154": "id_flags[10]",
                "PTR_id_08007158": "id_flags[11]",
                "FUN_08007098": "set_id_flags_08007098"
            },
            "code": "void set_id_flags_08007098(void) {\n    if (PTR_id_0800712c < 0) {\n        PTR_id_0800712c = 1;\n    }\n    if (PTR_id_08007130 < 0) {\n        PTR_id_08007130 = 1;\n    }\n    if (PTR_id_08007134 < 0) {\n        PTR_id_08007134 = 1;\n    }\n    if (PTR_id_08007138 < 0) {\n        PTR_id_08007138 = 1;\n    }\n    if (PTR_id_0800713c < 0) {\n        PTR_id_0800713c = 1;\n    }\n    if (PTR_id_08007140 < 0) {\n        PTR_id_08007140 = 1;\n    }\n    if (PTR_id_08007144 < 0) {\n        PTR_id_08007144 = 1;\n    }\n    if (PTR_id_08007148 < 0) {\n        PTR_id_08007148 = 1;\n    }\n    if (PTR_id_0800714c < 0) {\n        PTR_id_0800714c = 1;\n    }\n    if (PTR_id_08007150 < 0) {\n        PTR_id_08007150 = 1;\n    }\n    if (PTR_id_08007154 < 0) {\n        PTR_id_08007154 = 1;\n    }\n    if (PTR_id_08007158 < 0) {\n        PTR_id_08007158 = 1;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007098",
            "calling": [],
            "imported": false,
            "current_name": "set_id_flags_08007098"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "stop_pwm_signal_08004b3c",
                "pin": "pin_name",
                "Channel": "channel_number",
                "uVar1": "function_number",
                "timHandle": "tim_handle"
            },
            "code": "void stop_pwm_signal_08004b3c(PinName_conflict pin)\n{\n  uint32_t channel_number;\n  uint32_t function_number;\n  TIM_HandleTypeDef tim_handle;\n  tim_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n  if ((tim_handle.Instance != (TIM_TypeDef *)0x0) && ((((channel_number = get_pwm_channel(pin), channel_number == 0 || (channel_number == 4)) || (channel_number == 8)) || ((channel_number == 0xc || (channel_number == 0x18)))))) {\n    function_number = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n    if ((function_number & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&tim_handle, channel_number);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&tim_handle, channel_number);\n    }\n    HAL_TIM_PWM_DeInit(&tim_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "print_charmap_08001550",
                "this": "self",
                "location": "charmap_location",
                "charmap": "charmap_array",
                "iVar1": "index",
                "send": "send_data"
            },
            "code": "void __thiscall print_charmap_08001550(LiquidCrystal *this, uint8_t location, uint8_t *charmap) {\\n  int index;\\n  uint8_t address = ((location & 7) << 3) | 0x40;\\n  send(this, address, \"\\0\");\\n  for (index = 0; index < 8; index++) {\\n    (**(this->super_Print)._vptr_Print)(this, (uint)charmap[index]);\\n  }\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "print_charmap_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint32_t uVar4;\n  undefined *puVar5;\n  int iVar6;\n  undefined4 extraout_r1;\n  uint uVar7;\n  int digits;\n  int digits_00;\n  int digits_01;\n  undefined8 uVar8;\n  undefined4 in_stack_ffffffe4;\n  \n  uVar4 = millis();\n  if (*(uint *)PTR_nextRead_08000f50 < uVar4) {\n    *(uint *)PTR_nextRead_08000f50 = *(uint *)PTR_nextRead_08000f50 + 1000;\n    puVar5 = PTR_thermocouple_08000f74;\n    MAX31855::readThermocouple((MAX31855 *)PTR_thermocouple_08000f74,CELSIUS);\n    puVar2 = PTR_input_08000f6c;\n    *(undefined **)PTR_input_08000f6c = puVar5;\n    *(undefined4 *)(puVar2 + 4) = extraout_r1;\n    iVar6 = __aeabi_dcmpeq();\n    if (((iVar6 != 0) ||\n        (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f20,DAT_08000f24), iVar6 != 0)) ||\n       (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f28,DAT_08000f2c), iVar6 != 0)) {\n      *PTR_reflowState_08000f64 = 7;\n      *PTR_reflowStatus_08000f58 = 0;\n    }\n  }\n  uVar4 = millis();\n  if (*(uint *)PTR_nextCheck_08000f54 < uVar4) {\n    *(uint *)PTR_nextCheck_08000f54 = *(uint *)PTR_nextCheck_08000f54 + 1000;\n    if (*PTR_reflowStatus_08000f58 == '\\x01') {\n      uVar4 = *(uint32_t *)PTR_ledRedPin_08000f5c;\n      iVar6 = digitalRead(uVar4);\n      uVar7 = count_leading_zeroes(iVar6);\n      digitalWrite(uVar4,uVar7 >> 5);\n      iVar6 = *(int *)PTR_timerSeconds_08000f78;\n      *(int *)PTR_timerSeconds_08000f78 = iVar6 + 1;\n      puVar2 = PTR_Serial2_08000f7c;\n      Print::print((Print *)PTR_Serial2_08000f7c,iVar6 + 1,10);\n      puVar5 = PTR_DAT_08000f80;\n      Print::print((Print *)puVar2,PTR_DAT_08000f80);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits);\n      Print::print((Print *)puVar2,puVar5);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_00);\n      Print::print((Print *)puVar2,puVar5);\n      Print::println((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_01);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ledRedPin_08000f5c,1);\n    }\n    puVar2 = PTR_lcd_08000f60;\n    LiquidCrystal::clear((LiquidCrystal *)PTR_lcd_08000f60);\n    puVar3 = PTR_reflowState_08000f64;\n    Print::print((Print *)puVar2,\n                 *(char **)(PTR_lcdMessagesReflowStatus_08000f68 +\n                           (uint)(byte)*PTR_reflowState_08000f64 * 4));\n    LiquidCrystal::setCursor((LiquidCrystal *)puVar2,'\\0','\\x01');\n    puVar5 = PTR_lcd_08000f60;\n    if (*puVar3 == '\\a') {\n      Print::print((Print *)puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      Print::print((Print *)PTR_lcd_08000f60,(double)CONCAT44(in_stack_ffffffe4,2),2);\n      LiquidCrystal::write((LiquidCrystal *)puVar5,'\\0');\n      Print::print((Print *)puVar5,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_reflowState_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_reflowState_08000f64]))();\n    return;\n  }\n  if ((*PTR_switchStatus_08001274 == '\\x01') && (*PTR_reflowStatus_0800126c == '\\x01')) {\n    *PTR_reflowStatus_0800126c = 0;\n    *PTR_reflowState_08001258 = 0;\n  }\n  cVar1 = *PTR_debounceState_08001278;\n  if (cVar1 == '\\x01') {\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      if (0x32 < uVar4 - *(int *)PTR_lastDebounceTime_08001284) {\n        *PTR_debounceState_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_debounceState_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_switchStatus_08001274 = 0;\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      *(uint32_t *)PTR_lastDebounceTime_08001284 = uVar4;\n      *PTR_debounceState_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') &&\n          (uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280), uVar4 != 0)) {\n    *PTR_switchStatus_08001274 = 1;\n    *PTR_debounceState_08001278 = 0;\n  }\n  if (*PTR_reflowStatus_0800126c == '\\x01') {\n    uVar4 = millis();\n    PID::Compute((PID *)PTR_reflowOvenPID_08001250);\n    if (*(uint *)PTR_windowSize_0800128c < uVar4 - *(int *)PTR_windowStartTime_08001288) {\n      *(uint *)PTR_windowStartTime_08001288 =\n           *(int *)PTR_windowStartTime_08001288 + *(uint *)PTR_windowSize_0800128c;\n    }\n    uVar8 = __floatunsidf(uVar4 - *(int *)PTR_windowStartTime_08001288);\n    iVar6 = __aeabi_dcmplt((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),\n                           *(undefined4 *)PTR_output_08001290,\n                           *(undefined4 *)(PTR_output_08001290 + 4));\n    if (iVar6 == 0) {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,1);\n    }\n  }\n  else {\n    digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "print",
                "__aeabi_dadd",
                "millis",
                "print",
                "SetMode",
                "__aeabi_dcmpeq",
                "__aeabi_dcmpge",
                "__aeabi_dcmplt",
                "setCursor",
                "analogRead",
                "digitalRead",
                "println",
                "SetTunings",
                "__aeabi_dcmpgt",
                "__aeabi_dcmple",
                "println",
                "write",
                "SetSampleTime",
                "__floatsidf",
                "digitalWrite",
                "SetOutputLimits",
                "Compute",
                "clear",
                "print",
                "readThermocouple",
                "__floatunsidf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "write_08001310",
                "this": "self",
                "value": "data",
                "mode": "rs_mode",
                "_rs_pin": "rs_pin",
                "_rw_pin": "rw_pin",
                "_displayfunction": "display_function",
                "write4bits": "write_4_bits",
                "write8bits": "write_8_bits"
            },
            "code": "void __thiscall write_08001310(uint8_t value, uint8_t mode) {\n  uint8_t rs_pin = this->_rs_pin;\n  uint8_t rw_pin = this->_rw_pin;\n  digitalWrite((uint)rs_pin, (uint)mode);\n  if (rw_pin != 0xff) {\n    digitalWrite((uint)rw_pin, 0);\n  }\n  if ((this->_displayfunction & 0x10) == 0) {\n    write_080013104bits(value >> 4);\n    write_080013104bits(value);\n  } else {\n    write_080013108bits(value);\n  }\n}",
            "called": [
                "write4bits",
                "digitalWrite",
                "write8bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "clear",
                "createChar",
                "write",
                "display",
                "begin",
                "setCursor"
            ],
            "imported": false,
            "current_name": "write_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "compare_doubles_080009a8",
                "param_1": "first_double",
                "param_2": "second_double",
                "param_3": "unused",
                "param_4": "unused"
            },
            "code": "void compare_doubles_080009a8(float first_double, float second_double) {\n  __aeabi_cdcmpeq(first_double, second_double);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "imported": false,
            "current_name": "compare_doubles_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_timer_value_08004d90",
                "htim": "timer_handle",
                "DAT_08004df0": "timer_register",
                "Instance": "timer_instance",
                "PTR_DAT_08004de4": "timer_instance_1",
                "PTR_DAT_08004de8": "timer_instance_2",
                "PTR_DAT_08004dec": "timer_instance_3"
            },
            "code": "void set_timer_value_08004d90(TIM_HandleTypeDef *timer_handle)\n{\n    uint32_t* DAT_08004df0 = (uint32_t*)0x08004df0;\n    if (timer_handle->Instance == PTR_DAT_08004de4) {\n        *DAT_08004df0 &= ~(1 << 11);\n    }\n    if (timer_handle->Instance == (TIM_TypeDef *)0x40000000) {\n        *DAT_08004df0 &= ~(1 << 0);\n    }\n    if (timer_handle->Instance == PTR_DAT_08004de8) {\n        *DAT_08004df0 &= ~(1 << 1);\n    }\n    if (timer_handle->Instance == PTR_DAT_08004dec) {\n        *DAT_08004df0 &= ~(1 << 2);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "set_timer_value_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "__thiscall Print::FUN_08005ce8": "print_number_base_10_to_36",
                "this": "print_object",
                "n": "number",
                "base": "base",
                "cVar1": "current_digit",
                "sVar2": "string_length",
                "sVar3": "bytes_written",
                "uVar4": "current_remainder",
                "uVar5": "base_value",
                "uVar6": "current_quotient",
                "__s": "current_char",
                "buf": "string_buffer",
                "FUN_08005ce8": "print_number_base_10_to_36_08005ce8"
            },
            "code": "size_t __thiscall print_number_base_10_to_36_08005ce8(Print *print_object, ulong number, uint8_t base) {\n    char current_digit;\n    size_t string_length;\n    size_t bytes_written;\n    uint current_quotient;\n    uint current_remainder;\n    char string_buffer[33];\n    uint base_value = (uint)base;\n    string_buffer[32] = '\\0';\n    if (base_value < 2) {\n        base_value = 10;\n    }\n    char *current_char = string_buffer + 0x20;\n    do {\n        current_quotient = number / base_value;\n        current_remainder = (number & 0xff) - (current_quotient * base_value & 0xff) & 0xff;\n        current_char = current_char - 1;\n        if (current_remainder < 10) {\n            current_digit = current_remainder + '0';\n        }\n        else {\n            current_digit = current_remainder + '7';\n        }\n        *current_char = current_digit;\n        number = current_quotient;\n    } while (current_quotient != 0);\n    if (current_char == (char *)0x0) {\n        string_length = 0;\n    }\n    else {\n        string_length = strlen(current_char);\n        bytes_written = (*print_object->_vptr_Print[1])(string_length, current_char, string_length);\n    }\n    return bytes_written;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "print",
                "print"
            ],
            "imported": false,
            "current_name": "print_number_base_10_to_36_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "i2c_handle_0800316c",
                "*hi2c": "*handle",
                "HVar1": "status",
                "*puVar2": "*buffer_ptr",
                "*pIVar3": "*instance_ptr"
            },
            "code": "void i2c_handle_0800316c(I2C_HandleTypeDef *handle)\n{\n    HAL_StatusTypeDef status;\n    uint8_t *buffer_ptr;\n    I2C_TypeDef *instance_ptr;\n\n    if ((uint8_t)handle->State - 0x29 < 2) {\n        handle->PreviousState = 0;\n        handle->State = HAL_I2C_STATE_LISTEN;\n    }\n    else {\n        if ((handle->State != HAL_I2C_STATE_ABORT) && ((handle->Instance->CR2 & 0x800) == 0)) {\n            handle->State = HAL_I2C_STATE_READY;\n        }\n        handle->PreviousState = 0;\n        handle->Mode = HAL_I2C_MODE_NONE;\n    }\n    handle->Instance->CR1 = handle->Instance->CR1 & 0xfffff7ff;\n    instance_ptr = handle->Instance;\n    if ((instance_ptr->CR2 & 0x800) == 0) {\n        if (handle->State == HAL_I2C_STATE_ABORT) {\n            handle->State = HAL_I2C_STATE_READY;\n            handle->ErrorCode = 0;\n            if ((instance_ptr->SR1 & 0x40) != 0) {\n                buffer_ptr = handle->pBuffPtr;\n                handle->pBuffPtr = buffer_ptr + 1;\n                *buffer_ptr = (uint8_t)instance_ptr->DR;\n            }\n            handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n            HAL_I2C_AbortCpltCallback(handle);\n        }\n        else {\n            if ((instance_ptr->SR1 & 0x40) != 0) {\n                buffer_ptr = handle->pBuffPtr;\n                handle->pBuffPtr = buffer_ptr + 1;\n                *buffer_ptr = (uint8_t)instance_ptr->DR;\n            }\n            HAL_I2C_ErrorCallback(handle);\n        }\n    }\n    else {\n        instance_ptr->CR2 = instance_ptr->CR2 & 0xfffff7ff;\n        if (handle->hdmatx->State == HAL_DMA_STATE_READY) {\n            handle->hdmarx->XferAbortCallback = handle->hdmatx->XferAbortCallback;\n            status = HAL_DMA_Abort_IT(handle->hdmarx);\n            if (status != HAL_OK) {\n                if ((handle->Instance->SR1 & 0x40) != 0) {\n                    buffer_ptr = handle->pBuffPtr;\n                    handle->pBuffPtr = buffer_ptr + 1;\n                    *buffer_ptr = (uint8_t)handle->Instance->DR;\n                }\n                handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n                handle->State = HAL_I2C_STATE_READY;\n                (*handle->hdmarx->XferAbortCallback)(handle->hdmarx);\n            }\n        }\n        else {\n            handle->hdmatx->XferAbortCallback = handle->hdmatx->XferAbortCallback;\n            status = HAL_DMA_Abort_IT(handle->hdmatx);\n            if (status != HAL_OK) {\n                handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n                handle->State = HAL_I2C_STATE_READY;\n                (*handle->hdmatx->XferAbortCallback)(handle->hdmatx);\n            }\n        }\n    }\n    if ((handle->State == HAL_I2C_STATE_LISTEN) && ((handle->ErrorCode & 4) != 0)) {\n        handle->XferOptions = handle->XferOptions;\n        handle->PreviousState = 0;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_ListenCpltCallback(handle);\n    }\n    return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "i2c_handle_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "update_pin_map_08004828",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "bit_mask": "bit_mask"
            },
            "code": "void update_pin_map_08004828(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = (uint32_t)pin >> 4;\n    uint32_t bit_mask = ~(1 << ((uint32_t)pin & 0xF));\n    pin_map[pin_index] &= bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "update_pin_map_08004828"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "calculate_pwm_period_08004948",
                "pin": "pin_name",
                "uVar1": "pwm_function",
                "uVar2": "pwm_period"
            },
            "code": "uint32_t calculate_pwm_period_08004948(PinName_conflict pin)\n{\n  uint32_t pwm_function = pinmap_function(pin, (PinMap_conflict*)PTR_PinMap_PWM_08004970);\n  uint32_t pwm_period = (pwm_function << 12) >> 27;\n  if (pwm_period == 3) {\n    return 8;\n  }\n  if (pwm_period == 4) {\n    return 12;\n  }\n  if (pwm_period == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "calculate_pwm_period_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_receive_pin_08005b24",
                "_rx": "receive_pin_index",
                "PVar1": "receive_pin",
                "PTR_digitalPin_08005b38": "digitalPin"
            },
            "code": "void __thiscall set_receive_pin_08005b24(HardwareSerial *serial_object, uint32_t receive_pin_index) {\n    PinName receive_pin;\n    if (receive_pin_index < 0x3c) {\n        receive_pin = PTR_digitalPin_08005b38[receive_pin_index];\n    }\n    else {\n        receive_pin = NC;\n    }\n    (serial_object->_serial).pin_rx = receive_pin;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_receive_pin_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_adc_flags_080049f0",
                "*hadc": "*adc_handle",
                "iVar1": "ptr_1",
                "DAT_08004a48": "ptr_1",
                "DAT_08004a40": "adc_instance_1",
                "DAT_08004a44": "adc_instance_2"
            },
            "code": "void update_adc_flags_080049f0(ADC_HandleTypeDef *adc_handle)\n{\n  int DAT_08004a48 = DAT_08004a48;\n  if (adc_handle->Instance != DAT_08004a40) {\n    if (adc_handle->Instance == DAT_08004a44) {\n      *(uint *)(DAT_08004a48 + 0xc) |= 0x400;\n      *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffbff;\n      *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffbff;\n      *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08004a48 + 0xc) |= 0x200;\n  *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffdff;\n  *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "imported": false,
            "current_name": "update_adc_flags_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_adc_data_08001e40",
                "hadc": "adc_handle",
                "Instance": "adc_instance",
                "DR": "adc_data"
            },
            "code": "uint32_t get_adc_data_08001e40(ADC_HandleTypeDef *adc_handle)\n{\n  return adc_handle->Instance->DR;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_data_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_result_08003a68",
                "uVar1": "result",
                "uVar2": "value4",
                "local_1c": "value6",
                "abStack_18": "array",
                "uStack_14": "value1",
                "uStack_10": "value2",
                "uStack_c": "value3",
                "DAT_08003ac8": "data1",
                "DAT_08003ad0": "data2"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint result = 0;\n  uint value1 = *(uint *)(PTR__etext_08003ac4);\n  uint value2 = *(uint *)(PTR__etext_08003ac4 + 4);\n  uint value3 = *(uint *)(PTR__etext_08003ac4 + 8);\n  uint value4 = *(uint *)(DAT_08003ac8 + 4);\n  uint value5 = DAT_08003ad0;\n  uint value6 = *(uint *)(PTR__etext_08003ac4 + 0x10);\n  byte array[4];\n  array[0] = *(byte *)((int)&value6 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n  array[1] = *(byte *)((int)&value6 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f) + 1);\n  array[2] = *(byte *)((int)&value6 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f) + 2);\n  array[3] = *(byte *)((int)&value6 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f) + 3);\n  if ((value4 & 0xc) == 8) {\n    if ((value4 & 0x10000) == 0) {\n      result = value5 * (uint)array[(value4 << 10) >> 0x1c];\n    }\n    else {\n      result = (value5 * array[(value4 << 10) >> 0x1c]) / (uint)array[(value4 << 10) >> 0x1c];\n    }\n  }\n  return result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "enable_080012a2",
                "_enable_pin": "enable_pin"
            },
            "code": "void __thiscall enable_080012a2(LiquidCrystal *this) {\n  digitalWrite((uint)this->enable_080012a2_pin, LOW);\n  digitalWrite((uint)this->enable_080012a2_pin, HIGH);\n  digitalWrite((uint)this->enable_080012a2_pin, LOW);\n  return;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "write4bits",
                "write8bits"
            ],
            "imported": false,
            "current_name": "enable_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_peripheral_08004c78",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral",
                "(void *)0x0": "NULL"
            },
            "code": "void* find_peripheral_08004c78(PinName_conflict pin, PinMap_conflict* map)\n{\n  void* peripheral;\n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral_08004c78(pin, map);\n    return peripheral;\n  }\n  return NULL;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "pwm_stop",
                "adc_read_value",
                "uart_debug_write",
                "uart_debug_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_peripheral_08004c78"
        },
        "FUN_08005bd4": {
            "renaming": {
                "FUN_08005bd4": "initialize_static_variables_08005bd4"
            },
            "code": "void initialize_static_variables_08005bd4(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bd4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08005bd4"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "configure_adc_08001e48",
                "*hadc": "hadc",
                "*sConfig": "config",
                "HVar1": "status",
                "uVar2": "rank",
                "pAVar3": "adc_instance",
                "wait_loop_index": "wait_loop_index",
                "PTR_SystemCoreClock_08001f78": "PTR_SystemCoreClock_08001f78",
                "DAT_08001f74": "DAT_08001f74",
                "DAT_08001f7c": "DAT_08001f7c"
            },
            "code": "HAL_StatusTypeDef_conflict configure_adc_08001e48(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *config)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t rank = config->Rank;\n    uint32_t channel = config->Channel;\n    uint32_t sampling_time = config->SamplingTime;\n    ADC_TypeDef *adc_instance = hadc->Instance;\n    uint32_t wait_loop_index;\n\n    if (hadc->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n    }\n    else {\n        hadc->Lock = HAL_LOCKED;\n        if (rank < 7) {\n            rank = rank * 5 - 5;\n            adc_instance->SQR3 = channel << (rank & 0xff) | adc_instance->SQR3 & ~(0x1f << (rank & 0xff));\n        }\n        else if (rank < 0xd) {\n            rank = rank * 5 - 0x23;\n            adc_instance->SQR2 = channel << (rank & 0xff) | adc_instance->SQR2 & ~(0x1f << (rank & 0xff));\n        }\n        else {\n            rank = rank * 5 - 0x41;\n            adc_instance->SQR1 = channel << (rank & 0xff) | adc_instance->SQR1 & ~(0x1f << (rank & 0xff));\n        }\n        if (channel < 10) {\n            adc_instance->SMPR2 = sampling_time << (channel * 3 & 0xff) | adc_instance->SMPR2 & ~(7 << (channel * 3 & 0xff));\n        }\n        else {\n            channel = channel * 3 - 0x1e;\n            adc_instance->SMPR1 = sampling_time << (channel & 0xff) | adc_instance->SMPR1 & ~(7 << (channel & 0xff));\n        }\n        if (channel - 0x10 < 2) {\n            if (adc_instance == hadc->Instance) {\n                if ((adc_instance->CR2 & 0x800000) == 0) {\n                    adc_instance->CR2 = adc_instance->CR2 | 0x800000;\n                    if (channel == 0x10) {\n                        for (wait_loop_index = (uint32_t)((uint64_t)PTR_SystemCoreClock_08001f78 * (uint64_t)DAT_08001f7c >> 0x32) * 10; wait_loop_index != 0; wait_loop_index--);\n                        status = HAL_OK;\n                    }\n                    else {\n                        status = HAL_OK;\n                    }\n                }\n                else {\n                    status = HAL_OK;\n                }\n            }\n            else {\n                hadc->State = hadc->State | 0x20;\n                status = HAL_ERROR;\n            }\n        }\n        else {\n            status = HAL_OK;\n        }\n        hadc->Lock = HAL_UNLOCKED;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_adc_08001e48"
        },
        "FUN_080059c8": {
            "renaming": {
                "FUN_080059c8": "write_byte_080059c8",
                "this": "serial",
                "c": "byte_to_write",
                "_written": "is_written",
                "_serial": "serial->_serial",
                "tx_head": "tx_head",
                "uVar2": "is_tx_active",
                "bVar1": "head_byte",
                "bVar3": "masked_head_byte",
                "iVar4": "incremented_head"
            },
            "code": "size_t __thiscall write_byte_080059c8(HardwareSerial *serial, uint8_t byte_to_write) {\\n    bool is_written = true;\\n    uint tx_head = (uint)(serial->_serial).tx_head;\\n    int incremented_head = tx_head + 1;\\n    byte head_byte = (byte)incremented_head;\\n    byte masked_head_byte = head_byte & 0x7f;\\n    if (incremented_head == 0) {\\n        masked_head_byte = -(-head_byte & 0x7f);\\n    }\\n    do {\\n    } while ((serial->_serial).tx_tail == (ushort)masked_head_byte);\\n    (serial->_serial).tx_buff[tx_head] = byte_to_write;\\n    (serial->_serial).tx_head = (ushort)masked_head_byte;\\n    uint8_t is_tx_active = serial_tx_active((serial_t *)&serial->_serial);\\n    if (is_tx_active == \"\\0\") {\\n        uart_attach_tx_callback((serial_t *)&serial->_serial, tx_callback);\\n    }\\n    return 1;\\n}",
            "called": [
                "uart_attach_tx_callback",
                "serial_tx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059c8",
            "calling": [],
            "imported": false,
            "current_name": "write_byte_080059c8"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "calculate_result_080009b8",
                "param_1": "input_val"
            },
            "code": "undefined4 calculate_result_080009b8(undefined4 input_val)\n{\n  __eqdf2();\n  return input_val;\n}",
            "called": [
                "__eqdf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "imported": false,
            "current_name": "calculate_result_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "convert_float_to_int_08000aa8",
                "param_1": "float_value",
                "param_2": "int_value",
                "iVar1": "double_float_value",
                "uVar2": "exponent"
            },
            "code": "uint convert_float_to_int_08000aa8(uint float_value, uint int_value)\n{\n    int double_float_value = float_value * 2 + 0x200000;\n    if ((float_value * 2 < 0xffe00000) && (double_float_value >= -1)) {\n        uint exponent = -(double_float_value >> 0x15) - 0x3e1;\n        if ((int)exponent >= -1) {\n            return (float_value << 0xb | 0x80000000 | int_value >> 0x15) >> (exponent & 0xff);\n        }\n    }\n    else if ((int_value | float_value << 0xc) == 0) {\n        return 0xffffffff;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "convert_float_to_int_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_not_less_than_or_equal_to_zero_08000a04",
                "in_ZR": "in_zero_flag",
                "in_CY": "in_carry_flag"
            },
            "code": "bool is_not_less_than_or_equal_to_zero_08000a04(void)\n{\n  undefined in_zero_flag;\n  undefined in_carry_flag;\n  __aeabi_cdrcmple();\n  return !(bool)in_carry_flag || (bool)in_zero_flag;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_less_than_or_equal_to_zero_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_if_initialized_0800010c",
                "param_1": "input_str",
                "*PTR_completed_8667_08000124": "is_initialized",
                "DAT_08000128": "is_not_null",
                "PTR__init_0800012c": "default_init_str"
            },
            "code": "char* check_if_initialized_0800010c(char* input_str) {\\n    if (*PTR_completed_8667_08000124 == \"\\0\") {\\n        if (DAT_08000128 != 0) {\\n            input_str = PTR__init_0800012c;\\n        }\\n        *PTR_completed_8667_08000124 = 1;\\n    }\\n    return input_str;\\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "calculate_tick_count_08001cac",
                "PTR_uwTick_08001cbc": "tick_count",
                "PTR_uwTickFreq_08001cc0": "tick_frequency",
                "uint": "uint32_t",
                "byte": "uint8_t"
            },
            "code": "void calculate_tick_count_08001cac(void)\n{\n  uint8_t freq = *PTR_uwTickFreq_08001cc0 + *(int *)PTR_uwTick_08001cbc;\n  *PTR_uwTick_08001cbc = (uint32_t)freq;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "calculate_tick_count_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "check_serial2_available_08005a18",
                "DAT_08005a3c": "data_available_08005a3c",
                "PTR_Serial2_08005a40": "serial2_ptr_08005a40"
            },
            "code": "void check_serial2_available_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    HardwareSerial::available((HardwareSerial *)PTR_Serial2_08005a40);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_serial2_available_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_timer_interrupt_08003f18",
                "htim": "timer_handle",
                "pTVar1": "timer_instance",
                "SR": "TIM_FLAG",
                "DIER": "TIM_IT",
                "HAL_TIM_ACTIVE_CHANNEL_1": "HAL_TIM_ACTIVE_CHANNEL_1",
                "CCMR1": "TIM_CCMR1",
                "HAL_TIM_OC_DelayElapsedCallback": "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "HAL_TIM_ACTIVE_CHANNEL_CLEARED",
                "CC1S": "TIM_CCMR1_CC1S",
                "HAL_TIM_PeriodElapsedCallback": "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "HAL_TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback": "HAL_TIM_TriggerCallback",
                "HAL_TIMEx_CommutationCallback": "HAL_TIMEx_CommutationCallback"
            },
            "code": "void process_timer_interrupt_08003f18(TIM_HandleTypeDef *timer_handle)\n{\n    TIM_TypeDef *timer_instance = timer_handle->Instance;\n    \n    if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_CC1);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n        if ((timer_instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    \n    // Same for CC2, CC3, CC4, Update, Break, Trigger, Commutation\n}\n",
            "called": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "TIM2_IRQHandler",
                "TIM4_IRQHandler",
                "TIM1_UP_IRQHandler",
                "TIM3_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_timer_interrupt_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "get_available_rx_buffer_space_0800591e",
                "this": "hardware_serial_instance",
                "(this->_serial).rx_head": "rx_head",
                "(this->_serial).rx_tail": "rx_tail",
                "0x40": "buffer_size",
                "((this->_serial).rx_head + 0x40) - (uint)(this->_serial).rx_tail & 0x3f": "(rx_head + buffer_size - rx_tail) & (buffer_size - 1)"
            },
            "code": "int __thiscall get_available_rx_buffer_space_0800591e(HardwareSerial *this)\n{\n    int rx_head = (this->_serial).rx_head;\n    int rx_tail = (this->_serial).rx_tail;\n    int buffer_size = 0x40;\n    int available_space = (rx_head + buffer_size - rx_tail) & (buffer_size - 1);\n    return available_space;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "get_available_rx_buffer_space_0800591e"
        },
        "FUN_08006104": {
            "renaming": {
                "FUN_08006104": "initialize_static_variables_08006104"
            },
            "code": "void initialize_static_variables_08006104(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006104",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08006104"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_irq_handler_bit_08002540",
                "IRQn": "irq_num",
                "uVar1": "irq_num_uint",
                "DAT_0800255c": "irq_handler_table"
            },
            "code": "void set_irq_handler_bit_08002540(IRQn_Type_conflict irq_num) {\n  uint32_t irq_num_uint = (uint32_t)irq_num;\n  if (irq_num_uint != -1) {\n    uint32_t irq_word_offset = (irq_num_uint >> 5) + 0x60;\n    uint32_t* irq_word_ptr = (uint32_t*)(DAT_0800255c + irq_word_offset * 4);\n    uint32_t irq_bit_offset = irq_num_uint & 0x1f;\n    uint32_t irq_bit_mask = 1 << irq_bit_offset;\n    *irq_word_ptr = irq_bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_irq_handler_bit_08002540"
        },
        "FUN_08005be2": {
            "renaming": {
                "__thiscall IPAddress::FUN_08005be2": "print_address",
                "this": "ip_address",
                "p": "printer",
                "iVar3": "i",
                "iVar4": "total_length",
                "sVar1": "bytes_printed",
                "sVar2": "dot_printed",
                "FUN_08005be2": "IPAddress::print_address_08005be2"
            },
            "code": "size_t __thiscall IPAddress::print_address_08005be2(IPAddress *this, Print *printer) {\n  size_t total_length = 0;\n  for (int i = 0; i < 3; i++) {\n    size_t bytes_printed = Print::print(printer, (this->_address).bytes[i], 10);\n    size_t dot_printed = Print::print(printer, '.');\n    total_length += bytes_printed + dot_printed;\n  }\n  total_length += Print::print(printer, (this->_address).bytes[3], 10);\n  return total_length;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005be2",
            "calling": [],
            "imported": false,
            "current_name": "IPAddress::print_address_08005be2"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "write_byte_to_output_buffer_08006344",
                "param_1": "buffer_address",
                "param_2": "byte_to_write",
                "param_3": "output_buffer",
                "uVar1": "write_result",
                "pbVar2": "last_byte_address",
                "pbVar3": "current_byte_address"
            },
            "code": "uint write_byte_to_output_buffer_08006344(undefined4 buffer_address, byte byte_to_write, byte **output_buffer) {\n  uint write_result;\n  byte *last_byte_address = output_buffer[2] - 1;\n  output_buffer[2] = last_byte_address;\n  if (((int)last_byte_address < 0) && (((int)last_byte_address < (int)output_buffer[6] || (byte_to_write == 10)))) {\n    write_result = __swbuf_r();\n    return write_result;\n  }\n  byte *current_byte_address = *output_buffer;\n  *output_buffer = current_byte_address + 1;\n  *current_byte_address = byte_to_write;\n  return (uint)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_output_buffer_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_not_null_080009c8",
                "in_ZR": "input_char"
            },
            "code": "bool is_not_null_080009c8(char input_char) {\n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_null_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "handle_i2c_state_08002db2",
                "*hi2c": "*i2c_handle",
                "HVar1": "current_state",
                "pbVar2": "buffer_ptr",
                "uVar3": "transfer_options"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_state_08002db2(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_StateTypeDef current_state = i2c_handle->State;\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->XferSize == 0 && current_state == HAL_I2C_STATE_BUSY_TX) {\n    if (transfer_options == 4 || transfer_options == 8 || transfer_options == 0xffff0000) {\n      i2c_handle->Instance->CR2 &= 0xfffff8ff;\n      i2c_handle->Instance->CR1 |= 0x200;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2c_handle);\n      }\n      else {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      i2c_handle->Instance->CR2 &= 0xfffff8ff;\n      i2c_handle->PreviousState = 0x11;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2c_handle);\n    }\n  }\n  else if (current_state == HAL_I2C_STATE_BUSY_TX || (i2c_handle->Mode == HAL_I2C_MODE_MEM && current_state == HAL_I2C_STATE_BUSY_RX)) {\n    if (i2c_handle->XferCount == 0) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n    }\n    else if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2c_handle->EventCount == 0) {\n        if (i2c_handle->MemaddSize == 1) {\n          i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n          i2c_handle->EventCount += 2;\n        }\n        else {\n          i2c_handle->Instance->DR = (i2c_handle->Memaddress << 0x10) >> 0x18;\n          i2c_handle->EventCount += 1;\n        }\n      }\n      else if (i2c_handle->EventCount == 1) {\n        i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n        i2c_handle->EventCount += 1;\n      }\n      else if (i2c_handle->EventCount == 2) {\n        if (current_state == HAL_I2C_STATE_BUSY_RX) {\n          i2c_handle->Instance->CR1 |= 0x100;\n        }\n        else if (current_state == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n          i2c_handle->pBuffPtr = buffer_ptr + 1;\n          i2c_handle->Instance->DR = (uint32_t)*buffer_ptr;\n          i2c_handle->XferCount--;\n        }\n      }\n    }\n    else {\n      uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      i2c_handle->Instance->DR = (uint32_t)*buffer_ptr;\n      i2c_handle->XferCount--;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_state_08002db2"
        },
        "FUN_08005932": {
            "renaming": {
                "FUN_08005932": "read_next_received_byte_08005932",
                "this": "serial_instance",
                "_serial": "serial_buffer",
                "rx_tail": "rx_tail",
                "rx_head": "rx_head",
                "rx_buff": "rx_buffer"
            },
            "code": "int __thiscall read_next_received_byte_08005932(HardwareSerial *serial_instance)\n{\n  uint32_t rx_tail = (uint32_t)(serial_instance->_serial).rx_tail;\n\n  if ((serial_instance->_serial).rx_head != rx_tail) {\n    return (uint32_t)(serial_instance->_serial).rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005932",
            "calling": [],
            "imported": false,
            "current_name": "read_next_received_byte_08005932"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_uw_tick_08001cc4",
                "PTR_uwTick_08001ccc": "uw_tick_ptr"
            },
            "code": "uint32_t get_uw_tick_08001cc4(void)\n{\n  return *(uint32_t *)PTR_uwTick_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_ADCEx_Calibration_Start",
                "HAL_RCC_OscConfig",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_ADC_PollForConversion",
                "HAL_RCCEx_PeriphCLKConfig",
                "GetCurrentMilli",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "get_uw_tick_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "update_alarm_callback_08003ea0",
                "hrtc": "rtc_handle",
                "hrtc->Instance->CRH": "crh_value",
                "hrtc->Instance->CRL": "crl_value",
                "HAL_RTC_AlarmAEventCallback": "HAL_RTC_AlarmAEventCallback",
                "DAT_08003ed4": "DAT_08003ed4"
            },
            "code": "void update_alarm_callback_08003ea0(RTC_HandleTypeDef *rtc_handle) {\n    uint32_t crh_value = rtc_handle->Instance->CRH;\n    uint32_t crl_value = rtc_handle->Instance->CRL;\n    if ((crh_value & 2) && (crl_value & 2)) {\n        HAL_RTC_AlarmAEventCallback(rtc_handle);\n        rtc_handle->Instance->CRL = 0xfffffffd;\n    }\n    *(uint32_t *)(DAT_08003ed4 + 0x14) = 0x20000;\n    rtc_handle->State = HAL_RTC_STATE_READY;\n}",
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "update_alarm_callback_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_i2c_data_0800306c",
                "*hi2c": "*i2c_handle",
                "uVar1": "transfer_options",
                "puVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict process_i2c_data_0800306c(I2C_HandleTypeDef *i2c_handle)\n{\n  uint32_t transfer_options;\n  uint8_t *buffer_ptr;\n  transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->XferCount == 3) {\n    if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n    }\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  else if (i2c_handle->XferCount == 2) {\n    if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffcff;\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n    }\n    else {\n      if (transfer_options == 2) {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x400;\n      }\n      else {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n      }\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffcff;\n    }\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->PreviousState = 0;\n    if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(i2c_handle);\n    }\n    else {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(i2c_handle);\n    }\n  }\n  else {\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_i2c_data_0800306c"
        },
        "FUN_08005c64": {
            "renaming": {
                "FUN_08005c64": "initialize_static_data_08005c64"
            },
            "code": "void initialize_static_data_08005c64()\n{\n  __static_initialization_and_destruction_0(1, 0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c64",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08005c64"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_uart_transmit_complete_0800548c",
                "obj": "serial",
                "HVar1": "uart_state"
            },
            "code": "bool is_uart_transmit_complete_0800548c(serial_t *serial) {\n    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(*(UART_HandleTypeDef **)(PTR_uart_handlers_080054ac + (uint)serial->index * 4));\n    return (uart_state & 0x22U) == 0x22;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_0800548c"
        },
        "FUN_08000924": {
            "renaming": {
                "FUN_08000924": "check_params_08000924",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_zero",
                "bVar3": "is_less_than"
            },
            "code": "uint check_params_08000924(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n    uint xor_result;\n    bool is_zero;\n    bool is_less_than;\n    \n    if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n        return 1;\n    }\n    \n    is_zero = (first_param | second_param << 1) == 0;\n    if (is_zero) {\n        is_zero = (third_param | fourth_param << 1) == 0;\n    }\n    if (!is_zero) {\n        is_zero = second_param == fourth_param;\n    }\n    if (is_zero) {\n        is_zero = first_param == third_param;\n    }\n    if (!is_zero) {\n        xor_result = second_param ^ fourth_param;\n        is_zero = xor_result == 0;\n        if (-1 < (int)xor_result) {\n          is_zero = second_param == fourth_param;\n        }\n        is_less_than = -1 < (int)xor_result && fourth_param <= second_param;\n        if (is_zero) {\n          is_less_than = third_param <= first_param;\n        }\n        fourth_param = (int)fourth_param >> 0x1f;\n        if (!is_less_than) {\n          fourth_param = ~fourth_param;\n        }\n        return fourth_param | 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000924",
            "calling": [],
            "imported": false,
            "current_name": "check_params_08000924"
        },
        "FUN_08006c34": {
            "renaming": {
                "FUN_08006c34": "call_fwalk_on_all_streams_with_reentrancy_08006c34",
                "param_1": "reentrancy",
                "DAT_08006c3c": "stream_cleanup_handler"
            },
            "code": "void call_fwalk_on_all_streams_with_reentrancy_08006c34(struct _reent* reentrancy){\n  _fwalk_reent(reentrancy, DAT_08006c3c);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c34",
            "calling": [],
            "imported": false,
            "current_name": "call_fwalk_on_all_streams_with_reentrancy_08006c34"
        },
        "FUN_080072a4": {
            "renaming": {
                "std::ctype_byname<char>::FUN_080072a4": "std::ctype_byname<char>::set_flags_on_pointers",
                "FUN_080072a4": "std::ctype_byname<char>::set_flags_on_pointers_080072a4"
            },
            "code": "void std::ctype_byname<char>::set_flags_on_pointers_080072a4(void)\n{\n  if (-1 < *(int *)PTR_id_08007308 << 0x1f) {\n    *(undefined4 *)PTR_id_08007308 = 1;\n  }\n  if (-1 < *(int *)PTR_id_0800730c << 0x1f) {\n    *(undefined4 *)PTR_id_0800730c = 1;\n  }\n  if (-1 < *(int *)PTR_id_08007310 << 0x1f) {\n    *(undefined4 *)PTR_id_08007310 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08007314 << 0x1f) {\n    *(undefined4 *)PTR_id_08007314 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08007318 << 0x1f) {\n    *(undefined4 *)PTR_id_08007318 = 1;\n  }\n  if (-1 < *(int *)PTR_id_0800731c << 0x1f) {\n    *(undefined4 *)PTR_id_0800731c = 1;\n  }\n  if (-1 < *(int *)PTR_id_08007320 << 0x1f) {\n    *(undefined4 *)PTR_id_08007320 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08007324 << 0x1f) {\n    *(undefined4 *)PTR_id_08007324 = 1;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072a4",
            "calling": [],
            "imported": false,
            "current_name": "std::ctype_byname<char>::set_flags_on_pointers_080072a4"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_gpio_type_def_08004848",
                "port_idx": "port_index",
                "DAT_08004870": "port_a",
                "DAT_08004880": "port_b",
                "DAT_08004874": "port_c",
                "DAT_08004878": "port_d",
                "DAT_0800487c": "port_e"
            },
            "code": "GPIO_TypeDef * get_gpio_type_def_08004848(uint32_t port_index) {\n  switch(port_index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return (GPIO_TypeDef *)0x0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "imported": false,
            "current_name": "get_gpio_type_def_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "print_number_08005d82",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall print_number_08005d82(Print *this, int number, int base) {\n  size_t result = print_number_08005d82(this, number, base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "print_number_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "seek_file_08006f92",
                "param_1": "file_descriptor",
                "param_2": "metadata",
                "iVar1": "seek_result",
                "uVar2": "flags",
                "bVar3": "seek_failed"
            },
            "code": "void seek_file_08006f92(int file_descriptor, int* metadata) {\n  int seek_result;\n  ushort flags;\n  bool seek_failed;\n  seek_result = _lseek_r(file_descriptor, (int)*(short *)(metadata + 0xe));\n  seek_failed = seek_result == -1;\n  if (seek_failed) {\n    flags = *(ushort *)(metadata + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(metadata + 0x54) = seek_result;\n    flags = *(ushort *)(metadata + 0xc) | 0x1000;\n  }\n  if (seek_failed) {\n    *(ushort *)(metadata + 0xc) = flags;\n  }\n  if (!seek_failed) {\n    *(ushort *)(metadata + 0xc) = flags;\n  }\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "seek_file_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_080012c0": "write_data_pins",
                "this": "self",
                "value": "data",
                "uVar1": "data_pin_index",
                "FUN_080012c0": "LiquidCrystal::write_data_pins_080012c0"
            },
            "code": "void __thiscall LiquidCrystal::write_data_pins_080012c0(LiquidCrystal *this, uint8_t value)\n{\n    uint data_pin_index;\n    for (data_pin_index = 0; data_pin_index < 4; data_pin_index++) {\n        digitalWrite((uint)this->_data_pins[data_pin_index], (int)(uint)value >> (data_pin_index & 0xff) & 1);\n    }\n    pulseEnable(this);\n    return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "send",
                "begin"
            ],
            "imported": false,
            "current_name": "LiquidCrystal::write_data_pins_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_adc_state_08001f80",
                "*hadc": "*adc_handle"
            },
            "code": "uint32_t get_adc_state_08001f80(ADC_HandleTypeDef *adc_handle)\n{\n  return adc_handle->State;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_state_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "check_adc_status_08001f84",
                "*hadc": "*hadc",
                "HVar1": "result",
                "uVar2": "tick_start",
                "uVar3": "tick_now",
                "*pAVar4": "*adc_instance",
                "wait_loop_index": "wait_loop_index"
            },
            "code": "HAL_StatusTypeDef_conflict check_adc_status_08001f84(ADC_HandleTypeDef *hadc)\n{\n    HAL_StatusTypeDef_conflict result;\n    uint32_t tick_start;\n    uint32_t tick_now;\n    ADC_TypeDef *adc_instance;\n    uint32_t wait_loop_index;\n\n    adc_instance = hadc->Instance;\n    if ((adc_instance->CR2 & 1) == 0) {\n        adc_instance->CR2 |= 1;\n        for (wait_loop_index = (uint32_t)((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_SystemCoreClock_08001ffc >> 0x32); wait_loop_index != 0; wait_loop_index--) {\n        }\n        tick_start = HAL_GetTick();\n        do {\n            if ((hadc->Instance->CR2 & 1) != 0) {\n                return HAL_OK;\n            }\n            tick_now = HAL_GetTick();\n        } while (tick_now - tick_start < 3);\n        hadc->State |= 0x10;\n        hadc->ErrorCode |= 1;\n        hadc->Lock = HAL_UNLOCKED;\n        result = HAL_ERROR;\n    }\n    else {\n        result = HAL_OK;\n    }\n    return result;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "HAL_ADC_Start",
                "HAL_ADCEx_Calibration_Start"
            ],
            "imported": false,
            "current_name": "check_adc_status_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "initialize_system_08000bcc",
                "puVar1": "ssr_pin",
                "puVar2": "led_red_pin",
                "this": "lcd",
                "uVar3": "millis()",
                "PTR_ssrPin_08000c90": "ssr_pin_address",
                "PTR_buzzerPin_08000c94": "buzzer_pin_address",
                "PTR_ledRedPin_08000c98": "led_red_pin_address",
                "PTR_lcd_08000c9c": "lcd_address",
                "PTR_degree_08000ca0": "degree_symbol_address",
                "PTR_s_Reflow_08000ca4": "reflow_text_address",
                "PTR_s_Oven_1_2_08000ca8": "oven_text_address",
                "PTR_Serial2_08000cac": "serial_address",
                "PTR_windowSize_08000cb0": "window_size_address",
                "PTR_nextCheck_08000cb4": "next_check_address",
                "PTR_nextRead_08000cb8": "next_read_address",
                "delay(0x9c4)": "delay(2500)",
                "LiquidCrystal::begin": "lcd.begin",
                "LiquidCrystal::createChar": "lcd.createChar",
                "LiquidCrystal::clear": "lcd.clear",
                "Print::print": "lcd.print",
                "LiquidCrystal::setCursor": "lcd.setCursor",
                "HardwareSerial::begin": "Serial2.begin",
                "digitalWrite": "digitalWrite",
                "pinMode": "pinMode",
                "startForkserver": "start_fork_server"
            },
            "code": "void initialize_system_08000bcc(void)\n{\n  uint32_t ssr_pin;\n  uint32_t buzzer_pin;\n  uint32_t led_red_pin;\n  uint32_t window_size = 2000;\n  uint32_t next_check = millis();\n  uint32_t next_read = millis();\n  LiquidCrystal lcd = LiquidCrystal(8, 2);\n  pinMode(ssr_pin, OUTPUT);\n  digitalWrite(ssr_pin, LOW);\n  pinMode(buzzer_pin, OUTPUT);\n  digitalWrite(buzzer_pin, LOW);\n  pinMode(led_red_pin, OUTPUT);\n  digitalWrite(buzzer_pin, HIGH);\n  lcd.begin(16, 2);\n  lcd.createChar(0, degree_symbol);\n  lcd.clear();\n  lcd.print(\"Reflow\");\n  lcd.setCursor(0, 1);\n  lcd.print(\"Oven 1.2\");\n  digitalWrite(buzzer_pin, LOW);\n  delay(2500);\n  lcd.clear();\n  Serial2.begin(57600);\n  digitalWrite(led_red_pin, HIGH);\n  start_fork_server(0);\n}\n",
            "called": [
                "clear",
                "createChar",
                "millis",
                "begin",
                "digitalWrite",
                "setCursor",
                "print",
                "begin",
                "pinMode",
                "startForkserver",
                "delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_system_08000bcc"
        },
        "FUN_080047d8": {
            "renaming": {
                "FUN_080047d8": "reset_uart_transfer_counts_080047d8",
                "hdma": "dma_handle",
                "huart": "uart_handle",
                "Parent": "Parent",
                "RxXferCount": "RxXferCount",
                "TxXferCount": "TxXferCount",
                "HAL_UART_ErrorCallback": "HAL_UART_ErrorCallback"
            },
            "code": "void reset_uart_transfer_counts_080047d8(DMA_HandleTypeDef *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d8",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_transfer_counts_080047d8"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_gpio_pin_state_0800281e",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "GPIO_PIN_RESET": "GPIO_PIN_RESET",
                "BSRR": "bsrr"
            },
            "code": "void set_gpio_pin_state_0800281e(GPIO_TypeDef *gpio, uint16_t pin, GPIO_PinState state) {\n  if (state == GPIO_PIN_RESET) {\n    gpio->BSRR = (uint)pin << 0x10;\n    return;\n  }\n  gpio->BSRR = (uint)pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "call_functions_in_array_08006198",
                "puVar1": "preinit_array_end",
                "iVar2": "preinit_array_size",
                "iVar3": "i",
                "PTR___preinit_array_end_080061d0": "PTR___preinit_array_end_080061d0",
                "PTR___preinit_array_end_080061d4": "PTR___preinit_array_end_080061d4",
                "_init": "_init",
                "PTR___preinit_array_end_080061d8": "PTR___preinit_array_end_080061d8",
                "PTR___do_global_dtors_aux_fini_array_entry_080061dc": "PTR___do_global_dtors_aux_fini_array_entry_080061dc",
                "void": "void",
                "**": "double_pointer",
                "function_ptr": "function_pointer",
                "i": "i",
                "sizeof": "sizeof"
            },
            "code": "void call_functions_in_array_08006198(void)\n{\n    void **preinit_array_end = PTR___preinit_array_end_080061d0;\n    int preinit_array_size = (int)PTR___preinit_array_end_080061d4 - (int)PTR___preinit_array_end_080061d0;\n    for (int i = 0; i < preinit_array_size / sizeof(void *); i++) {\n        void (*function_ptr)() = preinit_array_end[i];\n        (*function_ptr)();\n    }\n    _init();\n    void **dtors_array_end = PTR___preinit_array_end_080061d8;\n    int dtors_array_size = (int)PTR___do_global_dtors_aux_fini_array_entry_080061dc - (int)PTR___preinit_array_end_080061d8;\n    for (int i = 0; i < dtors_array_size / sizeof(void *); i++) {\n        void (*function_ptr)() = dtors_array_end[i];\n        (*function_ptr)();\n    }\n    return;\n}",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "call_functions_in_array_08006198"
        },
        "FUN_08006fc0": {
            "renaming": {
                "FUN_08006fc0": "write_to_file_08006fc0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "data_buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_08006fc0(int *error_code, int file_descriptor, char *data_buffer, int buffer_size) {\n    undefined *errno_ptr = PTR_errno_08006fe0;\n    *(undefined4 *)PTR_errno_08006fe0 = 0;\n    int write_result = _write(file_descriptor, data_buffer, buffer_size);\n    if ((write_result == -1) && (*(int *)errno_ptr != 0)) {\n        *error_code = *(int *)errno_ptr;\n    }\n    return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fc0",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08006fc0"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "seek_file_08007048",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08007048(int *result, int file_descriptor, int offset, int whence) {\n    int *errno_ptr = PTR_errno_08007068;\n    *(int *)PTR_errno_08007068 = 0;\n    int seek_result = _lseek(file_descriptor, offset, whence);\n    if (seek_result == -1 && *errno_ptr != 0) {\n        *result = *errno_ptr;\n    }\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_HCLK_frequency_divider_08003c50",
                "uVar1": "frequency",
                "shift_amount": "shift_amount",
                "index": "index",
                "divider": "divider"
            },
            "code": "uint32_t get_HCLK_frequency_divider_08003c50(void)\n{\n    uint32_t frequency = HAL_RCC_GetHCLKFreq();\n    uint32_t shift_amount = *(int *)(DAT_08003c68 + 4) << 0x15;\n    uint32_t index = shift_amount >> 0x1d;\n    uint32_t divider = PTR_APBPrescTable_08003c6c[index];\n    return frequency >> divider;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "decode_data_080065c0",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "length",
                "param_4": "param_4",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "max_length",
                "uVar3": "uVar3",
                "bVar4": "has_offset",
                "callback_result": "callback_result",
                "data_length": "data_length",
                "offset_diff": "offset_diff"
            },
            "code": "undefined4 decode_data_080065c0(undefined4 data, uint *offset, uint *length, undefined4 param_4, code *callback)\\n{\\n    int i;\\n    uint max_length = offset[4] < offset[2] ? offset[2] : offset[4];\\n    *length = max_length;\\n    if (*(char *)((int)offset + 0x43) != \"\\0\")\\n    {\\n        *length = max_length + 1;\\n    }\\n    if ((int)(*offset << 0x1a) < 0)\\n    {\\n        *length = *length + 2;\\n        *(undefined *)((int)offset + 0x44) = *(undefined *)((int)offset + 0x45);\\n        *(undefined *)((int)offset + 0x43) = 0x30;\\n    }\\n    uint uVar2 = *offset & 6;\\n    if (uVar2 == 0)\\n    {\\n        for (; (int)uVar2 < (int)(offset[3] - *length); uVar2 = uVar2 + 1)\\n        {\\n            int callback_result = (*callback)(data, param_4, (int)offset + 0x19, 1);\\n            if (callback_result == -1)\\n            {\\n                return 0xffffffff;\\n            }\\n        }\\n    }\\n    uVar2 = (uint)*(byte *)((int)offset + 0x43);\\n    if (uVar2 != 0)\\n    {\\n        uVar2 = 1;\\n    }\\n    uint uVar3 = uVar2;\\n    if ((int)(*offset << 0x1a) < 0)\\n    {\\n        uVar3 = uVar2 + 2;\\n    }\\n    int callback_result = (*callback)(data, param_4, (int)offset + 0x43, uVar3);\\n    if (callback_result == -1)\\n    {\\n        return 0xffffffff;\\n    }\\n    uint data_length = offset[3];\\n    bool has_offset = (*offset & 6) != 4;\\n    if (has_offset)\\n    {\\n        data_length = 0;\\n    }\\n    uint offset_diff = 0;\\n    if (!has_offset)\\n    {\\n        data_length = data_length - *length;\\n        data_length = data_length & ~((int)data_length >> 0x1f);\\n    }\\n    if (offset[4] < offset[2])\\n    {\\n        offset_diff = offset_diff + (offset[2] - offset[4]);\\n    }\\n    while (true)\\n    {\\n        if (offset_diff == data_length)\\n        {\\n            return 0;\\n        }\\n        int callback_result = (*callback)(data, param_4, (int)offset + 0x1a, 1);\\n        if (callback_result == -1)\\n        {\\n            break;\\n        }\\n        offset_diff = offset_diff + 1;\\n    }\\n    return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "decode_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "receive_serial_data_080054d4",
                "obj": "serial_obj",
                "c": "received_char",
                "uVar1": "is_rx_active"
            },
            "code": "int receive_serial_data_080054d4(serial_t *serial_obj, uchar *received_char) {\n  uint8_t is_rx_active;\n  if (serial_obj == NULL) {\n    return -1;\n  }\n  is_rx_active = serial_rx_active(serial_obj);\n  if (is_rx_active == 0) {\n    *received_char = serial_obj->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_0800550c + (uint)serial_obj->index * 4), &serial_obj->recv, 1);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "serial_rx_active",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_serial_data_080054d4"
        },
        "FUN_0800715c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800715c": "set_ctype_flags",
                "PTR_id_080071f0": "id_1",
                "PTR_id_080071f4": "id_2",
                "PTR_id_080071f8": "id_3",
                "PTR_id_080071fc": "id_4",
                "PTR_id_08007200": "id_5",
                "PTR_id_08007204": "id_6",
                "PTR_id_08007208": "id_7",
                "PTR_id_0800720c": "id_8",
                "PTR_id_08007210": "id_9",
                "PTR_id_08007214": "id_10",
                "PTR_id_08007218": "id_11",
                "PTR_id_0800721c": "id_12",
                "FUN_0800715c": "set_ctype_flags_0800715c"
            },
            "code": "void set_ctype_flags_0800715c(void)\n{\n    if (-1 < *PTR_id_080071f0 << 0x1f) {\n        *PTR_id_080071f0 = 1;\n    }\n    if (-1 < *PTR_id_080071f4 << 0x1f) {\n        *PTR_id_080071f4 = 1;\n    }\n    if (-1 < *PTR_id_080071f8 << 0x1f) {\n        *PTR_id_080071f8 = 1;\n    }\n    if (-1 < *PTR_id_080071fc << 0x1f) {\n        *PTR_id_080071fc = 1;\n    }\n    if (-1 < *PTR_id_08007200 << 0x1f) {\n        *PTR_id_08007200 = 1;\n    }\n    if (-1 < *PTR_id_08007204 << 0x1f) {\n        *PTR_id_08007204 = 1;\n    }\n    if (-1 < *PTR_id_08007208 << 0x1f) {\n        *PTR_id_08007208 = 1;\n    }\n    if (-1 < *PTR_id_0800720c << 0x1f) {\n        *PTR_id_0800720c = 1;\n    }\n    if (-1 < *PTR_id_08007210 << 0x1f) {\n        *PTR_id_08007210 = 1;\n    }\n    if (-1 < *PTR_id_08007214 << 0x1f) {\n        *PTR_id_08007214 = 1;\n    }\n    if (-1 < *PTR_id_08007218 << 0x1f) {\n        *PTR_id_08007218 = 1;\n    }\n    if (-1 < *PTR_id_0800721c << 0x1f) {\n        *PTR_id_0800721c = 1;\n    }\n    if (-1 < *PTR_id_080071f03 << 0x1f) {\n        *PTR_id_080071f03 = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800715c",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_0800715c"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40",
                "msg": "message",
                "val": "value"
            },
            "code": "void infinite_loop_08004d40(char *message, int value) {\n                        while(true) {\n                            // do nothing\n                        }\n                    }",
            "called": [
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "SystemClock_Config",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_flags_and_values_08004d44",
                "puVar1": "flags_and_values"
            },
            "code": "void set_flags_and_values_08004d44(void)\n{\n  uint *flags_and_values;\n  flags_and_values = PTR_DAT_08004d84;\n  *PTR_DAT_08004d84 |= 1;\n  flags_and_values[1] &= PTR_DAT_08004d88;\n  *flags_and_values &= 0xfef6ffff;\n  *flags_and_values &= 0xfffbffff;\n  flags_and_values[1] &= 0xff80ffff;\n  flags_and_values[2] = 0x9f0000;\n  *(undefined4 *)(PTR_DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "gpio_pin_callback_0800282c",
                "GPIO_Pin": "pin",
                "PTR_08002844": "gpio_pin_data_ptr",
                "DAT_08002844": "gpio_pin_data",
                "uint": "uint32_t"
            },
            "code": "void gpio_pin_callback_0800282c(uint16_t pin){\n  uint32_t* PTR_08002844 = (uint32_t*)(DAT_08002844 + 0x14);\n  uint32_t DAT_08002844 = *PTR_08002844;\n  if((DAT_08002844 & (uint32_t)pin) != 0){\n    *PTR_08002844 = (uint32_t)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [
                "EXTI1_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI0_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "gpio_pin_callback_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "MAX31855::FUN_080015b2": "read_max31855",
                "this": "max31855",
                "cs": "chip_select",
                "sck": "clock",
                "so": "data_out",
                "uVar2": "bit_index",
                "uVar3": "result",
                "iVar1": "read_value",
                "FUN_080015b2": "read_max31855_080015b2"
            },
            "code": "unsigned long read_max31855_080015b2(MAX31855 *max31855){\n  int read_value;\n  uint32_t bit_value;\n  digitalWrite((uint32_t)max31855->cs, LOW);\n  uint32_t result = 0;\n  for (uint32_t bit_index = 31; bit_index != UINT32_MAX; bit_index--) {\n    digitalWrite((uint32_t)max31855->sck, HIGH);\n    read_value = digitalRead((uint32_t)max31855->so);\n    if (read_value != 0) {\n      bit_value = 1 << (bit_index & 0xff);\n      result |= bit_value;\n    }\n    digitalWrite((uint32_t)max31855->sck, LOW);\n  }\n  digitalWrite((uint32_t)max31855->cs, HIGH);\n  return result;\n}",
            "called": [
                "digitalWrite",
                "digitalRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "readThermocouple"
            ],
            "imported": false,
            "current_name": "read_max31855_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "reverse_bits_0800040c",
                "param_1": "input",
                "uVar1": "result_upper",
                "uVar2": "shift_amount",
                "iVar3": "leading_zero_count",
                "uVar4": "bit_count",
                "in_r12": "unused",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflowing"
            },
            "code": "ulonglong reverse_bits_0800040c(uint input)\n{\n    uint leading_zero_count = count_leading_zeroes(input);\n    uint bit_count = leading_zero_count + 0x15;\n    uint shift_amount = (bit_count < 0x20) ? bit_count : 0x20;\n    uint left_shifted = input << shift_amount;\n    uint right_shifted = input >> (0x20 - shift_amount);\n    uint left_padding = (bit_count < 0x20) ? (0U >> (0x20 - bit_count)) : 0;\n    uint right_padding = (bit_count < 0x20) ? (0U >> shift_amount) : 0;\n    ulonglong result = ((left_shifted | right_padding) + ((0x432 - bit_count) * 0x100000)) << 32;\n    result |= (left_padding >> (0x20 - shift_amount)) | (right_shifted << shift_amount);\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800040c"
        },
        "FUN_08006088": {
            "renaming": {
                "FUN_08006088": "handle_gpio_exti_interrupt_08006088"
            },
            "code": "void handle_gpio_exti_interrupt_08006088(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006088",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_08006088"
        },
        "FUN_08006eb0": {
            "renaming": {
                "FUN_08006eb0": "process_request_08006eb0",
                "param_1": "response",
                "param_2": "request_length",
                "param_3": "error_code",
                "param_4": "signal_code",
                "_Var1": "pid",
                "uVar2": "error_code",
                "iVar3": "function_pointer_index",
                "pcVar4": "function_pointer"
            },
            "code": "int process_request_08006eb0(int *response, uint request_length, int error_code, int signal_code) {\n  __pid_t pid;\n  int function_pointer_index;\n  code *function_pointer;\n\n  if (request_length > 31) {\n    *response = 22;\n    return -1;\n  }\n\n  function_pointer_index = response[17];\n  if ((function_pointer_index != 0) && (function_pointer = *(code **)(function_pointer_index + request_length * 4), function_pointer != (code *)0x0)) {\n    if (function_pointer != (code *)0x1) {\n      if (function_pointer == (code *)-1) {\n        *response = 22;\n        return 1;\n      }\n      *(undefined4 *)(function_pointer_index + request_length * 4) = 0;\n      (*function_pointer)(request_length);\n    }\n    return 0;\n  }\n\n  pid = _getpid_r();\n  error_code = _kill_r(response, pid, request_length, signal_code);\n  return error_code;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eb0",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_request_08006eb0"
        },
        "FUN_08004e5c": {
            "renaming": {
                "FUN_08004e5c": "handle_timer_interrupt_08004e5c",
                "PTR_timer_handles_08004e6c": "PTR_timer_handles",
                "current_timer_handle": "current_timer_handle"
            },
            "code": "void handle_timer_interrupt_08004e5c(void)\n{\n    TIM_HandleTypeDef* current_timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e6c_08004e6c + 0xc);\n    if (current_timer_handle != NULL) {\n        HAL_TIM_IRQHandler(current_timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e5c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e5c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "get_stimer_from_htim_08004df4",
                "htim": "TIM_HandleTypeDef* htim",
                "stimer_t": "stimer_t*",
                "&htim[-1].Lock": "(&htim[index_of_lock].Lock)",
                "index_of_lock": "int index_of_lock"
            },
            "code": "stimer_t* get_stimer_from_htim_08004df4(TIM_HandleTypeDef* htim)\n{\n    int index_of_lock = -1;\n    return (stimer_t*)(&htim[index_of_lock].Lock);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_htim_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "configure_pin_08004bb0",
                "pin": "pin_name",
                "mode": "pin_mode",
                "pull": "pin_pull",
                "uVar1": "pin_number",
                "GPIOx": "gpio_port",
                "tmpreg": "temporary_register",
                "GPIO_InitStructure": "gpio_init",
                "DAT_08004c28": "data_register_1",
                "DAT_08004c2c": "data_register_2",
                "PinName_conflict": "pin_name_type"
            },
            "code": "void configure_pin_08004bb0(PinName_conflict pin, uint32_t mode, uint32_t pull) {\n  uint32_t pin_number = (uint32_t)pin;\n  GPIO_TypeDef *gpio_port = set_GPIO_Port_Clock((pin_number << 24) >> 28);\n  uint32_t pin_mask = (1 << (pin_number & 0xf)) & 0xffff;\n  GPIO_InitTypeDef gpio_init;\n  gpio_init.Pin = pin_mask;\n  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;\n  *(uint32_t *)(DAT_08004c28 + 0x18) |= 1;\n  if (((pin_number - 0xd) & 0xff) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) = (*(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff) | 0x4000000;\n  }\n  if ((pin_number == 0xf) || (pin_number == 0x13) || (pin_number == 0x14)) {\n    *(uint32_t *)(DAT_08004c2c + 4) = (*(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff) | 0x2000000;\n  }\n  gpio_init.Mode = mode;\n  gpio_init.Pull = pull;\n  HAL_GPIO_Init(gpio_port, &gpio_init);\n}\n",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "configure_pin_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "handle_timer_interrupt_08004df8",
                "*htim": "*timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "oc_interrupt_handler",
                "_func_void_stimer_t_ptr_uint32_t": "_func_void_stimer_t_ptr_uint32_t",
                "HAL_TIM_ACTIVE_CHANNEL_1": "HAL_TIM_ACTIVE_CHANNEL_1"
            },
            "code": "void handle_timer_interrupt_08004df8(TIM_HandleTypeDef *timer_handle) {\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if ((timer_obj->oc_interrupt_handler != (_func_void_stimer_t_ptr_uint32_t *)0x0) && (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->oc_interrupt_handler)(timer_obj,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510::FUN_08001510": "improved_function_name",
                "this": "self",
                "rs": "rs_value",
                "enable": "enable_value",
                "d0": "data_0",
                "d1": "data_1",
                "d2": "data_2",
                "d3": "data_3",
                "super_Print": "print_object",
                "write_error": "error_flag",
                "_vptr_Print": "print_vtable",
                "PTR_PTR_write_1_0800154c": "new_write_ptr",
                "init": "initialize_object",
                "FUN_08001510": "improved_function_name_08001510"
            },
            "code": "improved_function_name_08001510 * __thiscall improved_function_name_08001510(improved_function_name_08001510 *this, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) {\\n  this->super_Print.write_error = 0;\\n  this->super_Print._vptr_Print = (_func_int_varargs **)PTR_PTR_write_1_0800154c;\\n  init(this, \"\\x01\", rs, 0xff, enable, d0, d1, d2, d3, \"\\0\", \"\\0\", \"\\0\", \"\\0\");\\n  return this;\\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "improved_function_name_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "i2c_listen_mode_handler_08002af8",
                "*hi2c": "*i2c_handle",
                "*pData": "*data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance",
                "tmpreg": "control_register"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_listen_mode_handler_08002af8(I2C_HandleTypeDef *i2c_handle, uint8_t *data, uint16_t size, uint32_t transfer_options)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t control_register;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      control_register = i2c_instance->CR1;\n      if ((control_register & 1) == 0) {\n        i2c_instance->CR1 = control_register | 1;\n      }\n      i2c_instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = transfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_mode_handler_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "handle_i2c_transfer_080028de",
                "hi2c": "i2c_handle",
                "uVar1": "transfer_options",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_transfer_080028de(I2C_HandleTypeDef *i2c_handle) {\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n  uint32_t tmpreg;\n\n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX && (i2c_handle->EventCount != 0 || i2c_handle->Mode != HAL_I2C_MODE_MEM)) {\n    if (i2c_handle->EventCount == 0 && i2c_handle->Init.AddressingMode == 0xc000) {\n      i2c_instance->CR1 |= 0x100;\n      i2c_handle->EventCount++;\n    } else {\n      if (i2c_handle->XferCount == 0) {\n        i2c_instance->CR1 |= 0x200;\n      } else if (i2c_handle->XferCount == 1) {\n        if (transfer_options == 0xffff0000) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          if ((i2c_instance->CR2 & 0x800) == 0) {\n            i2c_instance->CR1 |= 0x200;\n          } else {\n            i2c_instance->CR1 &= 0xfffffbff;\n          }\n        } else if (transfer_options == 4 || transfer_options == 8 || i2c_handle->PreviousState == 0x12) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          i2c_instance->CR1 |= 0x200;\n        } else if (i2c_handle->XferOptions == 2) {\n          i2c_instance->CR1 |= 0x400;\n        } else {\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n      } else if (i2c_handle->XferCount == 2) {\n        if (i2c_handle->XferOptions == 2) {\n          i2c_instance->CR1 |= 0x400;\n        } else {\n          i2c_instance->CR1 |= 0x800;\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      } else {\n        i2c_instance->CR1 |= 0x400;\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      i2c_handle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_i2c_device_address_08002848",
                "*hi2c": "*i2c_handle",
                "hi2c->Mode": "device_mode",
                "hi2c->EventCount": "event_count",
                "hi2c->Init.AddressingMode": "addressing_mode",
                "hi2c->Instance->DR": "i2c_instance->DR",
                "hi2c->Devaddress": "device_address",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef_conflict set_i2c_device_address_08002848(I2C_HandleTypeDef *i2c_handle)\n{\n    uint8_t device_address = i2c_handle->Devaddress;\n    uint8_t device_mode = i2c_handle->Mode;\n    uint16_t event_count = i2c_handle->EventCount;\n    uint16_t addressing_mode = i2c_handle->Init.AddressingMode;\n    I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n\n    if (device_mode == HAL_I2C_MODE_MEM) {\n        if (event_count == 0) {\n            i2c_instance->DR = device_address & 0xFE;\n        }\n        else {\n            i2c_instance->DR = device_address & 0xFF | 1;\n        }\n    }\n    else if (addressing_mode == 0x4000) {\n        if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n            i2c_instance->DR = device_address & 0xFE;\n        }\n        else {\n            i2c_instance->DR = device_address & 0xFF | 1;\n        }\n    }\n    else if (event_count == 0) {\n        i2c_instance->DR = (device_address << 16) >> 23 & 6 | 0xF0;\n    }\n    else if (event_count == 1) {\n        i2c_instance->DR = (device_address << 16) >> 23 & 6 | 0xF1;\n    }\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_i2c_device_address_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "get_i2c_struct_from_handle_08004e70",
                "hi2c": "i2c_handle",
                "i2c_t": "i2c_struct",
                "EventCount": "EventCount"
            },
            "code": "typedef struct i2c_struct { int EventCount; } i2c_t;\n\ni2c_t * get_i2c_struct_from_handle_08004e70(I2C_HandleTypeDef *i2c_handle)\n{\n  return (i2c_t *)&i2c_handle[-1].EventCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_struct_from_handle_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_adc_conversion_ready_080020f0",
                "hadc": "adc_handle",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "pAVar3": "adc_instance"
            },
            "code": "HAL_StatusTypeDef_conflict check_adc_conversion_ready_080020f0(ADC_HandleTypeDef *adc_handle)\n{\n    uint32_t start_time = HAL_GetTick();\n    ADC_TypeDef *adc_instance = adc_handle->Instance;\n    if ((adc_instance->CR2 & 1) == 0) {\n        return HAL_OK;\n    }\n    adc_instance->CR2 &= 0xfffffffe;\n    while ((adc_handle->Instance->CR2 & 1) && (HAL_GetTick() - start_time < 3));\n    if (HAL_GetTick() - start_time >= 3) {\n        adc_handle->State |= 0x10;\n        adc_handle->ErrorCode |= 1;\n        return HAL_ERROR;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "imported": false,
            "current_name": "check_adc_conversion_ready_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "process_input_08006e10",
                "param_1": "input_len",
                "param_2": "input_array",
                "uVar1": "flags",
                "iVar2": "allocated_array",
                "local_18": "processed_len",
                "local_14": "processed_array"
            },
            "code": "void process_input_08006e10(int input_len, int *input_array)\n{\n  ushort flags;\n  int processed_len;\n  int *processed_array;\n  \n  if (-1 < (int)((uint)*(ushort *)(input_array + 3) << 0x1e))) {\n    processed_len = input_len;\n    processed_array = input_array;\n    flags = __swhatbuf_r(input_len, input_array, &processed_len, &processed_array);\n    int* allocated_array = _malloc_r(input_len, processed_len);\n    if (allocated_array != 0) {\n      *(undefined4 *)(input_len + 0x28) = DAT_08006e8c;\n      *input_array = allocated_array;\n      *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x80;\n      input_array[4] = allocated_array;\n      input_array[5] = processed_len;\n      if ((processed_array != (int *)0x0) && (_isatty_r(input_len, (int)*(short *)((int)input_array + 0xe)) != 0)) {\n        *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(input_array + 3) = flags | *(ushort *)(input_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(input_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfffc | 2;\n  }\n  *input_array = (int)input_array + 0x47;\n  input_array[4] = (int)input_array + 0x47;\n  input_array[5] = 1;\n  return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "process_input_08006e10"
        },
        "FUN_0800607e": {
            "renaming": {
                "FUN_0800607e": "handle_gpio_exti_interrupt_0800607e"
            },
            "code": "void handle_gpio_exti_interrupt_0800607e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800607e",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_0800607e"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "i2c_transfer_08004e74",
                "*hi2c": "*handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "addr_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_obj",
                "i2cTxRxBufferSize": "i2c_tx_rx_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "i2c_tx_rx_buffer"
            },
            "code": "void i2c_transfer_08004e74(I2C_HandleTypeDef *handle, uint8_t transfer_direction, uint16_t addr_match_code) {\n    i2c_t *i2c_obj = get_i2c_obj(handle);\n    \n    if ((uint)addr_match_code == (handle->Init).OwnAddress1) {\n        if (transfer_direction == 0) {\n            i2c_obj->i2c_tx_rx_buffer_size = 0;\n            i2c_obj->slave_mode = 0;\n            if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\n                (*i2c_obj->on_slave_transmit)();\n            }\n            HAL_I2C_Slave_Sequential_Transmit_IT(handle, i2c_obj->i2c_tx_rx_buffer, (ushort)i2c_obj->i2c_tx_rx_buffer_size, 8);\n            return;\n        }\n        i2c_obj->slave_mode = 1;\n        HAL_I2C_Slave_Sequential_Receive_IT(handle, i2c_obj->i2c_tx_rx_buffer, 0x20, 8);\n    }\n}\n",
            "called": [
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_gpio_pin_state_08004c30",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "val": "gpio_pin_state"
            },
            "code": "void set_gpio_pin_state_08004c30(GPIO_TypeDef *gpio_port, uint32_t gpio_pin, uint32_t gpio_pin_state) {\n  if (gpio_pin_state == 0) {\n    HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08004c30"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "handle_gpio_exti_interrupt_08006092",
                "PTR_": "",
                "DAT_": "",
                "HAL_GPIO_EXTI_IRQHandler": "HAL_GPIO_EXTI_IRQHandler",
                "8": "GPIO_PIN_8"
            },
            "code": "void handle_gpio_exti_interrupt_08006092(void)\n{\n    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);\n    return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_08006092"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "read_data_from_file_08006f38",
                "param_1": "file_pointer",
                "param_2": "data_pointer",
                "iVar1": "num_bytes_read",
                "uVar2": "new_data",
                "bVar3": "read_successful"
            },
            "code": "void read_data_from_file_08006f38(void* file_pointer, int data_pointer) {\n    int num_bytes_read;\n    uint32_t new_data;\n    bool read_successful;\n\n    num_bytes_read = _read_r(file_pointer, (int)*(short *)(data_pointer + 0xe));\n    read_successful = num_bytes_read > -1;\n\n    if (read_successful) {\n        new_data = *(uint32_t *)(data_pointer + 0x54) + num_bytes_read;\n    }\n    else {\n        new_data = *(uint16_t *)(data_pointer + 0xc) & 0xffffefff;\n    }\n\n    if (read_successful) {\n        *(uint32_t *)(data_pointer + 0x54) = new_data;\n    }\n    else {\n        *(uint16_t *)(data_pointer + 0xc) = (uint16_t)new_data;\n    }\n}\n",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "read_data_from_file_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "find_pin_function_08004cce",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "function_id"
            },
            "code": "uint32_t find_pin_function_08004cce(PinName_conflict pin, PinMap_conflict *map) {\n  uint32_t function_id;\n  if (pin == NC) {\n    return 0xffffffff;\n  }\n  function_id = pinmap_find_function(pin, map);\n  return function_id;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "pwm_stop",
                "get_adc_channel",
                "get_pwm_channel",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006f34": {
            "renaming": {
                "FUN_08006f34": "get_process_id_08006f34"
            },
            "code": "__pid_t get_process_id_08006f34(void)\n{\n  return 1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08006f34"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08006fe4": {
            "renaming": {
                "FUN_08006fe4": "close_file_and_set_error_08006fe4",
                "param_1": "errcode",
                "param_2": "fd",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_08006fe4(int *errcode, int fd) {\n  undefined *errno_ptr;\n  int close_result;\n  errno_ptr = PTR_errno_08007000;\n  *(undefined4 *)PTR_errno_08007000 = 0;\n  close_result = _close(fd);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *errcode = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fe4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_08006fe4"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "configure_RCC_Clock_08003ad4",
                "RCC_ClkInitStruct_conflict": "RCC_ClkInitStruct",
                "FLatency": "Flash_Latency",
                "puVar1": "FLASH_ACR",
                "uVar2": "tick_start",
                "uVar3": "tick_now",
                "uVar4": "SYSCLK_Source"
            },
            "code": "HAL_StatusTypeDef configure_RCC_Clock_08003ad4(RCC_ClkInitTypeDef* RCC_ClkInitStruct,uint32_t Flash_Latency)\n{\n  uint32_t* FLASH_ACR = DAT_08003c34;\n  if (((*FLASH_ACR & 7) < Flash_Latency) && (*FLASH_ACR = *FLASH_ACR & 0xfffffff8 | Flash_Latency, Flash_Latency != (*FLASH_ACR & 7))) {\n    return HAL_ERROR;\n  }\n  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | RCC_ClkInitStruct->AHBCLKDivider;\n  }\n  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n    uint32_t SYSCLK_Source = RCC_ClkInitStruct->SYSCLKSource;\n    if (SYSCLK_Source == RCC_SYSCLKSOURCE_PLLCLK) {\n      if ((*DAT_08003c38 & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {\n        return HAL_ERROR;\n      }\n    }\n    else if ((SYSCLK_Source != RCC_SYSCLKSOURCE_HSI) && ((*DAT_08003c38 & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE)) {\n      return HAL_ERROR;\n    }\n    DAT_08003c38[1] = SYSCLK_Source | DAT_08003c38[1] & 0xfffffffc;\n    uint32_t tick_start = HAL_GetTick();\n    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {\n      while ((DAT_08003c38[1] & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {\n        uint32_t tick_now = HAL_GetTick();\n        if (5000 < tick_now - tick_start) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {\n      while ((DAT_08003c38[1] & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE) {\n        uint32_t tick_now = HAL_GetTick();\n        if (5000 < tick_now - tick_start) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      while ((DAT_08003c38[1] & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI) {\n        uint32_t tick_now = HAL_GetTick();\n        if (5000 < tick_now - tick_start) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  FLASH_ACR = DAT_08003c34;\n  if ((Flash_Latency < (*DAT_08003c34 & 7)) && (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | Flash_Latency, Flash_Latency != (*FLASH_ACR & 7))) {\n    return HAL_ERROR;\n  }\n  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | RCC_ClkInitStruct->APB1CLKDivider;\n  }\n  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | RCC_ClkInitStruct->APB2CLKDivider << 3;\n  }\n  uint32_t SYSCLK_Frequency = HAL_RCC_GetSysClockFreq();\n  *(uint32_t*)PTR_SystemCoreClock_08003c40 = SYSCLK_Frequency >> PTR_AHBPrescTable_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_RCC_Clock_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_channel_state_08004110",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "state",
                "CCER": "ccer_mask"
            },
            "code": "void set_channel_state_08004110(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n    const uint32_t ccer_mask = ~(4 << (channel & 0xff));\n    timer->CCER = (timer->CCER & ccer_mask) | (state << (channel & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "set_channel_state_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "is_valid_pin_08004ce2",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool is_valid_pin_08004ce2(PinName_conflict pin, PinMap_conflict *map) {\n    if (pin == NC) {\n        return false;\n    }\n    while(map->pin != NC) {\n        if (pin == map->pin) {\n            return true;\n        }\n        map++;\n    }\n    return false;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_valid_pin_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "transmit_data_08005568",
                "obj": "serial_obj",
                "callback": "callback_func",
                "bVar1": "current_index",
                "PTR_tx_callback_080055b0": "tx_callback_ptr",
                "PTR_tx_callback_obj_080055b4": "tx_callback_obj_ptr",
                "irq": "serial_obj->irq",
                "PTR_uart_handlers_080055b8": "uart_handler_ptr"
            },
            "code": "void transmit_data_08005568(serial_t *serial_obj, _func_int_serial_t_ptr *callback_func){\n  \n  if (serial_obj != NULL) {\n    uint8_t current_index = serial_obj->index;\n    _func_int_serial_t_ptr **PTR_tx_callback_080055b0 = (_func_int_serial_t_ptr **)(PTR_tx_callback_080055b0 + (uint)current_index * 4);\n    *(PTR_tx_callback_080055b0) = callback_func;\n    serial_t **PTR_tx_callback_obj_080055b4 = (serial_t **)(PTR_tx_callback_obj_080055b4 + (uint)current_index * 4);\n    *(PTR_tx_callback_obj_080055b4) = serial_obj;\n    HAL_NVIC_SetPriority(serial_obj->irq, 0, 2);\n    HAL_NVIC_EnableIRQ(serial_obj->irq);\n    UART_HandleTypeDef **PTR_uart_handlers_080055b8 = (UART_HandleTypeDef **)(PTR_uart_handlers_080055b8 + (uint)serial_obj->index * 4);\n    HAL_UART_Transmit_IT(*PTR_uart_handlers_080055b8, serial_obj->tx_buff + serial_obj->tx_tail, 1);\n  }\n}",
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "transmit_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "uart_send_08004478",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "start_time"
            },
            "code": "HAL_StatusTypeDef uart_send_08004478(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout) {\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  if (uart_handle->gState != HAL_UART_STATE_READY) {\n    status = HAL_BUSY;\n  }\n  else if (data == NULL || size == 0 || uart_handle->Lock == HAL_LOCKED) {\n    status = HAL_ERROR;\n  }\n  else {\n    uart_handle->Lock = HAL_LOCKED;\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n    start_time = HAL_GetTick();\n    uart_handle->TxXferSize = size;\n    uart_handle->TxXferCount = size;\n    while (uart_handle->TxXferCount != 0) {\n      uart_handle->TxXferCount--;\n      if (uart_handle->Init.WordLength == UART_WORDLENGTH_9B) {\n        status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n        if (status != HAL_OK) {\n          return HAL_TIMEOUT;\n        }\n        uart_handle->Instance->DR = *(uint16_t *)data & 0x1FF;\n        if (uart_handle->Init.Parity == UART_PARITY_NONE) {\n          data += 2;\n        }\n        else {\n          data++;\n        }\n      }\n      else {\n        status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n        if (status != HAL_OK) {\n          return HAL_TIMEOUT;\n        }\n        uart_handle->Instance->DR = *data;\n        data++;\n      }\n    }\n    status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, start_time, timeout);\n    if (status == HAL_OK) {\n      uart_handle->gState = HAL_UART_STATE_READY;\n      uart_handle->Lock = HAL_UNLOCKED;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "uart_send_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_evp_pkey_context_08005f5e",
                "ctx": "evp_pkey_ctx"
            },
            "code": "void initialize_evp_pkey_context_08005f5e(EVP_PKEY_CTX *evp_pkey_ctx) {\n  evp_pkey_ctx = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(evp_pkey_ctx);\n  return;\n}",
            "called": [
                "init",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_evp_pkey_context_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "__thiscall Print::FUN_08005cb6": "print_char",
                "this": "self",
                "c": "character",
                "sVar1": "result",
                "FUN_08005cb6": "print_char_08005cb6"
            },
            "code": "size_t __thiscall print_char_08005cb6(Print *self, char character) {\n  size_t result = (**self->_vptr_Print)(self, (int)character);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "printTo",
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_char_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_HCLK_frequency_divided_by_APB_prescaler_08003c70",
                "DAT_08003c88": "data_08003c88",
                "PTR_APBPrescTable_08003c8c": "APB_prescaler_table",
                "uVar1": "HCLK_frequency",
                "APB_prescaler_index": "APB_prescaler_index",
                "APB_prescaler": "APB_prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003c70(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = *(int *)(DAT_08003c88 + 4) << 0x12;\n  APB_prescaler_index = (uint)APB_prescaler_index >> 0x1d;\n  uint32_t APB_prescaler = PTR_APBPrescTable_08003c8c[APB_prescaler_index];\n  return HCLK_frequency >> APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "send_data_via_uart_080053d4",
                "*data": "data",
                "size": "size",
                "PinName_conflict": "PinName",
                "pin": "uart_pin",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HVar1": "uart_status",
                "uVar2": "start_time",
                "pvVar3": "uart_peripheral",
                "uVar4": "current_time",
                "uVar5": "uart_handler_index"
            },
            "code": "size_t send_data_via_uart_080053d4(uint8_t *data, uint32_t size)\n{\n  PinName uart_pin = PTR_digitalPin_0800547c[1];\n  void *uart_peripheral = pinmap_peripheral(uart_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_08005480);\n  if (uart_peripheral == (void *)0x0) {\n    return 0;\n  }\n  uint uart_handler_index = 0;\n  while ((uart_handler_index < 5 && ((*(int *)(PTR_uart_handlers_08005484 + uart_handler_index * 4) == 0 || (uart_peripheral = pinmap_peripheral(uart_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_08005480), **(void ***)(PTR_uart_handlers_08005484 + uart_handler_index * 4) != uart_peripheral))))) {\n    uart_handler_index = (uart_handler_index + 1) % 256;\n  }\n  if (4 < (byte)PTR_serial_debug_08005488[0x44] && (uart_debug_init(), 4 < (byte)PTR_serial_debug_08005488[0x44])) {\n    return 0;\n  }\n  do {\n    HAL_StatusTypeDef uart_status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_08005484 + uart_handler_index * 4), data, (uint16_t)size, 1000);\n    if (uart_status == HAL_OK) {\n      return size;\n    }\n  } while (HAL_GetTick() - HAL_GetTick() < 1000);\n  return 0;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_UART_Transmit",
                "pinmap_peripheral",
                "uart_debug_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "send_data_via_uart_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "i2c_listen_08002b84",
                "*hi2c": "*handle",
                "*pData": "*data",
                "Size": "size",
                "XferOptions": "xfer_options",
                "HVar1": "status",
                "pIVar2": "instance",
                "tmpreg": "cr1"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_listen_08002b84(I2C_HandleTypeDef *handle, uint8_t *data, uint16_t size, uint32_t xfer_options)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *instance;\n  uint32_t cr1;\n\n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      instance = handle->Instance;\n      cr1 = instance->CR1;\n      if ((cr1 & 1) == 0) {\n        instance->CR1 = cr1 | 1;\n      }\n      instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = xfer_options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "read_gpio_pin_state_08004c48",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "GVar1": "pin_state"
            },
            "code": "uint32_t read_gpio_pin_state_08004c48(GPIO_TypeDef *gpio_port, uint32_t gpio_pin) {\n    GPIO_PinState pin_state = HAL_GPIO_ReadPin(gpio_port, (uint16_t)gpio_pin);\n    return (uint32_t)pin_state;\n}",
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "digitalRead"
            ],
            "imported": false,
            "current_name": "read_gpio_pin_state_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_result_0800042c",
                "param_1": "num",
                "uVar1": "mask",
                "uVar2": "abs_num",
                "uVar3": "shift_count",
                "iVar4": "i",
                "uVar5": "remaining_bits",
                "uVar6": "sign_bit",
                "bVar7": "is_negative_shift_count",
                "bVar8": "is_zero_shift_count",
                "bVar9": "is_overflow_shift_count",
                "in_r12": "unused",
                "count_leading_zeroes": "count_leading_zeroes",
                "SCARRY4": "SCARRY4",
                "CONCAT44": "CONCAT44"
            },
            "code": "ulonglong calculate_result_0800042c(uint num)\n{\n    uint mask = 0x80000000;\n    ulonglong count = 0;\n    for(int i = 0; i < 32; i++) {\n        if((num & mask) == 0) {\n            count++;\n        } else {\n            break;\n        }\n        mask >>= 1;\n    }\n    return count;\n}\n\n\nulonglong calculate_result_0800042c(uint num)\n{\n    if(num == 0) {\n        return 0;\n    }\n    uint sign_bit = num & 0x80000000;\n    uint abs_num = (sign_bit < 0) ? -num : num;\n    uint shift_count = calculate_result_0800042c(abs_num) + 0x15;\n    uint remaining_bits = 0x20 - shift_count;\n    uint shifted_num = abs_num << (shift_count & 0xff);\n    uint high_bits = (remaining_bits > 0) ? (0U >> (remaining_bits & 0xff)) : 0;\n    uint low_bits = 0 << (shift_count & 0xff);\n    ulonglong result = (shifted_num | high_bits | low_bits);\n    if(shift_count < 0x433) {\n        return CONCAT44(result | sign_bit, 0);\n    }\n    uint num_remaining_bits = ~(0x432 - shift_count);\n    if(num_remaining_bits > 0x1e) {\n        return CONCAT44(num | sign_bit, shifted_num >> (num_remaining_bits - 0x1f & 0xff)) & 0x80000000ffffffff;\n    }\n    int shift_count_2 = num_remaining_bits - 0x13;\n    if(shift_count_2 == 0 || (shift_count_2 < 0) != SCARRY4(num_remaining_bits - 0x1f, 0xc)) {\n        num_remaining_bits++;\n        result = CONCAT44(sign_bit | shifted_num >> (num_remaining_bits & 0xff), low_bits | shifted_num << (0x20 - num_remaining_bits & 0xff));\n    } else {\n        result = CONCAT44(num | sign_bit, low_bits | shifted_num >> (0x20 - (0xcU - shift_count_2) & 0xff) | shifted_num << (0xcU - shift_count_2 & 0xff)) & 0x80000000ffffffff;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_result_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "run_program_08005f6c",
                "initVariant": "initialize_variant",
                "setup": "setup_program",
                "loop": "execute_program_loop",
                "serialEventRun": "run_serial_event"
            },
            "code": "void run_program_08005f6c(void)\n{\n  initialize_variant();\n  setup_program();\n  do {\n    do {\n      execute_program_loop();\n    } while (DAT_08005f88 == 0);\n    run_serial_event();\n  } while(true);\n}",
            "called": [
                "setup",
                "serialEventRun",
                "initVariant",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "run_program_08005f6c"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "handle_uart_interrupt_08005690",
                "PTR_uart_handlers_080056a4": "uart_handlers"
            },
            "code": "void handle_uart_interrupt_08005690(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_080056a4);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_08005690"
        },
        "FUN_08005cc0": {
            "renaming": {
                "__thiscall Print::FUN_08005cc0": "print_value",
                "this": "print_object",
                "sVar1": "string_length",
                "FUN_08005cc0": "print_value_08005cc0"
            },
            "code": "size_t __thiscall print_value_08005cc0(Print *print_object)\n{\n  size_t string_length;\n  string_length = (*print_object->_vptr_Print[1])(print_object,PTR_DAT_08005cd0,2);\n  return string_length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "print_value_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "read_file_contents_0800706c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "bytes_read"
            },
            "code": "void read_file_contents_0800706c(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int bytes_read;\n  error_ptr = PTR_errno_0800708c;\n  *(undefined4 *)PTR_errno_0800708c = 0;\n  bytes_read = _read(file_descriptor, buffer, buffer_size);\n  if ((bytes_read == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_contents_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "configure_gpio_pins_08002624",
                "GPIOx": "gpio",
                "GPIO_Init": "init",
                "uVar2": "pin_value",
                "uVar3": "pin_mask",
                "uVar4": "pin_masked",
                "uVar5": "i",
                "uVar6": "mode",
                "uVar7": "speed",
                "iVar8": "shift",
                "iVar10": "port_index",
                "tmpreg": "tmpreg",
                "DAT_080027f8": "DAT_080027f8",
                "DAT_080027fc": "DAT_080027fc",
                "DAT_08002800": "DAT_08002800",
                "DAT_08002804": "GPIO_MODE_ANALOG",
                "DAT_08002808": "GPIO_MODE_IT_RISING_FALLING",
                "GPIO_SPEED_FREQ_LOW": "GPIO_SPEED_FREQ_LOW",
                "GPIO_SPEED_FREQ_MEDIUM": "GPIO_SPEED_FREQ_MEDIUM",
                "GPIO_SPEED_FREQ_HIGH": "GPIO_SPEED_FREQ_HIGH",
                "GPIO_PULLUP": "GPIO_PULLUP",
                "GPIO_PULLDOWN": "GPIO_PULLDOWN",
                "GPIO_MODE_INPUT_PULLUP": "GPIO_MODE_INPUT_PULLUP",
                "GPIO_MODE_INPUT_PULLDOWN": "GPIO_MODE_INPUT_PULLDOWN",
                "GPIO_MODE_OUTPUT_PP": "GPIO_MODE_OUTPUT_PP",
                "GPIO_MODE_AF_PP": "GPIO_MODE_AF_PP",
                "GPIO_MODE_AF_OD": "GPIO_MODE_AF_OD",
                "GPIO_MODE_IT_RISING": "GPIO_MODE_IT_RISING",
                "GPIO_MODE_IT_FALLING": "GPIO_MODE_IT_FALLING",
                "GPIO_MODE_IT_RISING_FALLING": "GPIO_MODE_IT_RISING_FALLING",
                "GPIO_MODE_ANALOG": "GPIO_MODE_ANALOG"
            },
            "code": "void configure_gpio_pins_08002624(GPIO_TypeDef *gpio, GPIO_InitTypeDef *init) {\n  uint32_t speed = 0;\n  for (int i = 0; i < 16; i++) {\n    uint32_t pin_mask = 1 << i;\n    uint32_t pin_value = init->Pin & pin_mask;\n    if (pin_mask == pin_value) {\n      uint32_t mode = init->Mode;\n      if (mode == GPIO_MODE_AF_PP) {\n        speed = init->Speed + GPIO_SPEED_FREQ_HIGH;\n      }\n      else if (mode < DAT_08002804) {\n        if (mode == GPIO_MODE_OUTPUT_PP) {\n          speed = init->Speed + GPIO_SPEED_FREQ_LOW;\n        }\n        else if (mode == GPIO_MODE_INPUT_PULLUP) {\n          speed = GPIO_PULLUP;\n        }\n        else if (mode == GPIO_MODE_INPUT_PULLDOWN) {\n          speed = GPIO_PULLDOWN;\n        }\n      }\n      else {\n        if (mode == GPIO_MODE_AF_OD) {\n          speed = init->Speed + GPIO_SPEED_FREQ_HIGH;\n        }\n        else if (mode == DAT_08002808) {\n          gpio->BSRR = pin_mask;\n          speed = GPIO_SPEED_FREQ_MEDIUM;\n        }\n        else {\n          speed = GPIO_SPEED_FREQ_LOW;\n        }\n      }\n      uint32_t pin_index = i;\n      GPIO_TypeDef *gpio_reg = gpio;\n      if (i > 7) {\n        pin_index -= 8;\n        gpio_reg = (GPIO_TypeDef *)&gpio->CRH;\n      }\n      gpio_reg->CRL = gpio_reg->CRL & ~(0xf << (pin_index * 4)) | speed << (pin_index * 4);\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_08002624"
        },
        "FUN_0800609c": {
            "renaming": {
                "FUN_0800609c": "handle_gpio_exti_interrupt_0800609c",
                "PTR_": "",
                "DAT_": "",
                "0x10": "GPIO_PIN_4"
            },
            "code": "void handle_gpio_exti_interrupt_0800609c(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800609c",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_0800609c"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "reset_tim_channel_080040b0",
                "htim": "tim_handle",
                "Channel": "channel",
                "pTVar1": "tim_instance",
                "DAT_0800410c": "PTR_DAT_0800410c"
            },
            "code": "HAL_StatusTypeDef_conflict reset_tim_channel_080040b0(TIM_HandleTypeDef *tim_handle, uint32_t channel)\n{\n  TIM_TypeDef *tim_instance;\n  TIM_CCxChannelCmd(tim_handle->Instance, channel, 0);\n  tim_instance = tim_handle->Instance;\n  if (((tim_instance == DAT_0800410c) && ((tim_instance->CCER & 0x1111) == 0)) && ((tim_instance->CCER & 0x444) == 0))\n  {\n    tim_instance->BDTR &= 0xffff7fff;\n  }\n  if (((tim_instance->CCER & 0x1111) == 0) && ((tim_instance->CCER & 0x444) == 0)) {\n    tim_instance->CR1 &= 0xfffffffe;\n  }\n  tim_handle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "reset_tim_channel_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "print_number_08005d42",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "sVar2": "length2",
                "FUN_08005d42Number": "print_number_base",
                "PTR_FUN_08005d42_0": "_vptr_Print",
                "DAT_08005d5c": "example_location"
            },
            "code": "size_t __thiscall print_number_08005d42(Print *this, long number, int base) {\n  size_t length;\n  if (base == 0) {\n    length = (**this->PTR_print_number_08005d42_0)(this, number & 0xff);\n    return length;\n  }\n  if (base != 10) {\n    length = print_number_08005d42_base(this, number, (uint8_t)base);\n    return length;\n  }\n  if (number >= 0) {\n    length = print_number_08005d42_base(this, number, '\\n');\n    return length;\n  }\n  length = print_character(this, '-');\n  length += print_number_08005d42_base(this, -number, '\\n');\n  return length;\n}",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_08004b34(TIM_HandleTypeDef *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_hal_and_system_clock_08004c52"
            },
            "code": "void initialize_hal_and_system_clock_08004c52(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_hal_and_system_clock_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "initialize_display_080013a4",
                "this": "lcd",
                "cols": "num_cols",
                "lines": "num_rows",
                "dotsize": "dot_size",
                "_displayfunction": "display_function",
                "_numlines": "num_lines",
                "_rs_pin": "rs_pin",
                "_rw_pin": "rw_pin",
                "_enable_pin": "enable_pin",
                "_data_pins": "data_pins",
                "setRowOffsets": "set_row_offsets",
                "write4bits": "write_4_bits",
                "send": "send_data",
                "_displaycontrol": "display_control",
                "display": "display_data",
                "clear": "clear_display",
                "_displaymode": "display_mode"
            },
            "code": "void __thiscall initialize_display_080013a4(LiquidCrystal *lcd, uint8_t num_cols, uint8_t num_rows, uint8_t dot_size) {\n  int data_pin_index = 0;\n\n  if (num_rows > 1) {\n    lcd->_displayfunction |= 0x08;\n  }\n\n  lcd->_numlines = num_rows;\n  setRowOffsets(lcd, 0, 0x40, (uint)num_cols, num_cols + 0x40);\n\n  if ((dot_size != 0) && (num_rows == 1)) {\n    lcd->_displayfunction |= 0x04;\n  }\n\n  pinMode((uint)lcd->_rs_pin, OUTPUT);\n  if (lcd->_rw_pin != 0xff) {\n    pinMode((uint)lcd->_rw_pin, OUTPUT);\n  }\n  pinMode((uint)lcd->_enable_pin, OUTPUT);\n\n  while(data_pin_index < 4) {\n    if ((lcd->_displayfunction & 0x10) == 0) {\n      pinMode((uint)lcd->_data_pins[data_pin_index], OUTPUT);\n    }\n    else {\n      pinMode((uint)lcd->_data_pins[data_pin_index], OUTPUT);\n    }\n    data_pin_index++;\n  }\n\n  digitalWrite((uint)lcd->_rs_pin, LOW);\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  if (lcd->_rw_pin != 0xff) {\n    digitalWrite((uint)lcd->_rw_pin, LOW);\n  }\n\n  if ((lcd->_displayfunction & 0x10) == 0) {\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x02);\n  }\n  else {\n    send(lcd, lcd->_displayfunction | 0x20, 0);\n    send(lcd, lcd->_displayfunction | 0x20, 0);\n    send(lcd, lcd->_displayfunction | 0x20, 0);\n  }\n  send(lcd, lcd->_displayfunction | 0x20, 0);\n\n  lcd->_displaycontrol = 0x04;\n  display(lcd);\n  clear(lcd);\n  lcd->_displaymode = 0x02;\n  send(lcd, 0x06, 0);\n}\n",
            "called": [
                "clear",
                "write4bits",
                "send",
                "setRowOffsets",
                "display",
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "setup",
                "init"
            ],
            "imported": false,
            "current_name": "initialize_display_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "reset_stream_status_08006d14",
                "param_1": "error_code_ptr",
                "piVar1": "stream_ptr",
                "piVar2": "stream_status_ptr",
                "iVar3": "stream_status_ptr_address",
                "ppiVar4": "stream_list_ptr_ptr",
                "new_stream_ptr": "new_stream",
                "stream_list_ptr": "current_stream",
                "new_stream_list_ptr": "new_stream_list",
                "i": "counter"
            },
            "code": "int* reset_stream_status_08006d14(undefined4 *param_1)\n{\n    int *stream_ptr;\n    int *stream_status_ptr;\n    int stream_status_ptr_address;\n    int **stream_list_ptr_ptr;\n    int **stream_list_ptr;\n    int *new_stream_ptr;\n    int *new_stream_list_ptr;\n    int i;\n    stream_status_ptr_address = *(int *)PTR__global_impure_ptr_08006d88;\n    stream_list_ptr_ptr = (int **)(stream_status_ptr_address + 0x48);\n    while (true)\n    {\n        stream_status_ptr = ppiVar4[2];\n        stream_ptr = ppiVar4[1];\n        while (stream_ptr = (int *)((int)stream_ptr + -1), -1 < (int)stream_ptr)\n        {\n            if (*(short *)(stream_status_ptr + 3) == 0)\n            {\n                *(undefined2 *)((int)stream_status_ptr + 0xe) = 0xffff;\n                stream_status_ptr[0x19] = 0;\n                *(undefined2 *)(stream_status_ptr + 3) = 1;\n                *stream_status_ptr = 0;\n                stream_status_ptr[2] = 0;\n                stream_status_ptr[1] = 0;\n                stream_status_ptr[4] = 0;\n                stream_status_ptr[5] = 0;\n                stream_status_ptr[6] = 0;\n                memset(stream_status_ptr + 0x17,0,8);\n                stream_status_ptr[0xd] = 0;\n                stream_status_ptr[0xe] = 0;\n                stream_status_ptr[0x12] = 0;\n                stream_status_ptr[0x13] = 0;\n                return stream_status_ptr;\n            }\n            stream_status_ptr = stream_status_ptr + 0x1a;\n        }\n        stream_list_ptr = *stream_list_ptr_ptr;\n        if (stream_list_ptr == (int *)0x0)\n        {\n            new_stream_ptr = (int *)__sfmoreglue(param_1,4);\n            stream_list_ptr = new_stream_ptr;\n            if (new_stream_ptr == (int *)0x0)\n            {\n                *param_1 = 0xc;\n                return (int *)0x0;\n            }\n        }\n        stream_list_ptr_ptr = (int **)stream_list_ptr;\n    }\n}",
            "called": [
                "memset",
                "__sinit",
                "__sfmoreglue"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "reset_stream_status_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_value_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "SetSampleTime",
                "Compute",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 259445,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_080035fc",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08006d8c",
            "FUN_08004f2c",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08004f3c",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_0800598a",
            "FUN_08004e34",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_080016b4",
            "FUN_08004e48",
            "FUN_08005890",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08005650",
            "FUN_08006fb6",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_080055e0",
            "FUN_08006f10",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08004d30",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_08006074",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_0800091c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08000130",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08004618",
            "FUN_080060a6",
            "FUN_08001c30",
            "FUN_08005c72",
            "FUN_0800048c",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_0800049c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_0800594e",
            "FUN_080056a8",
            "FUN_08006ac0",
            "FUN_08007220",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08004f0c",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08006ad0",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_080060bc",
            "FUN_08004b9e",
            "FUN_08006940",
            "FUN_080058ea",
            "FUN_08002582",
            "FUN_08005976",
            "FUN_08004884",
            "FUN_08005fa0",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_08004f1c",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_080056c0",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08000450",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_0800492c",
            "FUN_08000cbc",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08007098",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08005bd4",
            "FUN_08001e48",
            "FUN_080059c8",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08006104",
            "FUN_08002540",
            "FUN_08005be2",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08005932",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_08005c64",
            "FUN_0800548c",
            "FUN_08000924",
            "FUN_08006c34",
            "FUN_080072a4",
            "FUN_08004848",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_080047d8",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08006fc0",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_0800715c",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08006088",
            "FUN_08006eb0",
            "FUN_08004e5c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_0800607e",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006092",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08006f34",
            "FUN_08006fe4",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005690",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_0800609c",
            "FUN_080040b0",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ],
        [
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_08001c88",
            "FUN_08006174",
            "FUN_08006f00",
            "FUN_080018f8",
            "FUN_08005da0",
            "FUN_08005f2c",
            "FUN_08005f40",
            "FUN_08005b54",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001b18",
            "FUN_08005d8a",
            "FUN_08001ab0",
            "FUN_08005730",
            "FUN_080060d4",
            "FUN_08005cd4",
            "FUN_08007090",
            "FUN_08005d82",
            "FUN_08001510",
            "FUN_08005d42"
        ],
        [
            "FUN_08000450"
        ],
        [
            "FUN_0800138e"
        ]
    ],
    "locked_functions": []
}