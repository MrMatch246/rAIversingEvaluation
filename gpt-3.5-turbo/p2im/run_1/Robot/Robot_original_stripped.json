{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = convert_to_double_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_sysclock_frequency_08003440",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pllmul_factor_table",
                "pllmul": "pllmul",
                "prediv": "prediv",
                "tmpreg": "tmpreg",
                "sysclockfreq": "sysclock_freq",
                "pllclk": "pll_clk"
            },
            "code": "uint32_t calculate_sysclock_frequency_08003440(void)\n{\n  uint32_t sysclock_freq;\n  uint8_t prediv_factor_table[2];\n  uint8_t pllmul_factor_table[16];\n  uint32_t pllmul;\n  uint32_t prediv;\n  uint32_t tmpreg;\n  uint32_t pll_clk;\n  \n  pllmul_factor_table[0] = *(undefined4 *)PTR__etext_080034f0;\n  pllmul_factor_table[1] = *(undefined4 *)(PTR__etext_080034f0 + 4);\n  pllmul_factor_table[2] = *(undefined4 *)(PTR__etext_080034f0 + 8);\n  pllmul_factor_table[3] = *(undefined4 *)(PTR__etext_080034f0 + 0xc);\n  prediv_factor_table = *(uint8_t (*) [2])PTR_DAT_080034f4;\n  uint32_t uVar = *(uint *)(DAT_080034f8 + 4);\n  if ((uVar & 0xc) == 4) {\n    sysclock_freq = DAT_080034fc;\n  }\n  else if ((uVar & 0xc) == 8) {\n    if ((uVar & 0x10000) == 0) {\n      pll_clk = DAT_08003500 * (uint)pllmul_factor_table[uVar >> 0x12 & 0xf];\n    }\n    else {\n      pll_clk = (DAT_080034fc * pllmul_factor_table[uVar >> 0x12 & 0xf]) /\n                 (uint)prediv_factor_table[*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1];\n    }\n    sysclock_freq = pll_clk;\n  }\n  else {\n    sysclock_freq = DAT_080034fc;\n  }\n  return sysclock_freq;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_sysclock_frequency_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "HAL_TIM_Base_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_current_tick_08004f2c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004f2c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_current_tick_08004f2c"
        },
        "FUN_080056bc": {
            "renaming": {
                "FUN_080056bc": "do_nothing_080056bc"
            },
            "code": "\nvoid do_nothing_080056bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056bc"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "set_uart_config_080046ec",
                "*huart": "*uart_handle",
                "uVar1": "mantissa",
                "uVar2": "temp_mantissa",
                "uVar3": "temp_fraction",
                "uVar4": "pclk_freq",
                "uVar5": "pclk_freq",
                "uVar6": "pclk_freq",
                "uVar7": "pclk_freq",
                "uVar8": "pclk_freq",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "uVar12": "baud_rate",
                "tmpreg": "temp_reg"
            },
            "code": "void set_uart_config_080046ec(UART_HandleTypeDef *uart_handle) {\n    uint32_t pclk_freq = 0;\n    uint32_t baud_rate = 0;\n    uint32_t mantissa = 0;\n    uint32_t fraction = 0;\n    uint32_t temp_reg = 0;\n\n    // Set stop bits\n    uart_handle->Instance->CR2 = (uart_handle->Init).StopBits | (uart_handle->Instance->CR2 & 0xffffcfff);\n\n    // Set word length, mode and parity\n    uart_handle->Instance->CR1 = (uart_handle->Instance->CR1 & 0xffffe9f3) |\n                                  (uart_handle->Init).Mode |\n                                  (uart_handle->Init).WordLength |\n                                  (uart_handle->Init).Parity;\n\n    // Set hardware flow control\n    uart_handle->Instance->CR3 = (uart_handle->Init).HwFlowCtl | (uart_handle->Instance->CR3 & 0xfffffcff);\n\n    // Calculate baud rate\n    pclk_freq = (uart_handle->Instance == DAT_08004914) ? HAL_RCC_GetPCLK2Freq() : HAL_RCC_GetPCLK1Freq();\n    baud_rate = (uart_handle->Init).BaudRate;\n    mantissa = (pclk_freq / (baud_rate << 4));\n    fraction = ((pclk_freq << 4) / (baud_rate << 4)) - (mantissa << 4);\n    temp_reg = (mantissa << 4) | fraction;\n    uart_handle->Instance->BRR = temp_reg;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_timer_08005500",
                "HVar1": "status",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_config",
                "PTR_htim2_08005590": "htim2",
                "_Error_Handler": "_Error_Handler",
                "PTR_s____src_main_c_08005594": "s_main_c"
            },
            "code": "void initialize_timer_08005500(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_config;\n  \n  *(uint32_t *)PTR_htim2_08005590 = 0x40000000;\n  *(uint32_t *)(PTR_htim2_08005590 + 4) = 36000;\n  *(uint32_t *)(PTR_htim2_08005590 + 8) = 0;\n  *(uint32_t *)(PTR_htim2_08005590 + 0xc) = 0x14;\n  *(uint32_t *)(PTR_htim2_08005590 + 0x10) = 0;\n  *(uint32_t *)(PTR_htim2_08005590 + 0x18) = 0;\n  status = HAL_TIM_Base_Init((TIM_HandleTypeDef *)PTR_htim2_08005590);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, 0x1d0);\n  }\n  clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource((TIM_HandleTypeDef *)PTR_htim2_08005590, &clock_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, 0x1d5);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization((TIM_HandleTypeDef *)PTR_htim2_08005590, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, 0x1dc);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_timer_08005500"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "delay_in_milliseconds_08003568",
                "mdelay": "milliseconds",
                "Delay": "cycles_to_wait",
                "bVar1": "is_delaying",
                "clock_speed": "system_core_clock_speed",
                "cycles_per_millisecond": "cycles_per_millisecond"
            },
            "code": "void delay_in_milliseconds_08003568(uint32_t milliseconds) {\n  uint32_t clock_speed = *(uint *)PTR_SystemCoreClock_0800359c;\n  uint32_t cycles_per_millisecond = (uint)((ulonglong)DAT_080035a0 * (ulonglong)clock_speed >> 0x29);\n  uint32_t cycles_to_wait = milliseconds * cycles_per_millisecond;\n  while(cycles_to_wait > 0) {\n    cycles_to_wait--;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_in_milliseconds_08003568"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_i2c_status_08002c2e",
                "hi2c": "i2c_handle",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002c2e(I2C_HandleTypeDef *i2c_handle,uint32_t timeout,uint32_t start_tick)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_tick;\n  while( true ) {\n    if ((i2c_handle->Instance->SR1 & 4) == 4) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handle);\n    if (status != HAL_OK) break;\n    if ((timeout != 0xffffffff) && ((timeout == 0 || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)))) {\n      i2c_handle->ErrorCode = i2c_handle->ErrorCode | 0x20;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002c2e"
        },
        "FUN_080008ec": {
            "renaming": {
                "FUN_080008ec": "compare_values_080008ec",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "xor_result",
                "bVar2": "is_first_zero",
                "bVar3": "are_second_and_fourth_equal_or_second_is_greater"
            },
            "code": "uint compare_values_080008ec(uint first_value, uint second_value, uint third_value, uint fourth_value) {\n  uint result;\n  bool is_first_zero = (first_value | second_value << 1) == 0;\n  bool is_third_zero = (third_value | fourth_value << 1) == 0;\n  if (!is_first_zero && !is_third_zero) {\n    bool are_second_and_fourth_equal = second_value == fourth_value;\n    bool are_first_and_third_equal = first_value == third_value;\n    if (!are_second_and_fourth_equal && !are_first_and_third_equal) {\n      uint xor_result = second_value ^ fourth_value;\n      bool are_second_and_fourth_equal_or_second_is_greater = xor_result == 0 || (int)xor_result > 0 && fourth_value <= second_value;\n      if (are_second_and_fourth_equal_or_second_is_greater) {\n        bool is_third_less_or_equal_to_first = third_value <= first_value;\n        result = is_third_less_or_equal_to_first ? 0 : 1;\n      } else {\n        result = ~((int)fourth_value >> 0x1f) | 1;\n      }\n    } else {\n      result = 0;\n    }\n  } else {\n    result = 0xffffffff;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ec",
            "calling": [],
            "imported": false,
            "current_name": "compare_values_080008ec"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "compare_double_values_08000978",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result",
                "param_4": "unused_parameter"
            },
            "code": "void compare_double_values_08000978(double value1, double value2, double* result) {\n  *result = (value1 == value2);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_08000978"
        },
        "FUN_0800101c": {
            "renaming": {
                "FUN_0800101c": "is_cfrcmple_result_not_CY_or_ZR_0800101c",
                "in_ZR": "is_ZR",
                "in_CY": "is_CY",
                "__aeabi_cfrcmple": "cfrcmple_result"
            },
            "code": "bool is_cfrcmple_result_not_CY_or_ZR_0800101c(void)\n{\n  bool cfrcmple_result;\n  bool is_CY;\n  bool is_ZR;\n\n  cfrcmple_result = __aeabi_cfrcmple();\n  is_CY = (bool)in_CY;\n  is_ZR = (bool)in_ZR;\n  return !is_CY || is_ZR;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800101c",
            "calling": [],
            "imported": false,
            "current_name": "is_cfrcmple_result_not_CY_or_ZR_0800101c"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "infinite_loop_080056d4"
            },
            "code": "void infinite_loop_080056d4() \n{\n while(true) {\n /* Do nothing */\n }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_080056d4"
        },
        "FUN_080078b4": {
            "renaming": {
                "FUN_080078b4": "register_exit_proc_080078b4",
                "__func": "func_name",
                "iVar1": "exit_proc_id"
            },
            "code": "int register_exit_proc_080078b4(__func *func_name) {\n  int exit_proc_id = __register_exitproc(0, func_name, 0);\n  return exit_proc_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078b4",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_080078b4"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "update_timer_callback_080017b4",
                "TIM_HandleTypeDef": "htim"
            },
            "code": "void update_timer_callback_080017b4(void)\n{\n  HAL_TIM_PeriodElapsedCallback(&htim);\n  return;\n}",
            "called": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_timer_callback_080017b4"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_string_08001030",
                "in_CY": "input_char"
            },
            "code": "bool is_end_of_string_08001030(void)\n{\n  char input_char;\n  __aeabi_cfrcmple();\n  return input_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "divide_or_modulo_by_zero_080011ec",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void divide_or_modulo_by_zero_080011ec(int dividend, int divisor, int remainder, int quotient) {\n    if ((quotient == 0) && (remainder == 0)) {\n        if (divisor != 0 || dividend != 0) {\n            divisor = -1;\n            dividend = -1;\n        }\n        __aeabi_idiv0(dividend, divisor);\n        return;\n    }\n    __udivmoddi4();\n}",
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_modulo_by_zero_080011ec"
        },
        "FUN_080056ce": {
            "renaming": {
                "FUN_080056ce": "infinite_loop_080056ce"
            },
            "code": "void infinite_loop_080056ce(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ce",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_080056ce"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "transmit_uart_data_08004f3c",
                "*str": "data",
                "len": "length",
                "PTR_huart1_08004f5c": "&huart1"
            },
            "code": "void transmit_uart_data_08004f3c(char *data, uint32_t length)\n{\n  HAL_UART_Transmit(PTR_huart1_08004f5c, (uint8_t *)data, (uint16_t)length, 50);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "transmit_uart_data_08004f3c"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "xor_result",
                "bVar2": "are_params1_2_zero",
                "bVar3": "is_xor_result_negative"
            },
            "code": "uint check_parameters_080008fc(uint param1, uint param2, uint param3, uint param4)\n{\n    bool is_param2_negative = ((int)(param2 << 1) >> 0x15 == -1);\n    bool is_param4_negative = ((int)(param4 << 1) >> 0x15 == -1);\n    if ((is_param2_negative || is_param4_negative) && ((is_param2_negative && ((param1 | param2 << 0xc) != 0)) || (is_param4_negative && ((param3 | param4 << 0xc) != 0))))\n    {\n        return 1;\n    }\n    bool are_params1_2_zero = (param1 | param2 << 1) == 0;\n    bool are_params3_4_zero = (param3 | param4 << 1) == 0;\n    if (!are_params1_2_zero && !are_params3_4_zero)\n    {\n        bool are_params2_4_equal = (param2 == param4);\n        bool are_params1_3_equal = (param1 == param3);\n        if (!are_params2_4_equal && !are_params1_3_equal)\n        {\n            uint xor_result = param2 ^ param4;\n            bool is_xor_result_negative = ((int)xor_result < 0);\n            if (is_xor_result_negative && (param4 <= param2))\n            {\n                return ~param4 | 1;\n            }\n            else if (are_params2_4_equal && (param3 <= param1))\n            {\n                return param4 | 1;\n            }\n        }\n    }\n    else\n    {\n        return are_params1_2_zero && are_params3_4_zero;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_parameters_080008fc"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "set_nvic_priority_grouping_08001714",
                "PriorityGroup": "priority_group"
            },
            "code": "void set_nvic_priority_grouping_08001714(uint32_t priority_group)\n{\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}",
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_nvic_priority_grouping_08001714"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "calculate_double_08000988",
                "param_1": "input_param"
            },
            "code": "undefined4 calculate_double_08000988(undefined4 input_param){\n  __nedf2();\n  return input_param;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt"
            ],
            "imported": false,
            "current_name": "calculate_double_08000988"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "divide_and_conquer_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "current_dividend",
                "iVar3": "i",
                "iVar4": "divisor_length",
                "iVar5": "dividend_length",
                "uVar6": "temp",
                "puVar7": "current_divisor",
                "puVar8": "dividend_array",
                "puVar9": "last_nonzero_dividend",
                "puVar11": "last_nonzero_divisor",
                "puVar12": "next_divisor",
                "uVar10": "remainder",
                "comparison_result": "comparison_result"
            },
            "code": "uint divide_and_conquer_080078c0(uint dividend, uint divisor) {\n  uint quotient;\n  uint *dividend_array;\n  uint *divisor_array;\n  int dividend_length;\n  int divisor_length;\n  int i;\n  uint temp;\n  uint remainder;\n  uint *current_dividend;\n  uint *current_divisor;\n  uint *last_nonzero_dividend;\n  uint *last_nonzero_divisor;\n  int comparison_result;\n  \n  divisor_length = *(int *)(divisor + 0x10);\n  dividend_length = *(int *)(dividend + 0x10);\n  if (dividend_length < divisor_length) {\n    return 0;\n  }\n  quotient = *(uint *)(dividend + 0x14) / (*(uint *)(divisor + 0x14) + 1);\n  current_dividend = (uint *)(dividend + 0x14);\n  current_divisor = (uint *)(divisor + 0x14);\n  last_nonzero_dividend = current_dividend + divisor_length - 1;\n  last_nonzero_divisor = current_divisor + divisor_length - 1;\n  if (quotient != 0) {\n    i = 0;\n    do {\n      temp = 0;\n      current_divisor++;\n      while (current_divisor <= last_nonzero_divisor) {\n        temp = quotient * (*current_divisor & 0xffff) + temp;\n        remainder = quotient * (*current_divisor >> 0x10) + (temp >> 0x10);\n        temp = (i - (temp & 0xffff)) + (*current_dividend & 0xffff);\n        i = ((*current_dividend >> 0x10) - (remainder & 0xffff)) + ((int)temp >> 0x10);\n        *current_dividend = temp & 0xffff | i * 0x10000;\n        i = i >> 0x10;\n        temp = remainder >> 0x10;\n        current_dividend++;\n        current_divisor++;\n      }\n      if (*(uint *)(dividend + 0x14 + (divisor_length - 1) * 4) == 0) {\n        if ((current_dividend < dividend_array + dividend_length - 2) && (*(uint *)(dividend + 0x14 + (dividend_length - 2) * 4) == 0)) {\n          last_nonzero_dividend = dividend_array + dividend_length - 3;\n          do {\n            dividend_length = dividend_length - 1;\n            if (last_nonzero_dividend <= dividend_array) break;\n            temp = *last_nonzero_dividend;\n            last_nonzero_dividend = last_nonzero_dividend - 1;\n          } while (temp == 0);\n        }\n        *(int *)(dividend + 0x10) = dividend_length;\n      }\n      comparison_result = __mcmp();\n      if (comparison_result >= 0) {\n        i = 0;\n        quotient = quotient + 1;\n        current_dividend = dividend_array;\n        do {\n          last_nonzero_divisor++;\n          temp = (i - (*last_nonzero_divisor & 0xffff)) + (*current_dividend & 0xffff);\n          i = ((*current_dividend >> 0x10) - (*last_nonzero_divisor >> 0x10)) + ((int)temp >> 0x10);\n          *current_dividend = temp & 0xffff | i * 0x10000;\n          i = i >> 0x10;\n          current_dividend++;\n          last_nonzero_divisor++;\n        } while (last_nonzero_divisor <= divisor_array + divisor_length - 1);\n        if (*(uint *)(dividend + 0x14 + (divisor_length - 1) * 4) == 0) {\n          if ((dividend_array < dividend_array + dividend_length - 1) && (*(uint *)(dividend + 0x14 + (dividend_length - 2) * 4) == 0)) {\n            last_nonzero_divisor = dividend_array + dividend_length - 2;\n            do {\n              dividend_length = dividend_length - 1;\n              if (last_nonzero_divisor <= dividend_array) break;\n              temp = *last_nonzero_divisor;\n              last_nonzero_divisor = last_nonzero_divisor - 1;\n            } while (temp == 0);\n          }\n          *(int *)(dividend + 0x10) = dividend_length;\n        }\n      }\n    } while (comparison_result >= 0);\n  }\n  return quotient;\n}",
            "called": [
                "__mcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "divide_and_conquer_080078c0"
        },
        "FUN_080056e0": {
            "renaming": {
                "FUN_080056e0": "do_nothing_080056e0"
            },
            "code": "\nvoid do_nothing_080056e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056e0"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,uint param_6,\n              int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    _Bfree(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = __aeabi_dcmpeq(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = __d2b(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30);\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = __floatunsidf(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = __subdf3(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = __aeabi_i2d(iVar13);\n  uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = __aeabi_d2iz();\n  iVar10 = __aeabi_dcmplt((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = __aeabi_i2d(local_74);\n    iVar10 = __aeabi_dcmpeq((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = __aeabi_dcmpgt(*(undefined4 *)(PTR___mprec_tens_08007c04 + local_74 * 8),\n                              *(undefined4 *)((int)(PTR___mprec_tens_08007c04 + local_74 * 8) + 4),\n                              param_3,local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)_Balloc(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)_Balloc(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = __muldf3(param_3,local_7c,\n                          *(undefined4 *)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8),\n                          *(undefined4 *)\n                           ((int)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR___mprec_bigtens_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]);\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR___mprec_tens_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = __divdf3(param_3,local_7c,*(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x20),\n                          *(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = __muldf3((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = __divdf3(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = __aeabi_dcmplt(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0))\n    {\n      if (local_68 == 0) {\n        uVar21 = __aeabi_i2d(iVar9);\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = __muldf3(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = __aeabi_i2d(iVar9 + 1);\n        uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                          (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = __aeabi_i2d(iVar9);\n    uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = __aeabi_d2iz(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -4);\n      uVar21 = __aeabi_i2d();\n      uVar21 = __subdf3(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = __muldf3(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = __aeabi_d2iz();\n            uVar23 = __aeabi_i2d();\n            uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                              (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = __aeabi_dadd((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = __subdf3(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = __aeabi_dcmpgt((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = __divdf3(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = __subdf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = __aeabi_d2iz();\n              uVar23 = __aeabi_i2d();\n              uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8)\n              ;\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = __subdf3(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = __aeabi_dcmpgt((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR___mprec_tens_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        __divdf3(param_3,uVar4,uVar8,uVar11);\n        bVar2 = __aeabi_d2iz();\n        uVar21 = __aeabi_i2d();\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = __subdf3(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            __divdf3((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = __aeabi_d2iz();\n            uVar22 = __aeabi_i2d();\n            uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = __subdf3((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = __aeabi_dcmpgt((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = __aeabi_dcmpeq((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 ||\n            ((bVar2 & 1) == 0)))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = __muldf3(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = __aeabi_dcmpge((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = __i2b(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = __pow5mult(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = __pow5mult(param_1,uVar12,iVar9);\n          uVar8 = __multiply(param_1,uVar12,uVar3);\n          _Bfree(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = __pow5mult(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = __i2b(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = __pow5mult(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = __hi0bits(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = __lshift(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = __lshift(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = __mcmp(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = __multadd(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = __multadd(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = __multadd(param_1,uVar5,5);\n        iVar9 = __mcmp(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = quorem(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = __lshift(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = _Balloc(param_1,*(undefined4 *)(local_80 + 4));\n        memcpy((void *)(iVar9 + 0xc),(void *)(local_80 + 0xc),(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = __lshift(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = quorem(uVar3,uVar5);\n      iVar13 = __mcmp(uVar3,local_80);\n      iVar10 = __mdiff(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = __mcmp(uVar3);\n        _Bfree(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      _Bfree(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = __lshift(param_1,uVar3,1);\n          iVar13 = __mcmp(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = __multadd(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = __lshift(param_1,uVar3,1);\n    iVar9 = __mcmp(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      _Bfree(param_1);\n    }\n  }\n  _Bfree(param_1,uVar12);\nLAB_08008294:\n  _Bfree(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__floatunsidf",
                "_Bfree",
                "__lshift",
                "__pow5mult",
                "__multadd",
                "__aeabi_dcmplt",
                "__divdf3",
                "__i2b",
                "__multiply",
                "__aeabi_i2d",
                "__mcmp",
                "_Balloc",
                "__subdf3",
                "__d2b",
                "__mdiff",
                "__hi0bits",
                "memcpy",
                "__aeabi_d2iz",
                "quorem",
                "__aeabi_dcmpge",
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "configure_gpio_pins_080017c4",
                "GPIOx": "gpio",
                "GPIO_Init": "gpio_init",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "pGVar6": "gpio_ptr",
                "iVar7": "var7",
                "tmpreg": "tmp_reg",
                "configregister": "config_reg_ptr",
                "registeroffset": "reg_offset",
                "temp": "temp_var",
                "iocurrent": "io_current",
                "ioposition": "io_position",
                "config": "config",
                "position": "position"
            },
            "code": "void configure_gpio_pins_080017c4(GPIO_TypeDef *gpio, GPIO_InitTypeDef *gpio_init)\n{\n    uint32_t config, position;\n    for (position = 0; position <= 15; position++) {\n        uint32_t pin = 1 << position;\n        if (pin & gpio_init->Pin) {\n            uint32_t mode = gpio_init->Mode;\n            if (mode == GPIO_MODE_AF_OD || mode == GPIO_MODE_AF_PP) {\n                config = gpio_init->Speed + GPIO_CNF_MODE_AF;\n            } else {\n                switch (mode & GPIO_MODE_INPUT_OUTPUT_MASK) {\n                    case GPIO_MODE_INPUT:\n                        config = GPIO_CNF_MODE_INPUT;\n                        break;\n                    case GPIO_MODE_OUTPUT_PP:\n                        config = gpio_init->Speed + GPIO_CNF_MODE_OUTPUT_PP;\n                        break;\n                    case GPIO_MODE_OUTPUT_OD:\n                        config = gpio_init->Speed + GPIO_CNF_MODE_OUTPUT_OD;\n                        break;\n                    default:\n                        config = GPIO_CNF_MODE_ANALOG;\n                        break;\n                }\n                if (gpio_init->Pull == GPIO_PULLUP) {\n                    config |= GPIO_CNF_PULL_UP_DOWN;\n                    gpio->BSRR = pin;\n                } else if (gpio_init->Pull == GPIO_PULLDOWN) {\n                    config |= GPIO_CNF_PULL_UP_DOWN;\n                    gpio->BRR = pin;\n                }\n            }\n            uint32_t offset = (position < 8) ? position * 4 : (position - 8) * 4;\n            uint32_t *cr = (position < 8) ? &gpio->CRL : &gpio->CRH;\n            *cr = (*cr & ~(0xf << offset)) | (config << offset);\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "HAL_TIM_MspPostInit",
                "MX_GPIO_Init"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_080017c4"
        },
        "FUN_080056da": {
            "renaming": {
                "FUN_080056da": "infinite_loop_080056da"
            },
            "code": "void infinite_loop_080056da(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056da",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_080056da"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "calculate_number_of_bytes_to_read_08001044",
                "param_1": "num_bytes_to_read",
                "uVar1": "num_bits_to_shift",
                "result": "result",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint calculate_number_of_bytes_to_read_08001044(uint num_bytes_to_read)\n{\n  uint result;\n  \n  if (((num_bytes_to_read & 0x80000000) != 0) || (num_bytes_to_read << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = (num_bytes_to_read << 1) >> 0x18;\n  uint num_bits_to_shift = 0x9e - shift_amount;\n  if (-1 < (int)num_bits_to_shift) {\n    result = (num_bytes_to_read << 8 | 0x80000000) >> (num_bits_to_shift & 0xff);\n  }\n  else if ((num_bits_to_shift == 0xffffff9f) && ((num_bytes_to_read & 0x7fffff) != 0)) {\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_number_of_bytes_to_read_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "expand_bit_array_08009444",
                "param_1": "num_bits",
                "param_2": "bit_array",
                "param_3": "num_bits_to_expand",
                "iVar1": "temp1",
                "iVar2": "word_offset",
                "iVar3": "num_words",
                "uVar4": "first_word",
                "iVar5": "bit_array_ptr",
                "iVar6": "temp2",
                "puVar7": "new_bit_array",
                "puVar8": "existing_bits",
                "puVar9": "current",
                "puVar10": "next",
                "puVar11": "end",
                "iVar12": "num_new_bits",
                "iVar13": "num_existing_bits",
                "uVar14": "carry"
            },
            "code": "void expand_bit_array_08009444(int num_bits, uint32_t *bit_array, uint32_t num_bits_to_expand) {\n  int num_existing_bits = bit_array[4];\n  int num_new_bits = (int)num_bits_to_expand >> 5;\n  num_new_bits += num_existing_bits + 1;\n  int num_words = bit_array[1];\n  int word_offset = bit_array[2];\n  if ((int)bit_array[2] < num_new_bits) {\n    do {\n      word_offset *= 2;\n      num_words++;\n    } while (num_new_bits != word_offset && num_new_bits + word_offset < 0 == SBORROW4(num_new_bits,word_offset));\n  }\n  int new_array = _Balloc(num_bits,num_words);\n  uint32_t *new_bit_array = (uint32_t *)(new_array + 0x14);\n  if (0 < num_new_bits) {\n    uint32_t *end = new_bit_array + num_new_bits;\n    uint32_t *current = new_bit_array;\n    do {\n      *current = 0;\n      current++;\n    } while (current != end);\n  }\n  num_existing_bits = bit_array[4];\n  uint32_t *existing_bits = bit_array + 5;\n  num_bits_to_expand = num_bits_to_expand & 0x1f;\n  if (num_bits_to_expand == 0) {\n    new_bit_array--;\n    uint32_t *end = existing_bits + num_existing_bits;\n    uint32_t *current = new_bit_array;\n    do {\n      current++;\n      *current = *existing_bits;\n      existing_bits++;\n    } while (existing_bits < end);\n  }\n  else {\n    uint32_t carry = 0;\n    uint32_t *end = existing_bits + num_existing_bits;\n    uint32_t *current = new_bit_array;\n    do {\n      *current = *existing_bits << num_bits_to_expand | carry;\n      uint32_t *next = existing_bits + 1;\n      carry = *existing_bits >> (0x20 - num_bits_to_expand & 0xff);\n      current++;\n      existing_bits = next;\n    } while (existing_bits < end);\n    current++;\n    *current = carry;\n    if (carry != 0) {\n      num_words = num_new_bits + num_existing_bits + 2;\n    }\n  }\n  int bit_array_ptr = *(int *)(num_bits + 0x4c);\n  int num_bit_arrays = bit_array[1];\n  uint32_t *bit_arrays = *(uint32_t **)(bit_array_ptr + num_bit_arrays * 4);\n  uint32_t first_word = *bit_arrays;\n  *(int *)(new_array + 0x10) = num_new_bits - 1;\n  *bit_array = first_word;\n  *(uint32_t **)(bit_array_ptr + num_bit_arrays * 4) = bit_array;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "expand_bit_array_08009444"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "send_data_08004436",
                "*huart": "*uart_handle",
                "*pData": "*data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "",
                "HVar3": "status",
                "iVar4": "error_code",
                "local_58": "data_ptr",
                "tmp": "",
                "tickstart": "",
                "HAL_UART_STATE_READY": "2",
                "HAL_ERROR": "0x01",
                "HAL_BUSY": "0x04",
                "HAL_LOCKED": "1",
                "HAL_UNLOCKED": "0",
                "HAL_UART_STATE_BUSY_TX": "0x21",
                "UART_WORDLENGTH_9B": "0x1000",
                "UART_PARITY_NONE": "0",
                "UART_TIMEOUT_INFINITY": "0xffffffff",
                "UART_FLAG_TXE": "0x80",
                "USART_CR1_TE": "0x8",
                "USART_CR3_HDSEL": "0x8000",
                "UART_FLAG_TC": "0x40",
                "HAL_UART_STATE_BUSY_RX": "0x22"
            },
            "code": "HAL_StatusTypeDef send_data_08004436(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout) {\n  uint32_t start_time;\n  HAL_StatusTypeDef status;\n  int error_code;\n  uint16_t *data_ptr;\n  if (uart_handle->gState != HAL_UART_STATE_READY) {\n    status = HAL_BUSY;\n  }\n  else if (data == NULL || size == 0) {\n    status = HAL_ERROR;\n  }\n  else if (uart_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    uart_handle->Lock = HAL_LOCKED;\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n    start_time = HAL_GetTick();\n    uart_handle->TxXferSize = size;\n    uart_handle->TxXferCount = size;\n    data_ptr = (uint16_t *)data;\n    while (uart_handle->TxXferCount != 0) {\n      uart_handle->TxXferCount--;\n      if ((uart_handle->Init).WordLength == UART_WORDLENGTH_9B) {\n        do {\n          if ((uart_handle->Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE) {\n            error_code = 0;\n            goto LAB_0800454c;\n          }\n        } while (timeout == UART_TIMEOUT_INFINITY || (timeout != 0 && (HAL_GetTick() - start_time <= timeout)));\n        uart_handle->Instance->CR1 &= ~USART_CR1_TE;\n        uart_handle->Instance->CR3 &= ~USART_CR3_HDSEL;\n        uart_handle->gState = HAL_UART_STATE_READY;\n        uart_handle->RxState = HAL_UART_STATE_READY;\n        uart_handle->Lock = HAL_UNLOCKED;\n        error_code = 3;\nLAB_0800454c:\n        if (error_code != 0) {\n          return HAL_TIMEOUT;\n        }\n        uart_handle->Instance->DR = *data_ptr & 0x1FF;\n        if ((uart_handle->Init).Parity == UART_PARITY_NONE) {\n          data_ptr++;\n        }\n        else {\n          data_ptr = (uint16_t *)((int)data_ptr + 1);\n        }\n      }\n      else {\n        do {\n          if ((uart_handle->Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE) {\n            error_code = 0;\n            goto LAB_08004614;\n          }\n        } while (timeout == UART_TIMEOUT_INFINITY || (timeout != 0 && (HAL_GetTick() - start_time <= timeout)));\n        uart_handle->Instance->CR1 &= ~USART_CR1_TE;\n        uart_handle->Instance->CR3 &= ~USART_CR3_HDSEL;\n        uart_handle->gState = HAL_UART_STATE_READY;\n        uart_handle->RxState = HAL_UART_STATE_READY;\n        uart_handle->Lock = HAL_UNLOCKED;\n        error_code = 3;\nLAB_08004614:\n        if (error_code != 0) {\n          return HAL_TIMEOUT;\n        }\n        uart_handle->Instance->DR = (uint)*(byte *)data_ptr;\n        data_ptr = (uint16_t *)((int)data_ptr + 1);\n      }\n    }\n    do {\n      if ((uart_handle->Instance->SR & UART_FLAG_TC) == UART_FLAG_TC) {\n        error_code = 0;\n        goto LAB_080046c6;\n      }\n    } while (timeout == UART_TIMEOUT_INFINITY || (timeout != 0 && (HAL_GetTick() - start_time <= timeout)));\n    uart_handle->Instance->CR1 &= ~USART_CR1_TE;\n    uart_handle->Instance->CR3 &= ~USART_CR3_HDSEL;\n    uart_handle->gState = HAL_UART_STATE_READY;\n    uart_handle->RxState = HAL_UART_STATE_READY;\n    uart_handle->Lock = HAL_UNLOCKED;\n    error_code = 3;\nLAB_080046c6:\n    if (error_code == 0) {\n      uart_handle->gState = HAL_UART_STATE_READY;\n      uart_handle->Lock = HAL_UNLOCKED;\n      status = HAL_OK;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "uart_print"
            ],
            "imported": false,
            "current_name": "send_data_08004436"
        },
        "FUN_08009e50": {
            "renaming": {
                "FUN_08009e50": "set_param_value_08009e50",
                "param_1": "ptr_param_value",
                "param_2": "ptr_buffer",
                "param_3": "param_value_size",
                "*param_1": "*ptr_param_value",
                "*param_2": "*ptr_buffer"
            },
            "code": "undefined* set_param_value_08009e50(undefined4* ptr_param_value, undefined* ptr_buffer, uint param_value_size) {\n  if (ptr_buffer != NULL) {\n    if (param_value_size < 256) {\n      *ptr_buffer = (char)param_value_size;\n      ptr_buffer = (undefined*)1;\n    }\n    else {\n      ptr_buffer = (undefined*)-1;\n      *ptr_param_value = 0x8a;\n    }\n  }\n  return ptr_buffer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e50",
            "calling": [],
            "imported": false,
            "current_name": "set_param_value_08009e50"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "read_i2c_memory_08004ee8",
                "addr": "device_address",
                "reg": "register_address",
                "*data": "data_buffer",
                "len": "data_length"
            },
            "code": "void read_i2c_memory_08004ee8(uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length) {\n    HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_08004f28, (uint16_t)device_address, (uint16_t)register_address, 1, data_buffer, data_length, *(uint32_t *)PTR_I2C_TIMEOUT_08004f24);\n    return;\n}",
            "called": [
                "HAL_I2C_Mem_Read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "read_i2c_memory_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1_start",
                "param_2": "array2_start",
                "iVar1": "array1_length",
                "puVar2": "array2_ptr",
                "iVar3": "array2_offset",
                "puVar4": "array1_ptr"
            },
            "code": "int compare_arrays_080094f8(int array1_start, int array2_start)\n{\n  int array2_offset = *(int *)(array2_start + 0x10);\n  int array1_length = *(int *)(array1_start + 0x10) - array2_offset;\n  if (array1_length == 0) {\n    uint *array2_ptr = (uint *)(array2_start + 0x14 + array2_offset * 4);\n    uint *array1_ptr = (uint *)(array1_start + 0x14) + array2_offset;\n    do {\n      array1_ptr = array1_ptr + -1;\n      array2_ptr = array2_ptr + -1;\n      if (*array1_ptr != *array2_ptr) {\n        if (*array2_ptr <= *array1_ptr) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1_start + 0x14) < array1_ptr);\n  }\n  return array1_length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "_dtoa_r",
                "quorem"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "compare_double_equals_zero_08000998",
                "in_ZR": "input_char"
            },
            "code": "bool compare_double_equals_zero_08000998(void)\n{\n  char input_char;\n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "compare_double_equals_zero_08000998"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "compare_floats_08000fc8",
                "param_1": "float1",
                "param_2": "float2"
            },
            "code": "void compare_floats_08000fc8(float float1, float float2) {\n  __aeabi_cfcmpeq(float2, float1);\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compare_floats_08000fc8"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "set_timer_output_compare_08003908",
                "htim": "timer_handle",
                "sConfig": "output_compare_config",
                "Channel": "channel",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef set_timer_output_compare_08003908(TIM_HandleTypeDef *timer_handle, TIM_OC_InitTypeDef *output_compare_config, uint32_t channel)\n{\n  HAL_StatusTypeDef status;\n  if (timer_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->Lock = HAL_LOCKED;\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR1 |= 0x8;\n      timer_handle->Instance->CCMR1 &= 0xfffffffb;\n      timer_handle->Instance->CCMR1 = output_compare_config->OCFastMode | timer_handle->Instance->CCMR1;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR1 |= 0x800;\n      timer_handle->Instance->CCMR1 &= 0xfffffbff;\n      timer_handle->Instance->CCMR1 = (output_compare_config->OCFastMode << 8) | timer_handle->Instance->CCMR1;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR2 |= 0x8;\n      timer_handle->Instance->CCMR2 &= 0xfffffffb;\n      timer_handle->Instance->CCMR2 = output_compare_config->OCFastMode | timer_handle->Instance->CCMR2;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR2 |= 0x800;\n      timer_handle->Instance->CCMR2 &= 0xfffffbff;\n      timer_handle->Instance->CCMR2 = (output_compare_config->OCFastMode << 8) | timer_handle->Instance->CCMR2;\n    }\n    timer_handle->State = HAL_TIM_STATE_READY;\n    timer_handle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC1_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clear_string_buffer_08004f60",
                "PTR_strbuf_08004f74": "string_buffer",
                "0x40": "BUFFER_SIZE"
            },
            "code": "void clear_string_buffer_08004f60(void)\n{\n    memset(PTR_strbuf_08004f74, 0, BUFFER_SIZE);\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "clear_string_buffer_08004f60"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "do_nothing_080056f8"
            },
            "code": "\nvoid do_nothing_080056f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056f8"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "int is_valid_input_08001170(uint input_1, int input_2, uint input_3, int input_4) {\n    int is_invalid_input = (((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) && (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)));\n    return !is_invalid_input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_080056ec": {
            "renaming": {
                "FUN_080056ec": "do_nothing_080056ec"
            },
            "code": "\nvoid do_nothing_080056ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ec",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056ec"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "i2c_status_check_08002ad8",
                "*hi2c": "*i2c_handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "uVar1": "flag_tick",
                "cVar2": "c_flag_set",
                "uVar3": "flag_masked",
                "bVar4": "flag_set"
            },
            "code": "HAL_StatusTypeDef i2c_status_check_08002ad8(I2C_HandleTypeDef *i2c_handle, uint32_t flag, uint32_t timeout, uint32_t tickstart)\n{\n  uint32_t flag_masked;\n  bool flag_set;\n  char c_flag_set;\n  do {\n    if ((flag >> 0x10 & 0xff) == 1) {\n      flag_masked = flag & ~i2c_handle->Instance->SR1 & 0xffff;\n      flag_set = flag_masked != 0;\n      if (flag_set) {\n        flag_masked = 1;\n      }\n      c_flag_set = (char)flag_masked;\n      if (!flag_set) {\n        c_flag_set = '\\0';\n      }\n    }\n    else {\n      flag_masked = flag & ~i2c_handle->Instance->SR2 & 0xffff;\n      flag_set = flag_masked != 0;\n      if (flag_set) {\n        flag_masked = 1;\n      }\n      c_flag_set = (char)flag_masked;\n      if (!flag_set) {\n        c_flag_set = '\\0';\n      }\n    }\n    if (c_flag_set == '\\0') {\n      return HAL_OK;\n    }\n    if ((i2c_handle->Instance->SR1 & 0x400) == 0x400) {\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n      i2c_handle->Instance->SR1 = 0xfffffbff;\n      i2c_handle->ErrorCode = 4;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_ERROR;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - tickstart <= timeout))));\n  i2c_handle->PreviousState = 0;\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "i2c_status_check_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "concatenate_params_08000fd0",
                "param_1": "param_1",
                "param_2": "param_2",
                "CONCAT44": "concatenate_64_bits",
                "__cmpsf2": "compare_single_precision_floats"
            },
            "code": "uint64_t concatenate_params_08000fd0(uint32_t param_1, uint32_t param_2)\n{\n  __compare_single_precision_floats();\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "imported": false,
            "current_name": "concatenate_params_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "set_timer_output_compare_mode_08003d60",
                "TIMx": "timer",
                "OC_Config": "output_compare_config",
                "uVar1": "output_compare_mode",
                "uVar2": "output_compare_enable_mask",
                "tmpccmrx": "ccmr1_register",
                "tmpcr2": "cr2_register",
                "tmpccer": "cc_enable_mask",
                "DAT_08003e34": "PTR_08003e34"
            },
            "code": "void set_timer_output_compare_mode_08003d60(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_compare_config) {\n  uint32_t cc_enable_mask = 0xfffffffe;\n  uint32_t cr2_register = timer->CR2;\n  uint32_t output_compare_enable_mask = output_compare_config->OCPolarity | (timer->CCER & 0xfffffffd);\n  uint32_t ccmr1_register = output_compare_config->OCMode | (timer->CCMR1 & 0xffffff8c);\n  uint32_t ccr1_register = output_compare_config->Pulse;\n  if (timer == DAT_08003e34) {\n    output_compare_enable_mask = (output_compare_config->OCNPolarity | (output_compare_enable_mask & 0xfffffff7)) & 0xfffffffb;\n    cr2_register = output_compare_config->OCNIdleState | output_compare_config->OCIdleState | (cr2_register & 0xfffffcff);\n  }\n  timer->CCER = cc_enable_mask;\n  timer->CR2 = cr2_register;\n  timer->CCMR1 = ccmr1_register;\n  timer->CCR1 = ccr1_register;\n  timer->CCER = output_compare_enable_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_mode_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "get_pkey_context_08009e68",
                "ctx": "pkey_ctx"
            },
            "code": "int get_pkey_context_08009e68(EVP_PKEY_CTX *pkey_ctx) {\n    return (int)pkey_ctx;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux",
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "get_pkey_context_08009e68"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_irq_priority_08001618",
                "IRQn": "irq",
                "priority": "priority",
                "DAT_08001664": "PTR_DAT_08001664",
                "DAT_08001668": "PTR_DAT_08001668"
            },
            "code": "void set_irq_priority_08001618(IRQn_Type irq, uint32_t priority) {\n  if (irq < WWDG_IRQn) {\n    uint32_t offset = ((uint32_t)irq & 0xF) + DAT_08001664 + 0x14;\n    char* register_ptr = (char*)offset;\n    *register_ptr = (char)((priority & 0xFF) << 4);\n  }\n  else {\n    uint32_t offset = (uint32_t)irq + DAT_08001668 + 0x300;\n    char* register_ptr = (char*)offset;\n    *register_ptr = (char)((priority & 0xFF) << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "HAL_NVIC_SetPriority",
                "SysTick_Config"
            ],
            "imported": false,
            "current_name": "set_irq_priority_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "num",
                "iVar1": "leading_zeros_count"
            },
            "code": "int count_leading_zeros_080091a4(uint32_t num) {\n    int leading_zeros_count = 0;\n    if ((num & 0xffff0000) == 0) {\n        num <<= 16;\n        leading_zeros_count = 16;\n    }\n    if ((num & 0xff000000) == 0) {\n        num <<= 8;\n        leading_zeros_count += 8;\n    }\n    if ((num & 0xf0000000) == 0) {\n        num <<= 4;\n        leading_zeros_count += 4;\n    }\n    if ((num & 0xc0000000) == 0) {\n        num <<= 2;\n        leading_zeros_count += 2;\n    }\n    if ((int)num >= 0) {\n        if ((int)(num << 1) < 0) {\n            return leading_zeros_count + 1;\n        }\n        leading_zeros_count = 32;\n    }\n    return leading_zeros_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "_dtoa_r",
                "__d2b"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "calculate_pid_pwm_08004f78",
                "htim": "htim",
                "len": "str_len",
                "uVar1": "error",
                "iVar2": "comparison",
                "uVar3": "unused",
                "uVar4": "max_pwm_value",
                "uVar5": "unused",
                "pid_pwm": "pid_pwm",
                "out_pwm": "out_pwm",
                "mpu6050_update": "update_mpu6050",
                "mpu6050_calc_pitch": "calculate_pitch_mpu6050",
                "flush_strbuf": "flush_string_buffer",
                "PTR_mpu6050_080051e0": "mpu6050",
                "PTR_pitch_080051e4": "pitch_degrees",
                "PTR_strbuf_080051ec": "string_buffer",
                "PTR_s_Pitch___f_080051e8": "pitch_string_format",
                "PTR_setpoint_080051f0": "setpoint",
                "PTR_error_080051f4": "error",
                "PTR_Kp_080051f8": "Kp",
                "PTR_Ki_08005200": "Ki",
                "PTR_I_08005204": "i_term",
                "PTR_maxPwm_08005208": "max_pwm_value",
                "PTR_minPwm_0800520c": "min_pwm_value",
                "PTR_Kd_08005210": "Kd",
                "PTR_lastError_08005214": "last_error",
                "PTR_D_08005218": "d_term",
                "HAL_GPIO_WritePin": "write_pin"
            },
            "code": "void calculate_pid_pwm_08004f78(TIM_HandleTypeDef *htim)\n{\n  size_t str_len;\n  float PTR_pitch_080051e4, PTR_error_080051f4, p_term, PTR_I_08005204, PTR_D_08005218, max_pwm, min_pwm, pid_pwm;\n  uint8_t out_pwm;\n  PTR_mpu6050_080051e0_update((Mpu6050 *)PTR_mpu6050_080051e0);\n  PTR_mpu6050_080051e0_calc_pitch((Mpu6050 *)PTR_mpu6050_080051e0, &PTR_pitch_080051e4);\n  flush_PTR_strbuf_080051ec();\n  sprintf(PTR_strbuf_080051ec, \"Pitch: %f\\n\", PTR_pitch_080051e4);\n  str_len = strlen(PTR_strbuf_080051ec);\n  uart_print(PTR_strbuf_080051ec, str_len);\n  PTR_error_080051f4 = PTR_setpoint_080051f0 - PTR_pitch_080051e4;\n  p_term = PTR_Kp_080051f8 * PTR_error_080051f4;\n  PTR_I_08005204 = PTR_Ki_08005200 * PTR_error_080051f4 + PTR_I_08005204;\n  max_pwm = (float)PTR_maxPwm_08005208;\n  min_pwm = (float)PTR_minPwm_0800520c;\n  if (PTR_I_08005204 > max_pwm)\n  {\n    PTR_I_08005204 = max_pwm;\n  }\n  else if (PTR_I_08005204 < min_pwm)\n  {\n    PTR_I_08005204 = min_pwm;\n  }\n  PTR_D_08005218 = PTR_Kd_08005210 * (PTR_error_080051f4 - PTR_lastError_08005214);\n  pid_pwm = p_term + PTR_I_08005204 + PTR_D_08005218;\n  if (pid_pwm > max_pwm)\n  {\n    out_pwm = PTR_maxPwm_08005208;\n  }\n  else if (pid_pwm < min_pwm)\n  {\n    out_pwm = PTR_minPwm_0800520c;\n  }\n  else\n  {\n    out_pwm = (uint8_t)pid_pwm;\n  }\n  PTR_lastError_08005214 = PTR_error_080051f4;\n  HAL_GPIO_WritePin(DAT_GPIO_Port, DAT_Pin, PTR_error_080051f4 > 0);\n  HAL_GPIO_WritePin(DAT_GPIO_Port, DAT2_Pin, PTR_error_080051f4 <= 0);\n  HAL_GPIO_WritePin(DAT_GPIO_Port, DAT3_Pin, PTR_error_080051f4 > 0);\n  HAL_GPIO_WritePin(DAT_GPIO_Port, DAT4_Pin, PTR_error_080051f4 <= 0);\n  *(uint *)(*(int *)htim->Instance + 0x34) = (uint)out_pwm;\n  *(uint *)(*(int *)htim->Instance + 0x40) = (uint)out_pwm;\n}\n",
            "called": [
                "sprintf",
                "__aeabi_fcmplt",
                "uart_print",
                "strlen",
                "HAL_GPIO_WritePin",
                "mpu6050_update",
                "__fixunssfsi",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__aeabi_fmul",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "flush_strbuf",
                "mpu6050_calc_pitch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "HAL_TIM_IRQHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "calculate_pid_pwm_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_uw_tick_080015a0",
                "PTR_uwTick_080015b0": "tick_ptr"
            },
            "code": "uint32_t get_uw_tick_080015a0(void)\n{\n  uint32_t* PTR_uwTick_080015b0 = (uint32_t*)PTR_uwTick_080015b0;\n  return *PTR_uwTick_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "HAL_I2C_Mem_Read",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "_get_ms_tick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uw_tick_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nHAL_StatusTypeDef FUNC_08002d98(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  HAL_StatusTypeDef HVar3;\n  bool bVar4;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  FlagStatus pwrclkchanged;\n  \n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_08003000 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003004 = 0;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[9] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        uVar2 = HAL_GetTick();\n        if (100 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if ((RCC_OscInitStruct->PLL).PLLState == 0) {\nLAB_0800324a:\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if ((RCC_OscInitStruct->PLL).PLLState == 2) {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003254[1] = RCC_OscInitStruct->HSEPredivValue | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] =\n             (RCC_OscInitStruct->PLL).PLLMUL | (RCC_OscInitStruct->PLL).PLLSource |\n             DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (2 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "set_irq_priority_0800172a",
                "IRQn": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "priority_group",
                "prioritygroup": "priority_group",
                "NVIC_GetPriorityGrouping": "NVIC_GetPriorityGrouping",
                "NVIC_EncodePriority": "NVIC_EncodePriority",
                "NVIC_SetPriority": "NVIC_SetPriority"
            },
            "code": "void set_irq_priority_0800172a(IRQn_Type irq, uint32_t preempt_priority, uint32_t sub_priority)\n{\n  uint32_t priority_group = NVIC_GetPriorityGrouping();\n  uint32_t priority = NVIC_EncodePriority(priority_group, preempt_priority, sub_priority);\n  NVIC_SetPriority(irq, priority);\n  return;\n}",
            "called": [
                "NVIC_GetPriorityGrouping",
                "NVIC_SetPriority",
                "NVIC_EncodePriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_irq_priority_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "is_less_than_or_equal_to_zero_080009d4",
                "in_CY": "is_CY_zero",
                "in_ZR": "value"
            },
            "code": "bool is_less_than_or_equal_to_zero_080009d4(float value)\n{\n  bool is_CY_zero = __aeabi_cdrcmple();\n  return is_CY_zero || value <= 0.0f;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "is_less_than_or_equal_to_zero_080009d4"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "allocate_memory_08009744",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_pointer",
                "pcVar2": "memory_pointer"
            },
            "code": "void allocate_memory_08009744(int *error_code, int size) {\n  undefined *errno_pointer;\n  caddr_t memory_pointer;\n\n  errno_pointer = PTR_errno_08009764;\n  *(undefined4 *)PTR_errno_08009764 = 0;\n  memory_pointer = _sbrk(size);\n  if ((memory_pointer == (caddr_t)0xffffffff) && (*(int *)errno_pointer != 0)) {\n    *error_code = *(int *)errno_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "initialize_timer_08003640",
                "htim": "timer",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef initialize_timer_08003640(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_08009980",
                "param_1": "num_bytes",
                "param_2": "size_of_element",
                "param_3": "num_elements",
                "__s": "allocated_memory",
                "__n": "total_num_bytes",
                "puVar1": "header_end"
            },
            "code": "undefined4* allocate_memory_08009980(size_t num_bytes, int size_of_element, int num_elements) {\n  undefined4* allocated_memory;\n  size_t total_num_bytes = num_bytes * num_elements;\n  allocated_memory = (undefined4*) _malloc_r(total_num_bytes, size_of_element);\n  if (allocated_memory == (undefined4*) 0x0) {\n    return (undefined4*) 0x0;\n  }\n  size_t header_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (header_size < 0x25) {\n    if (header_size > 0x13) {\n      allocated_memory[0] = 0;\n      allocated_memory[1] = 0;\n      if (header_size > 0x1b) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (header_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          allocated_memory += 6;\n        }\n        else {\n          allocated_memory += 4;\n        }\n        allocated_memory[0] = 0;\n        allocated_memory[1] = 0;\n        allocated_memory[2] = 0;\n        return allocated_memory - header_size;\n      }\n      allocated_memory += 2;\n    }\n    allocated_memory[0] = 0;\n    allocated_memory[1] = 0;\n    allocated_memory[2] = 0;\n    return allocated_memory - header_size;\n  }\n  memset(allocated_memory, 0, header_size);\n  return allocated_memory - header_size;\n}",
            "called": [
                "_malloc_r",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "_Balloc"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  undefined *puVar2;\n  int **ppiVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  byte *pbVar9;\n  char cVar10;\n  byte bVar11;\n  int *piVar12;\n  int **ppiVar13;\n  undefined uVar14;\n  ushort uVar15;\n  int *__s;\n  int **ppiVar16;\n  byte **ppbVar17;\n  int *piVar18;\n  int *piVar19;\n  int **ppiVar20;\n  char *pcVar21;\n  uint uVar22;\n  byte *pbVar23;\n  int *piVar24;\n  uint uVar25;\n  uint uVar26;\n  int *piVar27;\n  int *piVar28;\n  byte *pbVar29;\n  bool bVar30;\n  longlong lVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_fffffe78;\n  int *in_stack_fffffe7c;\n  int *local_168;\n  byte *local_164;\n  int *local_15c;\n  int *local_158;\n  int **local_154;\n  int *local_150;\n  int *local_148;\n  int *local_144;\n  uint local_140;\n  int *local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  int *local_12c;\n  int *local_128;\n  undefined *local_11c;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0 [2];\n  undefined4 local_e8;\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int local_d4;\n  byte *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  ppiVar3 = (int **)_localeconv_r();\n  __s = *ppiVar3;\n  piVar4 = (int *)strlen((char *)__s);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar5 = _malloc_r(param_1,0x40);\n    *param_2 = iVar5;\n    param_2[4] = iVar5;\n    if (iVar5 == 0) {\n      *param_1 = 0xc;\n      return (byte *)0xffffffff;\n    }\n    param_2[5] = 0x40;\n  }\n  local_128 = (int *)0x0;\n  local_138 = (int *)0x0;\n  local_12c = (int *)0x0;\n  local_d4 = 0;\n  local_d0 = (byte *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  ppiVar3 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar3;\n  local_154 = param_4;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = local_d4 + 1;\n        local_d0 = (byte *)((int)local_d0 + (int)piVar27);\n        *ppiVar3 = param_3;\n        *(int **)((int)ppiVar3 + 4) = piVar27;\n        if (local_d4 < 8) {\n          ppiVar3 = (int **)((int)ppiVar3 + 8);\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800604a;\n          ppiVar3 = local_cc;\n        }\n        local_164 = (byte *)((int)local_164 + (int)piVar27);\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    uVar26 = 0;\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    local_158 = piVar27;\n    local_168 = piVar27;\n    switch(uVar25) {\n    case 0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (uVar25 == 0) goto LAB_08006216;\n      piVar18 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int *)0x1;\n      param_3 = (int *)&local_8c;\n      local_144 = piVar18;\n      local_8c = (char)uVar25;\n      goto LAB_08006298;\n    case 0x23:\n      uVar26 = uVar26 | 1;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x27:\n      iVar5 = _localeconv_r(param_1);\n      local_110 = *(int **)(iVar5 + 4);\n      local_104 = (int *)strlen((char *)local_110);\n      iVar5 = _localeconv_r(param_1);\n      local_108 = *(byte **)(iVar5 + 8);\n      if (local_104 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      uVar25 = (uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        uVar26 = uVar26 | 0x400;\n      }\n      goto LAB_08005f4a;\n    case 0x2a:\n      uVar25 = (uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case 0x2b:\n      local_f5 = 0x2b;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x2d:\n      uVar25 = (uint)*(byte *)piVar28;\nLAB_08006602:\n      uVar26 = uVar26 | 4;\n      goto LAB_08005f4a;\n    case 0x2e:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x2a) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (uVar25 - 0x30 < 10) {\n        piVar27 = (int *)((uVar25 - 0x30) + (int)piVar27 * 10);\n        uVar25 = (uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case 0x30:\n      uVar26 = uVar26 | 0x80;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_08005f58_caseD_31;\n    case 0x41:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x61:\n    case 0x65:\n    case 0x66:\n    case 0x67:\n      local_154 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      local_128 = *local_154;\n      local_12c = local_154[1];\n      local_154 = local_154 + 2;\n      iVar5 = __unorddf2(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724);\n      if ((iVar5 == 0) &&\n         (iVar5 = __aeabi_dcmple(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724),\n         iVar5 == 0)) {\n        iVar5 = __aeabi_dcmplt(local_128,local_12c,0,0);\n        param_3 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar5 == 0) {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (uVar25 < 0x48) {\n          param_3 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        local_158 = (int *)0x3;\n        local_13c = (int *)0x0;\n        local_140 = uVar26 & 0xffffff7f;\n        local_144 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      local_148 = (int *)__unorddf2(local_128,local_12c,local_128,local_12c);\n      if (local_148 != (int *)0x0) {\n        param_3 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar18 = local_12c;\n      piVar24 = piVar27;\n      if (uVar25 == 0x61) {\n        uVar14 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar14,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = uVar26 | 0x102;\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          uVar26 = uVar26 | 2;\n        }\n        else {\n          param_3 = (int *)_malloc_r(param_1,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar15 = *(ushort *)(param_2 + 3) | 0x40;\n            *(ushort *)(param_2 + 3) = uVar15;\n            goto LAB_0800604e;\n          }\n          local_140 = uVar26 | 0x102;\n          uVar26 = uVar26 | 2;\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar24;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          piVar18 = local_12c + -0x20000000;\n          piVar24 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n        }\n        if (uVar25 == 0x61) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 != 0) {\n            local_f0[0] = (int *)0x1;\n          }\n          local_158 = (int *)PTR_s_0123456789abcdef_08007888;\n          local_138 = param_3;\n          piVar27 = piVar24;\n          goto LAB_080072ba;\n        }\n        if (uVar25 == 0x41) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 == 0) {\n            local_158 = (int *)PTR_s_0123456789ABCDEF_0800739c;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          else {\n            local_f0[0] = (int *)0x1;\n            local_158 = (int *)PTR_s_0123456789ABCDEF_08007894;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (uVar25 == 0x41) {\n          uVar14 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = uVar26 | 0x100;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar24 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if ((uVar25 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar24 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        local_144 = local_148;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)(uVar25 & 0xffffffdf);\n      in_stack_fffffe7c = piVar24;\n      local_150 = piVar24;\n      if (uVar25 == 0x66) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        piVar27 = (int *)((int)param_3 + (int)piVar24);\nLAB_0800764c:\n        if ((*(byte *)param_3 == 0x30) &&\n           (iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0), iVar5 == 0)) {\n          local_f0[0] = (int *)(1 - (int)local_150);\n        }\n        piVar27 = (int *)((int)piVar27 + (int)local_f0[0]);\n      }\n      else if (uVar25 == 0x46) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\nLAB_08007760:\n        piVar27 = (int *)((int)param_3 + (int)local_150);\n        if (uVar25 == 0x46) goto LAB_0800764c;\n      }\n      else {\n        if (local_168 == (int *)0x45) {\n          local_150 = (int *)((int)piVar24 + 1);\n        }\n        in_stack_fffffe78 = 2;\n        in_stack_fffffe7c = local_150;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        local_138 = local_e0;\n        if (uVar25 == 0x67) {\n          if ((uVar26 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (uVar25 == 0x47) {\n          if ((uVar26 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar27 = (int *)((int)local_150 + (int)param_3);\n      }\n      iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0);\n      local_138 = piVar27;\n      if (iVar5 == 0) {\n        for (; local_138 = local_e0, local_e0 < piVar27; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)local_138 - (int)param_3);\n      goto LAB_08006cb0;\n    case 0x43:\n    case 99:\n      piVar18 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_144 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int *)0x1;\n      local_8c = SUB41(piVar27,0);\n      param_3 = (int *)&local_8c;\n      goto LAB_08006298;\n    case 0x44:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bcc:\n        piVar18 = *local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(int)*(short *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bcc;\n        piVar18 = (int *)(int)*(char *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      goto LAB_08006102;\n    case 0x4c:\n      uVar26 = uVar26 | 8;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x4f:\n      uVar26 = uVar26 | 0x10;\n    case 0x6f:\n      if ((uVar26 & 0x20) == 0) {\n        ppiVar16 = local_154 + 1;\n        if ((uVar26 & 0x10) == 0) {\n          if ((uVar26 & 0x40) == 0) {\n            if ((uVar26 & 0x200) == 0) goto LAB_08006be2;\n            piVar18 = (int *)(uint)*(byte *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n          else {\n            piVar18 = (int *)(uint)*(ushort *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar18 = *local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\n        ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar18 = *ppiVar16;\n        piVar24 = ppiVar16[1];\n        local_154 = ppiVar16 + 2;\n      }\n      iVar5 = 0;\n      uVar26 = uVar26 & 0xfffffbff;\n      break;\n    case 0x53:\n    case 0x73:\n      local_f5 = 0;\n      local_144 = *local_154;\n      local_154 = local_154 + 1;\n      local_140 = uVar26;\n      if (local_144 == (int *)0x0) {\n        piVar18 = local_144;\n        param_3 = (int *)PTR_s__null__08007084;\n        local_148 = local_144;\n        local_13c = local_144;\n        local_134 = local_144;\n        local_130 = local_144;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int *)0x6;\n          local_168 = local_158;\n        }\n        goto LAB_08006538;\n      }\n      param_3 = local_144;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int *)strlen((char *)local_144);\n      }\n      else {\n        local_148 = (int *)memchr(local_144,0,(size_t)piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar18 = (int *)(uint)local_f5;\n          local_144 = local_148;\n          local_13c = local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int *)((int)local_148 - (int)local_144);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar18 = (int *)(uint)local_f5;\n      local_144 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      goto LAB_08006538;\n    case 0x55:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bf2:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(uint)*(ushort *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bf2;\n        piVar18 = (int *)(uint)*(byte *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      break;\n    case 0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if ((uVar26 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar16 = local_154 + 1;\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) == 0) {\n          if ((uVar26 & 0x200) == 0) goto LAB_08006bbc;\n          piVar18 = (int *)(uint)*(byte *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n        else {\n          piVar18 = (int *)(uint)*(ushort *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        local_154 = ppiVar16;\n      }\n      goto LAB_080061be;\n    case 100:\n    case 0x69:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_08006102:\n      if ((int)piVar24 < 0) {\n        bVar30 = piVar18 != (int *)0x0;\n        piVar18 = (int *)-(int)piVar18;\n        piVar24 = (int *)(-(int)piVar24 - (uint)bVar30);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar5 = 1;\n        iVar6 = 1;\n        local_140 = uVar26 & 0xffffff7f;\n        if (((uint)piVar18 | (uint)piVar24) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      local_140 = uVar26;\n      if (piVar24 != (int *)0x0 || (int *)0x9 < piVar18) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case 0x68:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x68) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        uVar26 = uVar26 | 0x200;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        uVar26 = uVar26 | 0x40;\n      }\n      goto LAB_08005f4a;\n    case 0x6a:\n    case 0x71:\n      uVar26 = uVar26 | 0x20;\n    case 0x74:\n    case 0x7a:\nswitchD_08005f58_caseD_74:\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case 0x6e:\n      ppiVar16 = local_154 + 1;\n      ppbVar17 = (byte **)*local_154;\n      local_154 = ppiVar16;\n      if ((uVar26 & 0x20) != 0) {\n        *ppbVar17 = local_164;\n        ppbVar17[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) != 0) {\n          *(short *)ppbVar17 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if ((uVar26 & 0x200) != 0) {\n          *(char *)ppbVar17 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar17 = local_164;\n      goto LAB_0800620e;\n    case 0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar18 = *local_154;\n      uVar26 = uVar26 | 2;\n      piVar24 = (int *)0x0;\n      iVar5 = 2;\n      uVar25 = 0x78;\n      local_154 = local_154 + 1;\n      break;\n    case 0x75:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      iVar5 = 1;\n      local_154 = ppiVar16 + 2;\n      break;\n    case 0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if ((uVar26 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_080061be:\n      if (((uVar26 & 1) != 0) && (((uint)piVar18 | (uint)piVar24) != 0)) {\n        uVar26 = uVar26 | 2;\n        local_f4 = CONCAT11((char)uVar25,0x30);\n      }\n      iVar5 = 2;\n      uVar26 = uVar26 & 0xfffffbff;\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      local_140 = uVar26;\n      if (iVar5 != 1) goto LAB_08006136;\nLAB_08006980:\n      local_140 = uVar26;\n      if (piVar24 == (int *)0x0 && piVar18 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar31 = CONCAT44(piVar24,piVar18);\n      local_138 = (int *)0x0;\n      param_3 = (int *)(&bStack_2a + 2);\n      do {\n        iVar5 = (int)((ulonglong)lVar31 >> 0x20);\n        uVar26 = (uint)lVar31;\n        cVar10 = '\\n';\n        __aeabi_uldivmod(uVar26,iVar5,10,0);\n        *(byte *)((int)param_3 + -1) = cVar10 + 0x30;\n        local_138 = (int *)((int)local_138 + 1);\n        param_3 = (int *)((int)param_3 + -1);\n        if (((((local_140 & 0x400) != 0) && (local_138 == (int *)(uint)*local_108)) &&\n            (local_138 != (int *)0xff)) && (iVar5 != 0 || 9 < uVar26)) {\n          param_3 = (int *)((int)param_3 - (int)local_104);\n          strncpy((char *)param_3,(char *)local_110,(size_t)local_104);\n          local_138 = (int *)(uint)local_108[1];\n          if (local_138 != (int *)0x0) {\n            local_108 = local_108 + 1;\n            local_138 = (int *)0x0;\n          }\n        }\n        lVar31 = __aeabi_uldivmod(uVar26,iVar5,10,0);\n      } while (lVar31 != 0);\n      local_158 = (int *)((int)(&bStack_2a + 2) - (int)param_3);\n    }\n    else {\n      local_140 = uVar26 & 0xffffff7f;\n      iVar6 = iVar5;\n      if (((uint)piVar18 | (uint)piVar24) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar5 == 0) {\n            local_158 = (int *)(uVar26 & 1);\n            if (local_158 == (int *)0x0) {\n              param_3 = (int *)(&bStack_2a + 2);\n            }\n            else {\n              param_3 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n            }\n          }\n          else {\n            param_3 = (int *)(&bStack_2a + 2);\n          }\n        }\n        else {\n          if (iVar5 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar18 + '0';\n          param_3 = (int *)(&bStack_2a + 1);\n          local_158 = (int *)0x1;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar5 = iVar6;\n        uVar26 = local_140;\n        if (iVar6 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar5 == 2) {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = (int *)((uint)piVar18 >> 4 | (int)piVar24 << 0x1c);\n            piVar24 = (int *)((uint)piVar24 >> 4);\n            param_3 = (int *)((int)param_3 + -1);\n            *(undefined *)param_3 = local_11c[(uint)piVar18 & 0xf];\n            piVar18 = piVar19;\n          } while (((uint)piVar19 | (uint)piVar24) != 0);\n        }\n        else {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = param_3;\n            piVar12 = (int *)((uint)piVar18 >> 3 | (int)piVar24 << 0x1d);\n            piVar24 = (int *)((uint)piVar24 >> 3);\n            iVar5 = ((uint)piVar18 & 7) + 0x30;\n            *(byte *)((int)piVar19 + -1) = (byte)iVar5;\n            param_3 = (int *)((int)piVar19 + -1);\n            piVar18 = piVar12;\n          } while (((uint)piVar12 | (uint)piVar24) != 0);\n          if (((local_140 & 1) != 0) && (iVar5 != 0x30)) {\n            param_3 = (int *)((int)piVar19 + -2);\n            local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n            *(byte *)((int)piVar19 + -2) = 0x30;\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar18 = (int *)(uint)local_f5;\n    local_144 = piVar27;\n    local_168 = local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  if (local_d0 == (byte *)0x0) {\nLAB_0800604a:\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\n  else {\n    __ssprint_r(param_1,param_2,&local_d8);\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\nLAB_0800604e:\n  if ((uVar15 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (uVar25 == 0x6c) {\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    uVar26 = uVar26 | 0x20;\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    uVar26 = uVar26 | 0x10;\n  }\n  goto LAB_08005f4a;\n  while (iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,0), iVar6 == 0) {\nLAB_080072ba:\n    piVar18 = piVar27;\n    piVar19 = local_138;\n    piVar27 = (int *)((int)piVar18 + -1);\n    uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_080073a0);\n    iVar5 = __aeabi_d2iz();\n    uVar33 = __aeabi_i2d();\n    uVar32 = __subdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),(int)uVar33,\n                      (int)((ulonglong)uVar33 >> 0x20));\n    uVar8 = (undefined4)((ulonglong)uVar32 >> 0x20);\n    uVar7 = (undefined4)uVar32;\n    local_138 = (int *)((int)piVar19 + 1);\n    *(byte *)piVar19 = *(byte *)((int)local_158 + iVar5);\n    if (piVar27 == (int *)0xffffffff) break;\n  }\n  iVar6 = __aeabi_dcmpgt(uVar7,uVar8,0,DAT_080073a4);\n  if ((iVar6 == 0) &&\n     ((iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,DAT_080073a4), iVar6 == 0 || (-1 < iVar5 << 0x1f)))) {\n    if (-1 < (int)piVar27) {\n      piVar18 = (int *)((int)piVar18 + (int)local_138);\n      piVar27 = local_138;\n      do {\n        local_138 = (int *)((int)piVar27 + 1);\n        *(byte *)piVar27 = 0x30;\n        piVar27 = local_138;\n      } while (piVar18 != local_138);\n    }\n  }\n  else {\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar11 = *(byte *)piVar19;\n    piVar27 = local_138;\n    local_e0 = piVar19;\n    while (bVar1 == bVar11) {\n      *(byte *)((int)piVar27 + -1) = 0x30;\n      bVar11 = *(byte *)((int)local_e0 + -1);\n      piVar27 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar11 == 0x39) {\n      bVar11 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar11 = bVar11 + 1;\n    }\n    *(byte *)((int)piVar27 + -1) = bVar11;\n  }\n  local_138 = (int *)((int)local_138 - (int)param_3);\nLAB_08006cb0:\n  local_168 = (int *)(uVar25 & 0xffffffdf);\n  local_134 = local_f0[0];\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0[0] + 3) < 0 == SCARRY4((int)local_f0[0],3)) &&\n       ((int)local_f0[0] <= (int)piVar24)) {\n      if ((int)local_f0[0] < (int)local_138) {\n        local_158 = (int *)((int)local_138 + (int)piVar4);\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int *)((int)local_158 + (1 - (int)local_f0[0]));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        uVar25 = 0x67;\n      }\n      else {\n        if ((int)(uVar26 << 0x1f) < 0) {\n          local_158 = (int *)((int)local_f0[0] + (int)piVar4);\n        }\n        else {\n          local_158 = local_f0[0];\n        }\n        if (-1 < (int)(uVar26 << 0x15)) {\n          uVar25 = 0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074fc;\n        }\n        uVar25 = 0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    uVar25 = uVar25 - 2;\n    local_168 = (int *)(uVar25 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8._0_1_ = (char)uVar25;\n    if (local_168 == (int *)0x41) {\n      local_e8._0_1_ = (char)local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0[0] + -1);\n    if ((int)piVar27 < 0) {\n      local_e8._1_1_ = 0x2d;\n      local_f0[0] = (int *)(1 - (int)local_f0[0]);\n    }\n    else {\n      local_e8._1_1_ = 0x2b;\n      local_f0[0] = piVar27;\n    }\n    if ((int)local_f0[0] < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e8._2_1_ = 0x30;\n        pcVar21 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar21 = (char)local_f0[0] + '0';\n      pcVar21 = pcVar21 + 1;\n    }\n    else {\n      pbVar29 = abStack_dc + 3;\n      pbVar23 = pbVar29;\n      do {\n        pbVar9 = pbVar23;\n        piVar18 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0[0]) >> 0x23);\n        pbVar9[-1] = (char)local_f0[0] + (char)piVar18 * -10 + 0x30;\n        pbVar23 = pbVar9 + -1;\n        local_f0[0] = piVar18;\n      } while ((int *)0x9 < piVar18);\n      uVar22 = (uint)(piVar18 + 0xc) & 0xff;\n      pbVar9[-2] = (byte)uVar22;\n      if (pbVar9 + -2 < pbVar29) {\n        pbVar9 = pbVar23;\n        pcVar21 = (char *)((int)&local_e8 + 2);\n        while( true ) {\n          *pcVar21 = (char)uVar22;\n          if (pbVar29 == pbVar9) break;\n          uVar22 = (uint)*pbVar9;\n          pbVar9 = pbVar9 + 1;\n          pcVar21 = pcVar21 + 1;\n        }\n        pcVar21 = (char *)(((int)&stack0xfffffe78 * 2 - (int)pbVar23) + 0x152);\n      }\n      else {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar21 + -(int)&local_e8);\n    local_158 = (int *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)(uVar26 << 0x1f) < 0)) {\n      local_158 = (int *)((int)local_158 + (int)piVar4);\n    }\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    local_140 = uVar26 & 0xfffffbff | 0x100;\n    local_f0[0] = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0[0] < 1) {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int *)0x1;\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)piVar4 + 1) + (int)piVar24);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n    }\n    else {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_158 = local_f0[0];\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)local_f0[0] + (int)piVar4) + (int)piVar24);\n      }\nLAB_080074f8:\n      if (-1 < (int)(uVar26 << 0x15)) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n      uVar26 = (uint)*local_108;\n      while (uVar26 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar26) goto LAB_08007524;\n          uVar22 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar26);\n          if (uVar22 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar26 = uVar22;\n          if (uVar22 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int *)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int *)((int)local_104 * (int)((int)local_130 + (int)local_13c) + (int)local_158);\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar18 = (int *)(uint)local_f5;\nLAB_08006538:\n    uVar26 = local_140;\n    if (piVar18 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar18 = (int *)0x2d;\n    local_144 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n    uVar26 = local_140;\n  }\nLAB_08006298:\n  if ((uVar26 & 2) != 0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  if (((uVar26 & 0x84) == 0) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        piVar18 = piVar27;\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)piVar27);\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      piVar18 = (int *)(uint)local_f5;\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      piVar18 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar18 != (int *)0x0) {\n    local_d0 = local_d0 + 1;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f5;\n    ppiVar3[1] = (int *)0x1;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  if ((uVar26 & 2) != 0) {\n    local_d0 = local_d0 + 2;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f4;\n    ppiVar3[1] = (int *)0x2;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_08006a54;\n  if (((uVar26 & 0x84) == 0x80) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        while( true ) {\n          piVar18 = piVar27;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          piVar27 = piVar18 + -4;\n          if ((int)(piVar18 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)(piVar18 + -4));\nLAB_08006882:\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)puVar2;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_0800643c;\n  local_144 = (int *)((int)local_144 - (int)local_158);\n  if (0 < (int)local_144) {\n    piVar27 = (int *)PTR_zeroes_7316_08007088;\n    if (0x10 < (int)local_144) {\n      do {\n        while( true ) {\n          piVar27 = local_144;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          local_144 = piVar27 + -4;\n          if ((int)(piVar27 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        local_144 = piVar27 + -4;\n      } while (0x10 < (int)(piVar27 + -4));\nLAB_080063d2:\n      local_144 = piVar27 + -4;\n      piVar27 = (int *)puVar2;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_144;\n    *ppiVar3 = piVar27;\n    ppiVar3[1] = local_144;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  pbVar23 = local_d0;\n  if ((uVar26 & 0x100) == 0) {\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_158;\n    *ppiVar3 = param_3;\n    ppiVar3[1] = local_158;\n    if (local_d4 < 8) {\nLAB_0800640e:\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else if ((int)uVar25 < 0x66) {\n    local_158 = (int *)(local_d0 + 1);\n    iVar5 = local_d4 + 1;\n    ppiVar16 = ppiVar3 + 2;\n    local_d0 = (byte *)local_158;\n    if (((int)local_138 < 2) && ((uVar26 & 1) == 0)) {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      if (iVar5 < 8) {\n        local_150 = (int *)(local_d4 + 2);\n        ppiVar3 = ppiVar3 + 4;\n      }\n      else {\n        local_d4 = iVar5;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        local_150 = (int *)(local_d4 + 1);\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n        ppiVar3 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      local_d4 = iVar5;\n      if (7 < iVar5) {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n      }\n      local_d4 = local_d4 + 1;\n      local_d0 = (byte *)((int)local_158 + (int)piVar4);\n      *ppiVar16 = __s;\n      ppiVar16[1] = piVar4;\n      if (local_d4 < 8) {\n        ppiVar20 = ppiVar16 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar20 = local_cc;\n      }\n      local_158 = (int *)local_d0;\n      iVar5 = local_d4;\n      local_150 = (int *)(local_d4 + 1);\n      piVar27 = (int *)((int)local_138 + -1);\n      ppiVar13 = ppiVar20 + 2;\n      iVar6 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n      puVar2 = PTR_zeroes_7316_08006d94;\n      local_d4 = (int)local_150;\n      if (iVar6 == 0) {\n        local_158 = (int *)((int)local_158 + (int)piVar27);\n        *ppiVar20 = (int *)((int)param_3 + 1);\n        ppiVar20[1] = piVar27;\n        local_d0 = (byte *)local_158;\n        if ((int)local_150 < 8) {\n          local_150 = (int *)(iVar5 + 2);\n          ppiVar16 = ppiVar13;\n          ppiVar3 = ppiVar20 + 4;\n        }\n        else {\nLAB_08006d9c:\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          local_150 = (int *)(local_d4 + 1);\n          local_158 = (int *)local_d0;\n          ppiVar16 = local_cc;\n          ppiVar3 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar16 = ppiVar20;\n        ppiVar3 = ppiVar13;\n        if (0 < (int)piVar27) {\n          piVar18 = (int *)PTR_zeroes_7316_0800788c;\n          if (0x10 < (int)piVar27) {\n            while( true ) {\n              local_d0 = (byte *)((int)local_158 + 0x10);\n              *ppiVar20 = (int *)puVar2;\n              ppiVar20[1] = (int *)0x10;\n              if (local_d4 < 8) {\n                ppiVar20 = ppiVar20 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar20 = local_cc;\n              }\n              piVar27 = piVar27 + -4;\n              local_158 = (int *)local_d0;\n              if ((int)piVar27 < 0x11) break;\n              local_d4 = local_d4 + 1;\n            }\n            local_150 = (int *)(local_d4 + 1);\n            ppiVar13 = ppiVar20 + 2;\n            piVar18 = (int *)puVar2;\n          }\n          *ppiVar20 = piVar18;\n          ppiVar20[1] = piVar27;\n          local_158 = (int *)((int)local_158 + (int)piVar27);\n          local_d4 = (int)local_150;\n          local_d0 = (byte *)local_158;\n          if (7 < (int)local_150) goto LAB_08006d9c;\n          local_150 = (int *)((int)local_150 + 1);\n          ppiVar3 = ppiVar13 + 2;\n          ppiVar16 = ppiVar13;\n        }\n      }\n    }\n    ppiVar16[1] = local_10c;\n    local_d0 = (byte *)((int)local_158 + (int)local_10c);\n    local_d4 = (int)local_150;\n    *ppiVar16 = &local_e8;\n    pbVar23 = local_d0;\n    if (7 < (int)local_150) {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else {\n    iVar5 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n    if (iVar5 == 0) {\n      if ((int)local_f0[0] < 1) {\n        local_d4 = local_d4 + 1;\n        local_d0 = pbVar23 + 1;\n        *ppiVar3 = (int *)PTR_DAT_08006d98;\n        ppiVar3[1] = (int *)0x1;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        if (((local_f0[0] != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n          }\n          puVar2 = PTR_zeroes_7316_0800788c;\n          if ((int)local_f0[0] < 0) {\n            piVar27 = (int *)-(int)local_f0[0];\n            if ((int)(local_f0[0] + 4) < 0 != SCARRY4((int)local_f0[0],0x10)) {\n              do {\n                local_d4 = local_d4 + 1;\n                local_d0 = local_d0 + 0x10;\n                *ppiVar3 = (int *)puVar2;\n                ppiVar3[1] = (int *)0x10;\n                if (local_d4 < 8) {\n                  ppiVar3 = ppiVar3 + 2;\n                }\n                else {\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  ppiVar3 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = local_d4 + 1;\n            local_d0 = local_d0 + (int)piVar27;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = piVar27;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n          }\n          local_d0 = local_d0 + (int)local_138;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar27 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar27 = local_138;\n        }\n        if (0 < (int)piVar27) {\n          local_d0 = pbVar23 + (int)piVar27;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = piVar27;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08006d94;\n        piVar18 = local_134;\n        if (-1 < (int)piVar27) {\n          piVar18 = (int *)((int)local_134 - (int)piVar27);\n        }\n        piVar27 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar18) {\n          for (; 0x10 < (int)piVar18; piVar18 = piVar18 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar27 = (int *)puVar2;\n          }\n          local_d4 = local_d4 + 1;\n          pbVar23 = pbVar23 + (int)piVar18;\n          *ppiVar3 = piVar27;\n          ppiVar3[1] = piVar18;\n          local_d0 = pbVar23;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007398;\n        local_134 = (int *)((int)local_134 + (int)param_3);\n        if ((uVar26 & 0x400) != 0) {\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int *)0x0) goto LAB_0800717e;\n          local_108 = local_108 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + (int)local_104;\n            *ppiVar3 = local_110;\n            ppiVar3[1] = local_104;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)(uint)*local_108;\n            piVar27 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n            if ((int)piVar18 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n              piVar27 = piVar18;\n            }\n            if (0 < (int)piVar27) {\n              local_d0 = local_d0 + (int)piVar27;\n              local_d4 = local_d4 + 1;\n              *ppiVar3 = local_134;\n              ppiVar3[1] = piVar27;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar3 = local_cc;\n                piVar18 = (int *)(uint)*local_108;\n              }\n            }\n            piVar24 = piVar18;\n            if (-1 < (int)piVar27) {\n              piVar24 = (int *)((int)piVar18 - (int)piVar27);\n            }\n            if (0 < (int)piVar24) {\n              for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n                while( true ) {\n                  local_d4 = local_d4 + 1;\n                  local_d0 = local_d0 + 0x10;\n                  *ppiVar3 = (int *)puVar2;\n                  ppiVar3[1] = (int *)0x10;\n                  if (local_d4 < 8) break;\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  piVar24 = piVar24 + -4;\n                  ppiVar3 = local_cc;\n                  if ((int)piVar24 < 0x11) goto LAB_08007156;\n                }\n                ppiVar3 = ppiVar3 + 2;\n              }\nLAB_08007156:\n              local_d4 = local_d4 + 1;\n              local_d0 = local_d0 + (int)piVar24;\n              *ppiVar3 = (int *)puVar2;\n              ppiVar3[1] = piVar24;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = local_cc;\n              }\n            }\n            local_134 = (int *)((int)local_134 + (int)piVar18);\n            pbVar23 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int *)0x0) {\n              if ((int *)((int)param_3 + (int)local_138) <= local_134) {\n                local_134 = (int *)((int)param_3 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int *)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0[0] < (int)local_138) || ((uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = pbVar23 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n        piVar18 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n        if ((int)piVar27 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n          piVar18 = piVar27;\n        }\n        if (0 < (int)piVar18) {\n          local_d0 = pbVar23 + (int)piVar18;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = local_134;\n          ppiVar3[1] = piVar18;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007088;\n        if (-1 < (int)piVar18) {\n          piVar27 = (int *)((int)piVar27 - (int)piVar18);\n        }\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar18 = (int *)puVar2;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = local_d4 + 1;\n      local_d0 = pbVar23 + 1;\n      *ppiVar3 = (int *)PTR_DAT_08006a50;\n      ppiVar3[1] = (int *)0x1;\n      if (local_d4 < 8) {\n        ppiVar3 = ppiVar3 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar3 = local_cc;\n      }\n      if (((int)local_f0[0] < (int)local_138) || (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + (int)piVar4;\n        *ppiVar3 = __s;\n        ppiVar3[1] = piVar4;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        puVar2 = PTR_zeroes_7316_08006a54;\n        piVar27 = (int *)((int)local_138 + -1);\n        pbVar23 = local_d0;\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)puVar2;\n            pbVar23 = local_d0;\n          }\nLAB_08007014:\n          local_d0 = pbVar23 + (int)piVar27;\n          *ppiVar3 = piVar18;\n          ppiVar3[1] = piVar27;\njoined_r0x08006a1c:\n          local_d4 = local_d4 + 1;\n          if (7 < local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  if (((uVar26 & 4) != 0) && (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27))\n  {\n    for (; local_d0 = pbVar23, 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n      while( true ) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) break;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        piVar27 = piVar27 + -4;\n        ppiVar3 = local_cc;\n        if ((int)piVar27 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n    ppiVar3[1] = piVar27;\n    pbVar23 = local_d0;\n    if ((7 < local_d4) &&\n       (iVar5 = __ssprint_r(param_1,param_2,&local_d8), pbVar23 = local_d0, iVar5 != 0))\n    goto LAB_0800603e;\n  }\n  if ((int)local_15c < (int)local_168) {\n    local_15c = local_168;\n  }\n  local_164 = local_164 + (int)local_15c;\n  if ((pbVar23 == (byte *)0x0) || (iVar5 = __ssprint_r(param_1,param_2,&local_d8), iVar5 == 0)) {\n    local_d4 = 0;\n    if (local_148 != (int *)0x0) {\n      _free_r(param_1,local_148);\n    }\n    ppiVar3 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(param_1,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  uVar22 = uVar25 - 0x30;\n  piVar18 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar18 + 1);\n    uVar25 = (uint)*(byte *)piVar18;\n    local_15c = (int *)(uVar22 + (int)local_15c * 10);\n    uVar22 = uVar25 - 0x30;\n    piVar18 = piVar28;\n  } while (uVar22 < 10);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "_dtoa_r",
                "_malloc_r",
                "__muldf3",
                "strncpy",
                "__aeabi_dcmple",
                "strlen",
                "__aeabi_dcmplt",
                "__aeabi_uldivmod",
                "__ssprint_r",
                "__unorddf2",
                "__aeabi_i2d",
                "__subdf3",
                "_localeconv_r",
                "_free_r",
                "frexp",
                "memchr",
                "__aeabi_d2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concat_params_if_not_null_08000134",
                "param_1": "ptr1",
                "param_2": "ptr2"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concat_params_if_not_null_08000134(uint64_t* ptr1, uint64_t* ptr2)\n{\n    if (DAT_08000144 != 0) {\n        ptr1 = PTR__init_0800014c;\n        ptr2 = PTR_object_8660_08000148;\n    }\n    return ((uint64_t)(*ptr2) << 32) | *ptr1;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "concat_params_if_not_null_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "tick_handler_08005704"
            },
            "code": "void tick_handler_08005704(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "tick_handler_08005704"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_i2c_status_08002ca8",
                "*hi2c": "*i2c_handle",
                "Timeout": "timeout_ms",
                "Tickstart": "start_tick",
                "uVar1": "current_tick",
                "SR1": "I2C_SR1",
                "HAL_OK": "HAL_OK",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "HAL_ERROR": "HAL_ERROR",
                "ErrorCode": "I2C_ERROR_TIMEOUT",
                "State": "HAL_I2C_STATE_READY",
                "Lock": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002ca8(I2C_HandleTypeDef *i2c_handle, uint32_t timeout_ms, uint32_t start_tick)\n{\n  uint32_t current_tick;\n  while (true) {\n    if ((i2c_handle->Instance->SR1 & I2C_SR1_BTF) == I2C_SR1_BTF) {\n      return HAL_OK;\n    }\n    if ((i2c_handle->Instance->SR1 & I2C_SR1_AF) == I2C_SR1_AF) break;\n    if ((timeout_ms == 0) || (current_tick = HAL_GetTick(), timeout_ms < current_tick - start_tick)) {\n      i2c_handle->ErrorCode |= I2C_ERROR_TIMEOUT;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_handle->Instance->SR1 &= I2C_SR1_BTF;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->PreviousState = 0;\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "configure_timer_08003a94",
                "htim": "timer_handle",
                "sClockSourceConfig": "clock_config",
                "HVar1": "status",
                "uVar2": "clock_source",
                "tmpsmcr": "tmp_smcr"
            },
            "code": "HAL_StatusTypeDef configure_timer_08003a94(TIM_HandleTypeDef *timer_handle, TIM_ClockConfigTypeDef *clock_config)\n{\n  HAL_StatusTypeDef status;\n  uint clock_source = clock_config->ClockSource;\n  uint32_t tmpsmcr;\n  if (timer_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->Lock = HAL_LOCKED;\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    timer_handle->Instance->SMCR = timer_handle->Instance->SMCR & 0xffff0088;\n    if (clock_source == 0x40) {\n      TIM_TI1_ConfigInputStage\n                (timer_handle->Instance,clock_config->ClockPolarity,clock_config->ClockFilter);\n      TIM_ITRx_SetConfig(timer_handle->Instance,0x40);\n    }\n    else if (clock_source < 0x41) {\n      if (clock_source == 0x10) {\n        TIM_ITRx_SetConfig(timer_handle->Instance,0x10);\n      }\n      else if (clock_source < 0x11) {\n        if (clock_source == 0) {\n          TIM_ITRx_SetConfig(timer_handle->Instance,0);\n        }\n      }\n      else if (clock_source == 0x20) {\n        TIM_ITRx_SetConfig(timer_handle->Instance,0x20);\n      }\n      else if (clock_source == 0x30) {\n        TIM_ITRx_SetConfig(timer_handle->Instance,0x30);\n      }\n    }\n    else if (clock_source == 0x70) {\n      TIM_ETR_SetConfig(timer_handle->Instance,clock_config->ClockPrescaler,\n                        clock_config->ClockPolarity,clock_config->ClockFilter);\n      timer_handle->Instance->SMCR = timer_handle->Instance->SMCR & 0xffffff88 | 0x77;\n    }\n    else if (clock_source < 0x71) {\n      if (clock_source == 0x50) {\n        TIM_TI1_ConfigInputStage\n                  (timer_handle->Instance,clock_config->ClockPolarity,clock_config->ClockFilter)\n        ;\n        TIM_ITRx_SetConfig(timer_handle->Instance,0x50);\n      }\n      else if (clock_source == 0x60) {\n        TIM_TI2_ConfigInputStage\n                  (timer_handle->Instance,clock_config->ClockPolarity,clock_config->ClockFilter)\n        ;\n        TIM_ITRx_SetConfig(timer_handle->Instance,0x60);\n      }\n    }\n    else if (clock_source == 0x1000) {\n      timer_handle->Instance->SMCR = timer_handle->Instance->SMCR & 0xfffffff8;\n    }\n    else if (clock_source == 0x2000) {\n      TIM_ETR_SetConfig(timer_handle->Instance,clock_config->ClockPrescaler,\n                        clock_config->ClockPolarity,clock_config->ClockFilter);\n      timer_handle->Instance->SMCR = timer_handle->Instance->SMCR | 0x4000;\n    }\n    timer_handle->State = HAL_TIM_STATE_READY;\n    timer_handle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_ETR_SetConfig",
                "TIM_ITRx_SetConfig",
                "TIM_TI1_ConfigInputStage",
                "TIM_TI2_ConfigInputStage"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_input_trigger_source_0800416a",
                "TIMx": "timer",
                "InputTriggerSource": "input_trigger_source",
                "tmpsmcr": "smcr_value"
            },
            "code": "void set_input_trigger_source_0800416a(TIM_TypeDef *timer, uint16_t input_trigger_source) {\n  uint32_t smcr_value = timer->SMCR;\n  smcr_value &= 0xffffff8f;\n  smcr_value |= (uint32_t)(input_trigger_source | 7);\n  timer->SMCR = smcr_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_input_trigger_source_0800416a"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\ndouble FUNC_080059f0(double __x)\n\n{\n  int in_r0;\n  undefined4 uVar1;\n  undefined4 uVar2;\n  uint in_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  double in_d0;\n  double dVar9;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar10 = CONCAT44(in_r1,in_r0);\n  uVar7 = in_r1 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (in_r0 == 0)))) {\n      return in_d0;\n    }\n    dVar9 = (double)__aeabi_dadd();\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar10 = __divdf3(0,DAT_08005d08,in_r0,extraout_r1);\n          iVar8 = 3;\n        }\n        else {\n          uVar10 = __subdf3();\n          uVar11 = __muldf3(in_r0,extraout_r1,0,DAT_08005d04);\n          uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n          uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar10 = __subdf3();\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_08005cf8);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar10 = __aeabi_dadd();\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar11 = __aeabi_dadd(in_r0,in_r1,DAT_08005cd0,DAT_08005cd4);\n        iVar8 = __aeabi_dcmpgt((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar5 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar5,uVar6,uVar5,uVar6);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar1,uVar3,uVar1,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar4,DAT_08005c78,DAT_08005c7c);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar1,uVar3);\n    uVar11 = __muldf3(uVar2,uVar4,DAT_08005ca8,DAT_08005cac);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar8 == -1) {\n      dVar9 = (double)__subdf3(uVar5,uVar6,(int)uVar10,uVar1);\n      return dVar9;\n    }\n    uVar10 = __subdf3((int)uVar10,uVar1,*(undefined4 *)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8),\n                      *(undefined4 *)((int)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8) + 4));\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    dVar9 = (double)__subdf3(*(undefined4 *)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8),\n                             *(undefined4 *)((int)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8) + 4),(int)uVar10\n                             ,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)in_r1 < 0) {\n      return dVar9;\n    }\n  }\n  return dVar9;\n}\n\n",
            "called": [
                "__subdf3",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__divdf3",
                "__aeabi_dadd",
                "fabs"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "write_i2c_memory_08001ccc",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "Tickstart": "tick_start",
                "uVar1": "transfer_options",
                "HVar2": "status",
                "uVar3": "current_tick",
                "cVar4": "transfer_complete",
                "uVar5": "transfer_status",
                "iVar6": "loop_counter",
                "pbVar7": "current_byte_ptr",
                "bVar8": "transfer_success"
            },
            "code": "HAL_StatusTypeDef write_i2c_memory_08001ccc(I2C_HandleTypeDef *i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint8_t *data, uint16_t size, uint32_t timeout) {\n    uint32_t tick_start;\n    uint32_t current_tick;\n    uint32_t timeout_duration = timeout;\n    uint16_t transfer_size = size;\n    uint8_t *current_data_ptr = data;\n    uint16_t transfer_options = 0;\n    HAL_StatusTypeDef status = HAL_BUSY;\n\n    tick_start = HAL_GetTick();\n    if (i2c_handle->State == HAL_I2C_STATE_READY) {\n        i2c_handle->Lock = HAL_LOCKED;\n        i2c_handle->State = HAL_I2C_STATE_BUSY_TX;\n        i2c_handle->Mode = HAL_I2C_MODE_MEM;\n        i2c_handle->ErrorCode = 0;\n        i2c_handle->pBuffPtr = current_data_ptr;\n        i2c_handle->XferCount = transfer_size;\n        i2c_handle->XferOptions = transfer_options;\n        if ((i2c_handle->Instance->CR1 & 1) != 1) {\n            i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 1;\n        }\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffff7ff;\n        status = I2C_RequestMemoryWrite(i2c_handle, device_address, memory_address, memory_address_size, timeout_duration, tick_start);\n        while (transfer_size != 0) {\n            current_tick = HAL_GetTick();\n            if (current_tick - tick_start >= timeout_duration) {\n                status = HAL_TIMEOUT;\n                break;\n            }\n            if (I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout_duration, tick_start) != HAL_OK) {\n                if (i2c_handle->ErrorCode == 4) {\n                    i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n                    status = HAL_ERROR;\n                    break;\n                }\n                status = HAL_TIMEOUT;\n                break;\n            }\n            i2c_handle->Instance->DR = (uint32_t)(*current_data_ptr++);\n            transfer_size--;\n            i2c_handle->XferSize = transfer_size;\n            i2c_handle->XferCount = i2c_handle->XferCount - 1;\n            if (((i2c_handle->Instance->SR1 & 4) == 4) && (transfer_size != 0)) {\n                i2c_handle->Instance->DR = (uint32_t)(*current_data_ptr++);\n                transfer_size--;\n                i2c_handle->XferSize = transfer_size;\n                i2c_handle->XferCount = i2c_handle->XferCount - 1;\n            }\n        }\n        if (status == HAL_BUSY) {\n            status = I2C_WaitOnBTFFlagUntilTimeout(i2c_handle, timeout_duration, tick_start);\n            if (status == HAL_OK) {\n                i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n                i2c_handle->State = HAL_I2C_STATE_READY;\n                i2c_handle->Mode = HAL_I2C_MODE_NONE;\n                i2c_handle->Lock = HAL_UNLOCKED;\n            }\n            else if (i2c_handle->ErrorCode == 4) {\n                i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n                status = HAL_ERROR;\n            }\n            else {\n                status = HAL_TIMEOUT;\n            }\n        }\n        i2c_handle->Lock = HAL_UNLOCKED;\n    }\n    return status;\n}",
            "called": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "_i2c_write_reg"
            ],
            "imported": false,
            "current_name": "write_i2c_memory_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "update_uw_tick_0800157c",
                "PTR_uwTick_0800159c": "uw_tick_ptr",
                "PTR_uwTickFreq_08001598": "uw_tick_freq_ptr",
                "byte": "byte_value"
            },
            "code": "void update_uw_tick_0800157c(void)\n{\n    uint* PTR_uwTick_0800159c = (uint*) PTR_uwTick_0800159c;\n    int* PTR_uwTickFreq_08001598 = (int*) PTR_uwTickFreq_08001598;\n    uint byte_value = (uint)(byte)*PTR_uwTickFreq_08001598;\n    *PTR_uwTick_0800159c = *PTR_uwTick_0800159c + byte_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uw_tick_0800157c"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "handle_timer_interrupts_080036f8",
                "*htim": "*timer_handle",
                "htim->Instance->SR": "status_reg",
                "htim->Instance->DIER": "interrupt_enabled_reg",
                "htim->Instance->SR & 2": "status_reg & TIM_FLAG_CC1",
                "htim->Instance->DIER & 2": "interrupt_enabled_reg & TIM_IT_CC1",
                "htim->Channel": "timer_handle->Channel",
                "HAL_TIM_ACTIVE_CHANNEL_1": "HAL_TIM_ACTIVE_CHANNEL_1",
                "htim->Instance->CCMR1 & 3": "timer_handle->Instance->CCMR1 & TIM_CCMR1_CC1S",
                "HAL_TIM_OC_DelayElapsedCallback(htim)": "HAL_TIM_OC_DelayElapsedCallback(timer_handle)",
                "HAL_TIM_PWM_PulseFinishedCallback(htim)": "HAL_TIM_PWM_PulseFinishedCallback(timer_handle)",
                "HAL_TIM_IC_CaptureCallback(htim)": "HAL_TIM_IC_CaptureCallback(timer_handle)",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "HAL_TIM_ACTIVE_CHANNEL_CLEARED",
                "htim->Instance->SR & 4": "status_reg & TIM_FLAG_CC2",
                "htim->Instance->DIER & 4": "interrupt_enabled_reg & TIM_IT_CC2",
                "htim->Instance->CCMR1 & 0x300": "timer_handle->Instance->CCMR1 & TIM_CCMR1_CC2S",
                "htim->Instance->SR & 8": "status_reg & TIM_FLAG_CC3",
                "htim->Instance->DIER & 8": "interrupt_enabled_reg & TIM_IT_CC3",
                "htim->Instance->CCMR2 & 3": "timer_handle->Instance->CCMR2 & TIM_CCMR2_CC3S",
                "htim->Instance->SR & 0x10": "status_reg & TIM_FLAG_CC4",
                "htim->Instance->DIER & 0x10": "interrupt_enabled_reg & TIM_IT_CC4",
                "htim->Instance->CCMR2 & 0x300": "timer_handle->Instance->CCMR2 & TIM_CCMR2_CC4S",
                "htim->Instance->SR & 1": "status_reg & TIM_FLAG_UPDATE",
                "htim->Instance->DIER & 1": "interrupt_enabled_reg & TIM_IT_UPDATE",
                "htim->Instance->SR & 0x80": "status_reg & TIM_FLAG_BREAK",
                "htim->Instance->DIER & 0x80": "interrupt_enabled_reg & TIM_IT_BREAK",
                "htim->Instance->SR & 0x40": "status_reg & TIM_FLAG_TRIGGER",
                "htim->Instance->DIER & 0x40": "interrupt_enabled_reg & TIM_IT_TRIGGER",
                "htim->Instance->SR & 0x20": "status_reg & TIM_FLAG_COM",
                "htim->Instance->DIER & 0x20": "interrupt_enabled_reg & TIM_IT_COM"
            },
            "code": "void handle_timer_interrupts_080036f8(TIM_HandleTypeDef *timer_handle) {\n    uint32_t status_reg = timer_handle->Instance->SR;\n    uint32_t interrupt_enabled_reg = timer_handle->Instance->DIER;\n    if ((status_reg & TIM_FLAG_CC1) && (interrupt_enabled_reg & TIM_IT_CC1)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_CC1;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n        if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if ((status_reg & TIM_FLAG_CC2) && (interrupt_enabled_reg & TIM_IT_CC2)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_CC2;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n        if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if ((status_reg & TIM_FLAG_CC3) && (interrupt_enabled_reg & TIM_IT_CC3)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_CC3;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n        if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if ((status_reg & TIM_FLAG_CC4) && (interrupt_enabled_reg & TIM_IT_CC4)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_CC4;\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n        if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if ((status_reg & TIM_FLAG_UPDATE) && (interrupt_enabled_reg & TIM_IT_UPDATE)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_UPDATE;\n        HAL_TIM_PeriodElapsedCallback(timer_handle);\n    }\n    if ((status_reg & TIM_FLAG_BREAK) && (interrupt_enabled_reg & TIM_IT_BREAK)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_BREAK;\n        HAL_TIMEx_BreakCallback(timer_handle);\n    }\n    if ((status_reg & TIM_FLAG_TRIGGER) && (interrupt_enabled_reg & TIM_IT_TRIGGER)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_TRIGGER;\n        HAL_TIM_TriggerCallback(timer_handle);\n    }\n    if ((status_reg & TIM_FLAG_COM) && (interrupt_enabled_reg & TIM_IT_COM)) {\n        timer_handle->Instance->SR = ~TIM_FLAG_COM;\n        HAL_TIMEx_CommutationCallback(timer_handle);\n    }\n}\n",
            "called": [
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupts_080036f8"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_string_empty_080009e8",
                "in_CY": "current_char"
            },
            "code": "bool is_string_empty_080009e8(void)\n{\n  char current_char;\n  __aeabi_cdrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "is_string_empty_080009e8"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "allocate_memory_and_set_values_08009630",
                "param_1": "size",
                "param_2": "unused",
                "param_3": "flags",
                "param_4": "value",
                "param_5": "out_value1",
                "param_6": "out_value2",
                "iVar1": "allocated_memory",
                "uVar2": "shift_amount",
                "iVar3": "value1",
                "iVar4": "value2",
                "uVar5": "shifted_value",
                "uVar6": "masked_value_shifted",
                "uVar7": "hi_bits",
                "local_20": "flag_copy",
                "local_1c": "masked_value"
            },
            "code": "int allocate_memory_and_set_values_08009630(undefined4 size, undefined4 unused, uint32_t flags, uint32_t value, int *out_value1, int *out_value2) {\n    int allocated_memory = _Balloc(size, 1);\n    uint32_t masked_value = value & 0xfffff;\n    int value1, value2;\n    if ((flags << 1) >> 0x15 != 0) {\n        masked_value |= 0x100000;\n    }\n    if (flags == 0) {\n        int shift_amount = __lo0bits(&masked_value);\n        value1 = 1;\n        *(uint32_t *)(allocated_memory + 0x14) = masked_value;\n        *(undefined4 *)(allocated_memory + 0x10) = 1;\n    }\n    else {\n        uint32_t shifted_value = masked_value << ((32 - __lo0bits(&flags)) & 0xff);\n        masked_value = masked_value >> (__lo0bits(&flags) & 0xff);\n        if (masked_value == 0) {\n            value1 = 1;\n        }\n        else {\n            value1 = 2;\n        }\n        *(uint32_t *)(allocated_memory + 0x14) = shifted_value | flags;\n        *(uint32_t *)(allocated_memory + 0x18) = masked_value;\n        *(undefined4 *)(allocated_memory + 0x10) = value1;\n    }\n    if ((flags << 1) >> 0x15 == 0) {\n        *out_value1 = __lo0bits(&flags) - 0x432;\n        uint64_t hi_bits = __hi0bits(*(uint32_t *)(allocated_memory + value1 * 4 + 0x10));\n        *out_value2 = (int)(hi_bits >> 0x20) * 0x20 - (int)hi_bits;\n        return allocated_memory;\n    }\n    *out_value1 = ((flags << 1) >> 0x15 - 0x433) + __lo0bits(&flags);\n    *out_value2 = 0x35 - __lo0bits(&flags);\n    return allocated_memory;\n}",
            "called": [
                "_Balloc",
                "__hi0bits",
                "__lo0bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_values_08009630"
        },
        "FUN_08005830": {
            "renaming": {
                "FUN_08005830": "do_nothing_forever_08005830"
            },
            "code": "void do_nothing_forever_08005830(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005830",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_forever_08005830"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "handle_timer_interrupt_08005714",
                "PTR_htim2_08005724": "tim2_handle"
            },
            "code": "void handle_timer_interrupt_08005714(void)\n{\n  HAL_TIM_IRQHandler(&PTR_htim2_08005724);\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08005714"
        },
        "FUN_08005834": {
            "renaming": {
                "FUN_08005834": "calculate_angle_08005834",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "input_angle",
                "unaff_r4": "unaffected_r4",
                "uVar2": "variable_u",
                "uVar3": "abs_param3",
                "uVar4": "abs_param4",
                "uVar5": "result",
                "difference": "param_difference"
            },
            "code": "void calculate_angle_08005834(uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4, double input_angle) {\n    int difference;\n    uint32_t abs_param3 = param3 & 0x7fffffff;\n    uint32_t abs_param4 = param4 & 0x7fffffff;\n    if (DAT_080059e8 < (abs_param3 | (-param3 | param3) >> 0x1f) || DAT_080059e8 < (abs_param4 | (-param1 | param1) >> 0x1f)) {\n        __aeabi_dadd(param3, param4, param1, param2);\n    }\n    else {\n        if ((param4 + 0xc0100000 | param3) == 0) {\n            atan(input_angle);\n            return;\n        }\n        uint32_t uVar2 = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n        if ((abs_param4 | param1) != 0 && (abs_param3 | param3) != 0 && abs_param3 != DAT_080059e8 && abs_param4 != DAT_080059e8) {\n            difference = (int)(abs_param4 - abs_param3) >> 0x14;\n            if (difference < 0x3d && (-1 < (int)param4 || (difference + 0x3c < 0 == SCARRY4(difference, 0x3c)))) {\n                __divdf3(param1, param2);\n                double abs_param4_double = fabs((double)CONCAT44(unaff_r4, param4));\n                atan(abs_param4_double);\n            }\n            if (uVar2 != 1) {\n                if (uVar2 == 2) {\n                    uint64_t result = __subdf3();\n                    __subdf3(DAT_080059b0, DAT_080059b4, (int)result, (int)(result >> 0x20));\n                }\n                else if (uVar2 != 0) {\n                    uint64_t result = __subdf3();\n                    __subdf3((int)result, (int)(result >> 0x20), DAT_080059b0, DAT_080059b4);\n                }\n            }\n        }\n    }\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_angle_08005834"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_atan_and_division_08005838",
                "param_1": "dividend_1",
                "param_2": "dividend_2",
                "param_3": "divisor_1",
                "param_4": "divisor_2",
                "param_5": "atan_input",
                "iVar1": "difference",
                "unaff_r4": "abs_dividend",
                "uVar2": "divisor_signs",
                "uVar3": "divisor_sign_mask",
                "uVar4": "dividend_sign_mask",
                "uVar5": "difference_double",
                "__aeabi_dadd": "add_double",
                "__divdf3": "divide_double",
                "__subdf3": "subtract_double",
                "DAT_080059b0": "constant_1",
                "DAT_080059b4": "constant_2",
                "DAT_080059e8": "constant_max_int"
            },
            "code": "void calculate_atan_and_division_08005838(uint dividend_1, uint dividend_2, uint divisor_1, uint divisor_2, double atan_input) {\n  int difference = (int)((dividend_2 & 0x7fffffff) - (divisor_2 & 0x7fffffff)) >> 0x14;\n  if ((DAT_080059e8 >= ((divisor_2 & 0x7fffffff) | (-dividend_2 | dividend_2) >> 0x1f)) && (DAT_080059e8 >= ((divisor_1 & 0x7fffffff) | (-dividend_1 | dividend_1) >> 0x1f))) {\n    if (((dividend_2 + 0xc0100000 | dividend_1) == 0) && (divisor_2 + divisor_1 != 0)) {\n      atan(atan_input);\n      return;\n    }\n    uint uVar2 = (int)dividend_2 >> 0x1e & 2U | divisor_2 >> 0x1f;\n    if (((dividend_1 | dividend_2) != 0) && ((divisor_1 | divisor_2) != 0) && ((divisor_2 & 0x7fffffff) != DAT_080059e8) && ((divisor_1 & 0x7fffffff) != DAT_080059e8)) {\n      if ((difference < 0x3d) && ((-1 < (int)dividend_2) || (difference + 0x3c < 0 == SCARRY4(difference, 0x3c)))) {\n        double quotient = (double)dividend_1 / (double)dividend_2;\n        double abs_dividend = fabs((double)((int64_t)dividend_2 << 32 | dividend_1));\n        atan(abs_dividend);\n      }\n      if (uVar2 != 1) {\n        if (uVar2 == 2) {\n          double difference = (double)divisor_1 - (double)divisor_2;\n          __subdf3(DAT_080059b0, DAT_080059b4, (int)difference, (int)((uint64_t)difference >> 0x20));\n        }\n        else if (uVar2 != 0) {\n          double difference = (double)divisor_2 - (double)divisor_1;\n          __subdf3((int)difference, (int)((uint64_t)difference >> 0x20), DAT_080059b0, DAT_080059b4);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(dividend_1, dividend_2, divisor_1, divisor_2);\n  }\n}",
            "called": [
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_atan_and_division_08005838"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_exponent_080096e0",
                "__x": "base",
                "__exponent": "exponent",
                "DAT_08009740": "MAX_EXPONENT",
                "in_r1": "base_uint",
                "in_r2": "exponent",
                "extraout_r1": "base_uint",
                "iVar1": "MAX_EXPONENT",
                "iVar2": "exponent_offset",
                "uVar3": "base_uint",
                "in_d0": "exponent_double",
                "__muldf3": "__multiply_double_float",
                "DAT_0800973c": "SMALL_CONSTANT"
            },
            "code": "double calculate_exponent_080096e0(double base, int* exponent) {\n  int max_exponent = DAT_08009740;\n  int exponent_offset = 0;\n  uint base_uint = (uint) base & 0x7fffffff;\n  *exponent = 0;\n  \n  if (((int)base_uint <= max_exponent) && ((base_uint | (uint)exponent) != 0)) {\n    if (base_uint < 0x100000) {\n      double exponent_double = (double) __muldf3(exponent, base_uint, 0, DAT_0800973c);\n      exponent_offset = -0x36;\n      base_uint = base_uint & 0x7fffffff;\n    }\n    *exponent = ((int)base_uint >> 0x14) + -0x3fe + exponent_offset;\n  }\n  return exponent_double;\n}",
            "called": [
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_exponent_080096e0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_HCLK_frequency_divider_08003540",
                "uVar1": "HCLK_frequency",
                "PTR_APBPrescTable_08003564": "APB_prescaler_table",
                "DAT_08003560": "APB_register_address",
                "APB_prescaler_index": "APB_prescaler_index",
                "APB_prescaler": "APB_prescaler",
                "HCLK_frequency_divider": "HCLK_frequency_divider"
            },
            "code": "uint32_t get_HCLK_frequency_divider_08003540(void)\n{\n    uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n    uint32_t APB_prescaler_index = (*(uint *)(DAT_08003560 + 4) >> 0xb) & 7;\n    uint32_t APB_prescaler = PTR_APBPrescTable_08003564[APB_prescaler_index];\n    uint32_t HCLK_frequency_divider = HCLK_frequency >> APB_prescaler;\n    return HCLK_frequency_divider;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_08003540"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "configure_i2c_08001ab0",
                "hi2c": "i2c_handle",
                "HVar3": "status",
                "uVar1": "pclk1_freq",
                "cVar2": "is_valid_clock_speed",
                "uVar4": "freq_range",
                "uVar5": "ccr_value",
                "bVar6": "is_valid_divider",
                "pclk1": "pclk1_freq",
                "freqrange": "freq_range"
            },
            "code": "HAL_StatusTypeDef configure_i2c_08001ab0(I2C_HandleTypeDef *i2c_handle)\n{\n    uint32_t pclk1_freq;\n    uint32_t freq_range;\n    uint32_t ccr_value;\n    uint32_t rise_time;\n    bool is_valid_clock_speed;\n    HAL_StatusTypeDef status;\n    \n    if (i2c_handle == NULL) {\n        status = HAL_ERROR;\n    }\n    else {\n        if (i2c_handle->State == HAL_I2C_STATE_RESET) {\n            i2c_handle->Lock = HAL_UNLOCKED;\n            HAL_I2C_MspInit(i2c_handle);\n        }\n        i2c_handle->State = HAL_I2C_STATE_BUSY;\n        i2c_handle->Instance->CR1 &= ~(1);\n        pclk1_freq = HAL_RCC_GetPCLK1Freq();\n        is_valid_clock_speed = i2c_handle->Init.ClockSpeed <= 400000;\n        if (is_valid_clock_speed) {\n            freq_range = 400000;\n        }\n        else {\n            freq_range = 100000;\n        }\n        if (pclk1_freq <= freq_range) {\n            ccr_value = 1;\n        }\n        else {\n            ccr_value = pclk1_freq / (i2c_handle->Init.ClockSpeed * 2);\n            if (ccr_value < 4) {\n                ccr_value = 4;\n            }\n        }\n        rise_time = (uint32_t)(((uint64_t)i2c_handle->Init.DutyCycle * (uint64_t)ccr_value * 300) / (uint64_t)pclk1_freq) + 1;\n        i2c_handle->Instance->TRISE = rise_time;\n        i2c_handle->Instance->CCR = ccr_value;\n        i2c_handle->Instance->CR1 = i2c_handle->Init.NoStretchMode | i2c_handle->Init.GeneralCallMode | 1;\n        i2c_handle->Instance->OAR1 = i2c_handle->Init.OwnAddress1 | i2c_handle->Init.AddressingMode;\n        i2c_handle->Instance->OAR2 = i2c_handle->Init.OwnAddress2 | i2c_handle->Init.DualAddressMode;\n        i2c_handle->ErrorCode = 0;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->PreviousState = 0;\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        status = HAL_OK;\n    }\n    return status;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "MX_I2C1_Init"
            ],
            "imported": false,
            "current_name": "configure_i2c_08001ab0"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "FUNC_08000150"
            },
            "code": "\nulonglong FUNC_08000150(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000150",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000150"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "reverse_copy_08009768",
                "__dest": "destination",
                "__src": "source",
                "__n": "n",
                "cVar1": "current_char",
                "puVar2": "source_ptr",
                "puVar3": "dest_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "current_uint"
            },
            "code": "char * reverse_copy_08009768(char *destination,char *source,size_t n)\n{\n  char current_char;\n  uint *source_ptr;\n  uint *dest_ptr;\n  uint *temp_ptr;\n  uint current_uint;\n  \n  dest_ptr = (uint *)destination;\n  if (((((uint)destination | (uint)source) & 3) == 0) && (source_ptr = (uint *)source, 3 < n))) {\n    do {\n      source = (char *)(source_ptr + 1);\n      current_uint = *source_ptr;\n      if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_0800979c;\n      n = n - 4;\n      temp_ptr = dest_ptr + 1;\n      *dest_ptr = current_uint;\n      dest_ptr = temp_ptr;\n      source_ptr = (uint *)source;\n    } while (3 < n);\n  }\n  source_ptr = (uint *)source;\n  if (n != 0) {\nLAB_0800979c:\n    current_char = *(char *)source_ptr;\n    *(char *)dest_ptr = current_char;\n    while( true ) {\n      dest_ptr = (uint *)((int)dest_ptr + 1);\n      n = n - 1;\n      if (current_char == '\\0') break;\n      if (n == 0) {\n        return destination;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_char = *(char *)source_ptr;\n      *(char *)dest_ptr = current_char;\n    }\n    if (n != 0) {\n      source_ptr = dest_ptr;\n      do {\n        temp_ptr = (uint *)((int)source_ptr + 1);\n        *(char *)source_ptr = '\\0';\n        source_ptr = temp_ptr;\n      } while (temp_ptr != (uint *)(n + (int)dest_ptr));\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009768"
        },
        "FUN_08001008": {
            "renaming": {
                "FUN_08001008": "check_for_zero_08001008",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool check_for_zero_08001008(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_zero;\n  __aeabi_cfcmpeq();\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001008",
            "calling": [],
            "imported": false,
            "current_name": "check_for_zero_08001008"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "configure_output_compare_timer_08003ff8",
                "TIMx": "timer",
                "OC_Config": "config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity",
                "tmpccer": "ccer",
                "tmpccmrx": "ccmr2",
                "tmpcr2": "cr2"
            },
            "code": "void configure_output_compare_timer_08003ff8(TIM_TypeDef *timer, TIM_OC_InitTypeDef *config)\n{\n  uint32_t oc_mode = config->OCMode;\n  uint32_t oc_polarity = config->OCPolarity;\n  uint32_t oc_idle_state = config->OCIdleState;\n  uint32_t pulse = config->Pulse;\n  uint32_t ccer = timer->CCER & 0xffffefff;\n  uint32_t ccmr2 = timer->CCMR2 & 0xffff8cff;\n  uint32_t cr2 = timer->CR2;\n  \n  if (timer == PTR_0800409c) {\n    cr2 = (oc_idle_state << 6) | (cr2 & 0xffffbfff);\n  }\n  \n  ccmr2 |= (oc_mode << 8);\n  timer->CCMR2 = ccmr2;\n  timer->CCR4 = pulse;\n  ccer |= (oc_polarity << 0xc);\n  timer->CCER = ccer;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_output_compare_timer_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "i2c_mem_write_08004ea4",
                "addr": "device_address",
                "reg": "register_address",
                "*data": "data",
                "len": "data_length",
                "PTR_hi2c1_08004ee4": "i2c_handle_1",
                "PTR_I2C_TIMEOUT_08004ee0": "i2c_timeout_1"
            },
            "code": "void i2c_mem_write_08004ea4(uint8_t device_address, uint8_t register_address, uint8_t *data, uint16_t data_length)\n{\n  HAL_I2C_Mem_Write((I2C_HandleTypeDef *)PTR_hi2c1_08004ee4,(uint16_t)device_address,(uint16_t)register_address,1,data,data_length,*(uint32_t *)PTR_I2C_TIMEOUT_08004ee0);\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "i2c_mem_write_08004ea4"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "incr": "size",
                "puVar1": "errno_ptr",
                "auStack_18": "stack_var",
                "local_14": "local_var",
                "prev_heap_end": "previous_heap_end"
            },
            "code": "caddr_t allocate_memory_08005728(int size)\n{\n  undefined4 *errno_ptr;\n  undefined stack_var[4];\n  int local_var;\n  char *previous_heap_end;\n  \n  if (*(int *)PTR_heap_end_08005778 == 0) {\n    *(undefined **)PTR_heap_end_08005778 = PTR_end_0800577c;\n  }\n  previous_heap_end = *(char **)PTR_heap_end_08005778;\n  if (stack_var < (undefined *)(size + *(int *)PTR_heap_end_08005778)) {\n    local_var = size;\n    errno_ptr = (undefined4 *)__errno();\n    *errno_ptr = 0xc;\n    previous_heap_end = (caddr_t)0xffffffff;\n  }\n  else {\n    *(int *)PTR_heap_end_08005778 = size + *(int *)PTR_heap_end_08005778;\n  }\n  return previous_heap_end;\n}",
            "called": [
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005728"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "set_timer_output_compare_08003e38",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "oc_mode",
                "uVar2": "cc_enabled",
                "tmpccmrx": "ccmr1",
                "tmpcr2": "cr2",
                "tmpccer": "cc_enabled_mask",
                "DAT_08003f14": "special_timer",
                "OCNPolarity": "oc_npolarity",
                "OCPolarity": "oc_polarity",
                "OCIdleState": "oc_idle_state",
                "OCNIdleState": "oc_nidle_state"
            },
            "code": "void set_timer_output_compare_08003e38(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t oc_mode = output_config->OCMode;\n  uint32_t oc_polarity = output_config->OCPolarity;\n  uint32_t oc_npolarity = output_config->OCNPolarity;\n  uint32_t oc_idle_state = output_config->OCIdleState;\n  uint32_t oc_nidle_state = output_config->OCNIdleState;\n  uint32_t cc_enabled = timer->CCER;\n  uint32_t cc_enabled_mask = 0xffffffdf;\n  uint32_t cc_enabled_clear_mask = 0xffffffef;\n  uint32_t cr2 = timer->CR2;\n  uint32_t cr2_cc_idle_state_mask = 0xfffff3ff;\n  uint32_t ccmr1 = timer->CCMR1;\n  uint32_t ccmr1_oc_mode_mask = 0xffff8cff;\n\n  cc_enabled &= cc_enabled_clear_mask;\n\n  if (timer == DAT_08003f14) {\n    oc_polarity <<= 4;\n    oc_npolarity <<= 4;\n    cc_enabled &= 0xffffff7f;\n    cc_enabled &= 0xffffffbf;\n    cr2_cc_idle_state_mask |= oc_nidle_state << 2;\n  }\n\n  cc_enabled |= oc_polarity;\n  cc_enabled |= oc_npolarity;\n\n  cr2_cc_idle_state_mask |= oc_idle_state << 2;\n\n  timer->CCER = cc_enabled;\n  timer->CR2 = cr2_cc_idle_state_mask | cr2;\n  timer->CCMR1 = oc_mode << 8 | ccmr1 & ccmr1_oc_mode_mask;\n  timer->CCR2 = output_config->Pulse;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08003e38"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar1": "carry",
                "unaff_r4": "b",
                "uVar2": "shift_amount",
                "uVar3": "temp1",
                "in_r12": "shift_mask",
                "bVar4": "is_zero",
                "mask": "mask",
                "result_upper": "result_upper",
                "result_lower": "result_lower",
                "bit_mask": "bit_mask",
                "is_a_zero": "is_a_zero",
                "is_c_zero": "is_c_zero",
                "sign_bit_mask": "sign_bit_mask",
                "exp_bit_mask": "exp_bit_mask",
                "exp_bits": "exp_bits",
                "sign_bit": "sign_bit",
                "exp_shift": "exp_shift",
                "sign_exp_mask": "sign_exp_mask"
            },
            "code": "ulonglong calculate_result_080006a4(uint a, uint b, uint c, uint d)\n{\n  uint shift_amount;\n  uint carry;\n  uint temp1;\n  uint temp2;\n  bool is_zero;\n  bool is_a_zero = (a == 0);\n  bool is_c_zero = (c == 0);\n  uint mask = 0x80000000;\n  uint result_upper = 0;\n  uint result_lower = 0;\n  uint bit_mask = 0x100000;\n  uint shift_mask = 0x3f;\n  uint sign_bit_mask = 0x7ff00000;\n  uint exp_bit_mask = 0x7ff80000;\n  uint exp_bits = 0x7ff00000;\n  uint sign_bit = 0x80000000;\n  uint exp_shift = 0x20;\n  uint sign_exp_mask = 0x7ff80000;\n  if (b != d && ((shift_amount = d >> 0x14 & 0x3f, shift_amount != 0 && b == 0 || shift_amount == 0 && d == 0)))\n  {\n    if (is_a_zero || is_c_zero)\n    {\n      result_upper = (b ^ d) & mask;\n      return (ulonglong)result_upper << exp_shift | exp_bits;\n    }\n    carry = b & mask;\n    while ((b & bit_mask) == 0)\n    {\n      a <<= 1;\n      b <<= 1;\n      b |= carry >> 0x1f;\n      carry <<= 1;\n    }\n    if (shift_amount != 0)\n    {\n      result_upper = b | carry >> 0x1f;\n      result_lower = a << shift_amount | b >> shift_mask - shift_amount;\n    }\n    else\n    {\n      result_upper = b | carry >> 0x1f;\n      result_lower = a;\n    }\n  }\n  else\n  {\n    is_zero = (is_a_zero || is_c_zero);\n    if (!is_zero)\n    {\n      is_zero = ((a | b << 1) == 0 || (c | d << 1) == 0);\n    }\n    if (is_zero)\n    {\n      result_upper = (d ^ b) & mask;\n      return (ulonglong)result_upper << exp_shift | exp_bits;\n    }\n    if ((b & mask) != 0)\n    {\n      temp1 = b & mask;\n      while ((b & bit_mask) == 0)\n      {\n        a <<= 1;\n        b <<= 1;\n        b |= temp1 >> 0x1f;\n        temp1 <<= 1;\n      }\n      result_lower = a;\n      result_upper = b | temp1 >> 0x1f;\n    }\n    else\n    {\n      result_lower = a;\n      result_upper = d;\n      temp2 = c & mask;\n      while ((c & bit_mask) == 0)\n      {\n        c <<= 1;\n        d <<= 1;\n        d |= temp2 >> 0x1f;\n        temp2 <<= 1;\n      }\n      result_upper |= d | temp2 >> 0x1f;\n    }\n  }\n  return (ulonglong)result_upper << exp_shift | (ulonglong)result_lower;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "reverse_and_allocate_08009530",
                "param_1": "alloc_type",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "param_4",
                "iVar1": "alloc_ptr",
                "iVar5": "diff",
                "iVar12": "carry",
                "puVar2": "end1",
                "puVar3": "end2",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "puVar8": "next1",
                "puVar9": "next2",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "puVar13": "output_ptr",
                "uVar3": "end1_val",
                "uVar4": "val1",
                "uVar14": "end2_val"
            },
            "code": "void reverse_and_allocate_08009530(int param_1, uint *input1, uint *input2, int param_4)\n{\n  int diff = input1[4] - (int)input2[4];\n  uint *ptr1 = input1 + 5;\n  uint *ptr2 = input2 + 5;\n  uint *end1 = ptr1;\n  uint *end2 = input1;\n  int alloc_type;\n  uint *alloc_ptr;\n  if (diff == 0) {\n    ptr1 += (int)input1[4];\n    ptr2 += (int)input2[4];\n    while( true ) {\n      ptr1--;\n      ptr2--;\n      if (*ptr1 != *ptr2) break;\n      if (ptr1 <= end1) {\n        alloc_type = _Balloc(param_1,0,ptr1,ptr2,param_4);\n        *(int *)(alloc_type + 0x10) = 1;\n        *(int *)(alloc_type + 0x14) = 0;\n        return;\n      }\n    }\n    if (*ptr2 <= *ptr1) goto LAB_08009578;\n  }\n  else if (diff < 0) {\n    alloc_type = 1;\n    ptr1 = input2;\n    ptr2 = input1;\n    end1 = input2 + input2[4];\n    end2 = input1 + input1[4];\n  }\n  else {\n    alloc_type = 0;\n    ptr1 = input1;\n    end1 = input1 + input1[4];\n  }\n  alloc_ptr = (uint *)_Balloc(param_1,input2[1],ptr1,ptr2,param_4);\n  int carry = 0;\n  uint end1_val = input2[4];\n  uint end2_val = input1[4];\n  *(int *)(alloc_ptr + 0xC) = alloc_type;\n  uint *output_ptr = alloc_ptr + 0x14;\n  uint *ptr3 = end1 + end1_val;\n  uint *ptr4 = end2;\n  do {\n    uint *next1 = ptr1 + 1;\n    uint *next2 = ptr2 + 1;\n    uint val1 = ((*ptr1 & 0xffff) + carry) - (*ptr2 & 0xffff);\n    carry = ((*ptr1 >> 0x10) - (*ptr2 >> 0x10)) + ((int)val1 >> 0x10);\n    val1 = val1 & 0xffff | carry * 0x10000;\n    output_ptr++;\n    *output_ptr = val1;\n    carry >>= 0x10;\n    ptr1 = next1;\n    ptr2 = next2;\n  } while (ptr2 < end2 + end2_val);\n  output_ptr = ptr1 + 1;\n  ptr2 = output_ptr;\n  if (output_ptr < ptr3) {\n    do {\n      uint *next3 = output_ptr + 1;\n      uint val2 = (*output_ptr & 0xffff) + carry;\n      carry = ((int)val2 >> 0x10) + (*output_ptr >> 0x10);\n      val2 = val2 & 0xffff | carry * 0x10000;\n      *ptr2 = val2;\n      carry >>= 0x10;\n      output_ptr = next3;\n      ptr2++;\n    } while (output_ptr < ptr3);\n    output_ptr = (uint *)((int)output_ptr + ((int)ptr3 + ~(uint)ptr2 & 0xfffffffc) + 4);\n  }\n  output_ptr--;\n  while (val1 == 0) {\n    output_ptr--;\n    end1_val--;\n    val1 = *output_ptr;\n  }\n  *(uint *)(alloc_ptr + 0x10) = end1_val;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "reverse_and_allocate_08009530"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "wait_for_i2c_ack_08002bb4",
                "hi2c": "i2c_handle",
                "Timeout": "timeout_ms",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "SR1": "I2C_FLAG_BUSY",
                "I2C_IsAcknowledgeFailed": "I2C_IsAcknowledgeFailed",
                "ErrorCode": "ErrorCode",
                "PreviousState": "PreviousState",
                "State": "State",
                "Lock": "Lock",
                "HAL_OK": "HAL_OK",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_MAX_DELAY": "HAL_MAX_DELAY",
                "0xffffffff": "HAL_MAX_DELAY",
                "0x20": "HAL_I2C_ERROR_TIMEOUT",
                "0": "I2C_STATE_NONE",
                "true": "true"
            },
            "code": "HAL_StatusTypeDef wait_for_i2c_ack_08002bb4(I2C_HandleTypeDef *i2c_handle, uint32_t timeout_ms, uint32_t start_tick) {\n  HAL_StatusTypeDef status;\n  uint32_t current_tick;\n  while (true) {\n    if ((i2c_handle->Instance->SR1 & I2C_FLAG_BUSY) == 0) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handle);\n    if (status != HAL_OK) {\n      break;\n    }\n    if ((timeout_ms != HAL_MAX_DELAY) && ((timeout_ms == 0) || ((current_tick = HAL_GetTick()) - start_tick > timeout_ms))) {\n      i2c_handle->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;\n      i2c_handle->PreviousState = I2C_STATE_NONE;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "wait_for_i2c_ack_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_i2c_status_08002d3c",
                "*hi2c": "*i2c_handle",
                "bVar1": "status_bit",
                "hi2c->Instance->SR1": "i2c_handle->Instance->SR1",
                "hi2c->ErrorCode": "i2c_handle->ErrorCode",
                "hi2c->PreviousState": "i2c_handle->PreviousState",
                "hi2c->State": "i2c_handle->State",
                "hi2c->Lock": "i2c_handle->Lock"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002d3c(I2C_HandleTypeDef *i2c_handle)\n{\n  bool status_bit;\n  status_bit = (i2c_handle->Instance->SR1 & 0x400) == 0x400;\n  if (status_bit) {\n    i2c_handle->Instance->SR1 = 0xfffffbff;\n    i2c_handle->ErrorCode = HAL_I2C_ERROR_BUS; \n    i2c_handle->PreviousState = HAL_I2C_STATE_BUSY_RX;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n  }\n  return status_bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002d3c"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "float_bits",
                "param_2": "exponent_bits",
                "uVar1": "exponent",
                "uVar2": "shifted_exponent",
                "uVar3": "normalized_mantissa",
                "in_r12": "exponent_bits_copy",
                "bVar4": "is_denormalized",
                "bVar5": "is_normalized",
                "SCARRY4": "SCARRY4"
            },
            "code": "uint calculate_float_bits_080009fc(uint float_bits, uint exponent_bits)\n{\n  uint sign_bit;\n  uint exponent;\n  uint mantissa;\n  uint normalized_mantissa;\n  bool is_normalized;\n  bool is_denormalized;\n  \n  uint shifted_exponent = exponent_bits << 1;\n  is_normalized = shifted_exponent < 0x70000000;\n  normalized_mantissa = shifted_exponent + 0x90000000;\n  exponent = normalized_mantissa;\n  if (!is_normalized) {\n    exponent_bits = shifted_exponent + 0x8fe00000;\n    exponent = exponent_bits;\n  }\n  is_denormalized = exponent == 0;\n  if (!is_normalized && normalized_mantissa >= 0x200000) {\n    is_denormalized = exponent_bits == 0x1fc00000;\n  }\n  if (((is_normalized || normalized_mantissa < 0x200000) || 0x1fc00000 < exponent_bits) || is_denormalized) {\n    if ((exponent_bits & 0x40000000) != 0) {\n      if (((int)shifted_exponent >> 0x15 == -1) && ((float_bits | exponent_bits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return exponent_bits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_exponent + 0x92e00000) < 0 != SCARRY4(normalized_mantissa,0x2e00000)) {\n      return exponent_bits & 0x80000000;\n    }\n    uint shift = 0x18 - (shifted_exponent + 0x92e00000 >> 0x15);\n    uint shifted_float_bits = float_bits >> (shift & 0xff);\n    if (float_bits << (0x20 - shift & 0xff) != 0) {\n      shifted_float_bits = shifted_float_bits | 1;\n    }\n    uint shifted_normalized_mantissa = normalized_mantissa & 0x1fffff | 0x100000;\n    float_bits = shifted_float_bits | shifted_normalized_mantissa << (0x20 - shift & 0xff);\n    shifted_normalized_mantissa = (shifted_normalized_mantissa >> (shift & 0xff)) << 1;\n  }\n  exponent = (exponent_bits & 0x80000000 | float_bits >> 0x1d) + shifted_normalized_mantissa * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    exponent = exponent & 0xfffffffe;\n  }\n  return exponent;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "multiply_and_add_080093a4",
                "param_1": "param_size",
                "param_2": "input_array",
                "param_3": "input_length",
                "iVar1": "var1",
                "iVar2": "remaining_words",
                "puVar3": "result_array",
                "puVar4": "power_array"
            },
            "code": "undefined4 * multiply_and_add_080093a4(int param_size, undefined4 *input_array, uint input_length) {\n  int remaining_bytes = input_length & 3;\n  if (remaining_bytes != 0) {\n    input_array = (undefined4 *) __multadd(param_size, input_array, *(undefined4 *)(PTR_p05_6092_08009440 + ((remaining_bytes - 1) * 4)), 0);\n  }\n  int remaining_words = (int) input_length >> 2;\n  if (remaining_words != 0) {\n    undefined4 *power_array = *(undefined4 **)(param_size + 0x48);\n    if (power_array == (undefined4 *)0x0) {\n      power_array = (undefined4 *) _Balloc(param_size, 1);\n      power_array[4] = 1;\n      power_array[5] = 0x271;\n      *(undefined4 **)(param_size + 0x48) = power_array;\n      *power_array = 0;\n    }\n    undefined4 *result_array = input_array;\n    if (remaining_words << 0x1f < 0) {\n      goto LAB_080093d2;\n    }\nLAB_080093c4:\n    remaining_words = remaining_words >> 1;\n    result_array = power_array;\n    if (remaining_words != 0) {\n      while (true) {\n        undefined4 *temp_array = (undefined4 *) *power_array;\n        if (temp_array == (undefined4 *)0x0) {\n          temp_array = (undefined4 *) __multiply(param_size, power_array, power_array);\n          *power_array = temp_array;\n          *temp_array = 0;\n        }\n        power_array = input_array;\n        if (-1 < remaining_words << 0x1f) {\n          break;\n        }\nLAB_080093d2:\n        input_array = (undefined4 *) __multiply(param_size, power_array, temp_array);\n        if (power_array == (undefined4 *)0x0) {\n          break;\n        }\n        int var1 = *(int *)(param_size + 0x4c);\n        remaining_words = remaining_words >> 1;\n        *power_array = *(undefined4 *)(var1 + power_array[1] * 4);\n        *(undefined4 **)(var1 + power_array[1] * 4) = power_array;\n        power_array = temp_array;\n        if (remaining_words == 0) {\n          return input_array;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return input_array;\n}\n",
            "called": [
                "_Balloc",
                "__multadd",
                "__multiply"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "multiply_and_add_080093a4"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "__aeabi_drsub",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "initialize_exit_function_if_not_set_080078a0",
                "DAT_080078ac": "PTR_exit_function_initialized",
                "DAT_080078b0": "PTR_exit_function"
            },
            "code": "void initialize_exit_function_if_not_set_080078a0(void)\n{\n    if (DAT_080078ac != 0) {\n        atexit(DAT_080078b0);\n        return;\n    }\n    return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_exit_function_if_not_set_080078a0"
        },
        "FUN_080056c8": {
            "renaming": {
                "FUN_080056c8": "infinite_loop_080056c8"
            },
            "code": "void infinite_loop_080056c8(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c8",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_080056c8"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "initialize_system_080057e8",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr"
            },
            "code": "void initialize_system_080057e8(void)\n{\n  int index;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8655_08005828;\n  undefined4 *tick_prio_ptr = PTR_uwTickPrio_08005820;\n  code *jumptable_ptr = (code *)0x800581a;\n\n  for (index = 0; tick_prio_ptr + index < PTR_completed_8655_08005824; index += 4) {\n    *(undefined4 *)(tick_prio_ptr + index) = *(undefined4 *)(PTR___fini_array_end_0800581c + index);\n  }\n\n  for (; completed_ptr < PTR__ebss_0800582c; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n\n  SystemInit();\n  __libc_init_array();\n\n  // Jump to main\n  (*jumptable_ptr)();\n}\n",
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_080057e8"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "check_if_params_match_080008f4",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_zero",
                "bVar3": "is_second_greater_than_fourth"
            },
            "code": "uint check_if_params_match_080008f4(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  bool is_first_param_zero = (first_param | second_param << 1) == 0;\n  bool is_third_param_zero = (third_param | fourth_param << 1) == 0;\n  bool do_second_and_fourth_match = second_param == fourth_param;\n  bool do_first_and_third_match = first_param == third_param;\n  bool is_second_xor_fourth_zero = (second_param ^ fourth_param) == 0;\n  bool is_second_greater_than_fourth = fourth_param <= second_param;\n  bool should_return_one = true;\n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  if (!is_first_param_zero || !is_third_param_zero) {\n    should_return_one = do_second_and_fourth_match && do_first_and_third_match && (is_second_xor_fourth_zero ? is_second_greater_than_fourth : true);\n  }\n  return should_return_one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_params_match_080008f4"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_timer_channel_080036a8",
                "*htim": "timer_handle",
                "Channel": "channel",
                "DAT_080036f4": "DAT_080036f4",
                "htim->Instance": "timer_handle->Instance",
                "BDTR": "BDTR",
                "CR1": "CR1",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef set_timer_channel_080036a8(TIM_HandleTypeDef *timer_handle, uint32_t channel) {\n  TIM_CCxChannelCmd(timer_handle->Instance, channel, 1);\n  if (timer_handle->Instance == DAT_080036f4) {\n    timer_handle->Instance->BDTR |= 0x8000;\n  }\n  timer_handle->Instance->CR1 |= 1;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "set_timer_channel_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR___malloc_av__08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR___malloc_trim_threshold_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_08008ad0);\n    }\nLAB_080089f0:\n    __malloc_unlock(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR___malloc_av__08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    __malloc_unlock(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  __malloc_unlock(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "HAL_Init": "initialize_hal",
                "SystemClock_Config": "configure_system_clock",
                "MX_GPIO_Init": "initialize_gpio",
                "MX_I2C1_Init": "initialize_i2c",
                "MX_USART1_UART_Init": "initialize_uart",
                "MX_TIM2_Init": "initialize_timers",
                "MX_TIM1_Init": "initialize_timers",
                "PTR_I2C_Write_Reg_0800527c": "i2c_write_register_pointer",
                "DAT_08005280": "i2c_write_register_data",
                "PTR_I2C_Read_Reg_08005284": "i2c_read_register_pointer",
                "DAT_08005288": "i2c_read_register_data",
                "PTR_Get_ms_tick_0800528c": "ms_tick_pointer",
                "DAT_08005290": "ms_tick_data",
                "HAL_TIM_PWM_Start": "start_pwm",
                "PTR_htim1_08005294": "pwm_timer_pointer",
                "HAL_TIM_Base_Start_IT": "start_timer_interrupt",
                "PTR_htim2_0800529c": "interrupt_timer_pointer",
                "mpu6050_init": "initialize_mpu6050",
                "PTR_mpu6050_08005298": "mpu6050_pointer",
                "startForkserver": "start_forkserver"
            },
            "code": "int initialize_system_08005224(void)\n{\n    HAL_Init();\n    SystemClock_Config();\n    initialize_gpio();\n    initialize_i2c();\n    initialize_uart();\n    initialize_timers();\n    set_i2c_write_register(PTR_I2C_Write_Reg_0800527c, DAT_08005280);\n    set_i2c_read_register(PTR_I2C_Read_Reg_08005284, DAT_08005288);\n    set_ms_tick(PTR_Get_ms_tick_0800528c, DAT_08005290);\n    start_pwm(PTR_htim1_08005294);\n    start_pwm_channel(PTR_htim1_08005294, 0xc);\n    initialize_mpu6050(PTR_mpu6050_08005298);\n    start_timer_interrupt(PTR_htim2_0800529c);\n    start_forkserver(0);\n    while (true) {\n        /* WARNING: Do nothing block with infinite loop */\n    }\n}\n",
            "called": [
                "HAL_TIM_PWM_Start",
                "HAL_TIM_Base_Start_IT",
                "MX_I2C1_Init",
                "startForkserver",
                "MX_TIM1_Init",
                "MX_GPIO_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config",
                "HAL_Init",
                "mpu6050_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_system_08005224"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_i2c_08005348",
                "HVar1": "status",
                "PTR_hi2c1_080053a0": "hi2c1_instance",
                "DAT_080053a4": "i2c_config[0]",
                "DAT_080053a8": "i2c_config[1]",
                "PTR_s____src_main_c_080053ac": "error_handler",
                "0": "i2c_config[2]",
                "0xc": "i2c_config[3]",
                "0x10": "i2c_config[4]",
                "0x14": "i2c_config[5]",
                "0x18": "i2c_config[6]",
                "0x1c": "i2c_config[7]",
                "0x20": "i2c_config[8]"
            },
            "code": "void initialize_i2c_08005348(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t i2c_config[5] = {DAT_080053a4, DAT_080053a8, 0, 0, 0x4000};\n  I2C_HandleTypeDef PTR_hi2c1_080053a0 = (I2C_HandleTypeDef *)PTR_hi2c1_080053a0;\n  memcpy(&PTR_hi2c1_080053a0->Init, i2c_config, sizeof(i2c_config));\n  status = HAL_I2C_Init(PTR_hi2c1_080053a0);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_080053ac, 0x17a);\n  }\n}\n",
            "called": [
                "_Error_Handler",
                "HAL_I2C_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_i2c_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_mpu6050_offsets_080049cc",
                "mpu6050": "mpu",
                "acc_roll": "acc_roll_offset",
                "acc_pitch": "acc_pitch_offset",
                "now": "current_time",
                "num_samples": "num_samples",
                "i": "i",
                "offset_accRoll": "acc_roll_offset",
                "offset_accPitch": "acc_pitch_offset",
                "offset_gyroY": "gyro_y_offset",
                "offset_gyroX": "gyro_x_offset",
                "uVar1": "undefined_var",
                "fVar2": "float_var"
            },
            "code": "void calculate_mpu6050_offsets_080049cc(Mpu6050 *mpu6050)\n{\n  int num_samples = 1;\n  float gyro_x_offset = 0.0;\n  float gyro_y_offset = 0.0;\n  float acc_pitch_offset = 0.0;\n  float acc_roll_offset = 0.0;\n  uint32_t current_time = (**(code **)PTR_Get_ms_tick_08004adc)();\n  \n  for (int i = 0; i < num_samples; i++) {\n    float acc_pitch = 0.0;\n    float acc_roll = 0.0;\n    mpu6050_update(mpu6050);\n    mpu6050_calc_acc_pitch_roll(mpu6050, &acc_pitch, &acc_roll);\n    acc_pitch_offset += acc_pitch;\n    acc_roll_offset += acc_roll;\n    gyro_x_offset += mpu6050->gyroX;\n    gyro_y_offset += mpu6050->gyroY;\n    current_time = (**(code **)PTR_Get_ms_tick_08004adc)();\n  }\n  \n  mpu6050->offset_gyroX = gyro_x_offset / num_samples;\n  mpu6050->offset_gyroY = gyro_y_offset / num_samples;\n  mpu6050->offset_acc_pitch = acc_pitch_offset / num_samples;\n  mpu6050->offset_acc_roll = acc_roll_offset / num_samples;\n}",
            "called": [
                "mpu6050_calc_acc_pitch_roll",
                "__addsf3",
                "__aeabi_fdiv",
                "mpu6050_update",
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "mpu6050_init"
            ],
            "imported": false,
            "current_name": "calculate_mpu6050_offsets_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "configure_timer_08003c94",
                "TIMx": "timer",
                "Structure": "config",
                "tmpcr1": "cr1_register_value",
                "DAT_08003d54": "timer2",
                "DAT_08003d58": "timer3",
                "DAT_08003d5c": "timer4"
            },
            "code": "void configure_timer_08003c94(TIM_TypeDef *timer, TIM_Base_InitTypeDef *config) {\n  uint32_t cr1_register_value;\n  cr1_register_value = timer->CR1;\n  if ((((timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000)) || (timer == DAT_08003d58)) || (timer == DAT_08003d5c)) {\n    cr1_register_value = config->CounterMode | cr1_register_value & 0xffffff8f;\n  }\n  if (((timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000)) || ((timer == DAT_08003d58 || (timer == DAT_08003d5c)))) {\n    cr1_register_value = config->ClockDivision | cr1_register_value & 0xfffffcff;\n  }\n  timer->CR1 = config->AutoReloadPreload | cr1_register_value & 0xffffff7f;\n  timer->ARR = config->Period;\n  timer->PSC = config->Prescaler;\n  if (timer == DAT_08003d54) {\n    timer->RCR = config->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_08003c94"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "param_1": "requested_size",
                "param_2": "alignment",
                "puVar1": "malloc_av",
                "puVar2": "malloc_info",
                "iVar3": "brk_result",
                "iVar4": "block_size",
                "uVar5": "page_size_mask"
            },
            "code": "int allocate_memory_block_0800884c(int requested_size, int alignment) {\n  void* malloc_av = PTR___malloc_av__080088e0;\n  __malloc_lock();\n  uint32_t page_size_mask = *(uint32_t *)(*(int *)(malloc_av + 8) + 4) & 0xfffffffc;\n  int block_size = ((0xfef - alignment) + page_size_mask & 0xfffff000) - 0x1000;\n  if (0xfff < block_size) {\n    int brk_result = _sbrk_r(requested_size, 0);\n    if (brk_result == *(int *)(malloc_av + 8) + page_size_mask) {\n      brk_result = _sbrk_r(requested_size, -block_size);\n      void* malloc_info = PTR___malloc_current_mallinfo_080088e4;\n      if (brk_result != -1) {\n        int current_mallinfo = *(int *)malloc_info;\n        *(uint32_t *)(*(int *)(malloc_av + 8) + 4) = page_size_mask - block_size | 1;\n        *(int *)malloc_info = current_mallinfo - block_size;\n        __malloc_unlock(requested_size);\n        return 1;\n      }\n      block_size = _sbrk_r(requested_size, 0);\n      malloc_info = PTR___malloc_current_mallinfo_080088e4;\n      uint32_t new_block_size = block_size - *(int *)(malloc_av + 8);\n      if (0xf < (int)new_block_size) {\n        int sbrk_base = *(int *)PTR___malloc_sbrk_base_080088e8;\n        *(uint32_t *)(*(int *)(malloc_av + 8) + 4) = new_block_size | 1;\n        *(int *)malloc_info = block_size - sbrk_base;\n      }\n    }\n  }\n  __malloc_unlock(requested_size);\n  return 0;\n}",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "reverse_memory_0800901c",
                "__s": "memory",
                "__c": "character",
                "__n": "size",
                "uVar1": "character_shifted",
                "uVar2": "xor_result",
                "puVar3": "memory_ptr_next",
                "puVar4": "memory_ptr",
                "uVar5": "character_masked",
                "bVar6": "end_of_memory"
            },
            "code": "void * reverse_memory_0800901c(void *memory, int character, size_t size) {\n  uint character_masked = character & 0xff;\n  uint *memory_ptr = (uint *)memory;\n  if (((uint)memory & 3) == 0) {\n    while (size > 3) {\n      uint character_shifted = (character_masked << 8) | character_masked;\n      uint *memory_ptr_next = memory_ptr + 1;\n      uint xor_result = *memory_ptr_next ^ (character_shifted | (character_shifted << 16));\n      if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) {\n        break;\n      }\n      size -= 4;\n      memory_ptr = memory_ptr_next;\n    }\n  }\n  while (size > 0) {\n    if (*memory_ptr != character_masked) {\n      memory_ptr++;\n      size--;\n    } else {\n      return memory_ptr;\n    }\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "reverse_memory_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_clk_source_0800177c",
                "CLKSource": "clk_source",
                "DAT_080017b0": "data_ptr"
            },
            "code": "void set_clk_source_0800177c(uint32_t clk_source)\n{\n    uint32_t* DAT_080017b0 = DAT_080017b0;\n    if (clk_source == 4) {\n        *DAT_080017b0 |= 4;\n    }\n    else {\n        *DAT_080017b0 &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clk_source_0800177c"
        },
        "FUN_080099ec": {
            "renaming": {
                "FUN_080099ec": "get_first_byte_080099ec",
                "param_1": "default_value",
                "param_2": "output",
                "param_3": "input_buffer",
                "param_4": "buffer_size",
                "uVar1": "first_byte",
                "uStack_4": "first_byte"
            },
            "code": "uint get_first_byte_080099ec(uint default_value, uint *output, byte *input_buffer, int buffer_size) {\n  uint first_byte = 0;\n  if (output == (uint *)0x0) {\n    output = &first_byte;\n  }\n  if (input_buffer == (byte *)0x0 || buffer_size == 0) {\n    return 0;\n  }\n  *output = (uint)*input_buffer;\n  if (*output != 0) {\n    *output = 1;\n  }\n  else {\n    *output = default_value;\n  }\n  return *output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099ec",
            "calling": [],
            "imported": false,
            "current_name": "get_first_byte_080099ec"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_uart_08005598",
                "HVar1": "status",
                "DAT_080055ec": "baud_rate",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "PTR_huart1_080055e8": "PTR_huart1_080055e8",
                "PTR_s____src_main_c_080055f0": "PTR_s____src_main_c_080055f0",
                "UART_WORDLENGTH_8B": "word_length",
                "UART_STOPBITS_1": "stop_bits",
                "UART_PARITY_NONE": "parity",
                "UART_MODE_TX_RX": "mode",
                "UART_HWCONTROL_NONE": "flow_control"
            },
            "code": "void initialize_uart_08005598(void)\n{\n    HAL_StatusTypeDef status;\n    uint32_t DAT_080055ec = 115200;\n    uint32_t word_length = UART_WORDLENGTH_8B;\n    uint32_t stop_bits = UART_STOPBITS_1;\n    uint32_t parity = UART_PARITY_NONE;\n    uint32_t mode = UART_MODE_TX_RX;\n    uint32_t flow_control = UART_HWCONTROL_NONE;\n\n    *(uint32_t*)PTR_huart1_080055e8 = DAT_080055ec;\n    *(uint32_t*)(PTR_huart1_080055e8 + 4) = word_length | (stop_bits << 12) | (parity << 16) | (mode << 24) | (flow_control << 28);\n    *(uint32_t*)(PTR_huart1_080055e8 + 8) = 0;\n    *(uint32_t*)(PTR_huart1_080055e8 + 0xc) = 0;\n    *(uint32_t*)(PTR_huart1_080055e8 + 0x10) = 0;\n    *(uint32_t*)(PTR_huart1_080055e8 + 0x14) = 0xc;\n    *(uint32_t*)(PTR_huart1_080055e8 + 0x18) = 0;\n    *(uint32_t*)(PTR_huart1_080055e8 + 0x1c) = 0;\n    status = HAL_UART_Init((UART_HandleTypeDef*)PTR_huart1_080055e8);\n    if (status != HAL_OK)\n    {\n        _Error_Handler(PTR_s____src_main_c_080055f0, 0x1ed);\n    }\n}",
            "called": [
                "_Error_Handler",
                "HAL_UART_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_uart_08005598"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  size_t sVar8;\n  int *piVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  int iVar13;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)_malloc_r(param_1,param_3);\n    return piVar4;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__08009e38;\n  uVar7 = param_2[-1];\n  uVar11 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar10 = 0x10;\n  }\n  else {\n    uVar10 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar10 < 0) goto LAB_08009b8e;\n  }\n  if (uVar10 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar13 = (int)piVar4 + uVar11;\n  uVar12 = uVar11;\n  if ((int)uVar11 < (int)uVar10) {\n    if (*(int *)(PTR___malloc_av__08009e38 + 8) == iVar13) {\n      iVar13 = (*(uint *)(*(int *)(PTR___malloc_av__08009e38 + 8) + 4) & 0xfffffffc) + uVar11;\n      if ((int)(uVar10 + 0x10) <= iVar13) {\n        *(uint *)(PTR___malloc_av__08009e38 + 8) = (int)piVar4 + uVar10;\n        *(uint *)((int)piVar4 + uVar10 + 4) = iVar13 - uVar10 | 1;\n        param_2[-1] = uVar10 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar10 + 0x10) <= (int)(iVar13 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          sVar8 = uVar11 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (sVar8 < 0x25) {\n            iVar3 = *param_2;\n            piVar9 = piVar4;\n            if (0x13 < sVar8) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (sVar8 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar9 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (sVar8 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar9 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar9 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar9 = iVar3;\n            piVar9[1] = param_2[1];\n            piVar9[2] = param_2[2];\n          }\n          else {\n            memmove(piVar4,param_2,sVar8);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar10;\n          *(uint *)((int)piVar2 + uVar10 + 4) = (iVar13 + uVar7) - uVar10 | 1;\n          piVar2[1] = uVar10 | piVar2[1] & 1U;\n          __malloc_unlock(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar12 = uVar11 + uVar7;\n        if ((int)uVar10 <= (int)uVar12) {\n          iVar6 = piVar2[3];\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar11 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          memmove(piVar9,param_2,uVar11 - 4);\n          param_2 = piVar9;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar13 + 4) & 0xfffffffe) + iVar13 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar13 + 4) & 0xfffffffc;\n        uVar12 = uVar11 + uVar5;\n        if ((int)uVar12 < (int)uVar10) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar12 = uVar5 + uVar7 + uVar11;\n          if ((int)uVar12 < (int)uVar10) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar13 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar13;\n          *(int *)(iVar13 + 8) = iVar3;\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar11 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar11 = uVar11 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar9;\n          if (0x13 < uVar11) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar11 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar11 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar9;\n        }\n        else {\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar6 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar4 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)_malloc_r(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar12 = uVar11 + (piVar2[-1] & 0xfffffffcU);\n        iVar13 = (int)piVar4 + uVar12;\n        goto LAB_08009c00;\n      }\n      sVar8 = uVar11 - 4;\n      if (sVar8 < 0x25) {\n        iVar13 = *param_2;\n        piVar4 = param_2;\n        piVar9 = piVar2;\n        if (0x13 < sVar8) {\n          *piVar2 = iVar13;\n          piVar2[1] = param_2[1];\n          if (sVar8 < 0x1c) {\n            iVar13 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar9 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (sVar8 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar13 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar9 = piVar2 + 6;\n            }\n            else {\n              iVar13 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar9 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar9 = iVar13;\n        piVar9[1] = piVar4[1];\n        piVar9[2] = piVar4[2];\n      }\n      else {\n        memmove(piVar2,param_2,sVar8);\n      }\n      _free_r(param_1,param_2);\n    }\n    __malloc_unlock(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar12 - uVar10 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar12;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar10;\n      *(uint *)((int)piVar4 + uVar10 + 4) = uVar12 - uVar10 | 1;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n      _free_r(param_1,(int)piVar4 + uVar10 + 8);\n    }\n    __malloc_unlock(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "memmove",
                "_malloc_r",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "i2c_read_08002640",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef i2c_read_08002640(I2C_HandleTypeDef *i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout, uint32_t start_tick)\n{\n    HAL_StatusTypeDef status;\n    uint32_t current_tick;\n    i2c_handle->Instance->CR1 |= 0x100;\n    do {\n        if ((~i2c_handle->Instance->SR1 & 1) == 0) {\n            return HAL_ERROR;\n        }\n        current_tick = HAL_GetTick();\n    } while ((timeout != 0xffffffff) && (timeout != 0) && ((current_tick - start_tick) <= timeout));\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    if ((byte)device_address & 0xfe) {\n        i2c_handle->Instance->DR = (byte)device_address & 0xfe;\n        status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c_handle, DAT_080027f0, timeout, start_tick);\n        if (status != HAL_OK) {\n            return status;\n        }\n        status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout, start_tick);\n        if (status != HAL_OK) {\n            return status;\n        }\n        if (memory_address_size == 1) {\n            i2c_handle->Instance->DR = (uint)(byte)memory_address;\n        } else {\n            i2c_handle->Instance->DR = (uint)(byte)(memory_address >> 8);\n            status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout, start_tick);\n            if (status != HAL_OK) {\n                if (i2c_handle->ErrorCode == 4) {\n                    i2c_handle->Instance->CR1 |= 0x200;\n                    return HAL_ERROR;\n                }\n                return HAL_TIMEOUT;\n            }\n            i2c_handle->Instance->DR = (uint)(byte)memory_address;\n        }\n        status = HAL_OK;\n    } else {\n        status = HAL_TIMEOUT;\n    }\n    return status;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "i2c_read_08002640"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "print_formatted_string_08005dfc",
                "__s": "destination",
                "__format": "format",
                "local_80": "destination_array",
                "local_78": "destination_len",
                "uStack_74": "unknown_stack_var",
                "local_70": "destination_ptr",
                "local_6c": "max_len",
                "uStack_8": "unknown_stack_var",
                "uStack_4": "unknown_stack_var",
                "*local_80[0]": "null_terminate_destination",
                "iVar1": "result"
            },
            "code": "int print_formatted_string_08005dfc(char* destination, const char* format, ...)\n{\n  int result;\n  va_list args;\n  va_start(args, format);\n  result = vsnprintf(destination, INT_MAX, format, args);\n  va_end(args);\n  return result;\n}",
            "called": [
                "_svfprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08005dfc"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "bitwise_shift_080003f4",
                "param_1": "input",
                "uVar1": "unused_1",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_plus_0x15",
                "uVar6": "is_negative",
                "in_r12": "unused_2",
                "bVar7": "leading_zeroes_negative",
                "bVar8": "leading_zeroes_zero",
                "bVar9": "shift_amount_overflow",
                "PTR_FUN_080002c8": "count_leading_zeroes",
                "DAT_08000432": "max_shift_amount"
            },
            "code": "ulonglong bitwise_shift_080003f4(uint input)\n{\n    uint is_negative = input & 0x80000000;\n    uint abs_input = (is_negative < 0) ? -input : input;\n    uint leading_zeroes = PTR_FUN_080002c8(abs_input);\n    uint shift_amount = leading_zeroes + 0x15;\n    uint output = 0;\n    if (shift_amount < 0x20)\n    {\n        shift_amount = (shift_amount < 0xb) ? 0xb : shift_amount;\n        output = abs_input << (shift_amount & 0xff);\n        output = output >> (0xc - leading_zeroes & 0xff);\n    }\n    else\n    {\n        uint trailing_zeroes = 0x20 - shift_amount;\n        output = abs_input << (leading_zeroes & 0xff);\n        output = (output | 0U >> (trailing_zeroes & 0xff)) & ((shift_amount == 0x20) ? -1 : 0xffffffff << trailing_zeroes);\n        if (shift_amount > 0x432)\n        {\n            uint excess_shift = ~(0x432 - shift_amount);\n            if (excess_shift > 0x1e)\n            {\n                return (input & 0x80000000ffffffff) | (abs_input >> (excess_shift - 0x1f & 0xff));\n            }\n            else\n            {\n                int shift_diff = excess_shift - 0x13;\n                if (shift_diff == 0 || (shift_diff < 0) != ((excess_shift - 0x1f) < 0xc))\n                {\n                    excess_shift++;\n                    return ((is_negative | (abs_input >> (excess_shift & 0xff))) << 0x20) | (output >> (excess_shift & 0xff));\n                }\n                else\n                {\n                    return (input & 0x80000000ffffffff) | (output >> (0x20 - (0xc - shift_diff) & 0xff)) | (abs_input << (0xc - shift_diff & 0xff));\n                }\n            }\n        }\n    }\n    return ((is_negative | (output | (abs_input >> (0x432 - shift_amount & 0xff)) << (shift_amount - 0x432 & 0xff))) << 0x20) | (output >> (0x432 - shift_amount & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "bitwise_shift_080003f4"
        },
        "FUN_0800045c": {
            "renaming": {
                "FUN_0800045c": "calculate_0800045c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "uint_var_1",
                "uVar3": "uint_var_2",
                "uVar4": "uint_var_3",
                "uVar5": "uint_var_4",
                "uVar6": "uint_var_5",
                "iVar5": "int_var_1",
                "iVar7": "int_var_2",
                "bVar1": "byte_var",
                "bVar9": "bool_var_1",
                "bVar10": "bool_var_2",
                "bVar11": "bool_var_3"
            },
            "code": "ulonglong calculate_0800045c(uint input_1, uint input_2)\n{\n    byte byte_var;\n    uint uint_var_1;\n    uint uint_var_2;\n    uint uint_var_3;\n    int int_var_1;\n    uint uint_var_4;\n    int int_var_2;\n    uint uint_var_5;\n    bool bool_var_1;\n    bool bool_var_2;\n    bool bool_var_3;\n    if ((input_1 | input_2) == 0)\n    {\n        return CONCAT44(input_2, input_1);\n    }\n    int_var_2 = 0x432;\n    uint_var_5 = input_2 >> 0x16;\n    if (uint_var_5 != 0)\n    {\n        int_var_2 = 3;\n        if (input_2 >> 0x19 != 0)\n        {\n            int_var_2 = 6;\n        }\n        if (input_2 >> 0x1c != 0)\n        {\n            int_var_2 = int_var_2 + 3;\n        }\n        uint_var_3 = int_var_2 - ((int)input_2 >> 0x1f);\n        uint_var_5 = input_1 << (0x20 - uint_var_3 & 0xff);\n        input_1 = input_1 >> (uint_var_3 & 0xff) | input_2 << (0x20 - uint_var_3 & 0xff);\n        input_2 = input_2 >> (uint_var_3 & 0xff);\n        int_var_2 = uint_var_3 + 0x432;\n    }\n    if (0xfffff < input_2)\n    {\n        if (0x1fffff < input_2)\n        {\n            uint_var_3 = input_2 & 1;\n            input_2 = input_2 >> 1;\n            byte_var = (byte)input_1;\n            input_1 = (uint)(uint_var_3 != 0) << 0x1f | input_1 >> 1;\n            uint_var_5 = (uint)(byte_var & 1) << 0x1f | uint_var_5 >> 1;\n            int_var_2 = int_var_2 + 1;\n            if (0xffbfffff < (uint)(int_var_2 * 0x200000))\n            {\n                return 0x7ff0000000000000;\n            }\n        }\n        goto LAB_08000268;\n    }\n    bool_var_1 = (uint_var_5 & 0x80000000) != 0;\n    uint_var_5 = uint_var_5 << 1;\n    uint_var_3 = input_1 * 2;\n    bool_var_2 = CARRY4(input_1, input_1);\n    input_1 = input_1 * 2 + (uint)bool_var_1;\n    input_2 = input_2 * 2 + (uint)(bool_var_2 || CARRY4(uint_var_3, (uint)bool_var_1));\n    int_var_2 = int_var_2 + -1;\n    if ((input_2 & 0x100000) != 0)\n    {\n        goto LAB_08000268;\n    }\n    uint_var_1 = input_1;\n    uint_var_3 = input_2;\n    if (input_2 == 0)\n    {\n        uint_var_1 = 0;\n        uint_var_3 = input_1;\n    }\n    int_var_1 = count_leading_zeroes(uint_var_3);\n    if (input_2 == 0)\n    {\n        int_var_1 = int_var_1 + 0x20;\n    }\n    uint_var_4 = int_var_1 - 0xb;\n    bool_var_3 = SBORROW4(uint_var_4, 0x20);\n    uint_var_2 = int_var_1 - 0x2b;\n    bool_var_2 = (int)uint_var_2 < 0;\n    bool_var_1 = uint_var_2 == 0;\n    if ((int)uint_var_4 < 0x20)\n    {\n        bool_var_3 = SCARRY4(uint_var_2, 0xc);\n        int_var_1 = int_var_1 + -0x1f;\n        bool_var_2 = int_var_1 < 0;\n        bool_var_1 = int_var_1 == 0;\n        uint_var_4 = uint_var_4;\n        if (!bool_var_1 && bool_var_2 == bool_var_3)\n        {\n            uint_var_5 = uint_var_3 & 0xff;\n            uint_var_1 = uint_var_3 << (uint_var_4 & 0xff);\n            uint_var_3 = uint_var_3 >> (0xcU - int_var_1 & 0xff);\n            goto LAB_080002e0;\n        }\n    }\n    if (bool_var_1 || bool_var_2 != bool_var_3)\n    {\n        uint_var_5 = 0x20 - uint_var_4;\n    }\n    uint_var_3 = uint_var_3 << (uint_var_4 & 0xff);\n    if (bool_var_1 || bool_var_2 != bool_var_3)\n    {\n        uint_var_3 = uint_var_3 | uint_var_1 >> (uint_var_5 & 0xff);\n    }\n    if (bool_var_1 || bool_var_2 != bool_var_3)\n    {\n        uint_var_1 = uint_var_1 << (uint_var_4 & 0xff);\n    }\nLAB_080002e0:\n    if ((int)uint_var_4 <= int_var_2)\n    {\n        return CONCAT44(uint_var_3 + (int_var_2 - uint_var_4) * 0x100000, uint_var_1);\n    }\n    uint_var_5 = ~(int_var_2 - uint_var_4);\n    if (0x1e < (int)uint_var_5)\n    {\n        return (ulonglong)(uint_var_3 >> (uint_var_5 - 0x1f & 0xff));\n    }\n    int_var_2 = uint_var_5 - 0x13;\n    if (int_var_2 == 0 || int_var_2 < 0 != SCARRY4(uint_var_5 - 0x1f, 0xc))\n    {\n        uint_var_5 = uint_var_5 + 1;\n        return CONCAT44(uint_var_3 >> (uint_var_5 & 0xff), uint_var_1 >> (uint_var_5 & 0xff) | uint_var_3 << (0x20 - uint_var_5 & 0xff));\n    }\n    return (ulonglong)(uint_var_1 >> (0x20 - (0xcU - int_var_2) & 0xff) | uint_var_3 << (0xcU - int_var_2 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800045c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_0800045c"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "calculate_priority_0800166c",
                "PriorityGroup": "priority_group",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "SubPriorityBits": "sub_priority_bits",
                "PreemptPriorityBits": "preempt_priority_bits",
                "PriorityGroupTmp": "priority_group_tmp",
                "uVar1": "priority_group_value",
                "uVar2": "priority_group_shift",
                "uVar3": "preempt_priority_shift",
                "uVar4": "sub_priority_shift",
                "uVar5": "priority_group_adjusted",
                "uVar6": "preempt_priority_adjusted",
                "uVar7": "sub_priority_adjusted",
                "uVar8": "priority_group_mask"
            },
            "code": "uint32_t calculate_priority_0800166c(uint32_t priority_group, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t sub_priority_bits;\n  uint32_t preempt_priority_bits;\n  uint32_t priority_group_tmp;\n\n  uint32_t priority_group_mask = 0x07;\n  uint32_t priority_group_shift = 0x03;\n  uint32_t preempt_priority_shift = 0x00;\n  uint32_t sub_priority_shift = 0x00;\n\n  uint32_t priority_group_value = priority_group & priority_group_mask;\n  uint32_t preempt_priority_value = preempt_priority << preempt_priority_shift;\n  uint32_t sub_priority_value = sub_priority << sub_priority_shift;\n\n  uint32_t priority_group_adjusted = priority_group_value + priority_group_shift;\n  uint32_t preempt_priority_adjusted = preempt_priority_value & ~(-1 << priority_group_adjusted);\n  uint32_t sub_priority_adjusted = sub_priority_value & (-1 << priority_group_adjusted);\n\n  return preempt_priority_adjusted | sub_priority_adjusted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "calculate_priority_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "enable_timer_interrupt_0800360c",
                "htim": "timer_handle",
                "Instance": "TIMx",
                "DIER": "TIM_DIER_UIE",
                "CR1": "TIM_CR1_CEN"
            },
            "code": "HAL_StatusTypeDef enable_timer_interrupt_0800360c(TIM_HandleTypeDef *timer_handle)\n{\n  timer_handle->Instance->DIER |= TIM_DIER_UIE;\n  timer_handle->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enable_timer_interrupt_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "better_string_fill_08005d68",
                "__s": "str",
                "__c": "character",
                "__n": "length",
                "puVar1": "byte_ptr",
                "puVar2": "aligned_ptr",
                "puVar3": "byte_ptr",
                "uVar4": "remaining_bytes",
                "uVar5": "aligned_character",
                "bVar6": "is_last_byte_unaligned"
            },
            "code": "void * better_string_fill_08005d68(void *str, int character, size_t length)\n{\n    uint32_t *word_ptr;\n    uint32_t *end_ptr;\n    uint32_t *aligned_ptr;\n    uint32_t aligned_character;\n    uint32_t remaining_bytes;\n    uint8_t *byte_ptr;\n\n    aligned_ptr = (uint32_t *)str;\n\n    if (((uint32_t)str & 3) != 0) {\n        remaining_bytes = length - 1;\n        byte_ptr = (uint8_t *)str;\n        if (length == 0) {\n            return str;\n        }\n        while (true) {\n            byte_ptr++;\n            *byte_ptr = (uint8_t)character;\n            length = remaining_bytes;\n            if (((uint32_t)byte_ptr & 3) == 0) {\n                break;\n            }\n            remaining_bytes--;\n            if (remaining_bytes == 0) {\n                return str;\n            }\n        }\n        aligned_ptr = (uint32_t *)(byte_ptr + 1);\n    }\n\n    aligned_character = (uint8_t)character;\n    aligned_character |= aligned_character << 8;\n    aligned_character |= aligned_character << 16;\n\n    end_ptr = aligned_ptr + (length / 4);\n    word_ptr = aligned_ptr;\n    while (word_ptr < end_ptr) {\n        *word_ptr++ = aligned_character;\n    }\n\n    remaining_bytes = length % 4;\n    byte_ptr = (uint8_t *)word_ptr;\n    while (remaining_bytes--) {\n        *byte_ptr++ = (uint8_t)character;\n    }\n\n    return str;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "_calloc_r",
                "flush_strbuf"
            ],
            "imported": false,
            "current_name": "better_string_fill_08005d68"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "initialize_timer_080035a4",
                "htim": "timer",
                "HVar1": "status",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_Base_MspInit": "HAL_TIM_Base_MspInit",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef initialize_timer_080035a4(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_Base_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "update_channel_state_080041ea",
                "TIMx": "timer",
                "Channel": "channel_num",
                "ChannelState": "new_state",
                "tmp": "bit_shift",
                "CCER": "mask"
            },
            "code": "void update_channel_state_080041ea(TIM_TypeDef *timer, uint32_t channel_num, uint32_t new_state) {\n  uint32_t bit_shift = channel_num & 0xff;\n  uint32_t mask = ~(1 << bit_shift);\n  timer->CCER &= mask;\n  timer->CCER |= new_state << bit_shift;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "update_channel_state_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "read_mpu6050_data_08004ae0",
                "mpu6050": "mpu",
                "raw": "raw_data",
                "fVar1": "acc_x, acc_y, acc_z, temp, gyro_x, gyro_y, gyro_z",
                "gz": "gz",
                "gy": "gy",
                "gx": "gx",
                "t": "t",
                "az": "az",
                "ay": "ay",
                "ax": "ax"
            },
            "code": "void read_mpu6050_data_08004ae0(Mpu6050 *mpu6050)\n{\n  float acc_x;\n  float acc_y;\n  float acc_z;\n  float temp;\n  float gyro_x;\n  float gyro_y;\n  float gyro_z;\n  uint8_t raw_data[14];\n  int16_t gz;\n  int16_t gy;\n  int16_t gx;\n  int16_t t;\n  int16_t az;\n  int16_t ay;\n  int16_t ax;\n  (**(code **)PTR_I2C_Read_Reg_08004bd4)(0xd0,0x3b,raw_data,0xe);\n  acc_x = (float)__floatsisf((int)CONCAT11(raw_data[0],raw_data[1]));\n  mpu6050->accX = acc_x;\n  acc_y = (float)__floatsisf((int)CONCAT11(raw_data[2],raw_data[3]));\n  mpu6050->accY = acc_y;\n  acc_z = (float)__floatsisf((int)CONCAT11(raw_data[4],raw_data[5]));\n  mpu6050->accZ = acc_z;\n  temp = (float)__floatsisf((int)CONCAT11(raw_data[6],raw_data[7]));\n  mpu6050->temp = temp;\n  gyro_x = (float)__floatsisf((int)CONCAT11(raw_data[8],raw_data[9]));\n  mpu6050->gyroX = gyro_x;\n  gyro_y = (float)__floatsisf((int)CONCAT11(raw_data[10],raw_data[11]));\n  mpu6050->gyroY = gyro_y;\n  gyro_z = (float)__floatsisf((int)CONCAT11(raw_data[12],raw_data[13]));\n  mpu6050->gyroZ = gyro_z;\n  return;\n}",
            "called": [
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "read_mpu6050_data_08004ae0"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_bits_from_data_080015fc",
                "DAT_08001614": "PTR_data"
            },
            "code": "uint32_t get_bits_from_data_080015fc(void)\n{\n  uint32_t data = *(uint *)(DAT_08001614 + 0xc);\n  uint32_t bits = (data >> 8) & 7;\n  return bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "get_bits_from_data_080015fc"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_if_initialized_08000110",
                "param_1": "input_string",
                "*PTR_completed_8655_08000128": "is_completed",
                "DAT_0800012c": "data",
                "PTR__init_08000130": "init_pointer"
            },
            "code": "char* check_if_initialized_08000110(char* input_string) {\\n\\tif (*PTR_completed_8655_08000128 == \"\\0\") {\\n\\t\\tif (DAT_0800012c != 0) {\\n\\t\\t\\tinput_string = PTR__init_08000130;\\n\\t\\t}\\n\\t\\t*PTR_completed_8655_08000128 = 1;\\n\\t}\\n\\treturn input_string;\\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_initialized_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_system_core_clock_08003504",
                "PTR_SystemCoreClock_08003514": "system_core_clock_ptr"
            },
            "code": "uint32_t get_system_core_clock_08003504(void)\n{\n    return *(uint32_t *)PTR_SystemCoreClock_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "get_system_core_clock_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08000c2c": {
            "renaming": {
                "FUN_08000c2c": "calculate_hash_08000c2c",
                "param_1": "input_value",
                "param_2": "input_seed",
                "uVar1": "hash_value",
                "uVar2": "seed_value",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shifted_input_seed",
                "iVar5": "multiplier",
                "uVar6": "shifted_input_value"
            },
            "code": "uint calculate_hash_08000c2c(uint input_value, uint input_seed)\n{\n  uint hash_value;\n  uint seed_value;\n  int leading_zeroes_count;\n  uint shifted_input_value;\n  int multiplier;\n  uint shifted_input_seed;\n  \n  if ((input_value | input_seed) == 0) {\n    return input_value;\n  }\n  hash_value = input_value;\n  seed_value = input_seed;\n  if (input_seed == 0) {\n    hash_value = 0;\n    seed_value = input_value;\n  }\n  multiplier = 0x5b000000;\n  if (input_seed == 0) {\n    multiplier = 0x4b000000;\n  }\n  leading_zeroes_count = count_leading_zeroes(seed_value);\n  shifted_input_seed = seed_value << (leading_zeroes_count - 8);\n  multiplier = multiplier - 0x800000 + shifted_input_seed * -0x800000;\n  if (leading_zeroes_count < 8) {\n    shifted_input_value = input_value << (leading_zeroes_count + 24);\n    seed_value = multiplier + ((seed_value >> (32 - (leading_zeroes_count + 24))) - ((int)shifted_input_value >> 31));\n    if ((hash_value | shifted_input_value << 1) == 0) {\n      seed_value = seed_value & ~(shifted_input_value >> 31);\n    }\n    return seed_value;\n  }\n  shifted_input_value = hash_value << (leading_zeroes_count - 8);\n  shifted_input_seed = seed_value << (leading_zeroes_count - 8);\n  seed_value = multiplier + (shifted_input_seed) + (hash_value >> (32 - leading_zeroes_count)) + (uint)(0x7fffffff < shifted_input_value);\n  if (shifted_input_value == 0x80000000) {\n    seed_value = seed_value & 0xfffffffe;\n  }\n  return seed_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c2c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08000c2c"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback",
                "__aeabi_frsub"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "is_end_of_string_080009ac",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009ac(void)\n{\n  char current_char;\n  __aeabi_cdcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009ac"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "initialize_uart_0800438a",
                "*huart": "*uart",
                "HVar1": "status",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_UART_STATE_RESET": "HAL_UART_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "HAL_UART_STATE_BUSY": "HAL_UART_STATE_BUSY",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "UART_SetConfig": "UART_SetConfig",
                "CR1": "CR1",
                "CR2": "CR2",
                "CR3": "CR3",
                "ErrorCode": "ErrorCode",
                "RxState": "RxState"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800438a(UART_HandleTypeDef *uart)\n{\n  HAL_StatusTypeDef status;\n  if (uart == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (uart->gState == HAL_UART_STATE_RESET) {\n      uart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart);\n    }\n    uart->gState = HAL_UART_STATE_BUSY;\n    uart->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart);\n    uart->Instance->CR2 &= ~(1 << 11);\n    uart->Instance->CR3 &= ~(1 << 2);\n    uart->Instance->CR1 |= (1 << 13);\n    uart->ErrorCode = 0;\n    uart->gState = HAL_UART_STATE_READY;\n    uart->RxState = HAL_UART_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "MX_USART1_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "initialize_peripherals_080014f0",
                "DAT_08001518": "ptr_peripheral_status_register",
                "HAL_NVIC_SetPriorityGrouping": "HAL_NVIC_SetPriorityGrouping",
                "FUN_080014f0Tick": "initialize_peripherals_tick",
                "HAL_MspInit": "HAL_MspInit",
                "HAL_OK": "HAL_OK",
                "0x10": "PERIPHERAL_STATUS_REGISTER_BIT",
                "3": "PRIORITY_GROUPING_VALUE",
                "0xf": "TICK_VALUE"
            },
            "code": "HAL_StatusTypeDef initialize_peripherals_080014f0(void)\n{\n  *DAT_08001518 |= PERIPHERAL_STATUS_REGISTER_BIT;\n  HAL_NVIC_SetPriorityGrouping(PRIORITY_GROUPING_VALUE);\n  initialize_peripherals_080014f0_tick(TICK_VALUE);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_InitTick",
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_080014f0"
        },
        "FUN_0800046c": {
            "renaming": {
                "FUN_0800046c": "calculate_dividend_0800046c",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "iVar5": "leading_zeroes_count",
                "uVar4": "temp_quotient",
                "iVar7": "shift_count",
                "uVar6": "quotient_sign_bit",
                "bVar1": "bit",
                "bVar10": "dividend_negative",
                "bVar11": "divisor_negative",
                "bVar12": "quotient_negative",
                "uVar8": "sign_bit",
                "uVar9": "temp_dividend",
                "CARRY4": "carry4",
                "SCARRY4": "signed_carry4",
                "SBORROW4": "signed_borrow4",
                "CONCAT44": "concatenate_44"
            },
            "code": "ulonglong calculate_dividend_0800046c(uint dividend,uint divisor)\n{\n  byte bit;\n  uint quotient;\n  uint remainder;\n  int shift_count;\n  uint sign_bit;\n  uint temp_dividend;\n  uint temp_quotient;\n  bool dividend_negative;\n  bool divisor_negative;\n  bool quotient_negative;\n  if ((dividend | divisor) == 0) {\n    return CONCAT44(divisor, dividend);\n  }\n  sign_bit = divisor & 0x80000000;\n  temp_dividend = divisor;\n  dividend_negative = (int)sign_bit < 0;\n  if (dividend_negative) {\n    dividend = -dividend;\n    temp_dividend = -divisor - (uint)(dividend != 0);\n  }\n  shift_count = 0x432;\n  if (temp_dividend >> 0x16 != 0) {\n    shift_count = 3;\n    if (temp_dividend >> 0x19 != 0) {\n      shift_count = 6;\n    }\n    if (temp_dividend >> 0x1c != 0) {\n      shift_count += 3;\n    }\n    remainder = temp_dividend >> (shift_count & 0xff);\n    quotient = dividend << (0x20 - shift_count & 0xff) | temp_dividend << (shift_count & 0xff) >> (shift_count & 0xff);\n    temp_dividend >>= shift_count & 0xff;\n    shift_count += 0x432;\n  }\n  else {\n    quotient = dividend;\n    remainder = temp_dividend;\n  }\n  if (remainder > 0xfffff) {\n    if (remainder > 0x1fffff) {\n      bit = remainder & 1;\n      remainder >>= 1;\n      bit = (byte)(dividend >> 31) | bit;\n      quotient = quotient >> 1 | bit << 0x1f;\n      shift_count++;\n      if ((shift_count * 0x200000 & 0xffc00000) != 0) {\n        return (ulonglong)(sign_bit | 0x7ff00000) << 0x20;\n      }\n    }\n    while (true) {\n      bit = remainder >> 0x1f;\n      remainder <<= 1;\n      bit |= dividend >> 31;\n      quotient = quotient << 1 | bit;\n      shift_count--;\n      if ((remainder & 0x100000) == 0) {\n        break;\n      }\n    }\n    uint quotient_sign_bit = 0x7fffffff < quotient;\n    if (quotient == 0x80000000) {\n      quotient_sign_bit = (dividend & 1) != 0;\n    }\n    return CONCAT44(remainder + shift_count * 0x100000 + (uint)CARRY4(dividend, quotient_sign_bit) | sign_bit, dividend + quotient_sign_bit);\n  }\n  bool remainder_sign_bit = (temp_dividend >> 0x1f) != 0;\n  temp_dividend = (temp_dividend << 1) | dividend >> 31;\n  quotient = dividend * 2 + (uint)remainder_sign_bit;\n  remainder = remainder * 2 + (uint)(CARRY4(dividend, dividend) || CARRY4(dividend, remainder_sign_bit));\n  shift_count--;\n  if ((remainder & 0x100000) != 0) {\n    while (true) {\n      bit = remainder >> 0x1f;\n      remainder <<= 1;\n      bit |= dividend >> 31;\n      quotient = quotient << 1 | bit;\n      shift_count--;\n      if ((remainder & 0x100000) == 0) {\n        break;\n      }\n    }\n  }\n  if (remainder == 0) {\n    remainder = quotient;\n    quotient = 0;\n  }\n  int leading_zeroes_count = count_leading_zeroes(remainder);\n  if (remainder == 0) {\n    leading_zeroes_count += 0x20;\n  }\n  int quotient_shift_count = leading_zeroes_count - 0xb;\n  bool quotient_shift_count_negative = quotient_shift_count < 0;\n  if (quotient_shift_count_negative || quotient_shift_count == 0) {\n    quotient_shift_count = leading_zeroes_count - 0x1f;\n    if (quotient_shift_count_negative != SBORROW4(leading_zeroes_count, 0x20)) {\n      temp_quotient = remainder << (quotient_shift_count & 0xff) | quotient >> (0x20 - quotient_shift_count & 0xff);\n      quotient = quotient << (quotient_shift_count & 0xff);\n      remainder = temp_quotient;\n    }\n  }\n  else if (quotient_shift_count < 0xc) {\n    temp_quotient = remainder << (quotient_shift_count & 0xff) | quotient >> (0x20 - quotient_shift_count & 0xff);\n    quotient = quotient << (quotient_shift_count & 0xff);\n    remainder = temp_quotient;\n  }\n  else {\n    quotient_shift_count = ~((uint)leading_zeroes_count - quotient_shift_count - 0x13);\n    if (quotient_shift_count == 0 || quotient_shift_count < 0 != SCARRY4((uint)leading_zeroes_count - quotient_shift_count, 0xc)) {\n      quotient_shift_count++;\n      temp_quotient = remainder >> (0x20 - quotient_shift_count & 0xff) | quotient << (quotient_shift_count & 0xff);\n      quotient = quotient >> (0x20 - quotient_shift_count & 0xff) | remainder << (quotient_shift_count & 0xff);\n      remainder = temp_quotient;\n    }\n    else {\n      temp_quotient = quotient << (quotient_shift_count - 0xc & 0xff) | remainder >> (0xc - quotient_shift_count & 0xff);\n      quotient = remainder >> (0x20 - (0xc - quotient_shift_count) & 0xff) | quotient << (0xc - quotient_shift_count & 0xff);\n      remainder = temp_quotient;\n    }\n  }\n  if (quotient_shift_count <= shift_count) {\n    return CONCAT44(remainder + (shift_count - quotient_shift_count) * 0x100000 | sign_bit, quotient);\n  }\n  uint remainder_shift_count = ~(shift_count - quotient_shift_count);\n  if (remainder_shift_count > 0x1e) {\n    return CONCAT44(divisor, remainder >> (remainder_shift_count - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int quotient_shift_count2 = remainder_shift_count - 0x13;\n  if (quotient_shift_count2 == 0 || quotient_shift_count2 < 0 != SCARRY4(remainder_shift_count - 0x1f, 0xc)) {\n    remainder_shift_count++;\n    return CONCAT44(sign_bit | remainder >> (remainder_shift_count & 0xff), quotient >> (remainder_shift_count & 0xff) | remainder << (0x20 - remainder_shift_count & 0xff));\n  }\n  return CONCAT44(divisor, quotient >> (0x20 - (0xcU - quotient_shift_count2) & 0xff) | remainder << (0xcU - quotient_shift_count2 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800046c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_dividend_0800046c"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "check_double_equals_080009c0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool check_double_equals_080009c0(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_zero;\n  is_CY_zero = __aeabi_cdcmpeq() == 1;\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "check_double_equals_080009c0"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "set_tim_oc_config_08003f18",
                "TIMx": "tim",
                "OC_Config": "oc_config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity",
                "tmpccmrx": "ccmr2",
                "tmpcr2": "cr2",
                "tmpccer": "ccer"
            },
            "code": "void set_tim_oc_config_08003f18(TIM_TypeDef *tim, TIM_OC_InitTypeDef *oc_config) {\n    uint32_t oc_polarity = oc_config->OCPolarity << 8 | tim->CCER & 0xfffffdff;\n    uint32_t cr2 = tim->CR2;\n    uint32_t ccmr2 = oc_config->OCMode | tim->CCMR2 & 0xffffff8c;\n\n    if (tim == PTR_08003ff4) {\n        oc_polarity = (oc_config->OCNPolarity << 8 | oc_polarity & 0xfffff7ff) & 0xfffffbff;\n        cr2 = oc_config->OCNIdleState << 4 | oc_config->OCIdleState << 4 | cr2 & 0xffffcfff;\n    }\n\n    tim->CR2 = cr2;\n    tim->CCR3 = oc_config->Pulse;\n    tim->CCER = oc_polarity;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_tim_oc_config_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "error_code_ptr",
                "param_2": "data_ptr",
                "param_3": "data_size_ptr",
                "pvVar1": "allocated_ptr",
                "pvVar2": "remaining_size",
                "iVar3": "remaining_size",
                "pvVar4": "realloc_ptr",
                "pvVar5": "dest_ptr",
                "ppvVar6": "data_array_ptr",
                "ppvVar7": "array_ptr",
                "__src": "src_ptr",
                "__n": "copy_size"
            },
            "code": "uint32_t process_data_080097cc(uint32_t *error_code_ptr, void **data_ptr, int *data_size_ptr)\n{\n    void *src_ptr;\n    void *dest_ptr;\n    int remaining_size;\n    void *realloc_ptr;\n    void *allocated_ptr;\n    void **data_array_ptr;\n    void **array_ptr;\n    size_t copy_size;\n    \n    if (data_size_ptr[2] != 0) {\n        allocated_ptr = *data_ptr;\n        realloc_ptr = data_ptr[2];\n        array_ptr = (void **)*data_size_ptr;\n        do {\n            do {\n                data_array_ptr = array_ptr + 2;\n                src_ptr = *array_ptr;\n                dest_ptr = array_ptr[1];\n                array_ptr = data_array_ptr;\n            } while (dest_ptr == NULL);\n            remaining_size = (int)dest_ptr;\n            if ((realloc_ptr <= dest_ptr) && ((*(ushort *)(data_ptr + 3) & 0x480) != 0)) {\n                copy_size = (int)allocated_ptr - (int)data_ptr[4];\n                realloc_ptr = (void *)(((int)data_ptr[5] * 3) / 2);\n                allocated_ptr = (void *)((int)dest_ptr + copy_size + 1);\n                if (realloc_ptr < allocated_ptr) {\n                    realloc_ptr = allocated_ptr;\n                }\n                if ((int)((uint)*(ushort *)(data_ptr + 3) << 0x15) < 0) {\n                    dest_ptr = (void *)malloc(copy_size);\n                    if (dest_ptr == NULL) {\n                        *error_code_ptr = 0xc;\n                        *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n                        data_size_ptr[1] = 0;\n                        data_size_ptr[2] = 0;\n                        return 0xffffffff;\n                    }\n                    memcpy(dest_ptr, data_ptr[4], copy_size);\n                    *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) & 0xfb7f | 0x80;\n                }\n                else {\n                    dest_ptr = (void *)realloc(realloc_ptr, copy_size);\n                    if (dest_ptr == NULL) {\n                        free(data_ptr[4]);\n                        *error_code_ptr = 0xc;\n                        *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n                        data_size_ptr[1] = 0;\n                        data_size_ptr[2] = 0;\n                        return 0xffffffff;\n                    }\n                }\n                allocated_ptr = (void *)((int)dest_ptr + copy_size);\n                data_ptr[5] = realloc_ptr;\n                data_ptr[4] = dest_ptr;\n                *data_ptr = allocated_ptr;\n                data_ptr[2] = (void *)((int)realloc_ptr - copy_size);\n                dest_ptr = remaining_size;\n            }\n            memmove(allocated_ptr, src_ptr, (size_t)dest_ptr);\n            remaining_size = data_size_ptr[2];\n            realloc_ptr = (void *)((int)data_ptr[2] - (int)dest_ptr);\n            allocated_ptr = (void *)((int)*data_ptr + (int)dest_ptr);\n            data_ptr[2] = realloc_ptr;\n            *data_ptr = allocated_ptr;\n            data_size_ptr[2] = remaining_size - (int)dest_ptr;\n        } while (remaining_size - (int)dest_ptr != 0);\n    }\n    data_size_ptr[1] = 0;\n    return 0;\n}",
            "called": [
                "_malloc_r",
                "memmove",
                "_free_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "process_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_08001f6c(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint uVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t Tickstart;\n  uint32_t uVar3;\n  char cVar4;\n  uint uVar5;\n  int iVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  \n  Tickstart = HAL_GetTick();\n  uVar1 = DAT_080021e0;\n  if (hi2c->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((uVar1 >> 0x10 & 0xff) == 1) {\n        uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      else {\n        uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      if (cVar4 != '\\x01') {\n        iVar6 = 0;\n        goto LAB_08002040;\n      }\n      uVar3 = HAL_GetTick();\n    } while (uVar3 - Tickstart < 0x1a);\n    hi2c->PreviousState = 0;\n    hi2c->State = HAL_I2C_STATE_READY;\n    hi2c->Mode = HAL_I2C_MODE_NONE;\n    hi2c->Lock = HAL_UNLOCKED;\n    iVar6 = 3;\nLAB_08002040:\n    if (iVar6 == 0) {\n      if (hi2c->Lock == HAL_LOCKED) {\n        HVar2 = HAL_BUSY;\n      }\n      else {\n        hi2c->Lock = HAL_LOCKED;\n        if ((hi2c->Instance->CR1 & 1) != 1) {\n          hi2c->Instance->CR1 = hi2c->Instance->CR1 | 1;\n        }\n        hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffff7ff;\n        hi2c->State = HAL_I2C_STATE_BUSY_RX;\n        hi2c->Mode = HAL_I2C_MODE_MEM;\n        hi2c->ErrorCode = 0;\n        hi2c->pBuffPtr = pData;\n        hi2c->XferCount = Size;\n        hi2c->XferOptions = DAT_080021e4;\n        hi2c->XferSize = hi2c->XferCount;\n        HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout,Tickstart);\n        if (HVar2 == HAL_OK) {\n          if (hi2c->XferSize == 0) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n          }\n          else if (hi2c->XferSize == 1) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (hi2c->XferSize == 2) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x800;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x400;\n          }\n          while (uVar1 = DAT_080024bc, hi2c->XferSize != 0) {\n            if (hi2c->XferSize < 4) {\n              if (hi2c->XferSize == 1) {\n                HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n                if (HVar2 != HAL_OK) {\n                  if (hi2c->ErrorCode == 0x20) {\n                    return HAL_TIMEOUT;\n                  }\n                  return HAL_ERROR;\n                }\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else if (hi2c->XferSize == 2) {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_080022fa:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                disableIRQinterrupts();\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_08002418:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                uVar1 = DAT_080024bc;\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_0800250a:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n            else {\n              HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n              if (HVar2 != HAL_OK) {\n                if (hi2c->ErrorCode == 0x20) {\n                  return HAL_TIMEOUT;\n                }\n                return HAL_ERROR;\n              }\n              uVar3 = hi2c->Instance->DR;\n              puVar7 = hi2c->pBuffPtr;\n              hi2c->pBuffPtr = puVar7 + 1;\n              *puVar7 = (uint8_t)uVar3;\n              hi2c->XferSize = hi2c->XferSize - 1;\n              hi2c->XferCount = hi2c->XferCount - 1;\n              if ((hi2c->Instance->SR1 & 4) == 4) {\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n          }\n          hi2c->State = HAL_I2C_STATE_READY;\n          hi2c->Mode = HAL_I2C_MODE_NONE;\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_OK;\n        }\n        else if (hi2c->ErrorCode == 4) {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_ERROR;\n        }\n        else {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      HVar2 = HAL_BUSY;\n    }\n  }\n  else {\n    HVar2 = HAL_BUSY;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "_i2c_read_reg"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "do_nothing_080014ec"
            },
            "code": "\nvoid do_nothing_080014ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080014ec"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_quotient_08000c3c",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "dividend_copy",
                "iVar3": "leading_zeroes",
                "uVar4": "shift",
                "uVar5": "sign_dividend",
                "iVar6": "temp",
                "uVar7": "dividend_shifted",
                "bVar8": "nonzero_dividend"
            },
            "code": "uint calculate_quotient_08000c3c(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint sign_dividend = divisor & 0x80000000;\n  if ((dividend | divisor) == 0) {\n    return dividend;\n  }\n  if ((int)sign_dividend < 0) {\n    bool nonzero_dividend = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)nonzero_dividend;\n  }\n  uint dividend_copy = dividend;\n  uint divisor_copy = divisor;\n  if (divisor == 0) {\n    dividend_copy = 0;\n    divisor_copy = dividend;\n  }\n  sign_dividend = sign_dividend | 0x5b000000;\n  if (divisor == 0) {\n    sign_dividend = sign_dividend + 0xf0000000;\n  }\n  int leading_zeroes = count_leading_zeroes(divisor_copy);\n  uint shift = leading_zeroes - 8;\n  int temp = (sign_dividend - 0x800000) + shift * -0x800000;\n  if (leading_zeroes < 8) {\n    uint divisor_shifted = divisor_copy << (leading_zeroes + 0x18U & 0xff);\n    temp = temp + ((divisor_copy >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)divisor_shifted >> 0x1f));\n    if ((dividend_copy | divisor_shifted << 1) == 0) {\n      temp = temp & ~(divisor_shifted >> 0x1f);\n    }\n    quotient = temp;\n  }\n  else {\n    uint dividend_shifted = dividend_copy << (shift & 0xff);\n    quotient = temp + (divisor_copy << (shift & 0xff)) + (dividend_copy >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < dividend_shifted);\n    if (dividend_shifted == 0x80000000) {\n      quotient = quotient & 0xfffffffe;\n    }\n  }\n  return quotient;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_quotient_08000c3c"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_HCLK_frequency_divided_by_APB_prescaler_08003518",
                "uVar1": "HCLK_frequency",
                "DAT_08003538": "DAT_offset",
                "PTR_APBPrescTable_0800353c": "APB_prescaler_table",
                "APB_prescaler_index": "APB_prescaler_index",
                "APB_prescaler_value": "APB_prescaler_value"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003518(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(uint *)(DAT_08003538 + 4) >> 8) & 7;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_0800353c[APB_prescaler_index];\n  return HCLK_frequency >> APB_prescaler_value;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003518"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_other_bits_08005780",
                "DAT_080057dc": "ptr_bit_field",
                "DAT_080057e0": "mask_1",
                "DAT_080057e4": "ptr_structure",
                "mask_1": "mask_1",
                "mask_2": "0xfef6ffff",
                "mask_3": "0xfffbffff",
                "mask_4": "0xff80ffff"
            },
            "code": "void set_bit_and_clear_other_bits_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 1;\n  DAT_080057dc[1] = DAT_080057e0 & DAT_080057dc[1];\n  *DAT_080057dc = *DAT_080057dc & mask_2;\n  *DAT_080057dc = *DAT_080057dc & mask_3;\n  DAT_080057dc[1] = DAT_080057dc[1] & mask_4;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e4 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_08005780"
        },
        "FUN_08000fe0": {
            "renaming": {
                "FUN_08000fe0": "is_not_null_08000fe0",
                "in_ZR": "input_char"
            },
            "code": "bool is_not_null_08000fe0(char input_char) {\n  __aeabi_cfcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fe0",
            "calling": [],
            "imported": false,
            "current_name": "is_not_null_08000fe0"
        },
        "FUN_08008818": {
            "renaming": {
                "FUN_08008818": "call_global_destructors_08008818",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_ptr"
            },
            "code": "void call_global_destructors_08008818() {\n  int num_destructors = (int)PTR___fini_array_end_08008844 - (int)PTR___do_global_dtors_aux_fini_array_entry_08008848 >> 2;\n  if (num_destructors != 0) {\n    code **destructor_ptr = (code **)(PTR___do_global_dtors_aux_fini_array_entry_08008848 + (num_destructors + 0x3fffffff) * 4);\n    do {\n      num_destructors--;\n      (**destructor_ptr)();\n      destructor_ptr--;\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "__do_global_dtors_aux",
                "_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008818",
            "calling": [],
            "imported": false,
            "current_name": "call_global_destructors_08008818"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "decode_uint_08000418",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "iVar6": "temp_6",
                "uVar7": "temp_7",
                "in_r12": "temp_8",
                "bVar8": "is_ff",
                "bVar9": "is_zero",
                "bVar10": "is_negative"
            },
            "code": "ulonglong decode_uint_08000418(uint input, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int temp_6;\n  uint temp_7;\n  uint temp_8;\n  bool is_zero;\n  bool is_ff;\n  bool is_negative;\n  \n  temp_5 = input << 1;\n  is_zero = temp_5 == 0;\n  temp_1 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  temp_4 = (uint)((int)temp_5 >> 3) >> 1;\n  temp_3 = temp_1 | temp_4;\n  input = input << 0x1d;\n  if (!is_zero) {\n    temp_8 = temp_5 & 0xff000000;\n    is_zero = temp_8 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp_8 == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(temp_3, input) ^ 0x3800000000000000;\n  }\n  if ((temp_5 & 0xffffff) == 0) {\n    return CONCAT44(temp_3, input);\n  }\n  if (temp_8 == 0xff000000) {\n    return CONCAT44(temp_3, input) | 0x8000000000000;\n  }\n  temp_2 = input;\n  temp_5 = temp_4;\n  if (temp_4 == 0) {\n    temp_2 = 0;\n    temp_5 = input;\n  }\n  temp_6 = count_leading_zeroes(temp_5);\n  if (temp_4 == 0) {\n    temp_6 = temp_6 + 0x20;\n  }\n  temp_7 = temp_6 - 0xb;\n  is_negative = SBORROW4(temp_7, 0x20);\n  temp_4 = temp_6 - 0x2b;\n  is_zero = (int)temp_4 < 0;\n  is_ff = temp_4 == 0;\n  if ((int)temp_7 < 0x20) {\n    is_negative = SCARRY4(temp_4, 0xc);\n    temp_6 = temp_6 + -0x1f;\n    is_zero = temp_6 < 0;\n    is_ff = temp_6 == 0;\n    temp_4 = temp_7;\n    if (!is_ff && is_zero == is_negative) {\n      temp_2 = temp_5 << (temp_7 & 0xff);\n      temp_5 = temp_5 >> (0xcU - temp_6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_ff || is_zero != is_negative) {\n    temp_8 = 0x20 - temp_4;\n  }\n  temp_5 = temp_5 << (temp_4 & 0xff);\n  if (is_ff || is_zero != is_negative) {\n    temp_5 = temp_5 | temp_2 >> (temp_8 & 0xff);\n  }\n  if (is_ff || is_zero != is_negative) {\n    temp_2 = temp_2 << (temp_4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp_7 < 0x381) {\n    return CONCAT44(temp_5 + (0x380 - temp_7) * 0x100000 | temp_1, temp_2);\n  }\n  temp_4 = ~(0x380 - temp_7);\n  if (0x1e < (int)temp_4) {\n    return CONCAT44(temp_3, temp_5 >> (temp_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  temp_6 = temp_4 - 0x13;\n  if (temp_6 == 0 || temp_6 < 0 != SCARRY4(temp_4 - 0x1f, 0xc)) {\n    temp_4 = temp_4 + 1;\n    return CONCAT44(temp_1 | temp_5 >> (temp_4 & 0xff),\n                    temp_2 >> (temp_4 & 0xff) | temp_5 << (0x20 - temp_4 & 0xff));\n  }\n  return CONCAT44(temp_3,temp_2 >> (0x20 - (0xcU - temp_6) & 0xff) | temp_5 << (0xcU - temp_6 & 0xff)) &\n         0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "decode_uint_08000418"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "initialize_gpio_pins_080055f4",
                "GPIO_InitStruct": "gpio_init_struct",
                "tmpreg_2": "pin_reset_mask",
                "tmpreg_1": "unused_variable",
                "tmpreg": "unused_variable"
            },
            "code": "void initialize_gpio_pins_080055f4(void)\n{\n  uint32_t pin_reset_mask = 0x20 | 0x4 | 0x8;\n  *(uint *)(DAT_0800566c + 0x18) |= pin_reset_mask;\n  HAL_GPIO_WritePin(DAT_08005670, 0x1e, GPIO_PIN_RESET);\n  GPIO_InitTypeDef gpio_init_struct;\n  gpio_init_struct.Pin = 0x1e;\n  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;\n  gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n  HAL_GPIO_Init(DAT_08005670, &gpio_init_struct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pins_080055f4"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "configure_timers_080053b0",
                "HVar1": "status",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "sConfigOC": "oc_init",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_source_config"
            },
            "code": "void configure_timers_080053b0(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_BreakDeadTimeConfigTypeDef break_dead_time_config;\n  TIM_OC_InitTypeDef oc_init;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_source_config;\n  htim1.Instance = TIM1;\n  htim1.Init.Prescaler = 0x708;\n  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;\n  htim1.Init.Period = 100;\n  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  htim1.Init.RepetitionCounter = 0;\n  status = HAL_TIM_Base_Init(&htim1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  clock_source_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource(&htim1, &clock_source_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_Init(&htim1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization(&htim1, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  oc_init.OCMode = TIM_OCMODE_PWM1;\n  oc_init.Pulse = 0;\n  oc_init.OCPolarity = TIM_OCPOLARITY_HIGH;\n  oc_init.OCFastMode = TIM_OCFAST_DISABLE;\n  oc_init.OCIdleState = TIM_OCIDLESTATE_RESET;\n  status = HAL_TIM_PWM_ConfigChannel(&htim1, &oc_init, TIM_CHANNEL_1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_ConfigChannel(&htim1, &oc_init, TIM_CHANNEL_2);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  break_dead_time_config.OffStateRunMode = TIM_OSSR_DISABLE;\n  break_dead_time_config.OffStateIDLEMode = TIM_OSSI_DISABLE;\n  break_dead_time_config.LockLevel = TIM_LOCKLEVEL_OFF;\n  break_dead_time_config.DeadTime = 0;\n  break_dead_time_config.BreakState = TIM_BREAK_DISABLE;\n  break_dead_time_config.BreakPolarity = TIM_BREAKPOLARITY_HIGH;\n  break_dead_time_config.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;\n  status = HAL_TIMEx_ConfigBreakDeadTime(&htim1, &break_dead_time_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  HAL_TIM_MspPostInit(&htim1);\n  return;\n}",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIM_MspPostInit",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "configure_timers_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "calculate_tick_delay_080016d0",
                "ticks": "current_ticks",
                "DAT_08001710": "tick_ptr",
                "bVar1": "is_valid_tick"
            },
            "code": "uint32_t calculate_tick_delay_080016d0(uint32_t current_ticks)\n{\n    bool is_valid_tick = current_ticks - 1 < 0x1000000;\n    if(is_valid_tick)\n    {\n        uint32_t* DAT_08001710 = (uint32_t*)0xE000E010;\n        *(DAT_08001710 + 1) = current_ticks - 1;\n        NVIC_SetPriority(SysTick_IRQn, 0xf);\n        *DAT_08001710 = 7;\n        *(DAT_08001710 + 2) = 0;\n    }\n    return (uint32_t)!is_valid_tick;\n}",
            "called": [
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "imported": false,
            "current_name": "calculate_tick_delay_080016d0"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "convert_to_double_0800088a",
                "param_1": "integer_part",
                "param_2": "fraction_part",
                "param_3": "sign_bit",
                "param_4": "exponent",
                "uVar1": "msb_integer_part",
                "unaff_r4": "sign_bit_mask",
                "uVar2": "exponent_bits",
                "uVar3": "mantissa",
                "in_r12": "exponent_mask",
                "bVar4": "is_zero"
            },
            "code": "ulonglong convert_to_double_0800088a(uint32_t integer_part, uint32_t fraction_part, uint32_t sign_bit, uint32_t exponent) {\n  uint32_t mantissa;\n  uint32_t exponent_bits;\n  if (sign_bit != exponent || (exponent_bits = exponent & (0xFF << 20)) != (0xFF << 20)) {\n    if (sign_bit == exponent) {\n      if ((integer_part | fraction_part << 12) == 0 && exponent_bits != (0xFF << 20)) {\n        return ((uint64_t)((fraction_part ^ exponent) & 0x80000000 | 0x7ff00000)) << 32;\n      }\n    } else if (exponent_bits == (0xFF << 20)) {\n      if ((integer_part | fraction_part << 12) == 0) {\n        return ((uint64_t)((fraction_part ^ exponent) & 0x80000000)) << 32;\n      }\n    } else {\n      bool is_zero = (integer_part | fraction_part << 1) == 0;\n      if (!is_zero) {\n        is_zero = (exponent | fraction_part << 1) == 0;\n      }\n      if (!is_zero) {\n        if (sign_bit == 0) {\n          uint32_t sign_bit_mask = fraction_part & 0x80000000;\n          do {\n            uint32_t msb_integer_part = integer_part & 0x80000000;\n            integer_part = integer_part << 1;\n            fraction_part = fraction_part * 2 + (uint32_t)(msb_integer_part != 0);\n          } while ((fraction_part & 0x100000) == 0);\n          fraction_part |= sign_bit_mask;\n          if (exponent_bits != 0) {\n            return ((uint64_t)fraction_part << 32) | integer_part;\n          }\n        }\n        do {\n          uint32_t msb_exponent = exponent & 0x80000000;\n          exponent = exponent << 1;\n          fraction_part = fraction_part * 2 + (uint32_t)(msb_exponent != 0);\n        } while ((fraction_part & 0x100000) == 0);\n        return ((uint64_t)fraction_part << 32) | integer_part;\n      }\n      if ((integer_part | fraction_part << 1) != 0) {\n        return ((uint64_t)((fraction_part ^ exponent) & 0x80000000 | 0x7ff00000)) << 32;\n      }\n      if ((exponent | fraction_part << 1) != 0) {\n        return ((uint64_t)((fraction_part ^ exponent) & 0x80000000)) << 32;\n      }\n    }\n  }\n  return ((uint64_t)fraction_part << 32) | integer_part | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "convert_to_double_0800088a"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_impure_ptr_value_08005d14",
                "PTR__impure_ptr_08005d1c": "impure_ptr"
            },
            "code": "int get_impure_ptr_value_08005d14() {\n    return *(int *)PTR__impure_ptr_08005d1c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "_sbrk"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_priority_group_080015b4",
                "PriorityGroup": "priority_group",
                "reg_value": "reg_value",
                "PriorityGroupTmp": "priority_group_tmp",
                "DAT_080015f8": "dat_ptr",
                "uint": "uint32_t",
                "priority_ptr": "priority_ptr",
                "priority_mask": "priority_mask",
                "priority_shift": "priority_shift",
                "priority_value": "priority_value"
            },
            "code": "void set_priority_group_080015b4(uint32_t priority_group) {\n    uint32_t reg_value;\n    uint32_t priority_group_tmp;\n    uint32_t* DAT_080015f8 = (uint32_t*) DAT_080015f8;\n    uint32_t* priority_ptr = DAT_080015f8 + 0xc;\n    uint32_t priority_mask = 0xf8ff;\n    uint32_t priority_shift = 8;\n    uint32_t priority_value = (priority_group & 7) << priority_shift | 0x5fa0000;\n    *priority_ptr = (*priority_ptr & priority_mask) | priority_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "imported": false,
            "current_name": "set_priority_group_080015b4"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_external_trigger_080041a8",
                "TIMx": "timer",
                "TIM_ExtTRGPrescaler": "prescaler",
                "TIM_ExtTRGPolarity": "polarity",
                "ExtTRGFilter": "filter",
                "tmpsmcr": "smcr_value"
            },
            "code": "void set_external_trigger_080041a8(TIM_TypeDef *timer, uint32_t prescaler, uint32_t polarity, uint32_t filter) {\n  uint32_t smcr_value = timer->SMCR;\n  smcr_value &= 0xffff00ff;\n  smcr_value |= (prescaler | (filter << 8) | polarity);\n  timer->SMCR = smcr_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_external_trigger_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "frexp",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08000a9c": {
            "renaming": {
                "FUN_08000a9c": "FUNC_08000a9c"
            },
            "code": "\nuint FUNC_08000a9c(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000bde:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000a9c",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000a9c"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_locale_ptr_08008ad4",
                "puVar1": "locale_ptr"
            },
            "code": "undefined* get_locale_ptr_08008ad4()\n{\n    undefined* locale_ptr = *(undefined**)(*(int*)PTR__impure_ptr_08008ae8 + 0x34);\n    if (locale_ptr == (undefined*)0x0)\n    {\n        locale_ptr = PTR___global_locale_08008aec;\n    }\n    return locale_ptr + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "get_locale_ptr_08008ad4"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674",
                "file": "filename",
                "line": "line_num"
            },
            "code": "void infinite_loop_08005674(char *filename, int line_num)\n{\n  while(1) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "MX_I2C1_Init",
                "MX_TIM1_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "set_timer_input_capture_08004104",
                "TIMx": "timer",
                "TIM_ICPolarity": "input_polarity",
                "TIM_ICFilter": "input_filter",
                "tmpccer": "ccer_value",
                "tmpccmr1": "ccmr1_value"
            },
            "code": "void set_timer_input_capture_08004104(TIM_TypeDef *timer, uint32_t input_polarity, uint32_t input_filter) {\n  uint32_t ccer_value = timer->CCER & 0xffffffef;\n  uint32_t ccmr1_value = (input_filter << 0xc) | (timer->CCMR1 & 0xffff0fff);\n  uint32_t updated_ccer_value = (input_polarity << 4) | (ccer_value & 0xffffff5f);\n  timer->CCER = updated_ccer_value;\n  timer->CCMR1 = ccmr1_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_timer_input_capture_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "is_end_of_string_08000ff4",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08000ff4(void)\n{\n  char current_char;\n  __aeabi_cfcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000ff4"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "calculate_08005d0c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_08005d0c(double input){\n  double result;\n  \n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "__ieee754_atan2",
                "atan"
            ],
            "imported": false,
            "current_name": "calculate_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "count_bytes_until_null_08005e40",
                "__s": "str",
                "iVar1": "byte_offset",
                "puVar2": "word_ptr",
                "uVar4": "word"
            },
            "code": "size_t count_bytes_until_null_08005e40(uint num) {\n  size_t count = 0;\n  while (num) {\n    count++;\n    num >>= 1;\n  }\n  return count;\n}\n\nsize_t count_bytes_until_null_08005e40(char *str) {\n  uint *word_ptr = (uint *)((uint)str & 0xfffffffc);\n  int byte_offset = -((uint)str & 3);\n  uint word = *word_ptr;\n  if (((uint)str & 3) != 0) {\n    word |= 0xffffffffU >> ((byte_offset + 4U & 0x1f) << 3);\n  }\n  while (true) {\n    word_ptr++;\n    word = word + 0xfefefeff & ~word & 0x80808080;\n    if (word != 0) {\n      break;\n    }\n    word = *word_ptr;\n    byte_offset += 4;\n  }\n  size_t leading_zeroes = count_bytes_until_null_08005e40(word & -word);\n  return byte_offset + (0x1fU - leading_zeroes >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "run_preinit_array_08005d20",
                "param_1": "context",
                "puVar1": "dtors_aux_fini_array_entry",
                "iVar2": "i",
                "ppcVar3": "preinit_array",
                "iVar4": "preinit_array_size",
                "end_preinit_array": "end_preinit_array",
                "start_preinit_array": "start_preinit_array",
                "end_do_global_dtors_aux_fini_array_entry": "end_do_global_dtors_aux_fini_array_entry",
                "dtors_array": "dtors_array",
                "dtors_array_size": "dtors_array_size"
            },
            "code": "void run_preinit_array_08005d20(EVP_PKEY_CTX *context)\n{\n  int preinit_array_size = (int)end_preinit_array - (int)start_preinit_array >> 2;\n  if (preinit_array_size != 0) {\n    int i = 0;\n    code **preinit_array = (code **)start_preinit_array;\n    do {\n      context = (EVP_PKEY_CTX *)(*(*preinit_array))();\n      preinit_array++;\n      i++;\n    } while (preinit_array_size != i);\n  }\n  code **dtors_array = (code **)end_preinit_array;\n  undefined *dtors_aux_fini_array_entry = end_do_global_dtors_aux_fini_array_entry;\n  _init(context);\n  int dtors_array_size = (int)dtors_aux_fini_array_entry - (int)dtors_array >> 2;\n  if (dtors_array_size != 0) {\n    int i = 0;\n    do {\n      (*(*dtors_array))();\n      dtors_array++;\n      i++;\n    } while (dtors_array_size != i);\n  }\n  return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "run_preinit_array_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_gpio_pin_state_08001a80",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "uint": "unsigned int"
            },
            "code": "void set_gpio_pin_state_08001a80(GPIO_TypeDef *gpio, uint16_t pin, GPIO_PinState state) {\n  if (state == GPIO_PIN_RESET) {\n    gpio->BSRR = (uint)pin << 0x10;\n  }\n  else {\n    gpio->BSRR = (uint)pin;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "MX_GPIO_Init",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08001a80"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "acquire_malloc_recursive_mutex_080090a8"
            },
            "code": "void acquire_malloc_recursive_mutex_080090a8(void)\n{\n  __retarget_lock_acquire_recursive(PTR___lock___malloc_recursive_mutex_080090b0);\n  return;\n}",
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "acquire_malloc_recursive_mutex_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "execute_afl_call_08004e74",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_08004ea0": "PTR_noHyperCall_08004ea0"
            },
            "code": "uint32_t execute_afl_call_08004e74(int ticks) {\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_08004ea0 == 0) {\n    result = aflCall(1, ticks, 0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_afl_call_08004e74"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "process_data_0800910c",
                "param_1": "data_address",
                "param_2": "data_pointer",
                "iVar1": "data_array_address"
            },
            "code": "void process_data_0800910c(int data_address, undefined4 *data_pointer) {\n  int data_array_address;\n  if (data_pointer != (undefined4 *)0x0) {\n    data_array_address = *(int *)(data_address + 0x4c);\n    *data_pointer = *(undefined4 *)(data_array_address + data_pointer[1] * 4);\n    *(undefined4 **)(data_array_address + data_pointer[1] * 4) = data_pointer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "process_data_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "initialize_clocks_080052a0",
                "HVar1": "status",
                "uVar2": "hclk_freq",
                "RCC_ClkInitStruct": "clk_init",
                "RCC_OscInitStruct": "osc_init",
                "RCC_OscInitStruct.OscillatorType": "osc_init.OscillatorType",
                "RCC_OscInitStruct.HSEState": "osc_init.HSEState",
                "RCC_OscInitStruct.HSEPredivValue": "osc_init.HSEPredivValue",
                "RCC_OscInitStruct.HSIState": "osc_init.HSIState",
                "RCC_OscInitStruct.PLL.PLLState": "osc_init.PLL.PLLState",
                "RCC_OscInitStruct.PLL.PLLSource": "osc_init.PLL.PLLSource",
                "RCC_OscInitStruct.PLL.PLLMUL": "osc_init.PLL.PLLMUL",
                "RCC_ClkInitStruct.ClockType": "clk_init.ClockType",
                "RCC_ClkInitStruct.SYSCLKSource": "clk_init.SYSCLKSource",
                "RCC_ClkInitStruct.AHBCLKDivider": "clk_init.AHBCLKDivider",
                "RCC_ClkInitStruct.APB1CLKDivider": "clk_init.APB1CLKDivider",
                "RCC_ClkInitStruct.APB2CLKDivider": "clk_init.APB2CLKDivider",
                "SysTick_IRQn": "SysTick_IRQn",
                "DAT_08005344": "SYSTICK_RELOAD_VALUE"
            },
            "code": "void initialize_clocks_080052a0(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  osc_init.HSEState = RCC_HSE_ON;\n  osc_init.HSEPredivValue = RCC_HSE_PREDIV_DIV1;\n  osc_init.HSIState = RCC_HSI_ON;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  osc_init.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x151);\n  }\n  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x15e);\n  }\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)((uint64_t)DAT_08005344 * (uint64_t)hclk_freq / (uint64_t)1000000));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_clocks_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_hash_08009120",
                "param_1": "buffer_size",
                "param_2": "buffer",
                "param_3": "num_words",
                "param_4": "hash_value",
                "puVar1": "new_buffer",
                "uVar2": "carryover",
                "iVar3": "num_words_index",
                "puVar4": "words",
                "iVar5": "alloc_table"
            },
            "code": "undefined4* calculate_hash_08009120(int buffer_size, undefined4* buffer, int num_words, uint32_t hash_value)\n{\n  undefined4* new_buffer;\n  uint32_t carryover = 0;\n  int word_index = buffer[4];\n  uint32_t* words = (uint32_t*)(buffer + 5);\n  for(int i = 0; i < word_index; i++) {\n    uint64_t product = (uint64_t)num_words * (uint64_t)(*words);\n    product += carryover;\n    *words = product & 0xffffffff;\n    carryover = product >> 32;\n    words++;\n  }\n  new_buffer = buffer;\n  if(carryover != 0) {\n    if(buffer[2] <= word_index) {\n      new_buffer = (undefined4*)_Balloc(buffer_size, buffer[1] + 1);\n      memcpy(new_buffer + 3, buffer + 3, (buffer[4] + 2) * 4);\n      int alloc_table = *(int*)(buffer_size + 0x4c);\n      *buffer = *(undefined4*)(alloc_table + buffer[1] * 4);\n      *(undefined4**)(alloc_table + buffer[1] * 4) = buffer;\n    }\n    new_buffer[word_index + 5] = carryover;\n    new_buffer[4] = word_index + 1;\n  }\n  return new_buffer;\n}",
            "called": [
                "_Balloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009120"
        },
        "FUN_08000f58": {
            "renaming": {
                "FUN_08000f58": "calculate_result_08000f58",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "is_negative",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "result",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f58(uint input_1, uint input_2) {\n  bool is_negative;\n  uint double_input_1 = input_1 * 2;\n  uint double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) && ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  uint result = double_input_1 | input_2 & 0x7fffffff;\n  bool is_zero = result == 0;\n  if (!is_zero) {\n    result = input_1 ^ input_2;\n    is_zero = result == 0;\n  }\n  is_negative = -1 < (int)result;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f58",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f58"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dst8",
                "puVar2": "dst32",
                "puVar3": "dst32",
                "puVar4": "dst8",
                "puVar5": "src32",
                "puVar6": "src8",
                "uVar7": "i",
                "uVar8": "size",
                "bVar9": "is_less_than_size"
            },
            "code": "void * copy_memory_08001084(void * destination, const void * source, size_t size)\n{\n    uint32_t *dst32, *src32;\n    uint8_t *dst8, *src8;\n    size_t i;\n\n    if ((((uint32_t)source | (uint32_t)destination) & 3) != 0) {\n        if (size < 8) {\n            dst8 = (uint8_t *)destination;\n            src8 = (uint8_t *)source;\n            for (i = 0; i < size; i++) {\n                dst8[i] = src8[i];\n            }\n            return destination;\n        }\n\n        if ((((uint32_t)source & 3) != 0) && (((uint32_t)destination & 3) != 0)) {\n            dst8 = (uint8_t *)destination;\n            src8 = (uint8_t *)source;\n            while ((uint32_t)dst8 & 3) {\n                *dst8++ = *src8++;\n                size--;\n            }\n            dst32 = (uint32_t *)dst8;\n            src32 = (uint32_t *)src8;\n            for (i = 0; i < size / 4; i++) {\n                dst32[i] = src32[i];\n            }\n            dst8 = (uint8_t *)&dst32[i];\n            src8 = (uint8_t *)&src32[i];\n            size &= 3;\n        }\n    }\n\n    dst32 = (uint32_t *)destination;\n    src32 = (uint32_t *)source;\n    for (i = 0; i < size / 4; i++) {\n        dst32[i] = src32[i];\n    }\n\n    dst8 = (uint8_t *)&dst32[i];\n    src8 = (uint8_t *)&src32[i];\n    for (i = 0; i < size; i++) {\n        dst8[i] = src8[i];\n    }\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "_dtoa_r",
                "__multadd",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "initialize_gpio_pin_08005680",
                "*htim": "timer_handler",
                "GPIO_InitStruct": "gpio_init_struct",
                "Instance": "timer_instance",
                "DAT_080056b4": "TIM3",
                "Pin": "gpio_pin",
                "Mode": "gpio_mode",
                "Speed": "gpio_speed",
                "DAT_080056b8": "GPIOB",
                "HAL_GPIO_Init": "GPIO_Init"
            },
            "code": "void initialize_gpio_pin_08005680(TIM_HandleTypeDef *timer_handler)\n{\n  GPIO_InitTypeDef gpio_init_struct;\n  if (timer_handler->Instance == DAT_080056b4) {\n    gpio_init_struct.Pin = GPIO_PIN_9;\n    gpio_init_struct.Mode = GPIO_MODE_AF_PP;\n    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_080056b8,&gpio_init_struct);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pin_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "set_rcc_clock_init_08003260",
                "RCC_ClkInitStruct": "clk_init_struct",
                "FLatency": "flash_latency",
                "uVar1": "current_setting",
                "uVar2": "start_tick",
                "HVar3": "status",
                "tickstart": "start_tick",
                "*DAT_08003430": "*RCC_CFGR",
                "PTR_SystemCoreClock_0800343c": "*SystemCoreClock",
                "PTR_AHBPrescTable_08003438": "AHBPrescTable",
                "DAT_08003434": "RCC_ClkInitStruct"
            },
            "code": "HAL_StatusTypeDef set_rcc_clock_init_08003260(RCC_ClkInitTypeDef *clk_init_struct, uint32_t flash_latency) {\n    uint32_t current_setting;\n    uint32_t start_tick;\n    HAL_StatusTypeDef status;\n\n    current_setting = *DAT_08003430;\n\n    if (((current_setting & 0x00000007) < flash_latency) && (flash_latency != (current_setting & 0x00000007))) {\n        status = HAL_ERROR;\n    }\n    else {\n        if ((clk_init_struct->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n            *DAT_08003430 |= (clk_init_struct->AHBCLKDivider << 4);\n        }\n        if ((clk_init_struct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n            *DAT_08003430 |= (clk_init_struct->APB1CLKDivider << 8);\n        }\n        if ((clk_init_struct->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n            *DAT_08003430 |= (clk_init_struct->APB2CLKDivider << 11);\n        }\n\n        uint32_t sys_clk_freq = HAL_RCC_GetSysClockFreq();\n        uint32_t ahb_presc = PTR_PTR_AHBPrescTable_08003438_08003438[((*DAT_08003430) >> 4) & 0x0000000F];\n        *PTR_SystemCoreClock_0800343c = (sys_clk_freq >> ahb_presc);\n        HAL_InitTick(0xF);\n        status = HAL_OK;\n    }\n\n    return status;\n}",
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_rcc_clock_init_08003260"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "allocate_and_initialize_block_of_memory_08009244",
                "param_1": "size",
                "param_2": "value",
                "iVar1": "allocated_block_address"
            },
            "code": "void allocate_and_initialize_block_of_memory_08009244(int size, int value)\n{\n  int allocated_block_address = _Balloc(size, 1);\n  *(int *)(allocated_block_address + 0x10) = 1;\n  *(int *)(allocated_block_address + 0x14) = value;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_block_of_memory_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "software_interrupt_handler_08004e6c",
                "a0": "data",
                "a1": "interrupt_code",
                "a2": "flag"
            },
            "code": "uint32_t software_interrupt_handler_08004e6c(uint32_t interrupt_code, uint32_t data, int32_t flag)\n{\n  software_interrupt(interrupt_code);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "software_interrupt_handler_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "configure_systick_08001762",
                "TicksNumb": "tick_count",
                "uVar1": "config_result"
            },
            "code": "uint32_t configure_systick_08001762(uint32_t tick_count)\n{\n  uint32_t config_result;\n  config_result = SysTick_Config(tick_count);\n  return config_result;\n}",
            "called": [
                "SysTick_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_systick_08001762"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "set_timer_input_capture_mode_080040a0",
                "TIMx": "timer",
                "TIM_ICPolarity": "polarity",
                "TIM_ICFilter": "filter",
                "uVar1": "ccer",
                "tmpccer": "N/A",
                "tmpccmr1": "N/A"
            },
            "code": "void set_timer_input_capture_mode_080040a0(TIM_TypeDef *timer, uint32_t polarity, uint32_t filter)\n{\n  uint32_t ccer = timer->CCER;\n  timer->CCER = ccer & 0xfffffffe;\n  timer->CCMR1 = (filter << 4) | (timer->CCMR1 & 0xffffff0f);\n  timer->CCER = polarity | (ccer & 0xfffffff5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_timer_input_capture_mode_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "destination_ptr",
                "puVar2": "source_ptr",
                "iVar3": "source_offset",
                "pvVar4": "destination_offset",
                "puVar5": "destination_end",
                "iVar6": "source_offset_next",
                "uVar7": "remaining_copy_size",
                "iVar8": "destination_offset_next",
                "uVar9": "remaining_size",
                "puVar10": "destination_ptr_last"
            },
            "code": "void * reverse_copy_08009a18(void *destination, void *source, size_t size)\n{\n    uint remaining_size;\n    uint i;\n    uint *source_ptr;\n    uint *destination_ptr;\n\n    if (source < destination && source + size > destination)\n    {\n        remaining_size = size;\n        while (remaining_size > 0)\n        {\n            remaining_size--;\n            ((uint8_t*)destination)[remaining_size] = ((uint8_t*)source)[remaining_size];\n        }\n    }\n    else\n    {\n        remaining_size = size >> 2;\n        source_ptr = (uint*)source;\n        destination_ptr = (uint*)destination;\n        for (i = 0; i < remaining_size; i++)\n        {\n            destination_ptr[i] = source_ptr[remaining_size - i - 1];\n        }\n        remaining_size = size & 3;\n        source = (uint8_t*)source + (size & ~3);\n        destination = (uint8_t*)destination + (size & ~3);\n        for (i = 0; i < remaining_size; i++)\n        {\n            ((uint8_t*)destination)[i] = ((uint8_t*)source)[remaining_size - i - 1];\n        }\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "_realloc_r",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "calculate_value_0800119c",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result",
                "iVar2": "intermediate_value",
                "uVar3": "intermediate_value2",
                "temp": "temp"
            },
            "code": "uint calculate_value_0800119c(uint value1, uint value2) {\n    uint result;\n    int intermediate_value;\n    uint intermediate_value2;\n    intermediate_value = value2 * 2 + 0x200000;\n    if (value2 * 2 < 0xffe00000) {\n        if (-1 < intermediate_value) {\n            return 0;\n        }\n        intermediate_value2 = intermediate_value >> 0x15;\n        uint temp = -intermediate_value2 - 0x3e1;\n        if (intermediate_value2 < 0xfffffc20 && temp != 0) {\n            result = (value2 << 0xb | 0x80000000 | value1 >> 0x15) >> (temp & 0xff);\n            if ((value2 & 0x80000000) != 0) {\n                result = -result;\n            }\n            return result;\n        }\n    }\n    else if ((value1 | value2 << 0xc) != 0) {\n        return 0;\n    }\n    value2 = value2 & 0x80000000;\n    if (value2 == 0) {\n        value2 = 0x7fffffff;\n    }\n    return value2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_value_0800119c"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "release_malloc_recursive_lock_080090b4",
                "PTR___lock___malloc_recursive_mutex_080090bc": "PTR_malloc_recursive_lock",
                "__retarget_lock_release_recursive": "release_recursive_lock"
            },
            "code": "void release_malloc_recursive_lock_080090b4(void)\n{\n  __retarget_lock_release_recursive(PTR___lock___malloc_recursive_mutex_080090bc);\n  return;\n}",
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "release_malloc_recursive_lock_080090b4"
        },
        "FUN_08000f60": {
            "renaming": {
                "FUN_08000f60": "compare_and_modify_08000f60",
                "param_1": "first_number",
                "param_2": "second_number",
                "uVar2": "doubled_first",
                "uVar3": "doubled_second",
                "uVar4": "bitwise_or",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint compare_and_modify_08000f60(uint first_number, uint second_number) {\n  bool is_negative;\n  uint doubled_first = first_number * 2;\n  uint doubled_second = second_number * 2;\n  if (((int)doubled_first >> 0x18 == -1 || (int)doubled_second >> 0x18 == -1) && ((((int)doubled_first >> 0x18 == -1 && ((first_number & 0x7fffff) != 0)) || (((int)doubled_second >> 0x18 == -1 && ((second_number & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint bitwise_or = doubled_first | second_number & 0x7fffffff;\n  bool is_zero = bitwise_or == 0;\n  if (!is_zero) {\n    bitwise_or = first_number ^ second_number;\n    is_zero = bitwise_or == 0;\n  }\n  is_negative = -1 < (int)bitwise_or;\n  if (is_negative) {\n    first_number = doubled_first + second_number * -2;\n    is_zero = first_number == 0;\n  }\n  if ((is_negative && doubled_second <= doubled_first) && !is_zero) {\n    first_number = (int)second_number >> 0x1f;\n  }\n  if (!is_negative || doubled_second > doubled_first) {\n    first_number = ~((int)second_number >> 0x1f);\n  }\n  if (!is_zero) {\n    first_number = first_number | 1;\n  }\n  return first_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f60",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_modify_08000f60"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "configure_timer_break_dead_time_0800422e",
                "htim": "timer_handle",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "HVar1": "status",
                "tmpbdtr": "bdtr_value"
            },
            "code": "HAL_StatusTypeDef configure_timer_break_dead_time_0800422e(TIM_HandleTypeDef *timer_handle, TIM_BreakDeadTimeConfigTypeDef *break_dead_time_config) {\n  HAL_StatusTypeDef status;\n  uint32_t bdtr_value;\n  if (timer_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->Lock = HAL_LOCKED;\n    bdtr_value = (break_dead_time_config->AutomaticOutput |\n                  (break_dead_time_config->BreakPolarity |\n                   (break_dead_time_config->BreakState |\n                    (break_dead_time_config->OffStateRunMode |\n                     (break_dead_time_config->OffStateIDLEMode |\n                      (break_dead_time_config->LockLevel |\n                       (break_dead_time_config->DeadTime & 0xfffffcff) &\n                       0xfffffbff) &\n                      0xfffff7ff) &\n                     0xffffefff) &\n                    0xffffdfff) &\n                   0xffffbfff) &\n                  0xffff7fff);\n    timer_handle->Instance->BDTR = bdtr_value;\n    timer_handle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_break_dead_time_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "__malloc_unlock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "__malloc_lock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "configure_systick_0800151c",
                "TickPriority": "tick_priority",
                "uVar1": "systick_config_result",
                "HVar2": "status",
                "PTR_SystemCoreClock_08001570": "system_clock",
                "PTR_uwTickFreq_08001574": "tick_frequency",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08001578": "PTR_uwTickPrio_08001578"
            },
            "code": "HAL_StatusTypeDef configure_systick_0800151c(uint32_t tick_priority)\n{\n  uint32_t PTR_SystemCoreClock_08001570 = *(uint *)PTR_SystemCoreClock_08001570;\n  uint32_t PTR_uwTickFreq_08001574 = *(uint8_t *)PTR_uwTickFreq_08001574;\n  uint32_t systick_config = PTR_SystemCoreClock_08001570 / (1000 / PTR_uwTickFreq_08001574);\n  uint32_t systick_config_result = HAL_SYSTICK_Config(systick_config);\n  HAL_StatusTypeDef status;\n  if (systick_config_result == 0) {\n    if (tick_priority < 0x10) {\n      HAL_NVIC_SetPriority(SysTick_IRQn, tick_priority, 0);\n      *(uint32_t *)PTR_uwTickPrio_08001578 = tick_priority;\n      status = HAL_OK;\n    }\n    else {\n      status = HAL_ERROR;\n    }\n  }\n  else {\n    status = HAL_ERROR;\n  }\n  return status;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configure_systick_0800151c"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "check_overflow_08000f68",
                "param_1": "x",
                "param_2": "y",
                "uVar2": "double_x",
                "uVar3": "double_y",
                "uVar4": "combined",
                "bVar1": "is_negative",
                "bVar5": "combined_is_zero"
            },
            "code": "uint check_overflow_08000f68(uint x, uint y)\n{\n    uint double_x = x * 2;\n    uint double_y = y * 2;\n    bool overflow = false;\n    uint result;\n\n    if (((int)double_x >> 0x18 == -1 || (int)double_y >> 0x18 == -1) && ((((int)double_x >> 0x18 == -1 && ((x & 0x7fffff) != 0)) || (((int)double_y >> 0x18 == -1 && ((y & 0x7fffff) != 0))))){\n        return 1;\n    }\n\n    uint combined = double_x | y & 0x7fffffff;\n    bool combined_is_zero = combined == 0;\n\n    if (!combined_is_zero) {\n        result = x ^ y;\n        combined_is_zero = result == 0;\n    }\n\n    bool is_negative = -1 < (int)result;\n\n    if (is_negative) {\n        result = double_x + y * -2;\n        combined_is_zero = result == 0;\n    }\n\n    if (is_negative && double_y <= double_x && !combined_is_zero) {\n        result = (int)y >> 0x1f;\n    }\n\n    if (!is_negative || double_y > double_x) {\n        result = ~((int)y >> 0x1f);\n    }\n\n    if (!combined_is_zero) {\n        result = result | 1;\n    }\n\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "check_overflow_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_product_08009258",
                "param_1": "result",
                "param_2": "num1_len",
                "param_3": "num2_len",
                "iVar3": "product",
                "uVar4": "carry",
                "puVar5": "num1_ptr",
                "puVar7": "num2_ptr",
                "iVar9": "num1_idx",
                "iVar10": "num2_idx",
                "uVar6": "result_idx",
                "iVar12": "result_len",
                "puVar14": "result"
            },
            "code": "void calculate_product_08009258(uint32_t* result, int num1_len, uint32_t* num1, int num2_len, uint32_t* num2)\\n\\\n{\\n\\\n  uint32_t *num1_ptr;\\n\\\n  uint32_t *num2_ptr;\\n\\\n  int num1_idx;\\n\\\n  int num2_idx;\\n\\\n  uint32_t carry;\\n\\\n  uint64_t product;\\n\\\n  int result_idx;\\n\\\n  int result_len;\\n\\\n  // Determine the longer number and set num1_ptr to point to it\\n\\\n  if (num1_len < num2_len) {\\n\\\n    num1_ptr = num2;\\n\\\n    num2_ptr = num1;\\n\\\n    num1_len = num2_len;\\n\\\n    num2_len = num1_len;\\n\\\n  } else {\\n\\\n    num1_ptr = num1;\\n\\\n    num2_ptr = num2;\\n\\\n  }\\n\\\n  // Allocate memory for the result\\n\\\n  result_len = num1_len + num2_len;\\n\\\n  if (result_len > 0 && result[result_len - 1] == 0) {\\n\\\n    result_len--;\\n\\\n  }\\n\\\n  result[0] = 0;\\n\\\n  for (result_idx = 1; result_idx < result_len; result_idx++) {\\n\\\n    result[result_idx] = 0;\\n\\\n  }\\n\\\n  // Calculate the product\\n\\\n  for (num1_idx = 0; num1_idx < num1_len; num1_idx++) {\\n\\\n    carry = 0;\\n\\\n    for (num2_idx = 0; num2_idx < num2_len; num2_idx++) {\\n\\\n      product = (uint64_t)num1_ptr[num1_idx] * num2_ptr[num2_idx] + result[num1_idx + num2_idx] + carry;\\n\\\n      result[num1_idx + num2_idx] = (uint32_t)product;\\n\\\n      carry = (uint32_t)(product >> 32);\\n\\\n    }\\n\\\n    result[num1_idx + num2_len] = carry;\\n\\\n  }\\n\\\n  // Remove leading zeros from the result\\n\\\n  while (result_len > 0 && result[result_len - 1] == 0) {\\n\\\n    result_len--;\\n\\\n  }\\n\\\n  // Store the length of the result\\n\\\n  result[0] = result_len;\\n\\\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "calculate_product_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_08000c08",
                "param_1": "num",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask",
                "shift": "shift",
                "shifted_num": "shifted_num",
                "shifted_constant": "shifted_constant",
                "carry": "carry",
                "result": "result"
            },
            "code": "uint calculate_08000c08(uint num)\n{\n  int leading_zeroes = count_leading_zeroes(num);\n  uint shift_amount = leading_zeroes - 8;\n  int constant = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shift = shift_amount & 0xff;\n    uint shifted_num = num << shift;\n    uint shifted_constant = 0U >> (0x20 - shift);\n    uint carry = (uint)(0x7fffffff < shifted_constant);\n    uint result = constant + shifted_num + shifted_constant + carry;\n    if ((num & (1 << shift)) != 0) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shift = (leading_zeroes + 0x18) & 0xff;\n  uint shifted_num = num << shift;\n  uint shifted_constant = (num >> (0x20 - shift)) - ((int)shifted_num >> 0x1f);\n  uint mask = (shifted_num & 0x7fffffff) != 0 ? ~(shifted_num >> 0x1f) : 0xffffffff;\n  uint result = constant + shifted_constant;\n  result = result & mask;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_08000c08"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "configure_master_timer_080042de",
                "htim": "timer_handle",
                "sMasterConfig": "master_config",
                "HVar1": "status",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "CR2": "CR2",
                "SMCR": "SMCR",
                "MasterOutputTrigger": "MasterOutputTrigger",
                "MasterSlaveMode": "MasterSlaveMode"
            },
            "code": "HAL_StatusTypeDef configure_master_timer_080042de(TIM_HandleTypeDef *timer_handle, TIM_MasterConfigTypeDef *master_config)\n{\n  HAL_StatusTypeDef status;\n  if (timer_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->Lock = HAL_LOCKED;\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    timer_handle->Instance->CR2 = timer_handle->Instance->CR2 & 0xffffff8f;\n    timer_handle->Instance->CR2 = master_config->MasterOutputTrigger | timer_handle->Instance->CR2;\n    timer_handle->Instance->SMCR = timer_handle->Instance->SMCR & 0xffffff7f;\n    timer_handle->Instance->SMCR = master_config->MasterSlaveMode | timer_handle->Instance->SMCR;\n    timer_handle->State = HAL_TIM_STATE_READY;\n    timer_handle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configure_master_timer_080042de"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    __malloc_lock();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR___malloc_av__08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR___malloc_av__08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR___malloc_av__08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc))\n    {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR___malloc_av__08008e60;\n  puVar12 = PTR___malloc_av__08008e4c;\n  puVar13 = *(undefined **)(PTR___malloc_av__08008e4c + 0x10);\n  if (puVar13 == PTR_PTR___malloc_av__08008e60) {\n    uVar4 = *(uint *)(PTR___malloc_av__08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__08008e4c + 0x10) = PTR_PTR___malloc_av__08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR___malloc_sbrk_base_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR___malloc_sbrk_base_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)_sbrk_r(param_1,uVar4);\n  puVar6 = (uint *)PTR___malloc_current_mallinfo_08009018;\n  puVar3 = PTR___malloc_current_mallinfo_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08008e54 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08009018 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = _sbrk_r(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          _free_r(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR___malloc_max_total_mem_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR___malloc_max_total_mem_08008e5c;\n    if (*(uint *)PTR___malloc_max_sbrked_mem_08008e58 < uVar9) {\n      *(uint *)PTR___malloc_max_sbrked_mem_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    __malloc_unlock(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  __malloc_unlock(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "_realloc_r",
                "_calloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_pitch_08004bd8",
                "mpu6050": "mpu",
                "pitch": "result_pitch",
                "acc_pitch": "accelerometer_pitch",
                "gyro_x": "gyroscope_x",
                "uVar1": "difference",
                "uVar2": "temp_1",
                "uVar3": "temp_2"
            },
            "code": "void calculate_pitch_08004bd8(Mpu6050 *mpu6050, float *pitch) {\n  float gyro_x = mpu6050->gyroX - mpu6050->offset_gyroX;\n  float acc_pitch = atan2(mpu6050->accY / 16384.0, mpu6050->accZ / 16384.0) * 180.0 / 3.14159265358979323846 - mpu6050->offset_acc_pitch;\n  float total_pitch = *(float *)PTR_total_pitch_08004d60;\n  if (*PTR_first_run_08004d70 == 0) {\n    total_pitch = 0.98 * (total_pitch + gyro_x * 0.0000611) + 0.02 * acc_pitch;\n    *(float *)PTR_total_pitch_08004d60 = total_pitch;\n  }\n  else {\n    *(float *)PTR_total_pitch_08004d60 = acc_pitch;\n    *PTR_first_run_08004d70 = 0;\n  }\n  *pitch = total_pitch;\n  return;\n}",
            "called": [
                "__subdf3",
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__divdf3",
                "atan2",
                "__aeabi_dadd",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_pitch_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_memory_080090c0",
                "param_1": "size",
                "param_2": "index",
                "puVar1": "memory_pointer",
                "iVar2": "allocated_memory"
            },
            "code": "undefined4* allocate_memory_080090c0(int size, uint index)\n{\n    undefined4* memory_pointer;\n    int allocated_memory = *(int*)(size + 0x4c);\n    if (allocated_memory == 0)\n    {\n        allocated_memory = _calloc_r(size, 4, 0x21);\n        *(int*)(size + 0x4c) = allocated_memory;\n        if (allocated_memory == 0)\n        {\n            return (undefined4*)0x0;\n        }\n    }\n    memory_pointer = *(undefined4**)(allocated_memory + index * 4);\n    if (memory_pointer == (undefined4*)0x0)\n    {\n        int memory_size = 1 << (index & 0xff);\n        memory_pointer = (undefined4*)_calloc_r(size, 1, (memory_size + 5) * 4);\n        if (memory_pointer == (undefined4*)0x0)\n        {\n            return (undefined4*)0x0;\n        }\n        memory_pointer[1] = index;\n        memory_pointer[2] = memory_size;\n    }\n    else\n    {\n        *(undefined4*)(allocated_memory + index * 4) = *memory_pointer;\n    }\n    memory_pointer[3] = 0;\n    memory_pointer[4] = 0;\n    return memory_pointer;\n}",
            "called": [
                "_calloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "_dtoa_r",
                "__d2b",
                "__lshift",
                "__mdiff",
                "__multadd",
                "__pow5mult",
                "__i2b",
                "__multiply"
            ],
            "imported": false,
            "current_name": "allocate_memory_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_trailing_zeroes_080091e4",
                "*param_1": "*num",
                "uVar1": "count",
                "uVar2": "temp_num"
            },
            "code": "uint count_trailing_zeroes_080091e4(uint *num) {\n  uint temp_num;\n  uint count = 0;\n  temp_num = *num;\n  if ((temp_num & 7) == 0) {\n    if ((temp_num & 0xffff) == 0) {\n      temp_num >>= 0x10;\n      count = 0x10;\n    }\n    if ((temp_num & 0xff) == 0) {\n      temp_num >>= 8;\n      count += 8;\n    }\n    if ((temp_num & 0xf) == 0) {\n      temp_num >>= 4;\n      count += 4;\n    }\n    if ((temp_num & 3) == 0) {\n      temp_num >>= 2;\n      count += 2;\n    }\n    if (-1 < (int)(temp_num << 0x1f)) {\n      temp_num >>= 1;\n      if (temp_num == 0) {\n        return 0x20;\n      }\n      count++;\n    }\n    *num = temp_num;\n    return count;\n  }\n  if (-1 < (int)(temp_num << 0x1f)) {\n    if ((int)(temp_num << 0x1e) < 0) {\n      *num = temp_num >> 1;\n      return 1;\n    }\n    *num = temp_num >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "__d2b"
            ],
            "imported": false,
            "current_name": "count_trailing_zeroes_080091e4"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "data_type",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "PTR___atexit_recursive_mutex_08009974": "recursive_mutex",
                "PTR__global_impure_ptr_08009978": "global_impure_ptr",
                "DAT_0800997c": "data_flag",
                "iVar5": "data_block",
                "iVar6": "global_impure_ptr",
                "iVar7": "new_data_index",
                "puVar1": "recursive_mutex",
                "uVar2": "recursive_mutex_value",
                "uVar3": "data_count",
                "uVar4": "data_count"
            },
            "code": "undefined4 update_data_080098c0(int data_type, undefined4 data_1, undefined4 data_2, undefined4 data_3)\n{\n  undefined *PTR___atexit_recursive_mutex_08009974 = PTR___atexit_PTR___atexit_recursive_mutex_08009974_08009974;\n  __retarget_lock_acquire_recursive(*(undefined4 *)PTR___atexit_recursive_mutex_08009974);\n  int PTR__global_impure_ptr_08009978 = *(int *)PTR__PTR__global_impure_ptr_08009978_08009978;\n  int data_block = *(int *)(PTR__global_impure_ptr_08009978 + 0x148);\n  if (data_block == 0) {\n    data_block = PTR__global_impure_ptr_08009978 + 0x14c;\n    *(int *)(PTR__global_impure_ptr_08009978 + 0x148) = data_block;\n  }\n  uint data_count = *(uint *)(data_block + 4);\n  int new_data_index;\n  if ((int)data_count < 0x20) {\n    new_data_index = data_count + 1;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      __retarget_lock_release_recursive(*(undefined4 *)PTR___atexit_recursive_mutex_08009974);\n      return 0xffffffff;\n    }\n    int new_data_block = 400;\n    data_count = 0;\n    _DAT_00000190 = *(undefined4 *)(PTR__global_impure_ptr_08009978 + 0x148);\n    new_data_index = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(PTR__global_impure_ptr_08009978 + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (data_type != 0) {\n    int data_index = data_block + data_count * 4;\n    *(undefined4 *)(data_index + 0x88) = data_2;\n    uint DAT_0800997c = 1 << (data_count & 0xff);\n    *(uint *)(data_block + 0x188) = *(uint *)(data_block + 0x188) | DAT_0800997c;\n    *(undefined4 *)(data_index + 0x108) = data_3;\n    if (data_type == 2) {\n      *(uint *)(data_block + 0x18c) = DAT_0800997c | *(uint *)(data_block + 0x18c);\n    }\n  }\n  *(int *)(data_block + 4) = new_data_index;\n  undefined4 PTR___atexit_recursive_mutex_08009974_value = *(undefined4 *)PTR___atexit_recursive_mutex_08009974;\n  *(undefined4 *)(data_block + (data_count + 2) * 4) = data_1;\n  __retarget_lock_release_recursive(PTR___atexit_recursive_mutex_08009974_value);\n  return 0;\n}",
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "atexit"
            ],
            "imported": false,
            "current_name": "update_data_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "i2c_communication_080027f4",
                "hi2c": "i2c_handler",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "Tickstart": "tick_start",
                "HVar1": "status",
                "uVar2": "current_time",
                "tmpreg": "loop_counter"
            },
            "code": "HAL_StatusTypeDef i2c_communication_080027f4(I2C_HandleTypeDef *i2c_handler, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout, uint32_t tick_start)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_time;\n  int loop_counter = 0;\n  i2c_handler->Instance->CR1 |= 0x400;\n  i2c_handler->Instance->CR1 |= 0x100;\n  do {\n    if ((~i2c_handler->Instance->SR1 & 1) == 0) {\n      loop_counter = 0;\n      goto exit_loop;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (current_time = HAL_GetTick(), current_time - tick_start <= timeout))));\n  i2c_handler->PreviousState = 0;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  i2c_handler->Mode = HAL_I2C_MODE_NONE;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  loop_counter = 3;\nexit_loop:\n  if (loop_counter == 0) {\n    i2c_handler->Instance->DR = (uint8_t)device_address & 0xfe;\n    status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c_handler, memory_address_size, timeout, tick_start);\n    if (status == HAL_OK) {\n      status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout, tick_start);\n      if (status == HAL_OK) {\n        if (memory_address_size == 1) {\n          i2c_handler->Instance->DR = (uint8_t)memory_address;\n        }\n        else {\n          i2c_handler->Instance->DR = (uint8_t)(memory_address >> 8);\n          status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout, tick_start);\n          if (status != HAL_OK) {\n            if (i2c_handler->ErrorCode == 4) {\n              i2c_handler->Instance->CR1 |= 0x200;\n              return HAL_ERROR;\n            }\n            return HAL_TIMEOUT;\n          }\n          i2c_handler->Instance->DR = (uint8_t)memory_address;\n        }\n        status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout, tick_start);\n        if (status == HAL_OK) {\n          i2c_handler->Instance->CR1 |= 0x100;\n          do {\n            if ((~i2c_handler->Instance->SR1 & 1) == 0) {\n              loop_counter = 0;\n              goto exit_loop_2;\n            }\n          } while ((timeout == 0xffffffff) || ((timeout != 0 && (current_time = HAL_GetTick(), current_time - tick_start <= timeout))));\n          i2c_handler->PreviousState = 0;\n          i2c_handler->State = HAL_I2C_STATE_READY;\n          i2c_handler->Mode = HAL_I2C_MODE_NONE;\n          i2c_handler->Lock = HAL_UNLOCKED;\n          loop_counter = 3;\nexit_loop_2:\n          if (loop_counter == 0) {\n            i2c_handler->Instance->DR = (uint8_t)((uint8_t)device_address | 1);\n            status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c_handler, memory_address_size, timeout, tick_start);\n            if (status == HAL_OK) {\n              status = HAL_OK;\n            }\n            else if (i2c_handler->ErrorCode == 4) {\n              status = HAL_ERROR;\n            }\n            else {\n              status = HAL_TIMEOUT;\n            }\n          }\n          else {\n            status = HAL_TIMEOUT;\n          }\n        }\n        else if (i2c_handler->ErrorCode == 4) {\n          i2c_handler->Instance->CR1 |= 0x200;\n          status = HAL_ERROR;\n        }\n        else {\n          status = HAL_TIMEOUT;\n        }\n      }\n      else if (i2c_handler->ErrorCode == 4) {\n        i2c_handler->Instance->CR1 |= 0x200;\n        status = HAL_ERROR;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n    else if (i2c_handler->ErrorCode == 4) {\n      status = HAL_ERROR;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  else {\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "i2c_communication_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "calculate_concatenated_value_080003d4",
                "param_1": "input_value",
                "uVar1": "concatenation_1",
                "uVar2": "concatenation_2",
                "iVar3": "leading_zero_count",
                "uVar4": "shift_amount_1",
                "in_r12": "shift_amount_2",
                "bVar5": "is_negative_1",
                "bVar6": "is_negative_2",
                "bVar7": "is_negative_3"
            },
            "code": "ulonglong calculate_concatenated_value_080003d4(uint input_value)\n{\n    uint leading_zero_count;\n    uint shift_amount_1;\n    uint shift_amount_2;\n    uint concatenation_1 = 0;\n    uint concatenation_2 = 0;\n    bool is_negative_1;\n    bool is_negative_2;\n    bool is_negative_3;\n    if (input_value == 0) {\n        return 0;\n    }\n    leading_zero_count = count_leading_zeroes(input_value);\n    shift_amount_1 = leading_zero_count + 21;\n    is_negative_3 = SBORROW4(shift_amount_1, 0x20);\n    shift_amount_2 = leading_zero_count - 11;\n    is_negative_1 = (int)shift_amount_2 < 0;\n    is_negative_2 = shift_amount_2 == 0;\n    if ((int)shift_amount_1 < 0x20) {\n        is_negative_3 = SCARRY4(shift_amount_2, 0xc);\n        leading_zero_count = leading_zero_count + 1;\n        is_negative_1 = leading_zero_count < 0;\n        is_negative_2 = leading_zero_count == 0;\n        shift_amount_2 = shift_amount_1;\n        if (!is_negative_2 && is_negative_1 == is_negative_3) {\n            concatenation_1 = input_value << (shift_amount_1 & 0xff);\n            input_value = input_value >> (0xcU - leading_zero_count & 0xff);\n            goto LAB_080002e0;\n        }\n    }\n    if (is_negative_2 || is_negative_1 != is_negative_3) {\n        shift_amount_2 = 0x20 - shift_amount_2;\n    }\n    input_value = input_value << (shift_amount_2 & 0xff);\n    if (is_negative_2 || is_negative_1 != is_negative_3) {\n        input_value = input_value | 0U >> (shift_amount_2 & 0xff);\n    }\n    if (is_negative_2 || is_negative_1 != is_negative_3) {\n        concatenation_1 = 0 << (shift_amount_2 & 0xff);\n    }\nLAB_080002e0:\n    if ((int)shift_amount_1 < 0x433) {\n        return CONCAT44(input_value + (0x432 - shift_amount_1) * 0x100000, concatenation_1);\n    }\n    shift_amount_2 = ~(0x432 - shift_amount_1);\n    if (0x1e < (int)shift_amount_2) {\n        return (ulonglong)(input_value >> (shift_amount_2 - 0x1f & 0xff));\n    }\n    is_negative_1 = shift_amount_2 - 0x13 == 0 || shift_amount_2 - 0x1f < 0 != SCARRY4(shift_amount_2 - 0x1f, 0xc);\n    if (is_negative_1) {\n        shift_amount_2 = shift_amount_2 + 1;\n        return CONCAT44(input_value >> (shift_amount_2 & 0xff), concatenation_1 >> (shift_amount_2 & 0xff) | input_value << (0x20 - shift_amount_2 & 0xff));\n    }\n    return (ulonglong)(concatenation_1 >> (0x20 - (0xcU - (shift_amount_2 - 0x13)) & 0xff) | input_value << ((shift_amount_2 - 0x13) & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_concatenated_value_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_pitch_and_roll_08004d78",
                "mpu6050": "mpu6050_obj",
                "pitch": "pitch_ptr",
                "roll": "roll_ptr",
                "acc_roll": "acc_roll_val",
                "acc_pitch": "acc_pitch_val",
                "acc_z": "acc_z_val",
                "acc_y": "acc_y_val",
                "acc_x": "acc_x_val",
                "uVar1": "accX_f",
                "uVar2": "accY_f",
                "uVar3": "accZ_f",
                "uVar6": "atan_arg1",
                "uVar7": "atan_arg2",
                "DAT_08004e68": "RAD_TO_DEG",
                "DAT_08004e60": "1.0f",
                "DAT_08004e64": "0.0f"
            },
            "code": "void calculate_pitch_and_roll_08004d78(Mpu6050 *mpu6050, float *pitch, float *roll)\n{\n    float acc_roll, acc_pitch, acc_z, acc_y, acc_x;\n    float accX_f = mpu6050->accX / 111000DAT_08004e64;\n    float accY_f = mpu6050->accY / 111000DAT_08004e64;\n    float accZ_f = mpu6050->accZ / 111000DAT_08004e64;\n    float atan_arg1 = atan2(accY_f, accZ_f);\n    float atan_arg2 = atan2(accX_f, sqrt(accY_f * accY_f + accZ_f * accZ_f));\n    acc_pitch = atan_arg1 * DAT_08004e68;\n    acc_roll = atan_arg2 * DAT_08004e68;\n    *pitch = acc_pitch;\n    *roll = acc_roll;\n}\n",
            "called": [
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__divdf3",
                "atan2",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "calculate_pitch_and_roll_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_output_08000c10",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "exponent",
                "iVar4": "mantissa_mask",
                "uVar5": "mantissa",
                "uVar3": "sign_bit_mask",
                "output_value": "output_value",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_output_08000c10(uint input_value)\n{\n  int leading_zeroes_count;\n  uint input_value_sign_bit;\n  uint output_value;\n  int exponent;\n  uint mantissa_mask;\n  uint mantissa;\n  uint sign_bit_mask;\n  uint sign_bit;\n  \n  input_value_sign_bit = input_value & 0x80000000;\n  if ((int)input_value_sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  exponent = leading_zeroes_count - 8;\n  mantissa_mask = (1U << (23 - exponent)) - 1;\n  mantissa = input_value >> (leading_zeroes_count - 1 - exponent);\n  sign_bit_mask = 1U << 31;\n  sign_bit = input_value_sign_bit >> 31;\n  output_value = (sign_bit_mask | ((exponent + 127) << 23) | (mantissa_mask & mantissa));\n  if ((mantissa & (1U << (22 - exponent))) != 0) {\n    output_value += 1U << (23 - exponent);\n  }\n  return output_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "mpu6050_calibrate",
                "mpu6050_update",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_output_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_mpu6050_0800491c",
                "mpu6050": "mpu6050_data",
                "local_13": "power_mgmt_1",
                "local_12": "gyro_config",
                "local_11": "accel_config",
                "PTR_I2C_Write_Reg_080049c8": "i2c_write_reg"
            },
            "code": "void initialize_mpu6050_0800491c(Mpu6050 *mpu6050)\n{\n  unsigned char power_mgmt_1 = 0;\n  unsigned char gyro_config = 0x10;\n  unsigned char accel_config = 8;\n  (*(code **)PTR_I2C_Write_Reg_080049c8)(0xd0, 0x6b, &power_mgmt_1, 1);\n  (*(code **)PTR_I2C_Write_Reg_080049c8)(0xd0, 0x1c, &gyro_config, 1);\n  (*(code **)PTR_I2C_Write_Reg_080049c8)(0xd0, 0x1b, &accel_config, 1);\n  mpu6050->accX = 0.0;\n  mpu6050->accY = 0.0;\n  mpu6050->accZ = 0.0;\n  mpu6050->temp = 0.0;\n  mpu6050->gyroX = 0.0;\n  mpu6050->gyroY = 0.0;\n  mpu6050->gyroZ = 0.0;\n  mpu6050->offset_gyroX = 0.0;\n  mpu6050->offset_gyroY = 0.0;\n  mpu6050->offset_acc_pitch = 0.0;\n  mpu6050->offset_acc_roll = 0.0;\n  mpu6050_calibrate(mpu6050);\n  return;\n}",
            "called": [
                "mpu6050_calibrate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_mpu6050_0800491c"
        }
    },
    "used_tokens": 164319,
    "layers": [
        [
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08003568",
            "FUN_08002c2e",
            "FUN_080008ec",
            "FUN_08000978",
            "FUN_0800101c",
            "FUN_080056d4",
            "FUN_080078b4",
            "FUN_080017b4",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_080056ce",
            "FUN_08004f3c",
            "FUN_080008fc",
            "FUN_08001714",
            "FUN_08000988",
            "FUN_080078c0",
            "FUN_080017c4",
            "FUN_080056da",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_08004436",
            "FUN_08009e50",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_08000fc8",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_08001170",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08009e68",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_080036f8",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08005830",
            "FUN_08005714",
            "FUN_08005834",
            "FUN_08005838",
            "FUN_080096e0",
            "FUN_08003540",
            "FUN_08001ab0",
            "FUN_08009768",
            "FUN_08001008",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_08005728",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080078a0",
            "FUN_080056c8",
            "FUN_080057e8",
            "FUN_080008f4",
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08005348",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080099ec",
            "FUN_08005598",
            "FUN_08002640",
            "FUN_08005dfc",
            "FUN_080003f4",
            "FUN_0800045c",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_080015fc",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08000c2c",
            "FUN_080009ac",
            "FUN_0800438a",
            "FUN_0800046c",
            "FUN_080009c0",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08000c3c",
            "FUN_08003518",
            "FUN_08005780",
            "FUN_08000fe0",
            "FUN_08008818",
            "FUN_08000418",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_080016d0",
            "FUN_0800088a",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005d0c",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08000f58",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_08000f60",
            "FUN_0800422e",
            "FUN_0800151c",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c"
        ],
        [
            "FUN_080014f0"
        ]
    ],
    "locked_functions": []
}