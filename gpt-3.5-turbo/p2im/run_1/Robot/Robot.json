{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = convert_to_double_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08005838",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_bit_in_uint_array_080041ea_080036a8",
                "param_1": "uint_array",
                "param_2": "bit_index",
                "**param_1": "value",
                "DAT_080036f4": "DAT_080036f4",
                "(*param_1)[0x11]": "(*uint_array)[17]"
            },
            "code": "uint set_bit_in_uint_array_080041ea_080036a8(uint **uint_array, uint bit_index, uint value) {\n  set_bit_in_uint_array_080041ea_080036a8(*uint_array, bit_index, value);\n  if (*uint_array == DAT_080036f4) {\n    (*uint_array)[17] |= 0x8000;\n  }\n  **uint_array |= 1;\n  return 0;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080041ea_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  do_nothing_with_pointer_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      calculate_value_from_params_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    do_nothing_with_pointer_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    do_nothing_with_pointer_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  do_nothing_with_pointer_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_0800884c",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_and_run_program_08005224",
                "set_parameter_and_check_range_080014f0": "set_parameter_and_check_range",
                "calculate_and_set_value_080052a0": "calculate_and_set_value",
                "set_params_and_call_improved_func_080055f4": "set_params_and_call_improved_func",
                "initialize_data_08005348": "initialize_data_first",
                "initialize_data_08005598": "initialize_data_second",
                "set_permissions_and_flags_08005500": "set_permissions_and_flags",
                "set_parameters_and_run_080053b0": "set_parameters_and_run",
                "PTR_validate_input_08004ea4_1_08005280": "PTR_validate_input_08004ea4_1_08005280",
                "PTR_process_data_08004ee8_1_08005288": "PTR_process_data_08004ee8_1_08005288",
                "PTR_get_value_08004f2c_1_08005290": "PTR_get_value_08004f2c_1_08005290",
                "set_bit_in_uint_array_080041ea_080036a8": "set_bit_in_uint_array",
                "PTR_DAT_08005294": "PTR_DAT_08005294",
                "decode_and_calculate_float_bits_080049cc_0800491c": "decode_and_calculate_float_bits",
                "PTR_DAT_08005298": "PTR_DAT_08005298",
                "set_bits_to_one_0800360c": "set_bits_to_one",
                "PTR_DAT_0800529c": "PTR_DAT_0800529c",
                "check_software_interrupt_triggered_08004e74": "check_software_interrupt_triggered"
            },
            "code": "void initialize_and_run_program_08005224(void)\n{\n  set_parameter_and_check_range();\n  calculate_and_set_value();\n  set_params_and_call_improved_func();\n  initialize_data_first();\n  initialize_data_second();\n  set_permissions_and_flags();\n  set_parameters_and_run();\n  *(undefined **)PTR_DAT_0800527c = PTR_validate_input_08004ea4_1_08005280;\n  *(undefined **)PTR_DAT_08005284 = PTR_process_data_08004ee8_1_08005288;\n  *(undefined **)PTR_DAT_0800528c = PTR_get_value_08004f2c_1_08005290;\n  set_bit_in_uint_array(PTR_DAT_08005294, 0);\n  set_bit_in_uint_array(PTR_DAT_08005294, 12);\n  decode_and_calculate_float_bits(PTR_DAT_08005298);\n  set_bits_to_one_0800360c(PTR_DAT_0800529c);\n  check_software_interrupt_triggered(0);\n  do {\n    /* WARNING: Do nothing block with infinite loop */\n  } while (true);\n}",
            "called": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_0800360c",
                "FUN_08005348",
                "FUN_080014f0",
                "FUN_080055f4",
                "FUN_080036a8",
                "FUN_08004e74",
                "FUN_0800491c",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "initialize_and_run_program_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_value_08003440",
                "PTR_DAT_080034f0": "value_ptr_1",
                "PTR_DAT_080034f4": "value_ptr_2",
                "DAT_080034f8": "value_dat",
                "DAT_080034fc": "default_value",
                "DAT_08003500": "multiplier",
                "local_1c": "value_1",
                "local_18": "value_2",
                "local_14": "value_3",
                "local_10": "result",
                "local_c": "value_4",
                "local_30": "value_5",
                "uStack_28": "value_6",
                "uStack_24": "value_7",
                "uStack_20": "value_8"
            },
            "code": "uint calculate_value_08003440(void)\n{\n  int value1 = *(int *)PTR_DAT_080034f0;\n  int value2 = *(int *)(PTR_DAT_080034f0 + 4);\n  int value3 = *(int *)(PTR_DAT_080034f0 + 8);\n  int value4 = *(int *)(PTR_DAT_080034f0 + 0xc);\n  int value5 = *(short *)PTR_DAT_080034f4;\n  int value6 = 0;\n  int value7 = 0;\n  int value8 = 0;\n  int value9 = 0;\n  int value10 = *(uint *)(DAT_080034f8 + 4);\n  if ((value10 & 0xc) == 4) {\n    value9 = DAT_080034fc;\n  }\n  else if ((value10 & 0xc) == 8) {\n    value6 = (uint)*(byte *)((int)&value1 + (value10 >> 0x12 & 0xf));\n    if ((value10 & 0x10000) == 0) {\n      value7 = DAT_08003500 * value6;\n    }\n    else {\n      value7 = (DAT_080034fc * value6) / (uint)*(byte *)((int)&value5 + (*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1));\n    }\n    value9 = value7;\n  }\n  else {\n    value9 = DAT_080034fc;\n  }\n  return value9;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_value_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_value_08004f2c",
                "uVar1": "value",
                "get_value_from_pointer_080015a0": "get_value_from_pointer"
            },
            "code": "int get_value_08004f2c() {\n  int value = get_value_08004f2c_from_pointer();\n  return value;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_value_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "calculate_result_08001ab0": "calculate_result",
                "PTR_DAT_080053a0": "data_ptr",
                "DAT_080053a4": "value_1",
                "DAT_080053a8": "value_2",
                "PTR_s____src_main_c_080053ac": "loop_message"
            },
            "code": "void initialize_data_08005348(void)\n{\n    int result;\n    int* PTR_DAT_080053a0 = (int*)PTR_DAT_080053a0;\n    *PTR_DAT_080053a0 = DAT_080053a4;\n    *(PTR_DAT_080053a0 + 1) = DAT_080053a8;\n    *(PTR_DAT_080053a0 + 2) = 0;\n    *(PTR_DAT_080053a0 + 3) = 0;\n    *(PTR_DAT_080053a0 + 4) = 0x4000;\n    *(PTR_DAT_080053a0 + 5) = 0;\n    *(PTR_DAT_080053a0 + 6) = 0;\n    *(PTR_DAT_080053a0 + 7) = 0;\n    *(PTR_DAT_080053a0 + 8) = 0;\n    result = calculate_result(PTR_DAT_080053a0);\n    if (result != 0)\n    {\n        infinite_loop_08005674(PTR_s____src_main_c_080053ac, 0x17a);\n    }\n    return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "calculate_values_080046ec",
                "*param_1": "input_values",
                "lVar1": "first_calculation",
                "lVar2": "second_calculation",
                "iVar3": "shift_value",
                "iVar4": "shift_value_2",
                "iVar5": "shift_value_3",
                "uVar6": "shift_value_4",
                "ptr_1": "ptr_1",
                "ptr_2": "ptr_2",
                "ptr_3": "ptr_3"
            },
            "code": "void calculate_values_080046ec(int *input_values)\n{\n  long long first_calculation;\n  long long second_calculation;\n  int shift_value;\n  int shift_value_2;\n  int shift_value_3;\n  int shift_value_4;\n  int shift_value_5;\n  int shift_value_6;\n  int shift_value_7;\n  uint *ptr_1 = (uint *)(*input_values + 0x10);\n  uint *ptr_2 = (uint *)(*input_values + 0xc);\n  uint *ptr_3 = (uint *)(*input_values + 0x14);\n  *ptr_1 = input_values[3] | (*ptr_1 & 0xffffcfff);\n  *ptr_2 = (*ptr_2 & 0xffffe9f3) | input_values[5] | input_values[2] | input_values[4];\n  *ptr_3 = input_values[6] | (*ptr_3 & 0xfffffcff);\n  if (*input_values == PTR_DAT_08004914) {\n    shift_value = get_shifted_value_from_pointer_08003540();\n    first_calculation = (long long)PTR_DAT_08004918 * ((long long)(uint)((int)shift_value * 0x19) / (long long)(uint)(input_values[1] << 2));\n    shift_value_2 = get_shifted_value_from_pointer_08003540((int)shift_value,(int)((ulonglong)shift_value >> 0x20),(int)first_calculation);\n    shift_value_3 = input_values[1];\n    shift_value_4 = get_shifted_value_from_pointer_08003540();\n    shift_value_5 = (uint)((long long)PTR_DAT_08004918 * ((uint)(shift_value_2 * 0x19) / (uint)(shift_value_3 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)shift_value_4 * 0x19) / (ulonglong)(uint)(input_values[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    shift_value_6 = get_shifted_value_from_pointer_08003540((int)shift_value_4,(int)((ulonglong)shift_value_4 >> 0x20),(int)shift_value_5);\n    shift_value_7 = input_values[1];\n    *ptr_1 = ((*ptr_1) & 0xfffffff0) + (((uint)((long long)PTR_DAT_08004918 * ((uint)(shift_value_6 * 0x19) / (uint)(shift_value_7 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)get_shifted_value_from_pointer_08003540() * 0x19) / (ulonglong)(uint)(input_values[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + ((uint)(first_calculation >> 0x25) * 0x10 + ((uint)(shift_value_5 >> 0x25) & 0xf0));\n  }\n  else {\n    shift_value = get_shifted_value_from_pointer_08003518();\n    first_calculation = (long long)PTR_DAT_08004918 * ((long long)(uint)((int)shift_value * 0x19) / (long long)(uint)(input_values[1] << 2));\n    shift_value_2 = get_shifted_value_from_pointer_08003518((int)shift_value,(int)((ulonglong)shift_value >> 0x20),(int)first_calculation);\n    shift_value_3 = input_values[1];\n    shift_value_4 = get_shifted_value_from_pointer_08003518();\n    shift_value_5 = (uint)((long long)PTR_DAT_08004918 * ((uint)(shift_value_2 * 0x19) / (uint)(shift_value_3 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)shift_value_4 * 0x19) / (ulonglong)(uint)(input_values[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    shift_value_6 = get_shifted_value_from_pointer_08003518((int)shift_value_4,(int)((ulonglong)shift_value_4 >> 0x20),(int)shift_value_5);\n    shift_value_7 = input_values[1];\n    *ptr_1 = ((*ptr_1) & 0xfffffff0) + (((uint)((long long)PTR_DAT_08004918 * ((uint)(shift_value_6 * 0x19) / (uint)(shift_value_7 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)get_shifted_value_from_pointer_08003518() * 0x19) / (ulonglong)(uint)(input_values[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + ((uint)(first_calculation >> 0x25) * 0x10 + ((uint)(shift_value_5 >> 0x25) & 0xf0));\n  }\n  return;\n}",
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "calculate_values_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "set_permissions_and_flags_08005500",
                "iVar1": "check_params_result",
                "local_20": "parameter_value",
                "local_1c": "unused_variable",
                "local_18": "permissions"
            },
            "code": "void set_permissions_and_flags_08005500(void)\n{\n  int check_params_result;\n  unsigned int permissions[4];\n  permissions[0] = 0x1000;\n  check_params_result = check_params_and_set(PTR_DAT_08005590);\n  if (check_params_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594,0x1d0);\n  }\n  check_params_result = set_permissions_and_flags_08005500(PTR_DAT_08005590, permissions);\n  if (check_params_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594,0x1d5);\n  }\n  unsigned int parameter_value = 0x20;\n  check_params_result = set_parameter(PTR_DAT_08005590, &parameter_value);\n  if (check_params_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594,0x1dc);\n  }\n}\n",
            "called": [
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080042de",
                "FUN_080035a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_permissions_and_flags_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_flag_08002c2e",
                "param_1": "flag_ptr",
                "param_2": "flag_len",
                "param_3": "param_3",
                "iVar1": "check_result"
            },
            "code": "int check_flag_08002c2e(int *flag_ptr, uint flag_len, int param_3)\n{\n    int check_result;\n\n    while(true)\n    {\n        if((*((uint *)(*flag_ptr + 0x14)) & 4) == 4)\n        {\n            return 0;\n        }\n\n        check_result = check_flag_08002c2e_08002d3c(flag_ptr);\n\n        if(check_result != 0)\n        {\n            break;\n        }\n\n        if((flag_len != 0xffffffff) && ((flag_len == 0) || (check_result = get_value_from_pointer_080015a0(), flag_len < (uint)(check_result - param_3))))\n        {\n            flag_ptr[0x10] |= 0x20;\n            flag_ptr[0xc] = 0;\n            *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n            *(undefined *)(flag_ptr + 0xf) = 0;\n            return 3;\n        }\n    }\n\n    return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_flag_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "count_down_08003568",
                "param_1": "input_num",
                "local_c": "multiplier"
            },
            "code": "void count_down_08003568(uint32_t input_num) {\n    uint32_t multiplier = (uint32_t)((uint64_t)DAT_080035a0 * (uint64_t)*(uint32_t *)PTR_DAT_0800359c >> 0x29);\n    do {\n        input_num--;\n    } while (input_num != 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": false,
            "current_name": "count_down_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "decode_and_calculate_float_bits_080049cc",
                "param_1": "input_param",
                "local_20": "num_iterations",
                "local_c": "float_bit_1",
                "local_10": "float_bit_2",
                "local_14": "float_bit_3",
                "local_18": "float_bit_4",
                "local_24": "decode_and_store_bits",
                "local_1c": "bit_count",
                "local_28": "temp_float_bit_1",
                "local_2c": "temp_float_bit_2"
            },
            "code": "void decode_and_calculate_float_bits_080049cc(int input_param){\n    int num_iterations = 1;\n    int bit_count = 0;\n    float float_bit_1 = 0.0;\n    float float_bit_2 = 0.0;\n    float float_bit_3 = 0.0;\n    float float_bit_4 = 0.0;\n    float temp_float_bit_1 = 0.0;\n    float temp_float_bit_2 = 0.0;\n    float temp_float_bit_3 = 0.0;\n    float temp_float_bit_4 = 0.0;\n    float (*decode_and_store_bits)(int) = (float (*)(int))(*((int *)PTR_DAT_08004adc));\n    while(num_iterations <= bit_count){\n        temp_float_bit_1 = 0.0;\n        temp_float_bit_2 = 0.0;\n        decode_and_store_bits(input_param);\n        calculate_float_bits_from_params_08004d78(input_param, &temp_float_bit_1, &temp_float_bit_2);\n        float_bit_3 = FUNC_08000aa8(float_bit_3, temp_float_bit_1);\n        float_bit_4 = FUNC_08000aa8(float_bit_4, temp_float_bit_2);\n        float_bit_1 = FUNC_08000aa8(float_bit_1, *(float *)(input_param + 0x10));\n        float_bit_2 = FUNC_08000aa8(float_bit_2, *(float *)(input_param + 0x14));\n        decode_and_store_bits = (float (*)(int))(*((int *)PTR_DAT_08004adc));\n        bit_count++;\n    }\n    int leading_zeros = leading_zero_bits_08000c10(num_iterations);\n    *(float *)(input_param + 0x1c) = FUNC_08000e20(float_bit_1, leading_zeros);\n    *(float *)(input_param + 0x20) = FUNC_08000e20(float_bit_2, leading_zeros);\n    *(float *)(input_param + 0x24) = FUNC_08000e20(float_bit_3, leading_zeros);\n    *(float *)(input_param + 0x28) = FUNC_08000e20(float_bit_4, leading_zeros);\n}",
            "called": [
                "FUN_08000e20",
                "FUN_08004d78",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": false,
            "current_name": "decode_and_calculate_float_bits_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "set_params_08003c94",
                "param_1": "param_list",
                "param_2": "values",
                "local_c": "current_value",
                "DAT_08003d54": "ptr_param1",
                "DAT_08003d58": "ptr_param2",
                "DAT_08003d5c": "ptr_param3"
            },
            "code": "void set_params_08003c94(uint *param_list, uint *values) {\n  uint current_value = *param_list;\n\n  if ((((param_list == DAT_08003d54) || (param_list == (uint *)0x40000000)) || (param_list == DAT_08003d58)) || (param_list == DAT_08003d5c)) {\n    current_value = values[1] | current_value & 0xffffff8f;\n  }\n  if (((param_list == DAT_08003d54) || (param_list == (uint *)0x40000000)) || ((param_list == DAT_08003d58 || (param_list == DAT_08003d5c)))) {\n    current_value = values[3] | current_value & 0xfffffcff;\n  }\n  *param_list = values[5] | current_value & 0xffffff7f;\n  param_list[0xb] = values[2];\n  param_list[10] = *values;\n  if (param_list == DAT_08003d54) {\n    param_list[0xc] = values[4];\n  }\n  param_list[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_080035a4",
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "set_params_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "check_and_return_params_08000978",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "check_parameters_and_return_value_08000988_08000988": "check_params_and_return_value"
            },
            "code": "void check_and_return_params_08000978(undefined4 first_param, undefined4 second_param, undefined4 third_param, undefined4 fourth_param)\n{\n  check_parameters_and_return_value_08000988_08000988(third_param, fourth_param, first_param, second_param);\n  return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": false,
            "current_name": "check_and_return_params_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "calculate_value_from_params_0800884c",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "value5",
                "iVar4": "value4",
                "uVar5": "value3",
                "PTR_DAT_080088e0": "ptr1_data",
                "PTR_DAT_080088e4": "ptr2_data",
                "PTR_DAT_080088e8": "ptr3_data"
            },
            "code": "int calculate_value_from_params_0800884c(int value1, int value2)\n{\n  uint32_t* ptr1 = PTR_DAT_080088e0;\n  do_nothing_with_pointer_080090a8();\n  uint32_t value3 = *(uint32_t*)(*(int*)(ptr1 + 8) + 4) & 0xfffffffc;\n  int value4 = ((0xfef - value2) + value3 & 0xfffff000) - 0x1000;\n  if (0xfff < value4) {\n    int value5 = get_local_value_08009744(value1,0);\n    if (value5 == *(int*)(ptr1 + 8) + value3) {\n      int value6 = get_local_value_08009744(value1,-value4);\n      undefined* ptr2 = PTR_DAT_080088e4;\n      if (value6 != -1) {\n        int value7 = *(int*)PTR_DAT_080088e4;\n        *(uint32_t*)(*(int*)(ptr1 + 8) + 4) = value3 - value4 | 1;\n        *(int*)ptr2 = value7 - value4;\n        do_nothing_with_pointer_080090b4(value1);\n        return 1;\n      }\n      value4 = get_local_value_08009744(value1,0);\n      ptr2 = PTR_DAT_080088e4;\n      value3 = value4 - *(int*)(ptr1 + 8);\n      if (0xf < (int)value3) {\n        int value8 = *(int*)PTR_DAT_080088e8;\n        *(uint32_t*)(*(int*)(ptr1 + 8) + 4) = value3 | 1;\n        *(int*)ptr2 = value4 - value8;\n      }\n    }\n  }\n  do_nothing_with_pointer_080090b4(value1);\n  return 0;\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "calculate_value_from_params_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "decode_data_0800901c",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "key",
                "puVar1": "decoded_data",
                "uVar2": "current_key_byte",
                "uVar3": "current_decoded_byte",
                "puVar4": "current_data_byte",
                "uVar5": "is_aligned",
                "bVar6": "is_key_null"
            },
            "code": "uint* decode_data_0800901c(uint* data, uint data_length, uint* key) {\n  uint* decoded_data;\n  uint current_key_byte;\n  uint* current_data_byte;\n  uint current_decoded_byte;\n  bool is_aligned = ((uint)data & 3) == 0;\n  if (is_aligned) {\n    decoded_data = key;\n    if (data_length > 3) {\n      current_key_byte = (data_length & 0xff) << 8 | (key & 0xff);\n      current_data_byte = data;\n      do {\n        current_decoded_byte = *current_data_byte ^ (current_key_byte | current_key_byte << 0x10);\n        decoded_data = current_data_byte + 1;\n        if ((current_decoded_byte + 0xfefefeff & ~current_decoded_byte & 0x80808080) != 0) {\n          goto invalid_data;\n        }\n        data_length--;\n        data = data_length;\n        current_data_byte = decoded_data;\n      } while (data_length > 3);\n    }\n    decoded_data = current_data_byte;\n    if (decoded_data != 0) {\n      if (*(byte*)decoded_data != (key & 0xff)) {\n        data = (uint*)((int)data + (int)decoded_data);\n        do {\n          decoded_data = (uint*)((int)decoded_data + 1);\n          if (data == decoded_data) {\n            goto invalid_data;\n          }\n        } while (*(byte*)decoded_data != (key & 0xff));\n      }\n    }\n  } else {\n    current_data_byte = (uint*)((int)key - 1);\n    if (key == 0) {\n      decoded_data = 0;\n    } else if (*(byte*)data != (key & 0xff)) {\n      decoded_data = (uint*)((int)data + 1);\n      do {\n        data = decoded_data;\n        decoded_data = data;\n        key = current_data_byte;\n        if (((uint)data & 3) == 0) {\n          goto is_aligned;\n        }\n        bool is_key_null = current_data_byte == 0;\n        current_data_byte = (uint*)((int)current_data_byte - 1);\n        if (is_key_null) {\n          decoded_data = 0;\n        }\n        decoded_data = (uint*)((int)data + 1);\n      } while (*(byte*)data != (key & 0xff));\n    }\n  }\n  return decoded_data;\n  invalid_data:\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "decode_data_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_flag_if_param_is_four_0800177c",
                "param_1": "param",
                "*DAT_080017b0": "*data_pointer"
            },
            "code": "void set_flag_if_param_is_four_0800177c(int param){\n    if (param == 4) {\n        *DAT_080017b0 = *DAT_080017b0 | 4;\n    }\n    else {\n        *DAT_080017b0 = *DAT_080017b0 & 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_four_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "decode_calculate_and_fill_buffer_080017b4",
                "0": "buffer_index"
            },
            "code": "void decode_calculate_and_fill_buffer_080017b4(int buffer_index)\n{\n  decode_calculate_and_fill_buffer_080017b4_08004f78(buffer_index);\n  return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "decode_calculate_and_fill_buffer_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "PTR_DAT_080055e8": "data_ptr",
                "DAT_080055ec": "initial_value",
                "check_input_validity_0800438a": "check_input_validity",
                "infinite_loop_08005674": "infinite_loop",
                "PTR_s____src_main_c_080055f0": "source_file_ptr"
            },
            "code": "void initialize_data_08005598(void)\n{\n    int input_validity;\n    int* PTR_DAT_080055e8 = (int*) PTR_DAT_080055e8;\n    PTR_DAT_080055e8[0] = DAT_080055ec;\n    PTR_DAT_080055e8[1] = 0x1c200;\n    PTR_DAT_080055e8[2] = 0;\n    PTR_DAT_080055e8[3] = 0;\n    PTR_DAT_080055e8[4] = 0;\n    PTR_DAT_080055e8[5] = 0xc;\n    PTR_DAT_080055e8[6] = 0;\n    PTR_DAT_080055e8[7] = 0;\n    input_validity = check_input_validity(PTR_DAT_080055e8);\n    if (input_validity != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080055f0, 0x1ed);\n    }\n    return;\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_input_08001030",
                "in_CY": "input_char",
                "concatenate_integers_08000fc8": "concatenate_integers"
            },
            "code": "bool is_end_of_input_08001030(void)\n{\n  char input_char;\n  concatenate_integers();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "get_concatenated_values_080011ec",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "result"
            },
            "code": "uint64_t get_concatenated_values_080011ec(int first_value, int second_value, int third_value, int fourth_value) {\n  if (fourth_value == 0 && third_value == 0) {\n    if (second_value != 0 || first_value != 0) {\n      second_value = -1;\n      first_value = -1;\n    }\n    return CONCAT44(second_value, first_value);\n  }\n  uint64_t result = FUNC_0800121c();\n  return result;\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "decode_packet_with_offset_08004f3c",
                "param_1": "packet_data",
                "param_2": "offset",
                "PTR_DAT_08004f5c": "packet_size"
            },
            "code": "void decode_packet_with_offset_08004f3c(void* packet_data, int offset, unsigned short PTR_DAT_08004f5c) {\n  decode_packet(packet_data, offset, PTR_DAT_08004f5c, 0x32);\n  return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_packet_with_offset_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  do_nothing_with_pointer_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        do_nothing_with_pointer_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            reverse_copy_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          do_nothing_with_pointer_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          reverse_copy_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        reverse_copy_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_08009a18",
                "FUN_080090a8",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "validate_input_08002640",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "iVar1": "condition",
                "uVar2": "return_value"
            },
            "code": "undefined4 validate_input_08002640(uint **input, byte flag, undefined2 value1, short value2, uint value3, int value4)\n{\n    int condition;\n    undefined4 return_value;\n\n    **input |= 0x100;\n    do {\n        if ((~(*input)[5] & 1) == 0) {\n            condition = 0;\n            goto LAB_0800270a;\n        }\n    } while ((value3 == 0xffffffff) || ((value3 != 0 && (condition = get_pointer_value(), (uint)(condition - value4) <= value3))));\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    *(undefined *)(input + 0xf) = 0;\n    condition = 3;\n\nLAB_0800270a:\n    if (condition == 0) {\n        (*input)[4] = flag & 0xfe;\n        condition = validate_input_08002640_08002ad8(input, DAT_080027f0, value3, value4);\n        if (condition == 0) {\n            condition = check_flag_08002bb4(input, value3, value4, (*input)[6]);\n            if (condition == 0) {\n                if (value2 == 1) {\n                    (*input)[4] = (uint)(byte)value1;\n                }\n                else {\n                    (*input)[4] = (uint)(byte)((ushort)value1 >> 8);\n                    condition = check_flag_08002bb4(input, value3, value4);\n                    if (condition != 0) {\n                        if (input[0x10] == (uint *)0x4) {\n                            **input |= 0x200;\n                            return 1;\n                        }\n                        return 3;\n                    }\n                    (*input)[4] = (uint)(byte)value1;\n                }\n                return_value = 0;\n            }\n            else if (input[0x10] == (uint *)0x4) {\n                **input |= 0x200;\n                return_value = 1;\n            }\n            else {\n                return_value = 3;\n            }\n        }\n        else if (input[0x10] == (uint *)0x4) {\n            return_value = 1;\n        }\n        else {\n            return_value = 3;\n        }\n    }\n    else {\n        return_value = 3;\n    }\n    return return_value;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "validate_input_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "bitwise_xor",
                "bVar2": "are_first_and_second_params_zero",
                "bVar3": "is_result_negative"
            },
            "code": "uint check_parameters_080008fc(uint first_param,uint second_param,uint third_param,uint fourth_param)\n{\n  uint result;\n  bool is_negative_second_param = ((int)(second_param << 1) >> 0x15 == -1);\n  bool is_negative_fourth_param = ((int)(fourth_param << 1) >> 0x15 == -1);\n  if (is_negative_second_param || is_negative_fourth_param)\n  {\n    if ((is_negative_second_param && ((first_param | (second_param << 0xc)) != 0)) ||\n        (is_negative_fourth_param && ((third_param | (fourth_param << 0xc)) != 0)))\n    {\n      result = 1;\n    }\n    else\n    {\n      result = 0;\n    }\n  }\n  else\n  {\n    bool are_first_and_second_params_zero = ((first_param | (second_param << 1)) == 0);\n    bool are_third_and_fourth_params_zero = ((third_param | (fourth_param << 1)) == 0);\n    if (!are_first_and_second_params_zero && !are_third_and_fourth_params_zero)\n    {\n      bool are_second_and_fourth_params_equal = (second_param == fourth_param);\n      bool are_first_and_third_params_equal = (first_param == third_param);\n      if (are_second_and_fourth_params_equal && are_first_and_third_params_equal)\n      {\n        result = 0;\n      }\n      else\n      {\n        uint bitwise_xor = (second_param ^ fourth_param);\n        bool is_bitwise_xor_zero = (bitwise_xor == 0);\n        if (is_bitwise_xor_zero)\n        {\n          result = 1;\n        }\n        else\n        {\n          bool is_bitwise_xor_negative = (-1 < (int)bitwise_xor);\n          bool is_fourth_param_less_than_or_equal_to_second_param = (fourth_param <= second_param);\n          bool is_third_param_less_than_or_equal_to_first_param = (third_param <= first_param);\n          bool is_result_negative = (is_bitwise_xor_negative && is_fourth_param_less_than_or_equal_to_second_param) || !is_third_param_less_than_or_equal_to_first_param;\n          result = is_result_negative ? 0 : 1;\n        }\n      }\n    }\n    else\n    {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": false,
            "current_name": "check_parameters_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "check_parameters_and_return_value_08000988_08000988",
                "param_1": "value_to_return",
                "check_parameters_080008fc": "check_parameters"
            },
            "code": "undefined4 check_parameters_and_return_value_08000988_08000988(undefined4 value_to_return) {\n  check_parameters_080008fc();\n  return value_to_return;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000978",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_080009ac"
            ],
            "imported": false,
            "current_name": "check_parameters_and_return_value_08000988_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "set_parameter_value_08001714",
                "param_1": "parameter_value"
            },
            "code": "void set_parameter_value_08001714(undefined4 parameter_value)\n{\n    set_param_value_080015b4(parameter_value);\n    return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "set_parameter_value_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "set_local_variable_to_zero_and_return_08005dfc",
                "param_1": "input_array",
                "param_2": "input_size",
                "param_3": "input_1",
                "param_4": "input_2",
                "local_80": "local_array",
                "local_78": "local_max",
                "uStack_74": "stack_var_74",
                "local_70": "local_pointer",
                "local_6c": "local_min",
                "uStack_8": "stack_var_8",
                "uStack_4": "stack_var_4"
            },
            "code": "void set_local_variable_to_zero_and_return_08005dfc(undefined *input_array, undefined4 input_size, undefined4 input_1, undefined4 input_2) {\n  undefined *local_array[2];\n  undefined4 local_max = 0x7fffffff;\n  undefined4 local_78 = 0x7fffffff;\n  undefined4 uStack_74 = DAT_08005e3c;\n  undefined *local_pointer = input_array;\n  undefined4 uStack_8 = input_1;\n  undefined4 uStack_4 = input_2;\n  FUNC_08005e9c(*(undefined4 *)PTR_PTR_DAT_08005e38, local_array, input_size, &uStack_8);\n  *local_array[0] = 0;\n  return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_local_variable_to_zero_and_return_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "calculate_dividend_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "dividend_array",
                "iVar3": "carry",
                "iVar4": "divisor_array_length",
                "iVar5": "j",
                "uVar6": "temp1",
                "puVar7": "divisor_array",
                "puVar8": "dividend_array",
                "puVar9": "divisor_array_end",
                "puVar11": "divisor_array",
                "puVar12": "divisor_array_end",
                "uVar10": "temp2",
                "compare_arrays_080094f8": "compare_arrays_080094f8"
            },
            "code": "uint calculate_dividend_080078c0(uint dividend, uint divisor) {\n  uint quotient;\n  uint *divisor_array;\n  int divisor_array_length;\n  int i;\n  int j;\n  uint temp1;\n  uint *dividend_array;\n  uint *divisor_array_end;\n  uint temp2;\n  uint *dividend_array_end;\n  \n  divisor_array_length = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < divisor_array_length) {\n    return 0;\n  }\n  j = divisor_array_length - 1;\n  divisor_array = (uint *)(divisor + 0x14);\n  dividend_array = (uint *)(dividend + 0x14);\n  temp1 = dividend_array[j] / (divisor_array[j] + 1);\n  divisor_array_end = divisor_array + j;\n  if (temp1 != 0) {\n    quotient = 0;\n    i = 0;\n    do {\n      divisor_array_end++;\n      temp2 = temp1 * (*divisor_array & 0xffff) + quotient;\n      quotient = temp1 * (*divisor_array >> 0x10) + (temp2 >> 0x10);\n      temp2 = (i - (temp2 & 0xffff)) + (*dividend_array & 0xffff);\n      i = ((*dividend_array >> 0x10) - (quotient & 0xffff)) + ((int)temp2 >> 0x10);\n      *dividend_array = temp2 & 0xffff | i * 0x10000;\n      i = i >> 0x10;\n      quotient = quotient >> 0x10;\n      dividend_array++;\n      divisor_array++;\n    } while (divisor_array <= divisor_array_end);\n    if (dividend_array[j] == 0) {\n      if ((dividend_array < dividend_array + divisor_array_length - 2) && (dividend_array[divisor_array_length - 2] == 0)) {\n        dividend_array_end = dividend_array + divisor_array_length - 3;\n        do {\n          j--;\n          if (dividend_array_end <= dividend_array) break;\n          temp2 = *dividend_array_end;\n          dividend_array_end--;\n        } while (temp2 == 0);\n      }\n      *(int *)(dividend + 0x10) = j;\n    }\n  }\n  i = compare_arrays_080094f8();\n  if (-1 < i) {\n    i = 0;\n    temp1 = temp1 + 1;\n    dividend_array = (uint *)(dividend + 0x14);\n    do {\n      divisor_array++;\n      temp2 = (i - (*divisor_array & 0xffff)) + (*dividend_array & 0xffff);\n      i = ((*dividend_array >> 0x10) - (*divisor_array >> 0x10)) + ((int)temp2 >> 0x10);\n      *dividend_array = temp2 & 0xffff | i * 0x10000;\n      i = i >> 0x10;\n      dividend_array++;\n    } while (divisor_array <= divisor_array_end);\n    if (dividend_array[j] == 0) {\n      if ((dividend_array < dividend_array + j - 1) && (dividend_array[j - 1] == 0)) {\n        dividend_array_end = dividend_array + j - 2;\n        do {\n          j--;\n          if (dividend_array_end <= dividend_array) break;\n          temp2 = *dividend_array_end;\n          dividend_array_end--;\n        } while (temp2 == 0);\n      }\n      *(int *)(dividend + 0x10) = j;\n    }\n  }\n  return temp1;\n}\n",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_dividend_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "result_upper",
                "uVar3": "func_result",
                "uVar4": "abs_param_4_masked",
                "uVar5": "abs_param_2_masked",
                "uVar6": "uVar6",
                "abs_param_3": "abs_input_3",
                "abs_param_1": "abs_input_1",
                "abs_param_4": "abs_input_4",
                "abs_param_2": "abs_input_2",
                "abs_param_4_masked": "abs_input_4_masked",
                "abs_param_2_masked": "abs_input_2_masked",
                "threshold": "threshold"
            },
            "code": "uint calculate_result_thunk_08005838(uint param_1, uint param_2, uint param_3, uint param_4)\n{\n    uint result = 0;\n    uint abs_param_3 = abs(param_3);\n    uint abs_param_1 = abs(param_1);\n    uint abs_param_4 = abs(param_4);\n    uint abs_param_2 = abs(param_2);\n    uint abs_param_4_masked = abs_param_4 & 0x7fffffff;\n    uint abs_param_2_masked = abs_param_2 & 0x7fffffff;\n    uint threshold = abs_param_4_masked | (-abs_param_3 | abs_param_3) >> 0x1f;\n    if (DAT_080059e8 < threshold || DAT_080059e8 < (abs_param_2_masked | (-abs_param_1 | abs_param_1) >> 0x1f)) {\n        result = FUNC_0800015c(abs_param_3, abs_param_4, abs_param_1, abs_param_2);\n    } else if ((abs_param_4 + 0xc0100000 | abs_param_3) == 0) {\n        result = FUNC_080059f0();\n    } else {\n        uint param_4_shifted = (int)abs_param_4 >> 0x1e;\n        uint param_2_shifted = abs_param_2 >> 0x1f;\n        if ((abs_param_5 | abs_param_1) == 0) {\n            if (param_4_shifted == 2) {\n                result = DAT_080059b0;\n            } else {\n                if (param_4_shifted == 3) {\n                    result = DAT_080059d8;\n                } else if (param_4_shifted == 1) {\n                    result = DAT_080059d0;\n                } else {\n                    result = DAT_080059c8;\n                }\n            }\n        } else {\n            if ((abs_param_4_masked | abs_param_3) != 0) {\n                if (DAT_080059e8 == abs_param_4_masked) {\n                    if (DAT_080059e8 == abs_param_2_masked) {\n                        if (param_4_shifted == 2) {\n                            result = DAT_080059e0;\n                        } else if (param_4_shifted == 3) {\n                            result = DAT_080059d8;\n                        } else if (param_4_shifted == 1) {\n                            result = DAT_080059d0;\n                        } else {\n                            result = DAT_080059c8;\n                        }\n                    } else {\n                        if (param_4_shifted == 2) {\n                            result = DAT_080059b0;\n                        } else if (param_4_shifted == 3) {\n                            result = DAT_080059a0;\n                        } else if (param_4_shifted == 1) {\n                            result = 0;\n                        } else {\n                            result = 0;\n                        }\n                    }\n                } else if (DAT_080059e8 != abs_param_2_masked) {\n                    int difference = (int)(DAT_080059e8 - abs_param_4_masked) >> 0x14;\n                    if (difference < 0x3d) {\n                        if (((int)abs_param_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n                            result = 0;\n                        } else {\n                            FUNC_0800071c(abs_param_1, abs_param_2, abs_param_3, abs_param_4, abs_param_4);\n                            do_nothing_08005d0c();\n                            uint64_t func_result = FUNC_080059f0();\n                            result = (uint)func_result;\n                        }\n                    } else {\n                        uint32_t uVar2 = (uint32_t)((uint64_t)func_result >> 0x20);\n                        uint32_t uVar1 = (uint32_t)func_result;\n                        if (param_4_shifted == 1) {\n                            result = uVar1;\n                        } else if (param_4_shifted == 2) {\n                            uint64_t uVar3 = FUNC_08000158(uVar1, uVar2, DAT_080059a8, DAT_080059ac);\n                            result = FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)uVar3, (int)(uVar3 >> 0x20));\n                        } else if (param_4_shifted == 0) {\n                            result = uVar1;\n                        } else {\n                            uint64_t uVar3 = FUNC_08000158(uVar1, uVar2, DAT_080059a8, DAT_080059ac);\n                            result = FUNC_08000158((int)uVar3, (int)(uVar3 >> 0x20), DAT_080059b0, DAT_080059b4);\n                        }\n                    }\n                }\n            } else {\n                result = -1 < (int)abs_param_2 ? DAT_080059b8 : DAT_080059c0;\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "count_leading_zeroes_and_shift_left_080003f4",
                "param_1": "input",
                "uVar1": "return_high_bits",
                "uVar2": "temp_input",
                "uVar3": "shift_amount3",
                "iVar4": "shift_amount4",
                "uVar5": "shift_amount",
                "uVar6": "input_sign_bit",
                "in_r12": "unused",
                "bVar7": "is_shift_amount4_negative",
                "bVar8": "is_shift_amount4_zero",
                "bVar9": "is_shift_amount3_negative"
            },
            "code": "ulonglong count_leading_zeroes_and_shift_left_080003f4(uint input) {\n  uint temp_input = input;\n  uint shift_amount = 0;\n  if (input == 0) {\n    return 0;\n  }\n  if ((int)input < 0) {\n    temp_input = -input;\n  }\n  shift_amount = count_leading_zeroes(temp_input) + 21;\n  if (shift_amount < 32) {\n    return ((ulonglong)temp_input << (shift_amount & 0xff)) & 0xFFFFFFFF00000000;\n  }\n  if (shift_amount < 1075) {\n    uint shift_amount2 = 1075 - shift_amount;\n    uint high_bits = (temp_input << (shift_amount & 0xff)) & 0xFFFFFFFF;\n    uint low_bits = 0;\n    if (shift_amount < 32) {\n      low_bits = 0;\n    }\n    else {\n      low_bits = 0xFFFFFFFF >> (32 - (shift_amount & 0xff));\n    }\n    return (((ulonglong)high_bits) << 32) | low_bits;\n  }\n  uint shift_amount3 = ~(1075 - shift_amount);\n  if (shift_amount3 > 30) {\n    return (((ulonglong)input) >> (shift_amount3 - 31)) & 0x80000000FFFFFFFF;\n  }\n  int shift_amount4 = shift_amount3 - 19;\n  if (shift_amount4 == 0 || shift_amount4 < 0 != SCARRY4(shift_amount3 - 31, 12)) {\n    shift_amount3++;\n    uint high_bits = (temp_input >> (shift_amount3 & 0xff)) & 0xFFFFFFFF;\n    uint low_bits = (temp_input << (32 - shift_amount3 & 0xff)) & 0xFFFFFFFF;\n    return (((ulonglong)high_bits) << 32) | low_bits;\n  }\n  uint high_bits = (((ulonglong)input) & 0x80000000) | (temp_input >> (32 - shift_amount4 & 0xff));\n  uint low_bits = (temp_input << (shift_amount4 & 0xff)) & 0xFFFFFFFF;\n  return (((ulonglong)high_bits) << 32) | low_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_and_shift_left_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    copy_parameter_to_pointer_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = is_input_valid_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = encode_data_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = convert_uint_to_ulonglong_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = count_leading_zeroes_and_shift_left_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = convert_to_int_0800119c();\n  iVar10 = check_if_string_terminated_with_null_char_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = count_leading_zeroes_and_shift_left_080003f4(local_74);\n    iVar10 = is_input_valid_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = is_end_of_string_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)allocate_or_get_buffer_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)allocate_or_get_buffer_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = check_if_string_terminated_with_null_char_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = count_leading_zeroes_and_shift_left_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = count_leading_zeroes_and_shift_left_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = count_leading_zeroes_and_shift_left_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = convert_to_int_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = count_leading_zeroes_and_shift_left_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = convert_to_int_0800119c();\n            uVar23 = count_leading_zeroes_and_shift_left_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = check_if_string_terminated_with_null_char_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = is_end_of_string_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = is_end_of_string_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = is_end_of_string_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = convert_to_int_0800119c();\n              uVar23 = count_leading_zeroes_and_shift_left_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = check_if_string_terminated_with_null_char_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = check_if_string_terminated_with_null_char_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = is_end_of_string_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = check_if_string_terminated_with_null_char_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    copy_parameter_to_pointer_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = convert_to_int_0800119c();\n        uVar21 = count_leading_zeroes_and_shift_left_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = is_input_valid_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = convert_to_int_0800119c();\n            uVar22 = count_leading_zeroes_and_shift_left_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = is_input_valid_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = is_end_of_string_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = is_input_valid_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = check_params_and_return_result_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = allocate_buffer_and_set_values_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = calculate_hash_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = calculate_hash_080093a4(param_1,uVar12,iVar9);\n          uVar8 = calculate_hash_08009258(param_1,uVar12,uVar3);\n          copy_parameter_to_pointer_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = calculate_hash_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = allocate_buffer_and_set_values_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = calculate_hash_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = count_leading_zeros_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = allocate_buffer_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = allocate_buffer_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = compare_arrays_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = calculate_polynomial_08009120(param_1,uVar5,5);\n        iVar9 = compare_arrays_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = calculate_dividend_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = allocate_buffer_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = allocate_or_get_buffer_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        copy_memory_to_destination_buffer_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = allocate_buffer_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = calculate_dividend_080078c0(uVar3,uVar5);\n      iVar13 = compare_arrays_080094f8(uVar3,local_80);\n      iVar10 = calculate_difference_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = compare_arrays_080094f8(uVar3);\n        copy_parameter_to_pointer_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      copy_parameter_to_pointer_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = allocate_buffer_08009444(param_1,uVar3,1);\n          iVar13 = compare_arrays_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = allocate_buffer_08009444(param_1,uVar3,1);\n    iVar9 = compare_arrays_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    copy_parameter_to_pointer_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      copy_parameter_to_pointer_0800910c(param_1);\n    }\n  }\n  copy_parameter_to_pointer_0800910c(param_1,uVar12);\nLAB_08008294:\n  copy_parameter_to_pointer_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08001084",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800910c",
                "FUN_080093a4",
                "FUN_08000998",
                "FUN_08009444",
                "FUN_08009120",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_08009530",
                "FUN_080078c0",
                "FUN_08009258",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_08000158",
                "FUN_080009d4",
                "FUN_0800071c",
                "FUN_080094f8",
                "FUN_080090c0",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "extract_bits_0800166c",
                "param_1": "bit_mask",
                "param_2": "source",
                "param_3": "shift_amount",
                "uVar1": "num_bits_to_extract",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint extract_bits_0800166c(uint bit_mask, uint source, uint shift_amount) {\n  uint num_bits_to_extract = 7 - (bit_mask & 7);\n  if (num_bits_to_extract > 3) {\n    num_bits_to_extract = 4;\n  }\n  uint shift_distance = (bit_mask + 4 < 7) ? 0 : (bit_mask - 3);\n  uint extracted_bits = source & ~(-1 << (bit_mask & 0xff));\n  extracted_bits |= (~(-1 << (num_bits_to_extract & 0xff)) & source) << (shift_distance & 0xff);\n  return extracted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "extract_bits_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "set_bits_to_one_0800360c",
                "param_1": "ptr_param",
                "*param_1": "arr",
                "**param_1": "*arr"
            },
            "code": "uint set_bits_to_one_0800360c(uint **ptr_param)\n{\n  uint* arr = *ptr_param;\n  arr[3] |= 1;\n  **ptr_param |= 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bits_to_one_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "fill_buffer_with_char_08005d68",
                "param_1": "buffer",
                "param_2": "character",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "next_word",
                "uVar3": "remaining_bytes",
                "uVar4": "repeated_character_word",
                "bVar5": "size_less_than_four"
            },
            "code": "void fill_buffer_with_char_08005d68(uint32_t *buffer, char character, uint32_t size){\n    uint32_t *current_word;\n    uint32_t remaining_bytes;\n    uint32_t repeated_character_word;\n    bool size_less_than_four;\n    \n    if (((uint32_t)buffer & 3) != 0) {\n        remaining_bytes = size - 1;\n        current_word = buffer;\n        if (size == 0) {\n            return;\n        }\n        while(true) {\n            buffer = (uint32_t *)((int)current_word + 1);\n            *(char *)current_word = character;\n            size = remaining_bytes;\n            if (((uint32_t)buffer & 3) == 0) break;\n            size_less_than_four = remaining_bytes == 0;\n            remaining_bytes = remaining_bytes - 1;\n            current_word = buffer;\n            if (size_less_than_four) {\n                return;\n            }\n        }\n    }\n    if (3 < size) {\n        repeated_character_word = CONCAT22(CONCAT11(character, character), CONCAT11(character, character));\n        remaining_bytes = size;\n        current_word = buffer;\n        if (0xf < size) {\n            remaining_bytes = size - 0x10;\n            current_word = buffer + 4;\n            do {\n                current_word[-4] = repeated_character_word;\n                current_word[-3] = repeated_character_word;\n                current_word[-2] = repeated_character_word;\n                current_word[-1] = repeated_character_word;\n                current_word = current_word + 4;\n            } while (current_word != (uint32_t *)((int)buffer + (remaining_bytes & 0xfffffff0) + 0x20));\n            size = size & 0xf;\n            buffer = buffer + ((remaining_bytes >> 4) + 1) * 4;\n            remaining_bytes = size;\n            current_word = buffer;\n            if (size < 4) goto LAB_08005de4;\n        }\n        do {\n            size = size - 4;\n            *buffer = repeated_character_word;\n            buffer = buffer + 1;\n        } while (3 < size);\n        buffer = (uint32_t *)((int)current_word + (remaining_bytes - 4 & 0xfffffffc) + 4);\n        remaining_bytes = remaining_bytes & 3;\n    }\n    LAB_08005de4:\n    if (remaining_bytes != 0) {\n        current_word = buffer;\n        do {\n            uint32_t *next_word = (uint32_t *)((int)current_word + 1);\n            *(char *)current_word = character;\n            current_word = next_word;\n        } while ((uint32_t *)(remaining_bytes + (int)buffer) != current_word);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_char_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "improved_function_080017c4",
                "param_1": "bit_vector",
                "param_2": "flags",
                "uVar1": "bit_shift",
                "uVar2": "bit_index",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "flag",
                "puVar6": "bit_vector_ptr",
                "iVar7": "index",
                "local_10": "bit_offset",
                "local_c": "bit_count"
            },
            "code": "void improved_function_080017c4(uint *bit_vector, uint *flags) {\n  uint flag;\n  uint *bit_vector_ptr;\n  int index;\n  uint bit_offset;\n  uint bit_value;\n  uint bit_mask;\n  uint bit_shift;\n  uint bit_index;\n  uint bit_count;\n  bit_offset = 0;\n  bit_count = 0;\n  do {\n    if (bit_count > 0xf) {\n      return;\n    }\n    bit_mask = 1 << (bit_count & 0xff);\n    bit_value = *flags & bit_mask;\n    if (bit_value == bit_mask) {\n      flag = flags[1];\n      if (flag == 0x12) {\n        bit_offset = flags[3] + 0xc;\n      }\n      else if (flag < 0x13) {\n        if (flag == 2) {\n          bit_offset = flags[3] + 8;\n        }\n        else if (flag < 3) {\n          if (flag == 0) goto LAB_08001882;\n          if (flag == 1) {\n            bit_offset = flags[3];\n          }\n        }\n        else if (flag == 3) {\n          bit_offset = 0;\n        }\n        else if (((flag == PTR_DAT_08001a4c) || (((bit_shift = PTR_DAT_08001a54, bit_index = PTR_DAT_08001a50, PTR_DAT_08001a4c < flag && (bit_shift = PTR_DAT_08001a60, bit_index = PTR_DAT_08001a5c, flag == PTR_DAT_08001a58)) || (flag == bit_index)))) || (flag == bit_shift)) {\nLAB_08001882:\n          if (flags[2] == 0) {\n            bit_offset = 4;\n          }\n          else if (flags[2] == 1) {\n            bit_offset = 8;\n            bit_vector[4] = bit_mask;\n          }\n          else {\n            bit_offset = 8;\n            bit_vector[5] = bit_mask;\n          }\n        }\n      }\n      if (bit_value < 0x100) {\n        bit_shift = bit_count << 2;\n        bit_vector_ptr = bit_vector;\n      }\n      else {\n        bit_vector_ptr = bit_vector + 1;\n        bit_shift = (bit_count - 8) * 4;\n      }\n      *bit_vector_ptr = *bit_vector_ptr & ~(0xf << (bit_shift & 0xff)) | bit_offset << (bit_shift & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n        if (bit_vector == PTR_DAT_08001a6c) {\n          index = 0;\n        }\n        else if (bit_vector == PTR_DAT_08001a70) {\n          index = 1;\n        }\n        else if (bit_vector == PTR_DAT_08001a74) {\n          index = 2;\n        }\n        else if (bit_vector == PTR_DAT_08001a78) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(PTR_DAT_08001a68 + ((bit_count >> 2) + 2) * 4) = index << ((bit_count & 3) << 2) | ~(0xf << ((bit_count & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((bit_count >> 2) + 2) * 4);\n        if ((flags[1] & 0x10000) == 0) {\n          *PTR_DAT_08001a7c = ~bit_value & *PTR_DAT_08001a7c;\n        }\n        else {\n          *PTR_DAT_08001a7c = bit_value | *PTR_DAT_08001a7c;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          PTR_DAT_08001a7c[1] = ~bit_value & PTR_DAT_08001a7c[1];\n        }\n        else {\n          PTR_DAT_08001a7c[1] = bit_value | PTR_DAT_08001a7c[1];\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          PTR_DAT_08001a7c[2] = ~bit_value & PTR_DAT_08001a7c[2];\n        }\n        else {\n          PTR_DAT_08001a7c[2] = bit_value | PTR_DAT_08001a7c[2];\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          PTR_DAT_08001a7c[3] = ~bit_value & PTR_DAT_08001a7c[3];\n        }\n        else {\n          PTR_DAT_08001a7c[3] = bit_value | PTR_DAT_08001a7c[3];\n        }\n      }\n    }\n    bit_count++;\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "imported": false,
            "current_name": "improved_function_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "check_params_and_set_080035a4",
                "param_1": "params",
                "undefined4": "int",
                "uVar1": "result",
                "(undefined4 *)0x0": "NULL",
                "*(char *)((int)param_1 + 0x3d)": "*(params + 15)",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(params + 60)",
                "do_nothing_080035fa": "do_nothing",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)(params + 61)",
                "set_params_08003c94": "set_params"
            },
            "code": "int check_params_and_set_080035a4(int *params)\n{\n  int result;\n  if (params == NULL) {\n    result = 1;\n  }\n  else {\n    if (*(params + 15) == 0) {\n      *(char *)(params + 60) = 0;\n      do_nothing_080035fa(params);\n    }\n    *(char *)(params + 61) = 2;\n    set_params_08003c94(*params, params + 1);\n    *(char *)(params + 61) = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_params_and_set_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "set_bit_in_uint_array_080041ea",
                "param_1": "array_offset",
                "param_2": "bit_index",
                "param_3": "value_to_set",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_in_uint_array_080041ea(int array_offset, uint bit_index, int value_to_set) {\n    uint* uint_array_ptr = (uint*)(array_offset + 0x20);\n    uint bit_mask = 1 << (bit_index & 0xff);\n    *uint_array_ptr = (*uint_array_ptr & ~bit_mask) | (value_to_set << (bit_index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "decode_and_store_bits_08004ae0",
                "param_1": "bits",
                "local_2c": "byte_1",
                "local_2b": "byte_2",
                "local_2a": "byte_3",
                "local_29": "byte_4",
                "local_28": "byte_5",
                "local_27": "byte_6",
                "local_26": "byte_7",
                "local_25": "byte_8",
                "local_24": "byte_9",
                "local_23": "byte_10",
                "local_22": "byte_11",
                "local_21": "byte_12",
                "local_20": "byte_13",
                "local_1f": "byte_14",
                "local_1e": "short_6",
                "local_1c": "short_5",
                "local_1a": "short_4",
                "local_18": "short_3",
                "local_16": "short_2",
                "local_14": "short_1"
            },
            "code": "void decode_and_store_bits_08004ae0(undefined4 *bits)\n{\n  undefined4 num_bits;\n  undefined byte_1;\n  undefined byte_2;\n  undefined byte_3;\n  undefined byte_4;\n  undefined byte_5;\n  undefined byte_6;\n  short short_1;\n  short short_2;\n  short short_3;\n  short short_4;\n  short short_5;\n  short short_6;\n  (**(code **)PTR_DAT_08004bd4)(0xd0,0x3b,&byte_1,0xe);\n  short_1 = CONCAT11(byte_3,byte_2);\n  short_2 = CONCAT11(byte_4,byte_5);\n  short_3 = CONCAT11(byte_6,byte_7);\n  short_4 = CONCAT11(byte_8,byte_9);\n  short_5 = CONCAT11(byte_10,byte_11);\n  short_6 = CONCAT11(byte_12,byte_13);\n  num_bits = leading_zero_bits_08000c10((int)CONCAT11(byte_1,byte_2));\n  *bits = num_bits;\n  num_bits = leading_zero_bits_08000c10((int)short_1);\n  bits[1] = num_bits;\n  num_bits = leading_zero_bits_08000c10((int)short_2);\n  bits[2] = num_bits;\n  num_bits = leading_zero_bits_08000c10((int)short_3);\n  bits[3] = num_bits;\n  num_bits = leading_zero_bits_08000c10((int)short_4);\n  bits[4] = num_bits;\n  num_bits = leading_zero_bits_08000c10((int)short_5);\n  bits[5] = num_bits;\n  num_bits = leading_zero_bits_08000c10((int)short_6);\n  bits[6] = num_bits;\n  return;\n}",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_and_store_bits_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "validate_param_08001044",
                "param_1": "param",
                "uVar1": "shift",
                "max_val": "max_value",
                "sign_bit": "sign_bit_mask",
                "mantissa_mask": "mantissa_mask",
                "exponent_mask": "exponent_mask",
                "exponent_shift": "exponent_shift",
                "exponent": "exponent"
            },
            "code": "uint validate_param_08001044(uint param)\n{\n  uint max_val = 0x7f000000;\n  uint sign_bit = 0x80000000;\n  uint mantissa_mask = 0x7fffff;\n  uint exponent_mask = 0xff;\n  uint exponent_shift = 0x18;\n  uint exponent = (param << 1) >> exponent_shift;\n  uint shift = 0x9e - exponent;\n  if ((param & sign_bit) || (param << 1 < max_val)) {\n    return 0;\n  }\n  if (shift >= 0) {\n    return (param << 8 | sign_bit) >> (shift & exponent_mask);\n  }\n  if ((shift == 0xffffff9f) && ((param & mantissa_mask) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "validate_param_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "allocate_buffer_08009444",
                "param_1": "param_addr",
                "param_2": "buffer_info",
                "param_3": "buffer_size",
                "iVar1": "temp_var_1",
                "iVar2": "buffer_size_in_words",
                "iVar3": "num_words_in_buffer",
                "uVar4": "buffer_info_value",
                "iVar5": "buffer_info_addr",
                "iVar6": "temp_var_2",
                "puVar7": "buffer_ptr",
                "puVar8": "curr_buffer_ptr",
                "puVar9": "buffer_end_ptr",
                "puVar10": "buffer_end_ptr",
                "puVar11": "buffer_data_ptr",
                "iVar12": "num_words_to_shift",
                "iVar13": "buffer_size_with_offset",
                "uVar14": "carry_bits"
            },
            "code": "void allocate_buffer_08009444(int param_1, uint32_t *buffer_info, uint32_t buffer_size) {\n  int buffer_offset = buffer_info[4];\n  int num_words_to_shift = buffer_size >> 5;\n  int buffer_size_with_offset = num_words_to_shift + buffer_offset + 1;\n  int num_words_in_buffer = buffer_info[1];\n  int buffer_size_in_words = buffer_info[2];\n  while (buffer_size_with_offset != buffer_size_in_words && buffer_size_with_offset + buffer_offset < 0 == SBORROW4(buffer_size_with_offset, buffer_size_in_words * 2)) {\n    buffer_size_in_words = buffer_size_in_words * 2;\n    num_words_in_buffer++;\n  }\n  int buffer_start_addr = allocate_or_get_buffer_080090c0(param_1, num_words_in_buffer);\n  uint32_t *buffer_ptr = (uint32_t *)(buffer_start_addr + 0x14);\n  if (0 < num_words_to_shift) {\n    uint32_t *buffer_end_ptr = buffer_ptr + num_words_to_shift;\n    uint32_t *curr_buffer_ptr = buffer_ptr;\n    do {\n      curr_buffer_ptr++;\n      *buffer_ptr = 0;\n      buffer_ptr = buffer_end_ptr;\n    } while (curr_buffer_ptr != buffer_end_ptr);\n  }\n  buffer_offset = buffer_info[4];\n  uint32_t *buffer_data_ptr = buffer_info + 5;\n  buffer_size = buffer_size & 0x1f;\n  if (buffer_size == 0) {\n    buffer_ptr = buffer_ptr + -1;\n    uint32_t *buffer_end_ptr = buffer_data_ptr;\n    do {\n      buffer_end_ptr++;\n      buffer_ptr = buffer_ptr + 1;\n      *buffer_ptr = *buffer_end_ptr;\n    } while (buffer_end_ptr < buffer_data_ptr + buffer_offset);\n  }\n  else {\n    uint32_t carry_bits = 0;\n    uint32_t *buffer_end_ptr = buffer_data_ptr;\n    do {\n      uint32_t *curr_buffer_ptr = buffer_ptr;\n      *curr_buffer_ptr = *buffer_end_ptr << buffer_size | carry_bits;\n      uint32_t *next_buffer_ptr = buffer_end_ptr + 1;\n      carry_bits = *buffer_end_ptr >> (0x20 - buffer_size & 0xff);\n      buffer_ptr = curr_buffer_ptr + 1;\n      buffer_end_ptr = next_buffer_ptr;\n    } while (buffer_end_ptr < buffer_data_ptr + buffer_offset);\n    buffer_ptr[1] = carry_bits;\n    if (carry_bits != 0) {\n      buffer_size_with_offset = num_words_to_shift + buffer_offset + 2;\n    }\n  }\n  int buffer_info_addr = *(int *)(param_1 + 0x4c);\n  num_words_in_buffer = buffer_info[1];\n  uint32_t buffer_info_value = *(uint32_t *)(buffer_info_addr + num_words_in_buffer * 4);\n  *(int *)(buffer_start_addr + 0x10) = buffer_size_with_offset - 1;\n  *buffer_info = buffer_info_value;\n  *(uint32_t **)(buffer_info_addr + num_words_in_buffer * 4) = buffer_info;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "allocate_buffer_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_data_bits_080015fc",
                "DAT_08001614": "PTR_data",
                "uint": "unsigned int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint get_data_bits_080015fc(void)\n{\n    uint data = *(uint *)(DAT_08001614 + 0xc);\n    uint shifted_data = data >> 8;\n    uint masked_data = shifted_data & 7;\n    return masked_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "get_data_bits_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "decode_packet_08004436",
                "param_1": "packet_ptr",
                "param_2": "data_ptr",
                "param_3": "data_len",
                "param_4": "max_wait_time",
                "iVar1": "current_time",
                "iVar2": "start_time",
                "uVar3": "result",
                "local_58": "data_ptr_copy"
            },
            "code": "undefined4 decode_packet_08004436(uint **packet_ptr, ushort *data_ptr, short data_len, uint max_wait_time)\n{\n  int current_time;\n  int start_time;\n  undefined4 result;\n  ushort *data_ptr_copy;\n  \n  if (*(char *)((int)packet_ptr + 0x39) != ' ')\n  {\n    result = 2;\n  }\n  else if ((data_ptr == (ushort *)0x0) || (data_len == 0))\n  {\n    result = 1;\n  }\n  else if (*(char *)(packet_ptr + 0xe) == '\\x01')\n  {\n    result = 2;\n  }\n  else\n  {\n    *(undefined *)(packet_ptr + 0xe) = 1;\n    packet_ptr[0xf] = (uint *)0x0;\n    *(undefined *)((int)packet_ptr + 0x39) = 0x21;\n    start_time = get_current_time();\n    *(short *)(packet_ptr + 9) = data_len;\n    *(short *)((int)packet_ptr + 0x26) = data_len;\n    data_ptr_copy = data_ptr;\n    while (*(short *)((int)packet_ptr + 0x26) != 0)\n    {\n      *(short *)((int)packet_ptr + 0x26) = *(short *)((int)packet_ptr + 0x26) + -1;\n      current_time = get_current_time();\n      if ((packet_ptr[2] == (uint *)0x1000 && is_bit_set(packet_ptr, 7)) ||\n          (max_wait_time != 0 && (uint)(current_time - start_time) > max_wait_time))\n      {\n        reset_packet_state(packet_ptr);\n        result = 3;\n        goto end;\n      }\n      if (packet_ptr[4] == (uint *)0x0)\n      {\n        *data_ptr_copy = *data_ptr_copy & 0x1ff;\n        data_ptr_copy++;\n      }\n      else\n      {\n        *data_ptr_copy = (uint)*(byte *)data_ptr_copy;\n        data_ptr_copy = (ushort *)((int)data_ptr_copy + 1);\n      }\n    }\n    while ((*(short *)((int)packet_ptr + 0x18) & 0x40) != 0x40)\n    {\n      current_time = get_current_time();\n      if ((max_wait_time != 0 && (uint)(current_time - start_time) > max_wait_time))\n      {\n        reset_packet_state(packet_ptr);\n        result = 3;\n        goto end;\n      }\n    }\n    *(undefined *)((int)packet_ptr + 0x39) = 0x20;\n    *(undefined *)((int)packet_ptr + 0x3a) = 0x20;\n    *(undefined *)(packet_ptr + 0xe) = 0;\n    result = 0;\n  }\nend:\n  return result;\n}\n",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "decode_packet_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_if_initialized_08000110",
                "param_1": "input_string",
                "*PTR_DAT_08000128": "is_initialized",
                "DAT_0800012c": "some_condition",
                "PTR_FUN_08000130": "default_string"
            },
            "code": "char* check_if_initialized_08000110(char* input_string){\\n  if (*DAT_08000128 == \"\\0\") {\\n    if (DAT_0800012c != 0) {\\n      input_string = PTR_FUN_08000130;\\n    }\\n    *DAT_08000128 = 1;\\n  }\\n  return input_string;\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_pointer_08003504",
                "undefined4": "int",
                "PTR_DAT_08003514": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_08003504() {\n    int *PTR_DAT_08003514 = PTR_DAT_08003514;\n    int value = *PTR_DAT_08003514;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_ptr",
                "param_2": "data_ptr2",
                "param_3": "flag",
                "param_4": "data_type",
                "PTR_DAT_08004f28": "function_ptr",
                "PTR_DAT_08004f24": "function_ptr_arg"
            },
            "code": "void process_data_08004ee8(void *data_ptr, void *data_ptr2, int flag, int data_size, short data_type){\n    call_function_with_args(PTR_DAT_08004f28, data_ptr, data_ptr2, 1, data_size, data_type, *(int *)PTR_DAT_08004f24);\n    return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1_ptr",
                "param_2": "array2_ptr",
                "iVar1": "array_diff",
                "puVar2": "array2",
                "iVar3": "array2_start",
                "puVar4": "array1"
            },
            "code": "int compare_arrays_080094f8(int array1_ptr, int array2_ptr)\n{\n  int array2_start = *(int *)(array2_ptr + 0x10);\n  int array_diff = *(int *)(array1_ptr + 0x10) - array2_start;\n  if (array_diff == 0) {\n    uint *array2 = (uint *)(array2_ptr + 0x14 + array2_start * 4);\n    uint *array1 = (uint *)(array1_ptr + 0x14) + array2_start;\n    do {\n      array1 = array1 + -1;\n      array2 = array2 + -1;\n      if (*array1 != *array2) {\n        if (*array2 <= *array1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1_ptr + 0x14) < array1);\n  }\n  return array_diff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "is_input_valid_08000998",
                "in_ZR": "input_char",
                "check_parameters_and_return_value_08000988_08000988": "check_parameters_and_return_value"
            },
            "code": "bool is_input_valid_08000998(void)\n{\n  char input_char;\n  check_parameters_and_return_value();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_input_valid_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "check_if_string_terminated_with_null_char_080009ac",
                "in_CY": "input_char"
            },
            "code": "bool check_if_string_terminated_with_null_char_080009ac(void)\n{\n  char input_char;\n  check_parameters_and_return_value_08000988_08000988();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_if_string_terminated_with_null_char_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "concatenate_integers_08000fc8",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "code": "void concatenate_integers_08000fc8(int second_integer, int first_integer) {\n    concatenate_ints_08000fd0(second_integer, first_integer);\n    return;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": false,
            "current_name": "concatenate_integers_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "check_input_validity_0800438a",
                "param_1": "input_array",
                "uVar1": "result",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "do_nothing_08004424": "do_nothing",
                "*(uint *)(*param_1 + 0xc)": "*input_array[1]",
                "calculate_values_080046ec": "calculate_values",
                "*(uint *)(*param_1 + 0x10)": "*input_array[4]",
                "*(uint *)(*param_1 + 0x14)": "*input_array[5]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[10]"
            },
            "code": "int check_input_validity_0800438a(int *input_array)\n{\n    int result = 0;\n    if (input_array == NULL)\n    {\n        result = 1;\n    }\n    else\n    {\n        if (input_array[9] == 0)\n        {\n            input_array[14] = 0;\n            do_nothing_08004424(input_array);\n        }\n        input_array[9] = 0x24;\n        *input_array[1] &= 0xffffdfff;\n        calculate_values(input_array);\n        *input_array[4] &= 0xffffb7ff;\n        *input_array[5] &= 0xffffffd5;\n        *input_array[1] |= 0x2000;\n        input_array[15] = 0;\n        input_array[9] = 0x20;\n        input_array[10] = 0x20;\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": false,
            "current_name": "check_input_validity_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_parameter_and_check_range_080014f0",
                "*DAT_08001518": "parameter_value",
                "set_parameter_value_08001714": "set_parameter_value",
                "check_and_set_param_range_0800151c": "check_and_set_param_range",
                "do_nothing_08002d8a": "do_nothing"
            },
            "code": "int set_parameter_and_check_range_080014f0(void)\n{\n    int* *DAT_08001518 = DAT_08001518;\n    int new_value = **DAT_08001518 | 0x10;\n    **DAT_08001518 = new_value;\n    set_*DAT_08001518(3);\n    check_and_set_param_range(0xf);\n    do_nothing_08002d8a();\n    return 0;\n}",
            "called": [
                "FUN_08002d8a",
                "FUN_08001714",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_parameter_and_check_range_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "update_flags_and_values_08003908",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result"
            },
            "code": "undefined4 update_flags_and_values_08003908(uint32_t *ptr_param1, int param2, uint32_t param3)\n{\n  undefined4 result;\n  if (*(char *)(ptr_param1 + 0xf) == 1)\n  {\n    result = 2;\n  }\n  else\n  {\n    *(undefined *)(ptr_param1 + 0xf) = 1;\n    *(undefined *)((int)ptr_param1 + 0x3d) = 2;\n    switch(param3)\n    {\n      case 0:\n        update_flags_and_values_08003908_08003d60(*ptr_param1, param2);\n        *(uint *)(*ptr_param1 + 0x18) = *(uint *)(*ptr_param1 + 0x18) | 8;\n        *(uint *)(*ptr_param1 + 0x18) = *(uint *)(*ptr_param1 + 0x18) & 0xfffffffb;\n        *(uint *)(*ptr_param1 + 0x18) = *(uint *)(param2 + 0x10) | *(uint *)(*ptr_param1 + 0x18);\n        break;\n      case 4:\n        update_data_08003e38(*ptr_param1, param2);\n        *(uint *)(*ptr_param1 + 0x18) = *(uint *)(*ptr_param1 + 0x18) | 0x800;\n        *(uint *)(*ptr_param1 + 0x18) = *(uint *)(*ptr_param1 + 0x18) & 0xfffffbff;\n        *(uint *)(*ptr_param1 + 0x18) = *(int *)(param2 + 0x10) << 8 | *(uint *)(*ptr_param1 + 0x18);\n        break;\n      case 8:\n        update_data_08003f18(*ptr_param1, param2);\n        *(uint *)(*ptr_param1 + 0x1c) = *(uint *)(*ptr_param1 + 0x1c) | 8;\n        *(uint *)(*ptr_param1 + 0x1c) = *(uint *)(*ptr_param1 + 0x1c) & 0xfffffffb;\n        *(uint *)(*ptr_param1 + 0x1c) = *(uint *)(param2 + 0x10) | *(uint *)(*ptr_param1 + 0x1c);\n        break;\n      case 0xc:\n        update_data_08003ff8(*ptr_param1, param2);\n        *(uint *)(*ptr_param1 + 0x1c) = *(uint *)(*ptr_param1 + 0x1c) | 0x800;\n        *(uint *)(*ptr_param1 + 0x1c) = *(uint *)(*ptr_param1 + 0x1c) & 0xfffffbff;\n        *(uint *)(*ptr_param1 + 0x1c) = *(int *)(param2 + 0x10) << 8 | *(uint *)(*ptr_param1 + 0x1c);\n    }\n    *(undefined *)((int)ptr_param1 + 0x3d) = 1;\n    *(undefined *)(ptr_param1 + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "update_flags_and_values_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "fill_buffer_with_char_08004f60",
                "PTR_DAT_08004f74": "PTR_DAT_buffer",
                "fill_buffer_with_char_08005d68": "fill_buffer_with_char_08005d68"
            },
            "code": "void fill_buffer_with_char_08004f60(void)\n{\n  char* buffer = PTR_DAT_08004f74;\n  int start = 0;\n  int length = 0x40;\n  fill_buffer_with_char_08004f60_08005d68(buffer, start, length);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_char_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "check_parameters_and_return_value_080009c0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "check_parameters_and_return_value_08000988_08000988": "check_CY_for_zero",
                "!": "not",
                "||": "or",
                "(bool)": "cast_to_bool"
            },
            "code": "bool check_parameters_and_return_value_080009c0()\n{\n  bool is_CY_zero = false;\n  bool is_ZR_nonzero = false;\n  \n  is_CY_zero = check_CY_for_zero();\n  is_ZR_nonzero = check_ZR_for_nonzero();\n  \n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "check_parameters_and_return_value_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_params_valid_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "int is_params_valid_08001170(uint32_t input_1, int32_t input_2, uint32_t input_3, int32_t input_4) {\n    if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) && (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_params_valid_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "data_address",
                "param_2": "data",
                "uVar1": "first_value",
                "uVar2": "second_value",
                "local_10": "local_value"
            },
            "code": "void update_data_08003f18(int data_address, uint *data){\n  uint first_value;\n  uint second_value;\n  uint local_value;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(data_address + 4);\n  first_value = *data;\n  second_value = data[2] << 8 | *(uint *)(data_address + 0x20) & 0xfffffdff;\n  if (data_address == DAT_08003ff4) {\n    second_value = (data[3] << 8 | second_value & 0xfffff7ff) & 0xfffffbff;\n    local_value = data[6] << 4 | data[5] << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(data_address + 4) = local_value;\n  *(uint *)(data_address + 0x1c) = first_value | *(uint *)(data_address + 0x1c) & 0xffffff8c;\n  *(uint *)(data_address + 0x3c) = data[1];\n  *(uint *)(data_address + 0x20) = second_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "reverse_copy_and_update_buffer_080097cc_080097cc",
                "param_1": "destination_buffer",
                "param_2": "source_buffer",
                "param_3": "source_buffer_info",
                "iVar1": "current_position",
                "uVar2": "remaining_bytes",
                "iVar3": "bytes_remaining",
                "iVar4": "source_buffer_info[2]",
                "uVar5": "source_buffer[5]",
                "uVar6": "bytes_copied",
                "puVar7": "current_source_position",
                "puVar8": "current_source_position",
                "uVar9": "bytes_to_copy",
                "bytes_to_copy": "bytes_to_copy",
                "bytes_copied": "bytes_copied",
                "new_buffer_size": "new_buffer_size",
                "new_destination_position": "new_destination_position"
            },
            "code": "undefined4 reverse_copy_and_update_buffer_080097cc_080097cc(undefined4 *destination_buffer, int *source_buffer, int *source_buffer_info)\n{\n  int current_position = *source_buffer;\n  uint remaining_bytes = source_buffer_info[2];\n  undefined4 *current_source_position = (undefined4 *)*source_buffer_info;\n  do {\n    uint bytes_to_copy;\n    do {\n      current_source_position += 2;\n      bytes_to_copy = *current_source_position;\n    } while (bytes_to_copy == 0);\n    uint bytes_copied = bytes_to_copy;\n    if ((remaining_bytes <= bytes_to_copy) && ((*(ushort *)(source_buffer + 3) & 0x480) != 0)) {\n      int bytes_remaining = current_position - source_buffer[4];\n      uint new_buffer_size = (source_buffer[5] * 3) / 2;\n      bytes_to_copy = bytes_to_copy + 1 + bytes_remaining;\n      if (new_buffer_size < bytes_to_copy) {\n        new_buffer_size = bytes_to_copy;\n      }\n      if ((int)((uint)*(ushort *)(source_buffer + 3) << 0x15) < 0) {\n        int new_destination_position = FUNC_08008af8(destination_buffer, new_buffer_size);\n        if (new_destination_position == 0) {\n          *destination_buffer = 0xc;\n          *(ushort *)(source_buffer + 3) = *(ushort *)(source_buffer + 3) | 0x40;\n          source_buffer_info[1] = 0;\n          source_buffer_info[2] = 0;\n          return 0xffffffff;\n        }\n        copy_memory_to_destination_buffer_08001084(new_destination_position, source_buffer[4], bytes_remaining);\n        *(ushort *)(source_buffer + 3) = *(ushort *)(source_buffer + 3) & 0xfb7f | 0x80;\n        current_position = new_destination_position + bytes_remaining;\n        source_buffer[5] = new_buffer_size;\n        source_buffer[4] = new_destination_position;\n      }\n      else {\n        int new_destination_position = FUNC_08009adc(destination_buffer);\n        if (new_destination_position == 0) {\n          FUNC_080088ec(destination_buffer, source_buffer[4]);\n          *destination_buffer = 0xc;\n          *(ushort *)(source_buffer + 3) = *(ushort *)(source_buffer + 3) | 0x40;\n          source_buffer_info[1] = 0;\n          source_buffer_info[2] = 0;\n          return 0xffffffff;\n        }\n        current_position = new_destination_position + bytes_remaining;\n        source_buffer[5] = new_buffer_size;\n        source_buffer[4] = new_destination_position;\n      }\n      *source_buffer = current_position;\n      remaining_bytes = source_buffer[2] - bytes_to_copy;\n    }\n    reverse_copy_08009a18(current_position, bytes_to_copy, bytes_copied);\n    remaining_bytes -= bytes_copied;\n    source_buffer[2] = remaining_bytes;\n  } while (remaining_bytes != 0);\n  source_buffer_info[1] = 0;\n  return 0;\n}",
            "called": [
                "FUN_08001084",
                "FUN_08009a18",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "reverse_copy_and_update_buffer_080097cc_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = get_value_from_pointer_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = validate_input_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = check_for_flagged_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = check_for_flagged_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "validate_input_08002ad8",
                "param_1": "input_ptr",
                "param_2": "input_val1",
                "param_3": "input_val2",
                "param_4": "input_val3",
                "iVar1": "temp_var1",
                "cVar2": "temp_var2",
                "uVar3": "temp_var3",
                "bVar4": "bool_var1"
            },
            "code": "uint32_t validate_input_08002ad8(uint32_t **input_ptr, uint32_t input_val1, uint32_t input_val2, int input_val3)\n{\n    int temp_var1;\n    char temp_var2;\n    uint32_t temp_var3;\n    bool bool_var1;\n    while (true)\n    {\n        if ((input_val1 >> 0x10 & 0xff) == 1)\n        {\n            temp_var3 = input_val1 & ~(*input_ptr)[5] & 0xffff;\n            bool_var1 = temp_var3 != 0;\n            if (bool_var1)\n            {\n                temp_var3 = 1;\n            }\n            temp_var2 = (char)temp_var3;\n            if (!bool_var1)\n            {\n                temp_var2 = '\\0';\n            }\n        }\n        else\n        {\n            temp_var3 = input_val1 & ~(*input_ptr)[6] & 0xffff;\n            bool_var1 = temp_var3 != 0;\n            if (bool_var1)\n            {\n                temp_var3 = 1;\n            }\n            temp_var2 = (char)temp_var3;\n            if (!bool_var1)\n            {\n                temp_var2 = '\\0';\n            }\n        }\n        if (temp_var2 == '\\0')\n        {\n            return 0;\n        }\n        if (((*input_ptr)[5] & 0x400) == 0x400)\n        {\n            **input_ptr = **input_ptr | 0x200;\n            (*input_ptr)[5] = 0xfffffbff;\n            input_ptr[0x10] = (uint32_t *)0x4;\n            input_ptr[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n            *(undefined *)(input_ptr + 0xf) = 0;\n            return 1;\n        }\n        if ((input_val2 != 0xffffffff) && ((input_val2 == 0) || ((temp_var1 = get_value_from_pointer_080015a0(), (uint32_t)(temp_var1 - input_val3) <= input_val2))))\n        {\n            continue;\n        }\n        input_ptr[0xc] = (uint32_t *)0x0;\n        *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n        *(undefined *)(input_ptr + 0xf) = 0;\n        return 3;\n    }\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "validate_input_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "concatenate_ints_08000fd0",
                "param_1": "int_1",
                "param_2": "int_2",
                "CONCAT44": "bitwise_concat",
                "calculate_result_08000f68": "calculate_result"
            },
            "code": "uint64_t concatenate_ints_08000fd0(uint32_t param_1, uint32_t param_2)\n{\n  calculate_result();\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": false,
            "current_name": "concatenate_ints_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "update_flags_and_values_08003d60",
                "param_1": "flags",
                "param_2": "values",
                "*(uint *)(param_1 + 0x20)": "value2",
                "*(uint *)(param_1 + 4)": "values[0]",
                "*param_2": "values[1]",
                "param_2[2]": "values[3]",
                "param_2[3]": "flags",
                "*(uint *)(param_1 + 0x18)": "values[2]",
                "param_2[1]": "values[5]",
                "*(uint *)(param_1 + 0x34)": "values[1]",
                "local_10": "local_value"
            },
            "code": "void update_flags_and_values_08003d60(int flags, uint *values)\n{\n  uint flag_mask = 0xfffffffe;\n  uint local_value = values[0];\n  uint value1 = values[1];\n  uint value2 = values[3] | (flags & 0xfffffffd);\n  if (flags == DAT_08003e34) {\n    value2 = (values[4] | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = values[7] | values[6] | local_value & 0xfffffcff;\n  }\n  values[0] = local_value;\n  values[2] = value1 | values[2] & 0xffffff8c;\n  values[5] = values[2];\n  values[1] = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_flags_and_values_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_shifted_value_from_pointer_08003518",
                "uVar1": "value",
                "get_value_from_pointer_08003504": "get_value_from_pointer",
                "PTR_DAT_0800353c": "shift_amount_pointer",
                "DAT_08003538": "data_pointer"
            },
            "code": "uint get_shifted_value_from_pointer_08003518(void)\n{\n  uint value = get_value_from_pointer_08003504();\n  uint shift_amount = PTR_DAT_0800353c[*(uint *)(DAT_08003538 + 4) >> 8 & 7];\n  return value >> shift_amount;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_080046ec",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_byte_in_memory_08001618",
                "param_1": "address",
                "param_2": "data",
                "DAT_08001664": "global_data_ptr_1",
                "DAT_08001668": "global_data_ptr_2"
            },
            "code": "void set_byte_in_memory_08001618(byte address, uint data){\n                      if (address < 0) {\n                          *(char *)((address & 0xf) + DAT_08001664 + 0x14) = (char)((data & 0xff) << 4);\n                      }\n                      else {\n                          *(char *)((char)address + DAT_08001668 + 0x300) = (char)((data & 0xff) << 4);\n                      }\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "set_byte_in_memory_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input_number",
                "iVar1": "leading_zero_count"
            },
            "code": "int count_leading_zeros_080091a4(uint32_t input_number) {\n    int leading_zero_count = 0;\n    if ((input_number & 0xffff0000) == 0) {\n        input_number <<= 16;\n        leading_zero_count += 16;\n    }\n    if ((input_number & 0xff000000) == 0) {\n        input_number <<= 8;\n        leading_zero_count += 8;\n    }\n    if ((input_number & 0xf0000000) == 0) {\n        input_number <<= 4;\n        leading_zero_count += 4;\n    }\n    if ((input_number & 0xc0000000) == 0) {\n        input_number <<= 2;\n        leading_zero_count += 2;\n    }\n    if ((int32_t)input_number >= 0) {\n        if ((int32_t)(input_number << 1) < 0) {\n            return leading_zero_count + 1;\n        }\n        leading_zero_count = 32;\n    }\n    return leading_zero_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "decode_calculate_and_fill_buffer_08004f78",
                "uVar1": "function_result",
                "iVar2": "end_of_input",
                "uVar3": "count_leading_zero_bits",
                "uVar4": "leading_zero_bits",
                "uVar5": "uint64_value",
                "local_11": "validation_result",
                "PTR_DAT_080051e0": "data_pointer_1",
                "PTR_DAT_080051e4": "data_pointer_2",
                "PTR_DAT_080051ec": "data_pointer_3",
                "PTR_s_Pitch___f_080051e8": "data_pointer_4",
                "PTR_DAT_080051f0": "data_pointer_5",
                "PTR_DAT_080051f4": "data_pointer_6",
                "PTR_DAT_080051f8": "data_pointer_7",
                "PTR_DAT_080051fc": "data_pointer_8",
                "PTR_DAT_08005200": "data_pointer_9",
                "PTR_DAT_08005204": "data_pointer_10",
                "PTR_DAT_08005208": "data_pointer_11",
                "PTR_DAT_0800520c": "data_pointer_12",
                "PTR_DAT_08005210": "data_pointer_13",
                "PTR_DAT_08005214": "data_pointer_14",
                "PTR_DAT_08005218": "data_pointer_15",
                "PTR_DAT_08005220": "data_pointer_16",
                "DAT_0800521c": "data_pointer_17",
                "decode_and_store_bits_08004ae0": "decode_and_store_bits",
                "calculate_result_08004bd8": "calculate_result",
                "fill_buffer_with_char_08004f60": "fill_buffer_with_char",
                "convert_uint_to_uint64_08000418": "convert_uint_to_uint64",
                "set_local_variable_to_zero_and_return_08005dfc": "set_local_variable_to_zero_and_return",
                "find_first_set_bit_08005e40": "find_first_set_bit",
                "decode_packet_with_offset_08004f3c": "decode_packet_with_offset",
                "FUNC_08000aa4": "function_1",
                "FUNC_08000cb8": "function_2",
                "leading_zero_bits_08000c10": "count_leading_zero_bits",
                "is_end_of_string_08000ff4": "is_end_of_string",
                "is_end_of_input_08001030": "is_end_of_input",
                "count_leading_zero_bits_08000c08": "count_leading_zero_bits",
                "FUNC_08000aa8": "function_3",
                "validate_param_08001044": "validate_param",
                "byte": "byte",
                "undefined4": "uint32_t",
                "undefined8": "uint64_t",
                "uint": "uint32_t"
            },
            "code": "void decode_calculate_and_fill_buffer_08004f78(void)\n{\n  uint64_t uint64_value;\n  uint first_set_bit_index;\n  uint count_leading_zero_bits;\n  uint leading_zero_bits;\n  uint end_of_input;\n  uint end_of_string;\n  uint32_t function_result;\n  uint32_t xor_result;\n  byte validation_result;\n  decode_and_store_bits(PTR_DAT_080051e0);\n  calculate_result(PTR_DAT_080051e0, PTR_DAT_080051e4);\n  fill_buffer_with_char();\n  uint64_value = convert_uint_to_uint64(*(uint32_t *)PTR_DAT_080051e4);\n  set_local_variable_to_zero_and_return_08005dfc(PTR_DAT_080051ec, PTR_s_Pitch___f_080051e8, (int)uint64_value, (int)(uint64_value >> 0x20));\n  first_set_bit_index = find_first_set_bit(PTR_DAT_080051ec);\n  decode_packet_with_offset(PTR_DAT_080051ec, first_set_bit_index);\n  function_result = FUNC_08000aa4(*(uint32_t *)PTR_DAT_080051f0, *(uint32_t *)PTR_DAT_080051e4);\n  *(uint32_t *)PTR_DAT_080051f4 = function_result;\n  function_result = FUNC_08000cb8(*(uint32_t *)PTR_DAT_080051f8, *(uint32_t *)PTR_DAT_080051f4);\n  *(uint32_t *)PTR_DAT_080051fc = function_result;\n  function_result = FUNC_08000cb8(*(uint32_t *)PTR_DAT_08005200, *(uint32_t *)PTR_DAT_080051f4);\n  xor_result = FUNC_08000aa8(function_result, *(uint32_t *)PTR_DAT_08005204);\n  *(uint32_t *)PTR_DAT_08005204 = xor_result;\n  leading_zero_bits = count_leading_zero_bits(*PTR_DAT_08005208);\n  end_of_string = is_end_of_string(leading_zero_bits, *(uint32_t *)PTR_DAT_08005204);\n  if (end_of_string == 0)\n  {\n    leading_zero_bits = count_leading_zero_bits(*PTR_DAT_0800520c);\n    end_of_input = is_end_of_input(leading_zero_bits, *(uint32_t *)PTR_DAT_08005204);\n    if (end_of_input != 0)\n    {\n      count_leading_zero_bits = count_leading_zero_bits(*PTR_DAT_0800520c);\n      *(uint32_t *)PTR_DAT_08005204 = count_leading_zero_bits;\n    }\n  }\n  else\n  {\n    count_leading_zero_bits = count_leading_zero_bits(*PTR_DAT_08005208);\n    *(uint32_t *)PTR_DAT_08005204 = count_leading_zero_bits;\n  }\n  xor_result = FUNC_08000aa4(*(uint32_t *)PTR_DAT_080051f4, *(uint32_t *)PTR_DAT_08005214) ^ 0x80000000;\n  function_result = FUNC_08000cb8(xor_result, *(uint32_t *)PTR_DAT_08005210);\n  *(uint32_t *)PTR_DAT_08005218 = function_result;\n  function_result = FUNC_08000aa8(*(uint32_t *)PTR_DAT_080051fc, *(uint32_t *)PTR_DAT_08005204);\n  function_result = FUNC_08000aa8(function_result, *(uint32_t *)PTR_DAT_08005218);\n  leading_zero_bits = count_leading_zero_bits(*PTR_DAT_08005208);\n  end_of_input = is_end_of_input(function_result, leading_zero_bits);\n  if (end_of_input == 0)\n  {\n    leading_zero_bits = count_leading_zero_bits(*PTR_DAT_0800520c);\n    end_of_string = is_end_of_string(function_result, leading_zero_bits);\n    if (end_of_string == 0)\n    {\n      validation_result = validate_param_08001044(function_result);\n    }\n    else\n    {\n      validation_result = *PTR_DAT_0800520c;\n    }\n  }\n  else\n  {\n    validation_result = *PTR_DAT_08005208;\n  }\n  *(uint32_t *)PTR_DAT_08005214 = *(uint32_t *)PTR_DAT_080051f4;\n  end_of_input = is_end_of_input(*(uint32_t *)PTR_DAT_080051f4, 0);\n  set_param_value(DAT_0800521c, 2, end_of_input != 0);\n  end_of_input = is_end_of_input(*(uint32_t *)PTR_DAT_080051f4, 0);\n  set_param_value(DAT_0800521c, 4, end_of_input == 0);\n  end_of_input = is_end_of_input(*(uint32_t *)PTR_DAT_080051f4, 0);\n  set_param_value(DAT_0800521c, 8, end_of_input != 0);\n  end_of_input = is_end_of_input(*(uint32_t *)PTR_DAT_080051f4, 0);\n  set_param_value(DAT_0800521c, 0x10, end_of_input == 0);\n  *(uint *)(*(int *)PTR_DAT_08005220 + 0x34) = (uint)validation_result;\n  *(uint *)(*(int *)PTR_DAT_08005220 + 0x40) = (uint)validation_result;\n}",
            "called": [
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08004f3c",
                "FUN_08001044",
                "FUN_08000c10",
                "FUN_08000aa4",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08000ff4",
                "FUN_08005e40",
                "FUN_08000aa8",
                "FUN_08001030",
                "FUN_08000418",
                "FUN_08000c08",
                "FUN_08004bd8",
                "FUN_08004ae0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "decode_calculate_and_fill_buffer_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_value_from_pointer_080015a0",
                "PTR_DAT_080015b0": "pointer_data"
            },
            "code": "get_value_from_pointer_080015a0() {\n  return *(undefined4 *)PTR_DAT_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002640",
                "FUN_08004436",
                "FUN_08002c2e",
                "FUN_08002ca8",
                "FUN_08001f6c",
                "FUN_08003260",
                "FUN_08002ad8",
                "FUN_08002bb4",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08004f2c",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      count_down_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = get_value_from_pointer_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = get_value_from_pointer_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "set_byte_in_memory_at_address_0800172a",
                "param_1": "address",
                "param_2": "data_bits",
                "param_3": "unused",
                "uVar1": "extracted_bits",
                "get_data_bits_080015fc": "get_data_bits",
                "extract_bits_0800166c": "extract_bits",
                "set_byte_in_memory_08001618": "set_byte_in_memory"
            },
            "code": "void set_byte_in_memory_at_address_0800172a(char address, uint32_t data_bits)\n{\n  uint32_t extracted_bits = get_data_bits_080015fc();\n  extracted_bits = extract_bits_0800166c(extracted_bits, address, data_bits);\n  set_byte_in_memory_08001618((int)address, extracted_bits);\n  return;\n}",
            "called": [
                "FUN_080015fc",
                "FUN_0800166c",
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "set_byte_in_memory_at_address_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "check_params_and_return_result_080009d4",
                "in_ZR": "zero",
                "in_CY": "carry"
            },
            "code": "bool check_params_and_return_result_080009d4(void)\n{\n  undefined zero = 0;\n  undefined carry = 0;\n  check_and_return_params();\n  return (bool)(zero) || (bool)(carry);\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_params_and_return_result_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_flag_and_clear_bits_08005780",
                "DAT_080057dc": "data_ptr_1",
                "DAT_080057e0": "data_ptr_2"
            },
            "code": "void set_flag_and_clear_bits_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 1;\n  DAT_080057dc[1] = DAT_080057e0 & DAT_080057dc[1];\n  *DAT_080057dc = *DAT_080057dc & 0xfef6ffff;\n  *DAT_080057dc = *DAT_080057dc & 0xfffbffff;\n  DAT_080057dc[1] = DAT_080057dc[1] & 0xff80ffff;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e0 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "set_flag_and_clear_bits_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "get_local_value_08009744",
                "param_1": "result",
                "param_2": "value",
                "puVar1": "ptr_data",
                "iVar2": "local_value"
            },
            "code": "void get_local_value_08009744(int* result, undefined4 value) {\n  undefined *ptr_data = PTR_DAT_08009764;\n  *(undefined4 *)PTR_DAT_08009764 = 0;\n  int local_value = get_local_value_08009744_08005728(value);\n  if (local_value == -1 && *(int *)ptr_data != 0) {\n    *result = *(int *)ptr_data;\n  }\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "get_local_value_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "check_params_08003640_08003640",
                "param_1": "params",
                "uVar1": "result"
            },
            "code": "int check_params_08003640_08003640(int *params)\n{\n  int result;\n  if (params == NULL) {\n    result = 1;\n  }\n  else {\n    if (params[0x3d] == 0) {\n      params[0xf] = 0;\n      do_nothing_08003696(params);\n    }\n    params[0x3d] = 2;\n    set_params_08003c94(params[0], params + 1);\n    params[0x3d] = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_params_08003640_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_and_fill_buffer_with_zeroes_08009980",
                "param_1": "buffer_address",
                "param_2": "element_size",
                "param_3": "element_count",
                "puVar1": "buffer",
                "uVar2": "buffer_size",
                "puVar3": "buffer_end"
            },
            "code": "#include <stdlib.h>\n\n#define MIN_BUFFER_SIZE 37\n\n/**\n * Allocates a buffer of size param_2 * param_3 and fills it with zeroes.\n * Returns a pointer to the buffer.\n */\n\nuint32_t *allocate_and_fill_buffer_with_zeroes_08009980(uint32_t param_1, uint32_t param_2, uint32_t param_3) {\n  uint32_t *buffer = (uint32_t *)FUNC_08008af8(param_1, param_3 * param_2);\n  if (buffer == NULL) {\n    return NULL;\n  }\n  uint32_t buffer_size = (buffer[-1] & 0xfffffffc) - 4;\n  if (buffer_size < MIN_BUFFER_SIZE) {\n    memset(buffer, 0, buffer_size);\n  } else {\n    fill_buffer_with_char_08005d68(buffer, 0);\n  }\n  return buffer;\n}",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": false,
            "current_name": "allocate_and_fill_buffer_with_zeroes_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_default_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)find_first_set_bit_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_default_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)find_first_set_bit_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_default_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = is_params_valid_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = check_parameters_and_return_value_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = check_if_string_terminated_with_null_char_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)is_params_valid_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_input_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_input_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = is_input_valid_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = is_input_valid_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)find_first_set_bit_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)decode_data_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        get_concatenated_values_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          string_copy_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = get_concatenated_values_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = is_input_valid_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = convert_to_int_0800119c();\n    uVar34 = count_leading_zeroes_and_shift_left_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = is_end_of_string_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = is_input_valid_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = is_input_valid_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = is_input_valid_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = reverse_copy_and_update_buffer_080097cc_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_0800119c",
                "FUN_08001170",
                "FUN_08008ad4",
                "FUN_08000158",
                "FUN_080096e0",
                "FUN_080097cc",
                "FUN_08005e40",
                "FUN_080079e8",
                "FUN_08009768",
                "FUN_08008af8",
                "FUN_0800901c",
                "FUN_080088ec",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "low_part",
                "param_2": "high_part",
                "DAT_08000144": "constant",
                "PTR_FUN_0800014c": "pointer_1",
                "PTR_DAT_08000148": "pointer_2"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_08000134(uint64_t param_1, uint64_t param_2)\n{\n  if (DAT_08000144 != 0) {\n    param_1 = PTR_FUN_0800014c;\n    param_2 = PTR_DAT_08000148;\n  }\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "concatenate_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "update_and_fill_buffer_08005704",
                "update_data_0800157c": "update_data",
                "decode_calculate_and_fill_buffer_080017b4": "decode_calculate_and_fill_buffer"
            },
            "code": "void update_and_fill_buffer_08005704(void)\n{\n  update_data_0800157c();\n  decode_calculate_and_fill_buffer();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "update_and_fill_buffer_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "convert_uint_to_uint64_08000418",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "sign_bit",
                "uVar2": "shifted_input2",
                "uVar3": "input1_high_bits",
                "uVar4": "shifted_input1",
                "uVar5": "shift_input1",
                "uVar7": "shift_amount1",
                "iVar6": "leading_zeroes",
                "bVar8": "is_shift_amount1_zero",
                "bVar9": "is_shift_amount1_negative",
                "bVar10": "is_shift_amount1_negative",
                "in_r12": "shift_amount2",
                "input1_mask": "input1_mask",
                "is_shift_input1_zero": "is_shift_input1_zero"
            },
            "code": "uint64_t convert_uint_to_uint64_08000418(uint input1, uint input2, uint input3, uint input4)\n{\n  uint shift_input1 = input1 << 1;\n  bool is_shift_input1_zero = shift_input1 == 0;\n  uint sign_bit = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n  uint shifted_input1 = (uint)((int)shift_input1 >> 3) >> 1;\n  uint input1_high_bits = sign_bit | shifted_input1;\n  input1 = input1 << 0x1d;\n  if (!is_shift_input1_zero) {\n    uint input1_mask = shift_input1 & 0xff000000;\n    is_shift_input1_zero = input1_mask == 0;\n  }\n  if (!is_shift_input1_zero) {\n    is_shift_input1_zero = (shift_input1 & 0xff000000) == 0xff000000;\n  }\n  if (!is_shift_input1_zero) {\n    return CONCAT44(input1_high_bits,input1) ^ 0x3800000000000000;\n  }\n  if ((shift_input1 & 0xffffff) == 0) {\n    return CONCAT44(input1_high_bits,input1);\n  }\n  if ((shift_input1 & 0xff000000) == 0xff000000) {\n    return CONCAT44(input1_high_bits,input1) | 0x8000000000000;\n  }\n  uint shifted_input2 = shifted_input1;\n  uint shifted_input1_high_bits = input1;\n  if (shifted_input1 == 0) {\n    shifted_input2 = 0;\n    shifted_input1_high_bits = input1;\n  }\n  int leading_zeroes = count_leading_zeroes(shifted_input2);\n  if (shifted_input1 == 0) {\n    leading_zeroes = leading_zeroes + 0x20;\n  }\n  uint shift_amount1 = leading_zeroes - 0xb;\n  bool is_shift_amount1_negative = shift_amount1 < 0;\n  bool is_shift_amount1_zero = shift_amount1 == 0;\n  if (leading_zeroes < 0x20) {\n    is_shift_amount1_negative = shift_amount1 + 0xc < 0;\n    leading_zeroes = leading_zeroes + -0x1f;\n    is_shift_amount1_zero = leading_zeroes == 0;\n    shift_amount1 = leading_zeroes;\n    if (!is_shift_amount1_zero && is_shift_amount1_negative == SBORROW4(shift_amount1, 0xffc)) {\n      shifted_input2 = shifted_input2 << (shift_amount1 & 0xff);\n      shifted_input1_high_bits = shifted_input1_high_bits | shifted_input2 >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_shift_amount1_zero || is_shift_amount1_negative == SBORROW4(shift_amount1 - 0x1f, 0xc)) {\n    uint shift_amount2 = 0x20 - shift_amount1;\n    shifted_input2 = shifted_input2 << (shift_amount1 & 0xff);\n    shifted_input2 = shifted_input2 | shifted_input1_high_bits >> (shift_amount2 & 0xff);\n    shifted_input1_high_bits = shifted_input1_high_bits << (shift_amount1 & 0xff);\n  }\nLAB_080002e0:\n  if (leading_zeroes < 0x381) {\n    return CONCAT44(shifted_input2 + (0x380 - leading_zeroes) * 0x100000 | sign_bit,shifted_input1_high_bits);\n  }\n  uint shift_amount3 = ~(0x380 - leading_zeroes);\n  if (shift_amount3 > 0x1e) {\n    return CONCAT44(input1_high_bits,shifted_input2 >> (shift_amount3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount4 = shift_amount3 - 0x13;\n  if (shift_amount4 == 0 || shift_amount4 < 0 != SCARRY4(shift_amount3 - 0x1f,0xc)) {\n    shift_amount3 = shift_amount3 + 1;\n    return CONCAT44(sign_bit | shifted_input2 >> (shift_amount3 & 0xff),shifted_input1_high_bits >> (shift_amount3 & 0xff) | shifted_input2 << (0x20 - shift_amount3 & 0xff));\n  }\n  return CONCAT44(input1_high_bits,shifted_input1_high_bits >> (0x20 - (0xcU - shift_amount4) & 0xff) | shifted_input2 << (0xcU - shift_amount4 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_uint64_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_for_flagged_08002ca8",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "iVar1": "value_from_pointer"
            },
            "code": "int check_for_flagged_08002ca8(uint32_t *ptr_param_1, uint32_t param_2, int param_3) {\n    int value_from_pointer;\n    while (true) {\n        if ((*(uint32_t *)(*ptr_param_1 + 0x14) & 0x40) == 0x40) {\n            return 0;\n        }\n        if ((*(uint32_t *)(*ptr_param_1 + 0x14) & 0x10) == 0x10) {\n            break;\n        }\n        if ((param_2 == 0) || ((value_from_pointer = get_value_from_pointer_080015a0()), param_2 < (uint32_t)(value_from_pointer - param_3))) {\n            ptr_param_1[0x10] |= 0x20;\n            *(undefined *)((int)ptr_param_1 + 0x3d) = 0x20;\n            *(undefined *)(ptr_param_1 + 0xf) = 0;\n            return 3;\n        }\n    }\n    *(uint32_t *)(*ptr_param_1 + 0x14) = 0xffffffef;\n    ptr_param_1[0x10] = 0;\n    ptr_param_1[0xc] = 0;\n    *(undefined *)((int)ptr_param_1 + 0x3d) = 0x20;\n    *(undefined *)(ptr_param_1 + 0xf) = 0;\n    return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_for_flagged_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "set_permissions_and_flags_08003a94",
                "param_1": "permissions",
                "param_2": "flags",
                "uVar1": "result",
                "uVar2": "flag_value"
            },
            "code": "int set_permissions_and_flags_08003a94(int *permissions, uint *flags)\n{\n    int result;\n    uint flag_value = *flags;\n    if (*(char *)(permissions + 15) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(char *)(permissions + 15) = '\\x01';\n        *(char *)((int)permissions + 61) = '\\x02';\n        *(uint *)(*permissions + 8) &= 0xFFFF0088;\n        if (flag_value == 0x40) {\n            set_flags_and_values(*permissions, flags[1], flags[3]);\n            set_flags_and_permissions(*permissions, 0x40);\n        }\n        else if (flag_value < 0x41) {\n            if (flag_value == 0x10) {\n                set_flags_and_permissions(*permissions, 0x10);\n            }\n            else if (flag_value == 0) {\n                set_flags_and_permissions(*permissions, 0);\n            }\n            else if (flag_value == 0x20) {\n                set_flags_and_permissions(*permissions, 0x20);\n            }\n            else if (flag_value == 0x30) {\n                set_flags_and_permissions(*permissions, 0x30);\n            }\n        }\n        else if (flag_value == 0x70) {\n            update_data_at_address(*permissions, flags[2], flags[1], flags[3]);\n            *(uint *)(*permissions + 8) &= 0xFFFFFF88;\n            *(uint *)(*permissions + 8) |= 0x77;\n        }\n        else if (flag_value < 0x71) {\n            if (flag_value == 0x50) {\n                set_flags_and_values(*permissions, flags[1], flags[3]);\n                set_flags_and_permissions(*permissions, 0x50);\n            }\n            else if (flag_value == 0x60) {\n                set_flags_and_values_08004104(*permissions, flags[1], flags[3]);\n                set_flags_and_permissions(*permissions, 0x60);\n            }\n        }\n        else if (flag_value == 0x1000) {\n            *(uint *)(*permissions + 8) &= 0xFFFFFFF8;\n        }\n        else if (flag_value == 0x2000) {\n            update_data_at_address(*permissions, flags[2], flags[1], flags[3]);\n            *(uint *)(*permissions + 8) |= 0x4000;\n        }\n        *(char *)((int)permissions + 61) = '\\x01';\n        *(char *)(permissions + 15) = '\\0';\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_0800416a",
                "FUN_080041a8",
                "FUN_080040a0",
                "FUN_08004104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_permissions_and_flags_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_flags_and_permissions_0800416a",
                "param_1": "base_address",
                "param_2": "permissions",
                "*(uint *)(param_1 + 8)": "flags_ptr",
                "*(uint *)(param_1 + 8) & 0xffffff8f": "flags",
                "param_2 | 7": "new_permissions"
            },
            "code": "void set_flags_and_permissions_0800416a(int base_address, ushort permissions) {\n  uint* flags_ptr = (uint*)(base_address + 8);\n  uint flags = *flags_ptr;\n  flags = flags & 0xffffff8f;\n  uint new_permissions = permissions | 7;\n  flags = flags | new_permissions;\n  *flags_ptr = flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_flags_and_permissions_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "set_params_and_call_improved_func_080055f4",
                "local_18": "param_val",
                "local_14": "param1",
                "local_c": "param2",
                "*(uint *)(DAT_0800566c + 0x18)": "flags",
                "set_param_value_08001a80": "set_param_value",
                "improved_function_080017c4": "improved_function"
            },
            "code": "void set_params_and_call_improved_func_080055f4(void)\n{\n  uint32_t *(uint *)(DAT_0800566c + 0x18) = 0;\n  uint32_t param_val = 0x1e;\n  uint32_t param1 = 1;\n  uint32_t param2 = 2;\n  \n  *(uint *)(DAT_0800566c + 0x18) |= 0x20;\n  *(uint *)(DAT_0800566c + 0x18) |= 0x4;\n  *(uint *)(DAT_0800566c + 0x18) |= 0x8;\n  \n  *(uint32_t *)(DAT_0800566c + 0x18) = *(uint *)(DAT_0800566c + 0x18);\n  \n  set_param_value_08001a80(DAT_08005670, param_val, 0, *(uint *)(DAT_0800566c + 0x18) & 0x8);\n  \n  improved_function_080017c4(DAT_08005670, &param_val);\n  return;\n}",
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_params_and_call_improved_func_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = is_end_of_string_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800071c",
                "FUN_08005d0c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "set_parameters_and_run_080053b0",
                "local_18": "permissions",
                "local_20": "parameter_1",
                "local_3c": "flags[0]",
                "local_38": "flags[1]",
                "local_34": "flags[2]",
                "local_30": "flags[3]",
                "local_2c": "flags[4]",
                "local_28": "flags[5]",
                "local_24": "flags[6]",
                "local_58": "parameter_2",
                "local_54": "parameter_3",
                "local_50": "parameter_4",
                "local_4c": "parameter_5",
                "local_48": "parameter_6",
                "local_44": "parameter_7"
            },
            "code": "void set_parameters_and_run_080053b0() {\n    int error_code;\n    int permissions[4] = {0x1000, 0, 0, 0};\n    int flags[7] = {0x60, 0, 0, 0, 0, 0, 0x2000};\n    int parameter_1 = 0;\n    int parameter_2 = 0;\n    int parameter_3 = 0;\n    int parameter_4 = 0;\n    int parameter_5 = 0;\n    int parameter_6 = 0;\n    int parameter_7 = 0;\n    *(int *)PTR_DAT_080054f4 = DAT_080054f8;\n    *(int *)(PTR_DAT_080054f4 + 4) = 0x708;\n    *(int *)(PTR_DAT_080054f4 + 8) = 0;\n    *(int *)(PTR_DAT_080054f4 + 0xc) = 100;\n    *(int *)(PTR_DAT_080054f4 + 0x10) = 0;\n    *(int *)(PTR_DAT_080054f4 + 0x14) = 0;\n    *(int *)(PTR_DAT_080054f4 + 0x18) = 0;\n    error_code = check_params_and_set_080035a4(PTR_DAT_080054f4);\n    if (error_code != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080054fc, 399);\n    }\n    error_code = set_permissions_and_flags_08003a94(PTR_DAT_080054f4, permissions);\n    if (error_code != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080054fc, 0x194);\n    }\n    error_code = check_params_08003640_08003640(PTR_DAT_080054f4);\n    if (error_code != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080054fc, 0x198);\n    }\n    error_code = set_parameter_080042de(PTR_DAT_080054f4, &parameter_1);\n    if (error_code != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080054fc, 0x19f);\n    }\n    error_code = update_flags_and_values_08003908(PTR_DAT_080054f4, flags, 0);\n    if (error_code != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080054fc, 0x1ab);\n    }\n    error_code = update_flags_and_values_08003908(PTR_DAT_080054f4, flags, 0xc);\n    if (error_code != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080054fc, 0x1b0);\n    }\n    error_code = set_value_if_flag_is_true_0800422e(PTR_DAT_080054f4, &parameter_2);\n    if (error_code != 0) {\n        infinite_loop_08005674(PTR_s____src_main_c_080054fc, 0x1bc);\n    }\n    check_param_value_08005680(PTR_DAT_080054f4);\n}",
            "called": [
                "FUN_08005674",
                "FUN_08003a94",
                "FUN_08005680",
                "FUN_080042de",
                "FUN_080035a4",
                "FUN_08003908",
                "FUN_08003640",
                "FUN_0800422e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_parameters_and_run_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "convert_to_double_0800088a",
                "param_1": "first_half",
                "param_2": "second_half",
                "param_3": "third_half",
                "param_4": "fourth_half",
                "unaff_r4": "unused_register_4",
                "in_r12": "input_register_12",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "bVar4": "temp_var_4"
            },
            "code": "ulonglong convert_to_double_0800088a(uint first_half, uint second_half, uint third_half, uint fourth_half) {\n  uint first_half_masked = first_half & 0x80000000;\n  uint second_half_masked = second_half;\n  uint third_half_masked = third_half & 0x80000000;\n  uint fourth_half_masked = fourth_half;\n  if (third_half != fourth_half || (third_half & (first_half >> 0x14)) != (first_half >> 0x14)) {\n    if (third_half == fourth_half) {\n      if ((first_half | (second_half << 0xc)) == 0) {\n        return (ulonglong)((second_half ^ fourth_half) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if ((third_half & (first_half >> 0x14)) == (first_half >> 0x14)) {\n      if ((third_half | (fourth_half << 0xc)) == 0) {\n        return (ulonglong)((second_half ^ fourth_half) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bool is_first_half_zero = (first_half | (second_half << 1)) == 0;\n      bool is_third_half_zero = (third_half | (fourth_half << 1)) == 0;\n      if (!is_first_half_zero || !is_third_half_zero) {\n        if (third_half == 0) {\n          do {\n            uint first_half_msb = first_half & 0x80000000;\n            first_half = first_half << 1;\n            second_half = second_half * 2 + (uint)(first_half_msb != 0);\n          } while ((second_half & 0x100000) == 0);\n          second_half = second_half | first_half_masked;\n          if ((first_half >> 0x14) != 0) {\n            return ((ulonglong)second_half << 0x20) | first_half;\n          }\n        }\n        do {\n          uint third_half_msb = third_half & 0x80000000;\n          third_half = third_half << 1;\n          fourth_half = fourth_half * 2 + (uint)(third_half_msb != 0);\n        } while ((fourth_half & 0x100000) == 0);\n        return ((ulonglong)second_half << 0x20) | first_half;\n      }\n      if (is_first_half_zero) {\n        return (ulonglong)((second_half ^ fourth_half) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      if (is_third_half_zero) {\n        return (ulonglong)((second_half ^ fourth_half) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  return ((ulonglong)second_half_masked << 0x20) | first_half_masked | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": false,
            "current_name": "convert_to_double_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "check_param_within_range_080016d0",
                "param_1": "param_value",
                "bVar1": "is_within_range"
            },
            "code": "bool check_param_within_range_080016d0(int param_value) {\n  bool is_within_range;\n  is_within_range = param_value - 1U < 0x1000000;\n  if (is_within_range) {\n    DAT_08001710[1] = param_value + -1;\n    set_byte_in_memory_08001618(0xffffffff,0xf);\n    DAT_08001710[2] = 0;\n    *DAT_08001710 = 7;\n  }\n  return !is_within_range;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": false,
            "current_name": "check_param_within_range_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "validate_input_08001ccc_08001ccc",
                "param_1": "input_buffer",
                "param_2": "size_1",
                "param_3": "size_2",
                "param_4": "size_3",
                "param_5": "flags",
                "param_6": "flag_1",
                "param_7": "flag_2",
                "uVar1": "value_1",
                "iVar2": "value_2",
                "cVar3": "c",
                "uVar4": "value_3",
                "iVar5": "result",
                "uVar6": "result_2",
                "puVar7": "p",
                "bVar8": "is_zero",
                "flags_1": "flags_1",
                "value_4": "value_4",
                "value_5": "value_5"
            },
            "code": "uint validate_input_08001ccc_08001ccc(uint **input_buffer, uint16_t size_1, uint16_t size_2, uint16_t size_3, uint *flags, uint16_t flag_1, uint32_t flag_2)\n{\n  uint value_1 = get_value_from_pointer_080015a0();\n  uint flags_1 = DAT_08001f64;\n  if (*(char *)((int)input_buffer + 0x3d) == ' ')\n  {\n    do {\n      uint value_2;\n      if ((flags_1 >> 0x10 & 0xff) == 1)\n      {\n        uint value_3 = flags_1 & ~(*input_buffer)[5] & 0xffff;\n        bool is_zero = value_3 == 0;\n        char c = (char)value_3;\n        if (!is_zero) c = 0;\n      }\n      else\n      {\n        uint value_4 = flags_1 & ~(*input_buffer)[6] & 0xffff;\n        bool is_zero = value_4 == 0;\n        char c = (char)value_4;\n        if (!is_zero) c = 0;\n      }\n      if (c != 1)\n      {\n        uint value_5 = 0;\n        goto LAB_08001d9c;\n      }\n      value_2 = get_value_from_pointer_080015a0();\n    } while ((uint)(value_2 - value_1) < 0x1a);\n    input_buffer[0xc] = (uint *)0x0;\n    *(undefined *)((int)input_buffer + 0x3d) = 0x20;\n    *(undefined *)((int)input_buffer + 0x3e) = 0;\n    *(undefined *)(input_buffer + 0xf) = 0;\n    uint result = 3;\nLAB_08001d9c:\n    if (result == 0)\n    {\n      if (*(char *)(input_buffer + 0xf) == 1)\n      {\n        return 2;\n      }\n      else\n      {\n        *(undefined *)(input_buffer + 0xf) = 1;\n        if ((**input_buffer & 1) != 1)\n        {\n          **input_buffer = **input_buffer | 1;\n        }\n        **input_buffer = **input_buffer & 0xfffff7ff;\n        *(undefined *)((int)input_buffer + 0x3d) = 0x21;\n        *(undefined *)((int)input_buffer + 0x3e) = 0x40;\n        input_buffer[0x10] = (uint *)0x0;\n        input_buffer[9] = flags;\n        *(uint16_t *)((int)input_buffer + 0x2a) = flag_1;\n        input_buffer[0xb] = DAT_08001f68;\n        *(uint16_t *)(input_buffer + 10) = *(uint16_t *)((int)input_buffer + 0x2a);\n        uint result_2 = validate_input_08002640(input_buffer, size_1, size_2, size_3, flag_2, value_1);\n        if (result_2 == 0)\n        {\n          while (*(uint16_t *)(input_buffer + 10) != 0)\n          {\n            uint result_3 = check_flag_08002bb4(input_buffer, flag_2, value_1);\n            if (result_3 != 0)\n            {\n              if (input_buffer[0x10] == (uint *)0x4)\n              {\n                **input_buffer = **input_buffer | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            uint *p = input_buffer[9];\n            input_buffer[9] = (uint *)((int)p + 1);\n            (*input_buffer)[4] = (uint)*(byte *)p;\n            *(uint16_t *)(input_buffer + 10) = *(uint16_t *)(input_buffer + 10) + -1;\n            *(uint16_t *)((int)input_buffer + 0x2a) = *(uint16_t *)((int)input_buffer + 0x2a) + -1;\n            if ((((*input_buffer)[5] & 4) == 4) && (*(uint16_t *)(input_buffer + 10) != 0))\n            {\n              uint *p = input_buffer[9];\n              input_buffer[9] = (uint *)((int)p + 1);\n              (*input_buffer)[4] = (uint)*(byte *)p;\n              *(uint16_t *)(input_buffer + 10) = *(uint16_t *)(input_buffer + 10) + -1;\n              *(uint16_t *)((int)input_buffer + 0x2a) = *(uint16_t *)((int)input_buffer + 0x2a) + -1;\n            }\n          }\n          uint result_4 = check_flag_08002c2e(input_buffer, flag_2, value_1);\n          if (result_4 == 0)\n          {\n            **input_buffer = **input_buffer | 0x200;\n            *(undefined *)((int)input_buffer + 0x3d) = 0x20;\n            *(undefined *)((int)input_buffer + 0x3e) = 0;\n            *(undefined *)(input_buffer + 0xf) = 0;\n            return 0;\n          }\n          else if (input_buffer[0x10] == (uint *)0x4)\n          {\n            **input_buffer = **input_buffer | 0x200;\n            return 1;\n          }\n          else\n          {\n            return 3;\n          }\n        }\n        else if (input_buffer[0x10] == (uint *)0x4)\n        {\n          *(undefined *)(input_buffer + 0xf) = 0;\n          return 1;\n        }\n        else\n        {\n          *(undefined *)(input_buffer + 0xf) = 0;\n          return 3;\n        }\n      }\n    }\n    else\n    {\n      return 2;\n    }\n  }\n  else\n  {\n    return 2;\n  }\n}\n",
            "called": [
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": false,
            "current_name": "validate_input_08001ccc_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "update_data_0800157c",
                "PTR_DAT_0800159c": "data_pointer",
                "PTR_DAT_08001598": "byte_data_pointer",
                "int": "int_data_pointer",
                "byte": "byte_data",
                "*PTR_DAT_0800159c": "*data_pointer",
                "*PTR_DAT_08001598": "*byte_data_pointer"
            },
            "code": "void update_data_0800157c(void)\n{\n  uint* PTR_DAT_0800159c = (uint*)PTR_DAT_0800159c;\n  int* int_PTR_DAT_0800159c = (int*)PTR_DAT_0800159c;\n  byte* PTR_DAT_08001598 = (byte*)PTR_DAT_08001598;\n  uint byte_data = (uint)*PTR_DAT_08001598;\n  *PTR_DAT_0800159c = *int_PTR_DAT_0800159c + byte_data;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "update_data_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_pointer_value_from_data_segment_08005d14",
                "PTR_PTR_DAT_08005d1c": "PTR_PTR_DATA_SEGMENT"
            },
            "code": "get_pointer_value_from_data_segment_08005d14() {\n    return *(undefined4 *)PTR_PTR_DAT_08005d1c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": false,
            "current_name": "get_pointer_value_from_data_segment_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_param_value_080015b4",
                "param_1": "param_value",
                "DAT_080015f8": "dat_f8",
                "PTR_": "ptr_"
            },
            "code": "void set_param_value_080015b4(uint8_t param_value)\n{\n    uint32_t* PTR_DAT_080015f8_c = (uint32_t*)(DAT_080015f8 + 0xc);\n    uint32_t masked_value = *PTR_DAT_080015f8_c & 0xf8ff;\n    uint32_t shifted_value = (param_value & 7) << 8;\n    uint32_t final_value = masked_value | shifted_value | 0x5fa0000;\n    *PTR_DAT_080015f8_c = final_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": false,
            "current_name": "set_param_value_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "decode_data_080036f8",
                "param_1": "data_ptr",
                "PTR_": "data_ptr",
                "DAT_": "flag",
                "do_nothing_08003c4a": "do_nothing_1",
                "do_nothing_08003c5c": "do_nothing_2",
                "do_nothing_08003c6e": "do_nothing_3",
                "do_nothing_08003c80": "do_nothing_4",
                "do_nothing_08004366": "do_nothing_5",
                "do_nothing_08004378": "do_nothing_6",
                "decode_calculate_and_fill_buffer_08004f78": "decode_calculate_and_fill_buffer"
            },
            "code": "void decode_data_080036f8(int *PTR_)\n{\n    uint16_t DAT_1 = *(uint16_t *)(*PTR_ + 0x10);\n    uint16_t DAT_2 = *(uint16_t *)(*PTR_ + 0xc);\n    if ((DAT_1 & 2) && (DAT_2 & 2)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xfffffffd;\n        *(uint8_t *)(PTR_ + 7) = 1;\n        if ((*(uint32_t *)(*PTR_ + 0x18) & 3) == 0) {\n            do_nothing_08003c4a(PTR_);\n            do_nothing_08003c6e(PTR_);\n        }\n        else {\n            do_nothing_08003c5c(PTR_);\n        }\n        *(uint8_t *)(PTR_ + 7) = 0;\n    }\n    if ((DAT_1 & 4) && (DAT_2 & 4)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xfffffffb;\n        *(uint8_t *)(PTR_ + 7) = 2;\n        if ((*(uint32_t *)(*PTR_ + 0x18) & 0x300) == 0) {\n            do_nothing_08003c4a(PTR_);\n            do_nothing_08003c6e(PTR_);\n        }\n        else {\n            do_nothing_08003c5c(PTR_);\n        }\n        *(uint8_t *)(PTR_ + 7) = 0;\n    }\n    if ((DAT_1 & 8) && (DAT_2 & 8)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xfffffff7;\n        *(uint8_t *)(PTR_ + 7) = 4;\n        if ((*(uint32_t *)(*PTR_ + 0x1c) & 3) == 0) {\n            do_nothing_08003c4a(PTR_);\n            do_nothing_08003c6e(PTR_);\n        }\n        else {\n            do_nothing_08003c5c(PTR_);\n        }\n        *(uint8_t *)(PTR_ + 7) = 0;\n    }\n    if ((DAT_1 & 0x10) && (DAT_2 & 0x10)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xffffffef;\n        *(uint8_t *)(PTR_ + 7) = 8;\n        if ((*(uint32_t *)(*PTR_ + 0x1c) & 0x300) == 0) {\n            do_nothing_08003c4a(PTR_);\n            do_nothing_08003c6e(PTR_);\n        }\n        else {\n            do_nothing_08003c5c(PTR_);\n        }\n        *(uint8_t *)(PTR_ + 7) = 0;\n    }\n    if ((DAT_1 & 1) && (DAT_2 & 1)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xfffffffe;\n        decode_calculate_and_fill_buffer_08004f78(PTR_);\n    }\n    if ((DAT_1 & 0x80) && (DAT_2 & 0x80)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xffffff7f;\n        do_nothing_08004378(PTR_);\n    }\n    if ((DAT_1 & 0x40) && (DAT_2 & 0x40)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xffffffbf;\n        do_nothing_08003c80(PTR_);\n    }\n    if ((DAT_1 & 0x20) && (DAT_2 & 0x20)) {\n        *(uint32_t *)(*PTR_ + 0x10) = 0xffffffdf;\n        do_nothing_08004366(PTR_);\n    }\n}\n",
            "called": [
                "FUN_08003c80",
                "FUN_08003c5c",
                "FUN_08004366",
                "FUN_08003c6e",
                "FUN_08004f78",
                "FUN_08003c4a",
                "FUN_08004378"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "decode_data_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "update_data_at_address_080041a8",
                "param_1": "address",
                "param_2": "new_data",
                "param_3": "mask",
                "param_4": "shift_amount",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "uint": "uint32_t",
                "int": "uint8_t"
            },
            "code": "void update_data_at_address_080041a8(uint8_t* address, uint32_t new_data, uint32_t mask, uint8_t shift_amount)\n{\n  uint32_t* data = (uint32_t*)(address + 8);\n  *data = (new_data | (mask << 8) | *data) & ~(0xFF << shift_amount);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_data_at_address_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080096e0",
                "FUN_08005e9c",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_default_value_08008ad4",
                "puVar1": "default_value"
            },
            "code": "undefined *get_default_value_08008ad4(void)\n{\n  undefined *default_value;\n  default_value = *(undefined **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34);\n  if (*(undefined **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34) == (undefined *)0x0) {\n    default_value = PTR_DAT_08008aec;\n  }\n  return default_value + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_default_value_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_end_of_string_080009e8",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009e8(void)\n{\n  char current_char;\n  check_and_return_params();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "code": "void infinite_loop_08005674(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "encode_data_08009630",
                "param_1": "buffer_index",
                "param_2": "flag",
                "param_3": "data",
                "param_4": "length",
                "param_5": "output_data",
                "param_6": "output_length",
                "iVar1": "buffer",
                "uVar2": "length_shift",
                "iVar3": "trailing_zeros",
                "iVar4": "buffer_data_index",
                "uVar5": "data_shifted",
                "uVar6": "flag_shifted",
                "uVar7": "data_written",
                "local_20": "length_masked",
                "local_1c": "data_masked"
            },
            "code": "int encode_data_08009630(uint32_t buffer_index, uint32_t flag, uint32_t data, uint32_t length, int *output_data, int *output_length) {\n  int buffer = allocate_or_get_buffer_080090c0(buffer_index, 1);\n  uint32_t flag_shifted = (flag << 1) >> 21;\n  uint32_t data_masked = data & 0xfffff;\n  if (flag_shifted != 0) {\n    data_masked |= 0x100000;\n  }\n  if (length == 0) {\n    int trailing_zeros = count_trailing_zeros_080091e4(&data_masked);\n    int buffer_data_index = 1;\n    uint32_t data_written = 1;\n    *(uint32_t *)(buffer + 0x14) = data_masked;\n    *(uint32_t *)(buffer + 0x10) = data_written;\n  }\n  else {\n    uint32_t length_masked = length;\n    int length_shift = count_trailing_zeros_080091e4(&length_masked);\n    if (length_shift == 0) {\n      *(uint32_t *)(buffer + 0x14) = length_masked;\n    }\n    else {\n      uint32_t data_shifted = data_masked << (0x20 - length_shift & 0xff);\n      data_masked = data_masked >> (length_shift & 0xff);\n      *(uint32_t *)(buffer + 0x14) = data_shifted | length_masked;\n    }\n    int buffer_data_index = 2;\n    if (data_masked == 0) {\n      buffer_data_index = 1;\n    }\n    *(uint32_t *)(buffer + 0x18) = data_masked;\n    *(uint32_t *)(buffer + 0x10) = buffer_data_index;\n  }\n  if (flag_shifted == 0) {\n    *output_data = length_shift - 1074;\n    uint64_t leading_zeros = count_leading_zeros_080091a4(*(uint32_t *)(buffer + buffer_data_index * 4 + 0x10));\n    *output_length = (int)((uint64_t)leading_zeros >> 0x20) * 0x20 - (int)leading_zeros;\n    return buffer;\n  }\n  *output_data = (flag_shifted - 1075) + length_shift;\n  *output_length = 53 - length_shift;\n  return buffer;\n}",
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "encode_data_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "set_flags_and_values_08004104",
                "param_1": "memory_address",
                "param_2": "value1",
                "param_3": "value2",
                "*(uint *)(param_1 + 0x20)": "*(uint *)(memory_address + 0x20)",
                "*(uint *)(param_1 + 0x18)": "*(uint *)(memory_address + 0x18)"
            },
            "code": "void set_flags_and_values_08004104(int memory_address,int value1,int value2)\n{\n  *(uint *)(memory_address + 0x20) = *(uint *)(memory_address + 0x20) & 0xffffffef;\n  *(uint *)(memory_address + 0x18) = (value2 << 12) | (*(uint *)(memory_address + 0x18) & 0xffff0fff);\n  *(uint *)(memory_address + 0x20) = (value1 << 4) | (*(uint *)(memory_address + 0x20) & 0xffffff5f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "is_end_of_string_08000ff4",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08000ff4(void)\n{\n  char current_char;\n  concatenate_integers();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "decode_data_from_pointer_08005714",
                "PTR_DAT_08005724": "PTR_DATA",
                "decode_data_080036f8": "decode_data"
            },
            "code": "void decode_data_from_pointer_08005714(void)\n{\n  decode_data(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "decode_data_from_pointer_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "param_1": "input",
                "iVar1": "byte_offset",
                "puVar2": "word_ptr",
                "uVar4": "word",
                "count_leading_zeroes": "count_leading_zeroes",
                "iVar3": "leading_zeroes"
            },
            "code": "int find_first_set_bit_08005e40(uint x);\n\nint find_first_set_bit_08005e40(uint x) {\n  int count = 0;\n  while (x >>= 1) count++;\n  return 32 - count;\n}\n\nint find_first_set_bit_08005e40(uint param_1) {\n  uint *word_ptr = (uint *)(param_1 & 0xfffffffc);\n  int byte_offset = -(param_1 & 3);\n  uint word = *word_ptr;\n  if ((param_1 & 3) != 0) {\n    word |= 0xffffffffU >> ((byte_offset + 4U & 0x1f) << 3);\n  }\n  while(1) {\n    word_ptr++;\n    word = (word + 0xfefefeff) & ~word & 0x80808080;\n    if (word != 0) break;\n    word = *word_ptr;\n    byte_offset += 4;\n  }\n  int leading_zeroes = find_first_set_bit_08005e40(word & -word);\n  return byte_offset + (0x1fU - leading_zeroes >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "puVar1": "post_functions_data_ptr",
                "iVar2": "i",
                "ppcVar3": "function_ptr",
                "iVar4": "num_functions",
                "PTR_DAT_08005d58": "PTR_FUNC_END",
                "PTR_DAT_08005d5c": "PTR_FUNC_START",
                "PTR_DAT_08005d60": "PTR_POST_FUNCS_DATA_START",
                "PTR_DAT_08005d64": "PTR_POST_FUNCS_START"
            },
            "code": "void execute_functions_08005d20(void)\n{\n    int num_functions = (int)PTR_DAT_08005d58 - (int)PTR_DAT_08005d5c >> 2;\n    if (num_functions != 0)\n    {\n        int i = 0;\n        code **function_ptr = (code **)PTR_DAT_08005d5c;\n        while (i != num_functions)\n        {\n            (**function_ptr)();\n            function_ptr++;\n            i++;\n        }\n    }\n    code **post_functions_ptr = (code **)PTR_DAT_08005d64;\n    undefined *post_functions_data_ptr = PTR_DAT_08005d60;\n    do_nothing_08009e68();\n    int num_post_functions = (int)post_functions_data_ptr - (int)post_functions_ptr >> 2;\n    if (num_post_functions != 0)\n    {\n        int i = 0;\n        while (i != num_post_functions)\n        {\n            (**post_functions_ptr)();\n            post_functions_ptr++;\n            i++;\n        }\n    }\n}",
            "called": [
                "FUN_08000134",
                "FUN_080078a0",
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag",
                "uint": "unsigned_int"
            },
            "code": "void set_param_value_08001a80(int base_address, ushort value, char flag){\n    if (flag == '\\0') {\n        *(uint *)(base_address + 0x10) = (uint)value << 0x10;\n    }\n    else {\n        *(uint *)(base_address + 0x10) = (uint)value;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_param_value_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "difference",
                "uVar2": "high_bits_of_result",
                "uVar3": "result",
                "uVar4": "abs_w",
                "uVar5": "y_abs",
                "uVar6": "uVar6",
                "uVar6 = CONCAT44(DAT_080059bc, DAT_080059b8)": "uVar6 = CONCAT44(DAT_080059bc, DAT_080059b8)",
                "uVar6 = 0": "uVar6 = 0",
                "uVar4 = param_4 & 0x7fffffff": "uVar4 = w & 0x7fffffff",
                "if ((DAT_080059e8 < (uVar4 | (-param_3 | param_3) >> 0x1f)) || (uVar5 = param_2 & 0x7fffffff, DAT_080059e8 < (uVar5 | (-param_1 | param_1) >> 0x1f)))": "if ((DAT_080059e8 < (abs_w | (-z | z) >> 0x1f)) || (DAT_080059e8 < ((y & 0x7fffffff) | (-x | x) >> 0x1f)))",
                "uVar4 = FUNC_0800015c(param_3,param_4,param_1,param_2)": "result = FUNC_0800015c(z, w, x, y)",
                "return uVar4": "return result",
                "if ((param_4 + 0xc0100000 | param_3) == 0)": "if ((w + 0xc0100000 | z) == 0)",
                "uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f": "uint sign_bits = (int)w >> 0x1e & 2U | y >> 0x1f",
                "if ((uVar5 | param_1) == 0)": "if ((abs_w | z | x | y) == 0)",
                "if (uVar3 == 2)": "if (sign_bits == 2)",
                "return DAT_080059b0": "return DAT_080059b0",
                "uVar4 = DAT_080059a0": "result = DAT_080059a0",
                "return param_1": "return x",
                "if (sign_bits != 3)": "if (sign_bits != 3)",
                "if ((uVar4 | param_3) != 0)": "if ((abs_w | z) != 0)",
                "if (uVar4 == DAT_080059e8)": "if (abs_w == DAT_080059e8)",
                "if (uVar5 == uVar4)": "if (y == abs_w)",
                "return DAT_080059e0": "return DAT_080059e0",
                "if (uVar3 == 3)": "if (sign_bits == 3)",
                "return DAT_080059d8": "return DAT_080059d8",
                "if (uVar3 == 1)": "if (sign_bits == 1)",
                "return DAT_080059d0": "return DAT_080059d0",
                "return DAT_080059c8": "return DAT_080059c8",
                "if (uVar5 != DAT_080059e8)": "if (y != DAT_080059e8)",
                "difference = (int)(uVar5 - uVar4) >> 0x14": "difference = (int)(y - abs_w) >> 0x14",
                "if (iVar1 < 0x3d)": "if (difference < 0x3d)",
                "if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c)))": "if (((int)w < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c)))",
                "uVar6 = FUNC_080059f0()": "result = FUNC_080059f0()",
                "uint high_bits_of_result = (uint)((ulonglong)uVar6 >> 0x20)": "uint high_bits_of_result = (uint)((ulonglong)result >> 0x20)",
                "uVar4 = (uint)uVar6": "uVar4 = (uint)result",
                "if (sign_bits == 1)": "if (sign_bits == 1)",
                "if (sign_bits == 2)": "else if (sign_bits == 2)",
                "uVar6 = FUNC_08000158(uVar4,uVar2,DAT_080059a8,DAT_080059ac)": "uVar6 = FUNC_08000158(result, high_bits_of_result, DAT_080059a8, DAT_080059ac)",
                "uVar4 = FUNC_08000158(DAT_080059b0,DAT_080059b4,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20))": "result = FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)uVar6, (int)((ulonglong)uVar6 >> 0x20))",
                "if (sign_bits == 0)": "else if (sign_bits == 0)",
                "uVar4 = FUNC_08000158((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_080059b0,DAT_080059b4)": "result = FUNC_08000158((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_080059b0,DAT_080059b4)",
                "result = DAT_080059c0": "result = DAT_080059c0",
                "if (-1 < (int)param_2)": "if (-1 < (int)y)",
                "result = DAT_080059b8": "result = DAT_080059b8"
            },
            "code": "uint calculate_result_08005838(uint x, uint y, uint z, uint w) {\n  int difference;\n  uint result;\n  uint abs_w = w & 0x7fffffff;\n  if (DAT_080059e8 < (abs_w | (-z | z) >> 0x1f) || DAT_080059e8 < ((y & 0x7fffffff) | (-x | x) >> 0x1f)) {\n    result = FUNC_0800015c(z, w, x, y);\n    return result;\n  }\n  if ((w + 0xc0100000 | z) == 0) {\n    result = FUNC_080059f0();\n    return result;\n  }\n  uint sign_bits = (int)w >> 0x1e & 2U | y >> 0x1f;\n  if ((abs_w | z | x | y) == 0) {\n    if (sign_bits == 2) {\n      return DAT_080059b0;\n    }\n    uVar4 = DAT_080059a0;\n    if (sign_bits != 3) {\n      return x;\n    }\n  }\n  else {\n    if ((abs_w | z) != 0) {\n      if (uVar4 == DAT_080059e8) {\n        if (y == abs_w) {\n          if (sign_bits == 2) {\n            return DAT_080059e0;\n          }\n          if (sign_bits == 3) {\n            return DAT_080059d8;\n          }\n          if (sign_bits == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (sign_bits == 2) {\n          return DAT_080059b0;\n        }\n        if (sign_bits == 3) {\n          return DAT_080059a0;\n        }\n        if (sign_bits == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (uVar5 != DAT_080059e8) {\n        difference = (int)(y - abs_w) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)w < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            FUNC_0800071c(x, y, z, w, w);\n            do_nothing_08005d0c();\n            result = FUNC_080059f0();\n          }\n        }\n        else {\n          result = (uint)uVar6;\n        }\n        uint high_bits_of_result = (uint)((ulonglong)result >> 0x20);\n        result = FUNC_08000158(result, high_bits_of_result, DAT_080059a8, DAT_080059ac);\n        if (sign_bits == 1) {\n          result = FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)result, (int)((ulonglong)result >> 0x20));\n        }\n        else if (sign_bits == 2) {\n          uint uVar6 = FUNC_08000158(uVar4,uVar2,DAT_080059a8,DAT_080059ac);\n          uVar4 = FUNC_08000158(DAT_080059b0,DAT_080059b4,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n        }\n      }\n      else {\n        result = DAT_080059c0;\n        if (-1 < (int)y) {\n          result = DAT_080059b8;\n        }\n      }\n    }\n    else {\n      result = DAT_080059c0;\n      if (-1 < (int)y) {\n        result = DAT_080059b8;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08000158",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_080059f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_result_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "do_nothing_with_pointer_080090a8",
                "PTR_DAT_080090b0": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_080090a8(void)\n{\n  do_nothing(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "check_software_interrupt_triggered_08004e74",
                "param_1": "param",
                "uVar1": "result",
                "PTR_DAT_08004ea0": "ptr",
                "trigger_software_interrupt_08004e6c": "trigger_software_interrupt"
            },
            "code": "int check_software_interrupt_triggered_08004e74(int param){\n  int* PTR_DAT_08004ea0 = (int*)PTR_DAT_08004ea0;\n  if (*PTR_DAT_08004ea0 == 0) {\n    return trigger_software_interrupt_08004e6c(1, param, 0);\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "check_software_interrupt_triggered_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_float_080096e0",
                "param_1": "integer_part",
                "param_2": "fraction_part",
                "param_3": "exponent",
                "param_4": "rounding_mode",
                "iVar1": "max_exponent",
                "uVar3": "fraction_part_unsigned",
                "uVar4": "combined_parts",
                "iVar2": "exponent_offset"
            },
            "code": "uint32_t calculate_float_080096e0(uint32_t integer_part, uint32_t fraction_part, int32_t *exponent, uint32_t rounding_mode) {\n  int32_t max_exponent = MAX_EXPONENT;\n  uint64_t combined_parts = ((uint64_t)fraction_part << 32) | integer_part;\n  int32_t exponent_offset = 0;\n  *exponent = 0;\n  if (((int32_t)fraction_part <= max_exponent) && ((fraction_part | integer_part) != 0)) {\n    if (fraction_part < 0x100000) {\n      combined_parts = calculate_float_080096e0(integer_part, fraction_part, 0, MIN_NORMAL, rounding_mode);\n      exponent_offset = -54;\n      fraction_part = (uint32_t)((combined_parts >> 32) & 0x7fffffff);\n    }\n    integer_part = (uint32_t)combined_parts;\n    fraction_part = (uint32_t)((combined_parts >> 32) & 0x800fffff) | 0x3fe00000;\n    *exponent = ((int32_t)fraction_part >> 20) + -1023 + exponent_offset;\n  }\n  return (uint32_t)combined_parts;\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "calculate_float_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "copy_parameter_to_pointer_0800910c",
                "param_1": "param_offset",
                "param_2": "destination_ptr",
                "iVar1": "data_offset"
            },
            "code": "void copy_parameter_to_pointer_0800910c(int param_offset, undefined4 *destination_ptr)\n{\n  if (destination_ptr != (undefined4 *)0x0) {\n    int data_offset = *(int *)(param_offset + 0x4c);\n    *destination_ptr = *(undefined4 *)(data_offset + destination_ptr[1] * 4);\n    *(undefined4 **)(data_offset + destination_ptr[1] * 4) = destination_ptr;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "copy_parameter_to_pointer_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "calculate_and_set_value_080052a0",
                "local_44": "fifteen",
                "local_40": "two",
                "local_3c": "one_hundred_sixty",
                "local_38": "zero",
                "local_34": "zero",
                "local_30": "one",
                "local_2c": "sixteen",
                "local_28": "zero",
                "local_20": "twenty",
                "local_14": "thirty_two",
                "local_10": "sixteen",
                "local_c": "one_hundred_sixty",
                "iVar2": "result",
                "uVar3": "value",
                "lVar1": "product",
                "PTR_s____src_main_c_08005340": "s____src_main_c_08005340",
                "DAT_08005344": "DAT_08005344",
                "infinite_loop_08005674": "infinite_loop",
                "check_and_set_param_range_08003260": "check_and_set_range",
                "get_value_from_pointer_08003504": "get_value_from_pointer",
                "check_param_range_08001762": "check_range",
                "set_flag_if_param_is_four_0800177c": "set_flag_if_four",
                "set_byte_in_memory_at_address_0800172a": "set_byte_at_address"
            },
            "code": "void calculate_and_set_value_080052a0(void)\n{\n  longlong product;\n  int result;\n  ulonglong value;\n  int one = 1;\n  int sixteen = 0x10000;\n  int zero = 0;\n  int twenty = 20;\n  int thirty_two = 0x20;\n  int one_hundred_sixty = 0x80;\n  int four = 4;\n  result = get_value(&one);\n  if (result != 0) {\n    infinite_loop_08005674(\"PTR_s____src_main_c_08005340\",0x151);\n  }\n  int fifteen = 0xf;\n  int two = 2;\n  result = check_and_set_range(&fifteen, &two);\n  if (result != 0) {\n    infinite_loop_08005674(\"PTR_s____src_main_c_08005340\",0x15e);\n  }\n  value = get_value_from_pointer_08003504();\n  product = (longlong)twenty * (value & 0xffffffff);\n  check_range((uint)((ulonglong)product >> thirty_two),(int)(value >> 0x20),(int)product);\n  set_flag_if_param_is_four_0800177c(four);\n  set_byte_at_address(0xffffffff,0,0);\n  return;\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_08003504",
                "FUN_08001762",
                "FUN_08003260",
                "FUN_0800177c",
                "FUN_08002d98",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "calculate_and_set_value_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_polynomial_08009120",
                "param_1": "buffer_size",
                "param_2": "polynomial",
                "param_3": "degree",
                "param_4": "coefficient",
                "puVar1": "result_buffer",
                "uVar2": "carryover_high",
                "iVar3": "degree",
                "puVar4": "current_coefficient",
                "iVar5": "buffer_address"
            },
            "code": "undefined4* calculate_polynomial_08009120(int buffer_size, undefined4* polynomial, int degree, uint coefficient)\n{\n  undefined4* result_buffer;\n  uint carryover = 0;\n  int current_degree = polynomial[4];\n  uint* current_coefficient = polynomial + 5;\n  for (int i = 0; i < current_degree; i++) {\n    current_coefficient[i] = coefficient * (current_coefficient[i] & 0xffff) + carryover;\n    uint carryover_high = coefficient * (current_coefficient[i] >> 0x10) + (current_coefficient[i] >> 0x10);\n    current_coefficient[i] = (current_coefficient[i] & 0xffff) + carryover_high * 0x10000;\n    carryover = carryover_high >> 0x10;\n  }\n  result_buffer = polynomial;\n  if (carryover != 0) {\n    if ((int)polynomial[2] <= current_degree) {\n      result_buffer = (undefined4*)allocate_or_get_buffer_080090c0(buffer_size, polynomial[1] + 1);\n      copy_memory_to_destination_buffer_08001084(result_buffer + 3, polynomial + 3, (polynomial[4] + 2) * 4);\n      int buffer_address = *(int*)(buffer_size + 0x4c);\n      *polynomial = *(undefined4*)(buffer_address + polynomial[1] * 4);\n      *(undefined4**)(buffer_address + polynomial[1] * 4) = polynomial;\n    }\n    polynomial[current_degree + 5] = carryover;\n    polynomial[4] = current_degree + 1;\n  }\n  return result_buffer;\n}",
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_polynomial_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_to_destination_buffer_08001084",
                "param_1": "destination_buffer",
                "param_2": "source_buffer",
                "param_3": "buffer_size",
                "puVar1": "temp_ptr_1",
                "puVar2": "dest_ptr",
                "puVar3": "temp_ptr_2",
                "uVar4": "counter",
                "uVar5": "offset",
                "bVar6": "is_less_than_8_bytes",
                "LAB_08001108": "label_exit"
            },
            "code": "undefined4* copy_memory_to_destination_buffer_08001084(undefined4* destination_buffer, undefined4* source_buffer, uint buffer_size)\n{\n    undefined4* dest_ptr = destination_buffer;\n    uint remainder = buffer_size;\n    uint offset;\n    bool is_less_than_8_bytes;\n    if ((((uint)source_buffer | (uint)destination_buffer) & 3) != 0)\n    {\n        if (buffer_size < 8)\n        {\n            offset = buffer_size - 4;\n            if (3 < buffer_size)\n            {\n                do\n                {\n                    *dest_ptr = *source_buffer;\n                    dest_ptr = (undefined4*)((int)dest_ptr + 1);\n                    source_buffer = (undefined4*)((int)source_buffer + 1);\n                    is_less_than_8_bytes = offset != 0;\n                    offset = offset - 1;\n                } while (is_less_than_8_bytes);\n                *(undefined*)(undefined4*)((int)dest_ptr + 1) = *(undefined*)(undefined4*)((int)source_buffer + 1);\n                *(undefined*)((int)dest_ptr + 2) = *(undefined*)((int)source_buffer + 2);\n                *(undefined*)((int)dest_ptr + 3) = *(undefined*)((int)source_buffer + 3);\n                return destination_buffer;\n            }\n            goto LAB_08001108;\n        }\n        if ((((uint)source_buffer & 3) != 0) && (((uint)destination_buffer & 3) != 0))\n        {\n            offset = 4 - ((uint)destination_buffer & 3);\n            buffer_size = buffer_size - offset;\n            undefined4* src_ptr = source_buffer;\n            undefined4* dst_ptr = destination_buffer;\n            if (((uint)destination_buffer & 1) != 0)\n            {\n                src_ptr = (undefined4*)((int)source_buffer + 1);\n                dst_ptr = (undefined4*)((int)destination_buffer + 1);\n                *(undefined*)destination_buffer = *(undefined*)source_buffer;\n            }\n            dest_ptr = dst_ptr;\n            source_buffer = src_ptr;\n            if ((offset & 2) != 0)\n            {\n                source_buffer = (undefined4*)((int)src_ptr + 2);\n                dest_ptr = (undefined4*)((int)dst_ptr + 2);\n                *(undefined2*)dst_ptr = *(undefined2*)src_ptr;\n            }\n        }\n    }\n    while (0x3f < buffer_size)\n    {\n        *dest_ptr = *source_buffer;\n        dest_ptr[1] = source_buffer[1];\n        dest_ptr[2] = source_buffer[2];\n        dest_ptr[3] = source_buffer[3];\n        dest_ptr[4] = source_buffer[4];\n        dest_ptr[5] = source_buffer[5];\n        dest_ptr[6] = source_buffer[6];\n        dest_ptr[7] = source_buffer[7];\n        dest_ptr[8] = source_buffer[8];\n        dest_ptr[9] = source_buffer[9];\n        dest_ptr[10] = source_buffer[10];\n        dest_ptr[11] = source_buffer[11];\n        dest_ptr[12] = source_buffer[12];\n        dest_ptr[13] = source_buffer[13];\n        dest_ptr[14] = source_buffer[14];\n        dest_ptr[15] = source_buffer[15];\n        dest_ptr = dest_ptr + 0x10;\n        source_buffer = source_buffer + 0x10;\n        buffer_size = buffer_size - 0x40;\n    }\n    uint counter = buffer_size - 0x10;\n    if (0xffffffcf < buffer_size - 0x40)\n    {\n        do\n        {\n            *dest_ptr = *source_buffer;\n            dest_ptr[1] = source_buffer[1];\n            dest_ptr[2] = source_buffer[2];\n            dest_ptr[3] = source_buffer[3];\n            dest_ptr = dest_ptr + 4;\n            source_buffer = source_buffer + 4;\n            is_less_than_8_bytes = 0xf < counter;\n            counter = counter - 0x10;\n        } while (is_less_than_8_bytes);\n    }\n    offset = counter + 0xc;\n    undefined4* dst_ptr = dest_ptr;\n    undefined4* src_ptr = source_buffer;\n    if (0xfffffff3 < counter)\n    {\n        do\n        {\n            source_buffer = src_ptr + 1;\n            *dst_ptr = *src_ptr;\n            is_less_than_8_bytes = 3 < offset;\n            offset = offset - 4;\n            dst_ptr = dst_ptr + 1;\n            src_ptr = source_buffer;\n        } while (is_less_than_8_bytes);\n    }\nLAB_08001108:\n    if (offset + 4 != 0)\n    {\n        dst_ptr = dst_ptr;\n        src_ptr = source_buffer;\n        if ((offset & 1) != 0)\n        {\n            src_ptr = (undefined4*)((int)source_buffer + 1);\n            dst_ptr = (undefined4*)((int)dst_ptr + 1);\n            *(undefined*)dst_ptr = *(undefined*)source_buffer;\n        }\n        if ((offset + 4 & 2) != 0)\n        {\n            *(undefined2*)dst_ptr = *(undefined2*)src_ptr;\n        }\n    }\n    return destination_buffer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_080097cc",
                "FUN_08009120",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "copy_memory_to_destination_buffer_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "check_param_value_08005680",
                "param_1": "input_param",
                "local_18": "num1",
                "local_14": "num2",
                "local_c": "num3",
                "DAT_080056b4": "PARAM_VALUE_1",
                "DAT_080056b8": "PARAM_VALUE_2"
            },
            "code": "void check_param_value_08005680(int *input_param)\n{\n  undefined4 num1;\n  undefined4 num2;\n  undefined4 num3;\n  \n  if (*input_param == DAT_080056b4) {\n    num1 = 0x900;\n    num2 = 2;\n    num3 = 2;\n    call_improved_function(DAT_080056b8,&num1);\n  }\n  return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_param_value_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "check_and_set_param_range_08003260",
                "param_1": "param_array",
                "param_2": "param_count",
                "iVar1": "value",
                "iVar2": "value2",
                "uVar3": "value_shifted",
                "uVar4": "result",
                "DAT_08003430": "data_08003430",
                "DAT_08003434": "data_08003434"
            },
            "code": "uint32_t check_and_set_param_range_08003260(uint32_t *param_array, uint32_t param_count)\n{\n    uint32_t result;\n    uint32_t *DAT_08003430 = (uint32_t *)0x08003430;\n    uint32_t *DAT_08003434 = (uint32_t *)0x08003434;\n\n    if (((*DAT_08003430 & 7) < param_count) &&\n        (*DAT_08003430 = param_count | *DAT_08003430 & 0xfffffff8, param_count != (*DAT_08003430 & 7))) {\n        result = 1;\n    }\n    else {\n        if ((*param_array & 2) != 0) {\n            DAT_08003434[1] = param_array[2] | DAT_08003434[1] & 0xffffff0f;\n        }\n        if ((*param_array & 1) == 0) {\n            while (true) {\n                if ((param_count < (*DAT_08003430 & 7)) &&\n                    (*DAT_08003430 = param_count | *DAT_08003430 & 0xfffffff8, param_count != (*DAT_08003430 & 7))) {\n                    result = 1;\n                    break;\n                }\n                else {\n                    if ((*param_array & 4) != 0) {\n                        DAT_08003434[1] = param_array[3] | DAT_08003434[1] & 0xfffff8ff;\n                    }\n                    if ((*param_array & 8) != 0) {\n                        DAT_08003434[1] = param_array[4] << 3 | DAT_08003434[1] & 0xffffc7ff;\n                    }\n                    uint32_t value = calculate_value();\n                    *(uint32_t *)0x0800343c = value >> ((DAT_08003434[1] >> 4) & 0xf);\n                    check_and_set_param_range_08003260(0xf);\n                    result = 0;\n                    break;\n                }\n            }\n        }\n        else {\n            if (param_array[1] == 1) {\n                if ((*DAT_08003434 & 0x20000) == 0) {\n                    result = 1;\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else if ((param_array[1] != 2) && ((*DAT_08003434 & 2) == 0)) {\n                result = 1;\n            }\n            else {\n                DAT_08003434[1] = param_array[1] | DAT_08003434[1] & 0xfffffffc;\n                uint32_t value = get_value_from_pointer();\n                while (true) {\n                    if (param_array[1] == 1) {\n                        if ((DAT_08003434[1] & 0xc) == 4) {\n                            result = 0;\n                            break;\n                        }\n                    }\n                    else if (param_array[1] == 2) {\n                        if ((DAT_08003434[1] & 0xc) == 8) {\n                            result = 0;\n                            break;\n                        }\n                    }\n                    else {\n                        if ((DAT_08003434[1] & 0xc) == 0) {\n                            result = 0;\n                            break;\n                        }\n                    }\n                    uint32_t value2 = get_value_from_pointer();\n                    if ((value2 - value) >= 0x1389) {\n                        result = 3;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08003440",
                "FUN_0800151c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "check_and_set_param_range_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_result_08001ab0",
                "param_1": "input",
                "uVar1": "result",
                "cVar2": "c",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "is_zero"
            },
            "code": "uint32_t calculate_result_08001ab0(uint32_t **input)\n{\n  uint32_t result = 0;\n  if (input == NULL) {\n    result = 1;\n  }\n  else {\n    if (input[0][15] == 0) {\n      input[0][15] = 0;\n      do_nothing(input);\n    }\n    input[0][61] = 0x24;\n    input[0][0] = input[0][0] & 0xfffffffe;\n    uint32_t shifted_value = get_shifted_value_from_pointer();\n    if (input[0][10] < input[0][1]) {\n      uint32_t limit = (shifted_value <= input[0][14]) ? 1 : shifted_value;\n      if (input[0][14] < shifted_value) {\n        limit = 0;\n      }\n    }\n    else {\n      uint32_t limit = (shifted_value <= input[0][13]) ? 1 : shifted_value;\n      if (input[0][13] < shifted_value) {\n        limit = 0;\n      }\n    }\n    if (limit == 0) {\n      uint32_t value = (uint32_t)(((uint64_t)input[0][11] * (uint64_t)shifted_value) >> 0x32);\n      input[0][1] = value;\n      if (input[0][10] < input[0][1]) {\n        value = (uint32_t)(((uint64_t)input[0][12] * (uint64_t)(value * 300)) >> 0x26);\n      }\n      input[0][8] = value + 1;\n      if (input[0][10] < input[0][1]) {\n        if (input[0][2] == NULL) {\n          uint32_t division_result = (shifted_value - 1) / ((int)input[0][1] * 3) + 1 & 0xfff;\n          bool is_zero = division_result == 0;\n          if (is_zero) {\n            division_result = 1;\n          }\n          uint32_t c = (is_zero) ? 1 : 0;\n          if (!is_zero) {\n            c = 0;\n          }\n        }\n        else {\n          uint32_t division_result = (shifted_value - 1) / ((int)input[0][1] * 0x19) + 1 & 0xfff;\n          bool is_zero = division_result == 0;\n          if (is_zero) {\n            division_result = 1;\n          }\n          uint32_t c = (is_zero) ? 1 : 0;\n          if (!is_zero) {\n            c = 0;\n          }\n        }\n        if (c == 0) {\n          if (input[0][2] == NULL) {\n            shifted_value = (shifted_value - 1) / ((int)input[0][1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            shifted_value = (shifted_value - 1) / ((int)input[0][1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          shifted_value = 1;\n        }\n      }\n      else {\n        shifted_value = (shifted_value - 1) / ((int)input[0][1] << 1) + 1 & 0xfff;\n        if (shifted_value < 4) {\n          shifted_value = 4;\n        }\n      }\n      input[0][7] = shifted_value;\n      input[0][0] = (uint32_t)input[0][8] | (uint32_t)input[0][7];\n      input[0][2] = (uint32_t)input[0][3] | (uint32_t)input[0][4];\n      input[0][3] = (uint32_t)input[0][6] | (uint32_t)input[0][5];\n      input[0][0] = input[0][0] | 1;\n      input[0][16] = NULL;\n      input[0][12] = NULL;\n      input[0][62] = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": false,
            "current_name": "calculate_result_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_shifted_value_from_pointer_08003540",
                "uVar1": "value",
                "PTR_DAT_08003564": "shift_values",
                "DAT_08003560": "data_pointer",
                "index": "shift_index",
                "shifted_value": "shifted_value"
            },
            "code": "uint get_shifted_value_from_pointer_08003540(void)\n{\n  uint value = get_value_from_pointer();\n  uint index = *(uint *)(DAT_08003560 + 4) >> 0xb & 7;\n  uint shifted_value = value >> PTR_DAT_08003564[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "allocate_buffer_and_set_values_08009244",
                "param_1": "buffer_size",
                "param_2": "value",
                "iVar1": "buffer_address"
            },
            "code": "void allocate_buffer_and_set_values_08009244(uint32_t buffer_size, uint32_t value) {\n  int buffer_address = allocate_or_get_buffer_080090c0(buffer_size, 1);\n  *(uint32_t *)(buffer_address + 0x10) = 1;\n  *(uint32_t *)(buffer_address + 0x14) = value;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "allocate_buffer_and_set_values_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "trigger_software_interrupt_08004e6c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_software_interrupt_08004e6c(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "check_param_range_08001762",
                "param_1": "input_param",
                "uVar1": "param_within_range"
            },
            "code": "undefined4 check_param_range_08001762(undefined4 input_param)\n{\n  undefined4 param_within_range = check_param_within_range_080016d0(input_param);\n  return param_within_range;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "check_param_range_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_08005838",
                "FUN_08005e9c",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "string_copy_08009768",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_uint",
                "cVar1": "current_char"
            },
            "code": "void string_copy_08009768(uint *dest, uint *src, uint length) {\n    char current_char;\n    uint *src_ptr;\n    uint *dest_ptr;\n    uint current_uint;\n    \n    if (((((uint)dest | (uint)src) & 3) == 0) && (dest_ptr = dest, src_ptr = src, 3 < length))) {\n        do {\n            src = src_ptr + 1;\n            current_uint = *src_ptr;\n            dest = dest_ptr;\n            if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_0800979c;\n            length = length - 4;\n            dest = dest_ptr + 1;\n            *dest_ptr = current_uint;\n            dest_ptr = dest;\n            src_ptr = src;\n        } while (3 < length);\n    }\n    dest_ptr = src;\n    if (length != 0) {\nLAB_0800979c:\n        current_char = *(char *)dest_ptr;\n        *(char *)dest = current_char;\n        while( true ) {\n            dest = (uint *)((int)dest + 1);\n            length = length - 1;\n            if (current_char == '\\0') break;\n            if (length == 0) {\n                return;\n            }\n            src_ptr = (uint *)((int)src_ptr + 1);\n            current_char = *(char *)src_ptr;\n            *(char *)dest = current_char;\n        }\n        if (length != 0) {\n            dest_ptr = dest;\n            do {\n                src = (uint *)((int)dest_ptr + 1);\n                *(char *)dest_ptr = '\\0';\n                dest_ptr = src;\n            } while (src != (uint *)(length + (int)dest));\n        }\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "string_copy_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "data_addr",
                "param_2": "data_array",
                "local_c": "data_1",
                "iVar1": "new_data_1",
                "iVar2": "new_data_2"
            },
            "code": "void update_data_08003ff8(int data_addr, int *data_array){\n    int new_data_1;\n    int new_data_2;\n    uint16_t data_1;\n    uint16_t data_2;\n\n    data_1 = *(uint16_t *)(data_addr + 0x04);\n    data_2 = *(uint16_t *)(data_addr + 0x1C);\n\n    *(uint32_t *)(data_addr + 0x20) &= 0xFFFFEFFF;\n\n    if(data_addr == PTR_0800409c){\n        data_1 = (data_array[5] << 6) | (data_1 & 0xFFFFBFFF);\n    }\n\n    new_data_1 = data_array[0];\n    new_data_2 = data_array[2];\n\n    *(uint32_t *)(data_addr + 0x04) = data_1;\n    *(uint32_t *)(data_addr + 0x1C) = (new_data_1 << 8) | (data_2 & 0xFFFF8CFF);\n    *(int *)(data_addr + 0x40) = data_array[1];\n    *(uint32_t *)(data_addr + 0x20) = (new_data_2 << 12) | (data_1 & 0xFFFFDFFF);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "validate_input_08004ea4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "void validate_input_08004ea4(void* data, undefined input_1, undefined input_2, undefined4 input_3, undefined2 input_4)\n{\n  validate_input_08004ea4_08001ccc_08001ccc(data, input_1, input_2, 1, input_3, input_4, *(undefined4 *)PTR_DAT_08004ee0);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "validate_input_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "set_flags_and_values_080040a0",
                "param_1": "memory_address",
                "param_2": "flags",
                "param_3": "value",
                "uVar1": "old_flags"
            },
            "code": "void set_flags_and_values_080040a0(int memory_address, uint32_t flags, int value){\n  uint32_t old_flags = *(uint32_t *)(memory_address + 0x20);\n  *(uint32_t *)(memory_address + 0x20) = *(uint32_t *)(memory_address + 0x20) & 0xfffffffe;\n  *(uint32_t *)(memory_address + 0x18) = (value << 4) | (*(uint32_t *)(memory_address + 0x18) & 0xffffff0f);\n  *(uint32_t *)(memory_address + 0x20) = flags | old_flags & 0xfffffff5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_aligned",
                "puVar2": "src_aligned",
                "iVar3": "count",
                "puVar4": "dest_end",
                "puVar5": "src_end",
                "uVar6": "padding",
                "uVar7": "size_mod_4"
            },
            "code": "void reverse_copy_08009a18(uint32_t *dest, uint32_t *src, uint32_t size)\n{\n    uint32_t *src_end = src + size;\n    if (src < dest && dest < src_end) {\n        uint8_t *dest_end = (uint8_t *)dest + size;\n        if (size != 0) {\n            do {\n                src_end--;\n                dest_end--;\n                *dest_end = *(uint8_t *)src_end;\n            } while (src != src_end);\n        }\n    } else {\n        uint32_t *src_end_aligned = (uint32_t *)((uintptr_t)(src_end) & ~(uintptr_t)(0x3));\n        uint32_t *dest_end_aligned = (uint32_t *)((uintptr_t)(dest) & ~(uintptr_t)(0x3));\n        uint32_t *src_aligned = (uint32_t *)((uintptr_t)(src) & ~(uintptr_t)(0x3));\n        uint32_t *dest_aligned = (uint32_t *)((uintptr_t)(dest_end_aligned) & ~(uintptr_t)(0x3));\n        uint32_t count = (src_end_aligned - src_aligned) + 1;\n        if (count > 0) {\n            do {\n                dest_aligned[-4] = src_aligned[-4];\n                dest_aligned[-3] = src_aligned[-3];\n                dest_aligned[-2] = src_aligned[-2];\n                dest_aligned[-1] = src_aligned[-1];\n                src_aligned -= 4;\n                dest_aligned -= 4;\n            } while (dest_aligned != (uint32_t *)((uintptr_t)(dest_end_aligned) & ~(uintptr_t)(0x3)));\n            size &= 0x3;\n            src = src_end_aligned;\n            dest = dest_end_aligned;\n        }\n        if (size != 0) {\n            uint8_t *dest_end = (uint8_t *)dest;\n            uint8_t *src_end = (uint8_t *)src;\n            do {\n                *dest_end++ = *src_end++;\n            } while (src_end != (uint8_t *)(size + (uintptr_t)(src)));\n        }\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_to_int_0800119c",
                "param_1": "fractional_part",
                "param_2": "integer_part",
                "uVar1": "shifted_result",
                "iVar2": "shifted_fractional",
                "uVar3": "abs_shifted_fractional"
            },
            "code": "uint convert_to_int_0800119c(uint fractional_part, uint integer_part)\n{\n  uint shifted_integer = integer_part << 11;\n  int shifted_fractional = fractional_part * 2 + 0x200000;\n  if(shifted_fractional * 2 < 0xffe00000)\n  {\n    if(shifted_fractional >= -1)\n    {\n      return 0;\n    }\n    uint abs_shifted_fractional = -shifted_fractional - 0x3e1;\n    if(abs_shifted_fractional != 0 && abs_shifted_fractional < 0xfffffc20)\n    {\n      uint shifted_result = shifted_integer | 0x80000000 | (fractional_part >> 21);\n      shifted_result = shifted_result >> (abs_shifted_fractional & 0xff);\n      if((fractional_part & 0x80000000) != 0)\n      {\n        shifted_result = -shifted_result;\n      }\n      return shifted_result;\n    }\n  }\n  else if((fractional_part | shifted_integer) != 0)\n  {\n    return 0;\n  }\n  uint sign = fractional_part & 0x80000000;\n  if(sign == 0)\n  {\n    sign = 0x7fffffff;\n  }\n  return sign;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_to_int_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "get_local_value_08005728",
                "param_1": "input_value",
                "puVar1": "local_pointer",
                "auStack_18": "local_array",
                "local_14": "local_int",
                "local_c": "local_return_value"
            },
            "code": "int get_local_value_08005728(int input_value) {\n  undefined4 *local_pointer;\n  undefined local_array[4];\n  int local_int;\n  undefined4 local_return_value;\n  \n  if (*(int *)global_pointer_1 == 0) {\n    *(undefined **)global_pointer_1 = global_pointer_2;\n  }\n  local_return_value = *(undefined4 *)global_pointer_1;\n  if (local_array < (undefined *)(input_value + *(int *)global_pointer_1)) {\n    local_int = input_value;\n    local_pointer = (undefined4 *)get_pointer_value_from_data_segment_08005d14();\n    *local_pointer = 0xc;\n    local_return_value = 0xffffffff;\n  }\n  else {\n    *(int *)global_pointer_1 = input_value + *(int *)global_pointer_1;\n  }\n  return local_return_value;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": false,
            "current_name": "get_local_value_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "do_nothing_with_pointer_080090b4",
                "PTR_DAT_080090bc": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_080090b4(void)\n{\n  do_nothing(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_value_if_flag_is_true_0800422e",
                "param_1": "value_ptr",
                "param_2": "flags_ptr",
                "uVar1": "return_value",
                "PTR_": "value_ptr",
                "DAT_": "flags_ptr"
            },
            "code": "int set_value_if_flag_is_true_0800422e(int *PTR_, uint *DAT_) {\n    int return_value;\n    if (*(char *)(PTR_ + 0xf) == '\\x01') {\n        return_value = 2;\n    }\n    else {\n        *(undefined *)(PTR_ + 0xf) = 1;\n        uint new_value = *DAT_ | (DAT_[1] | (DAT_[2] | (DAT_[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff) & 0xffffefff | (DAT_[4] | (DAT_[5] | DAT_[6]) & 0xffffdfff) & 0xffffbfff | 0xffff7fff;\n        *(uint *)(*PTR_ + 0x44) = new_value;\n        *(undefined *)(PTR_ + 0xf) = 0;\n        return_value = 0;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_value_if_flag_is_true_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "data_address",
                "param_2": "data_array",
                "iVar1": "new_data",
                "uVar2": "modified_value",
                "local_10": "local_data"
            },
            "code": "void update_data_08003e38(int data_address, int *data_array){\n  int new_data;\n  uint modified_value;\n  uint local_data;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffffef;\n  local_data = *(uint *)(data_address + 4);\n  new_data = *data_array;\n  modified_value = data_array[2] << 4 | *(uint *)(data_address + 0x20) & 0xffffffdf;\n  if (data_address == DAT_08003f14) {\n    modified_value = (data_array[3] << 4 | modified_value & 0xffffff7f) & 0xffffffbf;\n    local_data = data_array[6] << 2 | data_array[5] << 2 | local_data & 0xfffff3ff;\n  }\n  *(uint *)(data_address + 4) = local_data;\n  *(uint *)(data_address + 0x18) = new_data << 8 | *(uint *)(data_address + 0x18) & 0xffff8cff;\n  *(int *)(data_address + 0x38) = data_array[1];\n  *(uint *)(data_address + 0x20) = modified_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "check_and_set_param_range_0800151c",
                "param_1": "param",
                "iVar1": "is_valid",
                "uVar2": "return_value",
                "check_param_range_08001762": "check_param_range",
                "PTR_DAT_08001570": "ptr_dat_1",
                "byte": "byte_val",
                "PTR_DAT_08001574": "ptr_dat_2",
                "set_byte_in_memory_at_address_0800172a": "set_byte_in_memory_at_address",
                "PTR_DAT_08001578": "ptr_dat_3"
            },
            "code": "int check_and_set_param_range_0800151c(uint param)\n{\n    int is_valid = check_param_range((int)((ulonglong)*(uint *)PTR_DAT_08001570 / (1000 / (ulonglong)(byte)*PTR_DAT_08001574)));\n    if (is_valid == 0) {\n        if (param < 16) {\n            set_byte_in_memory_at_address(0xffffffff, param, 0);\n            *(uint *)PTR_DAT_08001578 = param;\n            return 0;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "check_and_set_param_range_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "input1_msb",
                "unaff_r4": "N/A",
                "uVar2": "mask",
                "uVar3": "input2_copy",
                "in_r12": "N/A",
                "bVar4": "is_input1_or_input2_zero"
            },
            "code": "ulonglong calculate_result_080006a4(uint input1, uint input2, uint input3, uint input4)\n{\n  uint mask = 0xfffc0000 & input4;\n  if (input2 != input3 && mask != input3)\n  {\n    bool is_input1_or_input2_zero = (input1 | (input2 << 1)) == 0;\n    if (!is_input1_or_input2_zero)\n    {\n      is_input1_or_input2_zero = (input3 | (input4 << 1)) == 0;\n    }\n    if (is_input1_or_input2_zero)\n    {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input3 == 0)\n    {\n      uint input2_msb = input2 & 0x80000000;\n      do\n      {\n        uint input1_msb = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(input1_msb != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | input2_msb;\n      if (mask != 0)\n      {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do\n    {\n      uint input3_msb = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(input3_msb != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  bool is_input1_or_input2_zero = (input1 | (input2 << 1)) == 0;\n  if (is_input1_or_input2_zero)\n  {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_input1_or_input2_zero)\n  {\n    is_input1_or_input2_zero = (input3 | (input4 << 1)) == 0;\n  }\n  uint input2_copy = input2;\n  if (((!is_input1_or_input2_zero) && ((input2 != input3 || ((input1 | (input2 << 0xc)) == 0)))) && ((mask != input3 || (input1 = input3, input2_copy = input4, (input3 | (input4 << 0xc)) == 0))))\n  {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(input2_copy,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "input1_times_2",
                "uVar3": "input2_times_2",
                "uVar4": "input1_or_input2_abs",
                "bVar1": "is_input1_xor_input2_negative",
                "bVar5": "is_input1_or_input2_abs_zero"
            },
            "code": "uint calculate_result_08000f68(uint input1, uint input2) {\n  bool is_negative1 = input1 >> 0x18 == -1;\n  bool is_negative2 = input2 >> 0x18 == -1;\n  uint input1_abs = input1 & 0x7fffff;\n  uint input2_abs = input2 & 0x7fffff;\n  bool is_input1_abs_zero = input1_abs == 0;\n  bool is_input2_abs_zero = input2_abs == 0;\n  uint result;\n  if ((is_negative1 || is_negative2) && ((is_negative1 && (input1_abs != 0)) || (is_negative2 && (input2_abs != 0)))) {\n    result = 1;\n  } else {\n    uint input1_times_2 = input1 * 2;\n    uint input2_times_2 = input2 * 2;\n    uint input1_xor_input2 = input1 ^ input2;\n    bool is_input1_xor_input2_zero = input1_xor_input2 == 0;\n    bool is_input1_xor_input2_negative = -1 < (int)input1_xor_input2;\n    if (is_input1_xor_input2_negative) {\n      uint input2_times_minus_2 = input2 * -2;\n      if (input1_times_2 + input2_times_minus_2 != 0) {\n        result = 0;\n      } else if (is_input2_abs_zero || (is_input1_abs_zero && is_negative2)) {\n        result = (int)input2 >> 0x1f;\n      } else {\n        result = 1;\n      }\n    } else {\n      if (is_input2_abs_zero || (is_input1_abs_zero && is_negative2)) {\n        result = ~((int)input2 >> 0x1f);\n      } else {\n        result = 1;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "buffer",
                "param_2": "buffer_size_1",
                "param_3": "buffer_size_2",
                "puVar1": "hash_ptr",
                "puVar2": "buffer_ptr",
                "iVar3": "hash_buffer_size",
                "uVar4": "carry",
                "puVar5": "hash_buffer",
                "puVar7": "buffer_2_end",
                "puVar14": "hash_value_ptr",
                "puVar15": "buffer_1_ptr",
                "puVar16": "buffer_2_ptr",
                "puVar17": "hash_buffer_end",
                "puVar18": "hash_value_ptr",
                "iVar9": "buffer_1_size",
                "iVar10": "buffer_size_min",
                "iVar12": "buffer_size_1",
                "iVar13": "buffer_2_ptr",
                "uVar6": "data_1",
                "uVar8": "hash_value_3",
                "uVar11": "hash_value"
            },
            "code": "void calculate_hash_08009258(uint32_t buffer, int buffer_size_1, int buffer_size_2)\n{\n  uint32_t* buffer_1_ptr;\n  uint32_t* buffer_2_ptr;\n  int buffer_size_min;\n  int buffer_1_size;\n  int buffer_2_size;\n  uint32_t carry;\n  uint32_t* hash_buffer_ptr;\n  uint32_t hash_value_1;\n  uint32_t hash_value_2;\n  uint32_t hash_value_3;\n  uint32_t hash_value_4;\n  uint32_t hash_value_5;\n  uint32_t hash_value_6;\n  uint32_t hash_value_7;\n  uint32_t hash_value_8;\n  uint32_t hash_value_9;\n  uint32_t hash_value_10;\n  uint32_t hash_value_11;\n  uint32_t hash_value_12;\n  uint32_t hash_value_13;\n  uint32_t hash_value_14;\n  uint32_t hash_value_15;\n  uint32_t hash_value_16;\n  uint32_t hash_value_17;\n  uint32_t hash_value_18;\n  uint32_t hash_value_19;\n  uint32_t hash_value_20;\n  uint32_t hash_value_21;\n  uint32_t hash_value_22;\n  uint32_t hash_value_23;\n  uint32_t hash_value_24;\n  uint32_t hash_value_25;\n  uint32_t hash_value_26;\n  uint32_t hash_value_27;\n  \n  buffer_1_size = *(int *)(buffer_size_1 + 0x10);\n  buffer_2_size = *(int *)(buffer_size_2 + 0x10);\n  buffer_size_min = buffer_2_size;\n  buffer_1_ptr = (uint32_t *)(buffer_size_1 + 0x14);\n  buffer_2_ptr = (uint32_t *)(buffer_size_2 + 0x14);\n  if (buffer_1_size < buffer_2_size) {\n    buffer_size_min = buffer_1_size;\n    buffer_1_size = buffer_2_size;\n    buffer_2_size = buffer_size_2;\n    buffer_size_2 = buffer_size_1;\n    buffer_1_ptr = (uint32_t *)(buffer_size_2 + 0x14);\n    buffer_2_ptr = (uint32_t *)(buffer_size_1 + 0x14);\n  }\n  buffer_1_size = buffer_1_size + buffer_size_min;\n  hash_buffer_ptr = (uint32_t *)allocate_or_get_buffer(buffer, buffer_1_size);\n  uint32_t* hash_buffer_end = hash_buffer_ptr + buffer_1_size;\n  for (uint32_t* hash_buffer = hash_buffer_ptr; hash_buffer < hash_buffer_end; hash_buffer++) {\n    *hash_buffer = 0;\n  }\n  uint32_t* buffer_1_end = buffer_2_ptr + buffer_size_min * 4 + 0x10;\n  for (uint32_t* buffer_1 = buffer_2_ptr + 0x10; buffer_1 < buffer_1_end; buffer_1++) {\n    uint32_t* buffer_2 = buffer_1;\n    uint32_t data_1 = *buffer_2 & 0xffff;\n    if (data_1 != 0) {\n      uint32_t data_2 = *buffer_2 >> 0x10;\n      uint32_t* hash_buffer = hash_buffer_ptr;\n      uint32_t* buffer_1_ptr = buffer_1;\n      uint32_t hash_value = *hash_buffer;\n      uint32_t carry = 0;\n      do {\n        uint32_t* hash_ptr = hash_buffer;\n        uint32_t* buffer_ptr = buffer_1_ptr;\n        uint32_t hash_value_1 = data_1 * (*(uint16_t *)buffer_ptr) + carry + (hash_value >> 0x10);\n        carry = hash_value_1 >> 0x10;\n        uint32_t hash_value_2 = data_2 * (*(uint16_t *)buffer_ptr) + (*(uint16_t *)(buffer_ptr + 2)) + carry;\n        carry = hash_value_2 >> 0x10;\n        hash_value += hash_value_1 + (hash_value_2 << 0x10);\n        hash_buffer = hash_ptr + 1;\n        buffer_1_ptr = buffer_ptr + 1;\n      } while (buffer_1_ptr < buffer_2_ptr + buffer_size_min * 4 + 0x10);\n    }\n  }\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "count_leading_zero_bits_08000c08",
                "param_1": "input",
                "iVar1": "num_leading_zero_bits",
                "uVar2": "num_shift_bits",
                "iVar3": "multiplier",
                "uVar4": "shifted_input",
                "shift_amount": "shift_amount",
                "shifted_0": "shifted_0",
                "shifted_7fffffff": "shifted_7fffffff",
                "result": "result"
            },
            "code": "uint count_leading_zero_bits_08000c08(uint input)\n{\n    if (input == 0) {\n        return 0;\n    }\n    int num_leading_zero_bits = count_leading_zeroes(input);\n    int num_shift_bits = num_leading_zero_bits - 8;\n    int multiplier = num_shift_bits * -0x800000 + 0x4a800000;\n    if (num_leading_zero_bits > 7) {\n        uint shift_amount = num_shift_bits & 0xff;\n        uint shifted_input = input << shift_amount;\n        uint shifted_0 = 0U >> (0x20 - shift_amount);\n        uint shifted_7fffffff = (uint)(0x7fffffff < 0);\n        uint result = multiplier + shifted_input + shifted_0 + shifted_7fffffff;\n        if ((shifted_0 == 0x80000000)) {\n            result = result & 0xfffffffe;\n        }\n        return result;\n    }\n    uint shifted_input = input << (num_leading_zero_bits + 0x18U & 0xff);\n    uint shifted_0x7fffffff = (uint)(0x7fffffff < shifted_input);\n    uint shifted_0 = (uint)(shifted_input == 0);\n    uint result = multiplier + ((input >> (0x20 - (num_leading_zero_bits + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n    if (shifted_0x7fffffff == 0) {\n        result = result & ~(shifted_input >> 0x1f);\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "count_leading_zero_bits_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_parameter_080042de",
                "param_1": "parameter_list",
                "param_2": "new_value",
                "uVar1": "return_value"
            },
            "code": "int set_parameter_080042de(int *parameter_list, uint *new_value) {\n  int return_value;\n  if (*(char *)(parameter_list + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(parameter_list + 0xf) = 1;\n    *(undefined *)((int)parameter_list + 0x3d) = 2;\n    *(uint *)(*parameter_list + 4) = *(uint *)(*parameter_list + 4) & 0xffffff8f;\n    *(uint *)(*parameter_list + 4) = *new_value | *(uint *)(*parameter_list + 4);\n    *(uint *)(*parameter_list + 8) = *(uint *)(*parameter_list + 8) & 0xffffff7f;\n    *(uint *)(*parameter_list + 8) = new_value[1] | *(uint *)(*parameter_list + 8);\n    *(undefined *)((int)parameter_list + 0x3d) = 1;\n    *(undefined *)(parameter_list + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_parameter_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "calculate_difference_08009530",
                "param_1": "param_1",
                "param_2": "source",
                "param_3": "target",
                "param_4": "param_4",
                "iVar1": "buffer",
                "iVar5": "diff",
                "iVar12": "carry",
                "puVar2": "source_ptr",
                "uVar3": "source_word",
                "uVar4": "word_diff",
                "puVar6": "current_word",
                "puVar7": "target_end",
                "puVar8": "source_word_ptr_next",
                "puVar9": "target_ptr",
                "puVar10": "target_word_ptr_next",
                "puVar11": "source_end",
                "puVar13": "target_end",
                "uVar14": "source_word"
            },
            "code": "void calculate_difference_08009530(uint32_t param_1, uint32_t *source, uint32_t *target, uint32_t param_4)\n{\n  int diff = source[4] - (int)target[4];\n  uint32_t *source_ptr = source + 5;\n  uint32_t *target_ptr = target + 5;\n  uint32_t *source_end = source_ptr + target[4];\n  uint32_t *target_end = target_ptr + target[4];\n  if (diff == 0) {\n    source_end--;\n    target_end--;\n    while (true) {\n      source_end--;\n      target_end--;\n      if (*source_end != *target_end) break;\n      if (source_end <= source_ptr) {\n        int buffer = allocate_or_get_buffer_080090c0(param_1, 0, source_end, target_end, param_4);\n        *(uint32_t *)(buffer + 0x10) = 1;\n        *(uint32_t *)(buffer + 0x14) = 0;\n        return;\n      }\n    }\n    if (*target_end <= *source_end) goto LAB_08009578;\n  }\n  else if (diff > -1) {\n    diff = 0;\n    source_end = target;\n    goto LAB_08009578;\n  }\n  diff = 1;\n  source_end = source_ptr;\n  target_ptr = target;\n  target_end = source_ptr;\n  source_ptr = target;\nLAB_08009578:\n  int buffer = allocate_or_get_buffer_080090c0(param_1, target_ptr[1], source_end, target_ptr, param_4);\n  int carry = 0;\n  uint32_t source_word = target_ptr[4];\n  uint32_t target_word = source_ptr[4];\n  *(int *)(buffer + 0xc) = diff;\n  uint32_t *current_word = (uint32_t *)(buffer + 0x14);\n  uint32_t *source_word_ptr = target_end + source_word;\n  uint32_t *target_word_ptr = source_end + target_word;\n  while (target_end < target_word_ptr) {\n    uint32_t *source_word_ptr_next = target_end + 1;\n    uint32_t *target_word_ptr_next = source_end + 1;\n    uint32_t word_diff = ((*target_end & 0xffff) + carry) - (*source_end & 0xffff);\n    carry = ((*target_end >> 0x10) - (*source_end >> 0x10)) + ((int)word_diff >> 0x10);\n    word_diff = word_diff & 0xffff | carry * 0x10000;\n    *current_word = word_diff;\n    carry = carry >> 0x10;\n    current_word++;\n    target_end = source_word_ptr_next;\n    source_end = target_word_ptr_next;\n  }\n  current_word = current_word - 1;\n  while (word_diff == 0) {\n    current_word = current_word - 1;\n    source_word--;\n    word_diff = *current_word;\n  }\n  *(uint32_t *)(buffer + 0x10) = source_word;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_difference_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    do_nothing_with_pointer_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    do_nothing_with_pointer_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)get_local_value_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = get_local_value_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    do_nothing_with_pointer_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  do_nothing_with_pointer_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_flag_08002bb4",
                "param_1": "flag_ptr",
                "param_2": "upper_limit",
                "param_3": "buffer_offset",
                "iVar1": "result"
            },
            "code": "int check_flag_08002bb4(int *flag_ptr, uint32_t upper_limit, int buffer_offset) {\n    int result;\n    while (true) {\n        if ((*(uint32_t *)(*flag_ptr + 0x14) & 0x80) == 0x80) {\n            return 0;\n        }\n        result = check_flag_08002bb4_08002d3c(flag_ptr);\n        if (result != 0) {\n            break;\n        }\n        if ((upper_limit != 0xffffffff) && ((upper_limit == 0 || (result = get_value_from_pointer_080015a0(), upper_limit < (uint32_t)(result - buffer_offset))))) {\n            flag_ptr[0x10] |= 0x20;\n            flag_ptr[0xc] = 0;\n            *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n            *(undefined *)(flag_ptr + 0xf) = 0;\n            return 3;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_flag_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "flag_ptr",
                "bVar1": "is_flag_set"
            },
            "code": "bool check_flag_08002d3c(int *flag_ptr)\n{\n  bool is_flag_set;\n  is_flag_set = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return is_flag_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "check_flag_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "arg1",
                "uVar2": "converted_result1",
                "uVar3": "converted_result2",
                "result1": "result1",
                "constant1": "constant1",
                "result2": "result2",
                "result3": "result3",
                "result4": "result4",
                "arg3": "arg3",
                "converted_arg3": "converted_arg3",
                "result5": "result5",
                "arg4": "arg4",
                "converted_arg4": "converted_arg4",
                "result6": "result6",
                "result7": "result7",
                "result8": "result8",
                "result9": "result9",
                "arg5": "arg5",
                "converted_arg5": "converted_arg5",
                "result10": "result10",
                "result11": "result11",
                "result12": "result12",
                "constant2": "constant2",
                "converted_constant2": "converted_constant2",
                "converted_result4": "converted_result4",
                "result13": "result13",
                "result14": "result14",
                "result15": "result15",
                "result16": "result16"
            },
            "code": "void calculate_result_08004bd8(int input, undefined4 *output)\n{\n  int arg1 = *(int *)(input + 0x10);\n  int arg2 = *(int *)(input + 0x1c);\n  int result1 = FUNC_08000aa4(arg1, arg2);\n  int constant1 = *(int *)PTR_DAT_08004d60;\n  long long converted_result1 = convert_uint_to_uint64_08000418(constant1);\n  long long converted_result2 = convert_uint_to_uint64_08000418(result1);\n  long long result2 = FUNC_080004c8((int)converted_result2, (int)(converted_result2 >> 0x20), DAT_08004d40, DAT_08004d44);\n  long long result3 = FUNC_0800015c((int)converted_result1, (int)(converted_result1 >> 0x20), (int)result2, (int)(result2 >> 0x20));\n  int result4 = calculate_float_bits_080009fc((int)result3, (int)(result3 >> 0x20));\n  *(int *)PTR_DAT_08004d60 = result4;\n  int arg3 = *(int *)(input + 4);\n  long long converted_arg3 = convert_uint_to_uint64_08000418(arg3);\n  long long result5 = FUNC_0800071c((int)converted_arg3, (int)(converted_arg3 >> 0x20), 0, DAT_08004d64);\n  int arg4 = *(int *)(input + 8);\n  long long converted_arg4 = convert_uint_to_uint64_08000418(arg4);\n  long long result6 = FUNC_0800071c((int)converted_arg4, (int)(converted_arg4 >> 0x20), 0, DAT_08004d64);\n  long long result7 = calculate_result_08004bd8_thunk_08005838((int)result5, (int)(result5 >> 0x20), (int)result6, (int)(result6 >> 0x20));\n  long long result8 = FUNC_080004c8((int)result7, (int)(result7 >> 0x20), 0, DAT_08004d68);\n  long long result9 = FUNC_0800071c((int)result8, (int)(result8 >> 0x20), DAT_08004d48, DAT_08004d4c);\n  long long arg5 = *(int *)(input + 0x24);\n  long long converted_arg5 = convert_uint_to_uint64_08000418(arg5);\n  long long result10 = FUNC_08000158((int)result9, (int)(result9 >> 0x20), (int)converted_arg5, (int)(converted_arg5 >> 0x20));\n  long long result11 = FUNC_0800015c((int)result10, (int)(result10 >> 0x20), 0, DAT_08004d6c);\n  int result12 = calculate_float_bits_080009fc((int)result11, (int)(result11 >> 0x20));\n  if (*PTR_DAT_08004d70 == 0) {\n    long long constant2 = *(int *)PTR_DAT_08004d60;\n    long long converted_constant2 = convert_uint_to_uint64_08000418(constant2);\n    long long result13 = FUNC_080004c8((int)converted_constant2, (int)(converted_constant2 >> 0x20), DAT_08004d50, DAT_08004d54);\n    long long converted_result4 = convert_uint_to_uint64_08000418(result4);\n    long long result14 = FUNC_080004c8((int)converted_result4, (int)(converted_result4 >> 0x20), DAT_08004d58, DAT_08004d5c);\n    long long result15 = FUNC_0800015c((int)result13, (int)(result13 >> 0x20), (int)result14, (int)(result14 >> 0x20));\n    int result16 = calculate_float_bits_080009fc((int)result15, (int)(result15 >> 0x20));\n    *(int *)PTR_DAT_08004d60 = result16;\n  }\n  else {\n    *(int *)PTR_DAT_08004d60 = result4;\n    *PTR_DAT_08004d70 = 0;\n  }\n  *output = *(int *)PTR_DAT_08004d60;\n  return;\n}",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009fc",
                "FUN_0800071c",
                "FUN_08000418",
                "FUN_08000aa4",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_result_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_or_get_buffer_080090c0",
                "param_1": "buffer_address",
                "param_2": "buffer_index",
                "iVar2": "buffer_start_address",
                "puVar1": "buffer_pointer"
            },
            "code": "undefined4* allocate_or_get_buffer_080090c0(int buffer_address, uint buffer_index){\n    undefined4* buffer_pointer;\n    int buffer_start_address = *(int*)(buffer_address + 0x4c);\n    if (buffer_start_address == 0){\n        buffer_start_address = allocate_and_fill_buffer_with_zeroes_08009980(buffer_address, 4, 0x21);\n        *(int*)(buffer_address + 0x4c) = buffer_start_address;\n        if (buffer_start_address == 0){\n            return (undefined4*)0x0;\n        }\n    }\n    buffer_pointer = *(undefined4**)(buffer_start_address + buffer_index * 4);\n    if (buffer_pointer == (undefined4*)0x0){\n        int buffer_size = 1 << (buffer_index & 0xff);\n        buffer_pointer = (undefined4*)allocate_and_fill_buffer_with_zeroes_08009980(buffer_address, 1, (buffer_size + 5) * 4);\n        if (buffer_pointer == (undefined4*)0x0){\n            return (undefined4*)0x0;\n        }\n        buffer_pointer[1] = buffer_index;\n        buffer_pointer[2] = buffer_size;\n    }\n    else{\n        *(undefined4*)(buffer_start_address + buffer_index * 4) = *buffer_pointer;\n    }\n    buffer_pointer[3] = 0;\n    buffer_pointer[4] = 0;\n    return buffer_pointer;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009244",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009444",
                "FUN_080079e8",
                "FUN_08009530",
                "FUN_08009258"
            ],
            "imported": false,
            "current_name": "allocate_or_get_buffer_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "*param_1": "*num",
                "uVar1": "count",
                "uVar2": "number"
            },
            "code": "uint count_trailing_zeros_080091e4(uint *num)\n{\n  uint number = *num;\n  uint count = number & 7;\n  if (count == 0) {\n    if ((number & 0xffff) == 0) {\n      number = number >> 0x10;\n      count = 0x10;\n    }\n    if ((number & 0xff) == 0) {\n      number = number >> 8;\n      count += 8;\n    }\n    if ((number & 0xf) == 0) {\n      number = number >> 4;\n      count += 4;\n    }\n    if ((number & 3) == 0) {\n      number = number >> 2;\n      count += 2;\n    }\n    if (-1 < (int)(number << 0x1f)) {\n      number = number >> 1;\n      if (number == 0) {\n        return 0x20;\n      }\n      count += 1;\n    }\n    *num = number;\n    return count;\n  }\n  if (-1 < (int)(number << 0x1f)) {\n    if ((int)(number << 0x1e) < 0) {\n      *num = number >> 1;\n      return 1;\n    }\n    *num = number >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": false,
            "current_name": "count_trailing_zeros_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "input_value",
                "param_2": "input_exponent",
                "uVar1": "mantissa_bits",
                "uVar2": "exponent_bits",
                "uVar3": "exponent_offset",
                "in_r12": "unused_variable",
                "bVar4": "is_mantissa_zero",
                "bVar5": "is_input_exponent_negative"
            },
            "code": "uint calculate_float_bits_080009fc(uint input_value, uint input_exponent) {\n  uint exponent_bits;\n  uint mantissa_bits;\n  uint exponent_offset;\n  bool is_input_exponent_negative;\n  bool is_mantissa_zero;\n  \n  exponent_bits = input_exponent * 2;\n  is_input_exponent_negative = exponent_bits < 0x70000000;\n  exponent_offset = exponent_bits + 0x90000000;\n  mantissa_bits = exponent_offset;\n  if (!is_input_exponent_negative) {\n    exponent_offset = exponent_bits + 0x8fe00000;\n    mantissa_bits = exponent_offset;\n  }\n  is_mantissa_zero = mantissa_bits == 0;\n  if (!is_input_exponent_negative && exponent_bits + 0x90000000 >= 0x200000) {\n    is_mantissa_zero = exponent_offset == 0x1fc00000;\n  }\n  if (((is_input_exponent_negative || exponent_bits < 0x200000) || 0x1fc00000 < exponent_offset) || is_mantissa_zero) {\n    if ((input_exponent & 0x40000000) != 0) {\n      if (((int)exponent_bits >> 0x15 == -1) && ((input_value | input_exponent << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input_exponent & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(exponent_bits + 0x92e00000) < 0 != SCARRY4(exponent_offset,0x2e00000)) {\n      return input_exponent & 0x80000000;\n    }\n    exponent_bits = 0x18 - (exponent_bits + 0x92e00000 >> 0x15);\n    mantissa_bits = input_value >> (exponent_bits & 0xff);\n    if (input_value << (0x20 - exponent_bits & 0xff) != 0) {\n      mantissa_bits = mantissa_bits | 1;\n    }\n    exponent_offset = input_exponent & 0x1fffff | 0x100000;\n    input_value = mantissa_bits | exponent_offset << (0x20 - exponent_bits & 0xff);\n    exponent_offset = (exponent_offset >> (exponent_bits & 0xff)) << 1;\n  }\n  mantissa_bits = (input_exponent & 0x80000000 | input_value >> 0x1d) + exponent_offset * 4 + (uint)(0x7fffffff < input_value * 8);\n  if (input_value * 8 == 0x80000000) {\n    mantissa_bits = mantissa_bits & 0xfffffffe;\n  }\n  return mantissa_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "calculate_hash_080093a4",
                "param_1": "param1",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "iVar1": "table_offset",
                "iVar2": "hash_table_size",
                "puVar3": "current_hash",
                "puVar4": "next_hash_table",
                "calculate_polynomial_08009120": "calculate_polynomial",
                "allocate_or_get_buffer_080090c0": "allocate_or_get_buffer",
                "PTR_DAT_08009440": "PTR_DAT_08009440",
                "DAT_08009440": "DAT_08009440"
            },
            "code": "undefined4* calculate_hash_080093a4(int param1, undefined4* buffer, uint buffer_size) {\n    int hash_table_size = (int)buffer_size >> 2;\n    undefined4* hash_table = *(undefined4**)(param1 + 0x48);\n    if ((buffer_size & 3) != 0) {\n        buffer = (undefined4*)calculate_polynomial(param1, buffer, *(undefined4*)(PTR_DAT_08009440 + ((buffer_size & 3) - 1) * 4), 0);\n    }\n    if (hash_table_size != 0) {\n        if (hash_table == (undefined4*)0x0) {\n            hash_table = (undefined4*)allocate_or_get_buffer(param1, 1);\n            hash_table[4] = 1;\n            hash_table[5] = 0x271;\n            *(undefined4**)(param1 + 0x48) = hash_table;\n            *hash_table = 0;\n        }\n        while (hash_table_size != 0) {\n            undefined4* current_hash = (undefined4*)*hash_table;\n            if (current_hash == (undefined4*)0x0) {\n                current_hash = (undefined4*)calculate_hash_080093a4(param1, hash_table, hash_table);\n                *hash_table = current_hash;\n                *current_hash = 0;\n            }\n            undefined4* next_buffer = buffer;\n            hash_table_size = hash_table_size >> 1;\n            if (hash_table_size << 0x1f < 0) {\n                goto LAB_080093d2;\n            }\nLAB_080093c4:\n            undefined4* next_hash_table = (undefined4*)*current_hash;\n            if (next_hash_table == (undefined4*)0x0) {\n                next_hash_table = (undefined4*)calculate_hash_080093a4(param1, current_hash, current_hash);\n                *current_hash = next_hash_table;\n                *next_hash_table = 0;\n            }\n            buffer = next_buffer;\n            if (hash_table_size == 0) {\n                return buffer;\n            }\n            next_buffer = (undefined4*)calculate_hash_080093a4(param1, buffer, next_hash_table);\n            if (buffer == (undefined4*)0x0) {\n                break;\n            }\n            int table_offset = *(int*)(param1 + 0x4c);\n            hash_table_size = hash_table_size >> 1;\n            *current_hash = *(undefined4*)(table_offset + current_hash[1] * 4);\n            *(undefined4**)(table_offset + current_hash[1] * 4) = current_hash;\n            current_hash = next_hash_table;\n            goto LAB_080093c4;\n        }\n    }\n    return buffer;\n}",
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "process_data_080098c0",
                "param_1": "data_type",
                "param_2": "data_value_1",
                "param_3": "data_value_2",
                "param_4": "data_value_3",
                "puVar1": "ptr_1",
                "uVar2": "return_value",
                "uVar3": "data_count",
                "uVar4": "data_count",
                "iVar5": "ptr_3",
                "iVar6": "ptr_2",
                "iVar7": "var_1"
            },
            "code": "undefined4 process_data_080098c0(int data_type, undefined4 data_value_1, undefined4 data_value_2, undefined4 data_value_3)\n{\n  undefined *ptr_1 = PTR_PTR_DAT_08009974;\n  do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n  int ptr_2 = *(int *)PTR_PTR_DAT_08009978;\n  int ptr_3 = *(int *)(ptr_2 + 0x148);\n  if (ptr_3 == 0) {\n    ptr_3 = ptr_2 + 0x14c;\n    *(int *)(ptr_2 + 0x148) = ptr_3;\n  }\n  uint data_count = *(uint *)(ptr_3 + 4);\n  if ((int)data_count < 0x20) {\n    data_count++;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      do_nothing_08008af4(*(undefined4 *)ptr_1);\n      return 0xffffffff;\n    }\n    ptr_3 = 400;\n    data_count = 0;\n    _DAT_00000190 = *(undefined4 *)(ptr_2 + 0x148);\n    int var_1 = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(ptr_2 + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (data_type != 0) {\n    int ptr_4 = ptr_3 + data_count * 4;\n    *(undefined4 *)(ptr_4 + 0x88) = data_value_2;\n    uint var_2 = 1 << (data_count & 0xff);\n    *(uint *)(ptr_3 + 0x188) = *(uint *)(ptr_3 + 0x188) | var_2;\n    *(undefined4 *)(ptr_4 + 0x108) = data_value_3;\n    if (data_type == 2) {\n      *(uint *)(ptr_3 + 0x18c) = var_2 | *(uint *)(ptr_3 + 0x18c);\n    }\n  }\n  *(int *)(ptr_3 + 4) = var_1;\n  undefined4 return_value = *(undefined4 *)ptr_1;\n  *(undefined4 *)(ptr_3 + (data_count + 2) * 4) = data_value_1;\n  do_nothing_08008af4(return_value);\n  return 0;\n}",
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": false,
            "current_name": "process_data_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "validate_input_080027f4",
                "param_1": "input_ptr",
                "param_2": "flags",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "iVar1": "result",
                "uVar2": "result",
                "PTR_DAT_08002ad4": "DAT_08002ad4"
            },
            "code": "uint32_t validate_input_080027f4(uint32_t **input_ptr, uint8_t flags, uint16_t param_3, int16_t param_4, uint32_t param_5, int param_6) {\n  uint32_t result;\n  uint32_t *input = *input_ptr;\n  input[0] |= 0x400;\n  input[0] |= 0x100;\n  while ((input[5] & 1) == 0) {\n    if (param_5 == 0xFFFFFFFF || (param_5 != 0 && (get_value_from_pointer_080015a0() - param_6) <= param_5)) {\n      goto LAB_08002a6c;\n    }\n    input_ptr[12] = NULL;\n    input[61] = 0x20;\n    input[62] = 0;\n    input[15] = 0;\n    result = 3;\n    goto LAB_08002a82;\n  }\n  if (validate_input_080027f4_08002ad8(input_ptr, PTR_DAT_08002ad4, param_5, param_6) == 0) {\n    if (check_flag_08002bb4(input_ptr, param_5, param_6, input[6]) == 0) {\n      if (param_4 == 1) {\n        input[4] = (uint32_t)flags;\n      }\n      else {\n        input[4] = (uint32_t)(flags >> 8);\n        if (check_flag_08002bb4(input_ptr, param_5, param_6) != 0) {\n          if (input_ptr[16] == (uint32_t *)4) {\n            input[0] |= 0x200;\n            return 1;\n          }\n          result = 3;\n          goto LAB_08002a82;\n        }\n        input[4] = (uint32_t)flags;\n      }\n      if (check_flag_08002bb4(input_ptr, param_5, param_6) == 0) {\n        input[0] |= 0x100;\n        while ((input[5] & 1) == 0) {\n          if (param_5 == 0xFFFFFFFF || (param_5 != 0 && (get_value_from_pointer_080015a0() - param_6) <= param_5)) {\n            goto LAB_08002a6c;\n          }\n          input_ptr[12] = NULL;\n          input[61] = 0x20;\n          input[62] = 0;\n          input[15] = 0;\n          result = 3;\n          goto LAB_08002a82;\n        }\n        if (validate_input_080027f4_08002ad8(input_ptr, PTR_DAT_08002ad4, param_5, param_6) == 0) {\n          result = 0;\n          goto LAB_08002a82;\n        }\n        if (input_ptr[16] == (uint32_t *)4) {\n          result = 1;\n          goto LAB_08002a82;\n        }\n        result = 3;\n      }\n      else if (input_ptr[16] == (uint32_t *)4) {\n        input[0] |= 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (input_ptr[16] == (uint32_t *)4) {\n      input[0] |= 0x200;\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else if (input_ptr[16] == (uint32_t *)4) {\n    result = 1;\n  }\n  else {\n    result = 3;\n  }\n  LAB_08002a82:\n  return result;\n}\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "validate_input_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "convert_uint_to_ulonglong_080003d4",
                "param_1": "input",
                "uVar1": "low_bits",
                "uVar2": "shift_amount",
                "iVar3": "shift_difference",
                "uVar4": "leading_zeroes_count",
                "in_r12": "high_bits",
                "bVar5": "is_negative_shift_difference",
                "bVar6": "is_zero_shift_difference",
                "bVar7": "is_overflow_shift_amount"
            },
            "code": "ulonglong convert_uint_to_ulonglong_080003d4(uint input)\n{\n  uint leading_zeroes_count;\n  uint shift_amount;\n  uint high_bits;\n  uint low_bits = 0;\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shift_amount = leading_zeroes_count + 21;\n  if (shift_amount < 32) {\n    shift_amount = 12 - leading_zeroes_count;\n    low_bits = input << shift_amount;\n    input = input >> (12 - leading_zeroes_count);\n  }\n  high_bits = input << (32 - shift_amount);\n  if (shift_amount < 32) {\n    high_bits |= 0U >> shift_amount;\n    low_bits |= 0 << shift_amount;\n  }\n  if (shift_amount < 64) {\n    low_bits |= 0 << shift_amount;\n  }\n  if (shift_amount < 1075) {\n    return (ulonglong)(low_bits + (1074 - shift_amount) * 0x100000000U) << 32 | high_bits;\n  }\n  shift_amount = ~(1074 - shift_amount);\n  if (shift_amount > 30) {\n    return (ulonglong)high_bits >> (shift_amount - 31);\n  }\n  int shift_difference = shift_amount - 19;\n  if (shift_difference == 0 || shift_difference < 0 != (shift_amount - 31 < 12)) {\n    shift_amount++;\n    return (ulonglong)high_bits >> shift_amount | (ulonglong)low_bits << (32 - shift_amount);\n  }\n  return (ulonglong)high_bits >> (32 - (12 - shift_difference)) | (ulonglong)low_bits << shift_difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_ulonglong_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_float_bits_from_params_08004d78",
                "param_1": "input_params",
                "param_2": "output_param1",
                "param_3": "output_param2",
                "uVar1": "param1",
                "uVar2": "param2",
                "uVar3": "param3",
                "uVar4": "param1_64",
                "uVar5": "param3_64",
                "FUNC_08000e20": "convert_uint_to_float",
                "convert_uint_to_uint64_08000418": "convert_uint_to_uint64",
                "calculate_result_thunk_08005838": "calculate_result",
                "FUNC_080004c8": "FUNC_080004c8",
                "FUNC_0800071c": "FUNC_0800071c",
                "calculate_float_bits_080009fc": "calculate_float_bits",
                "DAT_08004e68": "DAT_08004e68",
                "DAT_08004e60": "DAT_08004e60",
                "DAT_08004e64": "DAT_08004e64"
            },
            "code": "void calculate_float_bits_from_params_08004d78(uint32_t *input_params, uint32_t *output_param1, uint32_t *output_param2)\n{\n    uint32_t param1 = input_params[0];\n    uint32_t param2 = input_params[1];\n    uint32_t param3 = input_params[2];\n\n    uint64_t param2_64 = convert_uint_to_uint64(param2);\n    uint64_t param3_64 = convert_uint_to_uint64(param3);\n    uint64_t result = calculate_result_thunk_08005838(param2_64, param3_64);\n    result = FUNC_080004c8((int)result,(int)((ulonglong)result >> 0x20),0,DAT_08004e68);\n    result = FUNC_0800071c((int)result,(int)((ulonglong)result >> 0x20),DAT_08004e60,DAT_08004e64);\n    *output_param1 = calculate_float_bits(result);\n\n    uint64_t param1_64 = convert_uint_to_uint64(param1);\n    result = calculate_result_thunk_08005838(param1_64, param3_64);\n    result = FUNC_080004c8((int)result,(int)((ulonglong)result >> 0x20),0,DAT_08004e68);\n    result = FUNC_0800071c((int)result,(int)((ulonglong)result >> 0x20),DAT_08004e60,DAT_08004e64);\n    *output_param2 = calculate_float_bits(result);\n}",
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "FUN_0800071c",
                "FUN_08000418",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_from_params_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "leading_zero_bits_08000c10",
                "param_1": "value",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar1": "leading_zeroes",
                "iVar4": "exponent",
                "uVar5": "high_bits",
                "shifted_value": "low_bits",
                "result": "result"
            },
            "code": "uint leading_zero_bits_08000c10(uint value) {\n  int leading_zeroes;\n  uint sign_bit = value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    value = -value;\n  }\n  if (value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(value);\n  int shift_amount = leading_zeroes - 8;\n  int exponent = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes > 7) {\n    uint high_bits = 0 << (shift_amount & 0xff);\n    uint low_bits = 0U >> (0x20 - shift_amount & 0xff);\n    uint shifted_value = value << (shift_amount & 0xff);\n    uint result = exponent + shifted_value + high_bits + (uint)(0x7fffffff < high_bits);\n    if (high_bits == 0x80000000) {\n      result &= 0xfffffffe;\n    }\n    return result;\n  }\n  uint high_bits = value << (leading_zeroes + 0x18U & 0xff);\n  uint low_bits = (value >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)high_bits >> 0x1f);\n  uint result = exponent + low_bits;\n  if ((high_bits & 0x7fffffff) == 0) {\n    result &= ~(high_bits >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78",
                "FUN_08004ae0"
            ],
            "imported": false,
            "current_name": "leading_zero_bits_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "decode_and_calculate_float_bits_080049cc_0800491c",
                "param_1": "float_array",
                "local_13": "temp_float",
                "local_12": "temp_float_2",
                "local_11": "temp_float_array"
            },
            "code": "void decode_and_calculate_float_bits_080049cc_0800491c(float* float_array) {\n    float_array[0] = 0;\n    float_array[1] = 0;\n    float_array[2] = 0;\n    float_array[3] = 0;\n    float_array[4] = 0;\n    float_array[5] = 0;\n    float_array[6] = 0;\n    float_array[7] = 0;\n    float_array[8] = 0;\n    float_array[9] = 0;\n    float_array[10] = 0;\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x6b,&float_array[11],1);\n    float_array[12] = 0x10;\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1c,&float_array[12],1);\n    float_array[13] = 8;\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1b,&float_array[13],1);\n}",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "decode_and_calculate_float_bits_080049cc_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "process_if_data_not_null_080078a0",
                "DAT_080078ac": "data_not_null",
                "PTR_LAB_08008818_1_080078b0": "data_pointer",
                "process_data_080098c0": "process_data"
            },
            "code": "void process_if_data_not_null_080078a0() {\n  if (DAT_080078ac != 0) {\n    process_data(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "process_if_data_not_null_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "copy_data_and_clear_bss_section_080057e8",
                "iVar1": "index",
                "puVar2": "dst_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "PTR_DAT_08005828": "dst_ptr",
                "DAT_0800581c": "src_ptr",
                "PTR_DAT_08005820": "start_of_bss_section",
                "PTR_DAT_08005824": "end_of_bss_section",
                "PTR_DAT_0800582c": "end_of_bss_plus_4"
            },
            "code": "void copy_data_and_clear_bss_section_080057e8(void)\n{\n  int index = 0;\n  undefined4 *PTR_DAT_08005828 = (undefined4 *)PTR_DAT_08005828;\n  undefined4 *DAT_0800581c = (undefined4 *)DAT_0800581c;\n  while (PTR_DAT_08005820 + index < PTR_DAT_08005824)\n  {\n    *PTR_DAT_08005828++ = *DAT_0800581c++;\n    index += 4;\n  }\n  while (PTR_DAT_08005828 < (undefined4 *)PTR_DAT_0800582c)\n  {\n    *PTR_DAT_08005828++ = 0;\n  }\n  set_flag_and_clear_bits_08005780();\n  execute_functions_08005d20();\n  code *jumptable = (code *)0x800581a;\n  initialize_and_run_program_08005224();\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_08005d20",
                "FUN_08005224",
                "FUN_08005780"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_bss_section_080057e8"
        }
    },
    "used_tokens": 147638,
    "layers": [
        [
            "FUN_080036a8",
            "FUN_0800901c",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_080078c0",
            "FUN_080035a4",
            "FUN_08004f60",
            "FUN_08003518",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000418",
            "FUN_080055f4",
            "FUN_0800088a",
            "FUN_080016d0",
            "FUN_080041a8",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08005838",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003540",
            "FUN_08004e6c",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_08005728",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08002d3c",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080098c0",
            "FUN_080003d4",
            "FUN_08000c10"
        ],
        [
            "FUN_08004f2c",
            "FUN_080046ec",
            "FUN_08002c2e",
            "FUN_08000978",
            "FUN_08004ae0",
            "FUN_08004436",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08003908",
            "FUN_080009c0",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08009744",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_08004e74",
            "FUN_08001ab0",
            "FUN_08001762",
            "FUN_08002bb4",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_08004d78",
            "FUN_080078a0"
        ],
        [
            "FUN_08005348",
            "FUN_08005500",
            "FUN_080049cc",
            "FUN_0800884c",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_08009444",
            "FUN_08000fc8",
            "FUN_0800438a",
            "FUN_080009d4",
            "FUN_080053b0",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08000ff4",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_0800151c",
            "FUN_08009258",
            "FUN_08009530",
            "FUN_080027f4"
        ],
        [
            "FUN_08005598",
            "FUN_08001030",
            "FUN_080014f0",
            "FUN_08001ccc",
            "FUN_08003260",
            "FUN_080093a4",
            "FUN_0800491c"
        ],
        [
            "FUN_08004f78",
            "FUN_080052a0",
            "FUN_08004ea4"
        ],
        [
            "FUN_08005224",
            "FUN_080017b4",
            "FUN_080036f8"
        ],
        [
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080057e8"
        ]
    ],
    "locked_functions": []
}