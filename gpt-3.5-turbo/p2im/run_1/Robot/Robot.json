{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_64_bit_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_64_bit_values_08000134(undefined4 first_32_bit_value,undefined4 second_32_bit_value)\n\n{\n  return CONCAT44(second_32_bit_value,first_32_bit_value);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_64_bit_values_08000134",
                "param_1": "first_32_bit_value",
                "param_2": "second_32_bit_value"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_bitwise_operation_08000158",
            "code": "\nulonglong calculateBitwiseOperation_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp6 = input4 ^ 0x80000000;\n  temp9 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp6) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp9 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp8 = (int)temp9 >> 0x15;\n  if (!flag2) {\n    flag2 = temp8 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp1 == -1;\n  }\n  if (flag2) {\n    if (temp8 == -1 || temp1 == -1) {\n      temp9 = temp6;\n      temp11 = input3;\n      if (temp8 == -1) {\n        temp9 = input2;\n        temp11 = input1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        input3 = temp11;\n        temp6 = temp9;\n      }\n      flag2 = (temp11 | temp9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp6 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp9 == temp6;\n      }\n      if (!flag2) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp11);\n    }\n    if (((input2 ^ temp6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp9 | input1) == 0) {\n        input1 = input3;\n        input2 = temp6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp6) {\n      return 0;\n    }\n    if (temp9 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp9 = temp9 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp11 = input4 - temp9;\n  flag2 = temp11 != 0;\n  if (input4 < temp9) {\n    temp11 = -temp11;\n  }\n  temp10 = input1;\n  temp7 = input2;\n  if (flag2 && temp9 <= input4) {\n    temp9 = temp9 + temp11;\n    temp10 = input3;\n    temp7 = temp6;\n    input3 = input1;\n    temp6 = input2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp7,temp10);\n  }\n  temp4 = temp7 & 0xfffff | 0x100000;\n  if ((temp7 & 0x80000000) != 0) {\n    flag2 = temp10 != 0;\n    temp10 = -temp10;\n    temp4 = -temp4 - (uint)flag2;\n  }\n  temp7 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp7 = -temp7 - (uint)flag2;\n  }\n  if (temp9 == temp11) {\n    temp7 = temp7 ^ 0x100000;\n    if (temp9 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp9 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp6 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = input3 << (temp6 & 0xff);\n    input3 = input3 >> (temp11 & 0xff);\n    temp3 = temp10 + input3;\n    temp5 = temp7 << (temp6 & 0xff);\n    temp6 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(temp10,input3) + ((int)temp7 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    temp12 = temp7 << (-temp11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp7 = (int)temp7 >> (temp11 - 0x20 & 0xff);\n    temp6 = temp10 + temp7;\n    temp4 = temp4 + ((int)temp7 >> 0x1f) + (uint)CARRY4(temp10,temp7);\n  }\n  input2 = temp4 & 0x80000000;\n  temp11 = temp4;\n  if ((int)temp4 < 0) {\n    flag2 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp6;\n    temp6 = -(uint)!flag2 - temp6;\n    temp11 = -(uint)(flag2 <= temp11) - temp4;\n  }\n  if (0xfffff < temp11) {\n    temp10 = temp9 - 1;\n    if (0x1fffff < temp11) {\n      temp10 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      temp2 = (byte)temp6;\n      temp6 = (uint)(temp10 != 0) << 0x1f | temp6 >> 1;\n      temp12 = (uint)(temp2 & 1) << 0x1f | temp12 >> 1;\n      temp10 = temp9;\n      if (0xffbfffff < temp9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      flag2 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(temp11 + temp10 * 0x100000 + (uint)CARRY4(temp6,(uint)flag2) | input2,\n                    temp6 + flag2);\n  }\n  flag1 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  temp10 = temp6 * 2;\n  flag2 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)flag1;\n  temp11 = temp11 * 2 + (uint)(flag2 || CARRY4(temp10,(uint)flag1));\n  temp10 = temp9 - 2;\n  if ((temp11 & 0x100000) != 0) goto LAB_08000268;\n  temp7 = temp6;\n  temp9 = temp11;\n  if (temp11 == 0) {\n    temp7 = 0;\n    temp9 = temp6;\n  }\n  temp8 = LZCOUNT(temp9);\n  if (temp11 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  temp11 = temp8 - 0xb;\n  flag3 = SBORROW4(temp11,0x20);\n  temp6 = temp8 - 0x2b;\n  flag2 = (int)temp6 < 0;\n  flag1 = temp6 == 0;\n  if ((int)temp11 < 0x20) {\n    flag3 = SCARRY4(temp6,0xc);\n    temp8 = temp8 + -0x1f;\n    flag2 = temp8 < 0;\n    flag1 = temp8 == 0;\n    temp6 = temp11;\n    if (!flag1 && flag2 == flag3) {\n      temp7 = temp9 << (temp11 & 0xff);\n      temp9 = temp9 >> (0xcU - temp8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp12 = 0x20 - temp6;\n  }\n  temp9 = temp9 << (temp6 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp9 = temp9 | temp7 >> (temp12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp7 = temp7 << (temp6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp11 <= (int)temp10) {\n    return CONCAT44(temp9 + (temp10 - temp11) * 0x100000 | input2,temp7);\n  }\n  temp6 = ~(temp10 - temp11);\n  if ((int)temp6 < 0x1f) {\n    temp8 = temp6 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp6 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp7 >> (0x20 - (0xcU - temp8) & 0xff) | temp9 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp6 = temp6 + 1;\n    return CONCAT44(input2 | temp9 >> (temp6 & 0xff),\n                    temp7 >> (temp6 & 0xff) | temp9 << (0x20 - temp6 & 0xff));\n  }\n  return CONCAT44(temp4,temp9 >> (temp6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_bitwise_operation_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_sum_0800015c",
            "code": "\nulonglong calculate_sum_0800015c(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int num1_shifted_right;\n  byte carry;\n  uint sum_partial1;\n  uint sum_partial2;\n  uint temp1;\n  int num2_shifted_right;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = num2 << 1;\n  temp4 = num4 << 1;\n  condition1 = ((num2 ^ num4) & 0x7fffffff) == 0;\n  condition2 = condition1 && num1 == num3;\n  if (!condition1 || num1 != num3) {\n    condition2 = (temp2 | num1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (temp4 | num3) == 0;\n  }\n  num2_shifted_right = (int)temp2 >> 0x15;\n  if (!condition2) {\n    condition2 = num2_shifted_right == -1;\n  }\n  num1_shifted_right = (int)temp4 >> 0x15;\n  if (!condition2) {\n    condition2 = num1_shifted_right == -1;\n  }\n  if (condition2) {\n    if (num2_shifted_right == -1 || num1_shifted_right == -1) {\n      temp4 = num4;\n      temp2 = num3;\n      if (num2_shifted_right == -1) {\n        temp4 = num2;\n        temp2 = num1;\n      }\n      if (num2_shifted_right != -1 || num1_shifted_right != -1) {\n        num3 = temp2;\n        num4 = temp4;\n      }\n      condition2 = (temp2 | temp4 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (num3 | num4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp4 == num4;\n      }\n      if (!condition2) {\n        temp4 = temp4 | 0x80000;\n      }\n      return CONCAT44(temp4,temp2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((temp2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (temp2 >> 0x15 == 0) {\n      condition2 = (num1 & 0x80000000) != 0;\n      temp4 = num2 * 2 + (uint)condition2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,num1 << 1);\n    }\n    if (temp2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  temp2 = temp2 >> 0x15;\n  temp4 = temp4 >> 0x15;\n  temp5 = temp4 - temp2;\n  condition2 = temp5 != 0;\n  if (temp4 < temp2) {\n    temp5 = -temp5;\n  }\n  temp3 = num1;\n  temp1 = num2;\n  if (condition2 && temp2 <= temp4) {\n    temp2 = temp2 + temp5;\n    temp3 = num3;\n    temp1 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < temp5) {\n    return CONCAT44(temp1,temp3);\n  }\n  temp4 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    condition2 = temp3 != 0;\n    temp3 = -temp3;\n    temp4 = -temp4 - (uint)condition2;\n  }\n  temp1 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    condition2 = num3 != 0;\n    num3 = -num3;\n    temp1 = -temp1 - (uint)condition2;\n  }\n  if (temp2 == temp5) {\n    temp1 = temp1 ^ 0x100000;\n    if (temp2 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp2 = 1;\n    }\n    else {\n      temp5 = temp5 - 1;\n    }\n  }\n  temp7 = -temp5 + 0x20;\n  if ((int)temp5 < 0x21) {\n    temp6 = num3 << (temp7 & 0xff);\n    num3 = num3 >> (temp5 & 0xff);\n    sum_partial1 = temp3 + num3;\n    sum_partial2 = temp1 << (temp7 & 0xff);\n    temp7 = sum_partial1 + sum_partial2;\n    temp4 = temp4 + CARRY4(temp3,num3) + ((int)temp1 >> (temp5 & 0xff)) +\n            (uint)CARRY4(sum_partial1,sum_partial2);\n  }\n  else {\n    temp6 = temp1 << (-temp5 + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    temp1 = (int)temp1 >> (temp5 - 0x20 & 0xff);\n    temp7 = temp3 + temp1;\n    temp4 = temp4 + ((int)temp1 >> 0x1f) + (uint)CARRY4(temp3,temp1);\n  }\n  num2 = temp4 & 0x80000000;\n  temp5 = temp4;\n  if ((int)temp4 < 0) {\n    condition2 = temp6 == 0;\n    temp6 = -temp6;\n    temp5 = -temp7;\n    temp7 = -(uint)!condition2 - temp7;\n    temp5 = -(uint)(condition2 <= temp5) - temp4;\n  }\n  if (0xfffff < temp5) {\n    temp3 = temp2 - 1;\n    if (0x1fffff < temp5) {\n      temp4 = temp5 & 1;\n      temp5 = temp5 >> 1;\n      carry = (byte)temp7;\n      temp7 = (uint)(temp4 != 0) << 0x1f | temp7 >> 1;\n      temp6 = (uint)(carry & 1) << 0x1f | temp6 >> 1;\n      temp3 = temp2;\n      if (0xffbfffff < temp2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition2 = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      condition2 = (temp7 & 1) != 0;\n    }\n    return CONCAT44(temp5 + temp3 * 0x100000 + (uint)CARRY4(temp7,(uint)condition2) | num2,\n                    temp7 + condition2);\n  }\n  condition1 = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  temp3 = temp7 * 2;\n  condition2 = CARRY4(temp7,temp7);\n  temp7 = temp7 * 2 + (uint)condition1;\n  temp5 = temp5 * 2 + (uint)(condition2 || CARRY4(temp3,(uint)condition1));\n  temp3 = temp2 - 2;\n  if ((temp5 & 0x100000) != 0) goto LAB_08000268;\n  temp1 = temp7;\n  temp2 = temp5;\n  if (temp5 == 0) {\n    temp1 = 0;\n    temp2 = temp7;\n  }\n  num2_shifted_right = LZCOUNT(temp2);\n  if (temp5 == 0) {\n    num2_shifted_right = num2_shifted_right + 0x20;\n  }\n  temp7 = num2_shifted_right - 0xb;\n  condition3 = SBORROW4(temp7,0x20);\n  temp5 = num2_shifted_right - 0x2b;\n  condition2 = (int)temp5 < 0;\n  condition1 = temp5 == 0;\n  if ((int)temp7 < 0x20) {\n    condition3 = SCARRY4(temp5,0xc);\n    num2_shifted_right = num2_shifted_right + -0x1f;\n    condition2 = num2_shifted_right < 0;\n    condition1 = num2_shifted_right == 0;\n    temp5 = temp7;\n    if (!condition1 && condition2 == condition3) {\n      temp1 = temp2 << (temp7 & 0xff);\n      temp2 = temp2 >> (0xcU - num2_shifted_right & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp6 = 0x20 - temp5;\n  }\n  temp2 = temp2 << (temp5 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp2 = temp2 | temp1 >> (temp6 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp1 = temp1 << (temp5 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp7 <= (int)temp3) {\n    return CONCAT44(temp2 + (temp3 - temp7) * 0x100000 | num2,temp1);\n  }\n  temp5 = ~(temp3 - temp7);\n  if ((int)temp5 < 0x1f) {\n    num2_shifted_right = temp5 - 0x13;\n    if (num2_shifted_right != 0 && num2_shifted_right < 0 == SCARRY4(temp5 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp1 >> (0x20 - (0xcU - num2_shifted_right) & 0xff) | temp2 << (0xcU - num2_shifted_right & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp5 = temp5 + 1;\n    return CONCAT44(num2 | temp2 >> (temp5 & 0xff),\n                    temp1 >> (temp5 & 0xff) | temp2 << (0x20 - temp5 & 0xff));\n  }\n  return CONCAT44(temp4,temp2 >> (temp5 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_sum_0800015c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "num1_shifted_right",
                "bVar2": "carry",
                "uVar3": "sum_partial1",
                "uVar4": "sum_partial2",
                "uVar5": "temp1",
                "iVar6": "num2_shifted_right",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "uVar10": "temp5",
                "uVar11": "temp6",
                "uVar12": "temp7",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "resize_value_080003d4",
            "code": "\nulonglong resizeValue_080003d4(uint inputValue)\n\n{\n  uint newValue;\n  uint shiftValue;\n  int countValue;\n  uint combinedValue;\n  uint reservedBits;\n  bool isLessThanZero;\n  bool isEqual;\n  bool isBorrow;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  newValue = 0;\n  countValue = LZCOUNT(inputValue);\n  combinedValue = countValue + 0x15;\n  isBorrow = SBORROW4(combinedValue,0x20);\n  shiftValue = countValue - 0xb;\n  isLessThanZero = (int)shiftValue < 0;\n  isEqual = shiftValue == 0;\n  if (combinedValue < 0x20) {\n    isBorrow = SCARRY4(shiftValue,0xc);\n    isLessThanZero = false;\n    isEqual = countValue + 1 == 0;\n    shiftValue = combinedValue;\n    if (!isEqual && isBorrow == false) {\n      newValue = inputValue << combinedValue;\n      inputValue = inputValue >> (0xcU - (countValue + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isEqual || isLessThanZero != isBorrow) {\n    reservedBits = 0x20 - shiftValue;\n  }\n  inputValue = inputValue << (shiftValue & 0xff);\n  if (isEqual || isLessThanZero != isBorrow) {\n    inputValue = inputValue | 0U >> (reservedBits & 0xff);\n  }\n  if (isEqual || isLessThanZero != isBorrow) {\n    newValue = 0 << (shiftValue & 0xff);\n  }\nLAB_080002e0:\n  if (combinedValue < 0x433) {\n    return CONCAT44(inputValue + (0x432 - combinedValue) * 0x100000,newValue);\n  }\n  shiftValue = ~(0x432 - combinedValue);\n  if (0x1e < (int)shiftValue) {\n    return (ulonglong)(inputValue >> (shiftValue - 0x1f & 0xff));\n  }\n  countValue = shiftValue - 0x13;\n  if (countValue == 0 || countValue < 0 != SCARRY4(shiftValue - 0x1f,0xc)) {\n    shiftValue = shiftValue + 1;\n    return CONCAT44(inputValue >> (shiftValue & 0xff),\n                    newValue >> (shiftValue & 0xff) | inputValue << (0x20 - shiftValue & 0xff));\n  }\n  return (ulonglong)(newValue >> (0x20 - (0xcU - countValue) & 0xff) | inputValue << (0xcU - countValue & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "resize_value_080003d4",
                "param_1": "inputValue",
                "uVar1": "newValue",
                "uVar2": "shiftValue",
                "iVar3": "countValue",
                "uVar4": "combinedValue",
                "in_r12": "reservedBits",
                "bVar5": "isLessThanZero",
                "bVar6": "isEqual",
                "bVar7": "isBorrow"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "calculate_result_080003f4",
            "code": "\nulonglong calculateResult_080003f4(uint input)\n\n{\n  uint result;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint adjustedShiftValue;\n  uint signBit;\n  uint temp;\n  bool isNegative;\n  bool isZero;\n  bool carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  result = 0;\n  leadingZeros = LZCOUNT(absInput);\n  adjustedShiftValue = leadingZeros + 0x15;\n  carry = subtractBorrow(adjustedShiftValue,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (adjustedShiftValue < 0x20) {\n    carry = subtractCarry(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = adjustedShiftValue;\n    if (!isZero && carry == false) {\n      result = absInput << adjustedShiftValue;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isNegative != carry) {\n    temp = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != carry) {\n    absInput = absInput | 0U >> (temp & 0xff);\n  }\n  if (isZero || isNegative != carry) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if (adjustedShiftValue < 0x433) {\n    return CONCAT44(absInput + (0x432 - adjustedShiftValue) * 0x100000 | signBit,result);\n  }\n  shiftAmount = ~(0x432 - adjustedShiftValue);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != subtractCarry(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,result >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "calculate_result_080003f4",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "adjustedShiftValue",
                "uVar6": "signBit",
                "in_r12": "temp",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "carry",
                "SCARRY4": "subtractCarry",
                "SBORROW4": "subtractBorrow"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "decode_value_08000418",
            "code": "\nulonglong decodeValue_08000418(uint inputValue,undefined4 unusedParam1,undefined4 unusedParam2,uint unusedParam3)\n\n{\n  uint highBit;\n  uint shiftedValue;\n  uint result1;\n  uint shiftCount1;\n  uint shiftedInput;\n  int shiftCount2;\n  uint shiftCount3;\n  uint in_r12;\n  bool bCondition1;\n  bool bCondition2;\n  bool bCondition3;\n  \n  shiftedInput = inputValue << 1;\n  bCondition2 = shiftedInput == 0;\n  highBit = (uint)((inputValue & 0x80000000) != 0) << 0x1f;\n  shiftCount1 = (uint)((int)shiftedInput >> 3) >> 1;\n  result1 = highBit | shiftCount1;\n  inputValue = inputValue << 0x1d;\n  if (!bCondition2) {\n    unusedParam3 = shiftedInput & 0xff000000;\n    bCondition2 = unusedParam3 == 0;\n  }\n  if (!bCondition2) {\n    bCondition2 = unusedParam3 == 0xff000000;\n  }\n  if (!bCondition2) {\n    return CONCAT44(result1,inputValue) ^ 0x3800000000000000;\n  }\n  if ((shiftedInput & 0xffffff) == 0) {\n    return CONCAT44(result1,inputValue);\n  }\n  if (unusedParam3 == 0xff000000) {\n    return CONCAT44(result1,inputValue) | 0x8000000000000;\n  }\n  shiftedValue = inputValue;\n  shiftedInput = shiftCount1;\n  if (shiftCount1 == 0) {\n    shiftedValue = 0;\n    shiftedInput = inputValue;\n  }\n  shiftCount2 = LZCOUNT(shiftedInput);\n  if (shiftCount1 == 0) {\n    shiftCount2 = shiftCount2 + 0x20;\n  }\n  shiftCount3 = shiftCount2 - 0xb;\n  bCondition3 = SBORROW4(shiftCount3,0x20);\n  shiftCount1 = shiftCount2 - 0x2b;\n  bCondition2 = (int)shiftCount1 < 0;\n  bCondition1 = shiftCount1 == 0;\n  if ((int)shiftCount3 < 0x20) {\n    bCondition3 = SCARRY4(shiftCount1,0xc);\n    shiftCount2 = shiftCount2 + -0x1f;\n    bCondition2 = shiftCount2 < 0;\n    bCondition1 = shiftCount2 == 0;\n    shiftCount1 = shiftCount3;\n    if (!bCondition1 && bCondition2 == bCondition3) {\n      shiftedValue = shiftedInput << (shiftCount3 & 0xff);\n      shiftedInput = shiftedInput >> (0xcU - shiftCount2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bCondition1 || bCondition2 != bCondition3) {\n    in_r12 = 0x20 - shiftCount1;\n  }\n  shiftedInput = shiftedInput << (shiftCount1 & 0xff);\n  if (bCondition1 || bCondition2 != bCondition3) {\n    shiftedInput = shiftedInput | shiftedValue >> (in_r12 & 0xff);\n  }\n  if (bCondition1 || bCondition2 != bCondition3) {\n    shiftedValue = shiftedValue << (shiftCount1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shiftCount3 < 0x381) {\n    return CONCAT44(shiftedInput + (0x380 - shiftCount3) * 0x100000 | highBit,shiftedValue);\n  }\n  shiftCount1 = ~(0x380 - shiftCount3);\n  if (0x1e < (int)shiftCount1) {\n    return CONCAT44(result1,shiftedInput >> (shiftCount1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  shiftCount2 = shiftCount1 - 0x13;\n  if (shiftCount2 == 0 || shiftCount2 < 0 != SCARRY4(shiftCount1 - 0x1f,0xc)) {\n    shiftCount1 = shiftCount1 + 1;\n    return CONCAT44(highBit | shiftedInput >> (shiftCount1 & 0xff),\n                    shiftedValue >> (shiftCount1 & 0xff) | shiftedInput << (0x20 - shiftCount1 & 0xff));\n  }\n  return CONCAT44(result1,shiftedValue >> (0x20 - (0xcU - shiftCount2) & 0xff) | shiftedInput << (0xcU - shiftCount2 & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "decode_value_08000418",
                "param_1": "inputValue",
                "param_2": "unusedParam1",
                "param_3": "unusedParam2",
                "param_4": "unusedParam3",
                "uVar1": "highBit",
                "uVar2": "shiftedValue",
                "uVar3": "result1",
                "uVar4": "shiftCount1",
                "uVar5": "shiftedInput",
                "iVar6": "shiftCount2",
                "uVar7": "shiftCount3",
                "bVar8": "bCondition1",
                "bVar9": "bCondition2",
                "bVar10": "bCondition3"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_shifted_multiply_080004c8",
            "code": "\nulonglong calculate_shifted_multiply_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong product1;\n  longlong product2;\n  uint result1;\n  uint result2;\n  int addedValues;\n  uint difference;\n  uint input4_shifted;\n  uint uVar7;\n  uint uVar8;\n  bool isConditionMet;\n  bool isCondition2Met;\n  bool isCondition3Met;\n  ulonglong concatenatedValues;\n  \n  concatenatedValues = CONCAT44(input2,input1);\n  uVar7 = 0x7ff;\n  result2 = input2 >> 0x14 & 0x7ff;\n  isConditionMet = result2 == 0;\n  if (!isConditionMet) {\n    input4_shifted = input4 >> 0x14 & 0x7ff;\n    isConditionMet = input4_shifted == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = result2 == 0x7ff;\n  }\n  if (!isConditionMet) {\n    isConditionMet = input4_shifted == 0x7ff;\n  }\n  if (isConditionMet) {\n    concatenatedValues = calculate_xor_shift_080006a4();\n  }\n  result1 = (uint)(concatenatedValues >> 0x20);\n  addedValues = result2 + input4_shifted;\n  result2 = result1 ^ input4;\n  result1 = result1 & ~(uVar7 << 0x15);\n  input4 = input4 & ~(uVar7 << 0x15);\n  isConditionMet = ((uint)concatenatedValues | result1 << 0xc) == 0;\n  if (!isConditionMet) {\n    isConditionMet = (input3 | input4 << 0xc) == 0;\n  }\n  result1 = result1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (isConditionMet) {\n    input3 = (uint)concatenatedValues | input3;\n    input4 = (result2 & 0x80000000 | result1) ^ input4;\n    result2 = uVar7 >> 1;\n    isCondition3Met = SBORROW4(addedValues,result2);\n    difference = addedValues - result2;\n    isConditionMet = difference == 0;\n    result1 = difference;\n    if (!isConditionMet && (int)result2 <= addedValues) {\n      isCondition3Met = SBORROW4(uVar7,difference);\n      result1 = uVar7 - difference;\n      isConditionMet = uVar7 == difference;\n    }\n    if (!isConditionMet && (int)result1 < 0 == isCondition3Met) {\n      input4 = input4 | difference * 0x100000;\n    }\n    if (!isConditionMet && (int)result1 < 0 == isCondition3Met) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    uVar7 = 0;\n    isCondition3Met = SBORROW4(difference,1);\n    difference = difference - 1;\n    isConditionMet = difference == 0;\n    result2 = difference;\n  }\n  else {\n    product1 = (concatenatedValues & 0xffffffff) * (ulonglong)input3;\n    concatenatedValues = (concatenatedValues & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)result1 * (ulonglong)input3 + (product1 >> 0x20);\n    uVar8 = (uint)concatenatedValues;\n    product2 = (ulonglong)result1 * (ulonglong)input4 + (concatenatedValues >> 0x20);\n    uVar7 = (uint)product2;\n    result1 = (uint)((ulonglong)product2 >> 0x20);\n    if ((int)product1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    difference = (addedValues + -0x3ff) - (uint)(result1 < 0x200);\n    if (result1 < 0x200) {\n      isConditionMet = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      product2 = CONCAT44(result1 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)isConditionMet)),\n                       uVar7 * 2 + (uint)isConditionMet);\n    }\n    input4 = result2 & 0x80000000 | (int)((ulonglong)product2 >> 0x20) << 0xb | (uint)product2 >> 0x15;\n    input3 = (uint)product2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    isCondition2Met = 0xfc < difference;\n    isCondition3Met = SBORROW4(difference,0xfd);\n    result1 = difference - 0xfd;\n    isConditionMet = result1 == 0;\n    result2 = result1;\n    if (isCondition2Met && !isConditionMet) {\n      isCondition2Met = 0x6ff < result1;\n      isCondition3Met = SBORROW4(result1,0x700);\n      result2 = difference - 0x7fd;\n      isConditionMet = result1 == 0x700;\n    }\n    if (!isCondition2Met || isConditionMet) {\n      isConditionMet = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        isConditionMet = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + difference * 0x100000 + (uint)CARRY4(input3,(uint)isConditionMet),input3 + isConditionMet\n                     );\n    }\n  }\n  if (!isConditionMet && (int)result2 < 0 == isCondition3Met) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isCondition2Met = SCARRY4(difference,0x36);\n  isConditionMet = (int)(difference + 0x36) < 0;\n  isCondition3Met = difference == 0xffffffca;\n  if (isCondition3Met || isConditionMet != isCondition2Met) {\n    input3 = 0;\n  }\n  if (isCondition3Met || isConditionMet != isCondition2Met) {\n    input4 = input4 & 0x80000000;\n  }\n  if (isCondition3Met || isConditionMet != isCondition2Met) {\n    return CONCAT44(input4,input3);\n  }\n  result2 = -difference;\n  result1 = result2 - 0x20;\n  if (0x1f < (int)result2) {\n    difference = input3 >> (result1 & 0xff) | input4 << (0x20 - result1 & 0xff);\n    result2 = (input4 >> (result1 & 0xff) & ~((input4 & 0x80000000) >> (result1 & 0xff))) -\n            ((int)difference >> 0x1f);\n    if ((uVar7 | input3 << (0x20 - result1 & 0xff) | difference << 1) == 0) {\n      result2 = result2 & ~(difference >> 0x1f);\n    }\n    return CONCAT44(input4,result2) & 0x80000000ffffffff;\n  }\n  addedValues = result2 - 0x14;\n  if (addedValues == 0 || addedValues < 0 != SCARRY4(result1,0xc)) {\n    uVar8 = input3 << (difference + 0x20 & 0xff);\n    result1 = input3 >> (result2 & 0xff) | input4 << (difference + 0x20 & 0xff);\n    difference = result1 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      difference = difference & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (result2 & 0xff)) +\n                    (uint)CARRY4(result1,-((int)uVar8 >> 0x1f)),difference);\n  }\n  result2 = 0xc - addedValues;\n  difference = input3 << (result2 & 0xff);\n  result2 = input3 >> (0x20 - result2 & 0xff) | input4 << (result2 & 0xff);\n  result1 = result2 + -((int)difference >> 0x1f);\n  if ((uVar7 | difference << 1) == 0) {\n    result1 = result1 & ~(difference >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(result2,-((int)difference >> 0x1f)),result1);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_shifted_multiply_080004c8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "product1",
                "lVar2": "product2",
                "uVar3": "result1",
                "uVar4": "result2",
                "iVar5": "addedValues",
                "uVar6": "difference",
                "unaff_r5": "input4_shifted",
                "bVar9": "isConditionMet",
                "bVar10": "isCondition2Met",
                "bVar11": "isCondition3Met",
                "uVar12": "concatenatedValues"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_xor_shift_080006a4",
            "code": "\nulonglong calculate_xor_shift_080006a4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint shifted_input_1;\n  uint input_2_copy;\n  uint shifted_input_2;\n  uint shifted_input_4;\n  uint input_4_copy;\n  bool is_zero;\n  \n  shifted_input_2 = input_4_copy & input_4 >> 0x14;\n  if (input_2_copy != input_4_copy && shifted_input_2 != input_4_copy) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (input_2_copy == 0) {\n      shifted_input_4 = input_2 & 0x80000000;\n      do {\n        shifted_input_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(shifted_input_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | shifted_input_4;\n      if (shifted_input_2 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      shifted_input_2 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(shifted_input_2 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  shifted_input_4 = input_2;\n  if (((!is_zero) && ((input_2_copy != input_4_copy || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((shifted_input_2 != input_4_copy || (input_1 = input_3, shifted_input_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(shifted_input_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_xor_shift_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "shifted_input_1",
                "unaff_r4": "input_2_copy",
                "uVar2": "shifted_input_2",
                "uVar3": "shifted_input_4",
                "in_r12": "input_4_copy",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_result_0800071c",
            "code": "\nulonglong calculate_result_0800071c(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint unaff_r5;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input_2,input_1);\n  temp13 = 0x7ff;\n  temp7 = input_2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    unaff_r5 = input_4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_result_0800071c_0800088a();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp11 = (uint)result;\n  temp8 = temp7 - unaff_r5;\n  if ((input_3 | input_4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input_4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp13 >> 1);\n    temp9 = temp8 + (temp13 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp13,temp9);\n      flag1 = (int)(temp13 - temp9) < 0;\n      flag2 = temp13 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp11);\n    }\n    temp7 = temp7 | 0x100000;\n    temp13 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input_4 << 0xc) >> 4 | 0x10000000 | input_3 >> 0x18;\n    temp13 = input_3 << 8;\n    temp10 = (temp9 << 0xc) >> 4 | 0x10000000 | temp11 >> 0x18;\n    temp11 = temp11 * 0x100;\n    temp7 = (temp9 ^ input_4) & 0x80000000;\n    flag1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      flag1 = temp13 <= temp11;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp13 = (uint)((input_3 >> 0x18 & 1) != 0) << 0x1f | temp13 >> 1;\n    }\n    temp12 = temp11 - temp13;\n    temp10 = (temp10 - temp3) - (uint)(temp11 < temp13);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp13 >> 1;\n    temp11 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp12;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)flag1) {\n        temp12 = temp12 - temp1;\n        temp11 = temp11 | temp3;\n        temp10 = (temp10 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp10 - temp5 < (uint)flag2;\n      temp13 = temp10;\n      if (temp5 < temp10 || flag1) {\n        temp12 = temp12 - temp1;\n        temp13 = (temp10 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp10 || flag1) {\n        temp11 = temp11 | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp12;\n      flag1 = temp13 - temp10 < (uint)flag2;\n      temp5 = temp13;\n      if (temp10 < temp13 || flag1) {\n        temp12 = temp12 - temp2;\n        temp5 = (temp13 - temp10) - (uint)!flag2;\n      }\n      if (temp10 < temp13 || flag1) {\n        temp11 = temp11 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp10 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp11 = temp11 | temp3 >> 3;\n      }\n      temp13 = temp10 | temp12;\n      if (temp13 == 0) break;\n      temp10 = temp10 << 4 | temp12 >> 0x1c;\n      temp12 = temp12 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp11;\n        temp11 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp11;\n      temp11 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        flag1 = temp1 <= temp12;\n      }\n      if (temp10 == temp6 && temp12 == temp1) {\n        flag1 = (temp11 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp11,(uint)flag1),temp11 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp11 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp11);\n  }\n  temp3 = -temp9;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp11 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    temp9 = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp13 | temp11 << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp10,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp11 << (temp9 & 0xff);\n    temp11 = temp11 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp11 + -((int)temp3 >> 0x1f);\n    if ((temp13 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp11,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp10 = temp11 << (temp9 + 0x20 & 0xff);\n  temp11 = temp11 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp11 + -((int)temp10 >> 0x1f);\n  if ((temp13 | temp10 << 1) == 0) {\n    temp9 = temp9 & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp11,-((int)temp10 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_result_0800071c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar13": "temp13",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_result_0800088a",
            "code": "\nulonglong calculateResult_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint unaffected_r4;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  bool bitFlag;\n  \n  bit2 = bit4 & input4 >> 0x14;\n  bit3 = input2;\n  if (unaffected_r4 != bit4 || bit2 != bit4) {\n    if (unaffected_r4 == bit4) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != bit4)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == bit4) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bitFlag = (input1 | input2 << 1) == 0;\n      if (!bitFlag) {\n        bitFlag = (input3 | input4 << 1) == 0;\n      }\n      if (!bitFlag) {\n        if (unaffected_r4 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_result_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "unaffected_r4",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "in_r12": "bit4",
                "bVar4": "bitFlag"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_equality_and_comparison_080008fc",
            "code": "\nuint checkEqualityAndComparison_080008fc(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint tempVar1;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(input2 << 1) >> 0x15 == -1 || (int)(input4 << 1) >> 0x15 == -1) &&\n     ((((int)(input2 << 1) >> 0x15 == -1 && ((input1 | input2 << 0xc) != 0)) ||\n      (((int)(input4 << 1) >> 0x15 == -1 && ((input3 | input4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = input2 == input4;\n  }\n  if (isZero) {\n    isZero = input1 == input3;\n  }\n  if (!isZero) {\n    tempVar1 = input2 ^ input4;\n    isZero = tempVar1 == 0;\n    if (-1 < (int)tempVar1) {\n      isZero = input2 == input4;\n    }\n    isNegative = -1 < (int)tempVar1 && input4 <= input2;\n    if (isZero) {\n      isNegative = input3 <= input1;\n    }\n    input4 = (int)input4 >> 0x1f;\n    if (!isNegative) {\n      input4 = ~input4;\n    }\n    return input4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_equality_and_comparison_080008fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "tempVar1",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_comparison_check_08000978",
            "code": "\nvoid execute_comparison_check_08000978(undefined4 input_1,undefined4 input_2,undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  execute_with_comparison_check_08000988(parameter_1,parameter_2,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_comparison_check_08000978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "parameter_1",
                "param_4": "parameter_2"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "execute_with_comparison_check_08000988",
            "code": "\nundefined4 execute_with_comparison_check_08000988(undefined4 input_value)\n\n{\n  check_equality_and_comparison_080008fc();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000988": "execute_with_comparison_check_08000988",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978",
                "FUN_08000998"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_execution_result_08000998",
            "code": "\nbool checkExecutionResult_08000998(void)\n\n{\n  char isNotNull;\n  \n  execute_with_comparison_check_08000988();\n  return isNotNull != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_execution_result_08000998",
                "in_ZR": "isNotNull"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "is_null_character_present_080009ac",
            "code": "\nbool is_null_character_present_080009ac(void)\n\n{\n  char input_character;\n  \n  execute_with_comparison_check_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "is_null_character_present_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_comparison_result_080009c0",
            "code": "\nbool check_comparison_result_080009c0(void)\n\n{\n  undefined zero_result;\n  undefined carry_flag;\n  \n  execute_with_comparison_check_08000988();\n  return !(bool)carry_flag || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_comparison_result_080009c0",
                "in_ZR": "zero_result",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_comparison_080009d4",
            "code": "\nbool check_comparison_080009d4(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  execute_comparison_check_08000978();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_comparison_080009d4",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "is_null_check_080009e8",
            "code": "\nbool is_null_check_080009e8(void)\n\n{\n  char input_character;\n  \n  execute_comparison_check_08000978();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "is_null_check_080009e8",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_floating_point_080009fc",
            "code": "\nuint calculateFloatingPoint_080009fc(uint num1,uint num2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool lessThan0x70000000;\n  \n  temp1 = num2 * 2;\n  lessThan0x70000000 = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!lessThan0x70000000) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!lessThan0x70000000 && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((lessThan0x70000000 || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((num2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((num1 | num2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return num2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return num2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = num1 >> (temp1 & 0xff);\n    if (num1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = num2 & 0x1fffff | 0x100000;\n    num1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (num2 & 0x80000000 | num1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < num1 * 8);\n  if (num1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_080009fc",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "lessThan0x70000000"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "perform_arithmetic_08000aa4",
            "code": "\nuint performArithmetic_08000aa4(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint flippedInput2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint difference;\n  bool isZero;\n  \n  flippedInput2 = input2 ^ 0x80000000;\n  temp2 = input1 << 1;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    param4 = input2 << 1;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == param4;\n  }\n  shiftedInput1 = (int)temp2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)param4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      temp2 = flippedInput2;\n      if (shiftedInput1 == -1) {\n        temp2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        flippedInput2 = temp2;\n      }\n      isZero = (temp2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (flippedInput2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp2 == flippedInput2;\n      }\n      if (!isZero) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((input1 ^ flippedInput2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        input1 = flippedInput2;\n      }\n      return input1;\n    }\n    if (input1 != flippedInput2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      flippedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        flippedInput2 = flippedInput2 | 0x80000000;\n      }\n      return flippedInput2;\n    }\n    if (temp2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - temp2;\n  isZero = difference != 0;\n  temp3 = temp2;\n  if (isZero && temp2 <= param4) {\n    temp3 = temp2 + difference;\n  }\n  if (isZero && temp2 <= param4) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (isZero && temp2 <= param4) {\n    input1 = input1 ^ flippedInput2;\n  }\n  if (isZero && temp2 <= param4) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (param4 < temp2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = flippedInput2 & 0xffffff | 0x800000;\n  if ((flippedInput2 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == difference) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (difference & 0xff));\n  temp1 = temp1 << (0x20 - difference & 0xff);\n  input1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    isZero = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)isZero;\n  }\n  if (temp2 < 0x800000) {\n    flippedInput2 = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(flippedInput2 != 0);\n    flippedInput2 = temp3 - 2;\n    if ((temp2 & 0x800000) == 0) {\n      difference = LZCOUNT(temp2) - 8;\n      temp2 = temp2 << (difference & 0xff);\n      if ((int)flippedInput2 < (int)difference) {\n        temp2 = temp2 >> (-(flippedInput2 - difference) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (flippedInput2 - difference) * 0x800000;\n      }\n      return temp2 | input1;\n    }\n  }\n  else {\n    flippedInput2 = temp3 - 1;\n    if (0xffffff < temp2) {\n      flippedInput2 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(flippedInput2 != 0) << 0x1f | temp1 >> 1;\n      flippedInput2 = temp3;\n      if (0xfd < temp3) goto LAB_08000bde;\n    }\n  }\n  temp2 = temp2 + flippedInput2 * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "perform_arithmetic_08000aa4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "flippedInput2",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "difference",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_08000aa8",
            "code": "\nuint calculateFloatingPoint_08000aa8(uint intValue1,uint intValue2,undefined4 undefined4Param,uint returnValue)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint unsignedValue1;\n  uint unsignedValue2;\n  uint unsignedValue3;\n  uint unsignedValue4;\n  bool isConditionTrue;\n  \n  unsignedValue2 = intValue1 << 1;\n  isConditionTrue = unsignedValue2 == 0;\n  if (!isConditionTrue) {\n    returnValue = intValue2 << 1;\n    isConditionTrue = returnValue == 0;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = unsignedValue2 == returnValue;\n  }\n  shiftedValue1 = (int)unsignedValue2 >> 0x18;\n  if (!isConditionTrue) {\n    isConditionTrue = shiftedValue1 == -1;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = (int)returnValue >> 0x18 == -1;\n  }\n  if (isConditionTrue) {\n    shiftedValue2 = (int)(intValue2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      unsignedValue2 = intValue2;\n      if (shiftedValue1 == -1) {\n        unsignedValue2 = intValue1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        intValue2 = unsignedValue2;\n      }\n      isConditionTrue = (unsignedValue2 & 0x7fffff) == 0;\n      if (isConditionTrue) {\n        isConditionTrue = (intValue2 & 0x7fffff) == 0;\n      }\n      if (isConditionTrue) {\n        isConditionTrue = unsignedValue2 == intValue2;\n      }\n      if (!isConditionTrue) {\n        unsignedValue2 = unsignedValue2 | 0x400000;\n      }\n      return unsignedValue2;\n    }\n    if (((intValue1 ^ intValue2) & 0x7fffffff) != 0) {\n      if (unsignedValue2 == 0) {\n        intValue1 = intValue2;\n      }\n      return intValue1;\n    }\n    if (intValue1 != intValue2) {\n      return 0;\n    }\n    if ((unsignedValue2 & 0xff000000) == 0) {\n      unsignedValue2 = intValue1 << 1;\n      if ((intValue1 & 0x80000000) != 0) {\n        unsignedValue2 = unsignedValue2 | 0x80000000;\n      }\n      return unsignedValue2;\n    }\n    if (unsignedValue2 < 0xfe000000) {\n      return intValue1 + 0x800000;\n    }\n    intValue1 = intValue1 & 0x80000000;\nLAB_08000bde:\n    return intValue1 | 0x7f800000;\n  }\n  unsignedValue2 = unsignedValue2 >> 0x18;\n  returnValue = returnValue >> 0x18;\n  unsignedValue4 = returnValue - unsignedValue2;\n  isConditionTrue = unsignedValue4 != 0;\n  unsignedValue3 = unsignedValue2;\n  if (isConditionTrue && unsignedValue2 <= returnValue) {\n    unsignedValue3 = unsignedValue2 + unsignedValue4;\n  }\n  if (isConditionTrue && unsignedValue2 <= returnValue) {\n    intValue2 = intValue2 ^ intValue1;\n  }\n  if (isConditionTrue && unsignedValue2 <= returnValue) {\n    intValue1 = intValue1 ^ intValue2;\n  }\n  if (isConditionTrue && unsignedValue2 <= returnValue) {\n    intValue2 = intValue2 ^ intValue1;\n  }\n  if (returnValue < unsignedValue2) {\n    unsignedValue4 = -unsignedValue4;\n  }\n  if (0x19 < unsignedValue4) {\n    return intValue1;\n  }\n  unsignedValue2 = intValue1 & 0xffffff | 0x800000;\n  if ((intValue1 & 0x80000000) != 0) {\n    unsignedValue2 = -unsignedValue2;\n  }\n  unsignedValue1 = intValue2 & 0xffffff | 0x800000;\n  if ((intValue2 & 0x80000000) != 0) {\n    unsignedValue1 = -unsignedValue1;\n  }\n  if (unsignedValue3 == unsignedValue4) {\n    unsignedValue1 = unsignedValue1 ^ 0x800000;\n    if (unsignedValue3 == 0) {\n      unsignedValue2 = unsignedValue2 ^ 0x800000;\n      unsignedValue3 = 1;\n    }\n    else {\n      unsignedValue4 = unsignedValue4 - 1;\n    }\n  }\n  unsignedValue2 = unsignedValue2 + ((int)unsignedValue1 >> (unsignedValue4 & 0xff));\n  unsignedValue1 = unsignedValue1 << (0x20 - unsignedValue4 & 0xff);\n  intValue1 = unsignedValue2 & 0x80000000;\n  if ((int)unsignedValue2 < 0) {\n    isConditionTrue = unsignedValue1 != 0;\n    unsignedValue1 = -unsignedValue1;\n    unsignedValue2 = -unsignedValue2 - (uint)isConditionTrue;\n  }\n  if (unsignedValue2 < 0x800000) {\n    unsignedValue4 = unsignedValue1 & 0x80000000;\n    unsignedValue1 = unsignedValue1 << 1;\n    unsignedValue2 = unsignedValue2 * 2 + (uint)(unsignedValue4 != 0);\n    unsignedValue4 = unsignedValue3 - 2;\n    if ((unsignedValue2 & 0x800000) == 0) {\n      unsignedValue3 = LZCOUNT(unsignedValue2) - 8;\n      unsignedValue2 = unsignedValue2 << (unsignedValue3 & 0xff);\n      if ((int)unsignedValue4 < (int)unsignedValue3) {\n        unsignedValue2 = unsignedValue2 >> (-(unsignedValue4 - unsignedValue3) & 0xff);\n      }\n      else {\n        unsignedValue2 = unsignedValue2 + (unsignedValue4 - unsignedValue3) * 0x800000;\n      }\n      return unsignedValue2 | intValue1;\n    }\n  }\n  else {\n    unsignedValue4 = unsignedValue3 - 1;\n    if (0xffffff < unsignedValue2) {\n      unsignedValue4 = unsignedValue2 & 1;\n      unsignedValue2 = unsignedValue2 >> 1;\n      unsignedValue1 = (uint)(unsignedValue4 != 0) << 0x1f | unsignedValue1 >> 1;\n      unsignedValue4 = unsignedValue3;\n      if (0xfd < unsignedValue3) goto LAB_08000bde;\n    }\n  }\n  unsignedValue2 = unsignedValue2 + unsignedValue4 * 0x800000 + (uint)(0x7fffffff < unsignedValue1);\n  if (unsignedValue1 == 0x80000000) {\n    unsignedValue2 = unsignedValue2 & 0xfffffffe;\n  }\n  return unsignedValue2 | intValue1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_08000aa8",
                "param_1": "intValue1",
                "param_2": "intValue2",
                "param_3": "undefined4Param",
                "param_4": "returnValue",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "unsignedValue1",
                "uVar4": "unsignedValue2",
                "uVar5": "unsignedValue3",
                "uVar6": "unsignedValue4",
                "bVar7": "isConditionTrue"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_hash_08000c08",
            "code": "\nuint calculateHash_08000c08(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftCount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftCount = leadingZeros - 8;\n  constant = shiftCount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftCount & 0xff);\n    leadingZeros = constant + (input << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftCount = input << leadingZeros + 0x18;\n  leadingZeros = constant + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftCount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_hash_08000c08",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftCount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "calculate_modified_value_08000c10",
            "code": "\nuint calculateModifiedValue_08000c10(uint input_value)\n\n{\n  uint leadingZerosCount;\n  uint shiftCount;\n  uint isNegative;\n  int intermediateValue;\n  \n  isNegative = input_value & 0x80000000;\n  if ((int)isNegative < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leadingZerosCount = LZCOUNT(input_value);\n  shiftCount = leadingZerosCount - 8;\n  intermediateValue = ((isNegative | 0x4b000000) - 0x800000) + shiftCount * -0x800000;\n  if (7 < leadingZerosCount) {\n    leadingZerosCount = 0 << (shiftCount & 0xff);\n    isNegative = intermediateValue + (input_value << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < leadingZerosCount);\n    if (leadingZerosCount == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftCount = input_value << leadingZerosCount + 0x18;\n  isNegative = intermediateValue + ((input_value >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftCount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "calculate_modified_value_08000c10",
                "param_1": "input_value",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftCount",
                "uVar3": "isNegative",
                "iVar4": "intermediateValue"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_08000cb8",
            "code": "\nuint calculateFloatingPoint_08000cb8(uint input1,uint input2,undefined4 extraParam,uint extraInput)\n\n{\n  longlong product;\n  uint result;\n  uint uVar3;\n  int sum;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool condition1;\n  bool condition2;\n  \n  uVar3 = input1 >> 0x17 & 0xff;\n  condition1 = uVar3 == 0;\n  if (!condition1) {\n    extraInput = input2 >> 0x17 & 0xff;\n    condition1 = extraInput == 0;\n  }\n  if (!condition1) {\n    condition1 = uVar3 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = extraInput == 0xff;\n  }\n  if (condition1) {\n    extraInput = input2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || extraInput == 0xff) {\n      condition1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition1 = input2 == 0;\n        result = input1;\n      }\n      if (!condition1) {\n        condition1 = input2 == 0x80000000;\n      }\n      uVar8 = result;\n      if (((condition1) || ((uVar3 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((extraInput == 0xff && (uVar8 = input2, (input2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    condition1 = (input1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition1 = uVar3 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input1 = input1 << 1;\n        condition1 = (input1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      uVar3 = uVar3 - 1;\n    }\n    input1 = input1 | result;\n    condition1 = extraInput == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input2 = input2 << 1;\n        condition1 = (input2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      extraInput = extraInput - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = uVar3 + extraInput;\n  uVar8 = input1 ^ input2;\n  uVar3 = input1 << 9;\n  condition1 = uVar3 == 0;\n  if (!condition1) {\n    input2 = input2 << 9;\n    condition1 = input2 == 0;\n  }\n  if (condition1) {\n    if (uVar3 == 0) {\n      input2 = input2 << 9;\n    }\n    result = uVar8 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    condition2 = SBORROW4(sum,0x7f);\n    iVar5 = sum + -0x7f;\n    condition1 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!condition1 && 0x7e < sum) {\n      condition2 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      condition1 = iVar5 == 0xff;\n    }\n    if (!condition1 && iVar7 < 0 == condition2) {\n      result = result | iVar5 * 0x800000;\n    }\n    if (!condition1 && iVar7 < 0 == condition2) {\n      return result;\n    }\n    result = result | 0x800000;\n    uVar6 = 0;\n    condition2 = SBORROW4(iVar5,1);\n    uVar8 = sum - 0x80;\n    condition1 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    product = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    uVar6 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    condition1 = result < 0x800000;\n    if (condition1) {\n      result = result << 1;\n    }\n    if (condition1) {\n      result = result | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    result = uVar8 & 0x80000000 | result;\n    uVar8 = (sum + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(uVar8,0xfd);\n    condition1 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      result = result + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (condition1 || (int)uVar3 < 0 != condition2) {\n    condition1 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || condition1 != SCARRY4(uVar8,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && condition1 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (result << 1) >> (-uVar8 & 0xff);\n      uVar8 = result << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((result & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_08000cb8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "extraParam",
                "param_4": "extraInput",
                "lVar1": "product",
                "uVar2": "result",
                "iVar4": "sum",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_float_08000e20",
            "code": "\nuint calculateFloat_08000e20(uint float1,uint float2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint num2Shifted;\n  int tempResult;\n  uint num2ShiftedTemp;\n  int num1Shifted;\n  uint result;\n  bool isZero;\n  bool isEqual;\n  bool carry;\n  \n  num2Shifted = float1 >> 0x17 & 0xff;\n  isZero = num2Shifted == 0;\n  if (!isZero) {\n    param4 = float2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = num2Shifted == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = float2 >> 0x17 & 0xff;\n    result = float1;\n    if (num2Shifted == 0xff) {\n      if (((float1 & 0x7fffff) != 0) || (result = float2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = float2;\n        if ((float2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (float1 ^ float2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (float1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (float2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = num2Shifted == 0;\n        result = float1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            float1 = float1 << 1;\n            isZero = (float1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          num2Shifted = num2Shifted - 1;\n        }\n        float1 = float1 | result;\n        isZero = param4 == 0;\n        result = float2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            float2 = float2 << 1;\n            isZero = (float2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        float2 = float2 | result;\n        goto LAB_08000e38;\n      }\n      if ((float1 & 0x7fffffff) == 0) {\n        if ((float2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    float1 = float1 ^ float2;\n  }\n  else {\nLAB_08000e38:\n    tempResult = num2Shifted - param4;\n    if (float2 << 9 == 0) {\n      float1 = (float1 ^ float2) & 0x80000000 | float1 & 0x7fffff;\n      carry = SCARRY4(tempResult,0x7f);\n      num1Shifted = tempResult + 0x7f;\n      isZero = num1Shifted < 0;\n      isEqual = num1Shifted == 0;\n      if (!isEqual && isZero == carry) {\n        carry = SBORROW4(0xff,num1Shifted);\n        isZero = 0xff - num1Shifted < 0;\n        isEqual = num1Shifted == 0xff;\n      }\n      if (!isEqual && isZero == carry) {\n        float1 = float1 | num1Shifted * 0x800000;\n      }\n      if (!isEqual && isZero == carry) {\n        return float1;\n      }\n      float1 = float1 | 0x800000;\n      num2Shifted = 0;\n      isEqual = SBORROW4(num1Shifted,1);\n      num2ShiftedTemp = tempResult + 0x7e;\n      isZero = num2ShiftedTemp == 0;\n      result = num2ShiftedTemp;\n    }\n    else {\n      temp1 = (float2 << 9) >> 4 | 0x10000000;\n      num2Shifted = (float1 << 9) >> 4 | 0x10000000;\n      float1 = (float1 ^ float2) & 0x80000000;\n      isZero = temp1 <= num2Shifted;\n      if (!isZero) {\n        num2Shifted = num2Shifted << 1;\n      }\n      num2ShiftedTemp = tempResult + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (temp1 <= num2Shifted) {\n          num2Shifted = num2Shifted - temp1;\n          float1 = float1 | result;\n        }\n        isZero = temp1 >> 1 <= num2Shifted;\n        if (isZero) {\n          num2Shifted = num2Shifted - (temp1 >> 1);\n        }\n        if (isZero) {\n          float1 = float1 | result >> 1;\n        }\n        isZero = temp1 >> 2 <= num2Shifted;\n        if (isZero) {\n          num2Shifted = num2Shifted - (temp1 >> 2);\n        }\n        if (isZero) {\n          float1 = float1 | result >> 2;\n        }\n        isZero = temp1 >> 3 <= num2Shifted;\n        if (isZero) {\n          num2Shifted = num2Shifted - (temp1 >> 3);\n        }\n        if (isZero) {\n          float1 = float1 | result >> 3;\n        }\n        num2Shifted = num2Shifted * 0x10;\n        isZero = num2Shifted == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isEqual = SBORROW4(num2ShiftedTemp,0xfd);\n      isZero = num2ShiftedTemp == 0xfd;\n      result = num2ShiftedTemp - 0xfd;\n      if (num2ShiftedTemp < 0xfe) {\n        float1 = float1 + num2ShiftedTemp * 0x800000 + (uint)(temp1 <= num2Shifted);\n        if (num2Shifted - temp1 == 0) {\n          float1 = float1 & 0xfffffffe;\n        }\n        return float1;\n      }\n    }\n    if (isZero || (int)result < 0 != isEqual) {\n      isZero = (int)(num2ShiftedTemp + 0x19) < 0;\n      if (num2ShiftedTemp == 0xffffffe7 || isZero != SCARRY4(num2ShiftedTemp,0x19)) {\n        float1 = float1 & 0x80000000;\n      }\n      if (num2ShiftedTemp == 0xffffffe7 || isZero != SCARRY4(num2ShiftedTemp,0x19)) {\n        return float1;\n      }\n      result = (float1 << 1) >> (-num2ShiftedTemp & 0xff);\n      num2ShiftedTemp = float1 << (num2ShiftedTemp + 0x20 & 0xff);\n      result = ((uint)((float1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((num2Shifted | num2ShiftedTemp << 1) == 0) {\n        result = result & ~(num2ShiftedTemp >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return float1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_float_08000e20",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "num2Shifted",
                "iVar3": "tempResult",
                "uVar4": "num2ShiftedTemp",
                "iVar5": "num1Shifted",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isEqual",
                "bVar9": "carry"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_result_08000f68",
            "code": "\nuint calculate_result_08000f68(uint result,uint input_2)\n\n{\n  bool is_overflow;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_input;\n  bool is_zero;\n  \n  input_1_doubled = result * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((result & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = result ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_overflow = -1 < (int)combined_input;\n  if (is_overflow) {\n    result = input_1_doubled + input_2 * -2;\n    is_zero = result == 0;\n  }\n  if ((is_overflow && input_2_doubled <= input_1_doubled) && !is_zero) {\n    result = (int)input_2 >> 0x1f;\n  }\n  if (!is_overflow || input_2_doubled > input_1_doubled) {\n    result = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    result = result | 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "result",
                "param_2": "input_2",
                "bVar1": "is_overflow",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_input",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "concatenate_and_return_08000fc8",
            "code": "\nvoid concatenateAndReturn_08000fc8(undefined4 sourceString,undefined4 destinationString)\n\n{\n  concatenate_and_return_08000fd0(destinationString,sourceString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "concatenate_and_return_08000fc8",
                "param_1": "sourceString",
                "param_2": "destinationString"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_and_return_08000fd0",
            "code": "\nundefined8 concatenate_and_return_08000fd0(undefined4 input_1,undefined4 input_2)\n\n{\n  calculate_result_08000f68();\n  return CONCAT44(input_2,input_1);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_and_return_08000fd0",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "is_null_character_present_08000ff4",
            "code": "\nbool is_null_character_present_08000ff4(void)\n\n{\n  char input_character;\n  \n  concatenate_and_return_08000fd0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "is_null_character_present_08000ff4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_if_concatenated_string_is_empty_08001030",
            "code": "\nbool check_if_concatenated_string_is_empty_08001030(void)\n\n{\n  char input_character;\n  \n  concatenate_and_return_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_if_concatenated_string_is_empty_08001030",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "check_number_validity_08001044",
            "code": "\nuint checkNumberValidity_08001044(uint number)\n\n{\n  uint shiftCount;\n  \n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftCount = 0x9e - ((number << 1) >> 0x18);\n  if (-1 < (int)shiftCount) {\n    return (number << 8 | 0x80000000) >> (shiftCount & 0xff);\n  }\n  if ((shiftCount == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "check_number_validity_08001044",
                "param_1": "number",
                "uVar1": "shiftCount"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *dest;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  uint remaining;\n  uint temp;\n  bool isRemaining;\n  \n  destPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      temp = length - 4;\n      if (3 < length) {\n        do {\n          dest = source;\n          srcPtr = destPtr;\n          isRemaining = temp != 0;\n          temp = temp - 1;\n          *(undefined *)srcPtr = *(undefined *)dest;\n          destPtr = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)dest + 1);\n        } while (isRemaining);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)dest + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)dest + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)dest + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      temp = 4 - ((uint)destination & 3);\n      length = length - temp;\n      dest = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        dest = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtr = dest;\n      source = srcPtr;\n      if ((temp & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destPtr = (undefined4 *)((int)dest + 2);\n        *(undefined2 *)dest = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destPtr = *source;\n    destPtr[1] = source[1];\n    destPtr[2] = source[2];\n    destPtr[3] = source[3];\n    destPtr[4] = source[4];\n    destPtr[5] = source[5];\n    destPtr[6] = source[6];\n    destPtr[7] = source[7];\n    destPtr[8] = source[8];\n    destPtr[9] = source[9];\n    destPtr[10] = source[10];\n    destPtr[0xb] = source[0xb];\n    destPtr[0xc] = source[0xc];\n    destPtr[0xd] = source[0xd];\n    destPtr[0xe] = source[0xe];\n    destPtr[0xf] = source[0xf];\n    destPtr = destPtr + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remaining = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destPtr = *source;\n      destPtr[1] = source[1];\n      destPtr[2] = source[2];\n      destPtr[3] = source[3];\n      destPtr = destPtr + 4;\n      source = source + 4;\n      isRemaining = 0xf < remaining;\n      remaining = remaining - 0x10;\n    } while (isRemaining);\n  }\n  temp = remaining + 0xc;\n  srcPtr = destPtr;\n  dest = source;\n  if (0xfffffff3 < remaining) {\n    do {\n      source = dest + 1;\n      *srcPtr = *dest;\n      isRemaining = 3 < temp;\n      temp = temp - 4;\n      destPtr = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      dest = source;\n    } while (isRemaining);\n  }\nLAB_08001108:\n  if (temp + 4 != 0) {\n    dest = destPtr;\n    srcPtr = source;\n    if ((temp & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = *(undefined *)source;\n    }\n    if ((temp + 4 & 2) != 0) {\n      *(undefined2 *)dest = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dest",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "uVar4": "remaining",
                "uVar5": "temp",
                "bVar6": "isRemaining"
            },
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_conditions_08001170",
            "code": "\nundefined4 check_conditions_08001170(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_conditions_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_value_0800119c",
            "code": "\nuint calculateValue_0800119c(uint inputValue1,uint inputValue2)\n\n{\n  uint calculationResult1;\n  int calculationResult2;\n  uint calculationResult3;\n  \n  calculationResult2 = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < calculationResult2) {\n      return 0;\n    }\n    calculationResult1 = calculationResult2 >> 0x15;\n    calculationResult3 = -calculationResult1 - 0x3e1;\n    if (calculationResult1 < 0xfffffc20 && calculationResult3 != 0) {\n      calculationResult1 = (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (calculationResult3 & 0xff);\n      if ((inputValue2 & 0x80000000) != 0) {\n        calculationResult1 = -calculationResult1;\n      }\n      return calculationResult1;\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  inputValue2 = inputValue2 & 0x80000000;\n  if (inputValue2 == 0) {\n    inputValue2 = 0x7fffffff;\n  }\n  return inputValue2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_value_0800119c",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "calculationResult1",
                "iVar2": "calculationResult2",
                "uVar3": "calculationResult3"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "calculate_result_080011ec",
            "code": "\nundefined8 calculate_result_080011ec(int input_value_1,int input_value_2,int check_value_1,int check_value_2)\n\n{\n  undefined8 result;\n  \n  if ((check_value_2 == 0) && (check_value_1 == 0)) {\n    if (input_value_2 != 0 || input_value_1 != 0) {\n      input_value_2 = -1;\n      input_value_1 = -1;\n    }\n    return CONCAT44(input_value_2,input_value_1);\n  }\n  result = calculate_remainder_and_quotient_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "check_value_1",
                "param_4": "check_value_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_remainder_and_quotient_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_remainder_and_quotient_0800121c(uint dividend,uint dividend_high,uint divisor,uint remainder,uint *quotient_ptr)\n\n{\n  code *software_udf;\n  ulonglong product;\n  uint quotient_lower;\n  uint quotient_higher;\n  uint temp;\n  int shift_amount;\n  uint quotient_full;\n  uint divisor_extended;\n  uint remainder_extended;\n  uint *puVar9;\n  uint quotient_lower_temp;\n  uint divisor_lower;\n  uint quotient_lower_extended;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (remainder == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      divisor_extended = divisor;\n      if (shift_amount != 0) {\n        divisor_extended = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      divisor_lower = divisor_extended >> 0x10;\n      remainder_extended = dividend_high / divisor_lower;\n      quotient_lower_temp = remainder_extended * (divisor_extended & 0xffff);\n      quotient_full = dividend >> 0x10 | (dividend_high - divisor_lower * remainder_extended) * 0x10000;\n      quotient_higher = remainder_extended;\n      if (quotient_full <= quotient_lower_temp && quotient_lower_temp - quotient_full != 0) {\n        carry_flag = CARRY4(divisor_extended,quotient_full);\n        quotient_full = divisor_extended + quotient_full;\n        quotient_higher = remainder_extended - 1;\n        if ((carry_flag == false) && (quotient_full <= quotient_lower_temp && quotient_lower_temp - quotient_full != 0)) {\n          quotient_higher = remainder_extended - 2;\n          quotient_full = quotient_full + divisor_extended;\n        }\n      }\n      quotient_lower = (quotient_full - quotient_lower_temp) / divisor_lower;\n      temp = quotient_lower * (divisor_extended & 0xffff);\n      remainder_extended = dividend & 0xffff | ((quotient_full - quotient_lower_temp) - divisor_lower * quotient_lower) * 0x10000;\n      quotient_full = quotient_lower;\n      if (remainder_extended <= temp && temp - remainder_extended != 0) {\n        carry_flag = CARRY4(divisor_extended,remainder_extended);\n        remainder_extended = divisor_extended + remainder_extended;\n        quotient_full = quotient_lower - 1;\n        if ((carry_flag == false) && (remainder_extended <= temp && temp - remainder_extended != 0)) {\n          quotient_full = quotient_lower - 2;\n          remainder_extended = remainder_extended + divisor_extended;\n        }\n      }\n      quotient_full = quotient_full | quotient_higher << 0x10;\n      puVar9 = (uint *)0x0;\n      remainder_extended = remainder_extended - temp;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        software_udf = (code *)software_udf(0xff,0x8001302);\n        result = (*software_udf)();\n        return result;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        puVar9 = (uint *)0x1;\n        dividend_high = dividend_high - divisor;\n        divisor_lower = divisor >> 0x10;\n        quotient_lower = divisor & 0xffff;\n        divisor_extended = divisor;\n      }\n      else {\n        divisor_extended = divisor << shift_amount;\n        quotient_full = dividend_high >> (0x20U - shift_amount & 0xff);\n        divisor_lower = divisor_extended >> 0x10;\n        quotient_lower_temp = quotient_full / divisor_lower;\n        quotient_lower = divisor_extended & 0xffff;\n        temp = quotient_lower_temp * quotient_lower;\n        remainder_extended = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_higher = remainder_extended >> 0x10 | (quotient_full - divisor_lower * quotient_lower_temp) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_full = quotient_lower_temp;\n        if (quotient_higher <= temp && temp - quotient_higher != 0) {\n          carry_flag = CARRY4(divisor_extended,quotient_higher);\n          quotient_higher = divisor_extended + quotient_higher;\n          quotient_full = quotient_lower_temp - 1;\n          if ((carry_flag == false) && (quotient_higher <= temp && temp - quotient_higher != 0)) {\n            quotient_full = quotient_lower_temp - 2;\n            quotient_higher = quotient_higher + divisor_extended;\n          }\n        }\n        quotient_lower_temp = (quotient_higher - temp) / divisor_lower;\n        quotient_lower_extended = quotient_lower_temp * quotient_lower;\n        dividend_high = remainder_extended & 0xffff | ((quotient_higher - temp) - divisor_lower * quotient_lower_temp) * 0x10000;\n        quotient_higher = quotient_lower_temp;\n        if (dividend_high <= quotient_lower_extended && quotient_lower_extended - dividend_high != 0) {\n          carry_flag = CARRY4(divisor_extended,dividend_high);\n          dividend_high = divisor_extended + dividend_high;\n          quotient_higher = quotient_lower_temp - 1;\n          if ((carry_flag == false) && (dividend_high <= quotient_lower_extended && quotient_lower_extended - dividend_high != 0)) {\n            quotient_higher = quotient_lower_temp - 2;\n            dividend_high = dividend_high + divisor_extended;\n          }\n        }\n        dividend_high = dividend_high - quotient_lower_extended;\n        puVar9 = (uint *)(quotient_higher | quotient_full << 0x10);\n      }\n      quotient_lower_temp = dividend_high / divisor_lower;\n      quotient_full = quotient_lower * quotient_lower_temp;\n      remainder_extended = dividend >> 0x10 | (dividend_high - divisor_lower * quotient_lower_temp) * 0x10000;\n      quotient_higher = quotient_lower_temp;\n      if (remainder_extended <= quotient_full && quotient_full - remainder_extended != 0) {\n        carry_flag = CARRY4(divisor_extended,remainder_extended);\n        remainder_extended = divisor_extended + remainder_extended;\n        quotient_higher = quotient_lower_temp - 1;\n        if ((carry_flag == false) && (remainder_extended <= quotient_full && quotient_full - remainder_extended != 0)) {\n          quotient_higher = quotient_lower_temp - 2;\n          remainder_extended = remainder_extended + divisor_extended;\n        }\n      }\n      quotient_lower_temp = (remainder_extended - quotient_full) / divisor_lower;\n      quotient_lower = quotient_lower * quotient_lower_temp;\n      remainder_extended = dividend & 0xffff | ((remainder_extended - quotient_full) - divisor_lower * quotient_lower_temp) * 0x10000;\n      quotient_full = quotient_lower_temp;\n      if (remainder_extended <= quotient_lower && quotient_lower - remainder_extended != 0) {\n        carry_flag = CARRY4(divisor_extended,remainder_extended);\n        remainder_extended = divisor_extended + remainder_extended;\n        quotient_full = quotient_lower_temp - 1;\n        if ((carry_flag == false) && (remainder_extended <= quotient_lower && quotient_lower - remainder_extended != 0)) {\n          quotient_full = quotient_lower_temp - 2;\n          remainder_extended = remainder_extended + divisor_extended;\n        }\n      }\n      remainder_extended = remainder_extended - quotient_lower;\n      quotient_full = quotient_full | quotient_higher << 0x10;\n    }\n    if (quotient_ptr != (uint *)0x0) {\n      *quotient_ptr = remainder_extended >> LZCOUNT(divisor);\n      quotient_ptr[1] = 0;\n    }\n  }\n  else {\n    puVar9 = quotient_ptr;\n    if (dividend_high < remainder) {\n      if (quotient_ptr != (uint *)0x0) {\n        *quotient_ptr = dividend;\n        quotient_ptr[1] = dividend_high;\n        return 0;\n      }\n      quotient_full = 0;\n    }\n    else {\n      shift_amount = LZCOUNT(remainder);\n      if (shift_amount == 0) {\n        if ((remainder < dividend_high) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          dividend_high = (dividend_high - remainder) - (uint)carry_flag;\n          quotient_full = 1;\n        }\n        else {\n          quotient_full = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (quotient_ptr != (uint *)0x0) {\n          *quotient_ptr = dividend;\n          quotient_ptr[1] = dividend_high;\n        }\n      }\n      else {\n        remainder_extended = 0x20 - shift_amount;\n        quotient_lower = divisor >> (remainder_extended & 0xff) | remainder << shift_amount;\n        divisor_extended = dividend_high >> (remainder_extended & 0xff);\n        temp = quotient_lower >> 0x10;\n        quotient_lower_temp = divisor_extended / temp;\n        divisor_lower = quotient_lower_temp * (quotient_lower & 0xffff);\n        quotient_full = dividend_high << shift_amount | dividend >> (remainder_extended & 0xff);\n        quotient_higher = quotient_full >> 0x10 | (divisor_extended - temp * quotient_lower_temp) * 0x10000;\n        dividend = dividend << shift_amount;\n        divisor_extended = quotient_lower_temp;\n        if (quotient_higher <= divisor_lower && divisor_lower - quotient_higher != 0) {\n          carry_flag = CARRY4(quotient_lower,quotient_higher);\n          quotient_higher = quotient_lower + quotient_higher;\n          divisor_extended = quotient_lower_temp - 1;\n          if ((carry_flag == false) && (quotient_higher <= divisor_lower && divisor_lower - quotient_higher != 0)) {\n            divisor_extended = quotient_lower_temp - 2;\n            quotient_higher = quotient_higher + quotient_lower;\n          }\n        }\n        quotient_lower_temp = (quotient_higher - divisor_lower) / temp;\n        quotient_lower_extended = quotient_lower_temp * (quotient_lower & 0xffff);\n        quotient_higher = quotient_full & 0xffff | ((quotient_higher - divisor_lower) - temp * quotient_lower_temp) * 0x10000;\n        quotient_full = quotient_lower_temp;\n        if (quotient_higher <= quotient_lower_extended && quotient_lower_extended - quotient_higher != 0) {\n          carry_flag = CARRY4(quotient_lower,quotient_higher);\n          quotient_higher = quotient_lower + quotient_higher;\n          quotient_full = quotient_lower_temp - 1;\n          if ((carry_flag == false) && (quotient_higher <= quotient_lower_extended && quotient_lower_extended - quotient_higher != 0)) {\n            quotient_full = quotient_lower_temp - 2;\n            quotient_higher = quotient_higher + quotient_lower;\n          }\n        }\n        quotient_full = quotient_full | divisor_extended << 0x10;\n        product = (ulonglong)quotient_full * (ulonglong)(divisor << shift_amount);\n        if (CONCAT44(quotient_higher - quotient_lower_extended,dividend) < product) {\n          quotient_full = quotient_full - 1;\n          product = product - CONCAT44(quotient_lower,divisor << shift_amount);\n        }\n        if (quotient_ptr != (uint *)0x0) {\n          divisor_extended = ((quotient_higher - quotient_lower_extended) - (int)(product >> 0x20)) - (uint)(dividend < (uint)product);\n          *quotient_ptr = divisor_extended << (remainder_extended & 0xff) | dividend - (uint)product >> shift_amount;\n          quotient_ptr[1] = divisor_extended >> shift_amount;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,quotient_full);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_remainder_and_quotient_0800121c",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "quotient_ptr",
                "UNRECOVERED_JUMPTABLE": "software_udf",
                "uVar1": "product",
                "uVar2": "quotient_lower",
                "uVar3": "quotient_higher",
                "uVar4": "temp",
                "iVar5": "shift_amount",
                "uVar6": "quotient_full",
                "uVar7": "divisor_extended",
                "uVar8": "remainder_extended",
                "uVar10": "quotient_lower_temp",
                "uVar11": "divisor_lower",
                "uVar12": "quotient_lower_extended",
                "bVar13": "carry_flag",
                "uVar14": "result"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_hardware_080014f0",
            "code": "\n\n\nundefined4 initializeHardware_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configureRegisterBits(3);\n  updateMemoryFunction(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_hardware_080014f0",
                "configure_register_bits_08001714": "configureRegisterBits",
                "update_memory_function_0800151c": "updateMemoryFunction"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "update_memory_function_0800151c",
            "code": "\nundefined4 updateMemoryFunction_0800151c(uint inputValue)\n\n{\n  int memoryUpdateResult;\n  undefined4 returnValue;\n  \n  memoryUpdateResult = update_memory_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (memoryUpdateResult == 0) {\n    if (inputValue < 0x10) {\n      write_shifted_bits_to_memory_0800172a(0xffffffff,inputValue,0);\n      returnValue = 0;\n      DAT_20000000 = inputValue;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "update_memory_function_0800151c",
                "param_1": "inputValue",
                "iVar1": "memoryUpdateResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increase_global_counter_0800157c",
            "code": "\nvoid increaseGlobalCounter_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increase_global_counter_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_dat_value_080015a0",
            "code": "\nundefined4 get_dat_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_dat_value_080015a0"
            },
            "calling": [
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08001f6c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_register_bits_080015b4",
            "code": "\n\n\nvoid setRegisterBits_080015b4(uint value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_register_bits_080015b4",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_shifted_bits_080015fc",
            "code": "\n\n\nuint getShiftedBits_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_shifted_bits_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "write_byte_to_memory_08001618",
            "code": "\nvoid writeByteToMemory_08001618(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "write_byte_to_memory_08001618",
                "param_1": "address",
                "param_2": "data",
                "(char)param_1": "(char)address"
            },
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "apply_bit_mask_0800166c",
            "code": "\nuint applyBitMask_0800166c(uint inputParam,uint bitVector,uint value)\n\n{\n  uint shiftAmount;\n  \n  inputParam = inputParam & 7;\n  shiftAmount = 7 - inputParam;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (inputParam + 4 < 7) {\n    inputParam = 0;\n  }\n  else {\n    inputParam = inputParam - 3;\n  }\n  return value & ~(-1 << (inputParam & 0xff)) |\n         (~(-1 << (shiftAmount & 0xff)) & bitVector) << (inputParam & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "apply_bit_mask_0800166c",
                "param_1": "inputParam",
                "param_2": "bitVector",
                "param_3": "value",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_update_memory_080016d0",
            "code": "\n\n\nbool checkAndUpdateMemory_080016d0(int inputValue)\n\n{\n  bool isValidInput;\n  \n  isValidInput = inputValue - 1U < 0x1000000;\n  if (isValidInput) {\n    _DAT_e000e014 = inputValue + -1;\n    writeByteToMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValidInput;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_update_memory_080016d0",
                "param_1": "inputValue",
                "bVar1": "isValidInput",
                "write_byte_to_memory_08001618": "writeByteToMemory"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "configure_register_bits_08001714",
            "code": "\nvoid configure_register_bits_08001714(undefined4 config_value)\n\n{\n  set_register_bits_080015b4(config_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "configure_register_bits_08001714",
                "param_1": "config_value"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "write_shifted_bits_to_memory_0800172a",
            "code": "\nvoid writeShiftedBitsToMemory_0800172a(char outputAddress,undefined4 mask,undefined4 shift)\n\n{\n  undefined4 shiftedBits;\n  \n  shiftedBits = get_shifted_bits_080015fc();\n  shiftedBits = apply_bit_mask_0800166c(shiftedBits,mask,shift);\n  write_byte_to_memory_08001618((int)outputAddress,shiftedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "write_shifted_bits_to_memory_0800172a",
                "param_1": "outputAddress",
                "param_2": "mask",
                "param_3": "shift",
                "uVar1": "shiftedBits"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "update_memory_08001762",
            "code": "\nundefined4 updateMemory_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_update_memory_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "update_memory_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "update_peripheral_configuration_0800177c",
            "code": "\n\n\nvoid updatePeripheralConfiguration_0800177c(int peripheralNumber)\n\n{\n  if (peripheralNumber == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "update_peripheral_configuration_0800177c",
                "param_1": "peripheralNumber"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "update_and_calculate_result_080017b4",
            "code": "\nvoid updateAndCalculateResult_080017b4(void)\n\n{\n  update_and_calculate_result_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "update_and_calculate_result_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bitmask_080017c4",
            "code": "\n\n\nvoid updateBitmask_080017c4(uint *bitmask,uint *flags)\n\n{\n  uint bit;\n  uint flag;\n  uint type;\n  uint *bitmaskPtr;\n  int offset;\n  uint value;\n  uint index;\n  \n  value = 0;\n  index = 0;\n  do {\n    if (0xf < index) {\n      return;\n    }\n    bit = 1 << (index & 0xff);\n    flag = *flags & bit;\n    if (flag == bit) {\n      type = flags[1];\n      if (type == 0x12) {\n        value = flags[3] + 0xc;\n      }\n      else if (type < 0x13) {\n        if (type == 2) {\n          value = flags[3] + 8;\n        }\n        else if (type < 3) {\n          if (type == 0) goto LAB_08001882;\n          if (type == 1) {\n            value = flags[3];\n          }\n        }\n        else if (type == 3) {\n          value = 0;\n        }\n        else if (type == 0x11) {\n          value = flags[3] + 4;\n        }\n      }\n      else if (type == 0x10210000) {\nLAB_08001882:\n        if (flags[2] == 0) {\n          value = 4;\n        }\n        else if (flags[2] == 1) {\n          value = 8;\n          bitmask[4] = bit;\n        }\n        else {\n          value = 8;\n          bitmask[5] = bit;\n        }\n      }\n      else if (type < 0x10210001) {\n        if ((type == 0x10110000) || (type == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((type == 0x10310000) || (type == 0x10320000)) || (type == 0x10220000))\n      goto LAB_08001882;\n      if (flag < 0x100) {\n        bit = index << 2;\n        bitmaskPtr = bitmask;\n      }\n      else {\n        bitmaskPtr = bitmask + 1;\n        bit = (index - 8) * 4;\n      }\n      *bitmaskPtr = *bitmaskPtr & ~(0xf << (bit & 0xff)) | value << (bit & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (bitmask == (uint *)0x40010800) {\n          offset = 0;\n        }\n        else if (bitmask == (uint *)0x40010c00) {\n          offset = 1;\n        }\n        else if (bitmask == (uint *)0x40011000) {\n          offset = 2;\n        }\n        else if (bitmask == (uint *)0x40011400) {\n          offset = 3;\n        }\n        else {\n          offset = 4;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40010000) =\n             offset << ((index & 3) << 2) |\n             ~(0xf << ((index & 3) << 2)) & *(uint *)(((index >> 2) + 2) * 4 + 0x40010000);\n        if ((flags[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~flag & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = flag | _DAT_40010400;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~flag & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = flag | _DAT_40010404;\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~flag & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = flag | _DAT_40010408;\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~flag & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = flag | _DAT_4001040c;\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bitmask_080017c4",
                "param_1": "bitmask",
                "param_2": "flags",
                "uVar1": "bit",
                "uVar2": "flag",
                "uVar3": "type",
                "puVar4": "bitmaskPtr",
                "iVar5": "offset",
                "local_10": "value",
                "local_c": "index"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "set_param_to_value_08001a80",
            "code": "\nvoid setParamToValue_08001a80(int memoryAddress,ushort value,char shouldShift)\n\n{\n  if (shouldShift == '\\0') {\n    *(unsignedInteger *)(memoryAddress + 0x10) = (unsignedInteger)value << 0x10;\n  }\n  else {\n    *(unsignedInteger *)(memoryAddress + 0x10) = (unsignedInteger)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "set_param_to_value_08001a80",
                "param_1": "memoryAddress",
                "param_2": "value",
                "param_3": "shouldShift",
                "uint": "unsignedInteger"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_threshold_08001ab0",
            "code": "\nundefined4 calculateThreshold_08001ab0(uint **data)\n\n{\n  uint shiftedData;\n  char isValid;\n  undefined4 result;\n  uint divisor;\n  bool isZero;\n  \n  if (data == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_08001cb8(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 0x24;\n    **data = **data & 0xfffffffe;\n    shiftedData = shifted_global_data_08003518();\n    if (data[1] < (uint *)0x186a1) {\n      divisor = shiftedData;\n      if (shiftedData < 2000000) {\n        divisor = 1;\n      }\n      isValid = (char)divisor;\n      if (1999999 < shiftedData) {\n        isValid = '\\0';\n      }\n    }\n    else {\n      divisor = shiftedData;\n      if (shiftedData < 4000000) {\n        divisor = 1;\n      }\n      isValid = (char)divisor;\n      if (3999999 < shiftedData) {\n        isValid = '\\0';\n      }\n    }\n    if (isValid == '\\0') {\n      divisor = shiftedData / 1000000;\n      (*data)[1] = divisor;\n      if ((uint *)0x186a0 < data[1]) {\n        divisor = (divisor * 300) / 1000;\n      }\n      (*data)[8] = divisor + 1;\n      if (data[1] < (uint *)0x186a1) {\n        shiftedData = (shiftedData - 1) / (uint)((int)data[1] << 1) + 1 & 0xfff;\n        if (shiftedData < 4) {\n          shiftedData = 4;\n        }\n      }\n      else {\n        if (data[2] == (uint *)0x0) {\n          divisor = (shiftedData - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff;\n          isZero = divisor == 0;\n          if (isZero) {\n            divisor = 1;\n          }\n          isValid = (char)divisor;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        else {\n          divisor = (shiftedData - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff;\n          isZero = divisor == 0;\n          if (isZero) {\n            divisor = 1;\n          }\n          isValid = (char)divisor;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        if (isValid == '\\0') {\n          if (data[2] == (uint *)0x0) {\n            shiftedData = (shiftedData - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            shiftedData = (shiftedData - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          shiftedData = 1;\n        }\n      }\n      (*data)[7] = shiftedData;\n      **data = (uint)data[8] | (uint)data[7];\n      (*data)[2] = (uint)data[3] | (uint)data[4];\n      (*data)[3] = (uint)data[6] | (uint)data[5];\n      **data = **data | 1;\n      data[0x10] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_threshold_08001ab0",
                "param_1": "data",
                "uVar1": "shiftedData",
                "cVar2": "isValid",
                "uVar3": "result",
                "uVar4": "divisor",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocessData_08001ccc(uint **data,undefined2 value1,undefined2 value2,undefined2 value3,uint *values,\n            undefined2 value4,undefined4 result)\n\n{\n  int initialValue;\n  int tempValue;\n  undefined4 returnValue;\n  uint *pointer;\n  \n  initialValue = getInitialDatValue();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        tempValue = 0;\n        goto LAB_08001d9c;\n      }\n      tempValue = getInitialDatValue();\n    } while ((uint)(tempValue - initialValue) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    tempValue = 3;\nLAB_08001d9c:\n    if (tempValue == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = values;\n        *(undefined2 *)((int)data + 0x2a) = value4;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        tempValue = updateData(data,value1,value2,value3,result,initialValue);\n        if (tempValue == 0) {\n          while (*(short *)(data + 10) != 0) {\n            tempValue = checkAndUpdateParameters(data,result,initialValue);\n            if (tempValue != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            pointer = data[9];\n            data[9] = (uint *)((int)pointer + 1);\n            (*data)[4] = (uint)*(byte *)pointer;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              pointer = data[9];\n              data[9] = (uint *)((int)pointer + 1);\n              (*data)[4] = (uint)*(byte *)pointer;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          initialValue = checkAndUpdateData(data,result,initialValue);\n          if (initialValue == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            returnValue = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            returnValue = 1;\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "values",
                "param_6": "value4",
                "param_7": "result",
                "iVar1": "initialValue",
                "iVar2": "tempValue",
                "uVar3": "returnValue",
                "puVar4": "pointer",
                "get_dat_value_080015a0": "getInitialDatValue",
                "update_data_08002640": "updateData",
                "check_flagged_bit_and_update_parameters_08002bb4": "checkAndUpdateParameters",
                "check_and_update_data_08002c2e": "checkAndUpdateData"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **data,undefined2 value_1,undefined2 value_2,undefined2 value_3,uint *buffer,\n            undefined2 value_4,uint limit)\n\n{\n  int data_value_1;\n  uint value;\n  int data_value_2;\n  undefined4 result;\n  uint *ptr;\n  \n  data_value_1 = get_dat_value();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        data_value_2 = 0;\n        goto LAB_08002040;\n      }\n      data_value_2 = get_dat_value();\n    } while ((uint)(data_value_2 - data_value_1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    data_value_2 = 3;\nLAB_08002040:\n    if (data_value_2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = buffer;\n        *(undefined2 *)((int)data + 0x2a) = value_4;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        data_value_2 = process_input_data(data,value_1,value_2,value_3,limit,data_value_1);\n        if (data_value_2 == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disable_IRQ_interrupts();\n            **data = **data | 0x200;\n            enable_IRQ_interrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disable_IRQ_interrupts();\n            **data = **data & 0xfffffbff;\n            enable_IRQ_interrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                data_value_2 = check_conditions(data,limit,data_value_1);\n                if (data_value_2 != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    data_value_2 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((limit == 0xffffffff) ||\n                        ((limit != 0 && (data_value_2 = get_dat_value(), (uint)(data_value_2 - data_value_1) <= limit)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                data_value_2 = 3;\nLAB_080022fa:\n                if (data_value_2 != 0) {\n                  return 3;\n                }\n                disable_IRQ_interrupts();\n                **data = **data | 0x200;\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_IRQ_interrupts();\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    data_value_2 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((limit == 0xffffffff) ||\n                        ((limit != 0 && (data_value_2 = get_dat_value(), (uint)(data_value_2 - data_value_1) <= limit)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                data_value_2 = 3;\nLAB_08002418:\n                if (data_value_2 != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disable_IRQ_interrupts();\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    data_value_2 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((limit == 0xffffffff) ||\n                        ((limit != 0 && (data_value_2 = get_dat_value(), (uint)(data_value_2 - data_value_1) <= limit)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                data_value_2 = 3;\nLAB_0800250a:\n                if (data_value_2 != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_IRQ_interrupts();\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              data_value_2 = check_conditions(data,limit,data_value_1);\n              if (data_value_2 != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              value = (*data)[4];\n              ptr = data[9];\n              data[9] = (uint *)((int)ptr + 1);\n              *(char *)ptr = (char)value;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                value = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "buffer",
                "param_6": "value_4",
                "param_7": "limit",
                "iVar1": "data_value_1",
                "uVar2": "value",
                "iVar3": "data_value_2",
                "uVar4": "result",
                "puVar5": "ptr",
                "get_dat_value_080015a0": "get_dat_value",
                "process_input_data_080027f4": "process_input_data",
                "check_conditions_08002ca8": "check_conditions",
                "disableIRQinterrupts": "disable_IRQ_interrupts",
                "enableIRQinterrupts": "enable_IRQ_interrupts"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_data_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateData_08002640(uint **data,byte flag,undefined2 value,short type,uint limit,int threshold)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = get_dat_value_080015a0(), (uint)(result - threshold) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_modify_data_08002ad8(data,0x10002,limit,threshold);\n    if (result == 0) {\n      result = check_flagged_bit_and_update_parameters_08002bb4(data,limit,threshold,(*data)[6]);\n      if (result == 0) {\n        if (type == 1) {\n          (*data)[4] = (uint)(byte)value;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value >> 8);\n          result = check_flagged_bit_and_update_parameters_08002bb4(data,limit,threshold);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value;\n        }\n        returnValue = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_data_08002640",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "type",
                "param_5": "limit",
                "param_6": "threshold",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "process_input_data_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nprocessInputData_080027f4(uint **inputData,byte mode,undefined2 flag,short condition,uint limit,int value)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **inputData = **inputData | 0x400;\n  **inputData = **inputData | 0x100;\n  do {\n    if ((~(*inputData)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = get_dat_value_080015a0(), (uint)(result - value) <= limit))));\n  inputData[0xc] = (uint *)0x0;\n  *(undefined *)((int)inputData + 0x3d) = 0x20;\n  *(undefined *)((int)inputData + 0x3e) = 0;\n  *(undefined *)(inputData + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*inputData)[4] = mode & 0xfe;\n    result = check_and_modify_data_08002ad8(inputData,0x10002,limit,value);\n    if (result == 0) {\n      result = check_flagged_bit_and_update_parameters_08002bb4(inputData,limit,value,(*inputData)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*inputData)[4] = (uint)(byte)flag;\n        }\n        else {\n          (*inputData)[4] = (uint)(byte)((ushort)flag >> 8);\n          result = check_flagged_bit_and_update_parameters_08002bb4(inputData,limit,value);\n          if (result != 0) {\n            if (inputData[0x10] == (uint *)0x4) {\n              **inputData = **inputData | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*inputData)[4] = (uint)(byte)flag;\n        }\n        result = check_flagged_bit_and_update_parameters_08002bb4(inputData,limit,value);\n        if (result == 0) {\n          **inputData = **inputData | 0x100;\n          do {\n            if ((~(*inputData)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = get_dat_value_080015a0(), (uint)(result - value) <= limit))));\n          inputData[0xc] = (uint *)0x0;\n          *(undefined *)((int)inputData + 0x3d) = 0x20;\n          *(undefined *)((int)inputData + 0x3e) = 0;\n          *(undefined *)(inputData + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*inputData)[4] = (uint)(mode | 1);\n            result = check_and_modify_data_08002ad8(inputData,0x10002,limit,value);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (inputData[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (inputData[0x10] == (uint *)0x4) {\n          **inputData = **inputData | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (inputData[0x10] == (uint *)0x4) {\n        **inputData = **inputData | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (inputData[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "process_input_data_080027f4",
                "param_1": "inputData",
                "param_2": "mode",
                "param_3": "flag",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "value",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_modify_data_08002ad8",
            "code": "\nundefined4 checkAndModifyData_08002ad8(uint **data,uint value,uint maxValue,int comparisonValue)\n\n{\n  int dataValue;\n  char isNonZero;\n  uint tempValue;\n  bool isNonZeroValue;\n  \n  do {\n    if ((value >> 0x10 & 0xff) == 1) {\n      tempValue = value & ~(*data)[5] & 0xffff;\n      isNonZeroValue = tempValue != 0;\n      if (isNonZeroValue) {\n        tempValue = 1;\n      }\n      isNonZero = (char)tempValue;\n      if (!isNonZeroValue) {\n        isNonZero = '\\0';\n      }\n    }\n    else {\n      tempValue = value & ~(*data)[6] & 0xffff;\n      isNonZeroValue = tempValue != 0;\n      if (isNonZeroValue) {\n        tempValue = 1;\n      }\n      isNonZero = (char)tempValue;\n      if (!isNonZeroValue) {\n        isNonZero = '\\0';\n      }\n    }\n    if (isNonZero == '\\0') {\n      return 0;\n    }\n    if (((*data)[5] & 0x400) == 0x400) {\n      **data = **data | 0x200;\n      (*data)[5] = 0xfffffbff;\n      data[0x10] = (uint *)0x4;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 1;\n    }\n  } while ((maxValue == 0xffffffff) ||\n          ((maxValue != 0 && (dataValue = get_dat_value_080015a0(), (uint)(dataValue - comparisonValue) <= maxValue))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_modify_data_08002ad8",
                "param_1": "data",
                "param_2": "value",
                "param_3": "maxValue",
                "param_4": "comparisonValue",
                "iVar1": "dataValue",
                "cVar2": "isNonZero",
                "uVar3": "tempValue",
                "bVar4": "isNonZeroValue"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_flagged_bit_and_update_parameters_08002bb4",
            "code": "\nundefined4 check_flagged_bit_and_update_parameters_08002bb4(int *input_array,uint size_limit,int offset)\n\n{\n  int flag_result;\n  \n  while( true ) {\n    if ((*(uint *)(*input_array + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    flag_result = check_flagged_bit(input_array);\n    if (flag_result != 0) break;\n    if ((size_limit != 0xffffffff) &&\n       ((size_limit == 0 || (flag_result = get_dat_value(), size_limit < (uint)(flag_result - offset))))) {\n      input_array[0x10] = input_array[0x10] | 0x20;\n      input_array[0xc] = 0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)(input_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_flagged_bit_and_update_parameters_08002bb4",
                "param_1": "input_array",
                "param_2": "size_limit",
                "param_3": "offset",
                "iVar1": "flag_result",
                "check_flagged_bit_08002d3c": "check_flagged_bit",
                "get_dat_value_080015a0": "get_dat_value"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_update_data_08002c2e",
            "code": "\nundefined4 check_and_update_data_08002c2e(int *data_ptr,uint data_value,int offset)\n\n{\n  int flag_check_result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 4) == 4) {\n      return 0;\n    }\n    flag_check_result = check_flagged_bit_08002d3c(data_ptr);\n    if (flag_check_result != 0) break;\n    if ((data_value != 0xffffffff) &&\n       ((data_value == 0 || (flag_check_result = get_dat_value_080015a0(), data_value < (uint)(flag_check_result - offset))))) {\n      data_ptr[0x10] = data_ptr[0x10] | 0x20;\n      data_ptr[0xc] = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_update_data_08002c2e",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "param_3": "offset",
                "iVar1": "flag_check_result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_conditions_08002ca8",
            "code": "\nundefined4 checkConditions_08002ca8(int *ptrArray,uint size,int value)\n\n{\n  int dataValue;\n  \n  while( true ) {\n    if ((*(uint *)(*ptrArray + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*ptrArray + 0x14) & 0x10) == 0x10) break;\n    if ((size == 0) || (dataValue = get_dat_value_080015a0(), size < (uint)(dataValue - value))) {\n      ptrArray[0x10] = ptrArray[0x10] | 0x20;\n      *(undefined *)((int)ptrArray + 0x3d) = 0x20;\n      *(undefined *)(ptrArray + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*ptrArray + 0x14) = 0xffffffef;\n  ptrArray[0x10] = 0;\n  ptrArray[0xc] = 0;\n  *(undefined *)((int)ptrArray + 0x3d) = 0x20;\n  *(undefined *)(ptrArray + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_conditions_08002ca8",
                "param_1": "ptrArray",
                "param_2": "size",
                "param_3": "value",
                "iVar1": "dataValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flagged_bit_08002d3c",
            "code": "\nbool checkFlaggedBit_08002d3c(int *array)\n\n{\n  bool isFlagged;\n  \n  isFlagged = (*(uint *)(*array + 0x14) & 0x400) == 0x400;\n  if (isFlagged) {\n    *(undefined4 *)(*array + 0x14) = 0xfffffbff;\n    value1 = 4;\n    value2 = 0;\n    *(undefined *)((int)array + 0x3d) = 0x20;\n    *(undefined *)(array + 0xf) = 0;\n  }\n  return isFlagged;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flagged_bit_08002d3c",
                "param_1": "array",
                "bVar1": "isFlagged",
                "param_1[0x10]": "value1",
                "param_1[0xc]": "value2"
            },
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_and_control_feature_08002d98",
            "code": "\n\n\nundefined4 checkAndControlFeature_08002d98(uint *parameters)\n\n{\n  int initialValue;\n  int currentValue;\n  undefined4 result;\n  bool isBitSet;\n  \n  if ((*parameters & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (parameters[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (parameters[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (parameters[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (parameters[1] == 0) {\n        initialValue = getValue();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = getValue();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialValue = getValue();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = getValue();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (parameters[4] == 0) {\n      _DAT_42420000 = 0;\n      initialValue = getValue();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = getValue();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialValue = getValue();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = getValue();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[6] == 0) {\n      _DAT_42420480 = 0;\n      initialValue = getValue();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = getValue();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialValue = getValue();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = getValue();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      delayFunction(1);\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    isBitSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = getValue();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = getValue();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (parameters[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (parameters[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (parameters[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (parameters[3] == 0) {\n      initialValue = getValue();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = getValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialValue = getValue();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = getValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (parameters[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (parameters[7] == 2) {\n    _DAT_42420060 = 0;\n    initialValue = getValue();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (parameters[8] == 0x10000) {\n          _DAT_40021004 = parameters[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = parameters[9] | parameters[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initialValue = getValue();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentValue = getValue();\n          if (2 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentValue = getValue();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialValue = getValue();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentValue = getValue();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_and_control_feature_08002d98",
                "param_1": "parameters",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "bVar4": "isBitSet",
                "get_dat_value_080015a0": "getValue",
                "delay_function_08003568": "delayFunction"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "update_memory_usage_08003260",
            "code": "\n\n\nundefined4 update_memory_usage_08003260(uint *mem_info,uint new_size)\n\n{\n  int initial_value;\n  int current_value;\n  uint time_delay;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < new_size) &&\n     (_DAT_40022000 = new_size | _DAT_40022000 & 0xfffffff8, new_size != (new_size & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*mem_info & 2) != 0) {\n      _DAT_40021004 = mem_info[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*mem_info & 1) == 0) {\nLAB_08003394:\n      if ((new_size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = new_size | _DAT_40022000 & 0xfffffff8, new_size != (new_size & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*mem_info & 4) != 0) {\n          _DAT_40021004 = mem_info[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*mem_info & 8) != 0) {\n          _DAT_40021004 = mem_info[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        time_delay = calculate_time_delay();\n        DAT_20000018 = time_delay >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        update_memory_function(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (mem_info[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((mem_info[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = mem_info[1] | _DAT_40021004 & 0xfffffffc;\n      initial_value = get_dat_value();\n      if (mem_info[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_value = get_dat_value();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        result = 3;\n      }\n      else if (mem_info[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_value = get_dat_value();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_value = get_dat_value();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003260": "update_memory_usage_08003260",
                "param_1": "mem_info",
                "param_2": "new_size",
                "uVar4": "result",
                "uVar3": "time_delay",
                "calculate_time_delay_08003440": "calculate_time_delay",
                "update_memory_function_0800151c": "update_memory_function",
                "get_dat_value_080015a0": "get_dat_value",
                "iVar1": "initial_value",
                "iVar2": "current_value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_080015a0",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_time_delay_08003440",
            "code": "\n\n\nuint calculateTimeDelay_08003440(void)\n\n{\n  undefined2 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  uint result1;\n  undefined4 result2;\n  uint result3;\n  uint timeDelay;\n  uint temp;\n  \n  value2 = 0x5040302;\n  value3 = 0x9080706;\n  value4 = 0xd0c0b0a;\n  value5 = 0x10100f0e;\n  value1 = 0x201;\n  result2 = 0;\n  temp = 0;\n  result1 = 0;\n  timeDelay = 0;\n  result3 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    timeDelay = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result1 = (uint)*(byte *)((int)&value2 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp = result1 * 4000000;\n    }\n    else {\n      temp = (result1 * 8000000) / (uint)*(byte *)((int)&value1 + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    timeDelay = temp;\n  }\n  else {\n    timeDelay = 8000000;\n  }\n  return timeDelay;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_time_delay_08003440",
                "local_30": "value1",
                "local_2c": "value2",
                "uStack_28": "value3",
                "uStack_24": "value4",
                "uStack_20": "value5",
                "local_1c": "result1",
                "local_18": "result2",
                "local_14": "result3",
                "local_10": "timeDelay",
                "local_c": "temp"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_global_data_08003504",
            "code": "\nundefined4 getGlobalData_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_global_data_08003504"
            },
            "calling": [
                "FUN_08003518",
                "FUN_080052a0",
                "FUN_08003540"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shifted_global_data_08003518",
            "code": "\n\n\nuint shiftedGlobalData_08003518(void)\n\n{\n  uint globalData;\n  \n  globalData = get_global_data_08003504();\n  return globalData >> *(byteValue *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shifted_global_data_08003518",
                "uVar1": "globalData",
                "sbyte": "byteValue"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "get_shifted_value_08003540",
            "code": "\n\n\nuint get_shifted_value_08003540(void)\n\n{\n  uint global_data;\n  \n  global_data = get_global_data_08003504();\n  return global_data >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "get_shifted_value_08003540",
                "uVar1": "global_data"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int inputValue)\n\n{\n  bool continueLoop;\n  int iterationCount;\n  \n  iterationCount = inputValue * (DAT_20000018 / 8000);\n  do {\n    continueLoop = iterationCount != 0;\n    iterationCount = iterationCount + -1;\n  } while (continueLoop);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "inputValue",
                "bVar1": "continueLoop",
                "local_c": "iterationCount"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_and_update_param_080035a4",
            "code": "\nundefined4 checkAndUpdateParam_080035a4(undefined4 *param)\n\n{\n  undefined4 result;\n  \n  if (param == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)param + 0x3d) == '\\0') {\n      *(undefined *)(param + 0xf) = 0;\n      FUNC_080035fa(param);\n    }\n    *(undefined *)((int)param + 0x3d) = 2;\n    updateMemory(*param,param + 1);\n    *(undefined *)((int)param + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_and_update_param_080035a4",
                "param_1": "param",
                "uVar1": "result",
                "update_memory_08003c94": "updateMemory"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_bit_in_array_0800360c",
            "code": "\nundefined4 setBitInArray_0800360c(uint **arrayPtr)\n\n{\n  (*arrayPtr)[3] = (*arrayPtr)[3] | 1;\n  **arrayPtr = **arrayPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_bit_in_array_0800360c",
                "param_1": "arrayPtr"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "validate_and_update_memory_08003640",
            "code": "\nundefined4 validate_and_update_memory_08003640(undefined4 *memory_pointer)\n\n{\n  undefined4 return_value;\n  \n  if (memory_pointer == (undefined4 *)0x0) {\n    return_value = 1;\n  }\n  else {\n    if (*(char *)((int)memory_pointer + 0x3d) == '\\0') {\n      *(undefined *)(memory_pointer + 0xf) = 0;\n      FUNC_08003696(memory_pointer);\n    }\n    *(undefined *)((int)memory_pointer + 0x3d) = 2;\n    update_memory_contents(*memory_pointer,memory_pointer + 1);\n    *(undefined *)((int)memory_pointer + 0x3d) = 1;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08003640": "validate_and_update_memory_08003640",
                "param_1": "memory_pointer",
                "uVar1": "return_value",
                "update_memory_08003c94": "update_memory_contents"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_flags_080036a8",
            "code": "\nundefined4 updateFlags_080036a8(uint **data,undefined4 flag)\n\n{\n  updateBit(*data,flag,1);\n  if (*data == (uint *)0x40012c00) {\n    (*data)[0x11] = (*data)[0x11] | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_flags_080036a8",
                "param_1": "data",
                "param_2": "flag",
                "update_bit_080041ea": "updateBit"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_data_080036f8",
            "code": "\nvoid processData_080036f8(int *data)\n\n{\n  if (((*(uint *)(*data + 0x10) & 2) == 2) && ((*(uint *)(*data + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 7) = 1;\n    if ((*(uint *)(*data + 0x18) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 4) == 4) && ((*(uint *)(*data + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 7) = 2;\n    if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 8) == 8) && ((*(uint *)(*data + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 7) = 4;\n    if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 0x10) == 0x10) && ((*(uint *)(*data + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffef;\n    *(undefined *)(data + 7) = 8;\n    if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 1) == 1) && ((*(uint *)(*data + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffe;\n    updateAndCalculateResult(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x80) == 0x80) && ((*(uint *)(*data + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffff7f;\n    FUNC_08004378(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x40) == 0x40) && ((*(uint *)(*data + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffbf;\n    FUNC_08003c80(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x20) == 0x20) && ((*(uint *)(*data + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffdf;\n    FUNC_08004366(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "param_1": "data",
                "update_and_calculate_result_08004f78": "updateAndCalculateResult"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004f78",
                "FUN_08003c6e",
                "FUN_08004378",
                "FUN_08003c4a",
                "FUN_08004366",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_configuration_08003908",
            "code": "\nundefined4 update_configuration_08003908(int *config_ptr,int data_ptr,undefined4 option)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(config_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(config_ptr + 0xf) = 1;\n    *(undefined *)((int)config_ptr + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      update_parameters_08003d60(*config_ptr,data_ptr);\n      *(uint *)(*config_ptr + 0x18) = *(uint *)(*config_ptr + 0x18) | 8;\n      *(uint *)(*config_ptr + 0x18) = *(uint *)(*config_ptr + 0x18) & 0xfffffffb;\n      *(uint *)(*config_ptr + 0x18) = *(uint *)(data_ptr + 0x10) | *(uint *)(*config_ptr + 0x18);\n      break;\n    case 4:\n      update_configuration_08003908_08003e38(*config_ptr,data_ptr);\n      *(uint *)(*config_ptr + 0x18) = *(uint *)(*config_ptr + 0x18) | 0x800;\n      *(uint *)(*config_ptr + 0x18) = *(uint *)(*config_ptr + 0x18) & 0xfffffbff;\n      *(uint *)(*config_ptr + 0x18) = *(int *)(data_ptr + 0x10) << 8 | *(uint *)(*config_ptr + 0x18);\n      break;\n    case 8:\n      update_config_08003f18(*config_ptr,data_ptr);\n      *(uint *)(*config_ptr + 0x1c) = *(uint *)(*config_ptr + 0x1c) | 8;\n      *(uint *)(*config_ptr + 0x1c) = *(uint *)(*config_ptr + 0x1c) & 0xfffffffb;\n      *(uint *)(*config_ptr + 0x1c) = *(uint *)(data_ptr + 0x10) | *(uint *)(*config_ptr + 0x1c);\n      break;\n    case 0xc:\n      update_data_08003ff8(*config_ptr,data_ptr);\n      *(uint *)(*config_ptr + 0x1c) = *(uint *)(*config_ptr + 0x1c) | 0x800;\n      *(uint *)(*config_ptr + 0x1c) = *(uint *)(*config_ptr + 0x1c) & 0xfffffbff;\n      *(uint *)(*config_ptr + 0x1c) = *(int *)(data_ptr + 0x10) << 8 | *(uint *)(*config_ptr + 0x1c);\n    }\n    *(undefined *)((int)config_ptr + 0x3d) = 1;\n    *(undefined *)(config_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_configuration_08003908",
                "param_1": "config_ptr",
                "param_2": "data_ptr",
                "param_3": "option",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "process_operation_08003a94",
            "code": "\nundefined4 processOperation_08003a94(int *inputArray,uint *inputParams)\n\n{\n  undefined4 result;\n  uint paramValue;\n  \n  if (*(char *)(inputArray + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(inputArray + 0xf) = 1;\n    *(undefined *)((int)inputArray + 0x3d) = 2;\n    *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) & 0xffff0088;\n    paramValue = *inputParams;\n    if (paramValue == 0x40) {\n      update_memory_and_value_080040a0(*inputArray,inputParams[1],inputParams[3]);\n      update_memory_value_0800416a(*inputArray,0x40);\n    }\n    else if (paramValue < 0x41) {\n      if (paramValue == 0x10) {\n        update_memory_value_0800416a(*inputArray,0x10);\n      }\n      else if (paramValue < 0x11) {\n        if (paramValue == 0) {\n          update_memory_value_0800416a(*inputArray,0);\n        }\n      }\n      else if (paramValue == 0x20) {\n        update_memory_value_0800416a(*inputArray,0x20);\n      }\n      else if (paramValue == 0x30) {\n        update_memory_value_0800416a(*inputArray,0x30);\n      }\n    }\n    else if (paramValue == 0x70) {\n      update_parameter_080041a8(*inputArray,inputParams[2],inputParams[1],inputParams[3]);\n      *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) & 0xffffff88 | 0x77;\n    }\n    else if (paramValue < 0x71) {\n      if (paramValue == 0x50) {\n        update_memory_and_value_080040a0(*inputArray,inputParams[1],inputParams[3]);\n        update_memory_value_0800416a(*inputArray,0x50);\n      }\n      else if (paramValue == 0x60) {\n        update_flags_08004104(*inputArray,inputParams[1],inputParams[3]);\n        update_memory_value_0800416a(*inputArray,0x60);\n      }\n    }\n    else if (paramValue == 0x1000) {\n      *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) & 0xfffffff8;\n    }\n    else if (paramValue == 0x2000) {\n      update_parameter_080041a8(*inputArray,inputParams[2],inputParams[1],inputParams[3]);\n      *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) | 0x4000;\n    }\n    *(undefined *)((int)inputArray + 0x3d) = 1;\n    *(undefined *)(inputArray + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "process_operation_08003a94",
                "param_1": "inputArray",
                "param_2": "inputParams",
                "uVar1": "result",
                "uVar2": "paramValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_08003c94",
            "code": "\nvoid updateMemory_08003c94(uint *memory,uint *data)\n\n{\n  uint currentValue;\n  \n  currentValue = *memory;\n  if ((((memory == (uint *)0x40012c00) || (memory == (uint *)0x40000000)) ||\n      (memory == (uint *)0x40000400)) || (memory == (uint *)0x40000800)) {\n    currentValue = data[1] | currentValue & 0xffffff8f;\n  }\n  if (((memory == (uint *)0x40012c00) || (memory == (uint *)0x40000000)) ||\n     ((memory == (uint *)0x40000400 || (memory == (uint *)0x40000800)))) {\n    currentValue = data[3] | currentValue & 0xfffffcff;\n  }\n  *memory = data[5] | currentValue & 0xffffff7f;\n  memory[0xb] = data[2];\n  memory[10] = *data;\n  if (memory == (uint *)0x40012c00) {\n    uRam40012c30 = data[4];\n  }\n  memory[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "param_1": "memory",
                "param_2": "data",
                "local_c": "currentValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_parameters_08003d60",
            "code": "\nvoid updateParameters_08003d60(int param_address,uint *param_array)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(param_address + 0x20) = *(uint *)(param_address + 0x20) & 0xfffffffe;\n  local_value = *(uint *)(param_address + 4);\n  value1 = *param_array;\n  value2 = array_value2 | *(uint *)(param_address + 0x20) & 0xfffffffd;\n  if (param_address == 0x40012c00) {\n    value2 = (array_value4 | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = array_value5 | array_value6 | local_value & 0xfffffcff;\n  }\n  *(uint *)(param_address + 4) = local_value;\n  *(uint *)(param_address + 0x18) = value1 | *(uint *)(param_address + 0x18) & 0xffffff8c;\n  *(uint *)(param_address + 0x34) = array_value3;\n  *(uint *)(param_address + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_parameters_08003d60",
                "param_1": "param_address",
                "param_2": "param_array",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "local_value",
                "param_2[2]": "array_value2",
                "param_2[1]": "array_value3",
                "param_2[3]": "array_value4",
                "param_2[6]": "array_value5",
                "param_2[5]": "array_value6"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_configuration_08003e38",
            "code": "\nvoid updateConfiguration_08003e38(int configAddress,int *configData)\n\n{\n  int var1;\n  uint var2;\n  uint var3;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  var3 = *(uint *)(configAddress + 4);\n  var1 = *configData;\n  var2 = configData[2] << 4 | *(uint *)(configAddress + 0x20) & 0xffffffdf;\n  if (configAddress == 0x40012c00) {\n    var2 = (configData[3] << 4 | var2 & 0xffffff7f) & 0xffffffbf;\n    var3 = configData[6] << 2 | configData[5] << 2 | var3 & 0xfffff3ff;\n  }\n  *(uint *)(configAddress + 4) = var3;\n  *(uint *)(configAddress + 0x18) = var1 << 8 | *(uint *)(configAddress + 0x18) & 0xffff8cff;\n  *(int *)(configAddress + 0x38) = configData[1];\n  *(uint *)(configAddress + 0x20) = var2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_configuration_08003e38",
                "param_1": "configAddress",
                "param_2": "configData",
                "iVar1": "var1",
                "uVar2": "var2",
                "local_10": "var3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_config_08003f18",
            "code": "\nvoid updateConfig_08003f18(int configAddress,uint *configValues)\n\n{\n  uint originalValue;\n  uint updatedValue;\n  uint currentValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffeff;\n  currentValue = *(uint *)(configAddress + 4);\n  originalValue = *configValues;\n  updatedValue = configValues[2] << 8 | *(uint *)(configAddress + 0x20) & 0xfffffdff;\n  if (configAddress == 0x40012c00) {\n    updatedValue = (configValues[3] << 8 | updatedValue & 0xfffff7ff) & 0xfffffbff;\n    currentValue = configValues[6] << 4 | configValues[5] << 4 | currentValue & 0xffffcfff;\n  }\n  *(uint *)(configAddress + 4) = currentValue;\n  *(uint *)(configAddress + 0x1c) = originalValue | *(uint *)(configAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(configAddress + 0x3c) = configValues[1];\n  *(uint *)(configAddress + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_config_08003f18",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "originalValue",
                "uVar2": "updatedValue",
                "local_10": "currentValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_data_08003ff8",
            "code": "\nvoid updateData_08003ff8(int dataAddr,int *params)\n\n{\n  int value1;\n  int value2;\n  uint temp;\n  \n  *(uint *)(dataAddr + 0x20) = *(uint *)(dataAddr + 0x20) & 0xffffefff;\n  temp = *(uint *)(dataAddr + 4);\n  value1 = *params;\n  value2 = params[2];\n  if (dataAddr == 0x40012c00) {\n    temp = params[5] << 6 | temp & 0xffffbfff;\n  }\n  *(uint *)(dataAddr + 4) = temp;\n  *(uint *)(dataAddr + 0x1c) = value1 << 8 | *(uint *)(dataAddr + 0x1c) & 0xffff8cff;\n  *(int *)(dataAddr + 0x40) = params[1];\n  *(uint *)(dataAddr + 0x20) = value2 << 0xc | *(uint *)(dataAddr + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "dataAddr",
                "param_2": "params",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "temp"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_memory_and_value_080040a0",
            "code": "\nvoid updateMemoryAndValue_080040a0(int ptr_arg,uint value_arg,int offset_arg)\n\n{\n  uint temp_var;\n  \n  temp_var = *(uint *)(ptr_arg + 0x20);\n  *(uint *)(ptr_arg + 0x20) = *(uint *)(ptr_arg + 0x20) & 0xfffffffe;\n  *(uint *)(ptr_arg + 0x18) = offset_arg << 4 | *(uint *)(ptr_arg + 0x18) & 0xffffff0f;\n  *(uint *)(ptr_arg + 0x20) = value_arg | temp_var & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_memory_and_value_080040a0",
                "param_1": "ptr_arg",
                "param_2": "value_arg",
                "param_3": "offset_arg",
                "uVar1": "temp_var"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_flags_08004104",
            "code": "\nvoid updateFlags_08004104(int baseAddress,int value2,int value3)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  *(uint *)(baseAddress + 0x18) = value3 << 0xc | *(uint *)(baseAddress + 0x18) & 0xffff0fff;\n  *(uint *)(baseAddress + 0x20) = value2 << 4 | *(uint *)(baseAddress + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_flags_08004104",
                "param_1": "baseAddress",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_memory_value_0800416a",
            "code": "\nvoid updateMemoryValue_0800416a(int baseAddress,ushort dataValue)\n\n{\n  *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) & 0xffffff8f | (uint)(dataValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_memory_value_0800416a",
                "param_1": "baseAddress",
                "param_2": "dataValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_parameter_080041a8",
            "code": "\nvoid updateParameter_080041a8(int dataLocation,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(dataLocation + 8) = value1 | value3 << 8 | value2 | *(uint *)(dataLocation + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_parameter_080041a8",
                "param_1": "dataLocation",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bit_080041ea",
            "code": "\nvoid updateBit_080041ea(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bit_080041ea",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_data_0800422e",
            "code": "\nundefined4 updateData_0800422e(int *dataArray,uint *paramArray)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(dataArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(dataArray + 0xf) = 1;\n    *(uint *)(*dataArray + 0x44) =\n         paramArray[6] |\n         (paramArray[6] |\n         (paramArray[5] |\n         (paramArray[4] |\n         (*paramArray | (paramArray[1] | (paramArray[2] | paramArray[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(dataArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_data_0800422e",
                "param_1": "dataArray",
                "param_2": "paramArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_parameter_080042de",
            "code": "\nundefined4 updateParameter_080042de(int *parameter1,uint *parameter2)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(parameter1 + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(parameter1 + 0xf) = 1;\n    *(undefined *)((int)parameter1 + 0x3d) = 2;\n    *(uint *)(*parameter1 + 4) = *(uint *)(*parameter1 + 4) & 0xffffff8f;\n    *(uint *)(*parameter1 + 4) = *parameter2 | *(uint *)(*parameter1 + 4);\n    *(uint *)(*parameter1 + 8) = *(uint *)(*parameter1 + 8) & 0xffffff7f;\n    *(uint *)(*parameter1 + 8) = parameter2[1] | *(uint *)(*parameter1 + 8);\n    *(undefined *)((int)parameter1 + 0x3d) = 1;\n    *(undefined *)(parameter1 + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_parameter_080042de",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_structure_0800438a",
            "code": "\nundefined4 initializeDataStructure_0800438a(int *dataStructure)\n\n{\n  undefined4 status;\n  \n  if (dataStructure == (int *)0x0) {\n    status = 1;\n  }\n  else {\n    if (*(char *)((int)dataStructure + 0x39) == '\\0') {\n      *(undefined *)(dataStructure + 0xe) = 0;\n      FUNC_08004424(dataStructure);\n    }\n    *(undefined *)((int)dataStructure + 0x39) = 0x24;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) & 0xffffdfff;\n    calculateAndSetValues(dataStructure);\n    *(uint *)(*dataStructure + 0x10) = *(uint *)(*dataStructure + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataStructure + 0x14) = *(uint *)(*dataStructure + 0x14) & 0xffffffd5;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) | 0x2000;\n    dataStructure[0xf] = 0;\n    *(undefined *)((int)dataStructure + 0x39) = 0x20;\n    *(undefined *)((int)dataStructure + 0x3a) = 0x20;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_structure_0800438a",
                "param_1": "dataStructure",
                "uVar1": "status",
                "calculate_and_set_values_080046ec": "calculateAndSetValues"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **inputArray,ushort *data,short dataSize,uint maxValue)\n\n{\n  int startValue;\n  int currentValue;\n  undefined4 returnValue;\n  ushort *dataPointer;\n  \n  if (*(char *)((int)inputArray + 0x39) == ' ') {\n    if ((data == (ushort *)0x0) || (dataSize == 0)) {\n      returnValue = 1;\n    }\n    else if (*(char *)(inputArray + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputArray + 0xe) = 1;\n      inputArray[0xf] = (uint *)0x0;\n      *(undefined *)((int)inputArray + 0x39) = 0x21;\n      startValue = get_dat_value_080015a0();\n      *(short *)(inputArray + 9) = dataSize;\n      *(short *)((int)inputArray + 0x26) = dataSize;\n      dataPointer = data;\n      while (*(short *)((int)inputArray + 0x26) != 0) {\n        *(short *)((int)inputArray + 0x26) = *(short *)((int)inputArray + 0x26) + -1;\n        if (inputArray[2] == (uint *)0x1000) {\n          do {\n            if ((**inputArray & 0x80) == 0x80) {\n              currentValue = 0;\n              goto LAB_0800454c;\n            }\n          } while ((maxValue == 0xffffffff) ||\n                  ((maxValue != 0 && (currentValue = get_dat_value_080015a0(), (uint)(currentValue - startValue) <= maxValue))));\n          (*inputArray)[3] = (*inputArray)[3] & 0xfffffe5f;\n          (*inputArray)[5] = (*inputArray)[5] & 0xfffffffe;\n          *(undefined *)((int)inputArray + 0x39) = 0x20;\n          *(undefined *)((int)inputArray + 0x3a) = 0x20;\n          *(undefined *)(inputArray + 0xe) = 0;\n          currentValue = 3;\nLAB_0800454c:\n          if (currentValue != 0) {\n            return 3;\n          }\n          (*inputArray)[1] = *dataPointer & 0x1ff;\n          if (inputArray[4] == (uint *)0x0) {\n            dataPointer = dataPointer + 1;\n          }\n          else {\n            dataPointer = (ushort *)((int)dataPointer + 1);\n          }\n        }\n        else {\n          do {\n            if ((**inputArray & 0x80) == 0x80) {\n              currentValue = 0;\n              goto LAB_08004614;\n            }\n          } while ((maxValue == 0xffffffff) ||\n                  ((maxValue != 0 && (currentValue = get_dat_value_080015a0(), (uint)(currentValue - startValue) <= maxValue))));\n          (*inputArray)[3] = (*inputArray)[3] & 0xfffffe5f;\n          (*inputArray)[5] = (*inputArray)[5] & 0xfffffffe;\n          *(undefined *)((int)inputArray + 0x39) = 0x20;\n          *(undefined *)((int)inputArray + 0x3a) = 0x20;\n          *(undefined *)(inputArray + 0xe) = 0;\n          currentValue = 3;\nLAB_08004614:\n          if (currentValue != 0) {\n            return 3;\n          }\n          (*inputArray)[1] = (uint)*(byte *)dataPointer;\n          dataPointer = (ushort *)((int)dataPointer + 1);\n        }\n      }\n      do {\n        if ((**inputArray & 0x40) == 0x40) {\n          startValue = 0;\n          goto LAB_080046c6;\n        }\n      } while ((maxValue == 0xffffffff) ||\n              ((maxValue != 0 && (currentValue = get_dat_value_080015a0(), (uint)(currentValue - startValue) <= maxValue))));\n      (*inputArray)[3] = (*inputArray)[3] & 0xfffffe5f;\n      (*inputArray)[5] = (*inputArray)[5] & 0xfffffffe;\n      *(undefined *)((int)inputArray + 0x39) = 0x20;\n      *(undefined *)((int)inputArray + 0x3a) = 0x20;\n      *(undefined *)(inputArray + 0xe) = 0;\n      startValue = 3;\nLAB_080046c6:\n      if (startValue == 0) {\n        *(undefined *)((int)inputArray + 0x39) = 0x20;\n        *(undefined *)(inputArray + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "inputArray",
                "param_2": "data",
                "param_3": "dataSize",
                "param_4": "maxValue",
                "iVar1": "startValue",
                "iVar2": "currentValue",
                "uVar3": "returnValue",
                "local_58": "dataPointer"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_and_set_values_080046ec",
            "code": "\nvoid calculateAndSetValues_080046ec(int *parameters)\n\n{\n  ulonglong unsignedResult1;\n  int intValue1;\n  int intValue4;\n  uint unsignedResult2;\n  int intValue3;\n  undefined8 shiftedValue;\n  \n  *(uint *)(*parameters + 0x10) = parameters[3] | *(uint *)(*parameters + 0x10) & 0xffffcfff;\n  *(uint *)(*parameters + 0xc) =\n       *(uint *)(*parameters + 0xc) & 0xffffe9f3 | parameters[5] | parameters[2] | parameters[4];\n  *(uint *)(*parameters + 0x14) = parameters[6] | *(uint *)(*parameters + 0x14) & 0xfffffcff;\n  if (*parameters == 0x40013800) {\n    shiftedValue = getShiftedValue();\n    unsignedResult1 = (ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    intValue1 = getShiftedValue((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)(unsignedResult1 * 0x51eb851f));\n    intValue4 = parameters[1];\n    shiftedValue = getShiftedValue();\n    unsignedResult2 = ((uint)(intValue1 * 0x19) / (uint)(intValue4 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    intValue1 = getShiftedValue((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),unsignedResult2 * 0x51eb851f);\n    intValue3 = parameters[1];\n    intValue4 = getShiftedValue();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(intValue1 * 0x19) / (uint)(intValue3 << 2) +\n           (int)(((ulonglong)(uint)(intValue4 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(unsignedResult1 / 100) * 0x10 + (unsignedResult2 / 100 & 0xf0);\n  }\n  else {\n    shiftedValue = getShiftedGlobalData();\n    unsignedResult1 = (ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    intValue1 = getShiftedGlobalData((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)(unsignedResult1 * 0x51eb851f));\n    intValue4 = parameters[1];\n    shiftedValue = getShiftedGlobalData();\n    unsignedResult2 = ((uint)(intValue1 * 0x19) / (uint)(intValue4 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    intValue1 = getShiftedGlobalData((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),unsignedResult2 * 0x51eb851f);\n    intValue3 = parameters[1];\n    intValue4 = getShiftedGlobalData();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(intValue1 * 0x19) / (uint)(intValue3 << 2) +\n           (int)(((ulonglong)(uint)(intValue4 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(unsignedResult1 / 100) * 0x10 + (unsignedResult2 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_and_set_values_080046ec",
                "param_1": "parameters",
                "uVar1": "unsignedResult1",
                "iVar2": "intValue1",
                "iVar3": "intValue4",
                "uVar4": "unsignedResult2",
                "iVar5": "intValue3",
                "uVar6": "shiftedValue",
                "get_shifted_value_08003540": "getShiftedValue",
                "shifted_global_data_08003518": "getShiftedGlobalData"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_data_0800491c",
            "code": "\nvoid initializeData_0800491c(undefined4 *dataPointer)\n\n{\n  undefined flag;\n  undefined size;\n  undefined valuesArray [5];\n  \n  flag = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&flag,1);\n  size = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&size,1);\n  valuesArray[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,valuesArray,1);\n  *dataPointer = 0;\n  dataPointer[1] = 0;\n  dataPointer[2] = 0;\n  dataPointer[3] = 0;\n  dataPointer[4] = 0;\n  dataPointer[5] = 0;\n  dataPointer[6] = 0;\n  dataPointer[7] = 0;\n  dataPointer[8] = 0;\n  dataPointer[9] = 0;\n  dataPointer[10] = 0;\n  calculate_shifted_multiply_080049cc(dataPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "param_1": "dataPointer",
                "local_13": "flag",
                "local_12": "size",
                "local_11": "valuesArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_shifted_multiply_080049cc",
            "code": "\nvoid calculate_shifted_multiply_080049cc(int input_value)\n\n{\n  undefined4 modified_value;\n  undefined4 second_result;\n  undefined4 first_result;\n  undefined4 time_value;\n  int iteration_count;\n  int current_iteration;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  \n  iteration_count = 1;\n  value_4 = 0;\n  value_3 = 0;\n  value_2 = 0;\n  value_1 = 0;\n  time_value = (*DAT_20000a50)();\n  current_iteration = 0;\n  while( true ) {\n    if (iteration_count <= current_iteration) break;\n    first_result = 0;\n    second_result = 0;\n    update_values_08004ae0(input_value);\n    calculate_shifted_multiply_080049cc_08004d78(input_value,&first_result,&second_result);\n    value_2 = calculate_floating_point_08000aa8(value_2,first_result);\n    value_1 = calculate_floating_point_08000aa8(value_1,second_result);\n    value_4 = calculate_floating_point_08000aa8(value_4,*(undefined4 *)(input_value + 0x10));\n    value_3 = calculate_floating_point_08000aa8(value_3,*(undefined4 *)(input_value + 0x14));\n    time_value = (*DAT_20000a50)();\n    current_iteration = current_iteration + 1;\n  }\n  modified_value = calculate_modified_value_08000c10(iteration_count);\n  modified_value = calculate_float_08000e20(value_4,modified_value);\n  *(undefined4 *)(input_value + 0x1c) = modified_value;\n  modified_value = calculate_modified_value_08000c10(iteration_count);\n  modified_value = calculate_float_08000e20(value_3,modified_value);\n  *(undefined4 *)(input_value + 0x20) = modified_value;\n  modified_value = calculate_modified_value_08000c10(iteration_count);\n  modified_value = calculate_float_08000e20(value_2,modified_value);\n  *(undefined4 *)(input_value + 0x24) = modified_value;\n  modified_value = calculate_modified_value_08000c10(iteration_count);\n  modified_value = calculate_float_08000e20(value_1,modified_value);\n  *(undefined4 *)(input_value + 0x28) = modified_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_shifted_multiply_080049cc",
                "param_1": "input_value",
                "uVar1": "modified_value",
                "local_2c": "second_result",
                "local_28": "first_result",
                "local_24": "time_value",
                "local_20": "iteration_count",
                "local_1c": "current_iteration",
                "local_18": "value_1",
                "local_14": "value_2",
                "local_10": "value_3",
                "local_c": "value_4"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "update_values_08004ae0",
            "code": "\nvoid updateValues_08004ae0(undefined4 *outputArray)\n\n{\n  undefined4 uVar1;\n  undefined value1;\n  undefined value2;\n  undefined value3;\n  undefined value4;\n  undefined value5;\n  undefined value6;\n  undefined value7;\n  undefined value8;\n  undefined value9;\n  undefined value10;\n  undefined value11;\n  undefined value12;\n  undefined value13;\n  undefined value14;\n  short modifiedValue1;\n  short modifiedValue2;\n  short modifiedValue3;\n  short modifiedValue4;\n  short modifiedValue5;\n  short modifiedValue6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&value1,0xe);\n  modifiedValue6 = CONCAT11(value3,value4);\n  modifiedValue5 = CONCAT11(value5,value6);\n  modifiedValue4 = CONCAT11(value7,value8);\n  modifiedValue3 = CONCAT11(value9,value10);\n  modifiedValue2 = CONCAT11(value11,value12);\n  modifiedValue1 = CONCAT11(value13,value14);\n  uVar1 = calculateModifiedValue((int)CONCAT11(value1,value2));\n  *outputArray = uVar1;\n  uVar1 = calculateModifiedValue((int)modifiedValue6);\n  outputArray[1] = uVar1;\n  uVar1 = calculateModifiedValue((int)modifiedValue5);\n  outputArray[2] = uVar1;\n  uVar1 = calculateModifiedValue((int)modifiedValue4);\n  outputArray[3] = uVar1;\n  uVar1 = calculateModifiedValue((int)modifiedValue3);\n  outputArray[4] = uVar1;\n  uVar1 = calculateModifiedValue((int)modifiedValue2);\n  outputArray[5] = uVar1;\n  uVar1 = calculateModifiedValue((int)modifiedValue1);\n  outputArray[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "update_values_08004ae0",
                "param_1": "outputArray",
                "local_2c": "value1",
                "local_2b": "value2",
                "local_2a": "value3",
                "local_29": "value4",
                "local_28": "value5",
                "local_27": "value6",
                "local_26": "value7",
                "local_25": "value8",
                "local_24": "value9",
                "local_23": "value10",
                "local_22": "value11",
                "local_21": "value12",
                "local_20": "value13",
                "local_1f": "value14",
                "local_1e": "modifiedValue1",
                "local_1c": "modifiedValue2",
                "local_1a": "modifiedValue3",
                "local_18": "modifiedValue4",
                "local_16": "modifiedValue5",
                "local_14": "modifiedValue6",
                "calculate_modified_value_08000c10": "calculateModifiedValue"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculate_result_08004bd8(int input_data,undefined4 *output_data)\n\n{\n  undefined4 arithmetic_result;\n  undefined8 decoded_value_1;\n  undefined8 decoded_value_2;\n  \n  arithmetic_result = perform_arithmetic_08000aa4(*(undefined4 *)(input_data + 0x10),*(undefined4 *)(input_data + 0x1c));\n  decoded_value_1 = decode_value_08000418(DAT_200009e4);\n  decoded_value_2 = decode_value_08000418(arithmetic_result);\n  decoded_value_2 = calculate_shifted_multiply_080004c8((int)decoded_value_2,(int)((ulonglong)decoded_value_2 >> 0x20),0x83f5c366,0x3f340215);\n  decoded_value_1 = calculate_sum_0800015c((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),(int)decoded_value_2,\n                       (int)((ulonglong)decoded_value_2 >> 0x20));\n  DAT_200009e4 = calculate_floating_point_080009fc((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20));\n  decoded_value_1 = decode_value_08000418(*(undefined4 *)(input_data + 4));\n  decoded_value_1 = calculate_result_08004bd8_0800071c((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),0,0x40b00000);\n  decoded_value_2 = decode_value_08000418(*(undefined4 *)(input_data + 8));\n  decoded_value_2 = calculate_result_08004bd8_0800071c((int)decoded_value_2,(int)((ulonglong)decoded_value_2 >> 0x20),0,0x40b00000);\n  decoded_value_1 = thunk_calculate_result_08004bd8_08005838((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),(int)decoded_value_2,\n                             (int)((ulonglong)decoded_value_2 >> 0x20));\n  decoded_value_1 = calculate_shifted_multiply_080004c8((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),0,0x40668000);\n  decoded_value_1 = calculate_result_08004bd8_0800071c((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),0x54442d18,0x400921fb);\n  decoded_value_2 = decode_value_08000418(*(undefined4 *)(input_data + 0x24));\n  decoded_value_1 = calculate_bitwise_operation_08000158((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),(int)decoded_value_2,\n                       (int)((ulonglong)decoded_value_2 >> 0x20));\n  decoded_value_1 = calculate_sum_0800015c((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),0,0x40568000);\n  arithmetic_result = calculate_floating_point_080009fc((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    decoded_value_1 = decode_value_08000418(DAT_200009e4);\n    decoded_value_1 = calculate_shifted_multiply_080004c8((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),0x9999999a,0x3fe99999);\n    decoded_value_2 = decode_value_08000418(arithmetic_result);\n    decoded_value_2 = calculate_shifted_multiply_080004c8((int)decoded_value_2,(int)((ulonglong)decoded_value_2 >> 0x20),0x9999999a,0x3fc99999);\n    decoded_value_1 = calculate_sum_0800015c((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20),(int)decoded_value_2,\n                         (int)((ulonglong)decoded_value_2 >> 0x20));\n    DAT_200009e4 = calculate_floating_point_080009fc((int)decoded_value_1,(int)((ulonglong)decoded_value_1 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = arithmetic_result;\n  }\n  *output_data = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input_data",
                "param_2": "output_data",
                "uVar1": "arithmetic_result",
                "uVar2": "decoded_value_1",
                "uVar3": "decoded_value_2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08000aa4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_shifted_multiply_08004d78",
            "code": "\nvoid calculate_shifted_multiply_08004d78(undefined4 *input_array,undefined4 *output_value_1,undefined4 *output_value_2)\n\n{\n  undefined4 float_value_1;\n  undefined4 float_value_2;\n  undefined4 float_value_3;\n  undefined8 result_value;\n  undefined8 decoded_value;\n  \n  float_value_1 = calculate_float_08000e20(*input_array,0x45800000);\n  float_value_2 = calculate_float_08000e20(input_array[1],0x45800000);\n  float_value_3 = calculate_float_08000e20(input_array[2],0x45800000);\n  result_value = decode_value_08000418(float_value_2);\n  decoded_value = decode_value_08000418(float_value_3);\n  result_value = thunk_calculate_result_08005838((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)decoded_value,\n                             (int)((ulonglong)decoded_value >> 0x20));\n  result_value = calculate_shifted_multiply_08004d78_080004c8((int)result_value,(int)((ulonglong)result_value >> 0x20),0,0x40668000);\n  result_value = calculate_result_0800071c((int)result_value,(int)((ulonglong)result_value >> 0x20),0x54442d18,0x400921fb);\n  float_value_2 = calculate_floating_point_080009fc((int)result_value,(int)((ulonglong)result_value >> 0x20));\n  result_value = decode_value_08000418(float_value_1);\n  decoded_value = decode_value_08000418(float_value_3);\n  result_value = thunk_calculate_result_08005838((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)decoded_value,\n                             (int)((ulonglong)decoded_value >> 0x20));\n  result_value = calculate_shifted_multiply_08004d78_080004c8((int)result_value,(int)((ulonglong)result_value >> 0x20),0,0x40668000);\n  result_value = calculate_result_0800071c((int)result_value,(int)((ulonglong)result_value >> 0x20),0x54442d18,0x400921fb);\n  float_value_1 = calculate_floating_point_080009fc((int)result_value,(int)((ulonglong)result_value >> 0x20));\n  *output_value_1 = float_value_2;\n  *output_value_2 = float_value_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_shifted_multiply_08004d78",
                "param_1": "input_array",
                "param_2": "output_value_1",
                "param_3": "output_value_2",
                "uVar1": "float_value_1",
                "uVar2": "float_value_2",
                "uVar3": "float_value_3",
                "uVar4": "result_value",
                "uVar5": "decoded_value"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "send_software_interrupt_08004e6c",
            "code": "\nvoid sendSoftwareInterrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "send_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "check_and_send_interrupt_08004e74",
            "code": "\nundefined4 check_and_send_interrupt_08004e74(undefined4 interrupt_id)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = send_software_interrupt_08004e6c(1,interrupt_id,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "check_and_send_interrupt_08004e74",
                "param_1": "interrupt_id",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "process_data_from_binary_08004ea4",
            "code": "\nvoid process_data_from_binary_08004ea4(undefined input_param1,undefined input_param2,undefined4 input_param3,undefined2 input_param4)\n\n{\n  process_data(&DAT_20000a88,input_param1,input_param2,1,input_param3,input_param4,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "process_data_from_binary_08004ea4",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "process_data_08001ccc": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "process_data_08004ee8",
            "code": "\nvoid processData_08004ee8(undefined input1,undefined input2,undefined4 value1,undefined2 value2)\n\n{\n  process_data_08001f6c(&DAT_20000a88,input1,input2,1,value1,value2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "get_data_value_08004f2c",
            "code": "\nundefined4 get_data_value_08004f2c(void)\n\n{\n  undefined4 data_value;\n  \n  data_value = get_dat_value_080015a0();\n  return data_value;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "get_data_value_08004f2c",
                "uVar1": "data_value"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_and_store_data_08004f3c",
            "code": "\nvoid process_and_store_data_08004f3c(undefined4 input_param,undefined2 data_param)\n\n{\n  process_function(&DAT_20000adc,input_param,data_param,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_and_store_data_08004f3c",
                "param_1": "input_param",
                "param_2": "data_param",
                "process_data_08004436": "process_function"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_08004f60",
            "code": "\nvoid initializeMemory_08004f60(void)\n\n{\n  clearMemory(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60",
                "memset_08005d68": "clearMemory"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "update_and_calculate_result_08004f78",
            "code": "\nvoid update_and_calculate_result_08004f78(void)\n\n{\n  undefined4 result;\n  int isPresent;\n  undefined4 modifiedValue;\n  uint flippedValue;\n  undefined8 decodedValue;\n  byte validity;\n  \n  updateValues(&DAT_20000a5c);\n  calculateResult(&DAT_20000a5c,&DAT_20000ba0);\n  initializeMemory();\n  decodedValue = decodeValue(DAT_20000ba0);\n  initializeMemoryWithPitch(&DAT_20000ba8,\"Pitch: %f\\n\",(int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n  result = calculateLeadingZeros(&DAT_20000ba8);\n  processAndStoreData(&DAT_20000ba8,result);\n  DAT_200009f8 = performArithmetic(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculateFloatingPoint(DAT_20000a00,DAT_200009f8);\n  result = calculateFloatingPoint(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculateModifiedFloatingPoint(result,DAT_20000b5c);\n  result = calculateModifiedValue(DAT_20000010);\n  isPresent = isNullCharacterPresent(result,DAT_20000b5c);\n  if (isPresent == 0) {\n    result = calculateModifiedValue(DAT_200009f4);\n    isPresent = isConcatenatedStringEmpty(result,DAT_20000b5c);\n    if (isPresent != 0) {\n      DAT_20000b5c = calculateHash(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = calculateHash(DAT_20000010);\n  }\n  flippedValue = DAT_20000a08 ^ 0x80000000;\n  result = performArithmetic(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculateFloatingPoint(flippedValue,result);\n  result = calculateModifiedFloatingPoint(DAT_20000be8,DAT_20000b5c);\n  result = calculateModifiedFloatingPoint(result,DAT_20000a58);\n  modifiedValue = calculateModifiedValue(DAT_20000010);\n  isPresent = isConcatenatedStringEmpty(result,modifiedValue);\n  if (isPresent == 0) {\n    modifiedValue = calculateModifiedValue(DAT_200009f4);\n    isPresent = isNullCharacterPresent(result,modifiedValue);\n    if (isPresent == 0) {\n      validity = checkNumberValidity(result);\n    }\n    else {\n      validity = DAT_200009f4;\n    }\n  }\n  else {\n    validity = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  isPresent = isConcatenatedStringEmpty(DAT_200009f8,0);\n  setParamToValue(0x40010800,2,isPresent != 0);\n  isPresent = isConcatenatedStringEmpty(DAT_200009f8,0);\n  setParamToValue(0x40010800,4,isPresent == 0);\n  isPresent = isConcatenatedStringEmpty(DAT_200009f8,0);\n  setParamToValue(0x40010800,8,isPresent != 0);\n  isPresent = isConcatenatedStringEmpty(DAT_200009f8,0);\n  setParamToValue(0x40010800,0x10,isPresent == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)validity;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)validity;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "update_and_calculate_result_08004f78",
                "uVar1": "result",
                "iVar2": "isPresent",
                "uVar3": "modifiedValue",
                "uVar4": "flippedValue",
                "uVar5": "decodedValue",
                "local_11": "validity",
                "update_values_08004ae0": "updateValues",
                "calculate_result_08004bd8": "calculateResult",
                "initialize_memory_08004f60": "initializeMemory",
                "decode_value_08000418": "decodeValue",
                "initialize_memory_08005dfc": "initializeMemoryWithPitch",
                "calculate_leading_zeros_08005e40": "calculateLeadingZeros",
                "process_and_store_data_08004f3c": "processAndStoreData",
                "perform_arithmetic_08000aa4": "performArithmetic",
                "calculate_floating_point_08000cb8": "calculateFloatingPoint",
                "calculate_floating_point_08000aa8": "calculateModifiedFloatingPoint",
                "calculate_modified_value_08000c10": "calculateModifiedValue",
                "is_null_character_present_08000ff4": "isNullCharacterPresent",
                "check_if_concatenated_string_is_empty_08001030": "isConcatenatedStringEmpty",
                "calculate_hash_08000c08": "calculateHash",
                "check_number_validity_08001044": "checkNumberValidity",
                "set_param_to_value_08001a80": "setParamToValue"
            },
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "called": [
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000418",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08004ae0",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08001a80",
                "FUN_08000c08",
                "FUN_08000aa8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_system_08005224",
            "code": "\nvoid initialize_system_08005224(void)\n\n{\n  initialize_hardware_080014f0();\n  initialize_system_08005224_080052a0();\n  update_bitmask_and_set_param_080055f4();\n  initialize_data_08005348();\n  initialize_data_structure_08005598();\n  initialize_parameters_08005500();\n  initialize_system_08005224_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  update_flags_080036a8(&DAT_20000b1c,0);\n  update_flags_080036a8(&DAT_20000b1c,0xc);\n  initialize_data_0800491c(&DAT_20000a5c);\n  set_bit_in_array_0800360c(&DAT_20000b60);\n  check_and_send_interrupt_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_system_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080014f0",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_system_080052a0",
            "code": "\nvoid initializeSystem_080052a0(void)\n\n{\n  int result;\n  undefined8 globalData;\n  undefined4 featureFlag;\n  undefined4 updateFlag;\n  undefined4 usageThreshold;\n  undefined4 variable1;\n  undefined4 variable2;\n  undefined4 flagA;\n  undefined4 flagB;\n  undefined4 variable3;\n  undefined4 variable4;\n  undefined4 variable5;\n  undefined4 variable6;\n  undefined4 variable7;\n  \n  flagA = 1;\n  flagB = 0x10000;\n  variable3 = 0;\n  variable4 = 1;\n  variable5 = 2;\n  variable6 = 0x10000;\n  variable7 = 0x1c0000;\n  result = check_and_control_feature_08002d98(&flagA);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x151);\n  }\n  featureFlag = 0xf;\n  updateFlag = 2;\n  usageThreshold = 0x80;\n  variable1 = 0;\n  variable2 = 0;\n  result = update_memory_usage_08003260(&featureFlag,2);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x15e);\n  }\n  globalData = get_global_data_08003504();\n  update_memory_08001762((uint)globalData / 1000,(int)((ulonglong)globalData >> 0x20),(uint)globalData * 0x10624dd3);\n  update_peripheral_configuration_0800177c(4);\n  write_shifted_bits_to_memory_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_system_080052a0",
                "local_44": "featureFlag",
                "local_40": "updateFlag",
                "local_3c": "usageThreshold",
                "local_38": "variable1",
                "local_34": "variable2",
                "local_30": "flagA",
                "local_2c": "flagB",
                "local_28": "variable3",
                "local_20": "variable4",
                "local_14": "variable5",
                "local_10": "variable6",
                "local_c": "variable7",
                "iVar1": "result",
                "uVar2": "globalData"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08005674",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800177c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int threshold;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  threshold = calculate_threshold_08001ab0(&DAT_20000a88);\n  if (threshold != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "threshold"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_system_080053b0",
            "code": "\nvoid initializeSystem_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  undefined4 parameter5;\n  undefined4 parameter6;\n  undefined4 parameter7;\n  undefined4 parameter8;\n  undefined4 parameter9;\n  undefined4 parameter10;\n  undefined4 parameter11;\n  undefined4 parameter12;\n  undefined4 parameter13;\n  undefined4 parameter14;\n  undefined4 parameter15;\n  undefined4 parameter16;\n  undefined4 parametersArray [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = check_and_update_param_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",399);\n  }\n  parametersArray[0] = 0x1000;\n  iVar1 = process_operation_08003a94(&DAT_20000b1c,parametersArray);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = validate_and_update_memory_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x198);\n  }\n  parameter15 = 0;\n  parameter16 = 0;\n  iVar1 = update_parameter_080042de(&DAT_20000b1c,&parameter15);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x19f);\n  }\n  parameter8 = 0x60;\n  parameter9 = 0;\n  parameter10 = 0;\n  parameter11 = 0;\n  parameter12 = 0;\n  parameter13 = 0;\n  parameter14 = 0;\n  iVar1 = update_configuration_08003908(&DAT_20000b1c,&parameter8,0);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = update_configuration_08003908(&DAT_20000b1c,&parameter8,0xc);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1b0);\n  }\n  parameter1 = 0;\n  parameter2 = 0;\n  parameter3 = 0;\n  parameter4 = 0;\n  parameter5 = 0;\n  parameter6 = 0x2000;\n  parameter7 = 0;\n  iVar1 = update_data_0800422e(&DAT_20000b1c,&parameter1);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1bc);\n  }\n  update_bitmask_if_param_equals_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_system_080053b0",
                "local_58": "parameter1",
                "local_54": "parameter2",
                "local_50": "parameter3",
                "local_4c": "parameter4",
                "local_48": "parameter5",
                "local_44": "parameter6",
                "local_40": "parameter7",
                "local_3c": "parameter8",
                "local_38": "parameter9",
                "local_34": "parameter10",
                "local_30": "parameter11",
                "local_2c": "parameter12",
                "local_28": "parameter13",
                "local_24": "parameter14",
                "local_20": "parameter15",
                "local_1c": "parameter16",
                "local_18": "parametersArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_08003908",
                "FUN_0800422e",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_parameters_08005500",
            "code": "\nvoid initializeParameters_08005500(void)\n\n{\n  int returnValue;\n  undefined4 bufferSize;\n  undefined4 offset;\n  undefined4 parameterArray [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  returnValue = check_and_update_param_080035a4(&DAT_20000b60);\n  if (returnValue != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d0);\n  }\n  parameterArray[0] = 0x1000;\n  returnValue = process_operation_08003a94(&DAT_20000b60,parameterArray);\n  if (returnValue != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  offset = 0;\n  returnValue = update_parameter_080042de(&DAT_20000b60,&bufferSize);\n  if (returnValue != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_parameters_08005500",
                "local_20": "bufferSize",
                "local_1c": "offset",
                "local_18": "parameterArray",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_structure_08005598",
            "code": "\nvoid initializeDataStructure_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = initialize_data_structure_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_structure_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "update_bitmask_and_set_param_080055f4",
            "code": "\n\n\nvoid updateBitmaskAndSetParam_080055f4(void)\n\n{\n  undefined4 paramValue;\n  undefined4 paramFlag;\n  undefined4 paramCount;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  set_param_to_value_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  paramValue = 0x1e;\n  paramFlag = 1;\n  paramCount = 2;\n  update_bitmask_080017c4(0x40010800,&paramValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "update_bitmask_and_set_param_080055f4",
                "local_18": "paramValue",
                "local_14": "paramFlag",
                "local_c": "paramCount"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "update_bitmask_if_param_equals_08005680",
            "code": "\nvoid updateBitmaskIfParamEquals_08005680(int *input)\n\n{\n  undefined4 bitMask;\n  undefined4 value1;\n  undefined4 value2;\n  \n  if (*input == 0x40012c00) {\n    bitMask = 0x900;\n    value1 = 2;\n    value2 = 2;\n    update_bitmask_080017c4(0x40010800,&bitMask);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "update_bitmask_if_param_equals_08005680",
                "param_1": "input",
                "local_18": "bitMask",
                "local_14": "value1",
                "local_c": "value2"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "increment_global_counter_and_update_result_08005704",
            "code": "\nvoid incrementGlobalCounterAndUpdateResult_08005704(void)\n\n{\n  incrementGlobalCounter();\n  updateAndCalculateResult();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "increment_global_counter_and_update_result_08005704",
                "increase_global_counter_0800157c": "incrementGlobalCounter",
                "update_and_calculate_result_080017b4": "updateAndCalculateResult"
            },
            "calling": [],
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_processing_08005714",
            "code": "\nnone initialize_data_processing_08005714(none)\n\n{\n  process_data(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_processing_08005714",
                "process_data_080036f8": "process_data",
                "void": "none"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *dataPtr;\n  undefined *returnValue;\n  undefined stackBuffer [4];\n  int remainingSize;\n  undefined *initialMemoryPtr;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  initialMemoryPtr = DAT_20000a10;\n  if (stackBuffer < DAT_20000a10 + size) {\n    remainingSize = size;\n    dataPtr = (undefined4 *)get_data_value_08005d14();\n    *dataPtr = 0xc;\n    returnValue = (undefined *)0xffffffff;\n  }\n  else {\n    returnValue = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "dataPtr",
                "puVar2": "returnValue",
                "auStack_18": "stackBuffer",
                "local_14": "remainingSize",
                "local_c": "initialMemoryPtr"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_memory_08005780",
            "code": "\n\n\nvoid initializeMemory_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_memory_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_08005780();\n  execute_functions_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_system_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  undefined4 temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  undefined8 temp_6;\n  \n  temp_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (temp_5 = input_2 & 0x7fffffff, 0x7ff00000 < (temp_5 | (-input_1 | input_1) >> 0x1f))) {\n    temp_4 = calculate_sum_0800015c(input_3,input_4,input_1,input_2);\n    return temp_4;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    temp_4 = calculate_result_thunk_08005838_080059f0();\n    return temp_4;\n  }\n  temp_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((temp_5 | input_1) == 0) {\n    if (temp_3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp_3 != 3) {\n      return input_1;\n    }\n  }\n  else if ((temp_4 | input_3) != 0) {\n    if (temp_4 == 0x7ff00000) {\n      if (temp_5 == 0x7ff00000) {\n        if (temp_3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp_3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp_3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp_3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp_3 != 3) {\n        if (temp_3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp_5 != 0x7ff00000) {\n      temp_1 = (int)(temp_5 - temp_4) >> 0x14;\n      if (temp_1 < 0x3d) {\n        if (((int)input_4 < 0) && (temp_1 + 0x3c < 0 != SCARRY4(temp_1,0x3c))) {\n          temp_6 = 0;\n        }\n        else {\n          calculate_result_thunk_08005838_0800071c(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          temp_6 = calculate_result_thunk_08005838_080059f0();\n        }\n      }\n      else {\n        temp_6 = 0x3ff921fb54442d18;\n      }\n      temp_2 = (undefined4)((ulonglong)temp_6 >> 0x20);\n      temp_4 = (uint)temp_6;\n      if (temp_3 == 1) {\n        return temp_4;\n      }\n      if (temp_3 == 2) {\n        temp_6 = calculate_bitwise_operation_08000158(temp_4,temp_2,0x33145c07,0x3ca1a626);\n        temp_4 = calculate_bitwise_operation_08000158(0x54442d18,0x400921fb,(int)temp_6,(int)((ulonglong)temp_6 >> 0x20));\n        return temp_4;\n      }\n      if (temp_3 != 0) {\n        temp_6 = calculate_bitwise_operation_08000158(temp_4,temp_2,0x33145c07,0x3ca1a626);\n        temp_4 = calculate_bitwise_operation_08000158((int)temp_6,(int)((ulonglong)temp_6 >> 0x20),0x54442d18,0x400921fb);\n        return temp_4;\n      }\n      return temp_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculate_result_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  undefined4 temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  undefined8 temp_6;\n  \n  temp_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (temp_5 = input_2 & 0x7fffffff, 0x7ff00000 < (temp_5 | (-input_1 | input_1) >> 0x1f))) {\n    temp_4 = calculate_sum_0800015c(input_3,input_4,input_1,input_2);\n    return temp_4;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    temp_4 = calculate_result_08005838_080059f0();\n    return temp_4;\n  }\n  temp_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((temp_5 | input_1) == 0) {\n    if (temp_3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp_3 != 3) {\n      return input_1;\n    }\n  }\n  else if ((temp_4 | input_3) != 0) {\n    if (temp_4 == 0x7ff00000) {\n      if (temp_5 == 0x7ff00000) {\n        if (temp_3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp_3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp_3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp_3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp_3 != 3) {\n        if (temp_3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp_5 != 0x7ff00000) {\n      temp_1 = (int)(temp_5 - temp_4) >> 0x14;\n      if (temp_1 < 0x3d) {\n        if (((int)input_4 < 0) && (temp_1 + 0x3c < 0 != SCARRY4(temp_1,0x3c))) {\n          temp_6 = 0;\n        }\n        else {\n          calculate_result_08005838_0800071c(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          temp_6 = calculate_result_08005838_080059f0();\n        }\n      }\n      else {\n        temp_6 = 0x3ff921fb54442d18;\n      }\n      temp_2 = (undefined4)((ulonglong)temp_6 >> 0x20);\n      temp_4 = (uint)temp_6;\n      if (temp_3 == 1) {\n        return temp_4;\n      }\n      if (temp_3 == 2) {\n        temp_6 = calculate_bitwise_operation_08000158(temp_4,temp_2,0x33145c07,0x3ca1a626);\n        temp_4 = calculate_bitwise_operation_08000158(0x54442d18,0x400921fb,(int)temp_6,(int)((ulonglong)temp_6 >> 0x20));\n        return temp_4;\n      }\n      if (temp_3 != 0) {\n        temp_6 = calculate_bitwise_operation_08000158(temp_4,temp_2,0x33145c07,0x3ca1a626);\n        temp_4 = calculate_bitwise_operation_08000158((int)temp_6,(int)((ulonglong)temp_6 >> 0x20),0x54442d18,0x400921fb);\n        return temp_4;\n      }\n      return temp_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculate_result_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp7;\n  int result;\n  undefined8 temp8;\n  undefined8 temp9;\n  \n  temp9 = CONCAT44(input2,input1);\n  temp7 = input2 & 0x7fffffff;\n  if (temp7 < 0x44100000) {\n    if (temp7 < 0x3fdc0000) {\n      if (temp7 < 0x3e200000) {\n        temp8 = calculate_sum_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = is_null_check_080009e8((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp9 = FUNC_08005d0c();\n      temp4 = (undefined4)((ulonglong)temp9 >> 0x20);\n      temp1 = (undefined4)temp9;\n      if (temp7 < 0x3ff30000) {\n        if (temp7 < 0x3fe60000) {\n          temp9 = calculate_sum_0800015c(temp1,temp4,temp1,temp4);\n          temp9 = calculate_bitwise_operation_08000158((int)temp9,(int)((ulonglong)temp9 >> 0x20),0,0x3ff00000);\n          temp8 = calculate_sum_0800015c(temp1,temp4,0,0x40000000);\n          temp9 = calculate_result_080059f0_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                                (int)((ulonglong)temp8 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp9 = calculate_bitwise_operation_08000158(temp1,temp4,0,0x3ff00000);\n          temp8 = calculate_sum_0800015c(temp1,temp4,0,0x3ff00000);\n          temp9 = calculate_result_080059f0_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                                (int)((ulonglong)temp8 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp7 < 0x40038000) {\n        temp9 = calculate_bitwise_operation_08000158(temp1,temp4,0,0x3ff80000);\n        temp8 = calculate_shifted_multiply_080004c8(temp1,temp4,0,0x3ff80000);\n        temp8 = calculate_sum_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        temp9 = calculate_result_080059f0_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                              (int)((ulonglong)temp8 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp9 = calculate_result_080059f0_0800071c(0,0xbff00000,temp1,temp4);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp5 = (undefined4)temp9;\n    temp9 = calculate_shifted_multiply_080004c8(temp5,temp6,temp5,temp6);\n    temp2 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp1 = (undefined4)temp9;\n    temp9 = calculate_shifted_multiply_080004c8(temp1,temp2,temp1,temp2);\n    temp3 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp4 = (undefined4)temp9;\n    temp9 = calculate_shifted_multiply_080004c8(temp4,temp3,0xe322da11,0x3f90ad3a);\n    temp9 = calculate_sum_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp9 = calculate_shifted_multiply_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = calculate_sum_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp9 = calculate_shifted_multiply_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = calculate_sum_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp9 = calculate_shifted_multiply_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = calculate_sum_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x920083ff,0x3fc24924);\n    temp9 = calculate_shifted_multiply_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = calculate_sum_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x5555550d,0x3fd55555);\n    temp9 = calculate_shifted_multiply_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp1,temp2);\n    temp8 = calculate_shifted_multiply_080004c8(temp4,temp3,0x2c6a6c2f,0xbfa2b444);\n    temp8 = calculate_bitwise_operation_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp8 = calculate_shifted_multiply_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = calculate_bitwise_operation_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp8 = calculate_shifted_multiply_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = calculate_bitwise_operation_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp8 = calculate_shifted_multiply_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = calculate_bitwise_operation_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp8 = calculate_shifted_multiply_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp9 = calculate_sum_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                          (int)((ulonglong)temp8 >> 0x20));\n    temp9 = calculate_shifted_multiply_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp5,temp6);\n    temp1 = (undefined4)((ulonglong)temp9 >> 0x20);\n    if (result == -1) {\n      temp9 = calculate_bitwise_operation_08000158(temp5,temp6,(int)temp9,temp1);\n      return temp9;\n    }\n    result = result * 8;\n    temp9 = calculate_bitwise_operation_08000158((int)temp9,temp1,*(undefined4 *)(&UNK_08009ee8 + result),\n                          *(undefined4 *)(&UNK_08009eec + result));\n    temp9 = calculate_bitwise_operation_08000158((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp5,temp6);\n    temp9 = calculate_bitwise_operation_08000158(*(undefined4 *)(&UNK_08009ec8 + result),\n                          *(undefined4 *)(&UNK_08009ecc + result),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)temp9 >> 0x20) + -0x80000000,(int)temp9);\n    }\n  }\n  else {\n    if ((temp7 < 0x7ff00001) && ((temp7 != 0x7ff00000 || (input1 == 0)))) {\n      temp1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        temp1 = 0x3ff921fb;\n      }\n      return CONCAT44(temp1,0x54442d18);\n    }\n    temp9 = calculate_sum_0800015c(input1,input2,input1,input2,input4);\n  }\n  return temp9;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "result",
                "uVar9": "temp8",
                "uVar10": "temp9"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_data_value_08005d14",
            "code": "\nundefined4 get_data_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_data_value_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int iterationCount;\n  code **functionPointer;\n  \n  FUNC_08009e68();\n  iterationCount = 0;\n  functionPointer = (code **)&DAT_0800a198;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "memset_08005d68",
            "code": "\nvoid memset_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *ptr;\n  uint remaining_size;\n  undefined4 value_repeat;\n  bool is_last_iteration;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_last_iteration = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_last_iteration) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_repeat = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value_repeat;\n        dest_ptr[-3] = value_repeat;\n        dest_ptr[-2] = value_repeat;\n        dest_ptr[-1] = value_repeat;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *dest = value_repeat;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = ptr;\n    } while ((undefined4 *)(size + (int)dest) != ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "memset_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "ptr",
                "uVar3": "remaining_size",
                "uVar4": "value_repeat",
                "bVar5": "is_last_iteration"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_memory_08005dfc",
            "code": "\nvoid initializeMemory_08005dfc(undefined *memory,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  undefined *memoryPointer [2];\n  undefined4 maxSize;\n  undefined4 constant1;\n  undefined *currentMemoryPointer;\n  undefined4 maxSize2;\n  undefined4 value1;\n  undefined4 value2;\n  \n  maxSize2 = 0x7fffffff;\n  maxSize = 0x7fffffff;\n  constant1 = 0xffff0208;\n  memoryPointer[0] = memory;\n  currentMemoryPointer = memory;\n  value1 = value1;\n  value2 = value2;\n  FUNC_08005e9c(DAT_2000001c,memoryPointer,size,&value1);\n  *memoryPointer[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_memory_08005dfc",
                "param_1": "memory",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "local_80": "memoryPointer",
                "local_78": "maxSize",
                "uStack_74": "constant1",
                "local_70": "currentMemoryPointer",
                "local_6c": "maxSize2",
                "uStack_8": "value1",
                "uStack_4": "value2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "calculate_leading_zeros_08005e40",
            "code": "\nint calculateLeadingZeros_08005e40(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    leadingZeros = leadingZeros + 4;\n  }\n  return leadingZeros + (0x1fU - LZCOUNT(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "calculate_leading_zeros_08005e40",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_offset_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)calculate_leading_zeros_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = allocate_and_initialize_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_offset_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)calculate_leading_zeros_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_offset_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_conditions_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = check_comparison_result_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = is_null_character_present_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_conditions_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)allocate_and_initialize_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_shifted_multiply_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_shifted_multiply_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_execution_result_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_shifted_multiply_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_shifted_multiply_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_execution_result_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)decompiled_function_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = check_execution_result_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)decompiled_function_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)decompiled_function_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = check_execution_result_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)calculate_leading_zeros_08005e40(piVar23);\n        }\n        else {\n          iVar3 = extract_data_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_string_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = check_execution_result_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_shifted_multiply_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = calculate_value_0800119c();\n    uVar34 = calculate_result_080003f4();\n    uVar33 = calculate_bitwise_operation_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = is_null_check_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = check_execution_result_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = extend_copy_data_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = extend_copy_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = extend_copy_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = check_execution_result_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = extend_copy_data_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = check_execution_result_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = extend_copy_data_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = extend_copy_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = extend_copy_data_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = extend_copy_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = extend_copy_data_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = extend_copy_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = extend_copy_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = extend_copy_data_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = extend_copy_data_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = extend_copy_data_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_data_structures_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_data_structures_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08005e40",
                "FUN_0800119c",
                "FUN_080011ec",
                "FUN_080009c0",
                "FUN_08008ad4",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_080009e8",
                "FUN_0800901c",
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080096e0",
                "FUN_080088ec",
                "FUN_080079e8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_divide_and_subtract_080078c0",
            "code": "\nuint calculateDivideAndSubtract_080078c0(int array1,int array2)\n\n{\n  uint result;\n  uint *ptr1;\n  int carry;\n  int length;\n  int index;\n  uint divisor;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint temp1;\n  uint *tempPtr;\n  uint *nextPtr;\n  \n  length = *(int *)(array2 + 0x10);\n  if (*(int *)(array1 + 0x10) < length) {\n    return 0;\n  }\n  index = length + -1;\n  ptr2 = (uint *)(array2 + 0x14);\n  ptr3 = (uint *)(array1 + 0x14);\n  divisor = ptr3[index] / (ptr2[index] + 1);\n  ptr4 = ptr2 + index;\n  if (divisor != 0) {\n    result = 0;\n    carry = 0;\n    ptr1 = ptr3;\n    tempPtr = ptr2;\n    do {\n      nextPtr = tempPtr + 1;\n      result = divisor * (*tempPtr & 0xffff) + result;\n      temp1 = divisor * (*tempPtr >> 0x10) + (result >> 0x10);\n      result = (carry - (result & 0xffff)) + (*ptr1 & 0xffff);\n      carry = ((*ptr1 >> 0x10) - (temp1 & 0xffff)) + ((int)result >> 0x10);\n      *ptr1 = result & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      result = temp1 >> 0x10;\n      ptr1 = ptr1 + 1;\n      tempPtr = nextPtr;\n    } while (nextPtr <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + length + -2) && (ptr3[length + -2] == 0)) {\n        ptr1 = ptr3 + length + -3;\n        do {\n          index = index + -1;\n          if (ptr1 <= ptr3) break;\n          result = *ptr1;\n          ptr1 = ptr1 + -1;\n        } while (result == 0);\n      }\n      *(int *)(array1 + 0x10) = index;\n    }\n  }\n  length = compare_arrays_080094f8();\n  if (-1 < length) {\n    length = 0;\n    divisor = divisor + 1;\n    ptr1 = ptr3;\n    do {\n      tempPtr = ptr2 + 1;\n      result = (length - (*ptr2 & 0xffff)) + (*ptr1 & 0xffff);\n      length = ((*ptr1 >> 0x10) - (*ptr2 >> 0x10)) + ((int)result >> 0x10);\n      *ptr1 = result & 0xffff | length * 0x10000;\n      length = length >> 0x10;\n      ptr1 = ptr1 + 1;\n      ptr2 = tempPtr;\n    } while (tempPtr <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + index + -1) && (ptr3[index + -1] == 0)) {\n        ptr2 = ptr3 + index + -2;\n        do {\n          index = index + -1;\n          if (ptr2 <= ptr3) break;\n          result = *ptr2;\n          ptr2 = ptr2 + -1;\n        } while (result == 0);\n      }\n      *(int *)(array1 + 0x10) = index;\n    }\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_divide_and_subtract_080078c0",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "result",
                "puVar2": "ptr1",
                "iVar3": "carry",
                "iVar4": "length",
                "iVar5": "index",
                "uVar6": "divisor",
                "puVar7": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar10": "temp1",
                "puVar11": "tempPtr",
                "puVar12": "nextPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "decompiled_function_080079e8",
            "code": "\nchar * decompiledFunction_080079e8(int input,undefined4 param2,uint param3,uint param4,uint param5,\n                   uint param6,int *output1,uint *output2,char **output3)\n\n{\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  char char1;\n  byte byte1;\n  undefined4 var1;\n  int var2;\n  int var3;\n  int var4;\n  char *str1;\n  uint var5;\n  undefined4 var6;\n  undefined4 var7;\n  int var8;\n  int var9;\n  undefined4 var10;\n  uint var11;\n  uint var12;\n  int var13;\n  char *str2;\n  char *str3;\n  undefined4 *ptr1;\n  undefined4 var14;\n  int var15;\n  bool bool4;\n  undefined8 var16;\n  undefined8 var17;\n  undefined8 var18;\n  uint var19;\n  uint var20;\n  uint var21;\n  int var22;\n  uint var23;\n  int var24;\n  int var25;\n  uint var26;\n  uint var27;\n  uint var28;\n  uint var29;\n  uint var30;\n  int var31;\n  int var32 [2];\n  \n  var8 = *(int *)(input + 0x40);\n  if (var8 != 0) {\n    var12 = *(uint *)(input + 0x44);\n    *(uint *)(var8 + 4) = var12;\n    *(int *)(var8 + 8) = 1 << (var12 & 0xff);\n    update_pointer_0800910c(input,var8);\n    *(undefined4 *)(input + 0x40) = 0;\n  }\n  bool4 = (int)param4 < 0;\n  var12 = param4;\n  if (bool4) {\n    var12 = param4 & 0x7fffffff;\n  }\n  *output2 = (uint)bool4;\n  var20 = param4;\n  if (bool4) {\n    var20 = var12;\n  }\n  var11 = var20;\n  if ((~var12 & 0x7ff00000) == 0) {\n    *output1 = 9999;\n    if ((param3 == 0) && ((var12 & 0xfffff) == 0)) {\n      str1 = \"Infinity\";\n      if (output3 == (char **)0x0) {\n        return str1;\n      }\n      str3 = \"\";\n    }\n    else {\n      str1 = \"NaN\";\n      if (output3 == (char **)0x0) {\n        return str1;\n      }\n      str3 = \"\";\n    }\n    *output3 = str3;\n    return str1;\n  }\n  var16 = check_execution_result_08000998(param3,var20,0,0);\n  if ((int)var16 != 0) {\n    *output1 = 1;\n    if (output3 != (char **)0x0) {\n      *output3 = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  var1 = allocate_and_return_memory_08009630(input,(int)((ulonglong)var16 >> 0x20),param3,var20,var32,&var31)\n  ;\n  var8 = var31;\n  if (var12 >> 0x14 == 0) {\n    var13 = var32[0] + var31;\n    var9 = var13 + 0x432;\n    if (var9 < 0x21) {\n      var12 = param3 << (0x20U - var9 & 0xff);\n    }\n    else {\n      var12 = param3 >> (var13 + 0x412U & 0xff) | var12 << (0x40U - var9 & 0xff);\n    }\n    var16 = resize_value_080003d4(var12);\n    var13 = var13 + -1;\n    bool4 = true;\n    var5 = (int)((ulonglong)var16 >> 0x20) + 0xfe100000;\n    var12 = (uint)var16;\n  }\n  else {\n    var13 = (var12 >> 0x14) - 0x3ff;\n    var5 = var20 & 0xfffff | 0x3ff00000;\n    bool4 = false;\n    var12 = param3;\n  }\n  var16 = calculate_bitwise_operation_08000158(var12,var5,0,0x3ff80000);\n  var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),0x636f4361,0x3fd287a7);\n  var16 = calculate_sum_0800015c((int)var16,(int)((ulonglong)var16 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  var17 = calculate_result_080003f4(var13);\n  var17 = calculate_shifted_multiply_080004c8((int)var17,(int)((ulonglong)var17 >> 0x20),0x509f79fb,0x3fd34413);\n  var16 = calculate_sum_0800015c((int)var16,(int)((ulonglong)var16 >> 0x20),(int)var17,\n                        (int)((ulonglong)var17 >> 0x20));\n  var7 = (undefined4)((ulonglong)var16 >> 0x20);\n  var21 = calculate_value_0800119c();\n  var9 = is_null_character_present_080009ac((int)var16,var7,0,0);\n  if (var9 != 0) {\n    var17 = calculate_result_080003f4(var21);\n    var9 = check_execution_result_08000998((int)var17,(int)((ulonglong)var17 >> 0x20),(int)var16,var7);\n    if (var9 == 0) {\n      var21 = var21 - 1;\n    }\n  }\n  if (var21 < 0x17) {\n    var9 = is_null_check_080009e8(*(undefined4 *)(&DAT_08009fa8 + var21 * 8),\n                          *(undefined4 *)(&DAT_08009fac + var21 * 8),param3,var20);\n    if (var9 == 0) {\n      bool2 = false;\n    }\n    else {\n      var21 = var21 - 1;\n      bool2 = false;\n    }\n  }\n  else {\n    bool2 = true;\n  }\n  var9 = (var8 - var13) + -1;\n  if (var9 < 0) {\n    var22 = 1 - (var8 - var13);\n    var9 = 0;\n  }\n  else {\n    var22 = 0;\n  }\n  if ((int)var21 < 0) {\n    var26 = 0;\n    var22 = var22 - var21;\n    var25 = -var21;\n  }\n  else {\n    var9 = var9 + var21;\n    var26 = var21;\n    var25 = 0;\n  }\n  if (9 < param5) {\n    var29 = 0xffffffff;\n    bool1 = true;\n    var23 = 0xffffffff;\n    bool3 = true;\n    param5 = 0;\n    param6 = 0;\n    goto LAB_08007c24;\n  }\n  bool1 = (int)param5 < 6;\n  if (!bool1) {\n    param5 = param5 - 4;\n  }\n  switch(param5) {\n  case 2:\n    bool3 = false;\n    break;\n  case 3:\n    bool3 = false;\n    goto LAB_08008300;\n  case 4:\n    bool3 = true;\n    break;\n  case 5:\n    bool3 = true;\nLAB_08008300:\n    var29 = var21 + param6;\n    var23 = var29 + 1;\n    var12 = var23;\n    if ((int)var23 < 1) {\n      var12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(input + 0x44) = 0;\n    str1 = (char *)allocate_and_return_memory_080090c0(input,0);\n    var29 = 0xffffffff;\n    var23 = 0xffffffff;\n    param6 = 0;\n    *(char **)(input + 0x40) = str1;\n    bool3 = true;\n    goto LAB_08007e36;\n  }\n  if ((int)param6 < 1) {\n    var29 = 1;\n    param6 = 1;\n    var23 = 1;\nLAB_08007c24:\n    *(undefined4 *)(input + 0x44) = 0;\n    var5 = var29;\n  }\n  else {\n    var29 = param6;\n    var23 = param6;\n    var12 = param6;\nLAB_08008314:\n    *(undefined4 *)(input + 0x44) = 0;\n    var5 = var23;\n    if (0x17 < (int)var12) {\n      var13 = 4;\n      var8 = 1;\n      do {\n        var2 = var8;\n        var13 = var13 * 2;\n        var8 = var2 + 1;\n      } while (var13 + 0x14U <= var12);\n      *(int *)(input + 0x44) = var2;\n    }\n  }\n  str1 = (char *)allocate_and_return_memory_080090c0(input);\n  *(char **)(input + 0x40) = str1;\n  if ((var5 < 0xf) && (bool1)) {\n    if ((int)var21 < 1) {\n      if (var21 == 0) {\n        var8 = 2;\n        var19 = param3;\n      }\n      else {\n        var8 = (-var21 & 0xf) * 8;\n        var16 = calculate_shifted_multiply_080004c8(param3,var20,*(undefined4 *)(&DAT_08009fa8 + var8),\n                              *(undefined4 *)(&DAT_08009fac + var8));\n        var20 = (uint)((ulonglong)var16 >> 0x20);\n        var19 = (uint)var16;\n        var13 = (int)-var21 >> 4;\n        if (var13 == 0) {\n          var8 = 2;\n        }\n        else {\n          bool1 = false;\n          var8 = 2;\n          ptr1 = &DAT_08009f80;\n          do {\n            if (var13 << 0x1f < 0) {\n              var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),*ptr1,ptr1[1]\n                                   );\n              bool1 = true;\n              var8 = var8 + 1;\n            }\n            var13 = var13 >> 1;\n            ptr1 = ptr1 + 2;\n          } while (var13 != 0);\n          if (bool1) {\n            var19 = (uint)var16;\n            var20 = (uint)((ulonglong)var16 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      var12 = (int)var21 >> 4;\n      var17 = *(undefined8 *)(&DAT_08009fa8 + (var21 & 0xf) * 8);\n      var16 = *(undefined8 *)(&DAT_08009fa8 + (var21 & 0xf) * 8);\n      if ((int)(var12 << 0x1b) < 0) {\n        var18 = calculate_result_0800071c(param3,var20,0x7f73bf3c,0x75154fdd);\n        var28 = (uint)((ulonglong)var18 >> 0x20);\n        var27 = (uint)var18;\n        var8 = 3;\n        var12 = var12 & 0xf;\n      }\n      else {\n        var8 = 2;\n        var28 = var20;\n        var27 = param3;\n      }\n      if (var12 != 0) {\n        ptr1 = &DAT_08009f80;\n        do {\n          if ((int)(var12 << 0x1f) < 0) {\n            var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),*ptr1,ptr1[1]);\n            var8 = var8 + 1;\n          }\n          var12 = (int)var12 >> 1;\n          ptr1 = ptr1 + 2;\n          var17 = var16;\n        } while (var12 != 0);\n      }\n      var20 = (uint)((ulonglong)var17 >> 0x20);\n      var19 = (uint)var17;\n      var16 = calculate_result_0800071c(var27,var28,var19,var20);\n      var19 = (uint)var16;\n      var20 = (uint)((ulonglong)var16 >> 0x20);\n    }\n    var16 = CONCAT44(var20,var19);\n    if ((bool2) && (var13 = is_null_character_present_080009ac(var19,var20,0,0x3ff00000), var13 != 0)) {\n      if (var23 == 0) {\n        var16 = calculate_result_080003f4(var8);\n        var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),var19,var20);\n        var16 = calculate_sum_0800015c((int)var16,(int)((ulonglong)var16 >> 0x20),0,0x401c0000);\n        var7 = (undefined4)var16;\n        var8 = (int)((ulonglong)var16 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)var29) {\n        var16 = calculate_shifted_multiply_080004c8(var19,var20,0,0x40240000);\n        var17 = calculate_result_080003f4(var8 + 1);\n        var17 = calculate_shifted_multiply_080004c8((int)var17,(int)((ulonglong)var17 >> 0x20),(int)var16,\n                              (int)((ulonglong)var16 >> 0x20));\n        var17 = calculate_sum_0800015c((int)var17,(int)((ulonglong)var17 >> 0x20),0,0x401c0000);\n        var7 = (undefined4)var17;\n        var27 = var29;\n        var30 = var21 - 1;\n        var8 = (int)((ulonglong)var17 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    var17 = calculate_result_080003f4(var8);\n    var17 = calculate_shifted_multiply_080004c8((int)var17,(int)((ulonglong)var17 >> 0x20),var19,var20);\n    var17 = calculate_sum_0800015c((int)var17,(int)((ulonglong)var17 >> 0x20),0,0x401c0000);\n    var7 = (undefined4)var17;\n    var8 = (int)((ulonglong)var17 >> 0x20) + -0x3400000;\n    if (var23 != 0) {\n      var30 = var21;\n      var27 = var23;\nLAB_08007cfa:\n      var20 = (uint)((ulonglong)var16 >> 0x20);\n      var19 = (uint)var16;\n      char1 = calculate_value_0800119c(var19,var20);\n      char1 = char1 + '0';\n      var10 = (&DAT_08009fa0)[var27 * 2];\n      var6 = (&DAT_08009fa4)[var27 * 2];\n      var16 = calculate_result_080003f4();\n      var16 = calculate_bitwise_operation_08000158(var19,var20,(int)var16,(int)((ulonglong)var16 >> 0x20));\n      var14 = (undefined4)((ulonglong)var16 >> 0x20);\n      str3 = str1 + 1;\n      if (bool3) {\n        var17 = calculate_result_0800071c(0,0x3fe00000,var10,var6);\n        var17 = calculate_bitwise_operation_08000158((int)var17,(int)((ulonglong)var17 >> 0x20),var7,var8);\n        var7 = (undefined4)((ulonglong)var17 >> 0x20);\n        *str1 = char1;\n        var8 = is_null_check_080009e8((int)var17,var7,(int)var16,var14);\n        if (var8 != 0) {\nLAB_08008784:\n          var21 = var30;\n          goto LAB_08008294;\n        }\n        var18 = calculate_bitwise_operation_08000158(0,0x3ff00000,(int)var16,var14);\n        var8 = is_null_check_080009e8((int)var17,var7,(int)var18,(int)((ulonglong)var18 >> 0x20));\n        if (var8 == 0) {\n          if (var27 != 1) {\n            str2 = str3;\n            do {\n              var17 = calculate_shifted_multiply_080004c8((int)var17,(int)((ulonglong)var17 >> 0x20),0,0x40240000);\n              var7 = (undefined4)((ulonglong)var17 >> 0x20);\n              var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),0,0x40240000);\n              char1 = calculate_value_0800119c();\n              var18 = calculate_result_080003f4();\n              var16 = calculate_bitwise_operation_08000158((int)var16,(int)((ulonglong)var16 >> 0x20),(int)var18,\n                                    (int)((ulonglong)var18 >> 0x20));\n              var10 = (undefined4)((ulonglong)var16 >> 0x20);\n              char1 = char1 + '0';\n              str3 = str2 + 1;\n              *str2 = char1;\n              var8 = is_null_character_present_080009ac((int)var16,var10,(int)var17,var7);\n              if (var8 != 0) {\n                var21 = var30;\n                goto LAB_08008294;\n              }\n              var18 = calculate_bitwise_operation_08000158(0,0x3ff00000,(int)var16,var10);\n              var8 = is_null_character_present_080009ac((int)var18,(int)((ulonglong)var18 >> 0x20),(int)var17,var7)\n              ;\n              if (var8 != 0) goto LAB_08008798;\n              str2 = str3;\n            } while (str3 != str1 + var27);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        var21 = var30;\n      }\n      else {\n        var17 = calculate_shifted_multiply_080004c8(var7,var8,var10,var6);\n        var7 = (undefined4)((ulonglong)var17 >> 0x20);\n        *str1 = char1;\n        if (var27 != 1) {\n          str2 = str3;\n          do {\n            var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),0,0x40240000);\n            char1 = calculate_value_0800119c();\n            var18 = calculate_result_080003f4();\n            var16 = calculate_bitwise_operation_08000158((int)var16,(int)((ulonglong)var16 >> 0x20),(int)var18,\n                                  (int)((ulonglong)var18 >> 0x20));\n            str3 = str2 + 1;\n            *str2 = char1 + '0';\n            str2 = str3;\n          } while (str3 != str1 + var27);\n        }\n        var10 = (undefined4)((ulonglong)var16 >> 0x20);\n        var18 = calculate_sum_0800015c((int)var17,var7,0,0x3fe00000);\n        var8 = is_null_character_present_080009ac((int)var18,(int)((ulonglong)var18 >> 0x20),(int)var16,var10);\n        if (var8 == 0) {\n          var17 = calculate_bitwise_operation_08000158(0,0x3fe00000,(int)var17,var7);\n          var8 = is_null_check_080009e8((int)var17,(int)((ulonglong)var17 >> 0x20),(int)var16,var10);\n          str2 = str3;\n          if (var8 == 0) goto LAB_08007e36;\n          do {\n            str3 = str2;\n            str2 = str3 + -1;\n          } while (str3[-1] == '0');\n          goto LAB_08008784;\n        }\n        var21 = var30;\n        char1 = str3[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    var16 = calculate_bitwise_operation_08000158(var19,var20,0,0x40140000);\n    var10 = (undefined4)((ulonglong)var16 >> 0x20);\n    var13 = is_null_check_080009e8((int)var16,var10,var7,var8);\n    if (var13 == 0) {\n      var8 = is_null_character_present_080009ac((int)var16,var10,var7,var8 + -0x80000000);\n      if (var8 == 0) goto LAB_08007e36;\n      var13 = 0;\n      var8 = 0;\n      str3 = str1;\n      goto LAB_080084f0;\n    }\n    var9 = 0;\n    var2 = 0;\nLAB_08008406:\n    *str1 = '1';\n    var21 = var21 + 1;\n    str3 = str1 + 1;\n    var13 = var2;\n    var8 = var9;\nLAB_08008416:\n    update_pointer_0800910c(input,var8);\n    if (var13 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    str3 = str1;\n    if ((-1 < var32[0]) && ((int)var21 < 0xf)) {\n      var7 = *(undefined4 *)(&DAT_08009fa8 + var21 * 8);\n      var10 = *(undefined4 *)(&DAT_08009fac + var21 * 8);\n      if ((-1 < (int)param6) || (0 < (int)var23)) {\n        calculate_result_0800071c(param3,var11,var7,var10);\n        byte1 = calculate_value_0800119c();\n        var16 = calculate_result_080003f4();\n        var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),var7,var10);\n        var16 = calculate_bitwise_operation_08000158(param3,var11,(int)var16,(int)((ulonglong)var16 >> 0x20));\n        *str1 = byte1 + 0x30;\n        str3 = str1 + 1;\n        if (var23 != 1) {\n          var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),0,0x40240000);\n          var8 = check_execution_result_08000998((int)var16,(int)((ulonglong)var16 >> 0x20),0,0);\n          while (var8 == 0) {\n            var14 = (undefined4)((ulonglong)var16 >> 0x20);\n            calculate_result_0800071c((int)var16,var14,var7,var10);\n            byte1 = calculate_value_0800119c();\n            var17 = calculate_result_080003f4();\n            var17 = calculate_shifted_multiply_080004c8((int)var17,(int)((ulonglong)var17 >> 0x20),var7,var10);\n            var16 = calculate_bitwise_operation_08000158((int)var16,var14,(int)var17,(int)((ulonglong)var17 >> 0x20));\n            str2 = str3 + 1;\n            *str3 = byte1 + 0x30;\n            str3 = str2;\n            if (var23 == (int)str2 - (int)str1) goto LAB_08007f3a;\n            var16 = calculate_shifted_multiply_080004c8((int)var16,(int)((ulonglong)var16 >> 0x20),0,0x40240000);\n            var8 = check_execution_result_08000998((int)var16,(int)((ulonglong)var16 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        var16 = calculate_sum_0800015c((int)var16,(int)((ulonglong)var16 >> 0x20));\n        var14 = (undefined4)((ulonglong)var16 >> 0x20);\n        var8 = is_null_check_080009e8((int)var16,var14,var7,var10);\n        if ((var8 == 0) &&\n           ((var8 = check_execution_result_08000998((int)var16,var14,var7,var10), var8 == 0 ||\n            ((byte1 & 1) == 0)))) goto LAB_08008294;\n        char1 = str3[-1];\nLAB_08007f7c:\n        while (str2 = str3 + -1, char1 == '9') {\n          if (str1 == str2) {\n            *str1 = '0';\n            char1 = str3[-1];\n            var21 = var21 + 1;\n            str2 = str1;\n            break;\n          }\n          char1 = str3[-2];\n          str3 = str2;\n        }\n        *str2 = char1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (var23 == 0) {\n        var16 = calculate_shifted_multiply_080004c8(var7,var10,0,0x40140000);\n        var4 = check_comparison_080009d4((int)var16,(int)((ulonglong)var16 >> 0x20),param3,var11);\n        var13 = 0;\n        var9 = 0;\n        var2 = 0;\n        var8 = 0;\n        if (var4 == 0) goto LAB_08008406;\n      }\n      else {\n        var13 = 0;\n        var8 = 0;\n      }\nLAB_080084f0:\n      var21 = ~param6;\n      str1 = str3;\n      goto LAB_08008416;\n    }\n    var8 = var25;\n    if (bool3) {\n      if ((int)param5 < 2) {\n        if (bool4) {\n          var24 = var22;\n          var22 = var22 + var32[0] + 0x433;\n          var9 = var9 + var32[0] + 0x433;\n        }\n        else {\n          var24 = var22;\n          var22 = var22 + (0x36 - var31);\n          var9 = var9 + (0x36 - var31);\n        }\n      }\n      else {\n        var13 = var23 - 1;\n        if (var25 < var13) {\n          var26 = var26 + (var13 - var25);\n          var8 = 0;\n          var25 = var13;\n        }\n        else {\n          var8 = var25 - var13;\n        }\n        if ((int)var23 < 0) {\n          var24 = var22 - var23;\n        }\n        else {\n          var9 = var9 + var23;\n          var24 = var22;\n          var22 = var22 + var23;\n        }\n      }\n      var13 = initialize_memory_08009244(input,1);\n    }\n    else {\n      var24 = var22;\n      var13 = 0;\n    }\n    if ((0 < var24) && (0 < var9)) {\n      var2 = var24;\n      if (var9 <= var24) {\n        var2 = var9;\n      }\n      var9 = var9 - var2;\n      var22 = var22 - var2;\n      var24 = var24 - var2;\n    }\n    if (var25 != 0) {\n      if (bool3) {\n        var7 = var1;\n        if (var8 != 0) {\n          var13 = perform_operation_080093a4(input,var13,var8);\n          var7 = initialize_memory_08009258(input,var13,var1);\n          update_pointer_0800910c(input,var1);\n          var1 = var7;\n          if (var25 - var8 == 0) goto LAB_08008062;\n        }\n        var1 = perform_operation_080093a4(input,var7,var25 - var8);\n      }\n      else {\n        var1 = perform_operation_080093a4(input,var1,var25);\n      }\n    }\nLAB_08008062:\n    var8 = initialize_memory_08009244(input,1);\n    if (var26 == 0) {\n      if (((int)param5 < 2) && (param3 == 0)) {\nLAB_0800835a:\n        if ((var11 & 0xfffff) == 0) {\n          var11 = var11 & 0x7ff00000;\n          if (var11 != 0) {\n            var9 = var9 + 1;\n            var22 = var22 + 1;\n            var11 = 1;\n          }\n        }\n        else {\n          var11 = 0;\n        }\n        bool4 = var26 != 0;\n        var12 = param3;\n        var26 = var11;\n        if (bool4) goto LAB_080082d4;\n      }\n      var2 = 1;\n    }\n    else {\n      var16 = perform_operation_080093a4(input,var8);\n      var8 = (int)var16;\n      if (((int)param5 < 2) && (param3 == 0)) goto LAB_0800835a;\n      var26 = 0;\n      var12 = (uint)((ulonglong)var16 >> 0x20);\nLAB_080082d4:\n      var2 = count_leading_zeros_080091a4(*(undefined4 *)(var8 + *(int *)(var8 + 0x10) * 4 + 0x10),var12);\n      var2 = 0x20 - var2;\n    }\n    var12 = var2 + var9 & 0x1f;\n    if (var12 == 0) {\n      var2 = 0x1c;\nLAB_08008096:\n      var9 = var9 + var2;\n      var22 = var22 + var2;\n      var24 = var24 + var2;\n    }\n    else {\n      if (4 < (int)(0x20 - var12)) {\n        var2 = 0x1c - var12;\n        goto LAB_08008096;\n      }\n      if (0x20 - var12 != 4) {\n        var2 = 0x3c - var12;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < var22) {\n      var1 = decompile_and_allocate_memory_08009444(input,var1,var22);\n    }\n    if (0 < var9) {\n      var8 = decompile_and_allocate_memory_08009444(input,var8,var9);\n    }\n    str2 = str1;\n    if ((bool2) && (var9 = compare_arrays_080094f8(var1,var8), var9 < 0)) {\n      var21 = var21 - 1;\n      var1 = multiply_and_sum_08009120(input,var1,10,0);\n      if (bool3) {\n        var13 = multiply_and_sum_08009120(input,var13,10,0);\n        if ((0 < (int)var29) || ((int)param5 < 3)) {\n          var23 = var29;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)var29) || ((int)param5 < 3)) {\n        var23 = var29;\n        goto LAB_0800820a;\n      }\n      var23 = var29;\nLAB_080084e8:\n      if (var23 == 0) {\n        var9 = multiply_and_sum_08009120(input,var8,5);\n        var4 = compare_arrays_080094f8(var1,var9);\n        var2 = var13;\n        var8 = var9;\n        if (0 < var4) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)var23 < 1) && (2 < (int)param5)) goto LAB_080084e8;\n    if (bool3) {\nLAB_080080de:\n      var19 = var13;\n      if (0 < var24) {\n        var19 = decompile_and_allocate_memory_08009444(input,var13,var24);\n      }\n      var13 = var19;\n      if (var26 != 0) {\n        var13 = allocate_and_return_memory_080090c0(input,*(undefined4 *)(var19 + 4));\n        copy_memory_08001084(var13 + 0xc,var19 + 0xc,(*(int *)(var19 + 0x10) + 2) * 4);\n        var13 = decompile_and_allocate_memory_08009444(input,var13,1);\n      }\nLAB_08008108:\n      var9 = calculate_divide_and_subtract_080078c0(var1,var8);\n      var2 = compare_arrays_080094f8(var1,var19);\n      var4 = compare_arrays_08009530(input,var8,var13);\n      var15 = var9 + 0x30;\n      if (*(int *)(var4 + 0xc) == 0) {\n        var3 = compare_arrays_080094f8(var1);\n        update_pointer_0800910c(input,var4);\n        if ((var3 != 0) || (param5 != 0)) goto LAB_0800815a;\n        if ((param3 & 1) != 0) {\n          var3 = 0;\n          goto LAB_0800815a;\n        }\n        if (var15 != 0x39) {\n          if (0 < var2) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        str3 = str2 + 1;\n        char1 = '9';\n        *str2 = '9';\n        goto LAB_08008268;\n      }\n      update_pointer_0800910c(input,var4);\n      var3 = 1;\nLAB_0800815a:\n      if ((var2 < 0) || (((var2 == 0 && (param5 == 0)) && ((param3 & 1) == 0)))) {\n        if (0 < var3) {\n          var1 = decompile_and_allocate_memory_08009444(input,var1,1);\n          var2 = compare_arrays_080094f8(var1,var8);\n          if ((0 < var2) || ((var2 == 0 && (var9 << 0x1f < 0)))) {\n            if (var15 == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            var15 = var9 + 0x31;\n          }\n        }\nLAB_080085a4:\n        str3 = str2 + 1;\n        *str2 = (char)var15;\n        goto LAB_08008274;\n      }\n      str3 = str2 + 1;\n      if (0 < var3) {\n        if (var15 == 0x39) goto LAB_08008752;\n        *str2 = (char)var9 + '1';\n        goto LAB_08008274;\n      }\n      *str2 = (char)var15;\n      if (str1 + (var23 - 1) != str2) {\n        var1 = multiply_and_sum_08009120(input,var1,10,0);\n        str2 = str3;\n        if (var19 == var13) {\n          var19 = multiply_and_sum_08009120(input,var19,10,0);\n          var13 = var19;\n        }\n        else {\n          var19 = multiply_and_sum_08009120(input,var19,10,0);\n          var13 = multiply_and_sum_08009120(input,var13,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        var15 = calculate_divide_and_subtract_080078c0(var1,var8);\n        var15 = var15 + 0x30;\n        str3 = str2 + 1;\n        *str2 = (char)var15;\n        if ((int)var23 <= (int)str3 - (int)str1) break;\n        var1 = multiply_and_sum_08009120(input,var1,10,0);\n        str2 = str3;\n      }\n      var19 = 0;\n    }\n    var1 = decompile_and_allocate_memory_08009444(input,var1,1);\n    var9 = compare_arrays_080094f8(var1,var8);\n    char1 = str3[-1];\n    if ((0 < var9) || ((var9 == 0 && (var15 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        str2 = str3 + -1;\n        if (char1 != '9') goto code_r0x08008270;\n        if (str1 == str2) {\n          *str1 = '1';\n          var21 = var21 + 1;\n          goto LAB_08008274;\n        }\n        char1 = str3[-2];\n        str3 = str2;\n      } while( true );\n    }\n    while (char1 == '0') {\n      char1 = str3[-2];\n      str3 = str3 + -1;\n    }\nLAB_08008274:\n    update_pointer_0800910c(input,var8);\n    if (var13 == 0) goto LAB_08008294;\n    if ((var19 != 0) && (var19 != var13)) {\n      update_pointer_0800910c(input);\n    }\n  }\n  update_pointer_0800910c(input,var13);\nLAB_08008294:\n  update_pointer_0800910c(input,var1);\n  *str3 = '\\0';\n  *output1 = var21 + 1;\n  if (output3 == (char **)0x0) {\n    return str1;\n  }\n  *output3 = str3;\n  return str1;\ncode_r0x08008270:\n  *str2 = char1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "decompiled_function_080079e8",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "output1",
                "param_8": "output2",
                "param_9": "output3",
                "bVar1": "bool1",
                "bVar2": "bool2",
                "bVar3": "bool3",
                "cVar4": "char1",
                "bVar5": "byte1",
                "uVar6": "var1",
                "iVar7": "var2",
                "iVar8": "var3",
                "iVar9": "var4",
                "pcVar10": "str1",
                "uVar11": "var5",
                "uVar12": "var6",
                "uVar13": "var7",
                "iVar14": "var8",
                "iVar15": "var9",
                "uVar16": "var10",
                "uVar17": "var11",
                "uVar18": "var12",
                "iVar19": "var13",
                "pcVar20": "str2",
                "pcVar21": "str3",
                "puVar22": "ptr1",
                "uVar23": "var14",
                "iVar24": "var15",
                "bVar25": "bool4",
                "uVar26": "var16",
                "uVar27": "var17",
                "uVar28": "var18",
                "local_80": "var19",
                "local_7c": "var20",
                "local_74": "var21",
                "local_70": "var22",
                "local_68": "var23",
                "local_60": "var24",
                "local_5c": "var25",
                "local_58": "var26",
                "local_48": "var27",
                "uStack_44": "var28",
                "local_38": "var29",
                "local_34": "var30",
                "local_30": "var31",
                "local_2c": "var32"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_0800015c",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08000158",
                "FUN_08009120",
                "FUN_080009e8",
                "FUN_080093a4",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_080009ac",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "initialize_and_allocate_memory_0800884c",
            "code": "\nundefined4 initialize_and_allocate_memory_0800884c(undefined4 arg1,int arg2)\n\n{\n  int allocated_memory;\n  int adjusted_address;\n  uint data_offset;\n  \n  initialize_data_080090a8();\n  data_offset = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_address = ((0xfef - arg2) + data_offset & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_address) {\n    allocated_memory = allocate_memory_and_check_08009744(arg1,0);\n    if (allocated_memory == DAT_20000454 + data_offset) {\n      allocated_memory = allocate_memory_and_check_08009744(arg1,-adjusted_address);\n      if (allocated_memory != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_address;\n        *(uint *)(DAT_20000454 + 4) = data_offset - adjusted_address | 1;\n        initialize_data_structures_080090b4(arg1);\n        return 1;\n      }\n      adjusted_address = allocate_memory_and_check_08009744(arg1,0);\n      if (0xf < adjusted_address - DAT_20000454) {\n        DAT_20000a14 = adjusted_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  initialize_data_structures_080090b4(arg1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "initialize_and_allocate_memory_0800884c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "allocated_memory",
                "iVar2": "adjusted_address",
                "uVar3": "data_offset"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "initialize_data_structures_080088ec",
            "code": "\nvoid initializeDataStructures_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *ptr1;\n  uint *ptr2;\n  undefined *ptr3;\n  uint size;\n  uint offset;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined4 *ptr6;\n  int count;\n  uint tmp1;\n  uint tmp2;\n  \n  if (param2 == 0) {\n    return;\n  }\n  initialize_data_080090a8();\n  tmp1 = *(uint *)(param2 + -4);\n  ptr1 = (uint *)(param2 + -8);\n  size = tmp1 & 0xfffffffe;\n  ptr2 = (uint *)((int)ptr1 + size);\n  offset = ptr2[1] & 0xfffffffc;\n  if (DAT_20000454 == ptr2) {\n    size = size + offset;\n    if ((tmp1 & 1) == 0) {\n      ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n      offset = ptr1[2];\n      tmp1 = ptr1[3];\n      size = size + *(int *)(param2 + -8);\n      *(uint *)(offset + 0xc) = tmp1;\n      *(uint *)(tmp1 + 8) = offset;\n    }\n    offset = DAT_20000858;\n    ptr1[1] = size | 1;\n    DAT_20000454 = ptr1;\n    if (offset <= size) {\n      initialize_and_allocate_memory_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data_structures_080090b4(param1);\n    return;\n  }\n  ptr2[1] = offset;\n  if ((tmp1 & 1) == 0) {\n    ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n    ptr6 = (undefined4 *)ptr1[2];\n    size = size + *(int *)(param2 + -8);\n    tmp1 = *(uint *)((int)ptr2 + offset + 4) & 1;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      if (tmp1 == 0) {\n        tmp1 = ptr2[2];\n        tmp2 = ptr2[3];\n        size = size + offset;\n        *(uint *)(tmp1 + 0xc) = tmp2;\n        *(uint *)(tmp2 + 8) = tmp1;\n        ptr1[1] = size | 1;\n        *(uint *)((int)ptr1 + size) = size;\n      }\n      else {\n        ptr1[1] = size | 1;\n        *ptr2 = size;\n      }\n      goto LAB_080089f0;\n    }\n    tmp2 = ptr1[3];\n    ptr6[3] = tmp2;\n    *(undefined4 **)(tmp2 + 8) = ptr6;\n  }\n  else {\n    tmp1 = *(uint *)((int)ptr2 + offset + 4) & 1;\n  }\n  if (tmp1 == 0) {\n    ptr6 = (undefined4 *)ptr2[2];\n    size = size + offset;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      DAT_2000045c = ptr1;\n      DAT_20000460 = ptr1;\n      ptr1[2] = (uint)&DAT_20000454;\n      ptr1[3] = (uint)&DAT_20000454;\n      ptr1[1] = size | 1;\n      *(uint *)((int)ptr1 + size) = size;\n      goto LAB_080089f0;\n    }\n    offset = ptr2[3];\n    ptr6[3] = offset;\n    *(undefined4 **)(offset + 8) = ptr6;\n    ptr1[1] = size | 1;\n    *(uint *)((int)ptr1 + size) = size;\n  }\n  else {\n    ptr1[1] = size | 1;\n    *(uint *)((int)ptr1 + size) = size;\n  }\n  if (size < 0x200) {\n    count = (size >> 3) + 1;\n    size = 1 << ((int)(size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    offset = *(uint *)(&DAT_2000044c + count * 8);\n    ptr1[2] = offset;\n    ptr1[3] = (uint)(&DAT_20000444 + count * 8);\n    DAT_20000450 = (undefined *)size;\n    *(uint **)(&DAT_2000044c + count * 8) = ptr1;\n    *(uint **)(offset + 0xc) = ptr1;\n    initialize_data_structures_080090b4(param1,ptr1,size,param4);\n    return;\n  }\n  offset = size >> 9;\n  if (offset < 5) {\n    count = ((size >> 6) + 0x39) * 8;\n    index = (size >> 6) + 0x38;\n  }\n  else if (offset < 0x15) {\n    count = (offset + 0x5c) * 8;\n    index = offset + 0x5b;\n  }\n  else if (offset < 0x55) {\n    count = ((size >> 0xc) + 0x6f) * 8;\n    index = (size >> 0xc) + 0x6e;\n  }\n  else if (offset < 0x155) {\n    count = ((size >> 0xf) + 0x78) * 8;\n    index = (size >> 0xf) + 0x77;\n  }\n  else if (offset < 0x555) {\n    count = ((size >> 0x12) + 0x7d) * 8;\n    index = (size >> 0x12) + 0x7c;\n  }\n  else {\n    count = 0x3f8;\n    index = 0x7e;\n  }\n  ptr3 = *(undefined **)(&DAT_2000044c + count);\n  ptr4 = &DAT_20000444 + count;\n  if (ptr4 == ptr3) {\n    ptr3 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    ptr5 = ptr4;\n    DAT_20000450 = ptr3;\n  }\n  else {\n    do {\n      ptr5 = ptr3;\n      if ((*(uint *)(ptr3 + 4) & 0xfffffffc) <= size) break;\n      ptr3 = *(undefined **)(ptr3 + 8);\n      ptr5 = ptr4;\n    } while (ptr4 != ptr3);\n    ptr4 = *(undefined **)(ptr5 + 0xc);\n  }\n  ptr1[2] = (uint)ptr5;\n  ptr1[3] = (uint)ptr4;\n  *(uint **)(ptr4 + 8) = ptr1;\n  *(uint **)(ptr5 + 0xc) = ptr1;\n  initialize_data_structures_080090b4(param1,ptr1,ptr3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "initialize_data_structures_080088ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "size",
                "uVar6": "offset",
                "puVar7": "ptr4",
                "puVar8": "ptr5",
                "puVar9": "ptr6",
                "iVar10": "count",
                "uVar11": "tmp1",
                "uVar12": "tmp2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_offset_value_08008ad4",
            "code": "\nint getOffsetValue_08008ad4(void)\n\n{\n  int offsetValue;\n  \n  offsetValue = *(int *)(DAT_2000001c + 0x34);\n  if (offsetValue == 0) {\n    offsetValue = 0x2000085c;\n  }\n  return offsetValue + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_offset_value_08008ad4",
                "iVar1": "offsetValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_and_initialize_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_initialize_memory_08008af8(undefined4 *pointer_to_size,uint size)\n\n{\n  undefined *pointer1;\n  uint var1;\n  uint var2;\n  int var3;\n  undefined *pointer2;\n  uint var4;\n  uint var5;\n  undefined4 *pointer3;\n  undefined *pointer4;\n  undefined *pointer5;\n  int *result;\n  uint var6;\n  uint var7;\n  int var8;\n  undefined4 *pointer6;\n  undefined4 *pointer7;\n  \n  var6 = size + 0xb;\n  if (var6 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    initialize_data_080090a8();\n    var7 = 0x10;\n    var3 = 0x18;\n    var6 = 2;\nLAB_08008b18:\n    pointer5 = *(undefined **)((int)&DAT_20000450 + var3);\n    if ((pointer5 != &DAT_20000444 + var3) ||\n       (pointer5 = *(undefined **)((int)&DAT_20000458 + var3), &DAT_2000044c + var3 != pointer5)) {\n      var3 = *(int *)(pointer5 + 0xc);\n      pointer2 = pointer5 + (*(uint *)(pointer5 + 4) & 0xfffffffc);\n      var6 = *(uint *)(pointer2 + 4);\nLAB_08008b34:\n      var8 = *(int *)(pointer5 + 8);\n      *(int *)(var8 + 0xc) = var3;\n      *(int *)(var3 + 8) = var8;\n      *(uint *)(pointer2 + 4) = var6 | 1;\n      initialize_data_structures_080090b4(pointer_to_size);\n      return (int *)(pointer5 + 8);\n    }\n    var6 = var6 + 2;\n  }\n  else {\n    var7 = var6 & 0xfffffff8;\n    if (((int)var7 < 0) || (var7 < size)) {\nLAB_08008c7a:\n      *pointer_to_size = 0xc;\n      return (int *)0x0;\n    }\n    initialize_data_080090a8();\n    if (var7 < 0x1f8) {\n      var6 = var6 >> 3;\n      var3 = var7 + 8;\n      goto LAB_08008b18;\n    }\n    var1 = var6 >> 9;\n    if (var1 == 0) {\n      var3 = 0x200;\n      var4 = 0x40;\n      var1 = 0x3f;\n    }\n    else if (var1 < 5) {\n      var4 = (var6 >> 6) + 0x39;\n      var1 = (var6 >> 6) + 0x38;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x15) {\n      var4 = var1 + 0x5c;\n      var1 = var1 + 0x5b;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x55) {\n      var4 = (var6 >> 0xc) + 0x6f;\n      var1 = (var6 >> 0xc) + 0x6e;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x155) {\n      var4 = (var6 >> 0xf) + 0x78;\n      var1 = (var6 >> 0xf) + 0x77;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x555) {\n      var4 = (var6 >> 0x12) + 0x7d;\n      var1 = (var6 >> 0x12) + 0x7c;\n      var3 = var4 * 8;\n    }\n    else {\n      var3 = 0x3f8;\n      var4 = 0x7f;\n      var1 = 0x7e;\n    }\n    for (pointer5 = *(undefined **)((int)&DAT_20000450 + var3); var6 = var4,\n        &DAT_20000444 + var3 != pointer5; pointer5 = *(undefined **)(pointer5 + 0xc)) {\n      var8 = (*(uint *)(pointer5 + 4) & 0xfffffffc) - var7;\n      var6 = var1;\n      if (0xf < var8) break;\n      if (-1 < var8) {\n        pointer2 = pointer5 + (*(uint *)(pointer5 + 4) & 0xfffffffc);\n        var6 = *(uint *)(pointer2 + 4);\n        var3 = *(int *)(pointer5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  pointer6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    var4 = 1 << ((int)var6 >> 2 & 0xffU);\n    var1 = DAT_20000450;\n    if (var4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var4 = DAT_2000045c[1];\n    var5 = var4 & 0xfffffffc;\n    var1 = var5 - var7;\n    if (0xf < (int)var1) {\n      pointer7 = (undefined4 *)(var7 + (int)DAT_2000045c);\n      DAT_2000045c[1] = var7 | 1;\n      DAT_2000045c = pointer7;\n      DAT_20000460 = pointer7;\n      pointer7[2] = &DAT_20000454;\n      pointer7[3] = &DAT_20000454;\n      pointer7[1] = var1 | 1;\n      *(uint *)((int)pointer6 + var5) = var1;\n      initialize_data_structures_080090b4(pointer_to_size);\n      return pointer6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)var1) {\n      *(uint *)((int)pointer6 + var5 + 4) = *(uint *)((int)pointer6 + var5 + 4) | 1;\n      initialize_data_structures_080090b4(pointer_to_size);\n      return pointer6 + 2;\n    }\n    if (var5 < 0x200) {\n      var3 = (var4 >> 3) + 1;\n      var8 = *(int *)(&DAT_2000044c + var3 * 8);\n      var1 = 1 << ((int)(var4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      pointer6[2] = var8;\n      pointer6[3] = &DAT_20000444 + var3 * 8;\n      DAT_20000450 = var1;\n      *(undefined4 **)(&DAT_2000044c + var3 * 8) = pointer6;\n      *(undefined4 **)(var8 + 0xc) = pointer6;\n    }\n    else {\n      var1 = var4 >> 9;\n      if (var1 < 5) {\n        var3 = ((var4 >> 6) + 0x39) * 8;\n        var8 = (var4 >> 6) + 0x38;\n      }\n      else if (var1 < 0x15) {\n        var3 = (var1 + 0x5c) * 8;\n        var8 = var1 + 0x5b;\n      }\n      else if (var1 < 0x55) {\n        var3 = ((var4 >> 0xc) + 0x6f) * 8;\n        var8 = (var4 >> 0xc) + 0x6e;\n      }\n      else if (var1 < 0x155) {\n        var3 = ((var4 >> 0xf) + 0x78) * 8;\n        var8 = (var4 >> 0xf) + 0x77;\n      }\n      else if (var1 < 0x555) {\n        var3 = ((var4 >> 0x12) + 0x7d) * 8;\n        var8 = (var4 >> 0x12) + 0x7c;\n      }\n      else {\n        var3 = 0x3f8;\n        var8 = 0x7e;\n      }\n      pointer5 = *(undefined **)(&DAT_2000044c + var3);\n      pointer2 = &DAT_20000444 + var3;\n      if (pointer2 == pointer5) {\n        DAT_20000450 = 1 << (var8 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(pointer5 + 4) & 0xfffffffc) <= var5) break;\n          pointer5 = *(undefined **)(pointer5 + 8);\n        } while (pointer2 != pointer5);\n        pointer2 = *(undefined **)(pointer5 + 0xc);\n      }\n      var1 = DAT_20000450;\n      pointer6[2] = pointer5;\n      pointer6[3] = pointer2;\n      *(undefined4 **)(pointer2 + 8) = pointer6;\n      *(undefined4 **)(pointer5 + 0xc) = pointer6;\n    }\n    var4 = 1 << ((int)var6 >> 2 & 0xffU);\n    if (var4 <= var1) {\nLAB_08008c06:\n      if ((var4 & var1) == 0) {\n        var6 = var6 & 0xfffffffc;\n        do {\n          var4 = var4 << 1;\n          var6 = var6 + 4;\n        } while ((var4 & var1) == 0);\n      }\n      do {\n        pointer7 = (undefined4 *)(&DAT_2000044c + var6 * 8);\n        var1 = var6;\n        pointer6 = pointer7;\n        do {\n          for (pointer3 = (undefined4 *)pointer6[3]; pointer6 != pointer3;\n              pointer3 = (undefined4 *)pointer3[3]) {\n            var5 = pointer3[1] & 0xfffffffc;\n            var2 = var5 - var7;\n            if (0xf < (int)var2) {\n              var8 = pointer3[2];\n              var3 = pointer3[3];\n              pointer6 = (undefined4 *)(var7 + (int)pointer3);\n              pointer3[1] = var7 | 1;\n              *(int *)(var8 + 0xc) = var3;\n              *(int *)(var3 + 8) = var8;\n              DAT_2000045c = pointer6;\n              DAT_20000460 = pointer6;\n              pointer6[2] = &DAT_20000454;\n              pointer6[3] = &DAT_20000454;\n              pointer6[1] = var2 | 1;\n              *(uint *)((int)pointer3 + var5) = var2;\n              initialize_data_structures_080090b4(pointer_to_size);\n              return pointer3 + 2;\n            }\n            if (-1 < (int)var2) {\n              var3 = pointer3[3];\n              var8 = pointer3[2];\n              *(uint *)((int)pointer3 + var5 + 4) = *(uint *)((int)pointer3 + var5 + 4) | 1;\n              *(int *)(var8 + 0xc) = var3;\n              *(int *)(var3 + 8) = var8;\n              initialize_data_structures_080090b4(pointer_to_size);\n              return pointer3 + 2;\n            }\n          }\n          var1 = var1 + 1;\n          pointer6 = pointer6 + 2;\n        } while ((var1 & 3) != 0);\n        do {\n          var5 = var6 & 3;\n          pointer6 = pointer7 + -2;\n          var6 = var6 - 1;\n          if (var5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var4;\n            break;\n          }\n          pointer7 = (undefined4 *)*pointer7;\n        } while (pointer7 == pointer6);\n        var4 = var4 * 2;\n        if ((DAT_20000450 <= var4 && var4 - DAT_20000450 != 0) || (var6 = var1, var4 == 0))\n        break;\n        for (; (var4 & DAT_20000450) == 0; var4 = var4 << 1) {\n          var6 = var6 + 4;\n        }\n      } while( true );\n    }\n  }\n  pointer5 = DAT_20000454;\n  var6 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((var7 <= var6) && (var1 = var6 - var7, 0xf < (int)var1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    var1 = var7 + DAT_20000a44 + 0x10;\n  }\n  else {\n    var1 = var7 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  pointer2 = (undefined *)allocate_memory_and_check_08009744(pointer_to_size,var1);\n  if (pointer2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    var6 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    pointer1 = pointer5 + var6;\n    if (pointer1 < pointer2 || pointer1 == pointer2) {\n      pointer4 = DAT_20000a14 + var1;\n      if ((pointer1 != pointer2) || (((uint)pointer1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = pointer4;\n      *(uint *)(DAT_20000454 + 4) = var6 + var1 | 1;\n    }\n    else {\n      if (pointer5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + var1;\n      pointer4 = pointer2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)pointer2 - (int)pointer1);\n        pointer4 = DAT_20000854;\n      }\n      DAT_20000854 = pointer4;\n      var4 = (uint)pointer2 & 7;\n      if (var4 == 0) {\n        var3 = 0x1000;\n      }\n      else {\n        pointer2 = pointer2 + (8 - var4);\n        var3 = 0x1008 - var4;\n      }\n      var3 = var3 - ((uint)(pointer2 + var1) & 0xfff);\n      var8 = allocate_memory_and_check_08009744(pointer_to_size,var3);\n      if (var8 == -1) {\n        var1 = 1;\n        var3 = 0;\n      }\n      else {\n        var1 = (var8 - (int)pointer2) + var3 | 1;\n      }\n      pointer4 = DAT_20000a14 + var3;\n      DAT_20000454 = pointer2;\n      DAT_20000a14 = pointer4;\n      *(uint *)(pointer2 + 4) = var1;\n      if (pointer5 != &DAT_2000044c) {\n        if (var6 < 0x10) {\n          *(undefined4 *)(pointer2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        var6 = var6 - 0xc & 0xfffffff8;\n        *(uint *)(pointer5 + 4) = *(uint *)(pointer5 + 4) & 1 | var6;\n        *(undefined4 *)(pointer5 + var6 + 4) = 5;\n        *(undefined4 *)(pointer5 + var6 + 8) = 5;\n        if (0xf < var6) {\n          initialize_data_structures_080088ec(pointer_to_size,pointer5 + 8);\n          pointer4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < pointer4) {\n      DAT_20000a3c = pointer4;\n    }\n    var6 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < pointer4) {\n      DAT_20000a40 = pointer4;\n    }\n  }\n  var1 = (var6 & 0xfffffffc) - var7;\n  if ((var7 <= (var6 & 0xfffffffc)) && (0xf < (int)var1)) {\nLAB_08008dac:\n    pointer5 = DAT_20000454 + var7;\n    *(uint *)(DAT_20000454 + 4) = var7 | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = pointer5;\n    *(uint *)(pointer5 + 4) = var1 | 1;\n    initialize_data_structures_080090b4(pointer_to_size);\n    return result;\n  }\nLAB_08008eee:\n  initialize_data_structures_080090b4(pointer_to_size);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_and_initialize_memory_08008af8",
                "param_1": "pointer_to_size",
                "param_2": "size",
                "puVar1": "pointer1",
                "uVar2": "var1",
                "uVar3": "var2",
                "iVar4": "var3",
                "puVar5": "pointer2",
                "uVar6": "var4",
                "uVar7": "var5",
                "puVar8": "pointer3",
                "puVar9": "pointer4",
                "puVar10": "pointer5",
                "piVar11": "result",
                "uVar12": "var6",
                "uVar13": "var7",
                "iVar14": "var8",
                "puVar15": "pointer6",
                "puVar16": "pointer7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "extract_data_0800901c",
            "code": "\nuint * extract_data_0800901c(uint *data_array,uint length,uint search_value)\n\n{\n  uint result;\n  uint combined_value;\n  uint *current_element;\n  uint search_byte;\n  bool is_length_zero;\n  \n  search_byte = length & 0xff;\n  if (((uint)data_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < search_value) {\n      combined_value = (length & 0xff) << 8 | search_byte;\n      current_element = data_array;\n      do {\n        result = *current_element ^ (combined_value | combined_value << 0x10);\n        data_array = current_element + 1;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) goto LAB_08009050;\n        search_value = search_value - 4;\n        current_element = data_array;\n      } while (3 < search_value);\n    }\n    current_element = data_array;\n    if (search_value == 0) {\n      data_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      data_array = current_element;\n      if (*(byte *)data_array != search_byte) {\n        current_element = (uint *)(search_value + (int)data_array);\n        do {\n          data_array = (uint *)((int)data_array + 1);\n          if (current_element == data_array) goto LAB_0800906c;\n        } while (*(byte *)data_array != search_byte);\n      }\n    }\n  }\n  else {\n    combined_value = search_value - 1;\n    if (search_value == 0) {\nLAB_0800906c:\n      data_array = (uint *)0x0;\n    }\n    else if (*(byte *)data_array != search_byte) {\n      current_element = (uint *)((int)data_array + 1);\n      do {\n        data_array = current_element;\n        search_value = combined_value;\n        if (((uint)data_array & 3) == 0) goto LAB_0800904a;\n        is_length_zero = combined_value == 0;\n        combined_value = combined_value - 1;\n        if (is_length_zero) goto LAB_0800906c;\n        current_element = (uint *)((int)data_array + 1);\n      } while (*(byte *)data_array != search_byte);\n    }\n  }\n  return data_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "extract_data_0800901c",
                "param_1": "data_array",
                "param_2": "length",
                "param_3": "search_value",
                "uVar1": "result",
                "uVar2": "combined_value",
                "puVar3": "current_element",
                "uVar4": "search_byte",
                "bVar5": "is_length_zero"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initializeData_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_structures_080090b4",
            "code": "\nvoid initializeDataStructures_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_structures_080090b4"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "allocate_and_return_memory_080090c0",
            "code": "\nundefined4 * allocate_and_return_memory_080090c0(int ptr_first_parameter,uint param_index)\n\n{\n  undefined4 *ptr_memory;\n  int ptr_allocated_memory;\n  \n  ptr_allocated_memory = *(int *)(ptr_first_parameter + 0x4c);\n  if (ptr_allocated_memory == 0) {\n    ptr_allocated_memory = allocate_and_initialize_memory_08009980(ptr_first_parameter,4,0x21);\n    *(int *)(ptr_first_parameter + 0x4c) = ptr_allocated_memory;\n    if (ptr_allocated_memory == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  ptr_memory = *(undefined4 **)(ptr_allocated_memory + param_index * 4);\n  if (ptr_memory == (undefined4 *)0x0) {\n    ptr_allocated_memory = 1 << (param_index & 0xff);\n    ptr_memory = (undefined4 *)allocate_and_initialize_memory_08009980(ptr_first_parameter,1,(ptr_allocated_memory + 5) * 4);\n    if (ptr_memory == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    ptr_memory[1] = param_index;\n    ptr_memory[2] = ptr_allocated_memory;\n  }\n  else {\n    *(undefined4 *)(ptr_allocated_memory + param_index * 4) = *ptr_memory;\n  }\n  ptr_memory[3] = 0;\n  ptr_memory[4] = 0;\n  return ptr_memory;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "allocate_and_return_memory_080090c0",
                "param_1": "ptr_first_parameter",
                "param_2": "param_index",
                "puVar1": "ptr_memory",
                "iVar2": "ptr_allocated_memory"
            },
            "calling": [
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_pointer_0800910c",
            "code": "\nvoid updatePointer_0800910c(int baseAddress,undefined4 *pointerToUpdate)\n\n{\n  int offset;\n  \n  if (pointerToUpdate != (undefined4 *)0x0) {\n    offset = *(int *)(baseAddress + 0x4c);\n    *pointerToUpdate = *(undefined4 *)(offset + pointerToUpdate[1] * 4);\n    *(undefined4 **)(offset + pointerToUpdate[1] * 4) = pointerToUpdate;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_pointer_0800910c",
                "param_1": "baseAddress",
                "param_2": "pointerToUpdate",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "multiply_and_sum_08009120",
            "code": "\nundefined4 * multiplyAndSum_08009120(int input_param,undefined4 *array,int multiplier,uint carry)\n\n{\n  undefined4 *result_array;\n  uint temp_value;\n  int array_length;\n  uint *array_pointer;\n  int count;\n  \n  count = 0;\n  array_length = array[4];\n  array_pointer = array + 5;\n  do {\n    count = count + 1;\n    carry = multiplier * (*array_pointer & 0xffff) + carry;\n    temp_value = multiplier * (*array_pointer >> 0x10) + (carry >> 0x10);\n    *array_pointer = (carry & 0xffff) + temp_value * 0x10000;\n    carry = temp_value >> 0x10;\n    array_pointer = array_pointer + 1;\n  } while (count < array_length);\n  result_array = array;\n  if (carry != 0) {\n    if ((int)array[2] <= array_length) {\n      result_array = (undefined4 *)allocate_and_return_memory_080090c0(input_param,array[1] + 1);\n      copy_memory_08001084(result_array + 3,array + 3,(array[4] + 2) * 4);\n      count = *(int *)(input_param + 0x4c);\n      *array = *(undefined4 *)(count + array[1] * 4);\n      *(undefined4 **)(count + array[1] * 4) = array;\n    }\n    result_array[array_length + 5] = carry;\n    result_array[4] = array_length + 1;\n  }\n  return result_array;\n}\n\n",
            "renaming": {
                "FUN_08009120": "multiply_and_sum_08009120",
                "param_1": "input_param",
                "param_2": "array",
                "param_3": "multiplier",
                "param_4": "carry",
                "puVar1": "result_array",
                "uVar2": "temp_value",
                "iVar3": "array_length",
                "puVar4": "array_pointer",
                "iVar5": "count"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZeros = 0x10;\n  }\n  else {\n    leadingZeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZeros = leadingZeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZeros = leadingZeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZeros = leadingZeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZeros + 1;\n    }\n    leadingZeros = 0x20;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZeros"
            },
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_trailing_zeros_080091e4",
            "code": "\nint count_trailing_zeros_080091e4(uint *num_ptr)\n\n{\n  int num_zeros_count;\n  uint num;\n  \n  num = *num_ptr;\n  if ((num & 7) == 0) {\n    if ((num & 0xffff) == 0) {\n      num = num >> 0x10;\n      num_zeros_count = 0x10;\n    }\n    else {\n      num_zeros_count = 0;\n    }\n    if ((num & 0xff) == 0) {\n      num = num >> 8;\n      num_zeros_count = num_zeros_count + 8;\n    }\n    if ((num & 0xf) == 0) {\n      num = num >> 4;\n      num_zeros_count = num_zeros_count + 4;\n    }\n    if ((num & 3) == 0) {\n      num = num >> 2;\n      num_zeros_count = num_zeros_count + 2;\n    }\n    if (-1 < (int)(num << 0x1f)) {\n      num = num >> 1;\n      if (num == 0) {\n        return 0x20;\n      }\n      num_zeros_count = num_zeros_count + 1;\n    }\n    *num_ptr = num;\n    return num_zeros_count;\n  }\n  if ((int)(num << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(num << 0x1e)) {\n    *num_ptr = num >> 2;\n    return 2;\n  }\n  *num_ptr = num >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "param_1": "num_ptr",
                "iVar1": "num_zeros_count",
                "uVar2": "num"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_memory_08009244",
            "code": "\nvoid initializeMemory_08009244(undefined4 memorySize,undefined4 dataValue)\n\n{\n  int memoryAddress;\n  \n  memoryAddress = allocate_and_return_memory_080090c0(memorySize,1);\n  *(undefined4 *)(memoryAddress + 0x10) = 1;\n  *(undefined4 *)(memoryAddress + 0x14) = dataValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_memory_08009244",
                "param_1": "memorySize",
                "param_2": "dataValue",
                "iVar1": "memoryAddress"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_memory_08009258",
            "code": "\nvoid initializeMemory_08009258(undefined4 param1,int param2,int param3)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int index;\n  uint sum;\n  uint *ptr3;\n  uint start;\n  uint *ptr4;\n  uint temp;\n  int length1;\n  int length2;\n  uint end;\n  int tempVar1;\n  int tempVar2;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  tempVar1 = *(int *)(param2 + 0x10);\n  length1 = *(int *)(param3 + 0x10);\n  length2 = length1;\n  tempVar2 = param2;\n  if (tempVar1 < length1) {\n    length2 = tempVar1;\n    tempVar1 = length1;\n    tempVar2 = param3;\n    param3 = param2;\n  }\n  length1 = tempVar1 + length2;\n  index = *(int *)(tempVar2 + 4);\n  if (*(int *)(tempVar2 + 8) < length1) {\n    index = index + 1;\n  }\n  index = allocate_and_return_memory_080090c0(param1,index);\n  ptr9 = (uint *)(index + 0x14);\n  ptr8 = ptr9 + length1;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start = param3 + 0x14;\n  end = start + length2 * 4;\n  ptr3 = (uint *)(tempVar2 + 0x14);\n  if (start < end) {\n    ptr4 = (uint *)(start + ((end - param3) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(param3 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        start = *ptr7 & 0xffff;\n        if (start != 0) break;\n        start = *ptr7 >> 0x10;\n        if (start == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp = *ptr9;\n        sum = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        end = temp;\n        do {\n          ptr6 = ptr5;\n          sum = sum + start * *(ushort *)ptr1 + (end >> 0x10);\n          *ptr6 = temp & 0xffff | sum * 0x10000;\n          ptr2 = ptr1 + 1;\n          end = ptr6[1];\n          temp = start * (*ptr1 >> 0x10) + (end & 0xffff) + (sum >> 0x10);\n          sum = temp >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + tempVar1);\n        ptr6[1] = temp;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      end = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp = start * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + end;\n        sum = start * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp >> 0x10);\n        end = sum >> 0x10;\n        *ptr2 = temp & 0xffff | sum * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + tempVar1);\n      ptr2[1] = end;\n      start = *ptr7 >> 0x10;\n      if (start != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < length1) {\n    start = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start == 0 && (length1 = length1 + -1, length1 != 0))) {\n      ptr8 = ptr8 + -1;\n      start = *ptr8;\n    }\n  }\n  *(int *)(index + 0x10) = length1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_memory_08009258",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "index",
                "uVar4": "sum",
                "puVar5": "ptr3",
                "uVar6": "start",
                "puVar7": "ptr4",
                "uVar8": "temp",
                "iVar9": "length1",
                "iVar10": "length2",
                "uVar11": "end",
                "iVar12": "tempVar1",
                "iVar13": "tempVar2",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "perform_operation_080093a4",
            "code": "\nundefined4 * performOperation_080093a4(int input,undefined4 *output,uint size)\n\n{\n  int index;\n  int numIterations;\n  undefined4 *ptr;\n  undefined4 *ptr2;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              multiply_and_sum_08009120(input,output,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),\n                           0);\n  }\n  numIterations = (int)size >> 2;\n  if (numIterations != 0) {\n    ptr2 = *(undefined4 **)(input + 0x48);\n    if (ptr2 == (undefined4 *)0x0) {\n      ptr2 = (undefined4 *)allocate_and_return_memory_080090c0(input,1);\n      ptr2[4] = 1;\n      ptr2[5] = 0x271;\n      *(undefined4 **)(input + 0x48) = ptr2;\n      *ptr2 = 0;\n    }\n    ptr = output;\n    if (numIterations << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    numIterations = numIterations >> 1;\n    ptr = ptr2;\n    if (numIterations != 0) {\n      while( true ) {\n        ptr2 = (undefined4 *)*ptr;\n        if (ptr2 == (undefined4 *)0x0) {\n          ptr2 = (undefined4 *)initialize_memory_08009258(input,ptr,ptr);\n          *ptr = ptr2;\n          *ptr2 = 0;\n        }\n        ptr = output;\n        if (-1 < numIterations << 0x1f) break;\nLAB_080093d2:\n        output = (undefined4 *)initialize_memory_08009258(input,ptr,ptr2);\n        if (ptr == (undefined4 *)0x0) break;\n        index = *(int *)(input + 0x4c);\n        numIterations = numIterations >> 1;\n        *ptr = *(undefined4 *)(index + ptr[1] * 4);\n        *(undefined4 **)(index + ptr[1] * 4) = ptr;\n        ptr = ptr2;\n        if (numIterations == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "perform_operation_080093a4",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "iVar1": "index",
                "iVar2": "numIterations",
                "puVar3": "ptr",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "decompile_and_allocate_memory_08009444",
            "code": "\nvoid decompile_and_allocate_memory_08009444(int input_value,undefined4 *param_array,uint param_count)\n\n{\n  int temp_var1;\n  int temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int temp_var5;\n  int temp_var6;\n  uint *ptr_var1;\n  uint *ptr_var2;\n  uint *ptr_var4;\n  uint *ptr_var5;\n  int temp_var7;\n  int temp_var8;\n  uint temp_var9;\n  uint *ptr_var3;\n  \n  temp_var5 = param_array[4];\n  temp_var7 = (int)param_count >> 5;\n  temp_var8 = temp_var7 + temp_var5 + 1;\n  temp_var3 = param_array[1];\n  temp_var2 = param_array[2];\n  if ((int)param_array[2] < temp_var8) {\n    do {\n      temp_var6 = temp_var2 * 2;\n      temp_var1 = temp_var2 * -2;\n      temp_var3 = temp_var3 + 1;\n      temp_var2 = temp_var6;\n    } while (temp_var8 != temp_var6 && temp_var8 + temp_var1 < 0 == SBORROW4(temp_var8,temp_var6));\n  }\n  temp_var2 = allocate_and_return_memory_080090c0(input_value,temp_var3);\n  ptr_var1 = (uint *)(temp_var2 + 0x14);\n  if (0 < temp_var7) {\n    ptr_var5 = ptr_var1 + temp_var7;\n    ptr_var2 = ptr_var1;\n    do {\n      ptr_var3 = ptr_var2 + 1;\n      *ptr_var2 = 0;\n      ptr_var1 = ptr_var5;\n      ptr_var2 = ptr_var3;\n    } while (ptr_var3 != ptr_var5);\n  }\n  temp_var3 = param_array[4];\n  ptr_var2 = param_array + 5;\n  param_count = param_count & 0x1f;\n  if (param_count == 0) {\n    ptr_var1 = ptr_var1 + -1;\n    ptr_var5 = ptr_var2;\n    do {\n      ptr_var3 = ptr_var5 + 1;\n      ptr_var1 = ptr_var1 + 1;\n      *ptr_var1 = *ptr_var5;\n      ptr_var5 = ptr_var3;\n    } while (ptr_var3 < ptr_var2 + temp_var3);\n  }\n  else {\n    temp_var9 = 0;\n    ptr_var5 = ptr_var2;\n    do {\n      ptr_var3 = ptr_var1;\n      *ptr_var3 = *ptr_var5 << param_count | temp_var9;\n      ptr_var4 = ptr_var5 + 1;\n      temp_var9 = *ptr_var5 >> (0x20 - param_count & 0xff);\n      ptr_var1 = ptr_var3 + 1;\n      ptr_var5 = ptr_var4;\n    } while (ptr_var4 < ptr_var2 + temp_var3);\n    ptr_var3[1] = temp_var9;\n    if (temp_var9 != 0) {\n      temp_var8 = temp_var7 + temp_var5 + 2;\n    }\n  }\n  temp_var5 = *(int *)(input_value + 0x4c);\n  temp_var3 = param_array[1];\n  temp_var4 = *(undefined4 *)(temp_var5 + temp_var3 * 4);\n  *(int *)(temp_var2 + 0x10) = temp_var8 + -1;\n  *param_array = temp_var4;\n  *(undefined4 **)(temp_var5 + temp_var3 * 4) = param_array;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "decompile_and_allocate_memory_08009444",
                "param_1": "input_value",
                "param_2": "param_array",
                "param_3": "param_count",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "iVar3": "temp_var3",
                "uVar4": "temp_var4",
                "iVar5": "temp_var5",
                "iVar6": "temp_var6",
                "puVar7": "ptr_var1",
                "puVar8": "ptr_var2",
                "puVar9": "ptr_var3",
                "puVar10": "ptr_var4",
                "puVar11": "ptr_var5",
                "iVar12": "temp_var7",
                "iVar13": "temp_var8",
                "uVar14": "temp_var9"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *ptrElement2;\n  int array1Length;\n  uint *ptrElement1;\n  \n  array1Length = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array1Length;\n  if (difference == 0) {\n    ptrElement2 = (uint *)(array2 + 0x14 + array1Length * 4);\n    ptrElement1 = (uint *)(array1 + 0x14) + array1Length;\n    do {\n      ptrElement1 = ptrElement1 + -1;\n      ptrElement2 = ptrElement2 + -1;\n      if (*ptrElement1 != *ptrElement2) {\n        if (*ptrElement2 <= *ptrElement1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptrElement1);\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "iVar3": "array1Length",
                "puVar2": "ptrElement2",
                "puVar4": "ptrElement1"
            },
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "compare_arrays_08009530",
            "code": "\nvoid compareArrays_08009530(undefined4 param_1,uint *array1,uint *array2,undefined4 param_4)\n\n{\n  int result;\n  uint *ptr1;\n  uint value1;\n  uint value2;\n  undefined4 flag;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint *ptr6;\n  uint *endPtr;\n  int carry;\n  uint *ptr7;\n  uint length1;\n  uint *tempPtr;\n  \n  ptr1 = (uint *)array2[4];\n  endPtr = array1 + 5;\n  ptr7 = array2 + 5;\n  ptr4 = endPtr;\n  ptr5 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr3 = endPtr + (int)ptr1;\n    ptr1 = ptr7 + (int)ptr1;\n    while( true ) {\n      ptr3 = ptr3 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr3 != *ptr1) break;\n      if (ptr3 <= endPtr) {\n        carry = allocate_and_return_memory_080090c0(param_1,0,ptr3,ptr1,param_4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*ptr1 <= *ptr3) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    flag = 0;\n    ptr3 = array2;\n    goto LAB_08009578;\n  }\n  flag = 1;\n  ptr3 = endPtr;\n  ptr1 = array1;\n  ptr4 = ptr7;\n  ptr5 = array2;\n  array2 = array1;\n  ptr7 = endPtr;\nLAB_08009578:\n  result = allocate_and_return_memory_080090c0(param_1,ptr5[1],ptr3,ptr1,param_4);\n  carry = 0;\n  length1 = ptr5[4];\n  value1 = array2[4];\n  *(undefined4 *)(result + 0xc) = flag;\n  endPtr = ptr4 + length1;\n  ptr1 = (uint *)(result + 0x14);\n  ptr5 = ptr7;\n  do {\n    tempPtr = ptr4 + 1;\n    ptr6 = ptr5 + 1;\n    value2 = ((*ptr4 & 0xffff) + carry) - (*ptr5 & 0xffff);\n    carry = ((*ptr4 >> 0x10) - (*ptr5 >> 0x10)) + ((int)value2 >> 0x10);\n    value2 = value2 & 0xffff | carry * 0x10000;\n    ptr3 = ptr1 + 1;\n    *ptr1 = value2;\n    carry = carry >> 0x10;\n    ptr1 = ptr3;\n    ptr4 = tempPtr;\n    ptr5 = ptr6;\n  } while (ptr6 < ptr7 + value1);\n  ptr1 = tempPtr;\n  ptr4 = ptr3;\n  if (tempPtr < endPtr) {\n    do {\n      ptr5 = ptr1 + 1;\n      value1 = (*ptr1 & 0xffff) + carry;\n      carry = ((int)value1 >> 0x10) + (*ptr1 >> 0x10);\n      value2 = value1 & 0xffff | carry * 0x10000;\n      *ptr4 = value2;\n      carry = carry >> 0x10;\n      ptr1 = ptr5;\n      ptr4 = ptr4 + 1;\n    } while (ptr5 < endPtr);\n    ptr3 = (uint *)((int)ptr3 + ((int)endPtr + ~(uint)tempPtr & 0xfffffffc) + 4);\n  }\n  ptr3 = ptr3 + -1;\n  while (value2 == 0) {\n    ptr3 = ptr3 + -1;\n    length1 = length1 - 1;\n    value2 = *ptr3;\n  }\n  *(uint *)(result + 0x10) = length1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "compare_arrays_08009530",
                "param_2": "array1",
                "param_3": "array2",
                "iVar1": "result",
                "puVar2": "ptr1",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "flag",
                "puVar6": "ptr3",
                "puVar7": "ptr4",
                "puVar8": "tempPtr",
                "puVar9": "ptr5",
                "puVar10": "ptr6",
                "puVar11": "endPtr",
                "puVar13": "ptr7",
                "iVar12": "carry",
                "uVar14": "length1"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "allocate_and_return_memory_08009630",
            "code": "\nint allocateAndReturnMemory_08009630(undefined4 param1,undefined4 param2,uint param3,uint param4,int *result1,\n                int *result2)\n\n{\n  int memory;\n  uint trailingZeros;\n  int count;\n  int status;\n  uint shiftedValue;\n  uint bitShift;\n  undefined8 leadingZeros;\n  uint inputValue;\n  uint maskedValue;\n  \n  memory = allocate_and_return_memory_080090c0(param1,1);\n  bitShift = (param4 << 1) >> 0x15;\n  maskedValue = param4 & 0xfffff;\n  if (bitShift != 0) {\n    maskedValue = maskedValue | 0x100000;\n  }\n  if (param3 == 0) {\n    count = count_trailing_zeros_080091e4(&maskedValue);\n    status = 1;\n    trailingZeros = count + 0x20;\n    *(undefined4 *)(memory + 0x10) = 1;\n    *(uint *)(memory + 0x14) = maskedValue;\n  }\n  else {\n    inputValue = param3;\n    trailingZeros = count_trailing_zeros_080091e4(&inputValue);\n    if (trailingZeros == 0) {\n      *(uint *)(memory + 0x14) = inputValue;\n    }\n    else {\n      shiftedValue = maskedValue << (0x20 - trailingZeros & 0xff);\n      maskedValue = maskedValue >> (trailingZeros & 0xff);\n      *(uint *)(memory + 0x14) = shiftedValue | inputValue;\n    }\n    if (maskedValue == 0) {\n      status = 1;\n    }\n    else {\n      status = 2;\n    }\n    *(uint *)(memory + 0x18) = maskedValue;\n    *(int *)(memory + 0x10) = status;\n  }\n  if (bitShift == 0) {\n    *result1 = trailingZeros - 0x432;\n    leadingZeros = count_leading_zeros_080091a4(*(undefined4 *)(memory + status * 4 + 0x10));\n    *result2 = (int)((ulonglong)leadingZeros >> 0x20) * 0x20 - (int)leadingZeros;\n    return memory;\n  }\n  *result1 = (bitShift - 0x433) + trailingZeros;\n  *result2 = 0x35 - trailingZeros;\n  return memory;\n}\n\n",
            "renaming": {
                "FUN_08009630": "allocate_and_return_memory_08009630",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result1",
                "param_6": "result2",
                "iVar1": "memory",
                "uVar2": "trailingZeros",
                "iVar3": "count",
                "iVar4": "status",
                "uVar5": "shiftedValue",
                "uVar6": "bitShift",
                "uVar7": "leadingZeros",
                "local_20": "inputValue",
                "local_1c": "maskedValue"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_shifted_multiply_080096e0",
            "code": "\nundefined8 calculate_shifted_multiply_080096e0(uint input1,uint input2,int *output,undefined4 param4)\n\n{\n  int counter;\n  uint uInput2;\n  undefined8 concatenatedResult;\n  \n  concatenatedResult = CONCAT44(input2,input1);\n  counter = 0;\n  uInput2 = input2 & 0x7fffffff;\n  *output = 0;\n  if ((uInput2 < 0x7ff00000) && ((uInput2 | input1) != 0)) {\n    if (uInput2 < 0x100000) {\n      concatenatedResult = calculate_shifted_multiply_080096e0_080004c8(input1,input2,0,0x43500000,param4);\n      counter = -0x36;\n      uInput2 = (uint)((ulonglong)concatenatedResult >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)concatenatedResult;\n    input2 = (uint)((ulonglong)concatenatedResult >> 0x20) & 0x800fffff | 0x3fe00000;\n    *output = ((int)uInput2 >> 0x14) + -0x3fe + counter;\n  }\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_shifted_multiply_080096e0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "param_4": "param4",
                "iVar1": "counter",
                "uVar2": "uInput2",
                "uVar3": "concatenatedResult"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "allocate_memory_and_check_08009744",
            "code": "\nvoid allocate_memory_and_check_08009744(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000c10 = 0;\n  allocation_result = allocate_memory_08005728(size);\n  if ((allocation_result == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "allocate_memory_and_check_08009744",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_string_08009768",
            "code": "\nvoid copy_string_08009768(uint *dest,uint *src,uint size)\n\n{\n  char current_char;\n  uint *current_src;\n  uint *current_dest;\n  uint current_value;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (current_dest = dest, current_src = src, 3 < size)) {\n    do {\n      src = current_src + 1;\n      current_value = *current_src;\n      dest = current_dest;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      dest = current_dest + 1;\n      *current_dest = current_value;\n      current_dest = dest;\n      current_src = src;\n    } while (3 < size);\n  }\n  current_src = src;\n  if (size != 0) {\nLAB_0800979c:\n    current_char = *(char *)current_src;\n    *(char *)dest = current_char;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      size = size - 1;\n      if (current_char == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      current_src = (uint *)((int)current_src + 1);\n      current_char = *(char *)current_src;\n      *(char *)dest = current_char;\n    }\n    if (size != 0) {\n      current_src = dest;\n      do {\n        current_dest = (uint *)((int)current_src + 1);\n        *(char *)current_src = '\\0';\n        current_src = current_dest;\n      } while (current_dest != (uint *)(size + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "cVar1": "current_char",
                "puVar2": "current_src",
                "puVar3": "current_dest",
                "uVar4": "current_value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "extend_copy_data_080097cc",
            "code": "\nundefined4 extendCopyData_080097cc(undefined4 *arrDestination,int *arrSource,int *arrOffset)\n\n{\n  int destination;\n  uint sourceLength;\n  int allocatedMemory;\n  int sourceOffset;\n  uint newMemorySize;\n  uint currentOffset;\n  undefined4 *currentSource;\n  undefined4 *nextSource;\n  undefined4 currentValue;\n  \n  if (arrOffset[2] != 0) {\n    destination = *arrSource;\n    newMemorySize = arrSource[2];\n    nextSource = (undefined4 *)*arrOffset;\n    do {\n      do {\n        currentSource = nextSource + 2;\n        currentValue = *nextSource;\n        currentOffset = nextSource[1];\n        nextSource = currentSource;\n      } while (currentOffset == 0);\n      sourceLength = currentOffset;\n      if ((newMemorySize <= currentOffset) && (sourceLength = newMemorySize, (*(ushort *)(arrSource + 3) & 0x480) != 0)) {\n        sourceOffset = destination - arrSource[4];\n        newMemorySize = (arrSource[5] * 3) / 2;\n        sourceLength = currentOffset + 1 + sourceOffset;\n        if (newMemorySize < sourceLength) {\n          newMemorySize = sourceLength;\n        }\n        if ((int)((uint)*(ushort *)(arrSource + 3) << 0x15) < 0) {\n          allocatedMemory = allocate_and_initialize_memory_08008af8(arrDestination,newMemorySize);\n          if (allocatedMemory == 0) {\nerrorHandling:\n            *arrDestination = 0xc;\n            *(ushort *)(arrSource + 3) = *(ushort *)(arrSource + 3) | 0x40;\n            arrOffset[1] = 0;\n            arrOffset[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory_08001084(allocatedMemory,arrSource[4],sourceOffset);\n          *(ushort *)(arrSource + 3) = *(ushort *)(arrSource + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          allocatedMemory = improved_reallocate_memory_08009adc(arrDestination);\n          if (allocatedMemory == 0) {\n            initialize_data_structures_080088ec(arrDestination,arrSource[4]);\n            goto errorHandling;\n          }\n        }\n        destination = allocatedMemory + sourceOffset;\n        arrSource[5] = newMemorySize;\n        arrSource[4] = allocatedMemory;\n        *arrSource = destination;\n        arrSource[2] = newMemorySize - sourceOffset;\n        sourceLength = currentOffset;\n      }\n      copy_and_extend_memory_08009a18(destination,currentValue,sourceLength);\n      sourceOffset = arrOffset[2];\n      newMemorySize = arrSource[2] - sourceLength;\n      destination = *arrSource + sourceLength;\n      arrSource[2] = newMemorySize;\n      *arrSource = destination;\n      arrOffset[2] = sourceOffset - currentOffset;\n    } while (sourceOffset - currentOffset != 0);\n  }\n  arrOffset[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "extend_copy_data_080097cc",
                "param_1": "arrDestination",
                "param_2": "arrSource",
                "param_3": "arrOffset",
                "iVar1": "destination",
                "uVar2": "sourceLength",
                "iVar3": "allocatedMemory",
                "iVar4": "sourceOffset",
                "uVar5": "newMemorySize",
                "uVar6": "currentOffset",
                "puVar7": "currentSource",
                "puVar8": "nextSource",
                "uVar9": "currentValue",
                "LAB_08009896": "errorHandling"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int action,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *pointer;\n  undefined4 returnValue;\n  uint bitMask1;\n  uint index;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  pointer = DAT_20000168;\n  index = *(uint *)(DAT_20000168 + 4);\n  if ((int)index < 0x20) {\n    if (action != 0) {\n      *(undefined4 *)(DAT_20000168 + index * 4 + 0x88) = data1;\n      bitMask1 = 1 << (index & 0xff);\n      *(uint *)(pointer + 0x188) = *(uint *)(pointer + 0x188) | bitMask1;\n      *(undefined4 *)(pointer + index * 4 + 0x108) = data2;\n      if (action == 2) {\n        *(uint *)(pointer + 0x18c) = bitMask1 | *(uint *)(pointer + 0x18c);\n      }\n    }\n    *(uint *)(pointer + 4) = index + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(pointer + (index + 2) * 4) = value;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "action",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "pointer",
                "uVar2": "returnValue",
                "uVar3": "bitMask1",
                "uVar4": "index"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "allocate_and_initialize_memory_08009980",
            "code": "\nundefined4 * allocate_and_initialize_memory_08009980(undefined4 address,int num_rows,int num_cols)\n\n{\n  undefined4 *mem_ptr;\n  uint size;\n  undefined4 *ptr;\n  \n  mem_ptr = (undefined4 *)allocate_and_initialize_memory_08009980_08008af8(address,num_cols * num_rows);\n  if (mem_ptr == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  size = (mem_ptr[-1] & 0xfffffffc) - 4;\n  if (size < 0x25) {\n    ptr = mem_ptr;\n    if (0x13 < size) {\n      *mem_ptr = 0;\n      mem_ptr[1] = 0;\n      if (0x1b < size) {\n        mem_ptr[2] = 0;\n        mem_ptr[3] = 0;\n        if (size == 0x24) {\n          mem_ptr[4] = 0;\n          mem_ptr[5] = 0;\n          ptr = mem_ptr + 6;\n        }\n        else {\n          ptr = mem_ptr + 4;\n        }\n        *ptr = 0;\n        ptr[1] = 0;\n        ptr[2] = 0;\n        return mem_ptr;\n      }\n      ptr = mem_ptr + 2;\n    }\n    *ptr = 0;\n    ptr[1] = 0;\n    ptr[2] = 0;\n    return mem_ptr;\n  }\n  memset_08005d68(mem_ptr,0);\n  return mem_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "param_1": "address",
                "param_2": "num_rows",
                "param_3": "num_cols",
                "puVar1": "mem_ptr",
                "uVar2": "size",
                "puVar3": "ptr"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_and_extend_memory_08009a18",
            "code": "\nvoid copyAndExtendMemory_08009a18(undefined4 *sourcePtr,undefined4 *destPtr,uint size)\n\n{\n  undefined4 *sourcePtrIter;\n  undefined4 *destPtrIter;\n  int loopCount;\n  undefined *destEndPtr;\n  undefined4 *sourceEndPtr;\n  uint remainingSize;\n  uint alignedSize;\n  \n  if ((destPtr < sourcePtr) && (destPtrIter = (undefined4 *)((int)destPtr + size), sourcePtr < destPtrIter)) {\n    destEndPtr = (undefined *)((int)sourcePtr + size);\n    if (size != 0) {\n      do {\n        destPtrIter = (undefined4 *)((int)destPtrIter + -1);\n        destEndPtr = destEndPtr + -1;\n        *destEndPtr = *(undefined *)destPtrIter;\n      } while (destPtr != destPtrIter);\n    }\n  }\n  else {\n    alignedSize = size;\n    if (0xf < size) {\n      if ((((uint)sourcePtr | (uint)destPtr) & 3) != 0) goto LAB_08009abc;\n      destPtrIter = destPtr + 4;\n      sourcePtrIter = sourcePtr + 4;\n      do {\n        sourceEndPtr = destPtrIter + 4;\n        sourcePtrIter[-4] = destPtrIter[-4];\n        sourcePtrIter[-3] = destPtrIter[-3];\n        sourcePtrIter[-2] = destPtrIter[-2];\n        sourcePtrIter[-1] = destPtrIter[-1];\n        destPtrIter = sourceEndPtr;\n        sourcePtrIter = sourcePtrIter + 4;\n      } while (sourceEndPtr != (undefined4 *)((int)destPtr + (size - 0x10 & 0xfffffff0) + 0x20));\n      loopCount = (size - 0x10 >> 4) + 1;\n      alignedSize = size & 0xf;\n      destPtr = destPtr + loopCount * 4;\n      sourcePtr = sourcePtr + loopCount * 4;\n      if (3 < alignedSize) {\n        destPtrIter = sourcePtr + -1;\n        remainingSize = alignedSize;\n        sourcePtrIter = destPtr;\n        do {\n          remainingSize = remainingSize - 4;\n          destPtrIter = destPtrIter + 1;\n          *destPtrIter = *sourcePtrIter;\n          sourcePtrIter = sourcePtrIter + 1;\n        } while (3 < remainingSize);\n        loopCount = (alignedSize - 4 & 0xfffffffc) + 4;\n        sourcePtr = (undefined4 *)((int)sourcePtr + loopCount);\n        destPtr = (undefined4 *)((int)destPtr + loopCount);\n        alignedSize = size & 3;\n      }\n    }\n    size = alignedSize;\n    if (alignedSize != 0) {\nLAB_08009abc:\n      destEndPtr = (undefined *)((int)sourcePtr + -1);\n      destPtrIter = destPtr;\n      do {\n        sourcePtrIter = (undefined4 *)((int)destPtrIter + 1);\n        destEndPtr = destEndPtr + 1;\n        *destEndPtr = *(undefined *)destPtrIter;\n        destPtrIter = sourcePtrIter;\n      } while (sourcePtrIter != (undefined4 *)(size + (int)destPtr));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_and_extend_memory_08009a18",
                "param_1": "sourcePtr",
                "param_2": "destPtr",
                "param_3": "size",
                "puVar1": "sourcePtrIter",
                "puVar2": "destPtrIter",
                "iVar3": "loopCount",
                "puVar4": "destEndPtr",
                "puVar5": "sourceEndPtr",
                "uVar6": "remainingSize",
                "uVar7": "alignedSize"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "improved_reallocate_memory_08009adc",
            "code": "\nint * improved_reallocate_memory_08009adc(undefined4 *allocator,int *old_memory,uint new_size)\n\n{\n  int *new_memory;\n  int size_difference;\n  int *old_memory_header;\n  uint old_memory_size;\n  int temp;\n  uint old_memory_flags;\n  int *new_memory_header;\n  uint aligned_size;\n  uint old_memory_aligned_size;\n  uint new_memory_aligned_size;\n  int temp_offset;\n  \n  if (old_memory == (int *)0x0) {\n    old_memory_header = (int *)allocate_and_initialize_memory_08008af8(allocator,new_size);\n    return old_memory_header;\n  }\n  initialize_data_080090a8();\n  old_memory_flags = old_memory[-1];\n  old_memory_aligned_size = old_memory_flags & 0xfffffffc;\n  old_memory_header = old_memory + -2;\n  if (new_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = new_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < new_size) {\nLAB_08009b8e:\n    *allocator = 0xc;\n    return (int *)0x0;\n  }\n  temp_offset = (int)old_memory_header + old_memory_aligned_size;\n  new_memory_aligned_size = old_memory_aligned_size;\n  if ((int)old_memory_aligned_size < (int)aligned_size) {\n    if (DAT_20000454 == temp_offset) {\n      temp_offset = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + old_memory_aligned_size;\n      if ((int)(aligned_size + 0x10) <= temp_offset) {\n        DAT_20000454 = (int)old_memory_header + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = temp_offset - aligned_size | 1;\n        old_memory[-1] = aligned_size | old_memory[-1] & 1U;\n        initialize_data_structures_080090b4(allocator);\n        return old_memory;\n      }\n      if (-1 < (int)(old_memory_flags << 0x1f)) {\n        new_memory = (int *)((int)old_memory_header - old_memory[-2]);\n        old_memory_flags = new_memory[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(temp_offset + old_memory_flags)) {\n          temp = new_memory[3];\n          old_memory_header = new_memory + 2;\n          size_difference = *old_memory_header;\n          old_memory_aligned_size = old_memory_aligned_size - 4;\n          *(int *)(size_difference + 0xc) = temp;\n          *(int *)(temp + 8) = size_difference;\n          if (old_memory_aligned_size < 0x25) {\n            size_difference = *old_memory;\n            new_memory_header = old_memory_header;\n            if (0x13 < old_memory_aligned_size) {\n              new_memory[2] = size_difference;\n              new_memory[3] = old_memory[1];\n              size_difference = old_memory[2];\n              if (old_memory_aligned_size < 0x1c) {\n                old_memory = old_memory + 2;\n                new_memory_header = new_memory + 4;\n              }\n              else {\n                new_memory[4] = size_difference;\n                new_memory[5] = old_memory[3];\n                size_difference = old_memory[4];\n                if (old_memory_aligned_size == 0x24) {\n                  new_memory[6] = size_difference;\n                  new_memory[7] = old_memory[5];\n                  size_difference = old_memory[6];\n                  old_memory = old_memory + 6;\n                  new_memory_header = new_memory + 8;\n                }\n                else {\n                  old_memory = old_memory + 4;\n                  new_memory_header = new_memory + 6;\n                }\n              }\n            }\n            *new_memory_header = size_difference;\n            new_memory_header[1] = old_memory[1];\n            new_memory_header[2] = old_memory[2];\n          }\n          else {\n            copy_and_extend_memory_08009a18(old_memory_header,old_memory);\n          }\n          DAT_20000454 = (int)new_memory + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (temp_offset + old_memory_flags) - aligned_size | 1;\n          new_memory[1] = aligned_size | new_memory[1] & 1U;\n          initialize_data_structures_080090b4(allocator);\n          return old_memory_header;\n        }\nLAB_08009bb0:\n        new_memory_aligned_size = old_memory_aligned_size + old_memory_flags;\n        if ((int)aligned_size <= (int)new_memory_aligned_size) {\n          temp = new_memory[3];\n          new_memory_header = new_memory + 2;\n          size_difference = *new_memory_header;\n          *(int *)(size_difference + 0xc) = temp;\n          temp_offset = (int)new_memory + new_memory_aligned_size;\n          *(int *)(temp + 8) = size_difference;\n          old_memory_header = new_memory;\n          if (old_memory_aligned_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_and_extend_memory_08009a18(new_memory_header,old_memory);\n          old_memory = new_memory_header;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_offset + 4) & 0xfffffffe) + temp_offset + 4) << 0x1f) {\n        old_memory_size = *(uint *)(temp_offset + 4) & 0xfffffffc;\n        new_memory_aligned_size = old_memory_aligned_size + old_memory_size;\n        if ((int)new_memory_aligned_size < (int)aligned_size) {\n          if ((int)(old_memory_flags << 0x1f) < 0) goto LAB_08009b36;\n          new_memory = (int *)((int)old_memory_header - old_memory[-2]);\n          old_memory_flags = new_memory[1] & 0xfffffffc;\n          new_memory_aligned_size = old_memory_size + old_memory_flags + old_memory_aligned_size;\n          if ((int)new_memory_aligned_size < (int)aligned_size) goto LAB_08009bb0;\n          size_difference = *(int *)(temp_offset + 8);\n          temp_offset = *(int *)(temp_offset + 0xc);\n          *(int *)(size_difference + 0xc) = temp_offset;\n          *(int *)(temp_offset + 8) = size_difference;\n          new_memory_header = new_memory + 2;\n          size_difference = *new_memory_header;\n          temp = new_memory[3];\n          *(int *)(size_difference + 0xc) = temp;\n          temp_offset = (int)new_memory + new_memory_aligned_size;\n          *(int *)(temp + 8) = size_difference;\n          old_memory_header = new_memory;\n          if (0x24 < old_memory_aligned_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          old_memory_aligned_size = old_memory_aligned_size - 4;\n          size_difference = *old_memory;\n          new_memory = new_memory_header;\n          if (0x13 < old_memory_aligned_size) {\n            old_memory_header[2] = size_difference;\n            old_memory_header[3] = old_memory[1];\n            size_difference = old_memory[2];\n            if (old_memory_aligned_size < 0x1c) {\n              old_memory = old_memory + 2;\n              new_memory = old_memory_header + 4;\n            }\n            else {\n              old_memory_header[4] = size_difference;\n              old_memory_header[5] = old_memory[3];\n              size_difference = old_memory[4];\n              if (old_memory_aligned_size == 0x24) {\n                old_memory_header[6] = size_difference;\n                old_memory_header[7] = old_memory[5];\n                size_difference = old_memory[6];\n                old_memory = old_memory + 6;\n                new_memory = old_memory_header + 8;\n              }\n              else {\n                old_memory = old_memory + 4;\n                new_memory = old_memory_header + 6;\n              }\n            }\n          }\n          *new_memory = size_difference;\n          new_memory[1] = old_memory[1];\n          new_memory[2] = old_memory[2];\n          old_memory = new_memory_header;\n        }\n        else {\n          size_difference = *(int *)(temp_offset + 8);\n          temp = *(int *)(temp_offset + 0xc);\n          *(int *)(size_difference + 0xc) = temp;\n          temp_offset = (int)old_memory_header + new_memory_aligned_size;\n          *(int *)(temp + 8) = size_difference;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(old_memory_flags << 0x1f)) {\n        new_memory = (int *)((int)old_memory_header - old_memory[-2]);\n        old_memory_flags = new_memory[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory = (int *)allocate_and_initialize_memory_08008af8(allocator,new_size);\n    if (new_memory != (int *)0x0) {\n      if ((int *)((old_memory[-1] & 0xfffffffeU) + (int)old_memory_header) == new_memory + -2) {\n        new_memory_aligned_size = old_memory_aligned_size + (new_memory[-1] & 0xfffffffcU);\n        temp_offset = (int)old_memory_header + new_memory_aligned_size;\n        goto LAB_08009c00;\n      }\n      old_memory_aligned_size = old_memory_aligned_size - 4;\n      if (old_memory_aligned_size < 0x25) {\n        temp_offset = *old_memory;\n        old_memory_header = old_memory;\n        new_memory_header = new_memory;\n        if (0x13 < old_memory_aligned_size) {\n          *new_memory = temp_offset;\n          new_memory[1] = old_memory[1];\n          if (old_memory_aligned_size < 0x1c) {\n            temp_offset = old_memory[2];\n            old_memory_header = old_memory + 2;\n            new_memory_header = new_memory + 2;\n          }\n          else {\n            new_memory[2] = old_memory[2];\n            new_memory[3] = old_memory[3];\n            if (old_memory_aligned_size == 0x24) {\n              new_memory[4] = old_memory[4];\n              new_memory[5] = old_memory[5];\n              temp_offset = old_memory[6];\n              old_memory_header = old_memory + 6;\n              new_memory_header = new_memory + 6;\n            }\n            else {\n              temp_offset = old_memory[4];\n              old_memory_header = old_memory + 4;\n              new_memory_header = new_memory + 4;\n            }\n          }\n        }\n        *new_memory_header = temp_offset;\n        new_memory_header[1] = old_memory_header[1];\n        new_memory_header[2] = old_memory_header[2];\n      }\n      else {\n        copy_and_extend_memory_08009a18(new_memory,old_memory);\n      }\n      initialize_data_structures_080088ec(allocator,old_memory);\n    }\n    initialize_data_structures_080090b4(allocator);\n    old_memory = new_memory;\n  }\n  else {\nLAB_08009c00:\n    if (new_memory_aligned_size - aligned_size < 0x10) {\n      old_memory_header[1] = old_memory_header[1] & 1U | new_memory_aligned_size;\n      *(uint *)(temp_offset + 4) = *(uint *)(temp_offset + 4) | 1;\n    }\n    else {\n      old_memory_header[1] = old_memory_header[1] & 1U | aligned_size;\n      *(uint *)((int)old_memory_header + aligned_size + 4) = new_memory_aligned_size - aligned_size | 1;\n      *(uint *)(temp_offset + 4) = *(uint *)(temp_offset + 4) | 1;\n      initialize_data_structures_080088ec(allocator,(int)old_memory_header + aligned_size + 8);\n    }\n    initialize_data_structures_080090b4(allocator);\n  }\n  return old_memory;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "improved_reallocate_memory_08009adc",
                "param_1": "allocator",
                "param_2": "old_memory",
                "param_3": "new_size",
                "piVar1": "new_memory",
                "iVar2": "size_difference",
                "piVar3": "old_memory_header",
                "uVar4": "old_memory_size",
                "iVar5": "temp",
                "uVar6": "old_memory_flags",
                "piVar7": "new_memory_header",
                "uVar8": "aligned_size",
                "uVar9": "old_memory_aligned_size",
                "uVar10": "new_memory_aligned_size",
                "iVar11": "temp_offset"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 154575,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": []
}