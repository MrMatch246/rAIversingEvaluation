{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08005838",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_bit_and_flag_080036a8",
                "param_1": "data",
                "param_2": "flag",
                "*param_1": "ptr_data",
                "DAT_080036f4": "PTR_DAT_080036f4",
                "**param_1": "*ptr_data"
            },
            "code": "uint32_t set_bit_and_flag_080036a8(uint32_t **data, uint32_t flag)\n{\n    uint32_t *ptr_data = *data;\n    set_bit(ptr_data);\n    if (ptr_data == DAT_080036f4) {\n        ptr_data[0x11] |= 0x8000;\n    }\n    *ptr_data |= flag;\n    return 0;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_and_flag_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      FUN_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    FUN_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    FUN_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  FUN_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08009adc",
                "FUN_08005e9c",
                "FUN_08008af8",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "start_application_08005224",
                "FUN_080014f0": "initialize_memory",
                "FUN_080052a0": "setup_hardware",
                "FUN_080055f4": "load_configuration",
                "FUN_08005348": "initialize_network",
                "FUN_08005598": "initialize_logging",
                "FUN_08005500": "initialize_database",
                "FUN_080053b0": "set_function_pointers",
                "PTR_FUN_08004ea4_1_08005280": "function_pointer_1",
                "PTR_DAT_0800527c": "pointer_to_function_pointer_1",
                "PTR_FUN_08004ee8_1_08005288": "function_pointer_2",
                "PTR_DAT_08005284": "pointer_to_function_pointer_2",
                "PTR_FUN_08004f2c_1_08005290": "function_pointer_3",
                "PTR_DAT_0800528c": "pointer_to_function_pointer_3",
                "FUN_080036a8": "set_callbacks",
                "PTR_DAT_08005294": "callback_data",
                "FUN_0800491c": "start_threads",
                "PTR_DAT_08005298": "thread_data",
                "FUN_0800360c": "initialize_network",
                "PTR_DAT_0800529c": "network_data",
                "FUN_08004e74": "initialize_logging"
            },
            "code": "void start_application_08005224(void)\n{\n  initialize_memory();\n  setup_hardware();\n  load_configuration();\n  initialize_network();\n  initialize_logging();\n  initialize_database();\n  set_function_pointers();\n  set_callbacks();\n  start_threads();\n  while (true) {\n    // Do nothing, infinite loop\n  }\n}",
            "called": [
                "FUN_08005348",
                "FUN_08005598",
                "FUN_08004e74",
                "FUN_080055f4",
                "FUN_080052a0",
                "FUN_0800360c",
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080036a8",
                "FUN_080014f0",
                "FUN_0800491c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "start_application_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_local_variable_08003440",
                "local_30": "local_variable_1",
                "local_2c": "local_ptr_2",
                "uStack_28": "local_ptr_3",
                "uStack_24": "local_ptr_4",
                "uStack_20": "local_ptr_5",
                "local_1c": "local_variable_2",
                "local_18": "local_variable_3",
                "local_14": "local_variable_6",
                "local_10": "local_variable_5",
                "DAT_080034f8": "global_data_ptr",
                "PTR_DAT_080034f0": "local_ptr_1",
                "DAT_080034fc": "global_constant_1",
                "DAT_08003500": "global_constant_2"
            },
            "code": "uint calculate_local_variable_08003440() {\n  undefined2 local_variable_1 = *(undefined2 *)PTR_DAT_080034f0;\n  undefined4 local_ptr_2 = *(undefined4 *)local_ptr_2;\n  undefined4 local_ptr_3 = *(undefined4 *)(local_ptr_2 + 4);\n  undefined4 local_ptr_4 = *(undefined4 *)(local_ptr_2 + 8);\n  undefined4 local_ptr_5 = *(undefined4 *)(local_ptr_2 + 0xc);\n  uint local_variable_2 = 0;\n  undefined4 local_variable_3 = 0;\n  uint local_variable_4 = 0;\n  uint local_variable_5 = 0;\n  uint local_variable_6 = *(uint *)(DAT_080034f8 + 4);\n  if ((local_variable_6 & 0xc) == 4) {\n    local_variable_5 = DAT_080034fc;\n  }\n  else if ((local_variable_6 & 0xc) == 8) {\n    local_variable_4 = (uint)*(byte *)((int)&local_ptr_2 + (local_variable_6 >> 0x12 & 0xf));\n    if ((local_variable_6 & 0x10000) == 0) {\n      local_variable_3 = DAT_08003500 * local_variable_4;\n    }\n    else {\n      local_variable_3 = (DAT_080034fc * local_variable_4) /\n                (uint)*(byte *)((int)&local_variable_1 + (*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1));\n    }\n    local_variable_5 = local_variable_3;\n  }\n  else {\n    local_variable_5 = DAT_080034fc;\n  }\n  return local_variable_5;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_local_variable_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_result_08004f2c",
                "uVar1": "result",
                "FUN_080015a0": "call_function"
            },
            "code": "int get_result_08004f2c(void)\n{\n  int result = call_function();\n  return result;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_result_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "status",
                "PTR_DAT_080053a0": "data_ptr",
                "DAT_080053a4": "initial_value_1",
                "DAT_080053a8": "initial_value_2",
                "PTR_s____src_main_c_080053ac": "error_message",
                "FUN_08001ab0": "initialize_data_status"
            },
            "code": "void initialize_data_08005348(void)\n{\n  int status;\n  int *PTR_DAT_080053a0 = (int *)PTR_DAT_080053a0;\n  *PTR_DAT_080053a0 = DAT_080053a4;\n  *(PTR_DAT_080053a0 + 1) = DAT_080053a8;\n  *(PTR_DAT_080053a0 + 2) = 0;\n  *(PTR_DAT_080053a0 + 3) = 0;\n  *(PTR_DAT_080053a0 + 4) = 0x4000;\n  *(PTR_DAT_080053a0 + 5) = 0;\n  *(PTR_DAT_080053a0 + 6) = 0;\n  *(PTR_DAT_080053a0 + 7) = 0;\n  *(PTR_DAT_080053a0 + 8) = 0;\n  status = FUN_08001ab0(PTR_DAT_080053a0);\n  if (status != 0) {\n    FUN_08005674(PTR_s____src_main_c_080053ac, 0x17a);\n  }\n}",
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "param_array",
                "lVar1": "dividend1",
                "lVar2": "dividend2",
                "iVar3": "quotient1",
                "iVar4": "quotient2",
                "iVar5": "quotient3",
                "uVar6": "time_seed"
            },
            "code": "void calculate_checksum_080046ec(int *param_array)\n{\n  longlong dividend1;\n  longlong dividend2;\n  int quotient1;\n  int quotient2;\n  int quotient3;\n  undefined8 time_seed;\n  \n  *(uint *)(*param_array + 0x10) = param_array[3] | *(uint *)(*param_array + 0x10) & 0xffffcfff;\n  *(uint *)(*param_array + 0xc) =\n       *(uint *)(*param_array + 0xc) & 0xffffe9f3 | param_array[5] | param_array[2] | param_array[4];\n  *(uint *)(*param_array + 0x14) = param_array[6] | *(uint *)(*param_array + 0x14) & 0xfffffcff;\n  if (*param_array == PTR_DAT_08004914) {\n    time_seed = get_time_seed();\n    dividend1 = (ulonglong)PTR_DAT_08004918 *\n            ((ulonglong)(uint)((int)time_seed * 0x19) / (ulonglong)(uint)(param_array[1] << 2));\n    quotient1 = get_quotient1(time_seed, dividend1, param_array[1]);\n    quotient2 = param_array[1];\n    time_seed = get_time_seed();\n    dividend2 = (ulonglong)PTR_DAT_08004918 *\n            (ulonglong)\n            (((uint)(quotient1 * 0x19) / (uint)(quotient2 << 2) +\n             (uint)((ulonglong)PTR_DAT_08004918 *\n                    ((ulonglong)(uint)((int)time_seed * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) >>\n                   0x25) * -100) * 0x10 + 0x32);\n    quotient1 = get_quotient1(time_seed, dividend2, param_array[1]);\n    quotient3 = param_array[1];\n    quotient2 = get_quotient2();\n    *(uint *)(*param_array + 8) =\n         ((uint)((ulonglong)PTR_DAT_08004918 *\n                 (ulonglong)\n                 (((uint)(quotient1 * 0x19) / (uint)(quotient3 << 2) +\n                  (uint)((ulonglong)PTR_DAT_08004918 *\n                         ((ulonglong)(uint)(quotient2 * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) >>\n                        0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) +\n         (uint)((ulonglong)dividend1 >> 0x25) * 0x10 + ((uint)((ulonglong)dividend2 >> 0x25) & 0xf0);\n  }\n  else {\n    time_seed = get_time_seed();\n    dividend1 = (ulonglong)PTR_DAT_08004918 *\n            ((ulonglong)(uint)((int)time_seed * 0x19) / (ulonglong)(uint)(param_array[1] << 2));\n    quotient1 = get_quotient1(time_seed, dividend1, param_array[1]);\n    quotient2 = param_array[1];\n    time_seed = get_time_seed();\n    dividend2 = (ulonglong)PTR_DAT_08004918 *\n            (ulonglong)\n            (((uint)(quotient1 * 0x19) / (uint)(quotient2 << 2) +\n             (uint)((ulonglong)PTR_DAT_08004918 *\n                    ((ulonglong)(uint)((int)time_seed * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) >>\n                   0x25) * -100) * 0x10 + 0x32);\n    quotient1 = get_quotient1(time_seed, dividend2, param_array[1]);\n    quotient3 = param_array[1];\n    quotient2 = get_quotient2();\n    *(uint *)(*param_array + 8) =\n         ((uint)((ulonglong)PTR_DAT_08004918 *\n                 (ulonglong)\n                 (((uint)(quotient1 * 0x19) / (uint)(quotient3 << 2) +\n                  (uint)((ulonglong)PTR_DAT_08004918 *\n                         ((ulonglong)(uint)(quotient2 * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) >>\n                        0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) +\n         (uint)((ulonglong)dividend1 >> 0x25) * 0x10 + ((uint)((ulonglong)dividend2 >> 0x25) & 0xf0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "calculate_checksum_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_memory_08005500",
                "local_20": "page_size",
                "local_1c": "zero",
                "local_18": "flags",
                "iVar1": "status",
                "PTR_DAT_08005590": "memory"
            },
            "code": "void initialize_memory_08005500(void)\n{\n  int status;\n  int page_size = 0x1000;\n  int zero = 0;\n  int flags[4] = {0x40000000, 36000, 0, 0x14};\n  int *PTR_DAT_08005590 = PTR_DAT_08005590;\n  status = FUN_080035a4(PTR_DAT_08005590);\n  if (status != 0) {\n    FUN_08005674(PTR_s____src_main_c_08005594, 0x1d0);\n  }\n  status = FUN_08003a94(PTR_DAT_08005590, flags);\n  if (status != 0) {\n    FUN_08005674(PTR_s____src_main_c_08005594, 0x1d5);\n  }\n  status = FUN_080042de(PTR_DAT_08005590, &page_size, &zero);\n  if (status != 0) {\n    FUN_08005674(PTR_s____src_main_c_08005594, 0x1dc);\n  }\n}\n",
            "called": [
                "FUN_08003a94",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_080035a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_memory_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_flag_08002c2e",
                "param_1": "flag_ptr",
                "param_2": "max_size",
                "param_3": "offset",
                "iVar1": "flag",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int check_flag_08002c2e(int *flag_ptr, uint32_t max_size, int offset)\n{\n    int result = 1;\n    while (true)\n    {\n        if ((*(uint32_t *)(*flag_ptr + 0x14) & 4) == 4)\n        {\n            return 0;\n        }\n        int flag = get_flag(flag_ptr);\n        if (flag != 0)\n        {\n            break;\n        }\n        if ((max_size != 0xffffffff) && ((max_size == 0 || (flag = get_available_space(), max_size < (uint32_t)(flag - offset)))))\n        {\n            flag_ptr[0x10] = flag_ptr[0x10] | 0x20;\n            flag_ptr[0xc] = 0;\n            *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n            *(undefined *)(flag_ptr + 0xf) = 0;\n            result = 3;\n            break;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_flag_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "calculate_and_decrement_08003568",
                "param_1": "input_value",
                "local_c": "calculated_value",
                "DAT_080035a0": "global_constant",
                "PTR_DAT_0800359c": "global_pointer"
            },
            "code": "void calculate_and_decrement_08003568(int input_value) {\n    int calculated_value = input_value * (uint)((ulonglong)DAT_080035a0 * (ulonglong)*(uint *)PTR_DAT_0800359c >> 0x29);\n    do {\n        calculated_value--;\n    } while (calculated_value != 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": false,
            "current_name": "calculate_and_decrement_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_statistics_080049cc",
                "param_1": "data_array",
                "local_20": "num_elements",
                "local_c": "sum",
                "local_10": "sum_squares",
                "local_14": "sum_first_col",
                "local_18": "sum_second_col",
                "local_1c": "current_element",
                "PTR_DAT_08004adc": "data_ptr",
                "FUN_08004ae0": "calculate_columns",
                "FUN_08004d78": "calculate_columns_helper",
                "FUNC_08000aa8": "calculate_sum",
                "*(undefined4 *)(param_1 + 0x10)": "data_array_element",
                "*(undefined4 *)(param_1 + 0x14)": "data_array_element_squared",
                "FUN_08000c10": "calculate_num_elements",
                "FUN_08000e20": "calculate_average"
            },
            "code": "void calculate_statistics_080049cc(int data_array)\n{\n    int num_elements = 1;\n    int sum = 0;\n    int sum_squares = 0;\n    int sum_first_col = 0;\n    int sum_second_col = 0;\n    int current_element = 0;\n    int* PTR_DAT_08004adc = (**(code **)DAT_08004adc)();\n    while(num_elements <= current_element)\n    {\n        int first_col = 0;\n        int second_col = 0;\n        calculate_columns(data_array, &first_col, &second_col);\n        sum_first_col = sum_first_col + first_col;\n        sum_second_col = sum_second_col + second_col;\n        sum = sum + *(int *)(data_array + 0x10);\n        sum_squares = sum_squares + *(int *)(data_array + 0x14);\n        PTR_DAT_08004adc = (**(code **)DAT_08004adc)();\n        current_element = current_element + 1;\n    }\n    int num_elements_var = calculate_num_elements(num_elements);\n    int sum_var = calculate_sum(sum, num_elements_var);\n    *(int *)(data_array + 0x1c) = sum_var;\n    int sum_squares_var = calculate_sum(sum_squares, num_elements_var);\n    *(int *)(data_array + 0x20) = sum_squares_var;\n    int sum_first_col_var = calculate_sum(sum_first_col, num_elements_var);\n    *(int *)(data_array + 0x24) = sum_first_col_var;\n    int sum_second_col_var = calculate_sum(sum_second_col, num_elements_var);\n    *(int *)(data_array + 0x28) = sum_second_col_var;\n    return;\n}\n\n",
            "called": [
                "FUN_08004ae0",
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": false,
            "current_name": "calculate_statistics_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "update_data_08003c94",
                "param_1": "data",
                "param_2": "new_data",
                "local_c": "old_value"
            },
            "code": "void update_data_08003c94(uint *data, uint *new_data){\n  uint old_value = *data;\n  if ((((data == PTR_08003d54) || (data == (uint *)0x40000000)) || (data == PTR_08003d58)) || (data == PTR_08003d5c)) {\n    old_value = new_data[1] | old_value & 0xffffff8f;\n  }\n  if (((data == PTR_08003d54) || (data == (uint *)0x40000000)) || ((data == PTR_08003d58 || (data == PTR_08003d5c)))) {\n    old_value = new_data[3] | old_value & 0xfffffcff;\n  }\n  *data = new_data[5] | old_value & 0xffffff7f;\n  data[0xb] = new_data[2];\n  data[10] = *new_data;\n  if (data == PTR_08003d54) {\n    data[0xc] = new_data[4];\n  }\n  data[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "update_data_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "call_with_swapped_args_and_pointers_08000978",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "FUN_08000988": "call_with_swapped_args",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void call_with_swapped_args_and_pointers_08000978(void* ptr1, void* ptr2, int arg1, int arg2)\n{\n  call_with_swapped_args(ptr2, ptr1, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": false,
            "current_name": "call_with_swapped_args_and_pointers_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "param_1": "mem_address",
                "param_2": "requested_size",
                "puVar1": "header_ptr",
                "puVar2": "footer_ptr",
                "iVar3": "result",
                "iVar4": "block_size_rounded",
                "uVar5": "size_difference"
            },
            "code": "int allocate_memory_0800884c(void* mem_address, int requested_size)\n{\n  uint32_t* header_ptr;\n  uint32_t* footer_ptr;\n  int block_size_rounded;\n  int block_size;\n  uint32_t size_difference;\n  \n  header_ptr = PTR_DAT_080088e0;\n  initialize_memory();\n  block_size_rounded = ((0xfef - requested_size) + (*(uint32_t *)(*(int *)(header_ptr + 8) + 4) & 0xfffffffc) & 0xfffff000) - 0x1000;\n  if (block_size_rounded > 0xfff) {\n    int result = FUN_08009744(mem_address, 0);\n    if (result == (*(int *)(header_ptr + 8) + (*(uint32_t *)(*(int *)(header_ptr + 8) + 4) & 0xfffffffc))) {\n      result = FUN_08009744(mem_address, -block_size_rounded);\n      uint32_t* footer_ptr = PTR_DAT_080088e4;\n      if (result != -1) {\n        int footer_value = *(int *)PTR_DAT_080088e4;\n        *(uint32_t *)(*(int *)(header_ptr + 8) + 4) = (*(uint32_t *)(*(int *)(header_ptr + 8) + 4) & 0xfffffffc) - block_size_rounded | 1;\n        *(int *)footer_ptr = footer_value - block_size_rounded;\n        finalize_memory(mem_address);\n        return 1;\n      }\n      block_size = FUN_08009744(mem_address, 0);\n      footer_ptr = PTR_DAT_080088e4;\n      size_difference = block_size - *(int *)(header_ptr + 8);\n      if (size_difference > 0xf) {\n        int footer_value = *(int *)PTR_DAT_080088e8;\n        *(uint32_t *)(*(int *)(header_ptr + 8) + 4) = size_difference | 1;\n        *(int *)footer_ptr = block_size - footer_value;\n      }\n    }\n  }\n  finalize_memory(mem_address);\n  return 0;\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "find_first_occurrence_of_byte_in_array": "find_first_occurrence_of_byte_in_array",
                "param_1": "array",
                "param_2": "array_size",
                "param_3": "byte_to_find",
                "puVar1": "current_element",
                "uVar2": "current_byte",
                "uVar3": "xor_result",
                "puVar4": "array_iterator",
                "uVar5": "byte_to_find_value",
                "bVar6": "end_of_array_reached",
                "FUN_0800901c": "find_first_occurrence_of_byte_in_array_0800901c"
            },
            "code": "uint* find_first_occurrence_of_byte_in_array_0800901c(uint* array, uint array_size, uint* byte_to_find) {\n    uint* current_element;\n    uint current_byte;\n    uint* end_of_array = array + array_size;\n    if (((uint)array & 3) == 0) {\n        while (array + 3 < end_of_array) {\n            current_byte = *array ^ ((*byte_to_find & 0xff) << 8 | *byte_to_find & 0xff);\n            current_element = array;\n            array += 1;\n            if ((current_byte + 0xfefefeff & ~current_byte & 0x80808080) != 0) {\n                if (*array != *byte_to_find) {\n                    while (array != end_of_array) {\n                        array += 1;\n                        if (*array == *byte_to_find) {\n                            return array;\n                        }\n                    }\n                    return NULL;\n                }\n            }\n            else {\n                return current_element;\n            }\n        }\n    }\n    else {\n        while (array != end_of_array) {\n            if (*array == *byte_to_find) {\n                return array;\n            }\n            array += 1;\n        }\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_byte_in_array_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_flag_if_param_is_four_0800177c",
                "param_1": "param",
                "*DAT_080017b0": "*flag_ptr"
            },
            "code": "void set_flag_if_param_is_four_0800177c(int param) {\n  if (param == 4) {\n    *DAT_080017b0 |= 4;\n  }\n  else {\n    *DAT_080017b0 &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_four_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "call_function_with_argument_zero_080017b4",
                "FUN_08004f78": "call_function_with_argument"
            },
            "code": "void call_function_with_argument_zero_080017b4(void)\n{\n  call_function_with_argument(0);\n  return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "call_function_with_argument_zero_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_data_section_08005598",
                "PTR_DAT_080055e8": "data_section_ptr",
                "DAT_080055ec": "data_section_value_1",
                "PTR_s____src_main_c_080055f0": "error_message",
                "0x1c200": "data_section_value_2",
                "FUN_0800438a": "check_data_section",
                "iVar1": "return_value",
                "0x1ed": "error_code"
            },
            "code": "void initialize_data_section_08005598(void)\n{\n    int return_value;\n    // Set values for data section\n    *(undefined4 *)PTR_DAT_080055e8 = DAT_080055ec;\n    *(undefined4 *)(PTR_DAT_080055e8 + 4) = data_section_value_2;\n    *(undefined4 *)(PTR_DAT_080055e8 + 8) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0xc) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x10) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x14) = 0xc;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x18) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x1c) = 0;\n    // Call function and check return value\n    return_value = check_data_section(PTR_DAT_080055e8);\n    if (return_value != 0)\n    {\n        print_error(PTR_s____src_main_c_080055f0, error_code);\n    }\n    return;\n}",
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_section_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_input_null_terminated_08001030",
                "in_CY": "input_char",
                "FUN_08000fc8": "execute_preprocessing"
            },
            "code": "bool is_input_null_terminated_08001030(void)\n{\n  char input_char;\n  execute_preprocessing();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_input_null_terminated_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "concatenate_params_or_call_function_080011ec",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "result",
                "FUNC_0800121c": "call_some_function"
            },
            "code": "uint64_t concatenate_params_or_call_function_080011ec(int first_param, int second_param, int third_param, int fourth_param) {\n  if ((fourth_param == 0) && (third_param == 0)) {\n    if (second_param != 0 || first_param != 0) {\n      second_param = -1;\n      first_param = -1;\n    }\n    return ((uint64_t)second_param << 32) | first_param;\n  }\n  uint64_t result = call_some_function();\n  return result;\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "concatenate_params_or_call_function_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "print_message_08004f3c",
                "param_1": "message",
                "param_2": "message_length",
                "PTR_DAT_08004f5c": "printer_address"
            },
            "code": "void print_message_08004f3c(char* message, int message_length)\n{\n  send_message_to_printer(PTR_DAT_08004f5c, message, message_length, 50);\n  return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "print_message_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  FUN_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        FUN_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            FUN_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          FUN_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        FUN_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    FUN_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    FUN_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "check_and_update_08002640",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "arg_2",
                "param_4": "arg_3",
                "param_5": "arg_4",
                "param_6": "arg_5",
                "iVar1": "result",
                "uVar2": "return_val"
            },
            "code": "undefined4 check_and_update_08002640(uint **data_ptr, byte flag, undefined2 arg_2, short arg_3, uint arg_4, int arg_5)\n{\n    int result = 3;\n\n    **data_ptr |= 0x100;\n\n    while((~(*data_ptr)[5] & 1) != 0)\n    {\n        if(arg_4 == 0xffffffff || (arg_4 != 0 && (FUN_080015a0() - arg_5) <= arg_4))\n        {\n            result = 0;\n            break;\n        }\n    }\n\n    if(result == 0)\n    {\n        (*data_ptr)[4] = flag & 0xfe;\n\n        if(FUN_08002ad8(data_ptr, DAT_080027f0, arg_4, arg_5) == 0)\n        {\n            if(FUN_08002bb4(data_ptr, arg_4, arg_5, (*data_ptr)[6]) == 0)\n            {\n                if(arg_3 == 1)\n                {\n                    (*data_ptr)[4] = (uint)(byte)arg_2;\n                }\n                else\n                {\n                    (*data_ptr)[4] = (uint)(byte)((ushort)arg_2 >> 8);\n\n                    if(FUN_08002bb4(data_ptr, arg_4, arg_5) != 0)\n                    {\n                        if(data_ptr[0x10] == (uint *)0x4)\n                        {\n                            **data_ptr |= 0x200;\n                            return 1;\n                        }\n                        return 3;\n                    }\n\n                    (*data_ptr)[4] = (uint)(byte)arg_2;\n                }\n\n                return 0;\n            }\n            else if(data_ptr[0x10] == (uint *)0x4)\n            {\n                **data_ptr |= 0x200;\n                return 1;\n            }\n            else\n            {\n                return 3;\n            }\n        }\n        else if(data_ptr[0x10] == (uint *)0x4)\n        {\n            return 1;\n        }\n        else\n        {\n            return 3;\n        }\n    }\n\n    return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_and_update_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_params_080008fc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "xor_value",
                "bVar2": "is_equal",
                "bVar3": "is_param4_less_than_equal_param2"
            },
            "code": "uint check_params_080008fc(uint param1, uint param2, uint param3, uint param4)\n{\n  bool is_negative_1;\n  bool is_equal;\n  \n  is_negative_1 = ((int)(param2 << 1) >> 0x15 == -1 || (int)(param4 << 1) >> 0x15 == -1);\n  is_equal = (((int)(param2 << 1) >> 0x15 == -1 && ((param1 | param2 << 0xc) != 0)) || (((int)(param4 << 1) >> 0x15 == -1 && ((param3 | param4 << 0xc) != 0))));\n  if (is_negative_1 && is_equal) {\n    return 1;\n  }\n  bool is_param12_zero = (param1 | param2 << 1) == 0;\n  if (is_param12_zero) {\n    is_param12_zero = (param3 | param4 << 1) == 0;\n  }\n  if (!is_param12_zero) {\n    is_param12_zero = param2 == param4;\n  }\n  if (is_param12_zero) {\n    is_param12_zero = param1 == param3;\n  }\n  if (!is_param12_zero) {\n    uint xor_value = param2 ^ param4;\n    bool is_xor_value_zero = xor_value == 0;\n    if (-1 < (int)xor_value) {\n      is_xor_value_zero = param2 == param4;\n    }\n    bool is_param4_less_than_equal_param2 = -1 < (int)xor_value && param4 <= param2;\n    if (is_xor_value_zero) {\n      is_param4_less_than_equal_param2 = param3 <= param1;\n    }\n    bool is_param4_negative = (int)param4 >> 0x1f;\n    if (!is_param4_less_than_equal_param2) {\n      is_param4_negative = ~is_param4_negative;\n    }\n    return is_param4_negative | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": false,
            "current_name": "check_params_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "execute_function_08000988",
                "param_1": "input_param",
                "FUN_080008fc": "call_previously_defined_function"
            },
            "code": "undefined4 execute_function_08000988(undefined4 input_param)\n{\n  call_previously_defined_function();\n  return input_param;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009ac",
                "FUN_080009c0"
            ],
            "imported": false,
            "current_name": "execute_function_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "call_function_with_param_08001714",
                "param_1": "param",
                "FUN_080015b4": "call_function"
            },
            "code": "void call_function_with_param_08001714(void* param){\n  call_function(param);\n  return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "call_function_with_param_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "clear_string_08005dfc",
                "param_1": "string_to_clear",
                "param_2": "string_size",
                "param_3": "arg_8",
                "param_4": "arg_C",
                "local_80": "string_ptr",
                "local_78": "max_string_size",
                "uStack_74": "arg_14",
                "local_70": "string_start",
                "local_6c": "arg_10",
                "uStack_8": "arg_18",
                "uStack_4": "arg_1C"
            },
            "code": "void clear_string_08005dfc(char *string_to_clear, int string_size, int arg_8, int arg_C) {\n    char *string_ptr[2];\n    int max_string_size = 0x7fffffff;\n    int arg_10 = 0x7fffffff;\n    int arg_14 = DAT_08005e3c;\n    string_ptr[0] = string_to_clear;\n    char *string_start = string_to_clear;\n    int arg_18 = arg_8;\n    int arg_1C = arg_C;\n    call_function(*(int *)PTR_PTR_DAT_08005e38, string_ptr, string_size, &arg_18);\n    *string_ptr[0] = 0;\n    return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "clear_string_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "temp_dividend",
                "iVar3": "remainder",
                "iVar4": "divisor_size",
                "iVar5": "j",
                "uVar6": "return_value",
                "puVar7": "puVar7",
                "puVar8": "puVar8",
                "puVar9": "puVar9",
                "uVar10": "uVar10",
                "puVar11": "puVar11",
                "puVar12": "puVar12"
            },
            "code": "uint calculate_division_080078c0(uint dividend[], uint divisor[], int dividend_size, int divisor_size)\n{\n    uint quotient = 0;\n    int i = 0;\n    uint remainder = 0;\n    uint temp_dividend[dividend_size];\n    uint temp_divisor[divisor_size];\n    memcpy(temp_dividend, dividend, dividend_size * sizeof(uint));\n    memcpy(temp_divisor, divisor, divisor_size * sizeof(uint));\n    if (temp_dividend[dividend_size - 1] < temp_divisor[divisor_size - 1]) {\n        return 0;\n    }\n    int j = dividend_size - divisor_size;\n    while (j >= 0) {\n        if (temp_dividend[j + divisor_size - 1] == temp_divisor[divisor_size - 1]) {\n            quotient = 0xffff;\n        } else {\n            quotient = temp_dividend[j + divisor_size - 1] / (temp_divisor[divisor_size - 1] + 1);\n        }\n        remainder = 0;\n        for (i = 0; i < divisor_size; i++) {\n            temp_dividend[i + j] -= remainder;\n            remainder = 0;\n            if (temp_dividend[i + j] < temp_divisor[i]) {\n                remainder = 1;\n                temp_dividend[i + j] += 0x10000;\n            }\n            temp_dividend[i + j] -= temp_divisor[i] * quotient;\n            if (temp_dividend[i + j] > 0xffff) {\n                remainder = 1;\n                temp_dividend[i + j] -= 0x10000;\n            }\n        }\n        temp_dividend[j + divisor_size] -= remainder;\n        if (temp_dividend[j + divisor_size] == 0) {\n            if (j + divisor_size == dividend_size - 1) {\n                break;\n            }\n            int k = j + divisor_size - 1;\n            while (k >= j) {\n                if (temp_dividend[k] != 0) {\n                    break;\n                }\n                k--;\n            }\n            j = k - divisor_size + 1;\n            if (j < 0) {\n                j = 0;\n            }\n            dividend_size = k + 1;\n        } else {\n            j--;\n        }\n    }\n    return quotient + 1;\n}",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_division_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "result_upper",
                "uVar3": "result_lower",
                "uVar4": "absolute_input_4",
                "uVar5": "absolute_input_3",
                "uVar6": "result_upper",
                "DAT_080059bc": "PTR_DAT_080059bc",
                "DAT_080059b8": "PTR_DAT_080059b8",
                "DAT_080059e8": "PTR_DAT_080059e8",
                "DAT_080059f0": "FUNC_080059f0",
                "DAT_080059b0": "PTR_DAT_080059b0",
                "DAT_080059a0": "PTR_DAT_080059a0",
                "DAT_080059e0": "PTR_DAT_080059e0",
                "DAT_080059d8": "PTR_DAT_080059d8",
                "DAT_080059d0": "PTR_DAT_080059d0",
                "DAT_080059c8": "PTR_DAT_080059c8",
                "SCARRY4": "SCARRY4",
                "FUNC_0800015c": "FUNC_0800015c",
                "FUNC_08000158": "FUNC_08000158",
                "FUNC_0800071c": "FUNC_0800071c",
                "do_nothing_08005d0c": "do_nothing_08005d0c"
            },
            "code": "uint calculate_result_thunk_08005838(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  int difference;\n  undefined4 result_upper;\n  uint result_lower;\n  uint absolute_input_3;\n  uint absolute_input_1;\n  uint absolute_input_2;\n  uint absolute_input_4;\n  uint sign_input_2;\n  uint sign_input_4;\n  uint sign_input_3;\n  uint sign_input_1;\n  \n  result_upper = CONCAT44(DAT_080059bc, DAT_080059b8);\n  absolute_input_4 = input_4 & 0x7fffffff;\n  absolute_input_3 = input_3 & 0x7fffffff;\n  if (DAT_080059e8 < (absolute_input_4 | (-input_3 | input_3) >> 0x1f) || DAT_080059e8 < (absolute_input_3 | (-input_1 | input_1) >> 0x1f))\n  {\n    result_lower = FUNC_0800015c(input_3, input_4, input_1, input_2);\n    return result_lower;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0)\n  {\n    result_lower = DAT_080059f0();\n    return result_lower;\n  }\n  absolute_input_2 = input_2 & 0x7fffffff;\n  absolute_input_1 = input_1 & 0x7fffffff;\n  sign_input_2 = absolute_input_2 >> 0x1f;\n  sign_input_4 = absolute_input_4 >> 0x1f;\n  sign_input_3 = (-input_3 | input_3) >> 0x1f;\n  sign_input_1 = (-input_1 | input_1) >> 0x1f;\n  if (absolute_input_1 == 0 && absolute_input_2 == 0)\n  {\n    if (sign_input_2 == 2)\n    {\n      return DAT_080059b0;\n    }\n    if (sign_input_2 == 3)\n    {\n      return DAT_080059a0;\n    }\n    if (sign_input_2 == 1)\n    {\n      return 0;\n    }\n    return 0;\n  }\n  else\n  {\n    if (absolute_input_4 != 0 || absolute_input_3 != 0)\n    {\n      if (DAT_080059e8 == absolute_input_4)\n      {\n        if (DAT_080059e8 == absolute_input_1)\n        {\n          if (sign_input_2 == 2)\n          {\n            return DAT_080059e0;\n          }\n          if (sign_input_2 == 3)\n          {\n            return DAT_080059d8;\n          }\n          if (sign_input_2 == 1)\n          {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (sign_input_2 == 2)\n        {\n          return DAT_080059b0;\n        }\n        if (sign_input_2 == 3)\n        {\n          return DAT_080059a0;\n        }\n        if (sign_input_2 == 1)\n        {\n          return 0;\n        }\n        return 0;\n      }\n      if (DAT_080059e8 != absolute_input_2)\n      {\n        difference = (int)(DAT_080059e8 - absolute_input_4) >> 0x14;\n        if (difference < 0x3d)\n        {\n          if ((int)input_4 < 0 && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c)))\n          {\n            result_upper = 0;\n          }\n          else\n          {\n            FUNC_0800071c(input_1, input_2, input_3, input_4, DAT_080059e8);\n            do_nothing_08005d0c();\n            result_upper = DAT_080059f0();\n          }\n        }\n        result_lower = (uint)result_upper;\n        result_upper = (undefined4)((ulonglong)result_upper >> 0x20);\n        if (sign_input_2 == 1)\n        {\n          return result_lower;\n        }\n        if (sign_input_2 == 2)\n        {\n          result_upper = FUNC_08000158(result_lower, result_upper, PTR_DAT_080059a8, PTR_DAT_080059ac);\n          result_lower = FUNC_08000158(DAT_080059b0, PTR_DAT_080059b4, (int)result_upper, (int)((ulonglong)result_upper >> 0x20));\n          return result_lower;\n        }\n        if (sign_input_2 == 0)\n        {\n          return result_lower;\n        }\n        result_upper = FUNC_08000158(result_lower, result_upper, PTR_DAT_080059a8, PTR_DAT_080059ac);\n        result_lower = FUNC_08000158((int)result_upper, (int)((ulonglong)result_upper >> 0x20), DAT_080059b0, PTR_DAT_080059b4);\n        return result_lower;\n      }\n    }\n    if ((int)input_2 < 0)\n    {\n      result_lower = DAT_080059b8;\n    }\n    else\n    {\n      result_lower = PTR_DAT_080059c0;\n    }\n  }\n  return result_lower;\n}",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "input_value",
                "uVar1": "unused_variable_1",
                "uVar2": "absolute_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes_count",
                "uVar5": "shift_amount_with_offset",
                "uVar6": "is_negative",
                "in_r12": "unused_variable_2",
                "bVar7": "is_shift_amount_negative",
                "bVar8": "is_shift_amount_zero",
                "bVar9": "unused_variable_3"
            },
            "code": "ulonglong calculate_shifted_value_080003f4(uint input_value)\n{\n  uint absolute_value;\n  uint leading_zeroes_count;\n  uint shift_amount;\n  uint high_bits;\n  uint low_bits;\n  bool is_negative;\n  bool is_shift_amount_negative;\n  bool is_shift_amount_zero;\n  if (input_value == 0) {\n    return 0;\n  }\n  is_negative = (input_value & 0x80000000) != 0;\n  absolute_value = is_negative ? -input_value : input_value;\n  leading_zeroes_count = count_leading_zeroes(absolute_value);\n  shift_amount = leading_zeroes_count + 0x15;\n  is_shift_amount_negative = shift_amount < 0;\n  is_shift_amount_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    shift_amount = is_shift_amount_negative ? 0 : shift_amount + 1;\n    high_bits = absolute_value << (shift_amount & 0xff);\n    low_bits = absolute_value >> (0xcU - leading_zeroes_count + shift_amount & 0xff);\n  } else {\n    high_bits = 0;\n    low_bits = absolute_value << (leading_zeroes_count + 0x15 & 0xff);\n  }\n  if (shift_amount < 0x433) {\n    return ((ulonglong)high_bits | (ulonglong)(0x432 - shift_amount) * 0x100000 | (ulonglong)is_negative << 0x20) << 0x20 | low_bits;\n  }\n  uint remaining_bits = ~(0x432 - shift_amount);\n  if (remaining_bits > 0x1e) {\n    return ((ulonglong)input_value | (ulonglong)low_bits >> (remaining_bits - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_diff = remaining_bits - 0x13;\n  if (shift_amount_diff == 0 || (shift_amount_diff < 0) != SCARRY4(remaining_bits - 0x1f, 0xc)) {\n    remaining_bits++;\n    return ((ulonglong)is_negative << 0x20 | (ulonglong)low_bits >> (remaining_bits & 0xff)) << 0x20 | (ulonglong)high_bits >> (0x20 - remaining_bits & 0xff);\n  }\n  return ((ulonglong)input_value | (ulonglong)low_bits >> (0x20 - (0xcU - shift_amount_diff) & 0xff) | (ulonglong)is_negative << 0x20) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    FUN_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = FUN_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = FUN_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = FUN_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = FUN_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = FUN_0800119c();\n  iVar10 = FUN_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = FUN_080003f4(local_74);\n    iVar10 = FUN_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = FUN_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)FUN_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)FUN_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = FUN_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = FUN_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = FUN_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = FUN_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = FUN_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = FUN_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = FUN_0800119c();\n            uVar23 = FUN_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = FUN_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = FUN_0800119c();\n              uVar23 = FUN_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = FUN_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = FUN_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = FUN_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = FUN_0800119c();\n        uVar21 = FUN_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = FUN_0800119c();\n            uVar22 = FUN_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = FUN_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = FUN_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = FUN_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = FUN_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = decode_data(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = decode_data(param_1,uVar12,iVar9);\n          uVar8 = FUN_08009258(param_1,uVar12,uVar3);\n          FUN_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = decode_data(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = FUN_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = decode_data(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = FUN_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = FUN_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = FUN_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = FUN_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = FUN_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = FUN_08009120(param_1,uVar5,5);\n        iVar9 = FUN_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = FUN_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = FUN_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = FUN_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        FUN_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = FUN_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = FUN_080078c0(uVar3,uVar5);\n      iVar13 = FUN_080094f8(uVar3,local_80);\n      iVar10 = FUN_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = FUN_080094f8(uVar3);\n        FUN_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = FUN_08009444(param_1,uVar3,1);\n          iVar13 = FUN_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = FUN_08009444(param_1,uVar3,1);\n    iVar9 = FUN_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      FUN_0800910c(param_1);\n    }\n  }\n  FUN_0800910c(param_1,uVar12);\nLAB_08008294:\n  FUN_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_08009258",
                "FUN_080003f4",
                "FUN_0800910c",
                "FUN_08009120",
                "FUN_080004c8",
                "FUN_080009ac",
                "FUN_0800119c",
                "FUN_080078c0",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009444",
                "FUN_080003d4",
                "FUN_0800015c",
                "FUN_080009d4",
                "FUN_08009244",
                "FUN_08001084",
                "FUN_08000158",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08009530",
                "FUN_080090c0",
                "FUN_0800071c",
                "FUN_080009e8",
                "FUN_080091a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "reverse_bits_0800166c",
                "param_1": "num",
                "param_2": "mask",
                "param_3": "bits_to_shift",
                "uVar1": "bits_remaining",
                "reversed_mask": "reversed_mask"
            },
            "code": "uint reverse_bits_0800166c(uint num, uint mask, uint bits_to_shift)\n{\n  uint reversed_mask;\n  uint bits_remaining = 7 - (num & 7);\n  if (bits_remaining > 3) {\n    bits_remaining = 4;\n  }\n  if ((num & 7) + 4 < 7) {\n    num = 0;\n  }\n  else {\n    num -= 3;\n  }\n  reversed_mask = ~(-1 << (num & 0xff));\n  return mask & ~reversed_mask |\n         (~(-1 << (bits_remaining & 0xff)) & bits_to_shift) << (num & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "set_bit_0800360c",
                "param_1": "data_ptr",
                "*param_1": "data",
                "(*param_1)[3]": "data[3]",
                "**param_1": "*data"
            },
            "code": "int set_bit_0800360c(uint **data_ptr)\n{\n    uint *data = *data_ptr;\n    data[3] |= 0x1;\n    *data |= 0x1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "write_to_memory_08005d68",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "aligned_memory",
                "puVar2": "next_mem",
                "uVar3": "remaining_size",
                "uVar4": "pattern",
                "bVar5": "is_size_gt_3",
                "LAB_08005de4": "end_of_function"
            },
            "code": "void write_to_memory_08005d68(uint32_t *memory, uint8_t value, uint32_t size) {\n  uint32_t *aligned_memory;\n  uint32_t aligned_size;\n  uint32_t pattern;\n  bool is_size_gt_3;\n  bool is_size_gt_15;\n  uint32_t remaining_size;\n\n  if (((uint32_t)memory & 3) != 0) {\n    remaining_size = size - 1;\n    aligned_memory = memory;\n    if (size == 0) {\n      return;\n    }\n    while (true) {\n      memory = (uint32_t *)((int)aligned_memory + 1);\n      *(uint8_t *)aligned_memory = value;\n      size = remaining_size;\n      if (((uint32_t)memory & 3) == 0) break;\n      is_size_gt_3 = remaining_size > 3;\n      remaining_size = remaining_size - 1;\n      aligned_memory = memory;\n      if (!is_size_gt_3) {\n        return;\n      }\n    }\n  }\n\n  if (size > 3) {\n    pattern = (value << 24) | (value << 16) | (value << 8) | value;\n    aligned_size = size;\n    aligned_memory = memory;\n    if (size > 15) {\n      aligned_size = size - 16;\n      aligned_memory = memory + 4;\n      do {\n        aligned_memory[-4] = pattern;\n        aligned_memory[-3] = pattern;\n        aligned_memory[-2] = pattern;\n        aligned_memory[-1] = pattern;\n        aligned_memory = aligned_memory + 4;\n      } while (aligned_memory != (uint32_t *)((int)memory + (aligned_size & 0xfffffff0) + 0x20));\n      remaining_size = size & 0xf;\n      memory = memory + ((aligned_size >> 4) + 1) * 4;\n      aligned_size = remaining_size;\n      aligned_memory = memory;\n      if (remaining_size < 4) goto LAB_08005de4;\n    }\n    do {\n      aligned_size = aligned_size - 4;\n      *memory = pattern;\n      memory = memory + 1;\n    } while (aligned_size > 3);\n    memory = (uint32_t *)((int)aligned_memory + (size - 4 & 0xfffffffc) + 4);\n    aligned_size = size & 3;\n  }\n\nLAB_08005de4:\n  if (aligned_size != 0) {\n    aligned_memory = memory;\n    do {\n      uint32_t *next_mem = (uint32_t *)((int)aligned_memory + 1);\n      *(uint8_t *)aligned_memory = value;\n      aligned_memory = next_mem;\n    } while ((uint32_t *)(aligned_size + (int)memory) != aligned_memory);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "imported": false,
            "current_name": "write_to_memory_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "decode_bits_080017c4",
                "param_1": "bits_array",
                "param_2": "decoded_array",
                "uVar1": "PTR_DAT_08001a60",
                "uVar2": "PTR_DAT_08001a5c",
                "uVar3": "bit_mask",
                "uVar4": "decoded_mask",
                "uVar5": "decoded_value",
                "puVar6": "decoded_ptr",
                "iVar7": "index",
                "local_10": "decoded_result",
                "local_c": "bit_index"
            },
            "code": "void decode_bits_080017c4(uint *bits_array, uint *decoded_array)\n{\n    uint bit_mask;\n    uint decoded_value;\n    uint *decoded_ptr;\n    int i;\n    uint bit_index = 0;\n    uint decoded_index = 0;\n    \n    while (bit_index <= 0xf) {\n        bit_mask = 1 << bit_index;\n        if ((*decoded_array & bit_mask) == bit_mask) {\n            decoded_value = decoded_array[1];\n            if (decoded_value == 0x12) {\n                decoded_ptr = decoded_array + 3;\n                decoded_value = *decoded_ptr + 0xc;\n            }\n            else if (decoded_value < 0x13) {\n                if (decoded_value == 2) {\n                    decoded_ptr = decoded_array + 3;\n                    decoded_value = *decoded_ptr + 8;\n                }\n                else if (decoded_value == 1) {\n                    decoded_ptr = decoded_array + 3;\n                    decoded_value = *decoded_ptr;\n                }\n                else if (decoded_value == 0) {\n                    decoded_value = 0;\n                }\n            }\n            else if (decoded_value == PTR_DAT_08001a4c || decoded_value == PTR_DAT_08001a50 || decoded_value == PTR_DAT_08001a54 || decoded_value == PTR_DAT_08001a58 || decoded_value == PTR_DAT_08001a5c || decoded_value == PTR_DAT_08001a60) {\n                decoded_ptr = decoded_array + 2;\n                if (*decoded_ptr == 0) {\n                    decoded_value = 4;\n                }\n                else if (*decoded_ptr == 1) {\n                    decoded_value = 8;\n                    bits_array[4] = bit_mask;\n                }\n                else {\n                    decoded_value = 8;\n                    bits_array[5] = bit_mask;\n                }\n            }\n            if (bit_mask < 0x100) {\n                decoded_ptr = bits_array;\n            }\n            else {\n                decoded_ptr = bits_array + 1;\n                decoded_value = (bit_index - 8) * 4;\n            }\n            *decoded_ptr = *decoded_ptr & ~(0xf << (bit_index << 2)) | decoded_value << (bit_index << 2);\n            if ((decoded_array[1] & 0x10000000) != 0) {\n                *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n                if (bits_array == PTR_DAT_08001a6c) {\n                    i = 0;\n                }\n                else if (bits_array == PTR_DAT_08001a70) {\n                    i = 1;\n                }\n                else if (bits_array == PTR_DAT_08001a74) {\n                    i = 2;\n                }\n                else if (bits_array == PTR_DAT_08001a78) {\n                    i = 3;\n                }\n                else {\n                    i = 4;\n                }\n                *(uint *)(PTR_DAT_08001a68 + ((bit_index >> 2) + 2) * 4) = i << ((bit_index & 3) << 2) | ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((bit_index >> 2) + 2) * 4);\n                if ((decoded_array[1] & 0x10000) == 0) {\n                    *PTR_DAT_08001a7c = ~bit_mask & *PTR_DAT_08001a7c;\n                }\n                else {\n                    *PTR_DAT_08001a7c = bit_mask | *PTR_DAT_08001a7c;\n                }\n                if ((decoded_array[1] & 0x20000) == 0) {\n                    PTR_DAT_08001a7c[1] = ~bit_mask & PTR_DAT_08001a7c[1];\n                }\n                else {\n                    PTR_DAT_08001a7c[1] = bit_mask | PTR_DAT_08001a7c[1];\n                }\n                if ((decoded_array[1] & 0x100000) == 0) {\n                    PTR_DAT_08001a7c[2] = ~bit_mask & PTR_DAT_08001a7c[2];\n                }\n                else {\n                    PTR_DAT_08001a7c[2] = bit_mask | PTR_DAT_08001a7c[2];\n                }\n                if ((decoded_array[1] & 0x200000) == 0) {\n                    PTR_DAT_08001a7c[3] = ~bit_mask & PTR_DAT_08001a7c[3];\n                }\n                else {\n                    PTR_DAT_08001a7c[3] = bit_mask | PTR_DAT_08001a7c[3];\n                }\n            }\n        }\n        bit_index++;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_080055f4",
                "FUN_08005680"
            ],
            "imported": false,
            "current_name": "decode_bits_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "validate_input_and_process_080035a4",
                "*param_1": "*input_array",
                "uVar1": "result",
                "param_1": "input_array",
                "is_input_valid": "is_input_valid",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(input_array + 61)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)(input_array + 61)",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(input_array + 15)"
            },
            "code": "int validate_input_and_process_080035a4(int *input_array)\n{\n    int result;\n    if (input_array == NULL)\n    {\n        result = 1;\n    }\n    else\n    {\n        int is_input_valid = *(char *)(input_array + 61) == 0;\n        if (is_input_valid)\n        {\n            *(char *)(input_array + 15) = 0;\n            do_nothing_080035fa(input_array);\n        }\n        *(char *)(input_array + 61) = 2;\n        FUN_08003c94(*input_array, input_array + 1);\n        *(char *)(input_array + 61) = 1;\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "validate_input_and_process_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "set_bit_080041ea",
                "param_1": "data",
                "param_2": "index",
                "param_3": "value",
                "(uint *)": "uint32_t *",
                "uint": "uint32_t",
                "&": "*",
                "~(1 << (param_2 & 0xff))": "mask",
                "*(uint *)(param_1 + 0x20)": "*data",
                "| param_3 << (param_2 & 0xff)": "| (value << (index & 0xff))"
            },
            "code": "void set_bit_080041ea(uint32_t *data, uint8_t index, uint32_t value) {\n  uint32_t mask = ~(1 << (index & 0xff));\n  *data = (*data & mask) | (value << (index & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": false,
            "current_name": "set_bit_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "decode_data_08004ae0",
                "param_1": "output_array",
                "uVar1": "decoded_value",
                "local_2c": "local_byte_1",
                "local_2b": "local_byte_2",
                "local_2a": "local_byte_3",
                "local_29": "local_byte_4",
                "local_28": "local_byte_5",
                "local_27": "local_byte_6",
                "local_26": "local_byte_7",
                "local_25": "local_byte_8",
                "local_24": "local_byte_9",
                "local_23": "local_byte_10",
                "local_22": "local_byte_11",
                "local_21": "local_byte_12",
                "local_20": "local_byte_13",
                "local_1f": "unused_byte",
                "local_1e": "local_short_1",
                "local_1c": "local_short_2",
                "local_1a": "local_short_3",
                "local_18": "local_short_4",
                "local_16": "local_short_5",
                "local_14": "local_short_6"
            },
            "code": "void decode_data_08004ae0(undefined4 *output_array)\n{\n  undefined4 decoded_value;\n  undefined local_byte_1;\n  undefined local_byte_2;\n  undefined local_byte_3;\n  undefined local_byte_4;\n  undefined local_byte_5;\n  undefined local_byte_6;\n  undefined local_byte_7;\n  undefined local_byte_8;\n  undefined local_byte_9;\n  undefined local_byte_10;\n  undefined local_byte_11;\n  undefined local_byte_12;\n  undefined local_byte_13;\n  short local_short_1;\n  short local_short_2;\n  short local_short_3;\n  short local_short_4;\n  short local_short_5;\n  short local_short_6;\n  (**(code **)PTR_DAT_08004bd4)(0xd0,0x3b,&local_byte_1,0xe);\n  local_short_6 = CONCAT11(local_byte_4,local_byte_3);\n  local_short_5 = CONCAT11(local_byte_5,local_byte_6);\n  local_short_4 = CONCAT11(local_byte_7,local_byte_8);\n  local_short_3 = CONCAT11(local_byte_9,local_byte_10);\n  local_short_2 = CONCAT11(local_byte_11,local_byte_12);\n  local_short_1 = CONCAT11(local_byte_13,local_byte_2);\n  decoded_value = FUN_08000c10((int)CONCAT11(local_byte_1,local_byte_2));\n  *output_array = decoded_value;\n  decoded_value = FUN_08000c10((int)local_short_6);\n  output_array[1] = decoded_value;\n  decoded_value = FUN_08000c10((int)local_short_5);\n  output_array[2] = decoded_value;\n  decoded_value = FUN_08000c10((int)local_short_4);\n  output_array[3] = decoded_value;\n  decoded_value = FUN_08000c10((int)local_short_3);\n  output_array[4] = decoded_value;\n  decoded_value = FUN_08000c10((int)local_short_2);\n  output_array[5] = decoded_value;\n  decoded_value = FUN_08000c10((int)local_short_1);\n  output_array[6] = decoded_value;\n}\n",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_data_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "calculate_shifted_value_08001044",
                "param_1": "input_val",
                "uVar1": "shifted_val"
            },
            "code": "uint calculate_shifted_value_08001044(uint input_val) {\n  uint shifted_val;\n  if (((input_val & 0x80000000) != 0) || (input_val << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shifted_val = 0x9e - ((input_val << 1) >> 0x18);\n  if (-1 < (int)shifted_val) {\n    return (input_val << 8 | 0x80000000) >> (shifted_val & 0xff);\n  }\n  if ((shifted_val == 0xffffff9f) && ((input_val & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "reverse_and_shift_bits_08009444",
                "param_1": "input",
                "param_2": "output_array",
                "param_3": "array_size",
                "iVar1": "num_bits_shifted",
                "iVar2": "shifted_array_size",
                "iVar3": "current_index",
                "uVar4": "data_value",
                "iVar5": "original_array_size",
                "iVar6": "data_section",
                "puVar7": "temp_array",
                "puVar8": "current_output",
                "puVar9": "next_index",
                "puVar10": "second_next_index",
                "puVar11": "last_index",
                "SBORROW4": "is_subtraction_overflow"
            },
            "code": "void reverse_and_shift_bits_08009444(int input, uint32_t *output_array, uint32_t array_size)\n{\n  int num_bits_shifted;\n  int shifted_array_size;\n  int current_index;\n  uint32_t *temp_array;\n  uint32_t *current_output;\n  uint32_t carryover_bits;\n  int original_array_size = output_array[4];\n  shifted_array_size = (int)array_size >> 5;\n  shifted_array_size += original_array_size + 1;\n  current_index = output_array[1];\n  num_bits_shifted = output_array[2];\n  if (num_bits_shifted < shifted_array_size) {\n    do {\n      num_bits_shifted *= 2;\n      current_index++;\n    } while (shifted_array_size != num_bits_shifted && shifted_array_size - num_bits_shifted < 0 == SBORROW4(shifted_array_size, num_bits_shifted));\n  }\n  temp_array = (uint32_t *)FUN_080090c0(input,current_index) + 0x14;\n  if (0 < shifted_array_size) {\n    uint32_t *last_index = temp_array + shifted_array_size;\n    uint32_t *current_index = temp_array;\n    do {\n      uint32_t *next_index = current_index + 1;\n      *current_index = 0;\n      current_output = last_index;\n      current_index = next_index;\n    } while (current_index != last_index);\n  }\n  current_index = output_array[4];\n  uint32_t *original_array = output_array + 5;\n  array_size = array_size & 0x1f;\n  if (array_size == 0) {\n    temp_array--;\n    uint32_t *last_index = original_array;\n    do {\n      uint32_t *next_index = last_index + 1;\n      temp_array++;\n      *temp_array = *last_index;\n      last_index = next_index;\n    } while (last_index < original_array + current_index);\n  }\n  else {\n    carryover_bits = 0;\n    uint32_t *last_index = original_array;\n    do {\n      uint32_t *next_index = temp_array;\n      *next_index = *last_index << array_size | carryover_bits;\n      uint32_t *second_next_index = last_index + 1;\n      carryover_bits = *last_index >> (0x20 - array_size & 0xff);\n      temp_array++;\n      last_index = second_next_index;\n    } while (last_index < original_array + current_index);\n    temp_array[1] = carryover_bits;\n    if (carryover_bits != 0) {\n      shifted_array_size += shifted_array_size + 1;\n    }\n  }\n  int data_section = *(int *)(input + 0x4c);\n  int current_index = output_array[1];\n  uint32_t data_value = *(uint32_t *)(data_section + current_index * 4);\n  *(int *)(temp_array + 0x10) = shifted_array_size - 1;\n  *output_array = data_value;\n  *(uint32_t **)(data_section + current_index * 4) = output_array;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "reverse_and_shift_bits_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_data_shifted_right_080015fc",
                "DAT_08001614": "data_pointer"
            },
            "code": "uint get_data_shifted_right_080015fc(uint* DAT_08001614) {\n    uint data = *(DAT_08001614 + 0xc);\n    uint shifted_data = data >> 8;\n    uint masked_data = shifted_data & 7;\n    return masked_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "get_data_shifted_right_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "check_input": "check_input",
                "param_1": "input",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "timeout",
                "iVar1": "i",
                "iVar2": "j",
                "uVar3": "result",
                "local_58": "current_data",
                "FUN_08004436": "check_input_08004436"
            },
            "code": "int check_input_08004436(uint **input, ushort *data, short data_length, uint timeout) {\\n\\\n        int i = 0;\\n\\\n        int j = 0;\\n\\\n        int result = 0;\\n\\\n        ushort *current_data = data;\\n\\\n        \\n\\\n        if (**(char **)(input + 0x39) == \" \") {\\n\\\n            if ((data == NULL) || (data_length == 0)) {\\n\\\n                result = 1;\\n\\\n            }\\n\\\n            else if (**(char **)(input + 0xe) == \"\\x01\") {\\n\\\n                result = 2;\\n\\\n            }\\n\\\n            else {\\n\\\n                **(char **)(input + 0xe) = 1;\\n\\\n                *(input + 0xf) = NULL;\\n\\\n                **(char **)((int)input + 0x39) = 0x21;\\n\\\n                i = FUN_080015a0();\\n\\\n                *(short *)(input + 9) = data_length;\\n\\\n                *(short *)((int)input + 0x26) = data_length;\\n\\\n                current_data = data;\\n\\\n                while (*(short *)((int)input + 0x26) != 0) {\\n\\\n                    *(short *)((int)input + 0x26) = *(short *)((int)input + 0x26) + -1;\\n\\\n                    if (input[2] == (uint *)0x1000) {\\n\\\n                        do {\\n\\\n                            if ((**input & 0x80) == 0x80) {\\n\\\n                                j = 0;\\n\\\n                                goto LAB_0800454c;\\n\\\n                            }\\n\\\n                        } while ((timeout == 0xffffffff) || ((timeout != 0 && (j = FUN_080015a0(), (uint)(j - i) <= timeout))));\\n\\\n                        (*input)[3] = (*input)[3] & 0xfffffe5f;\\n\\\n                        (*input)[5] = (*input)[5] & 0xfffffffe;\\n\\\n                        **(char **)((int)input + 0x39) = 0x20;\\n\\\n                        **(char **)((int)input + 0x3a) = 0x20;\\n\\\n                        **(char **)(input + 0xe) = 0;\\n\\\n                        j = 3;\\n\\\n                        LAB_0800454c:\\n\\\n                        if (j != 0) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                        (*input)[1] = *current_data & 0x1ff;\\n\\\n                        if (input[4] == NULL) {\\n\\\n                            current_data++;\\n\\\n                        }\\n\\\n                        else {\\n\\\n                            current_data = (ushort *)((int)current_data + 1);\\n\\\n                        }\\n\\\n                    }\\n\\\n                    else {\\n\\\n                        do {\\n\\\n                            if ((**input & 0x80) == 0x80) {\\n\\\n                                j = 0;\\n\\\n                                goto LAB_08004614;\\n\\\n                            }\\n\\\n                        } while ((timeout == 0xffffffff) || ((timeout != 0 && (j = FUN_080015a0(), (uint)(j - i) <= timeout))));\\n\\\n                        (*input)[3] = (*input)[3] & 0xfffffe5f;\\n\\\n                        (*input)[5] = (*input)[5] & 0xfffffffe;\\n\\\n                        **(char **)((int)input + 0x39) = 0x20;\\n\\\n                        **(char **)((int)input + 0x3a) = 0x20;\\n\\\n                        **(char **)(input + 0xe) = 0;\\n\\\n                        j = 3;\\n\\\n                        LAB_08004614:\\n\\\n                        if (j != 0) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                        (*input)[1] = (uint)*(byte *)current_data;\\n\\\n                        current_data = (ushort *)((int)current_data + 1);\\n\\\n                    }\\n\\\n                }\\n\\\n                do {\\n\\\n                    if ((**input & 0x40) == 0x40) {\\n\\\n                        i = 0;\\n\\\n                        goto LAB_080046c6;\\n\\\n                    }\\n\\\n                } while ((timeout == 0xffffffff) || ((timeout != 0 && (j = FUN_080015a0(), (uint)(j - i) <= timeout))));\\n\\\n                (*input)[3] = (*input)[3] & 0xfffffe5f;\\n\\\n                (*input)[5] = (*input)[5] & 0xfffffffe;\\n\\\n                **(char **)((int)input + 0x39) = 0x20;\\n\\\n                **(char **)((int)input + 0x3a) = 0x20;\\n\\\n                **(char **)(input + 0xe) = 0;\\n\\\n                i = 3;\\n\\\n                LAB_080046c6:\\n\\\n                if (i == 0) {\\n\\\n                    **(char **)((int)input + 0x39) = 0x20;\\n\\\n                    **(char **)(input + 0xe) = 0;\\n\\\n                    result = 0;\\n\\\n                }\\n\\\n                else {\\n\\\n                    result = 3;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        else {\\n\\\n            result = 2;\\n\\\n        }\\n\\\n        return result;\\n\\\n    }",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_input_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_initialization_status_and_return_pointer_to_function_08000110",
                "param_1": "function_pointer",
                "*PTR_DAT_08000128": "*PTR_INITIALIZED_FLAG",
                "DAT_0800012c": "DAT_INITIALIZED_VALUE",
                "PTR_FUN_08000130": "PTR_INITIALIZED_FUNCTION"
            },
            "code": "undefined* check_initialization_status_and_return_pointer_to_function_08000110(undefined* function_pointer) {\\n    if (*PTR_DAT_08000128 == \"\\0\") {\\n        if (DAT_0800012c != 0) {\\n            function_pointer = PTR_FUN_08000130;\\n        }\\n        *PTR_DAT_08000128 = 1;\\n    }\\n    return function_pointer;\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_initialization_status_and_return_pointer_to_function_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_data_08003504",
                "undefined4": "int",
                "PTR_DAT_08003514": "pointer_to_data",
                "return": "return",
                "*(undefined4 *)": "*",
                ";": ";"
            },
            "code": "int get_value_from_data_08003504() {\n    int* PTR_DAT_08003514 = (int*)PTR_DAT_08003514;\n    return *PTR_DAT_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_080052a0",
                "FUN_08003518",
                "FUN_08003540"
            ],
            "imported": false,
            "current_name": "get_value_from_data_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004bd8",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_size",
                "param_4": "data_format",
                "FUNC_08001f6c": "call_function_with_data",
                "PTR_DAT_08004f28": "PTR_DATA_INFO",
                "*(undefined4 *)PTR_DAT_08004f24": "*(undefined4 *)PTR_DATA_CONFIG"
            },
            "code": "void process_data_08004ee8(undefined data_1, undefined data_2, undefined4 data_size, undefined2 data_format) {\n  call_function_with_data(PTR_DAT_08004f28, data_1, data_2, 1, data_size, data_format, *(undefined4 *)PTR_DAT_08004f24);\n  return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1_start",
                "param_2": "array2_start",
                "iVar1": "array1_length",
                "iVar3": "array2_offset",
                "puVar2": "array2_ptr",
                "puVar4": "array1_ptr"
            },
            "code": "int compare_arrays_080094f8(int array1_start, int array2_start)\n{\n    int array2_offset = *(int *)(array2_start + 0x10);\n    int array1_length = *(int *)(array1_start + 0x10) - array2_offset;\n    if (array1_length == 0) {\n        uint *array2_ptr = (uint *)(array2_start + 0x14 + array2_offset * 4);\n        uint *array1_ptr = (uint *)(array1_start + 0x14) + array2_offset;\n        do {\n            array1_ptr = array1_ptr + -1;\n            array2_ptr = array2_ptr + -1;\n            if (*array1_ptr != *array2_ptr) {\n                if (*array2_ptr <= *array1_ptr) {\n                    return 1;\n                }\n                return -1;\n            }\n        } while ((uint *)(array1_start + 0x14) < array1_ptr);\n    }\n    return array1_length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "check_input_is_not_null_08000998",
                "in_ZR": "input_char",
                "FUN_08000988": "execute_pre_check"
            },
            "code": "bool check_input_is_not_null_08000998(void)\n{\n  char input_char;\n  execute_pre_check();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_input_is_not_null_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "is_end_of_string_080009ac",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009ac(void)\n{\n  char current_char;\n  FUN_08000988();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "swap_arguments_and_return_nothing_08000fc8",
                "param_1": "pointer_to_first_arg",
                "param_2": "pointer_to_second_arg",
                "FUN_08000fd0": "swap"
            },
            "code": "void swap_arguments_and_return_nothing_08000fc8(int* pointer_to_second_arg, int* pointer_to_first_arg) {\n  swap(pointer_to_second_arg, pointer_to_first_arg);\n  return;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": false,
            "current_name": "swap_arguments_and_return_nothing_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "check_param_validity_0800438a",
                "param_1": "param_array",
                "uVar1": "result",
                "char": "byte",
                "do_nothing_08004424": "do_nothing",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int check_param_validity_0800438a(int *param_array){\\n  int result = 0;\\n  if (param_array == NULL) {\\n    result = 1;\\n  }\\n  else {\\n    if (*(char *)((int)param_array + 0x39) == \"\\0\") {\\n      *(undefined *)(param_array + 0xe) = 0;\\n      do_nothing_08004424(param_array);\\n    }\\n    *(undefined *)((int)param_array + 0x39) = 0x24;\\n    *(uint *)(*param_array + 0xc) &= 0xffffdfff;\\n    FUN_080046ec(param_array);\\n    *(uint *)(*param_array + 0x10) &= 0xffffb7ff;\\n    *(uint *)(*param_array + 0x14) &= 0xffffffd5;\\n    *(uint *)(*param_array + 0xc) |= 0x2000;\\n    param_array[0xf] = 0;\\n    *(undefined *)((int)param_array + 0x39) = 0x20;\\n    *(undefined *)((int)param_array + 0x3a) = 0x20;\\n    result = 0;\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": false,
            "current_name": "check_param_validity_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_flag_and_call_functions_080014f0",
                "*DAT_08001518": "flag_ptr",
                "FUN_08001714": "call_function_with_arg",
                "FUN_0800151c": "call_another_function_with_arg",
                "do_nothing_08002d8a": "do_nothing"
            },
            "code": "int set_flag_and_call_functions_080014f0(void)\n{\n  **DAT_08001518 |= 0x10;\n  call_function_with_arg(3);\n  call_another_function_with_arg(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08002d8a",
                "FUN_0800151c",
                "FUN_08001714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "process_data_08003908",
                "param_1": "data",
                "param_2": "size",
                "param_3": "mode",
                "uVar1": "result",
                "*(char *)(param_1 + 0xf)": "*(char *)(data + 0xf)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(data + 0xf)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)data + 0x3d)",
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(*data + 0x18)",
                "*(uint *)(param_2 + 0x10)": "*(uint *)(size + 0x10)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(*data + 0x1c)",
                "*(int *)(param_2 + 0x10)": "*(int *)(size + 0x10)"
            },
            "code": "undefined4 process_data_08003908(int *data, int size, undefined4 mode) {\n    undefined4 result;\n    \n    if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(undefined *)(data + 0xf) = 1;\n        *(undefined *)((int)data + 0x3d) = 2;\n        switch(mode) {\n            case 0:\n                process_data_08003908_type_0(*data, size);\n                *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 8;\n                *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffffb;\n                *(uint *)(*data + 0x18) = *(uint *)(size + 0x10) | *(uint *)(*data + 0x18);\n                break;\n            case 4:\n                process_data_08003908_type_4(*data, size);\n                *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 0x800;\n                *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffbff;\n                *(uint *)(*data + 0x18) = *(int *)(size + 0x10) << 8 | *(uint *)(*data + 0x18);\n                break;\n            case 8:\n                process_data_08003908_type_8(*data, size);\n                *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 8;\n                *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffffb;\n                *(uint *)(*data + 0x1c) = *(uint *)(size + 0x10) | *(uint *)(*data + 0x1c);\n                break;\n            case 0xc:\n                process_data_08003908_type_c(*data, size);\n                *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 0x800;\n                *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffbff;\n                *(uint *)(*data + 0x1c) = *(int *)(size + 0x10) << 8 | *(uint *)(*data + 0x1c);\n                break;\n        }\n        *(undefined *)((int)data + 0x3d) = 1;\n        *(undefined *)(data + 0xf) = 0;\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_08003f18",
                "FUN_08003d60",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "process_data_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "initialize_data_buffer_08004f60",
                "FUN_08005d68": "memset",
                "PTR_DAT_08004f74": "data_buffer"
            },
            "code": "void initialize_data_buffer_08004f60(void)\n{\n  //initialize data buffer with 64 bytes of 0\n  memset(PTR_DAT_08004f74, 0, 0x40);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "initialize_data_buffer_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "should_execute_080009c0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_08000988": "execute_preparation"
            },
            "code": "bool should_execute_080009c0(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  execute_preparation();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "should_execute_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint input1, int input2, uint input3, int input4) {\n    int is_input1_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    int is_input2_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n    if (is_input1_valid || is_input2_valid) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "data_ptr",
                "param_2": "data_values",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "temp_value"
            },
            "code": "void update_data_08003f18(int data_ptr, uint *data_values){\n  uint value1;\n  uint value2;\n  uint temp_value;\n  \n  *(uint *)(data_ptr + 0x20) = *(uint *)(data_ptr + 0x20) & 0xfffffeff;\n  temp_value = *(uint *)(data_ptr + 4);\n  value1 = *data_values;\n  value2 = data_values[2] << 8 | *(uint *)(data_ptr + 0x20) & 0xfffffdff;\n  if (data_ptr == DAT_08003ff4) {\n    value2 = (data_values[3] << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    temp_value = data_values[6] << 4 | data_values[5] << 4 | temp_value & 0xffffcfff;\n  }\n  *(uint *)(data_ptr + 4) = temp_value;\n  *(uint *)(data_ptr + 0x1c) = value1 | *(uint *)(data_ptr + 0x1c) & 0xffffff8c;\n  *(uint *)(data_ptr + 0x3c) = data_values[1];\n  *(uint *)(data_ptr + 0x20) = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "decode_data_080097cc",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "input_buffer_size",
                "iVar1": "input_buffer_index",
                "uVar2": "input_buffer_size_remaining_uint_copy",
                "iVar3": "output_buffer_size",
                "iVar4": "input_buffer_index_copy",
                "uVar5": "input_buffer_size_remaining_copy",
                "uVar6": "input_buffer_size_remaining_uint",
                "puVar7": "input_buffer_ptr",
                "puVar8": "input_buffer_ptr",
                "uVar9": "current_input_value"
            },
            "code": "undefined4 decode_data_080097cc(undefined4 *output_buffer, int *input_buffer, int *input_buffer_size){\n  int input_buffer_index = *input_buffer;\n  int input_buffer_size_remaining = input_buffer[2];\n  undefined4 *input_buffer_ptr = (undefined4 *)*input_buffer_size;\n  do {\n    do {\n      input_buffer_ptr += 2;\n      undefined4 current_input_value = *input_buffer_ptr;\n      uint input_buffer_size_remaining_uint = input_buffer_ptr[1];\n      input_buffer_ptr = input_buffer_ptr + 1;\n    } while (input_buffer_size_remaining_uint == 0);\n    uint input_buffer_size_remaining_uint_copy = input_buffer_size_remaining_uint;\n    if ((input_buffer_size_remaining <= input_buffer_size_remaining_uint) && ((*(ushort *)(input_buffer + 3) & 0x480) != 0)) {\n      int input_buffer_index_copy = input_buffer_index - input_buffer[4];\n      uint input_buffer_size_remaining_copy = (input_buffer[5] * 3) / 2;\n      uint input_buffer_size_remaining_uint_copy_plus_input_buffer_index_copy = input_buffer_size_remaining_uint_copy + 1 + input_buffer_index_copy;\n      if (input_buffer_size_remaining_copy < input_buffer_size_remaining_uint_copy_plus_input_buffer_index_copy) {\n        input_buffer_size_remaining_copy = input_buffer_size_remaining_uint_copy_plus_input_buffer_index_copy;\n      }\n      if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x15) < 0) {\n        int output_buffer_size = allocate_memory(output_buffer, input_buffer_size_remaining_copy);\n        if (output_buffer_size == 0) {\n          *output_buffer = 0xc;\n          *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n          input_buffer[1] = 0;\n          input_buffer[2] = 0;\n          return 0xffffffff;\n        }\n        copy_memory(output_buffer_size, input_buffer[4], input_buffer_index_copy);\n        *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n      }\n      else {\n        int output_buffer_size = allocate_memory(output_buffer, input_buffer_size_remaining_copy);\n        if (output_buffer_size == 0) {\n          copy_memory(output_buffer, input_buffer[4]);\n          input_buffer[1] = 0;\n          input_buffer[2] = 0;\n          return 0xffffffff;\n        }\n      }\n      input_buffer_index = output_buffer_size + input_buffer_index_copy;\n      input_buffer[5] = input_buffer_size_remaining_copy;\n      input_buffer[4] = output_buffer_size;\n      *input_buffer = input_buffer_index;\n      input_buffer[2] = input_buffer_size_remaining_copy - input_buffer_index_copy;\n      input_buffer_size_remaining_uint_copy = input_buffer_size_remaining_uint;\n    }\n    process_input_value(input_buffer_index, current_input_value, input_buffer_size_remaining_uint_copy);\n    int input_buffer_size_remaining_copy = input_buffer[2];\n    uint input_buffer_size_remaining_minus_input_buffer_size_remaining_uint_copy = input_buffer[2] - input_buffer_size_remaining_uint_copy;\n    input_buffer_index = *input_buffer + input_buffer_size_remaining_uint_copy;\n    *input_buffer = input_buffer_index;\n    input_buffer[2] = input_buffer_size_remaining_minus_input_buffer_size_remaining_uint_copy;\n  } while (input_buffer_size_remaining_minus_input_buffer_size_remaining_uint_copy != 0);\n  input_buffer[1] = 0;\n  return 0;\n}",
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "decode_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = FUN_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = FUN_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = FUN_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002ca8",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "check_data_08002ad8",
                "param_1": "data_ptr",
                "param_2": "data_word",
                "param_3": "max_iterations",
                "param_4": "param_4",
                "iVar1": "iteration_count",
                "cVar2": "data_bit",
                "uVar3": "data_mask",
                "bVar4": "is_data_nonzero"
            },
            "code": "uint32_t check_data_08002ad8(uint32_t **data_ptr, uint32_t data_word, uint32_t max_iterations, int param_4)\n{\n  int iteration_count;\n  char data_bit;\n  uint32_t data_mask;\n  bool is_data_nonzero;\n  do {\n    if ((data_word >> 0x10 & 0xff) == 1) {\n      data_mask = data_word & ~(*data_ptr)[5] & 0xffff;\n      is_data_nonzero = data_mask != 0;\n      if (is_data_nonzero) {\n        data_mask = 1;\n      }\n      data_bit = (char)data_mask;\n      if (!is_data_nonzero) {\n        data_bit = 0;\n      }\n    }\n    else {\n      data_mask = data_word & ~(*data_ptr)[6] & 0xffff;\n      is_data_nonzero = data_mask != 0;\n      if (is_data_nonzero) {\n        data_mask = 1;\n      }\n      data_bit = (char)data_mask;\n      if (!is_data_nonzero) {\n        data_bit = 0;\n      }\n    }\n    if (data_bit == 0) {\n      return 0;\n    }\n    if (((*data_ptr)[5] & 0x400) == 0x400) {\n      **data_ptr = **data_ptr | 0x200;\n      (*data_ptr)[5] = 0xfffffbff;\n      data_ptr[0x10] = (uint32_t *)0x4;\n      data_ptr[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 1;\n    }\n  } while ((max_iterations == 0xffffffff) || ((max_iterations != 0 && (iteration_count = FUN_080015a0(), (uint32_t)(iteration_count - param_4) <= max_iterations))));\n  data_ptr[0xc] = (uint32_t *)0x0;\n  *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n  *(undefined *)(data_ptr + 0xf) = 0;\n  return 3;\n}\n",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_data_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "concat_44_08000fd0",
                "param_1": "first_half",
                "param_2": "second_half",
                "CONCAT44": "concat_44",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "undefined8 concat_44_08000fd0(uint32_t param_1,uint32_t param_2) {\n  call_function_08000f68();\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": false,
            "current_name": "concat_44_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "set_flags_08003d60",
                "param_1": "flags",
                "param_2": "data",
                "local_10": "new_local",
                "uVar1": "new_var1",
                "uVar2": "new_flags",
                "DAT_08003e34": "DAT_08003e34",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "mask4": "mask4"
            },
            "code": "void set_flags_08003d60(int flags, uint *data)\n{\n  uint mask1 = 0xfffffffe;\n  uint mask2 = 0xfffffffd;\n  uint mask3 = 0xfffffff7;\n  uint mask4 = 0xfffffcff;\n  uint new_flags = data[2] | (flags & mask2);\n  uint new_local = data[4];\n  uint new_var1 = data[0];\n  uint new_var2 = data[1];\n  if (flags == DAT_08003e34)\n  {\n    new_flags = (data[3] | (new_flags & mask3)) & mask2;\n    new_local = data[5] | data[6] | (new_local & mask4);\n  }\n  *(uint *)(flags + 0x04) = new_local;\n  *(uint *)(flags + 0x18) = new_var1 | (new_var1 & 0xffffff8c);\n  *(uint *)(flags + 0x20) = new_flags;\n  *(uint *)(flags + 0x34) = new_var2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_flags_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_shifted_result_08003518",
                "uVar1": "result",
                "FUN_08003504": "get_result",
                "PTR_DAT_0800353c": "ptr_dat",
                "DAT_08003538": "dat"
            },
            "code": "uint get_shifted_result_08003518(void)\n{\n  uint result = get_result();\n  uint shift_amount = PTR_DAT_0800353c[*(uint *)(DAT_08003538 + 4) >> 8 & 7];\n  return result >> shift_amount;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "get_shifted_result_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_data_08001618",
                "param_1": "data_address",
                "param_2": "data",
                "DAT_08001664": "data_ptr_1",
                "DAT_08001668": "data_ptr_2"
            },
            "code": "void set_data_08001618(byte data_address, uint8_t data) {\n  if (data_address < 0) {\n    *(char *)((data_address & 0xf) + DAT_08001664 + 0x14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data_address + DAT_08001668 + 0x300) = (char)((data & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "imported": false,
            "current_name": "set_data_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "num",
                "iVar1": "leading_zeros"
            },
            "code": "int count_leading_zeros_080091a4(uint32_t num)\n{\n    int leading_zeros = 0;\n    if ((num & 0xffff0000) == 0) {\n        num <<= 0x10;\n        leading_zeros += 0x10;\n    }\n    if ((num & 0xff000000) == 0) {\n        num <<= 8;\n        leading_zeros += 8;\n    }\n    if ((num & 0xf0000000) == 0) {\n        num <<= 4;\n        leading_zeros += 4;\n    }\n    if ((num & 0xc0000000) == 0) {\n        num <<= 2;\n        leading_zeros += 2;\n    }\n    if ((int)num >= 0) {\n        if ((int)(num << 1) < 0) {\n            return leading_zeros + 1;\n        }\n        leading_zeros = 0x20;\n    }\n    return leading_zeros;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "process_data_08004f78",
                "uVar1": "result_value",
                "iVar2": "flag_value",
                "uVar3": "temp_value",
                "uVar4": "xor_value",
                "uVar5": "pitch_value",
                "local_11": "final_value"
            },
            "code": "void process_data_08004f78(void)\n{\n    uint32_t xor_value;\n    uint32_t local_value;\n    uint32_t result_value;\n    uint64_t pitch_value;\n    uint32_t temp_value;\n    uint32_t flag_value;\n    uint8_t final_value;\n\n    init_data_structure(PTR_DAT_080051e0);\n    init_data_structure(PTR_DAT_080051e0,PTR_DAT_080051e4);\n    initialize();\n    pitch_value = get_pitch(*(uint32_t *)PTR_DAT_080051e4);\n    set_pitch(PTR_DAT_080051ec,PTR_s_Pitch___f_080051e8,(uint32_t)pitch_value,(uint32_t)(pitch_value >> 0x20));\n    temp_value = get_value(PTR_DAT_080051ec);\n    set_value(PTR_DAT_080051ec,temp_value);\n    result_value = function_one(*(uint32_t *)PTR_DAT_080051f0,*(uint32_t *)PTR_DAT_080051e4);\n    result_value = function_two(*(uint32_t *)PTR_DAT_080051f8,result_value);\n    local_value = function_two(*(uint32_t *)PTR_DAT_08005200,result_value);\n    local_value = function_one(local_value,*(uint32_t *)PTR_DAT_08005204);\n    *(uint32_t *)PTR_DAT_08005204 = local_value;\n    temp_value = get_value(*PTR_DAT_08005208);\n    flag_value = check_value(temp_value,*(uint32_t *)PTR_DAT_08005204);\n    if (flag_value == 0) {\n        temp_value = get_value(*PTR_DAT_0800520c);\n        flag_value = check_value(temp_value,*(uint32_t *)PTR_DAT_08005204);\n        if (flag_value != 0) {\n            local_value = get_value(*PTR_DAT_0800520c);\n        }\n        else {\n            local_value = *PTR_DAT_08005208;\n        }\n    }\n    else {\n        local_value = *PTR_DAT_08005208;\n    }\n    *(uint32_t *)PTR_DAT_08005214 = *(uint32_t *)PTR_DAT_080051f4;\n    flag_value = check_value(*(uint32_t *)PTR_DAT_080051f4,0);\n    set_flag(DAT_0800521c,2,flag_value != 0);\n    flag_value = check_value(*(uint32_t *)PTR_DAT_080051f4,0);\n    set_flag(DAT_0800521c,4,flag_value == 0);\n    flag_value = check_value(*(uint32_t *)PTR_DAT_080051f4,0);\n    set_flag(DAT_0800521c,8,flag_value != 0);\n    flag_value = check_value(*(uint32_t *)PTR_DAT_080051f4,0);\n    set_flag(DAT_0800521c,0x10,flag_value == 0);\n    *(uint32_t *)(*(int *)PTR_DAT_08005220 + 0x34) = (uint32_t)local_value;\n    *(uint32_t *)(*(int *)PTR_DAT_08005220 + 0x40) = (uint32_t)local_value;\n    return;\n}",
            "called": [
                "FUN_08004ae0",
                "FUN_08000418",
                "FUN_08004f60",
                "FUN_08000aa8",
                "FUN_08001a80",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08000cb8",
                "FUN_08001044",
                "FUN_08000aa4",
                "FUN_08005dfc",
                "FUN_08004bd8",
                "FUN_08000c10",
                "FUN_08000c08",
                "FUN_08005e40",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "imported": false,
            "current_name": "process_data_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_value_from_pointer_080015a0",
                "PTR_DAT_080015b0": "pointer_data"
            },
            "code": "get_value_from_pointer_080015a0() {\n  return *(undefined4 *)PTR_DAT_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002d98",
                "FUN_08002640",
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08003260",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = FUN_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = FUN_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = FUN_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = FUN_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = FUN_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = FUN_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = FUN_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "data",
                "param_2": "size",
                "param_3": "count",
                "uVar1": "result",
                "FUN_080015fc": "calculate_data",
                "FUN_0800166c": "manipulate_data",
                "FUN_08001618": "send_data"
            },
            "code": "void process_data_0800172a(char data, int size, int count)\n{\n  int result = calculate_data();\n  result = manipulate_data(result, size, count);\n  send_data((int)data, result);\n  return;\n}",
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "process_data_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "should_execute_function_080009d4",
                "in_ZR": "in_zero",
                "in_CY": "in_carry",
                "FUN_08000978": "execute_precondition"
            },
            "code": "bool should_execute_function_080009d4(void)\n{\n  undefined in_zero;\n  undefined in_carry;\n  \n  execute_precondition();\n  return !(bool)in_carry || (bool)in_zero;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "should_execute_function_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_flags_08005780",
                "DAT_080057dc": "data_pointer_1",
                "DAT_080057e0": "data_pointer_2"
            },
            "code": "void set_bit_and_clear_flags_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 1;\n  DAT_080057dc[1] = DAT_080057e0 & DAT_080057dc[1];\n  *DAT_080057dc = *DAT_080057dc & 0xfef6ffff;\n  *DAT_080057dc = *DAT_080057dc & 0xfffbffff;\n  DAT_080057dc[1] = DAT_080057dc[1] & 0xff80ffff;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e0 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "get_value_from_data_08009744",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void get_value_from_data_08009744(int *output_value, undefined4 input_value) {\n  undefined *data_pointer = PTR_DAT_08009764;\n  *(undefined4 *)PTR_DAT_08009764 = 0;\n  int result = calculate_value(input_value);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output_value = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "get_value_from_data_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "check_input_validity_08003640",
                "param_1": "input_array",
                "uVar1": "return_value",
                "PTR_": "input_array",
                "DAT_": "constant"
            },
            "code": "int check_input_validity_08003640(int *PTR_)\n{\n  int return_value;\n  if (PTR_ == NULL) {\n    return_value = 1;\n  }\n  else {\n    if (PTR_[15] == 0) {\n      PTR_[5] = 0;\n      do_nothing(PTR_);\n    }\n    PTR_[15] = 2;\n    perform_operation(PTR_[0], &PTR_[1]);\n    PTR_[15] = 1;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_input_validity_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_and_set_to_zero_08009980",
                "param_1": "starting_address",
                "param_2": "row_size",
                "param_3": "column_size",
                "puVar1": "memory_address",
                "uVar2": "memory_size_in_words",
                "puVar3": "current_address"
            },
            "code": "undefined4* allocate_memory_and_set_to_zero_08009980(undefined4 starting_address, int row_size, int column_size) {\n  undefined4* memory_address;\n  uint32_t memory_size_in_bytes;\n  undefined4* current_address;\n  \n  memory_size_in_bytes = row_size * column_size;\n  memory_address = (undefined4*)FUNC_08008af8(starting_address, memory_size_in_bytes);\n  if (memory_address == (undefined4*)0x0) {\n    return (undefined4*)0x0;\n  }\n  uint32_t memory_size_in_words = (memory_address[-1] & 0xfffffffc) - 4;\n  if (memory_size_in_words < 0x25) {\n    current_address = memory_address;\n    if (0x13 < memory_size_in_words) {\n      *memory_address = 0;\n      memory_address[1] = 0;\n      if (0x1b < memory_size_in_words) {\n        memory_address[2] = 0;\n        memory_address[3] = 0;\n        if (memory_size_in_words == 0x24) {\n          memory_address[4] = 0;\n          memory_address[5] = 0;\n          current_address = memory_address + 6;\n        }\n        else {\n          current_address = memory_address + 4;\n        }\n        *current_address = 0;\n        current_address[1] = 0;\n        current_address[2] = 0;\n        return memory_address;\n      }\n      current_address = memory_address + 2;\n    }\n    *current_address = 0;\n    current_address[1] = 0;\n    current_address[2] = 0;\n    return memory_address;\n  }\n  FUNC_08005d68(memory_address, 0);\n  return memory_address;\n}",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_to_zero_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)FUN_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)find_first_occurrence_of_byte_in_array(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080096e0",
                "FUN_080003f4",
                "FUN_080004c8",
                "FUN_080009ac",
                "FUN_0800119c",
                "FUN_080009c0",
                "FUN_0800901c",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_080097cc",
                "FUN_08009768",
                "FUN_08000158",
                "FUN_08000998",
                "FUN_08008ad4",
                "FUN_080011ec",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080009e8",
                "FUN_080079e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "first_half",
                "param_2": "second_half",
                "DAT_08000144": "global_variable",
                "PTR_FUN_0800014c": "function_pointer",
                "PTR_DAT_08000148": "global_pointer"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_08000134(uint64_t param_1, uint64_t param_2) {\n  if (DAT_08000144 != 0) {\n    param_1 = PTR_FUN_0800014c;\n    param_2 = PTR_DAT_08000148;\n  }\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "concatenate_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "call_two_functions_08005704",
                "FUN_0800157c": "call_first_function",
                "FUN_080017b4": "call_second_function"
            },
            "code": "void call_two_functions_08005704(void)\n{\n  call_first_function();\n  call_second_function();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "call_two_functions_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "decode_unsigned_integer_08000418",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "in_r12": "temp_8",
                "bVar8": "check_1",
                "bVar9": "check_2",
                "bVar10": "check_3"
            },
            "code": "ulonglong decode_unsigned_integer_08000418(uint input_1, undefined4 input_2, undefined4 input_3, uint input_4) {\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int temp_6;\n  uint temp_7;\n  uint temp_8;\n  bool check_1;\n  bool check_2;\n  bool check_3;\n  temp_5 = input_1 << 1;\n  check_2 = temp_5 == 0;\n  temp_1 = (uint)((input_1 & 0x80000000) != 0) << 0x1f;\n  temp_4 = (uint)((int)temp_5 >> 3) >> 1;\n  temp_3 = temp_1 | temp_4;\n  input_1 = input_1 << 0x1d;\n  if (!check_2) {\n    input_4 = temp_5 & 0xff000000;\n    check_2 = input_4 == 0;\n  }\n  if (!check_2) {\n    check_2 = input_4 == 0xff000000;\n  }\n  if (!check_2) {\n    return CONCAT44(temp_3,input_1) ^ 0x3800000000000000;\n  }\n  if ((temp_5 & 0xffffff) == 0) {\n    return CONCAT44(temp_3,input_1);\n  }\n  if (input_4 == 0xff000000) {\n    return CONCAT44(temp_3,input_1) | 0x8000000000000;\n  }\n  temp_2 = input_1;\n  temp_5 = temp_4;\n  if (temp_4 == 0) {\n    temp_2 = 0;\n    temp_5 = input_1;\n  }\n  temp_6 = count_leading_zeroes(temp_5);\n  if (temp_4 == 0) {\n    temp_6 = temp_6 + 0x20;\n  }\n  temp_7 = temp_6 - 0xb;\n  check_3 = SBORROW4(temp_7,0x20);\n  temp_4 = temp_6 - 0x2b;\n  check_1 = (int)temp_4 < 0;\n  check_2 = temp_4 == 0;\n  if ((int)temp_7 < 0x20) {\n    check_3 = SCARRY4(temp_4,0xc);\n    temp_6 = temp_6 + -0x1f;\n    check_1 = temp_6 < 0;\n    check_2 = temp_6 == 0;\n    temp_4 = temp_7;\n    if (!check_2 && check_1 == check_3) {\n      temp_2 = temp_5 << (temp_7 & 0xff);\n      temp_5 = temp_5 >> (0xcU - temp_6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (check_2 || check_1 != check_3) {\n    temp_8 = 0x20 - temp_4;\n  }\n  temp_5 = temp_5 << (temp_4 & 0xff);\n  if (check_2 || check_1 != check_3) {\n    temp_5 = temp_5 | temp_2 >> (temp_8 & 0xff);\n  }\n  if (check_2 || check_1 != check_3) {\n    temp_2 = temp_2 << (temp_4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp_7 < 0x381) {\n    return CONCAT44(temp_5 + (0x380 - temp_7) * 0x100000 | temp_1,temp_2);\n  }\n  temp_4 = ~(0x380 - temp_7);\n  if (0x1e < (int)temp_4) {\n    return CONCAT44(temp_3,temp_5 >> (temp_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  temp_6 = temp_4 - 0x13;\n  if (temp_6 == 0 || temp_6 < 0 != SCARRY4(temp_4 - 0x1f,0xc)) {\n    temp_4 = temp_4 + 1;\n    return CONCAT44(temp_1 | temp_5 >> (temp_4 & 0xff),temp_2 >> (temp_4 & 0xff) | temp_5 << (0x20 - temp_4 & 0xff));\n  }\n  return CONCAT44(temp_3,temp_2 >> (0x20 - (0xcU - temp_6) & 0xff) | temp_5 << (0xcU - temp_6 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_unsigned_integer_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_flag_08002ca8",
                "param_1": "flag_ptr",
                "param_2": "flag_value",
                "param_3": "param_3",
                "iVar1": "fun_result"
            },
            "code": "int check_flag_08002ca8(int *flag_ptr, uint flag_value, int param_3)\n{\n  int result = 0;\n  while (true) {\n    if ((*(uint *)(*flag_ptr + 0x14) & 0x40) == 0x40) {\n      return result;\n    }\n    if ((*(uint *)(*flag_ptr + 0x14) & 0x10) == 0x10) {\n      break;\n    }\n    int fun_result = 0;\n    if ((flag_value == 0) || ((fun_result = calculate_result(), flag_value < (uint)(fun_result - param_3)))) {\n      flag_ptr[0x10] = flag_ptr[0x10] | 0x20;\n      *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n      *(undefined *)(flag_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*flag_ptr + 0x14) = 0xffffffef;\n  flag_ptr[0x10] = 0;\n  flag_ptr[0xc] = 0;\n  *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n  *(undefined *)(flag_ptr + 0xf) = 0;\n  return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_flag_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "set_mode_08003a94",
                "param_1": "input_data",
                "param_2": "mode_data",
                "uVar1": "return_value",
                "uVar2": "mode",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int set_mode_08003a94(int *input_data, uint *mode_data) {\\n    int return_value;\\n    uint mode = *mode_data;\\n\\n    if (*(char *)(input_data + 0xf) == \"\\x01\") {\\n        return_value = 2;\\n    }\\n    else {\\n        *(char *)(input_data + 0xf) = \"\\x01\";\\n        *(char *)((int)input_data + 0x3d) = \"\\x02\";\\n        *(uint *)(*input_data + 8) = *(uint *)(*input_data + 8) & 0xffff0088;\\n\\n        if (mode == 0x40) {\\n            set_mode_08003a94_0x40(*input_data, mode_data[1], mode_data[3]);\\n            set_mode_08003a94(*input_data, 0x40);\\n        }\\n        else if (mode < 0x41) {\\n            if (mode == 0x10) {\\n                set_mode_08003a94(*input_data, 0x10);\\n            }\\n            else if (mode == 0) {\\n                set_mode_08003a94(*input_data, 0);\\n            }\\n            else if (mode == 0x20) {\\n                set_mode_08003a94(*input_data, 0x20);\\n            }\\n            else if (mode == 0x30) {\\n                set_mode_08003a94(*input_data, 0x30);\\n            }\\n        }\\n        else if (mode == 0x70) {\\n            set_mode_08003a94_0x70(*input_data, mode_data[2], mode_data[1], mode_data[3]);\\n            *(uint *)(*input_data + 8) = *(uint *)(*input_data + 8) & 0xffffff88 | 0x77;\\n        }\\n        else if (mode < 0x71) {\\n            if (mode == 0x50) {\\n                set_mode_08003a94_0x50(*input_data, mode_data[1], mode_data[3]);\\n                set_mode_08003a94(*input_data, 0x50);\\n            }\\n            else if (mode == 0x60) {\\n                set_mode_08003a94_0x60(*input_data, mode_data[1], mode_data[3]);\\n                set_mode_08003a94(*input_data, 0x60);\\n            }\\n        }\\n        else if (mode == 0x1000) {\\n            *(uint *)(*input_data + 8) = *(uint *)(*input_data + 8) & 0xfffffff8;\\n        }\\n        else if (mode == 0x2000) {\\n            set_mode_08003a94_0x2000(*input_data, mode_data[2], mode_data[1], mode_data[3]);\\n            *(uint *)(*input_data + 8) = *(uint *)(*input_data + 8) | 0x4000;\\n        }\\n\\n        *(char *)((int)input_data + 0x3d) = \"\\x01\";\\n        *(char *)(input_data + 0xf) = \"\\0\";\\n        return_value = 0;\\n    }\\n    return return_value;\\n}",
            "called": [
                "FUN_0800416a",
                "FUN_080040a0",
                "FUN_08004104",
                "FUN_080041a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "set_mode_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "update_param_with_flags_0800416a",
                "param_1": "param_address",
                "param_2": "flags",
                "*(uint *)(param_1 + 8)": "param_pointer",
                "*(uint *)(param_1 + 8) & 0xffffff8f | (uint)(param_2 | 7)": "new_value",
                "ushort": "flags",
                "uint": "unsigned_int"
            },
            "code": "void update_param_with_flags_0800416a(int param_address, ushort flags) {\n  uint* param_pointer = (uint*)(param_address + 8);\n  uint current_value = *param_pointer;\n  uint new_value = (current_value & 0xffffff8f) | (uint)(flags | 7);\n  *param_pointer = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_param_with_flags_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "set_data_and_call_functions_080055f4",
                "local_18": "arg1",
                "local_14": "arg2",
                "local_c": "arg3",
                "DAT_0800566c": "data_start_address",
                "DAT_08005670": "function_pointer",
                "PTR_080017c4": "set_arguments",
                "PTR_08001a80": "set_data"
            },
            "code": "void set_data_and_call_functions_080055f4(void)\n{\n  uint32_t flags = 0x20 | 0x4 | 0x8;\n  uint32_t* data_ptr = (uint32_t*)(DAT_0800566c + 0x18);\n  *data_ptr |= flags;\n  bool condition = (*data_ptr & 0x8) != 0;\n  PTR_08001a80(DAT_08005670, 0x1e, 0, condition);\n  uint32_t arg1 = 0x1e;\n  uint32_t arg2 = 1;\n  uint32_t arg3 = 2;\n  PTR_080017c4(DAT_08005670, &arg1, &arg2, &arg3);\n  return;\n}",
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_data_and_call_functions_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = FUN_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_application_080053b0",
                "iVar1": "result",
                "local_58": "zero_15",
                "local_54": "zero_16",
                "local_50": "zero_17",
                "local_4c": "zero_18",
                "local_48": "zero_19",
                "local_44": "buffer_size_3",
                "local_40": "zero_10",
                "local_3c": "buffer_size_2",
                "local_38": "zero_9",
                "local_34": "zero_8",
                "local_30": "zero_7",
                "local_2c": "zero_6",
                "local_28": "zero_5",
                "local_24": "zero_4",
                "local_20": "zero_2",
                "local_1c": "zero_3",
                "local_18": "buffer"
            },
            "code": "void initialize_application_080053b0(void)\n{\n    int result;\n    int buffer_size = 0x1000;\n    int unknown_variable = 0;\n    int zero = 0;\n    int one_hundred = 100;\n    int zero_2 = 0;\n    int zero_3 = 0;\n    int zero_4 = 0;\n    int zero_5 = 0;\n    int zero_6 = 0;\n    int zero_7 = 0;\n    int zero_8 = 0;\n    int zero_9 = 0;\n    int zero_10 = 0;\n    int zero_11 = 0;\n    int zero_12 = 0;\n    int zero_13 = 0;\n    int zero_14 = 0;\n    int buffer[4];\n\n    *PTR_DAT_080054f4 = DAT_080054f8;\n    *(PTR_DAT_080054f4 + 4) = 0x708;\n    *(PTR_DAT_080054f4 + 8) = 0;\n    *(PTR_DAT_080054f4 + 0xc) = one_hundred;\n    *(PTR_DAT_080054f4 + 0x10) = zero_2;\n    *(PTR_DAT_080054f4 + 0x14) = zero_3;\n    *(PTR_DAT_080054f4 + 0x18) = zero_4;\n    result = FUN_080035a4(PTR_DAT_080054f4);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_080054fc, 399);\n    }\n\n    result = FUN_08003a94(PTR_DAT_080054f4, buffer);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_080054fc, 0x194);\n    }\n\n    result = FUN_08003640(PTR_DAT_080054f4);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_080054fc, 0x198);\n    }\n\n    result = FUN_080042de(PTR_DAT_080054f4, &unknown_variable);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_080054fc, 0x19f);\n    }\n\n    int buffer_size_2 = 0x60;\n    result = FUN_08003908(PTR_DAT_080054f4, &buffer_size_2, zero_5);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_080054fc, 0x1ab);\n    }\n\n    result = FUN_08003908(PTR_DAT_080054f4, &buffer_size_2, 0xc);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_080054fc, 0x1b0);\n    }\n\n    int zero_15 = 0;\n    int zero_16 = 0;\n    int zero_17 = 0;\n    int zero_18 = 0;\n    int zero_19 = 0;\n    int buffer_size_3 = 0x2000;\n    result = FUN_0800422e(PTR_DAT_080054f4, &zero_15, &zero_16, &zero_17, &zero_18, &zero_19, &buffer_size_3, zero_11);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_080054fc, 0x1bc);\n    }\n\n    FUN_08005680(PTR_DAT_080054f4);\n}",
            "called": [
                "FUN_08003640",
                "FUN_08003a94",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_08003908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_application_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "convert_to_double_0800088a",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar1": "bit",
                "unaff_r4": "z",
                "uVar2": "temp",
                "uVar3": "y",
                "in_r12": "mask",
                "bVar4": "check",
                "result": "double_bits",
                "exponent_mask": "exponent_mask",
                "exponent_bias": "exponent_bias",
                "exponent": "exponent",
                "x": "x",
                "y": "y",
                "z": "z",
                "w": "w",
                "carry": "carry"
            },
            "code": "ulonglong convert_to_double_0800088a(uint32_t a, uint32_t b, uint32_t c, uint32_t d) {\n    uint32_t x, y, z, w;\n    uint32_t mask = 0x80000000;\n    uint32_t exponent_mask = 0x7ff00000;\n    uint32_t exponent_bias = 0x3ff;\n    uint32_t exponent = 0;\n    uint64_t result = 0;\n    \n    x = c;\n    y = d;\n    z = a;\n    w = b;\n    \n    uint32_t temp = x & w;\n    if ((z != x || (z & mask) != mask) && (temp == 0 || (temp & mask) == mask)) {\n      if ((z | (y << 12)) == 0) {\n        result = ((y ^ w) & mask) | exponent_mask;\n        return result << 32;\n      }\n    }\n    else if ((z & mask) == mask && temp == 0) {\n      if ((x | (y << 12)) == 0) {\n        result = (w & mask) | exponent_mask;\n        return result << 32;\n      }\n    }\n    else {\n      bool b = (z | (y << 1)) == 0;\n      if (!b) {\n        b = (x | (w << 1)) == 0;\n      }\n      if (!b) {\n        if (z == 0) {\n          uint32_t carry = y & mask;\n          do {\n            uint32_t bit = x & mask;\n            x <<= 1;\n            y = (y << 1) | (bit != 0);\n          } while ((y & 0x100000) == 0);\n          y |= carry;\n          if ((z & exponent_mask) != 0) {\n            exponent = ((z & ~exponent_mask) >> 20) - exponent_bias;\n            exponent += 32;\n            exponent = exponent << 52;\n            result = ((uint64_t)y << 32) | x;\n            result |= exponent;\n            return result;\n          }\n        }\n        uint32_t carry = w & mask;\n        do {\n          uint32_t bit = z & mask;\n          z <<= 1;\n          w = (w << 1) | (bit != 0);\n        } while ((w & 0x100000) == 0);\n        if ((x & exponent_mask) != 0) {\n          exponent = ((x & ~exponent_mask) >> 20) - exponent_bias;\n          exponent = exponent << 52;\n          result = ((uint64_t)y << 32) | x;\n          result |= exponent;\n          return result;\n        }\n      }\n      if ((z | (y << 1)) == 0) {\n        result = ((y ^ w) & mask) | exponent_mask;\n        return result << 32;\n      }\n      if ((x | (w << 1)) == 0) {\n        result = (w & mask) | exponent_mask;\n        return result << 32;\n      }\n    }\n    result = ((uint64_t)y << 32) | x;\n    result |= 0x7ff8000000000000;\n    return result;\n  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": false,
            "current_name": "convert_to_double_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "is_param_less_than_0x1000000_080016d0",
                "param_1": "param",
                "bVar1": "is_less_than",
                "DAT_08001710": "data_array",
                "FUN_08001618": "set_bits_in_DAT_08001710"
            },
            "code": "bool is_param_less_than_0x1000000_080016d0(int param){\n                    bool is_less_than = param - 1U < 0x1000000;\n                    if (is_less_than) {\n                        DAT_08001710[1] = param + -1;\n                        set_bits_in_DAT_08001710(0xffffffff,0xf);\n                        DAT_08001710[2] = 0;\n                        *DAT_08001710 = 7;\n                    }\n                    return !is_less_than;\n                }",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": false,
            "current_name": "is_param_less_than_0x1000000_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "decode_08001ccc",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "ptr_param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "data",
                "iVar2": "current_time_start",
                "cVar3": "c",
                "uVar4": "uVar4",
                "iVar5": "status",
                "uVar6": "result",
                "puVar7": "puVar7",
                "bVar8": "is_zero",
                "mask": "mask",
                "status": "status",
                "current_time_end": "current_time_end"
            },
            "code": "undefined4 decode_08001ccc(uint **ptr_param_1, undefined2 param_2, undefined2 param_3, undefined2 param_4, uint *ptr_param_5, undefined2 param_6, undefined4 param_7)\n{\n  uint current_time_start = get_current_time();\n  uint data = DAT_08001f64;\n  if (*(char *)((int)ptr_param_1 + 0x3d) == ' ') {\n    do {\n      uint mask = (data >> 0x10 & 0xff) == 1 ? ~(*ptr_param_1)[5] : ~(*ptr_param_1)[6];\n      uint uVar4 = data & mask & 0xffff;\n      bool is_zero = uVar4 == 0;\n      char c = is_zero ? 1 : 0;\n      if (!is_zero) {\n        c = '\\0';\n      }\n      if (c != '\\x01') {\n        uint status = 0;\n        goto LAB_08001d9c;\n      }\n      uint current_time_end = get_current_time();\n    } while ((current_time_end - current_time_start) < 0x1a);\n    ptr_param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)ptr_param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)ptr_param_1 + 0x3e) = 0;\n    *(undefined *)(ptr_param_1 + 0xf) = 0;\n    uint status = 3;\nLAB_08001d9c:\n    if (status == 0) {\n      if (*(char *)(ptr_param_1 + 0xf) == '\\x01') {\n        status = 2;\n      }\n      else {\n        *(undefined *)(ptr_param_1 + 0xf) = 1;\n        if ((**ptr_param_1 & 1) != 1) {\n          **ptr_param_1 = **ptr_param_1 | 1;\n        }\n        **ptr_param_1 = **ptr_param_1 & 0xfffff7ff;\n        *(undefined *)((int)ptr_param_1 + 0x3d) = 0x21;\n        *(undefined *)((int)ptr_param_1 + 0x3e) = 0x40;\n        ptr_param_1[0x10] = (uint *)0x0;\n        ptr_param_1[9] = ptr_param_5;\n        *(undefined2 *)((int)ptr_param_1 + 0x2a) = param_6;\n        ptr_param_1[0xb] = DAT_08001f68;\n        *(undefined2 *)(ptr_param_1 + 10) = *(undefined2 *)((int)ptr_param_1 + 0x2a);\n        uint result = FUN_08002640(ptr_param_1, param_2, param_3, param_4, param_7, current_time_start);\n        if (result == 0) {\n          while (*(short *)(ptr_param_1 + 10) != 0) {\n            uint inner_result = FUN_08002bb4(ptr_param_1, param_7, current_time_start);\n            if (inner_result != 0) {\n              if (ptr_param_1[0x10] == (uint *)0x4) {\n                **ptr_param_1 = **ptr_param_1 | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            uint *puVar7 = ptr_param_1[9];\n            ptr_param_1[9] = (uint *)((int)puVar7 + 1);\n            (*ptr_param_1)[4] = (uint)*(byte *)puVar7;\n            *(short *)(ptr_param_1 + 10) = *(short *)(ptr_param_1 + 10) + -1;\n            *(short *)((int)ptr_param_1 + 0x2a) = *(short *)((int)ptr_param_1 + 0x2a) + -1;\n            if ((((*ptr_param_1)[5] & 4) == 4) && (*(short *)(ptr_param_1 + 10) != 0)) {\n              puVar7 = ptr_param_1[9];\n              ptr_param_1[9] = (uint *)((int)puVar7 + 1);\n              (*ptr_param_1)[4] = (uint)*(byte *)puVar7;\n              *(short *)(ptr_param_1 + 10) = *(short *)(ptr_param_1 + 10) + -1;\n              *(short *)((int)ptr_param_1 + 0x2a) = *(short *)((int)ptr_param_1 + 0x2a) + -1;\n            }\n          }\n          uint inner_result = FUN_08002c2e(ptr_param_1, param_7, current_time_start);\n          if (inner_result == 0) {\n            **ptr_param_1 = **ptr_param_1 | 0x200;\n            *(undefined *)((int)ptr_param_1 + 0x3d) = 0x20;\n            *(undefined *)((int)ptr_param_1 + 0x3e) = 0;\n            *(undefined *)(ptr_param_1 + 0xf) = 0;\n            uint status = 0;\n          }\n          else if (ptr_param_1[0x10] == (uint *)0x4) {\n            **ptr_param_1 = **ptr_param_1 | 0x200;\n            uint status = 1;\n          }\n          else {\n            uint status = 3;\n          }\n        }\n        else if (ptr_param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(ptr_param_1 + 0xf) = 0;\n          uint status = 1;\n        }\n        else {\n          *(undefined *)(ptr_param_1 + 0xf) = 0;\n          uint status = 3;\n        }\n      }\n    }\n    else {\n      uint status = 2;\n    }\n  }\n  else {\n    uint status = 2;\n  }\n  return status;\n}",
            "called": [
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": false,
            "current_name": "decode_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "update_data_in_memory_0800157c",
                "PTR_DAT_0800159c": "data_pointer",
                "PTR_DAT_08001598": "byte_pointer"
            },
            "code": "void update_data_in_memory_0800157c(void)\n{\n  uint32_t *PTR_DAT_0800159c = (uint32_t *)PTR_DAT_0800159c;\n  uint8_t *PTR_DAT_08001598 = (uint8_t *)PTR_DAT_08001598;\n  uint32_t current_value = *PTR_DAT_0800159c;\n  uint8_t byte_value = *PTR_DAT_08001598;\n  uint32_t updated_value = current_value + (uint32_t)byte_value;\n  *PTR_DAT_0800159c = updated_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "update_data_in_memory_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_08004d78",
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_value_from_pointer_to_pointer_08005d14",
                "undefined4": "int",
                "PTR_PTR_DAT_08005d1c": "PTR_PTR_DAT_08005d1c",
                "*(undefined4 *)PTR_PTR_DAT_08005d1c": "*(int**)PTR_PTR_DAT_08005d1c"
            },
            "code": "int get_value_from_pointer_to_pointer_08005d14() {\n    int* pointer_to_pointer = *(undefined4 *)PTR_PTR_DAT_08005d1c;\n    int value = *pointer_to_pointer;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_to_pointer_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "update_register_080015b4",
                "param_1": "register_value",
                "DAT_080015f8": "register_ptr",
                "PTR_080015f8": "register_ptr",
                "*PTR_080015f8": "*register_ptr"
            },
            "code": "void update_register_080015b4(uint register_value) {\n    uint* DAT_080015f8 = (uint*)(DAT_080015f8 + 0xc);\n    uint mask = 0xf8ff;\n    uint shifted_value = (register_value & 7) << 8;\n    uint final_value = shifted_value | 0x5fa0000;\n    *PTR_080015f8 = (*PTR_080015f8 & mask) | final_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": false,
            "current_name": "update_register_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "*param_1": "*flags_ptr",
                "uint": "uint32_t",
                "flag_10": "flag_10",
                "flag_c": "flag_c"
            },
            "code": "void process_flags_080036f8(int *flags_ptr)\n{\n    uint32_t flag_10 = *(uint32_t *)(*flags_ptr + 0x10);\n    uint32_t flag_c = *(uint32_t *)(*flags_ptr + 0xc);\n    \n    if ((flag_10 & 2) && (flag_c & 2))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xfffffffd;\n        *(uint8_t *)(flags_ptr + 7) = 1;\n        \n        if ((*(uint32_t *)(*flags_ptr + 0x18) & 3) == 0)\n        {\n            do_nothing_08003c4a(flags_ptr);\n            do_nothing_08003c6e(flags_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flags_ptr);\n        }\n        \n        *(uint8_t *)(flags_ptr + 7) = 0;\n    }\n    \n    if ((flag_10 & 4) && (flag_c & 4))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xfffffffb;\n        *(uint8_t *)(flags_ptr + 7) = 2;\n        \n        if ((*(uint32_t *)(*flags_ptr + 0x18) & 0x300) == 0)\n        {\n            do_nothing_08003c4a(flags_ptr);\n            do_nothing_08003c6e(flags_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flags_ptr);\n        }\n        \n        *(uint8_t *)(flags_ptr + 7) = 0;\n    }\n    \n    if ((flag_10 & 8) && (flag_c & 8))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xfffffff7;\n        *(uint8_t *)(flags_ptr + 7) = 4;\n        \n        if ((*(uint32_t *)(*flags_ptr + 0x1c) & 3) == 0)\n        {\n            do_nothing_08003c4a(flags_ptr);\n            do_nothing_08003c6e(flags_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flags_ptr);\n        }\n        \n        *(uint8_t *)(flags_ptr + 7) = 0;\n    }\n    \n    if ((flag_10 & 0x10) && (flag_c & 0x10))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xffffffef;\n        *(uint8_t *)(flags_ptr + 7) = 8;\n        \n        if ((*(uint32_t *)(*flags_ptr + 0x1c) & 0x300) == 0)\n        {\n            do_nothing_08003c4a(flags_ptr);\n            do_nothing_08003c6e(flags_ptr);\n        }\n        else\n        {\n            do_nothing_08003c5c(flags_ptr);\n        }\n        \n        *(uint8_t *)(flags_ptr + 7) = 0;\n    }\n    \n    if ((flag_10 & 1) && (flag_c & 1))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xfffffffe;\n        FUN_08004f78(flags_ptr);\n    }\n    \n    if ((flag_10 & 0x80) && (flag_c & 0x80))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xffffff7f;\n        do_nothing_08004378(flags_ptr);\n    }\n    \n    if ((flag_10 & 0x40) && (flag_c & 0x40))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xffffffbf;\n        do_nothing_08003c80(flags_ptr);\n    }\n    \n    if ((flag_10 & 0x20) && (flag_c & 0x20))\n    {\n        *(uint32_t *)(*flags_ptr + 0x10) = 0xffffffdf;\n        do_nothing_08004366(flags_ptr);\n    }\n}\n",
            "called": [
                "FUN_08003c6e",
                "FUN_08003c4a",
                "FUN_08004378",
                "FUN_08003c80",
                "FUN_08004f78",
                "FUN_08004366",
                "FUN_08003c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "process_flags_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "update_data_at_address_080041a8",
                "param_1": "address",
                "param_2": "data_low",
                "param_3": "data_mid",
                "param_4": "data_high",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_data_at_address_080041a8(uint8_t *address, uint32_t data_low, uint32_t data_mid, uint32_t data_high, uint32_t mask)\n{\n  uint32_t *current_data = (uint32_t *)(address + 8);\n  *current_data = (data_low | (data_mid << 8) | data_high | (*current_data & 0xffff00ff)) & mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_data_at_address_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = FUN_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_data_buffer_08008ad4",
                "puVar1": "data_buffer",
                "PTR_PTR_DAT_08008ae8": "ptr_ptr_dat",
                "PTR_DAT_08008aec": "ptr_dat"
            },
            "code": "char* get_data_buffer_08008ad4(){\n  char* data_buffer = *(char **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34);\n  if (data_buffer == (char *)0x0) {\n    data_buffer = PTR_DAT_08008aec;\n  }\n  return data_buffer + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_data_buffer_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_end_of_string_080009e8",
                "in_CY": "current_character",
                "FUN_08000978": "execute_some_function"
            },
            "code": "bool is_end_of_string_080009e8(void)\\n{\\n  char current_character;\\n  execute_some_function();\\n  return current_character == \"\\0\";\\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "code": "void infinite_loop_08005674(void)\n{\n  while(true) {\n       /* Do nothing */\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_08005348",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "calculate_value_08009630",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "output_1",
                "param_6": "output_2",
                "iVar1": "result",
                "uVar2": "temp_5",
                "iVar3": "temp_3",
                "iVar4": "temp_4",
                "uVar5": "temp_8",
                "uVar6": "temp_1",
                "uVar7": "temp_10",
                "local_20": "temp_6",
                "local_1c": "temp_2"
            },
            "code": "int calculate_value_08009630(undefined4 input_1, undefined4 input_2, uint32_t input_3, uint32_t input_4, int *output_1, int *output_2)\n{\n  int result = FUN_080090c0(input_1, 1);\n  uint32_t temp_1 = (input_4 << 1) >> 0x15;\n  uint32_t temp_2 = input_4 & 0xfffff;\n  if (temp_1 != 0) {\n    temp_2 = temp_2 | 0x100000;\n  }\n  if (input_3 == 0) {\n    int temp_3 = FUN_080091e4(&temp_2);\n    int temp_4 = 1;\n    uint32_t temp_5 = temp_3 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint32_t *)(result + 0x14) = temp_2;\n  }\n  else {\n    uint32_t temp_6 = input_3;\n    uint32_t temp_7 = FUN_080091e4(&temp_6);\n    if (temp_7 == 0) {\n      *(uint32_t *)(result + 0x14) = temp_6;\n    }\n    else {\n      uint32_t temp_8 = temp_2 << (0x20 - temp_7 & 0xff);\n      temp_2 = temp_2 >> (temp_7 & 0xff);\n      *(uint32_t *)(result + 0x14) = temp_8 | temp_6;\n    }\n    int temp_9 = (temp_2 == 0) ? 1 : 2;\n    *(uint32_t *)(result + 0x18) = temp_2;\n    *(int *)(result + 0x10) = temp_9;\n  }\n  if (temp_1 == 0) {\n    *output_1 = temp_5 - 0x432;\n    uint64_t temp_10 = FUN_080091a4(*(undefined4 *)(result + temp_9 * 4 + 0x10));\n    *output_2 = (int)((uint64_t)temp_10 >> 0x20) * 0x20 - (int)temp_10;\n    return result;\n  }\n  *output_1 = (temp_1 - 0x433) + temp_5;\n  *output_2 = 0x35 - temp_5;\n  return result;\n}",
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_value_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "set_bits_in_uint_08004104",
                "param_1": "ptr_data",
                "param_2": "value_to_set",
                "param_3": "shift_amount",
                "*(uint *)(param_1 + 0x20)": "*ptr_data",
                "*(uint *)(param_1 + 0x18)": "mask",
                "*(uint *)(param_1 + 0x20) & 0xffffffef": "(*ptr_data & ~0x10)",
                "param_3 << 0xc | *(uint *)(param_1 + 0x18) & 0xffff0fff": "mask = (shift_amount << 12) | (mask & 0xFFFF0FFF)",
                "param_2 << 4 | *(uint *)(param_1 + 0x20) & 0xffffff5f": "value_to_set = (value_to_set << 4) | (*ptr_data & 0xFFFFFF5F)"
            },
            "code": "void set_bits_in_uint_08004104(uint *ptr_data, uint mask, uint value_to_set, uint shift_amount) {\n    *ptr_data = (*ptr_data & ~mask) | ((value_to_set << shift_amount) & mask);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "is_end_of_input_08000ff4",
                "in_CY": "current_char",
                "FUN_08000fd0": "execute_input_processing"
            },
            "code": "bool is_end_of_input_08000ff4(void)\n{\n  char current_char;\n  execute_input_processing();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "initialize_pointer_data_08005714",
                "FUN_080036f8": "initialize_pointer",
                "PTR_DAT_08005724": "PTR_DATA"
            },
            "code": "void initialize_pointer_data_08005714(void)\n{\n  initialize_pointer(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "initialize_pointer_data_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "param_1": "param",
                "iVar1": "offset",
                "puVar2": "ptr",
                "iVar3": "leading_zeroes",
                "uVar4": "word"
            },
            "code": "int find_first_set_bit_08005e40(uint n) {\n    int count = 0;\n    while (n > 0) {\n        n <<= 1;\n        count++;\n    }\n    return 32 - count;\n}\n\nint find_first_set_bit_08005e40(uint param) {\n    uint *ptr = (uint *)(param & 0xfffffffc);\n    int offset = -(param & 3);\n    uint word = *ptr;\n    if ((param & 3) != 0) {\n        word |= 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n    }\n    while (true) {\n        ptr++;\n        word = word + 0xfefefeff & ~word & 0x80808080;\n        if (word != 0) {\n            break;\n        }\n        word = *ptr;\n        offset += 4;\n    }\n    int leading_zeroes = find_first_set_bit_08005e40(word & -word);\n    return offset + (0x1fU - leading_zeroes >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20_08005d20",
                "puVar1": "data_ptr",
                "iVar2": "i",
                "ppcVar3": "function_ptrs_2",
                "iVar4": "num_functions_2"
            },
            "code": "void execute_functions_08005d20_08005d20(void)\n{\n  int num_functions = (int)PTR_DAT_08005d58 - (int)PTR_DAT_08005d5c >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **function_ptrs = (code **)PTR_DAT_08005d5c;\n    do {\n      i++;\n      (**function_ptrs)();\n      function_ptrs++;\n    } while (num_functions != i);\n  }\n  code **function_ptrs_2 = (code **)PTR_DAT_08005d64;\n  undefined *data_ptr = PTR_DAT_08005d60;\n  do_nothing_08009e68();\n  int num_functions_2 = (int)data_ptr - (int)function_ptrs_2 >> 2;\n  if (num_functions_2 != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**function_ptrs_2)();\n      function_ptrs_2++;\n    } while (num_functions_2 != i);\n  }\n  return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "execute_functions_08005d20_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_param_08001a80",
                "param_1": "memory_address",
                "param_2": "value",
                "param_3": "flag",
                "uint": "unsigned int"
            },
            "code": "void set_param_08001a80(int memory_address, unsigned short value, char flag) {\n  if (flag == '\\0') {\n    *(unsigned int *)(memory_address + 0x10) = (unsigned int)value << 0x10;\n  }\n  else {\n    *(unsigned int *)(memory_address + 0x10) = (unsigned int)value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_param_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar1": "result",
                "uVar2": "uVar2",
                "uVar3": "uVar3",
                "uVar4": "uVar4",
                "uVar5": "uVar5",
                "uVar6": "uVar6"
            },
            "code": "uint calculate_result_08005838(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  int difference;\n  uint result;\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint64_t uVar6;\n  \n  uVar6 = ((uint64_t)DAT_080059bc << 32) | DAT_080059b8;\n  uVar3 = input_4 & 0x7fffffff;\n  if ((DAT_080059e8 < (uVar3 | (-input_3 | input_3) >> 0x1f)) || (uVar4 = input_2 & 0x7fffffff, DAT_080059e8 < (uVar4 | (-input_1 | input_1) >> 0x1f))) {\n    result = FUNC_0800015c(input_3, input_4, input_1, input_2);\n    return result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    result = FUNC_080059f0();\n    return result;\n  }\n  uVar2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((uVar4 | input_1) == 0) {\n    if (uVar2 == 2) {\n      return DAT_080059b0;\n    }\n    result = DAT_080059a0;\n    if (uVar2 != 3) {\n      return input_1;\n    }\n  }\n  else {\n    if ((uVar3 | input_3) != 0) {\n      if (uVar3 == DAT_080059e8) {\n        if (uVar4 == uVar3) {\n          if (uVar2 == 2) {\n            return DAT_080059e0;\n          }\n          if (uVar2 == 3) {\n            return DAT_080059d8;\n          }\n          if (uVar2 == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (uVar2 == 2) {\n          return DAT_080059b0;\n        }\n        if (uVar2 == 3) {\n          return DAT_080059a0;\n        }\n        if (uVar2 == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (uVar4 != DAT_080059e8) {\n        difference = (int)(uVar4 - uVar3) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            uVar6 = 0;\n          }\n          else {\n            FUNC_0800071c(input_1, input_2, input_3, input_4, input_4);\n            do_nothing_08005d0c();\n            uVar6 = FUNC_080059f0();\n          }\n        }\n        uVar1 = (uint)uVar6;\n        uVar4 = (uint)((uint64_t)uVar6 >> 0x20);\n        if (uVar2 == 1) {\n          return uVar1;\n        }\n        if (uVar2 == 2) {\n          uVar6 = ((uint64_t)uVar4 << 32) | uVar1;\n          uVar1 = (uint)FUNC_08000158(uVar6, DAT_080059a8, DAT_080059ac);\n          uVar4 = (uint)((uint64_t)FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)uVar6, (int)((uint64_t)uVar6 >> 0x20)) >> 0x20);\n          return uVar4;\n        }\n        if (uVar2 == 0) {\n          return uVar1;\n        }\n        uVar6 = ((uint64_t)uVar4 << 32) | uVar1;\n        uVar4 = (uint)FUNC_08000158((int)uVar6, (int)((uint64_t)uVar6 >> 0x20), DAT_080059b0, DAT_080059b4);\n        return uVar4;\n      }\n    }\n    uVar4 = DAT_080059c0;\n    if (-1 < (int)input_2) {\n      uVar4 = DAT_080059b8;\n    }\n  }\n  return uVar4;\n}",
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_result_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "do_nothing_with_ptr_data_080090a8",
                "PTR_DAT_080090b0": "PTR_DATA"
            },
            "code": "void do_nothing_with_ptr_data_080090a8(void)\n{\n    do_nothing(PTR_DAT_080090b0);\n    return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_ptr_data_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "initialize_app_08004e74",
                "param_1": "input_param",
                "uVar1": "result",
                "PTR_DAT_08004ea0": "data_structure_pointer"
            },
            "code": "int initialize_app_08004e74(int input_param)\n{\n  int result;\n  if (*(int *)PTR_DAT_08004ea0 == 0) {\n    result = initialize_data_structures(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_app_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "convert_to_float_080096e0",
                "param_1": "integer_part",
                "param_2": "fraction_part",
                "param_3": "exponent",
                "param_4": "sign_bit",
                "iVar1": "decimal_point",
                "uVar3": "absolute_fraction_part",
                "uVar4": "result",
                "DAT_08009740": "decimal_point",
                "DAT_0800973c": "sign_bit",
                "iVar2": "exponent_adjustment"
            },
            "code": "uint32_t convert_to_float_080096e0(uint32_t integer_part, uint32_t fraction_part, int *exponent, uint32_t DAT_0800973c) {\n    int DAT_08009740 = 0x100;\n    uint32_t result = 0;\n    uint32_t absolute_fraction_part = fraction_part & 0x7fffffff;\n    *exponent = 0;\n    if (((int)absolute_fraction_part <= DAT_08009740) && ((absolute_fraction_part | integer_part) != 0)) {\n        if (absolute_fraction_part < 0x100000) {\n            result = convert_integer_to_float(integer_part, fraction_part, 0, 0x0804973c, DAT_0800973c);\n            *exponent = -54;\n            absolute_fraction_part = (uint32_t)((uint64_t)result >> 32) & 0x7fffffff;\n        }\n        integer_part = (uint32_t)result;\n        fraction_part = (uint32_t)((uint64_t)result >> 32) & 0x800fffff | 0x3fe00000;\n        *exponent = ((int)absolute_fraction_part >> 20) - 1022 + *exponent;\n    }\n    return ((uint64_t)fraction_part << 32) | integer_part;\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "convert_to_float_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "get_value_at_index_and_swap_0800910c",
                "param_1": "array_ptr",
                "param_2": "index_ptr",
                "iVar1": "array_start_ptr",
                "*param_2": "value_at_index"
            },
            "code": "void get_value_at_index_and_swap_0800910c(int array_ptr, int *index_ptr) {\n  if (index_ptr != NULL) {\n    int array_start_ptr = *(int *)(array_ptr + 0x4c);\n    int value_at_index = *(int *)(array_start_ptr + index_ptr[1] * 4);\n    *index_ptr = *(int *)(array_start_ptr + index_ptr[1] * 4);\n    *(int **)(array_start_ptr + index_ptr[1] * 4) = index_ptr;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "get_value_at_index_and_swap_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "initialize_game_board_080052a0",
                "local_44": "row_start",
                "local_40": "column_start",
                "local_3c": "column_increment",
                "local_38": "row_counter",
                "local_34": "column_counter",
                "local_30": "board_size",
                "local_2c": "board_limit",
                "local_28": "board_counter",
                "local_20": "row_size",
                "local_14": "column_size",
                "local_10": "row_limit",
                "local_c": "column_limit",
                "iVar2": "function_return_value",
                "uVar3": "random_number",
                "lVar1": "multiplication_result"
            },
            "code": "void initialize_game_board_080052a0(void)\n{\n  longlong multiplication_result;\n  int function_return_value;\n  ulonglong random_number;\n  undefined4 board_size = 1;\n  undefined4 board_limit = 0x10000;\n  undefined4 board_counter = 0;\n  undefined4 row_size = 1;\n  undefined4 column_size = 2;\n  undefined4 row_limit = 0x10000;\n  undefined4 column_limit = 0x1c0000;\n  function_return_value = check_board_size(&board_size);\n  if (function_return_value != 0) {\n    print_error_message(\"Error: Invalid board size\", 0x151);\n  }\n  undefined4 row_start = 0xf;\n  undefined4 column_start = 2;\n  undefined4 column_increment = 0x80;\n  undefined4 row_counter = 0;\n  undefined4 column_counter = 0;\n  function_return_value = initialize_board(&row_start, 2);\n  if (function_return_value != 0) {\n    print_error_message(\"Error: Failed to initialize board\", 0x15e);\n  }\n  random_number = generate_random_number();\n  multiplication_result = (ulonglong)DAT_08005344 * (random_number & 0xffffffff);\n  set_board_size((uint)((ulonglong)multiplication_result >> 0x26),(int)(random_number >> 0x20),(int)multiplication_result);\n  set_board_value(4);\n  set_board_position(0xffffffff,0,0);\n  return;\n}",
            "called": [
                "FUN_08002d98",
                "FUN_0800177c",
                "FUN_08001762",
                "FUN_08005674",
                "FUN_08003260",
                "FUN_0800172a",
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_game_board_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_hash_08009120",
                "param_1": "num_items",
                "param_2": "data",
                "param_3": "base",
                "param_4": "hash_init",
                "puVar1": "result",
                "uVar2": "product_high",
                "iVar3": "num_words",
                "puVar4": "words",
                "iVar5": "new_num_words",
                "FUN_080090c0": "allocate_and_copy",
                "data_4c": "num_items"
            },
            "code": "undefined4 * calculate_hash_08009120(int num_items, undefined4 *data, int base, uint hash_init)\n{\n    undefined4 *result;\n    uint carryover = 0;\n    int num_words = data[4];\n    uint *words = data + 5;\n    for (int i = 0; i < num_words; i++)\n    {\n        uint word = *(words + i);\n        uint product_low = base * (word & 0xffff);\n        uint product_high = base * (word >> 0x10) + (carryover >> 0x10);\n        uint sum = (product_low & 0xffff) + (product_high & 0xffff);\n        carryover = (product_low >> 0x10) + (product_high >> 0x10) + (sum >> 0x10);\n        *(words + i) = (sum & 0xffff) | (carryover << 0x10);\n    }\n    result = data;\n    if (carryover != 0)\n    {\n        int new_num_words = num_words + 1;\n        if ((int)data[2] <= num_words)\n        {\n            result = (undefined4 *)allocate_and_copy(data[1] + 1, data + 3, (data[4] + 2) * 4);\n            int data_4c = *(int *)(num_items + 0x4c);\n            *data = *(undefined4 *)(data_4c + data[1] * 4);\n            *(undefined4 **)(data_4c + data[1] * 4) = data;\n        }\n        *(words + num_words + 1) = carryover;\n        data[4] = new_num_words;\n    }\n    return result;\n}",
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "reverse_copy_08001084",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr_copy",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr_copy",
                "uVar4": "size_minus_16",
                "uVar5": "size_mod_4_plus_12",
                "bVar6": "condition"
            },
            "code": "undefined4 *reverse_copy_08001084(undefined4 *dest, undefined4 *src, uint32_t size) {\n  undefined4 *dest_ptr = dest;\n  uint32_t size_mod_4 = (uint32_t)src | (uint32_t)dest & 3;\n  if (size_mod_4 != 0) {\n    if (size < 8) {\n      uint32_t size_mod_4_minus_4 = size - 4;\n      if (size_mod_4_minus_4 > 3) {\n        do {\n          *dest_ptr = *src;\n          dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n          src = (undefined4 *)((int)src + 1);\n          size_mod_4_minus_4--;\n        } while (size_mod_4_minus_4 > 3);\n        *(undefined *)(undefined4 *)((int)dest_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)src + 1);\n        *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)src + 2);\n        *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)src + 3);\n        return dest;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint32_t)src & 3) != 0) && (((uint32_t)dest & 3) != 0)) {\n      uint32_t size_mod_4_minus_dest_mod_4 = 4 - ((uint32_t)dest & 3);\n      size = size - size_mod_4_minus_dest_mod_4;\n      undefined4 *dest_ptr_copy = dest;\n      undefined4 *src_ptr_copy = src;\n      if (((uint32_t)dest & 1) != 0) {\n        src_ptr_copy = (undefined4 *)((int)src + 1);\n        dest_ptr_copy = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      dest_ptr = dest_ptr_copy;\n      src = src_ptr_copy;\n      if ((size_mod_4_minus_dest_mod_4 & 2) != 0) {\n        src = (undefined4 *)((int)src_ptr_copy + 2);\n        dest_ptr = (undefined4 *)((int)dest_ptr_copy + 2);\n        *(undefined2 *)dest_ptr_copy = *(undefined2 *)src_ptr_copy;\n      }\n    }\n  }\n  while (size > 63) {\n    *dest_ptr = *src;\n    dest_ptr[1] = src[1];\n    dest_ptr[2] = src[2];\n    dest_ptr[3] = src[3];\n    dest_ptr[4] = src[4];\n    dest_ptr[5] = src[5];\n    dest_ptr[6] = src[6];\n    dest_ptr[7] = src[7];\n    dest_ptr[8] = src[8];\n    dest_ptr[9] = src[9];\n    dest_ptr[10] = src[10];\n    dest_ptr[11] = src[11];\n    dest_ptr[12] = src[12];\n    dest_ptr[13] = src[13];\n    dest_ptr[14] = src[14];\n    dest_ptr[15] = src[15];\n    dest_ptr = dest_ptr + 16;\n    src = src + 16;\n    size = size - 64;\n  }\n  uint32_t size_minus_16 = size - 16;\n  if (size_minus_16 > 0xffffffcf) {\n    do {\n      *dest_ptr = *src;\n      dest_ptr[1] = src[1];\n      dest_ptr[2] = src[2];\n      dest_ptr[3] = src[3];\n      dest_ptr = dest_ptr + 4;\n      src = src + 4;\n      size_minus_16 = size_minus_16 - 16;\n    } while (size_minus_16 > 0xfffffff);\n  }\n  uint32_t size_mod_4_plus_12 = size_minus_16 + 12;\n  undefined4 *dest_ptr_copy = dest_ptr;\n  undefined4 *src_ptr_copy = src;\n  if (size_mod_4_plus_12 > 0xfffffff3) {\n    do {\n      src = src_ptr_copy + 1;\n      *dest_ptr_copy = *src_ptr_copy;\n      size_mod_4_plus_12 = size_mod_4_plus_12 - 4;\n      dest_ptr = dest_ptr_copy + 1;\n      dest_ptr_copy = dest_ptr_copy + 1;\n      src_ptr_copy = src;\n    } while (size_mod_4_plus_12 > 3);\n  }\nLAB_08001108:\n  if (size_mod_4_plus_12 != 0) {\n    dest_ptr_copy = dest_ptr;\n    src_ptr_copy = src;\n    if ((size_mod_4_plus_12 & 1) != 0) {\n      src_ptr_copy = (undefined4 *)((int)src + 1);\n      dest_ptr_copy = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = *(undefined *)src;\n    }\n    if ((size_mod_4_plus_12 & 2) != 0) {\n      *(undefined2 *)dest_ptr_copy = *(undefined2 *)src_ptr_copy;\n    }\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_08009120",
                "FUN_080079e8",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "reverse_copy_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "check_param_value_08005680",
                "*param_1": "*value_ptr",
                "local_18": "target_value",
                "local_14": "num_attempts",
                "local_c": "max_attempts",
                "DAT_080056b4": "target_value",
                "DAT_080056b8": "0x5608",
                "FUN_080017c4": "send_message"
            },
            "code": "void check_param_value_08005680(int *value_ptr)\n{\n    int DAT_080056b4 = 1337;\n    int num_attempts = 2;\n    int max_attempts = 2;\n    if (*value_ptr == DAT_080056b4)\n    {\n        send_message(DAT_080056b8, &DAT_080056b4);\n    }\n    return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_param_value_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "update_param_08003260",
                "param_1": "param_array",
                "param_2": "param_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "value",
                "uVar4": "return_value",
                "flags": "*DAT_08003430"
            },
            "code": "uint32_t update_param_08003260(uint32_t *param_array, uint32_t param_size) {\n    uint32_t flags = *DAT_08003430;\n\n    if ((flags & 7) < param_size && param_size != (flags & 7)) {\n        return 1;\n    }\n\n    if ((param_array[0] & 2) != 0) {\n        DAT_08003434[1] = (param_array[2] | (DAT_08003434[1] & 0xffffff0f));\n    }\n\n    if ((param_array[0] & 1) == 0) {\n        while (param_size < (flags & 7) && param_size != (flags & 7)) {\n            *DAT_08003430 = (param_size | (flags & 0xfffffff8));\n        }\n\n        if ((param_array[0] & 4) != 0) {\n            DAT_08003434[1] = (param_array[3] | (DAT_08003434[1] & 0xfffff8ff));\n        }\n\n        if ((param_array[0] & 8) != 0) {\n            DAT_08003434[1] = ((param_array[4] << 3) | (DAT_08003434[1] & 0xffffc7ff));\n        }\n\n        uint32_t value = FUN_08003440();\n        *(uint32_t *)PTR_DAT_0800343c = value >> PTR_DAT_08003438[DAT_08003434[1] >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        return 0;\n    }\n\n    if (param_array[1] == 1) {\n        if ((*DAT_08003434 & 0x20000) == 0) {\n            return 1;\n        }\n    }\n    else if (param_array[1] != 2 && ((*DAT_08003434 & 2) == 0)) {\n        return 1;\n    }\n\n    DAT_08003434[1] = (param_array[1] | (DAT_08003434[1] & 0xfffffffc));\n    uint32_t start_time = FUN_080015a0();\n\n    if (param_array[1] == 1) {\n        while ((DAT_08003434[1] & 0xc) != 4) {\n            uint32_t current_time = FUN_080015a0();\n            if ((current_time - start_time) >= 0x1389) {\n                return 3;\n            }\n        }\n    }\n    else if (param_array[1] == 2) {\n        while ((DAT_08003434[1] & 0xc) != 8) {\n            uint32_t current_time = FUN_080015a0();\n            if ((current_time - start_time) >= 0x1389) {\n                return 3;\n            }\n        }\n    }\n    else {\n        while ((DAT_08003434[1] & 0xc) != 0) {\n            uint32_t current_time = FUN_080015a0();\n            if ((current_time - start_time) >= 0x1389) {\n                return 3;\n            }\n        }\n    }\n\n    return 0;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08003440",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "update_param_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_value_08001ab0",
                "param_1": "input",
                "uVar1": "value",
                "cVar2": "is_quotient_valid",
                "uVar3": "result",
                "uVar4": "calculated_value",
                "bVar5": "is_valid",
                "DAT_08001ca4": "max_value",
                "DAT_08001cac": "divisor_for_large_input",
                "DAT_08001ca8": "divisor_for_small_input"
            },
            "code": "uint32_t calculate_value_08001ab0(uint32_t **input)\\n{\\n    uint32_t result = 0;\\n    if (input == NULL)\\n    {\\n        result = 1;\\n    }\\n    else\\n    {\\n        if (*(char *)((int)input + 0x3d) == \"\\0\")\\n        {\\n            *(undefined *)(input + 0xf) = 0;\\n            do_nothing(input);\\n        }\\n        *(undefined *)((int)input + 0x3d) = 0x24;\\n        **input &= 0xfffffffe;\\n        uint32_t value = get_random_value();\\n        uint32_t DAT_08001ca4 = (DAT_08001ca4 < input[1]) ? DAT_08001cac : DAT_08001ca8;\\n        bool is_valid = (value <= DAT_08001ca4);\\n        if (!is_valid)\\n        {\\n            result = 1;\\n        }\\n        else\\n        {\\n            uint32_t calculated_value = (uint32_t)(((uint64_t)DAT_08001cb0 * (uint64_t)value) >> 0x32);\\n            (*input)[1] = calculated_value;\\n            if (DAT_08001ca4 < input[1])\\n            {\\n                calculated_value = (uint32_t)(((uint64_t)DAT_08001cb4 * (uint64_t)(calculated_value * 300)) >> 0x26);\\n            }\\n            (*input)[8] = calculated_value + 1;\\n            if (DAT_08001ca4 < input[1])\\n            {\\n                uint32_t divisor = (input[2] == NULL) ? (uint32_t)((int)input[1] * 3) : (uint32_t)((int)input[1] * 0x19);\\n                uint32_t quotient = (value - 1) / divisor + 1;\\n                quotient = (quotient == 0) ? 1 : quotient;\\n                bool is_quotient_valid = (quotient != 0);\\n                if (!is_quotient_valid)\\n                {\\n                    result = 1;\\n                }\\n                else\\n                {\\n                    uint32_t flag = (input[2] == NULL) ? (quotient | 0x8000) : (quotient | 0xc000);\\n                    (*input)[7] = flag;\\n                }\\n            }\\n            else\\n            {\\n                uint32_t quotient = (value - 1) / ((uint32_t)input[1] << 1) + 1;\\n                quotient = (quotient < 4) ? 4 : quotient;\\n                (*input)[7] = quotient;\\n            }\\n            **input = (uint32_t)input[8] | (uint32_t)input[7];\\n            (*input)[2] = (uint32_t)input[3] | (uint32_t)input[4];\\n            (*input)[3] = (uint32_t)input[6] | (uint32_t)input[5];\\n            **input |= 1;\\n            input[0x10] = NULL;\\n            *(undefined *)((int)input + 0x3d) = 0x20;\\n            input[0xc] = NULL;\\n            *(undefined *)((int)input + 0x3e) = 0;\\n        }\\n    }\\n    return result;\\n}",
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": false,
            "current_name": "calculate_value_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "calculate_shifted_value_08003540",
                "uVar1": "shifted_value",
                "PTR_DAT_08003564": "pointer_array",
                "DAT_08003560": "data_array"
            },
            "code": "unsigned int calculate_shifted_value_08003540(void)\n{\n  unsigned int shifted_value;\n  shifted_value = get_initial_value();\n  unsigned int index = *(unsigned int *)(DAT_08003560 + 4) >> 0xb & 7;\n  unsigned int shift_amount = PTR_DAT_08003564[index];\n  return shifted_value >> shift_amount;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "set_flag_and_value_08009244",
                "param_1": "flag",
                "param_2": "value",
                "iVar1": "result"
            },
            "code": "void set_flag_and_value_08009244(int flag, int value)\n{\n  int result = FUN_080090c0(flag, 1);\n  *(int *)(result + 0x10) = 1;\n  *(int *)(result + 0x14) = value;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "set_flag_and_value_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "send_software_interrupt_08004e6c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void send_software_interrupt_08004e6c(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "send_software_interrupt_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "calculate_result_08001762",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_080016d0": "perform_calculation"
            },
            "code": "int32_t calculate_result_08001762(int32_t input_value) {\n  int32_t result;\n  result = perform_calculation(input_value);\n  return result;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "calculate_result_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "reverse_copy_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_word",
                "cVar1": "current_char"
            },
            "code": "void reverse_copy_08009768(uint *destination, uint *source, uint size)\n{\n  char current_char;\n  uint *dest_ptr;\n  uint *src_ptr;\n  uint current_word;\n  \n  if (((uint)destination | (uint)source) & 3) != 0 || size <= 3) {\n    goto copy_byte_by_byte;\n  }\n  \n  while (size > 3) {\n    src_ptr = source + 1;\n    current_word = *source;\n    destination = destination + 1;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n      goto copy_byte_by_byte;\n    }\n    size = size - 4;\n    *destination = current_word;\n    source = src_ptr;\n  }\n  \n  while (size != 0) {\n    current_char = *(char *)source;\n    *(char *)destination = current_char;\n    destination = (uint *)((int)destination + 1);\n    size = size - 1;\n    if (current_char == '\\0') {\n      break;\n    }\n    source = (uint *)((int)source + 1);\n  }\n  \n  while (size != 0) {\n    dest_ptr = destination + 1;\n    *(char *)destination = '\\0';\n    destination = dest_ptr;\n    size = size - 1;\n  }\n  \n  return;\n\n  copy_byte_by_byte:\n  while (size != 0) {\n    current_char = *(char *)source;\n    *(char *)destination = current_char;\n    destination = (uint *)((int)destination + 1);\n    size = size - 1;\n    if (current_char == '\\0') {\n      break;\n    }\n    source = (uint *)((int)source + 1);\n  }\n  \n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "local_c": "data_value",
                "DAT_0800409c": "CONSTANT_DATA_PTR",
                "iVar1": "data1",
                "iVar2": "data2"
            },
            "code": "void update_data_08003ff8(int data_ptr, int *data_array){\n  int data_mask = 0xffffefff;\n  uint data_value = *(uint *)(data_ptr + 4);\n  int data1 = *data_array;\n  int data2 = data_array[2];\n  if (data_ptr == DAT_0800409c) {\n    data_value = data_array[5] << 6 | data_value & 0xffffbfff;\n  }\n  *(uint *)(data_ptr + 4) = data_value;\n  *(uint *)(data_ptr + 0x1c) = data1 << 8 | *(uint *)(data_ptr + 0x1c) & 0xffff8cff;\n  *(int *)(data_ptr + 0x40) = data_array[1];\n  *(uint *)(data_ptr + 0x20) = data2 << 0xc | *(uint *)(data_ptr + 0x20) & 0xffffdfff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "process_data_08004ea4",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "param_4": "flag",
                "PTR_DAT_08004ee4": "func_ptr_data",
                "PTR_DAT_08004ee0": "func_ptr"
            },
            "code": "void process_data_08004ea4(void* data, void* buffer, uint32_t buffer_size, uint16_t flag) {\n  call_function_with_args(PTR_DAT_08004ee4, data, buffer, 1, buffer_size, flag, *(uint32_t*)PTR_DAT_08004ee0);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "set_flags_080040a0",
                "param_1": "base_address",
                "param_2": "flag_value",
                "param_3": "data_value",
                "uVar1": "old_flag"
            },
            "code": "void set_flags_080040a0(int base_address, uint32_t flag_value, int data_value) {\n    uint32_t old_flag = *(uint32_t *)(base_address + 0x20);\n    *(uint32_t *)(base_address + 0x20) = *(uint32_t *)(base_address + 0x20) & 0xfffffffe;\n    *(uint32_t *)(base_address + 0x18) = data_value << 4 | *(uint32_t *)(base_address + 0x18) & 0xffffff0f;\n    *(uint32_t *)(base_address + 0x20) = flag_value | old_flag & 0xfffffff5;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_flags_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dwords_dest",
                "puVar2": "dwords_src",
                "iVar3": "i",
                "puVar4": "ptr_dest",
                "puVar5": "ptr_src",
                "uVar6": "temp_size",
                "uVar7": "temp_size2"
            },
            "code": "void reverse_copy_08009a18(uint8_t *dest, uint8_t *src, uint32_t size) {\n  if (dest >= src && dest < src + size) {\n    src += size;\n    dest += size;\n    while (size--) {\n      *(--dest) = *(--src);\n    }\n  }\n  else {\n    uint32_t i;\n    if (size > 15) {\n      if ((uintptr_t)dest % 4 == (uintptr_t)src % 4) {\n        while ((uintptr_t)src % 4) {\n          *(--dest) = *(--src);\n          size--;\n        }\n        uint32_t *dwords_dest = (uint32_t *)dest;\n        uint32_t *dwords_src = (uint32_t *)src;\n        i = size >> 4;\n        while (i--) {\n          dwords_dest -= 4;\n          dwords_src -= 4;\n          dwords_dest[3] = dwords_src[3];\n          dwords_dest[2] = dwords_src[2];\n          dwords_dest[1] = dwords_src[1];\n          dwords_dest[0] = dwords_src[0];\n        }\n        size &= 0xF;\n        dest = (uint8_t *)dwords_dest;\n        src = (uint8_t *)dwords_src;\n      }\n    }\n    for (i = 0; i < size; i++) {\n      dest[i] = src[i];\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_float_to_int_0800119c",
                "param_1": "float_value",
                "param_2": "float_bits",
                "uVar1": "mantissa",
                "iVar2": "shifted_value",
                "uVar3": "exponent",
                "shift_amount": "shift_amount",
                "sign_bit": "sign_bit"
            },
            "code": "uint convert_float_to_int_0800119c(uint float_value,uint float_bits){\n  uint shift_amount;\n  int shifted_value;\n  uint sign_bit;\n  \n  shifted_value = float_bits * 2 + 0x200000;\n  if (float_bits * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = shifted_value >> 0x15;\n    uint exponent = -shift_amount - 0x3e1;\n    if (shift_amount < 0xfffffc20 && exponent != 0) {\n      uint mantissa = (float_bits << 0xb | 0x80000000 | float_value >> 0x15) >> (exponent & 0xff);\n      sign_bit = (float_bits & 0x80000000) != 0 ? -mantissa : mantissa;\n      return sign_bit;\n    }\n  }\n  else if ((float_value | float_bits << 0xc) != 0) {\n    return 0;\n  }\n  float_bits = float_bits & 0x80000000;\n  if (float_bits == 0) {\n    float_bits = 0x7fffffff;\n  }\n  return float_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_float_to_int_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "calculate_local_c_08005728",
                "param_1": "param_size",
                "puVar1": "new_ptr",
                "auStack_18": "stack_var",
                "local_14": "local_var",
                "local_c": "result"
            },
            "code": "undefined4 calculate_local_c_08005728(int param_size)\n{\n    undefined4 *new_ptr;\n    undefined stack_var[4];\n    int local_var;\n    undefined4 result;\n\n    if (*(int *)PTR_DAT_08005778 == 0) {\n        *(undefined **)PTR_DAT_08005778 = PTR_DAT_0800577c;\n    }\n\n    result = *(undefined4 *)PTR_DAT_08005778;\n\n    if (stack_var < (undefined *)(param_size + *(int *)PTR_DAT_08005778)) {\n        local_var = param_size;\n        new_ptr = (undefined4 *)FUN_08005d14();\n        *new_ptr = 0xc;\n        result = 0xffffffff;\n    }\n    else {\n        *(int *)PTR_DAT_08005778 = param_size + *(int *)PTR_DAT_08005778;\n    }\n\n    return result;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": false,
            "current_name": "calculate_local_c_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "do_nothing_with_pointer_080090b4",
                "PTR_DAT_080090bc": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_080090b4(void)\n{\n  do_nothing(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_param_0800422e",
                "param_1": "param_ptr",
                "param_2": "data_ptr",
                "uVar1": "result"
            },
            "code": "uint32_t set_param_0800422e(uint32_t* param_ptr, uint32_t* data_ptr) {\n    uint32_t result;\n    if (*(char *)(param_ptr + 0xf) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(uint32_t *)(*param_ptr + 0x44) = data_ptr[6] | (data_ptr[6] | (data_ptr[5] | (data_ptr[4] | (*data_ptr | (data_ptr[1] | (data_ptr[2] | data_ptr[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n        *(char *)(param_ptr + 0xf) = 0;\n        result = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_param_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "set_flags_and_values_08003e38",
                "param_1": "flags_address",
                "param_2": "values",
                "iVar1": "value_1",
                "uVar2": "flags_2",
                "local_10": "local_var_1"
            },
            "code": "void set_flags_and_values_08003e38(int flags_address, int *values)\n{\n  int value_1;\n  uint flags_1;\n  uint local_var_1;\n  \n  flags_1 = *(uint *)(flags_address + 0x20) & 0xffffffef;\n  local_var_1 = *(uint *)(flags_address + 4);\n  value_1 = *values;\n  uint flags_2 = values[2] << 4 | *(uint *)(flags_address + 0x20) & 0xffffffdf;\n  if (flags_address == DAT_08003f14) {\n    flags_2 = (values[3] << 4 | flags_2 & 0xffffff7f) & 0xffffffbf;\n    local_var_1 = values[6] << 2 | values[5] << 2 | local_var_1 & 0xfffff3ff;\n  }\n  *(uint *)(flags_address + 4) = local_var_1;\n  *(uint *)(flags_address + 0x18) = value_1 << 8 | *(uint *)(flags_address + 0x18) & 0xffff8cff;\n  *(int *)(flags_address + 0x38) = values[1];\n  *(uint *)(flags_address + 0x20) = flags_2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "calculate_time_delay_0800151c",
                "param_1": "current_time",
                "iVar1": "delay_in_seconds",
                "uVar2": "return_value",
                "PTR_DAT_08001570": "time_data_pointer",
                "PTR_DAT_08001574": "time_scale_pointer",
                "FUN_08001762": "calculate_delay",
                "PTR_DAT_08001578": "delay_data_pointer"
            },
            "code": "int calculate_time_delay_0800151c(uint current_time)\n{\n  int delay_in_seconds = *(uint *)PTR_DAT_08001570 / (1000 / (ulonglong)(byte)*PTR_DAT_08001574);\n  int calculated_delay = FUN_08001762(delay_in_seconds);\n  if (calculated_delay == 0) {\n    if (current_time < 0x10) {\n      FUN_0800172a(0xffffffff,current_time,0);\n      *(uint *)PTR_DAT_08001578 = current_time;\n      return 0;\n    }\n    else {\n      return 1;\n    }\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_time_delay_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar1": "carry",
                "unaff_r4": "temp_b",
                "uVar2": "mask",
                "uVar3": "temp_d",
                "in_r12": "mask_constant",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_080006a4(uint a, uint b, uint c, uint d)\n{\n  uint mask = 0xfffc0000 & d;\n  if (b != c && mask != c)\n  {\n    bool is_zero = (a | (b << 1)) == 0;\n    if (!is_zero)\n    {\n      is_zero = (c | (d << 1)) == 0;\n    }\n    if (is_zero)\n    {\n      return (ulonglong)((b ^ d) & 0x80000000) << 0x20;\n    }\n    if (b == 0)\n    {\n      uint temp = b & 0x80000000;\n      do\n      {\n        uint carry = a & 0x80000000;\n        a = a << 1;\n        b = b * 2 + (uint)(carry != 0);\n      } while ((b & 0x100000) == 0);\n      b = b | temp;\n      if (mask != 0)\n      {\n        return CONCAT44(b, a);\n      }\n    }\n    do\n    {\n      uint carry = c & 0x80000000;\n      c = c << 1;\n      d = d * 2 + (uint)(carry != 0);\n    } while ((d & 0x100000) == 0);\n    return CONCAT44(b, a);\n  }\n  bool is_zero = (a | (b << 1)) == 0;\n  if (is_zero)\n  {\n    b = d;\n    a = c;\n  }\n  if (!is_zero)\n  {\n    is_zero = (c | (d << 1)) == 0;\n  }\n  uint temp = b;\n  if (((!is_zero) && ((b != c || ((a | (b << 0xc)) == 0)))) && ((mask != c || (a = c, temp = d, (c | (d << 0xc)) == 0))))\n  {\n    return (ulonglong)((b ^ d) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp, a) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_08000f68",
                "param_1": "param1",
                "param_2": "param2",
                "bVar1": "is_negative_1",
                "uVar2": "doubled_param1",
                "uVar3": "doubled_param2",
                "uVar4": "or_result",
                "bVar5": "is_or_result_zero"
            },
            "code": "uint calculate_08000f68(uint param1, uint param2)\n{\n    bool is_negative_1 = false;\n    bool is_negative_2 = false;\n    uint doubled_param1 = param1 * 2;\n    uint doubled_param2 = param2 * 2;\n    \n    if (((int)doubled_param1 >> 0x18 == -1 || (int)doubled_param2 >> 0x18 == -1) &&\n        ((((int)doubled_param1 >> 0x18 == -1 && ((param1 & 0x7fffff) != 0)) ||\n         (((int)doubled_param2 >> 0x18 == -1 && ((param2 & 0x7fffff) != 0))))))\n    {\n        return 1;\n    }\n    \n    uint or_result = doubled_param1 | param2 & 0x7fffffff;\n    bool is_or_result_zero = or_result == 0;\n    \n    if (!is_or_result_zero)\n    {\n        uint xor_result = param1 ^ param2;\n        is_or_result_zero = xor_result == 0;\n    }\n    \n    is_negative_1 = -1 < (int)(param1 ^ param2);\n    \n    if (is_negative_1)\n    {\n        param1 = doubled_param1 + param2 * -2;\n        is_or_result_zero = param1 == 0;\n    }\n    \n    if (is_negative_1 && doubled_param2 <= doubled_param1 && !is_or_result_zero)\n    {\n        param1 = (int)param2 >> 0x1f;\n    }\n    \n    if (!is_negative_1 || doubled_param2 > doubled_param1)\n    {\n        param1 = ~((int)param2 >> 0x1f);\n    }\n    \n    if (!is_or_result_zero)\n    {\n        param1 = param1 | 1;\n    }\n    \n    return param1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": false,
            "current_name": "calculate_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "hash",
                "param_2": "arr1",
                "param_3": "arr2",
                "iVar12": "arr1_len",
                "iVar9": "arr2_len",
                "iVar10": "min_len",
                "iVar3": "hash_arr_len",
                "puVar1": "p4",
                "puVar2": "p7",
                "puVar5": "hash_arr1",
                "puVar7": "end2",
                "puVar14": "p5",
                "puVar15": "p6",
                "puVar16": "p2",
                "puVar17": "hash_arr2",
                "puVar18": "p3",
                "uVar4": "carry",
                "uVar6": "val",
                "uVar8": "temp",
                "uVar11": "hash_val"
            },
            "code": "void calculate_hash_08009258(uint32_t hash, int* arr1, int* arr2){\n  uint32_t* hash_arr1 = (uint32_t*)(arr1 + 0x14);\n  uint32_t* hash_arr2 = (uint32_t*)(arr2 + 0x14);\n  int arr1_len = *(int*)(arr1 + 4);\n  int arr2_len = *(int*)(arr2 + 4);\n  if (*(int*)(arr1 + 8) < arr1_len + arr2_len) {\n    arr1_len += 1;\n  }\n  int hash_arr_len = arr1_len + arr2_len;\n  int hash_arr3_len = hash_arr_len * 4;\n  uint32_t* hash_arr3 = (uint32_t*)malloc(hash_arr3_len);\n  memset(hash_arr3, 0, hash_arr3_len);\n  uint32_t* p1 = hash_arr2;\n  uint32_t* p2 = hash_arr1;\n  uint32_t* p3 = hash_arr3;\n  uint32_t* end1 = hash_arr2 + arr2_len;\n  while (p1 < end1) {\n    uint32_t uVar6 = *p1 & 0xffff;\n    if (uVar6 != 0) {\n      uint32_t uVar8 = *p3;\n      uint32_t uVar4 = 0;\n      uint32_t* p4 = p2;\n      uint32_t* p5 = p3;\n      uint32_t uVar11 = uVar8;\n      do {\n        uint32_t* p6 = p5;\n        uVar4 = uVar4 + uVar6 * *(uint16_t*)p4 + (uVar11 >> 0x10);\n        *p6 = uVar8 & 0xffff | uVar4 * 0x10000;\n        uint32_t* p7 = p4 + 1;\n        uVar11 = p6[1];\n        uVar8 = uVar6 * (*p4 >> 0x10) + (uVar11 & 0xffff) + (uVar4 >> 0x10);\n        uVar4 = uVar8 >> 0x10;\n        p4 = p7;\n        p5 = p6 + 1;\n      } while (p7 < p2 + arr1_len);\n      p5[1] = uVar8;\n      p3 = p3 + 1;\n    }\n    p1 = p1 + 1;\n  }\n  if (hash_arr_len > 0) {\n    uint32_t* end2 = hash_arr3 + hash_arr_len - 1;\n    uint32_t uVar6 = *end2;\n    while (uVar6 == 0 && hash_arr_len > 1) {\n      end2 = end2 - 1;\n      hash_arr_len -= 1;\n      uVar6 = *end2;\n    }\n  }\n  *(int*)(hash_arr3 - 4) = hash_arr_len;\n  memcpy(arr1, hash_arr3, hash_arr_len * 4);\n  free(hash_arr3);\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_hash_08000c08",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "exponent",
                "iVar3": "coefficient",
                "uVar4": "mask",
                "shifted_input": "shifted_input",
                "shifted_masked_output": "shifted_masked_output",
                "masked_output": "masked_output"
            },
            "code": "uint calculate_hash_08000c08(uint input)\n{\n    if (input == 0) {\n        return 0;\n    }\n    int leading_zeroes = count_leading_zeroes(input);\n    int exponent = leading_zeroes - 8;\n    int coefficient = exponent * -0x800000 + 0x4a800000;\n    uint mask = 0 << (exponent & 0xff);\n    uint shifted_input = input << (exponent & 0xff);\n    uint shifted_masked_output = coefficient + shifted_input + (0U >> (0x20 - exponent & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n        shifted_masked_output = shifted_masked_output & 0xfffffffe;\n    }\n    else {\n        uint masked_output = shifted_masked_output & ~(mask >> 0x1f);\n        shifted_masked_output = masked_output;\n    }\n    return shifted_masked_output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_param_and_flag_080042de",
                "param_1": "param_array",
                "param_2": "flag",
                "uVar1": "return_value"
            },
            "code": "int set_param_and_flag_080042de(int* param_array, uint* flag) {\n    int return_value;\n    if (*(char *)(param_array + 0xf) == '\\x01') {\n        return_value = 2;\n    }\n    else {\n        *(undefined *)(param_array + 0xf) = 1;\n        *(undefined *)((int)param_array + 0x3d) = 2;\n        *(uint *)(*param_array + 4) &= 0xffffff8f;\n        *(uint *)(*param_array + 4) |= *flag;\n        *(uint *)(*param_array + 8) &= 0xffffff7f;\n        *(uint *)(*param_array + 8) |= flag[1];\n        *(undefined *)((int)param_array + 0x3d) = 1;\n        *(undefined *)(param_array + 0xf) = 0;\n        return_value = 0;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "set_param_and_flag_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_arrays_and_set_result_08009530",
                "param_1": "param_count",
                "param_2": "arr1",
                "param_3": "arr2",
                "param_4": "arr_size",
                "iVar1": "comparison_result",
                "iVar5": "result",
                "puVar2": "arr1_ptr",
                "uVar3": "arr2_size",
                "uVar4": "temp_result",
                "iVar12": "carry",
                "puVar6": "arr1_end",
                "puVar7": "arr1_current",
                "puVar8": "result_arr_ptr",
                "puVar9": "arr2_ptr",
                "puVar10": "arr2_current",
                "puVar11": "arr2_end",
                "puVar13": "arr1_end",
                "uVar14": "arr1_size"
            },
            "code": "void compare_arrays_and_set_result_08009530(int param_count, uint *arr1, uint *arr2, int arr_size) {\n  int diff = arr1[4] - (int)arr2[4];\n  uint *arr1_ptr = arr1 + 5;\n  uint *arr2_ptr = arr2 + 5;\n  uint *arr1_end = arr1_ptr + diff;\n  int result = 1;\n  if (diff == 0) {\n    while (arr1_end > arr1_ptr) {\n      arr1_end--;\n      arr2_ptr--;\n      if (*arr1_end != *arr2_ptr) {\n        int comparison_result = compare_arrays_and_set_result_08009530(param_count, 0, arr1_end, arr2_ptr, arr_size);\n        *(int *)(comparison_result + 0x10) = 1;\n        *(int *)(comparison_result + 0x14) = 0;\n        return;\n      }\n    }\n    if (*arr2_ptr <= *arr1_end) {\n      goto LAB_08009578;\n    }\n  } else if (diff < 0) {\n    result = 0;\n    arr1_ptr = arr2;\n    arr2_ptr = arr1;\n    arr1_end = arr1 + arr_size;\n  }\n  int comparison_result = compare_arrays_and_set_result_08009530(param_count, arr2_ptr[1], arr1_end, arr1_ptr, arr_size);\n  int carry = 0;\n  uint *result_arr_ptr = (uint *)(comparison_result + 0x14);\n  uint *arr1_current = arr1_ptr;\n  uint *arr2_current = arr2_ptr;\n  do {\n    uint *arr1_next = arr1_current + 1;\n    uint *arr2_next = arr2_current + 1;\n    uint temp_result = ((*arr1_current & 0xffff) + carry) - (*arr2_current & 0xffff);\n    carry = ((*arr1_current >> 0x10) - (*arr2_current >> 0x10)) + ((int)temp_result >> 0x10);\n    temp_result = temp_result & 0xffff | carry * 0x10000;\n    result_arr_ptr++;\n    *result_arr_ptr = temp_result;\n    carry = carry >> 0x10;\n    arr1_current = arr1_next;\n    arr2_current = arr2_next;\n  } while (arr2_current < arr2_ptr + arr2_ptr[4]);\n  result_arr_ptr = result_arr_ptr - 1;\n  uint last_result = *result_arr_ptr;\n  while (last_result == 0) {\n    result_arr_ptr = result_arr_ptr - 1;\n    arr_size = arr_size - 1;\n    last_result = *result_arr_ptr;\n  }\n  *(uint *)(comparison_result + 0x10) = arr_size;\n  *(int *)(comparison_result + 0xc) = result;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_arrays_and_set_result_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    FUN_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      FUN_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      FUN_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      FUN_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              FUN_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              FUN_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)FUN_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = FUN_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    FUN_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  FUN_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_08009744",
                "FUN_080088ec",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08009adc",
                "FUN_08005e9c",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_if_flag_is_set_08002bb4",
                "param_1": "flag_ptr",
                "param_2": "limit",
                "param_3": "offset",
                "iVar1": "result",
                "FUN_08002d3c": "read_data_from_flag_ptr",
                "FUN_080015a0": "get_data_size"
            },
            "code": "int check_if_flag_is_set_08002bb4(int* flag_ptr, uint32_t limit, int offset) {\n    int result;\n\n    while (true) {\n        if ((*(uint32_t*)(*flag_ptr + 0x14) & 0x80) == 0x80) {\n            return 0;\n        }\n        result = read_data_from_flag_ptr(flag_ptr);\n        if (result != 0) {\n            break;\n        }\n        if ((limit != 0xffffffff) && ((limit == 0 || (result = get_data_size(), limit < (uint32_t)(result - offset))))) {\n            flag_ptr[0x10] = flag_ptr[0x10] | 0x20;\n            flag_ptr[0xc] = 0;\n            *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n            *(undefined *)(flag_ptr + 0xf) = 0;\n            return 3;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_08001ccc",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_if_flag_is_set_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "is_bit_set_08002d3c",
                "param_1": "ptr_param",
                "bVar1": "is_set"
            },
            "code": "bool is_bit_set_08002d3c(uint *ptr_param) {\n  bool is_set = (*(uint *)(*ptr_param + 0x14) & 0x400) == 0x400;\n  if (is_set) {\n    *(undefined4 *)(*ptr_param + 0x14) = 0xfffffbff;\n    ptr_param[0x10] = 4;\n    ptr_param[0xc] = 0;\n    *(undefined *)((int)ptr_param + 0x3d) = 0x20;\n    *(undefined *)(ptr_param + 0xf) = 0;\n  }\n  return is_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "is_bit_set_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "process_data": "process_data",
                "param_1": "data",
                "param_2": "result",
                "uVar1": "func_result1",
                "uVar2": "func_result2",
                "uVar3": "func_result3",
                "PTR_DAT_08004d60": "result_ptr",
                "PTR_DAT_08004d70": "flag_ptr",
                "DAT_08004d40": "const1",
                "DAT_08004d44": "const2",
                "DAT_08004d48": "const3",
                "DAT_08004d4c": "const4",
                "DAT_08004d50": "const5",
                "DAT_08004d54": "const6",
                "DAT_08004d58": "const7",
                "DAT_08004d5c": "const8",
                "DAT_08004d60": "const9",
                "DAT_08004d64": "const10",
                "DAT_08004d68": "const11",
                "DAT_08004d6c": "const12",
                "FUNC_08000aa4": "get_result1",
                "FUN_08000418": "get_result2",
                "FUNC_080004c8": "process_result3",
                "FUNC_0800015c": "combine_results",
                "FUN_080009fc": "update_result_ptr",
                "FUNC_0800071c": "process_results",
                "FUN_08004bd8": "process_data_08004bd8"
            },
            "code": "void process_data_08004bd8(int data, int* result)\n{\n  int func_result1 = FUNC_08000aa4(data);\n  int func_result2 = get_result2();\n  int func_result3 = FUNC_080004c8(func_result1);\n  int final_result = FUNC_0800015c(func_result2, func_result3);\n  *result = final_result;\n}\n",
            "called": [
                "FUN_08000aa4",
                "FUN_0800015c",
                "FUN_08000418",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "process_data_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "get_value_at_index_080090c0",
                "param_1": "index",
                "param_2": "size",
                "puVar1": "value_ptr",
                "iVar2": "array_ptr",
                "FUN_08009980": "allocate_memory"
            },
            "code": "undefined4 * get_value_at_index_080090c0(int index, uint size)\n{\n  undefined4 *value_ptr;\n  int array_ptr;\n  array_ptr = *(int *)(index + 0x4c);\n  if (array_ptr == 0) {\n    array_ptr = allocate_memory(index, 4, 0x21);\n    *(int *)(index + 0x4c) = array_ptr;\n    if (array_ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  value_ptr = *(undefined4 **)(array_ptr + size * 4);\n  if (value_ptr == (undefined4 *)0x0) {\n    int array_size = 1 << (size & 0xff);\n    value_ptr = (undefined4 *)allocate_memory(index, 1, (array_size + 5) * 4);\n    if (value_ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    value_ptr[1] = size;\n    value_ptr[2] = array_size;\n  }\n  else {\n    *(undefined4 *)(array_ptr + size * 4) = *value_ptr;\n  }\n  value_ptr[3] = 0;\n  value_ptr[4] = 0;\n  return value_ptr;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009258",
                "FUN_08009444",
                "FUN_08009244",
                "FUN_08009120",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "get_value_at_index_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "*param_1": "*number",
                "uVar1": "count",
                "uVar2": "num"
            },
            "code": "uint count_leading_zeros_080091e4(uint *number)\n{\n    uint num = *number;\n    uint count = num & 7;\n\n    if (count == 0) {\n        if ((num & 0xffff) == 0) {\n            num >>= 0x10;\n            count = 0x10;\n        }\n        if ((num & 0xff) == 0) {\n            num >>= 8;\n            count += 8;\n        }\n        if ((num & 0xf) == 0) {\n            num >>= 4;\n            count += 4;\n        }\n        if ((num & 3) == 0) {\n            num >>= 2;\n            count += 2;\n        }\n        if (-1 < (int)(num << 0x1f)) {\n            num >>= 1;\n            if (num == 0) {\n                return 0x20;\n            }\n            count++;\n        }\n        *number = num;\n        return count;\n    }\n    if (-1 < (int)(num << 0x1f)) {\n        if ((int)(num << 0x1e) < 0) {\n            *number = num >> 1;\n            return 1;\n        }\n        *number = num >> 2;\n        return 2;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "float_bits",
                "param_2": "exponent_bits",
                "uVar1": "exponent_bits",
                "uVar2": "fraction_bits",
                "uVar3": "shifted_fraction_bits",
                "in_r12": "temp_var",
                "bVar4": "is_float_zero",
                "bVar5": "is_fraction_less_than_0_5"
            },
            "code": "uint calculate_float_bits_080009fc(uint float_bits, uint exponent_bits)\n{\n    uint fraction_bits, exponent, shifted_fraction_bits;\n    bool is_fraction_less_than_0_5, is_exponent_in_range, is_float_zero;\n\n    fraction_bits = exponent_bits * 2;\n    is_fraction_less_than_0_5 = fraction_bits < 0x70000000;\n    shifted_fraction_bits = fraction_bits + 0x90000000;\n    exponent = shifted_fraction_bits;\n    if (!is_fraction_less_than_0_5)\n    {\n        exponent_bits = fraction_bits + 0x8fe00000;\n        exponent = exponent_bits;\n    }\n    is_float_zero = exponent == 0;\n    if (!is_fraction_less_than_0_5 && shifted_fraction_bits >= 0x200000)\n    {\n        is_exponent_in_range = exponent_bits == 0x1fc00000;\n        is_float_zero = is_exponent_in_range;\n    }\n    if (is_float_zero)\n    {\n        if ((exponent_bits & 0x40000000) != 0)\n        {\n            if (((int)fraction_bits >> 0x15 == -1) && ((float_bits | exponent_bits << 0xc) != 0))\n            {\n                return 0x7fc00000;\n            }\n            return exponent_bits & 0x80000000 | 0x7f800000;\n        }\n        if ((int)(fraction_bits + 0x92e00000) < 0 != SCARRY4(shifted_fraction_bits,0x2e00000))\n        {\n            return exponent_bits & 0x80000000;\n        }\n        exponent_bits = 0x18 - (fraction_bits + 0x92e00000 >> 0x15);\n        fraction_bits = float_bits >> (exponent_bits & 0xff);\n        if (float_bits << (0x20 - exponent_bits & 0xff) != 0)\n        {\n            fraction_bits = fraction_bits | 1;\n        }\n        shifted_fraction_bits = exponent_bits & 0xff;\n        exponent_bits = (exponent_bits & 0xffffff00 | 0x100) >> shifted_fraction_bits << 1;\n    }\n    exponent_bits = (float_bits & 0x80000000 | fraction_bits >> 0x1d) + exponent_bits * 4 + (uint)(0x7fffffff < fraction_bits * 8);\n    if (fraction_bits * 8 == 0x80000000)\n    {\n        exponent_bits = exponent_bits & 0xfffffffe;\n    }\n    return exponent_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "decode_data": "decode_data",
                "param_1": "data_offset",
                "param_2": "data_buffer",
                "param_3": "data_size",
                "iVar1": "index",
                "iVar2": "remaining_size",
                "puVar3": "current_data",
                "puVar4": "parent_data",
                "new_data": "new_data",
                "FUN_080093a4": "decode_data_080093a4"
            },
            "code": "undefined4* decode_data_080093a4(int data_offset, undefined4* data_buffer, uint data_size)\n{\n  int remaining_size;\n  int current_size;\n  undefined4 *current_data;\n  undefined4 *parent_data;\n  undefined4 *new_data;\n  int index;\n  if ((data_size & 3) != 0) {\n    data_buffer = (undefined4 *)FUN_08009120(data_offset, data_buffer, *(undefined4 *)(PTR_DAT_08009440 + ((data_size & 3) - 1) * 4), 0);\n  }\n  remaining_size = (int)data_size >> 2;\n  if (remaining_size != 0) {\n    parent_data = *(undefined4 **)(data_offset + 0x48);\n    if (parent_data == (undefined4 *)0x0) {\n      parent_data = (undefined4 *)FUN_080090c0(data_offset, 1);\n      parent_data[4] = 1;\n      parent_data[5] = 0x271;\n      *(undefined4 **)(data_offset + 0x48) = parent_data;\n      *parent_data = 0;\n    }\n    current_data = data_buffer;\n    if (remaining_size << 0x1f >= 0) {\n      goto LAB_080093c4;\n    }\nLAB_080093d2:\n    new_data = (undefined4 *)FUN_08009258(data_offset, current_data, parent_data);\n    if (current_data == (undefined4 *)0x0) {\n      break;\n    }\n    index = *(int *)(data_offset + 0x4c);\n    remaining_size = remaining_size >> 1;\n    *current_data = *(undefined4 *)(index + parent_data[1] * 4);\n    *(undefined4 **)(index + parent_data[1] * 4) = current_data;\n    current_data = new_data;\n    if (remaining_size == 0) {\n      return data_buffer;\n    }\n    goto LAB_080093c4;\n  }\n  return data_buffer;\n}",
            "called": [
                "FUN_08009258",
                "FUN_08009120",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "decode_data_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "process_data_080098c0",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr1",
                "uVar2": "result",
                "uVar3": "index",
                "uVar4": "uVar4",
                "iVar5": "data_struct_ptr",
                "iVar6": "data_struct_head_ptr",
                "iVar7": "index",
                "PTR_PTR_DAT_08009974": "PTR_PTR_DAT_08009974",
                "PTR_PTR_DAT_08009978": "PTR_PTR_DAT_08009978",
                "DAT_0800997c": "DAT_0800997c",
                "_DAT_00000190": "_DAT_00000190",
                "_DAT_00000194": "_DAT_00000194",
                "_DAT_00000318": "_DAT_00000318",
                "_DAT_0000031c": "_DAT_0000031c"
            },
            "code": "undefined4 process_data_080098c0(int data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr1;\n  undefined4 result;\n  uint index;\n  uint uVar4;\n  int iVar5;\n  int data_struct_ptr;\n  int data_struct_head_ptr;\n  \n  ptr1 = PTR_PTR_DAT_08009974;\n  do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n  data_struct_ptr = *(int *)PTR_PTR_DAT_08009978;\n  data_struct_head_ptr = *(int *)(data_struct_ptr + 0x148);\n  if (data_struct_head_ptr == 0) {\n    data_struct_head_ptr = data_struct_ptr + 0x14c;\n    *(int *)(data_struct_ptr + 0x148) = data_struct_head_ptr;\n  }\n  uVar4 = *(uint *)(data_struct_head_ptr + 4);\n  if ((int)uVar4 < 0x20) {\n    index = uVar4 + 1;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      do_nothing_08008af4(*(undefined4 *)ptr1);\n      return 0xffffffff;\n    }\n    data_struct_head_ptr = 400;\n    uVar4 = 0;\n    _DAT_00000190 = *(undefined4 *)(data_struct_ptr + 0x148);\n    index = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(data_struct_ptr + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (data != 0) {\n    data_struct_ptr = data_struct_head_ptr + uVar4 * 4;\n    *(undefined4 *)(data_struct_ptr + 0x88) = param_3;\n    uVar4 = 1 << (uVar4 & 0xff);\n    *(uint *)(data_struct_head_ptr + 0x188) = *(uint *)(data_struct_head_ptr + 0x188) | uVar4;\n    *(undefined4 *)(data_struct_ptr + 0x108) = param_4;\n    if (data == 2) {\n      *(uint *)(data_struct_head_ptr + 0x18c) = uVar4 | *(uint *)(data_struct_head_ptr + 0x18c);\n    }\n  }\n  *(int *)(data_struct_head_ptr + 4) = index;\n  result = *(undefined4 *)ptr1;\n  *(undefined4 *)(data_struct_head_ptr + (uVar4 + 2) * 4) = param_2;\n  do_nothing_08008af4(result);\n  return 0;\n}",
            "called": [
                "FUN_08008af0",
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": false,
            "current_name": "process_data_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "set_flags_and_check_status_080027f4",
                "param_1": "flags_ptr",
                "param_2": "flag",
                "param_3": "flag2",
                "param_4": "flag3",
                "param_5": "timeout",
                "param_6": "param_6",
                "iVar1": "result"
            },
            "code": "uint32_t set_flags_and_check_status_080027f4(uint32_t **flags_ptr, uint8_t flag, uint16_t flag2, uint16_t flag3, uint32_t timeout, int param_6)\n{\n  uint32_t result = 3;\n  **flags_ptr |= 0x400;\n  **flags_ptr |= 0x100;\n  while (~(*flags_ptr)[5] & 1)\n  {\n    if (timeout == 0xffffffff || FUN_080015a0() - param_6 <= timeout)\n    {\n      continue;\n    }\n    else\n    {\n      (*flags_ptr)[0xc] = (uint32_t *)0x0;\n      *(uint8_t *)((int)flags_ptr + 0x3d) = 0x20;\n      *(uint8_t *)((int)flags_ptr + 0x3e) = 0;\n      *(uint32_t *)(flags_ptr + 0xf) = 0;\n      result = 3;\n      goto LAB_08002a90;\n    }\n  }\n  (*flags_ptr)[4] = flag & 0xfe;\n  if (FUN_08002ad8(flags_ptr, DAT_08002ad4, timeout, param_6) == 0)\n  {\n    if (FUN_08002bb4(flags_ptr, timeout, param_6, (*flags_ptr)[6]) == 0)\n    {\n      if (flag3 == 1)\n      {\n        (*flags_ptr)[4] = (uint32_t)(flag2 & 0xff);\n      }\n      else\n      {\n        (*flags_ptr)[4] = (uint32_t)(flag2 >> 8);\n        if (FUN_08002bb4(flags_ptr, timeout, param_6) != 0)\n        {\n          if ((*flags_ptr)[0x10] == (uint32_t *)0x4)\n          {\n            **flags_ptr |= 0x200;\n            result = 1;\n            goto LAB_08002a90;\n          }\n          else\n          {\n            result = 3;\n            goto LAB_08002a90;\n          }\n        }\n        else\n        {\n          (*flags_ptr)[4] = (uint32_t)(flag2 & 0xff);\n        }\n      }\n      if (FUN_08002bb4(flags_ptr, timeout, param_6) == 0)\n      {\n        **flags_ptr |= 0x100;\n        while (~(*flags_ptr)[5] & 1)\n        {\n          if (timeout == 0xffffffff || FUN_080015a0() - param_6 <= timeout)\n          {\n            continue;\n          }\n          else\n          {\n            (*flags_ptr)[0xc] = (uint32_t *)0x0;\n            *(uint8_t *)((int)flags_ptr + 0x3d) = 0x20;\n            *(uint8_t *)((int)flags_ptr + 0x3e) = 0;\n            *(uint32_t *)(flags_ptr + 0xf) = 0;\n            result = 3;\n            goto LAB_08002a90;\n          }\n        }\n        result = 0;\n      }\n      else if ((*flags_ptr)[0x10] == (uint32_t *)0x4)\n      {\n        **flags_ptr |= 0x200;\n        result = 1;\n      }\n      else\n      {\n        result = 3;\n      }\n    }\n    else if ((*flags_ptr)[0x10] == (uint32_t *)0x4)\n    {\n      **flags_ptr |= 0x200;\n      result = 1;\n    }\n    else\n    {\n      result = 3;\n    }\n  }\n  else if ((*flags_ptr)[0x10] == (uint32_t *)0x4)\n  {\n    result = 1;\n  }\n  else\n  {\n    result = 3;\n  }\nLAB_08002a90:\n  return result;\n}\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "set_flags_and_check_status_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "calculate_shifted_value_080003d4",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "shift_amount_complement",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "in_r12": "N/A",
                "bVar5": "shift_amount_underflowed_is_negative",
                "bVar6": "shift_amount_underflowed_is_zero",
                "bVar7": "shift_amount_overflowed_is_negative",
                "SBORROW4": "N/A",
                "SCARRY4": "N/A"
            },
            "code": "unsigned long long calculate_shifted_value_080003d4(uint32_t input_value)\n{\n    uint32_t leading_zeroes = count_leading_zeroes(input_value);\n    uint32_t shift_amount = leading_zeroes + 21;\n    uint32_t shift_amount_overflowed = shift_amount - 32;\n    bool shift_amount_overflowed_sign_bit = shift_amount_overflowed >> 31;\n    uint32_t shift_amount_underflowed = leading_zeroes - 11;\n    bool shift_amount_underflowed_sign_bit = shift_amount_underflowed >> 31;\n    uint32_t shifted_value = 0;\n    uint32_t shifted_value_overflowed = 0;\n    uint32_t shifted_value_underflowed = 0;\n    \n    if (input_value == 0)\n    {\n        return 0;\n    }\n    \n    if (shift_amount_overflowed_sign_bit == shift_amount_underflowed_sign_bit)\n    {\n        if (shift_amount_overflowed_sign_bit == 0)\n        {\n            shifted_value = input_value << shift_amount_overflowed;\n            input_value = input_value >> (12 - leading_zeroes);\n        }\n    }\n    \n    if (shift_amount_overflowed_sign_bit != shift_amount_underflowed_sign_bit)\n    {\n        uint32_t shift_amount_complement = 32 - shift_amount_underflowed;\n        shifted_value_underflowed = input_value << shift_amount_underflowed;\n        shifted_value_underflowed = shifted_value_underflowed | (0U >> (32 - shift_amount_complement));\n    }\n    \n    if (shift_amount_overflowed_sign_bit != shift_amount_underflowed_sign_bit)\n    {\n        shifted_value_overflowed = 0 << shift_amount_underflowed;\n    }\n    \n    if (shift_amount <= 1075)\n    {\n        return (((uint64_t)input_value + (0x432 - shift_amount) * 0x100000) << 32) | shifted_value;\n    }\n    \n    uint32_t shift_amount_complement = ~(0x432 - shift_amount);\n    \n    if (shift_amount_complement > 30)\n    {\n        return (uint64_t)input_value >> (shift_amount_complement - 31);\n    }\n    \n    uint32_t shifted_value_high = shifted_value >> shift_amount_complement;\n    uint32_t shifted_value_low = (shifted_value << (32 - shift_amount_complement)) | (input_value >> shift_amount_complement);\n    uint64_t result = ((uint64_t)shifted_value_high << 32) | shifted_value_low;\n    \n    if (shift_amount_complement == 19)\n    {\n        result = (uint64_t)shifted_value_low >> 12;\n    }\n    \n    if (shift_amount_complement == 20)\n    {\n        result = (uint64_t)shifted_value_low >> 11;\n    }\n    \n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_values_08004d78",
                "param_1": "input_array",
                "param_2": "output_array_1",
                "param_3": "output_array_2",
                "uVar1": "input_value_1",
                "uVar2": "input_value_2",
                "uVar3": "input_value_3",
                "uVar4": "intermediate_value_1",
                "uVar5": "intermediate_value_2",
                "thunk_FUN_08005838": "combine_intermediate_values",
                "FUNC_080004c8": "calculate_output_value",
                "DAT_08004e68": "some_constant",
                "DAT_08004e60": "some_other_constant",
                "DAT_08004e64": "yet_another_constant"
            },
            "code": "void calculate_values_08004d78(float *input_array, float *output_array_1, float *output_array_2)\n{\n  float input_value_1 = input_array[0];\n  float input_value_2 = input_array[1];\n  float input_value_3 = input_array[2];\n  float intermediate_value_1 = calculate_intermediate_value(input_value_2);\n  float intermediate_value_2 = calculate_intermediate_value(input_value_3);\n  float intermediate_value_3 = combine_intermediate_values(intermediate_value_1, intermediate_value_2);\n  float output_value_1 = calculate_output_value(input_value_1, intermediate_value_2);\n  float output_value_2 = calculate_output_value(input_value_1, intermediate_value_3);\n  *output_array_1 = output_value_1;\n  *output_array_2 = output_value_2;\n}\n",
            "called": [
                "FUN_08000e20",
                "FUN_08000418",
                "thunk_FUN_08005838",
                "FUN_080009fc",
                "FUN_080004c8",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "calculate_values_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "leading_zero_bits_08000c10",
                "param_1": "number",
                "uVar2": "shift_amount",
                "uVar3": "shifted_constant",
                "iVar1": "num_leading_zeros",
                "iVar4": "constant",
                "uVar5": "carry",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint leading_zero_bits_08000c10(uint number) {\n  uint sign_bit = number & 0x80000000;\n  if ((int)sign_bit < 0) {\n    number = -number;\n  }\n  if (number == 0) {\n    return 0;\n  }\n  int num_leading_zeros = count_leading_zeroes(number);\n  uint shift_amount = num_leading_zeros - 8;\n  int constant = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (num_leading_zeros > 7) {\n    uint shift = shift_amount & 0xff;\n    uint shifted_number = number << shift;\n    uint shifted_constant = 0U >> (0x20 - shift & 0xff);\n    uint carry = (uint)(0x7fffffff < 0 << shift);\n    uint result = constant + shifted_number + shifted_constant + carry;\n    if (shifted_number == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shift = (num_leading_zeros + 0x18) & 0xff;\n  uint shifted_number = number << shift;\n  uint shifted_constant = (number >> (0x20 - shift & 0xff)) - ((int)shifted_number >> 0x1f);\n  if ((shifted_number & 0x7fffffff) == 0) {\n    shifted_constant = shifted_constant & ~(shifted_number >> 0x1f);\n  }\n  return constant + shifted_constant;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_08004ae0",
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "leading_zero_bits_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_params_to_zero_0800491c",
                "param_1": "params",
                "local_13": "zero",
                "local_12": "sixteen",
                "local_11": "eight",
                "PTR_DAT_080049c8": "PTR_DAT_080049c8"
            },
            "code": "void initialize_params_to_zero_0800491c(int *params)\n{\n  int num_params = 11;\n  unsigned char zero = 0;\n  unsigned char sixteen = 16;\n  unsigned char eight = 8;\n  for (int i = 0; i < num_params; i++) {\n    params[i] = 0;\n  }\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x6b,&zero,1);\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x1c,&sixteen,1);\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x1b,&eight,1);\n  FUN_080049cc(params);\n  return;\n}",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_params_to_zero_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "check_dataptr_is_null_080078a0",
                "DAT_080078ac": "data_ptr",
                "PTR_LAB_08008818_1_080078b0": "label_ptr",
                "FUN_080098c0": "execute_function"
            },
            "code": "void check_dataptr_is_null_080078a0(){\n  if (DAT_080078ac != 0) {\n    execute_function(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "check_dataptr_is_null_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "copy_data_and_call_function_080057e8",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_call_function_080057e8(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08005820 + index < PTR_DAT_08005824; index += 4) {\n    *(undefined4 *)(PTR_DAT_08005820 + index) = *(undefined4 *)(DAT_0800581c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08005828; data_ptr < PTR_DAT_0800582c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  copy_data_to_function();\n  prepare_data_for_function_call();\n  jump_table = (code *)0x800581a;\n  call_function_through_jump_table(jump_table);\n  return;\n}",
            "called": [
                "FUN_08005224",
                "FUN_08005780",
                "FUN_08005d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_call_function_080057e8"
        }
    },
    "used_tokens": 154006,
    "layers": [
        [
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_08005348",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08002c2e",
            "FUN_08003568",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_08000978",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_08005598",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_080008fc",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_08005dfc",
            "FUN_080078c0",
            "thunk_FUN_08005838",
            "FUN_080003f4",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080017c4",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_080015fc",
            "FUN_08004436",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_0800438a",
            "FUN_080014f0",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080009c0",
            "FUN_08001170",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08003518",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08005780",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08000418",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_0800088a",
            "FUN_080016d0",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080036f8",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_080009e8",
            "FUN_08005674",
            "FUN_08009630",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005714",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_08005838",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08001ab0",
            "FUN_08003540",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_08005728",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_0800151c",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c",
            "FUN_080078a0",
            "FUN_080057e8"
        ],
        [
            "FUN_0800901c",
            "FUN_08004436",
            "FUN_08004bd8",
            "FUN_080093a4"
        ]
    ],
    "locked_functions": []
}