{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_08000110(undefined4 input)\n\n{\n  if ((flag)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input",
                "char": "flag"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000110": {
                    "1": "initialize_flag_if_unset",
                    "2": "update_flag",
                    "25": "initialize_flag"
                },
                "param_1": {
                    "13": "input",
                    "2": "input_parameter",
                    "10": "input_value",
                    "3": "value",
                    "1": "input_param"
                },
                "DAT_200009c8": {
                    "13": "flag",
                    "1": "flag_byte",
                    "3": "flag_variable"
                },
                "{original_variable_name_1}": {
                    "1": "{new_variable_name_1}"
                },
                "char": {
                    "1": "flag"
                }
            }
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_values_08000134(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000134": {
                    "1": "concatenate_ints_with64_bits",
                    "2": "concatenate_integers",
                    "7": "concatenate_values",
                    "6": "concatenate_parameters"
                },
                "param_1": {
                    "1": "param1",
                    "4": "first_param",
                    "5": "value1",
                    "3": "first_integer",
                    "2": "input1",
                    "6": "first_parameter"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "input2",
                    "5": "value2",
                    "4": "second_param",
                    "6": "second_parameter",
                    "3": "second_integer"
                }
            }
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_08000158",
            "code": "\nulonglong calculate_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp1;\n  uint temp2;\n  int shift2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp1 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result1 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)result1 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = temp1;\n      result3 = input3;\n      if (shift2 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = result3;\n        temp1 = result1;\n      }\n      flag2 = (result3 | result1 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result1 == temp1;\n      }\n      if (!flag2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  flag2 = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp2 = input2;\n  if (flag2 && result1 <= input4) {\n    result1 = result1 + result3;\n    result2 = input3;\n    temp2 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp2,result2);\n  }\n  temp2 = temp2 & 0xfffff | 0x100000;\n  if ((temp2 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp2 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  if (result1 == result3) {\n    temp2 = temp2 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp1 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp2 << (temp1 & 0xff);\n    temp1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp2 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp2 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp2 = (int)temp2 >> (result3 - 0x20 & 0xff);\n    temp1 = result2 + temp2;\n    temp2 = temp2 + ((int)temp2 >> 0x1f) + (uint)CARRY4(result2,temp2);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp1;\n    temp1 = -(uint)!flag2 - temp1;\n    result3 = -(uint)(flag2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(result2 != 0) << 0x1f | temp1 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      flag2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp1,(uint)flag2) | input2,\n                    temp1 + flag2);\n  }\n  flag1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp1 * 2;\n  flag2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)flag1;\n  result3 = result3 * 2 + (uint)(flag2 || CARRY4(result2,(uint)flag1));\n  result2 = result1 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000268;\n  temp2 = temp1;\n  result1 = result3;\n  if (result3 == 0) {\n    temp2 = 0;\n    result1 = temp1;\n  }\n  shift2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  flag3 = SBORROW4(result3,0x20);\n  temp1 = shift2 - 0x2b;\n  flag2 = (int)temp1 < 0;\n  flag1 = temp1 == 0;\n  if ((int)result3 < 0x20) {\n    flag3 = SCARRY4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp1 = result3;\n    if (!flag1 && flag2 == flag3) {\n      temp2 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    result4 = 0x20 - temp1;\n  }\n  result1 = result1 << (temp1 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result1 = result1 | temp2 >> (result4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp2 = temp2 << (temp1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | input2,temp2);\n  }\n  temp1 = ~(result2 - result3);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp2 >> (0x20 - (0xcU - shift2) & 0xff) | result1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(input2 | result1 >> (temp1 & 0xff),\n                    temp2 >> (temp1 & 0xff) | result1 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "iVar8": "shift2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar1": "temp1"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000158": {
                    "2": "calculate_product",
                    "1": "perform_bitwise_operations",
                    "8": "calculate",
                    "4": "calculate_result"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "num1",
                    "22": "input1"
                },
                "param_2": {
                    "22": "input2",
                    "1": "b",
                    "2": "input_2"
                },
                "param_3": {
                    "2": "num3",
                    "1": "input_param_3",
                    "22": "input3"
                },
                "param_4": {
                    "1": "operand4",
                    "2": "num4",
                    "22": "input4"
                },
                "uVar3": {
                    "2": "sum1",
                    "1": "addition_result1",
                    "7": "temp1",
                    "6": "result1",
                    "4": "temp3"
                },
                "uVar4": {
                    "1": "temp9",
                    "2": "mask1",
                    "4": "temp4",
                    "6": "temp2"
                },
                "uVar5": {
                    "4": "result3",
                    "1": "temp10",
                    "2": "sum3",
                    "3": "result2",
                    "6": "temp3"
                },
                "uVar6": {
                    "2": "var6",
                    "1": "operand4_xored",
                    "3": "result1",
                    "8": "temp1",
                    "4": "temp4"
                },
                "uVar7": {
                    "4": "result2",
                    "1": "u_var7",
                    "6": "temp2",
                    "3": "temp7",
                    "2": "var7"
                },
                "iVar8": {
                    "6": "shift2",
                    "1": "condition_2",
                    "2": "temp3",
                    "3": "bit_shift2"
                },
                "uVar9": {
                    "1": "temp4",
                    "2": "temp1",
                    "5": "result1",
                    "3": "temp9"
                },
                "uVar10": {
                    "1": "temp_var_10",
                    "3": "temp10",
                    "2": "temp2",
                    "5": "result2"
                },
                "uVar11": {
                    "1": "result4",
                    "3": "temp11",
                    "5": "result3",
                    "2": "temp4"
                },
                "uVar12": {
                    "1": "temp_flag",
                    "3": "temp4",
                    "2": "temp7",
                    "5": "result4"
                },
                "bVar13": {
                    "1": "flag2",
                    "3": "bool1",
                    "8": "flag1",
                    "2": "check1"
                },
                "bVar14": {
                    "1": "is_condition2",
                    "8": "flag2",
                    "3": "bool2",
                    "2": "check2"
                },
                "bVar15": {
                    "2": "check3",
                    "1": "cond3",
                    "8": "condition3",
                    "3": "bool3"
                },
                "iVar1": {
                    "1": "condition_1",
                    "3": "temp1",
                    "2": "shift_count1",
                    "6": "shift1"
                },
                "bVar2": {
                    "3": "carry_bit",
                    "1": "var2",
                    "7": "carry",
                    "2": "temp2"
                },
                "uVar1": {
                    "1": "temp1"
                },
                "uVar2": {
                    "1": "temp2"
                },
                "uVar8": {
                    "1": "temp8"
                }
            }
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_result_0800015c",
            "code": "\nulonglong calculate_result_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint input_1;\n  uint shifted_input4;\n  uint difference;\n  uint temp4;\n  uint temp5;\n  bool is_equal;\n  bool is_zero;\n  bool flag3;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (check_carry(input2,input2) || check_carry(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  input_1 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    input_1 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,input_1);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = input_1 != 0;\n    input_1 = -input_1;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp5 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp4 = input3 << (temp5 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = input_1 + input3;\n    temp2 = temp3 << (temp5 & 0xff);\n    temp5 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + check_carry(input_1,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)check_carry(temp1,temp2);\n  }\n  else {\n    temp4 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp5 = input_1 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)check_carry(input_1,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = temp4 == 0;\n    temp4 = -temp4;\n    difference = -temp5;\n    temp5 = -(uint)!is_zero - temp5;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    input_1 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp5;\n      temp5 = (uint)(shifted_input4 != 0) << 0x1f | temp5 >> 1;\n      temp4 = (uint)(carry & 1) << 0x1f | temp4 >> 1;\n      input_1 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    is_zero = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      is_zero = (temp5 & 1) != 0;\n    }\n    return CONCAT44(difference + input_1 * 0x100000 + (uint)check_carry(temp5,(uint)is_zero) | input2,\n                    temp5 + is_zero);\n  }\n  is_equal = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  input_1 = temp5 * 2;\n  is_zero = check_carry(temp5,temp5);\n  temp5 = temp5 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || check_carry(input_1,(uint)is_equal));\n  input_1 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp5;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = temp5;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp5 = shift2 - 0xb;\n  flag3 = is_subtraction_overflow(temp5,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)temp5 < 0x20) {\n    flag3 = is_shift_overflow(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = temp5;\n    if (!is_equal && is_zero == flag3) {\n      temp3 = shifted_input2 << (temp5 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_equal || is_zero != flag3) {\n    temp4 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != flag3) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp4 & 0xff);\n  }\n  if (is_equal || is_zero != flag3) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp5 <= (int)input_1) {\n    return CONCAT44(shifted_input2 + (input_1 - temp5) * 0x100000 | input2,temp3);\n  }\n  difference = ~(input_1 - temp5);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == is_shift_overflow(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_result_0800015c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shifted_input2",
                "uVar8": "input_1",
                "uVar9": "shifted_input4",
                "uVar10": "difference",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "flag3",
                "CARRY4": "check_carry",
                "uVar1": "input_1",
                "SBORROW4": "is_subtraction_overflow",
                "SCARRY4": "is_shift_overflow"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800015c": {
                    "3": "calculate_sum",
                    "2": "reverse_bits",
                    "1": "calculate_func",
                    "4": "calculate_result"
                },
                "param_1": {
                    "8": "input_1",
                    "1": "operand1",
                    "2": "num1",
                    "17": "input1",
                    "3": "input_a"
                },
                "param_2": {
                    "17": "input2",
                    "3": "input_b",
                    "1": "operand2",
                    "2": "num2",
                    "8": "input_2"
                },
                "param_3": {
                    "8": "input_3",
                    "3": "input_c",
                    "1": "operand3",
                    "17": "input3",
                    "2": "num3"
                },
                "param_4": {
                    "3": "input_d",
                    "8": "input_4",
                    "2": "num4",
                    "1": "operand4",
                    "17": "input4"
                },
                "iVar1": {
                    "1": "temp7",
                    "3": "shift1",
                    "2": "input4_shifted_signed"
                },
                "bVar2": {
                    "1": "carry_bit",
                    "2": "bit",
                    "5": "carry",
                    "3": "carry_flag"
                },
                "uVar3": {
                    "1": "addition_result1",
                    "7": "temp1",
                    "2": "result1",
                    "4": "sum1"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "temp_2",
                    "3": "sum2",
                    "7": "temp2"
                },
                "uVar5": {
                    "1": "input2_updated_final",
                    "2": "result_2",
                    "3": "result3",
                    "4": "temp3"
                },
                "iVar6": {
                    "1": "shifted_input2_msb",
                    "3": "shift2"
                },
                "uVar7": {
                    "1": "operand2_shifted_lz_count",
                    "2": "input2_shifted",
                    "10": "shifted_input2",
                    "3": "shifted_input_2"
                },
                "uVar8": {
                    "1": "temp4",
                    "2": "result_1"
                },
                "uVar9": {
                    "2": "input4_shifted",
                    "1": "result4",
                    "8": "shifted_input4",
                    "3": "shifted_input_4"
                },
                "uVar10": {
                    "1": "temp4",
                    "2": "result_3",
                    "6": "difference"
                },
                "uVar11": {
                    "1": "temp_result_shifted",
                    "2": "temp1",
                    "4": "temp4"
                },
                "uVar12": {
                    "1": "sum_of_inputs_final",
                    "2": "result_5",
                    "4": "temp5"
                },
                "bVar13": {
                    "2": "is_zero",
                    "1": "temp_13",
                    "4": "flag1",
                    "9": "is_equal"
                },
                "bVar14": {
                    "1": "result",
                    "2": "condition2",
                    "4": "flag2",
                    "6": "is_zero"
                },
                "bVar15": {
                    "1": "needs_correction",
                    "4": "flag3",
                    "3": "is_negative"
                },
                "uVar16": {
                    "1": "shifted_bits3"
                },
                "uVar17": {
                    "1": "shifted_bits4"
                },
                "uVar18": {
                    "1": "mask5"
                },
                "uVar19": {
                    "1": "additional_operand1"
                },
                "uVar20": {
                    "1": "shift4"
                },
                "uVar21": {
                    "1": "shift5"
                },
                "uVar22": {
                    "1": "result_operand2"
                },
                "uVar23": {
                    "1": "temp3"
                },
                "uVar24": {
                    "1": "temp4"
                },
                "uVar25": {
                    "1": "temp5"
                },
                "carry": {
                    "1": "carry"
                },
                "result": {
                    "1": "result_value"
                },
                "CARRY4": {
                    "1": "check_carry"
                },
                "uVar14": {
                    "1": "result1"
                },
                "uVar15": {
                    "1": "result2"
                },
                "temp1": {
                    "1": "temp_var1"
                },
                "temp2": {
                    "1": "temp_var2"
                },
                "temp3": {
                    "1": "temp_var3"
                },
                "temp4": {
                    "1": "temp_var4"
                },
                "temp5": {
                    "1": "temp_var5"
                },
                "temp6": {
                    "1": "temp_var6"
                },
                "temp7": {
                    "1": "temp_var7"
                },
                "uVar1": {
                    "1": "shifted_input_2_carry"
                },
                "uVar2": {
                    "1": "input_2"
                },
                "uVar3:uVar4": {
                    "1": "concatenated_result"
                },
                "uVar7:uVar9": {
                    "1": "concatenated_result"
                },
                "uVar11:uVar12": {
                    "1": "concatenated_result"
                },
                "uVar1:uVar2": {
                    "1": "concatenated_result"
                },
                "VAR_0800039c": {
                    "1": "result"
                },
                "CAR_4": {
                    "1": "carry_result"
                },
                "CTLZ": {
                    "1": "leading_zero_count"
                },
                "SBORROW4": {
                    "1": "is_subtraction_overflow"
                },
                "SCARRY4": {
                    "1": "is_shift_overflow"
                },
                "uVar6": {
                    "1": "abs_difference_shifted"
                },
                "iVar18": {
                    "1": "shift_count"
                }
            }
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "reverse_bits_080003d4",
            "code": "\nulonglong reverse_bits_080003d4(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  leading_zeros = leading_zeros_count(input);\n  shift_amount = leading_zeros + 0x15;\n  is_overflow = SBORROW4(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_overflow == false) {\n      result = input << shift_amount;\n      input = input >> (shift_constant - (leading_zeros + 1) & 0xff);\n      goto perform_shift;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | zero >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    result = 0 << (shift_amount & 0xff);\n  }\nperform_shift:\n  if (shift_amount < 0x433) {\n    return combine_result(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_result(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (shift_constant - leading_zeros) & 0xff) | input << (shift_constant - leading_zeros & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "reverse_bits_080003d4",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeros",
                "uVar4": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "LAB_080002e0": "perform_shift",
                "CONCAT44": "combine_result",
                "0U": "zero",
                "0xcU": "shift_constant",
                "LZCOUNT": "leading_zeros_count"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080003d4": {
                    "4": "shift_and_concatenate",
                    "1": "bitwise_shift_concatenation",
                    "6": "shift_and_concat",
                    "12": "reverse_bits"
                },
                "param_1": {
                    "24": "input",
                    "1": "shifted_input",
                    "2": "num"
                },
                "uVar1": {
                    "1": "concatenated_value",
                    "2": "output_upper",
                    "3": "upper_bits",
                    "4": "shifted_result",
                    "6": "result"
                },
                "uVar2": {
                    "1": "result_2",
                    "3": "shift",
                    "2": "lower_bits",
                    "14": "shift_amount"
                },
                "iVar3": {
                    "1": "lz_count",
                    "10": "count",
                    "12": "leading_zeros",
                    "4": "bit_count"
                },
                "uVar4": {
                    "1": "constant_addition",
                    "2": "total_shift",
                    "7": "shift_amount",
                    "4": "shift"
                },
                "in_r12": {
                    "1": "temp_var1",
                    "15": "remaining_bits",
                    "3": "remainder"
                },
                "bVar5": {
                    "1": "is_negative_shift_amount",
                    "23": "is_negative",
                    "3": "is_negative_shift"
                },
                "bVar6": {
                    "1": "equal_to_zero",
                    "23": "is_zero",
                    "3": "is_zero_shift"
                },
                "bVar7": {
                    "1": "is_borrowed",
                    "7": "is_borrow",
                    "2": "overflow"
                },
                "LAB_080002e0": {
                    "1": "end_loop",
                    "2": "perform_shift"
                },
                "CONCAT44": {
                    "1": "combine_result"
                },
                "0U": {
                    "1": "zero"
                },
                "0x433": {
                    "1": "threshold"
                },
                "0x1e": {
                    "1": "threshold2"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "0x432": {
                    "1": "threshold"
                },
                "0x13": {
                    "1": "threshold_diff"
                },
                "0xcU": {
                    "1": "shift_constant"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                }
            }
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "reverse_bits_080003f4",
            "code": "\nulonglong reverse_bits_080003f4(uint input)\n\n{\n  uint result;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  result = 0;\n  leading_zeros = count_leading_zeros(abs_input);\n  total_bits = leading_zeros + 0x15;\n  is_carry = SBORROW4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_carry = signed_carry_4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_carry == false) {\n      result = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_end;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nshift_end:\n  if (total_bits < 0x433) {\n    return concatenate_44(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return concatenate_44(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != signed_carry_4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate_44(sign_bit | abs_input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate_44(input,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "reverse_bits_080003f4",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "total_bits",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "LZCOUNT": "count_leading_zeros",
                "SCARRY4": "signed_carry_4",
                "CONCAT44": "concatenate_44",
                "LAB_080002e0": "shift_end"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080003f4": {
                    "1": "bitwise_shift",
                    "15": "reverse_bits",
                    "2": "convert_to64_bit"
                },
                "param_1": {
                    "20": "input",
                    "6": "input_value",
                    "1": "value",
                    "2": "number"
                },
                "uVar1": {
                    "1": "shift",
                    "3": "bit_count",
                    "2": "shifted_result",
                    "6": "result",
                    "4": "shifted_input"
                },
                "uVar2": {
                    "1": "abs_num",
                    "2": "abs_number",
                    "4": "abs_value",
                    "18": "abs_input"
                },
                "uVar3": {
                    "1": "shift_bits",
                    "3": "shift_value",
                    "15": "shift_amount",
                    "4": "shift_count",
                    "2": "shift"
                },
                "iVar4": {
                    "1": "leading_zeros_count",
                    "23": "leading_zeros",
                    "3": "leading_zero_count",
                    "2": "bit_count"
                },
                "uVar5": {
                    "1": "adjusted_shift_amount",
                    "4": "total_bits",
                    "2": "final_shift",
                    "3": "total_shift"
                },
                "uVar6": {
                    "26": "sign_bit",
                    "1": "sign_extension",
                    "2": "input_sign"
                },
                "in_r12": {
                    "5": "mask",
                    "13": "remaining_bits",
                    "1": "shift_mask",
                    "2": "bit_mask"
                },
                "bVar7": {
                    "1": "leading_zero_overflow",
                    "18": "is_negative",
                    "2": "is_negative_shift"
                },
                "bVar8": {
                    "2": "is_shift_amount_zero",
                    "1": "need_to_shift",
                    "20": "is_zero"
                },
                "bVar9": {
                    "1": "leading_zeros_overflow",
                    "7": "is_carry",
                    "4": "carry",
                    "3": "carry_flag",
                    "2": "has_carry"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count",
                    "2": "count_leading_zeros"
                },
                "SCARRY4": {
                    "1": "subtract_carry4"
                },
                "CONCAT44": {
                    "1": "combine"
                },
                "LAB_080002e0": {
                    "1": "final_calculation"
                },
                "0x80000000": {
                    "1": "int_min"
                },
                "0x20": {
                    "1": "bits_in_ulong_long"
                },
                "0xc": {
                    "1": "num_bits_shifted"
                },
                "0x15": {
                    "1": "shift_threshold"
                },
                "0x433": {
                    "1": "max_shift_threshold"
                },
                "0x432": {
                    "1": "shift_limit"
                },
                "0x1f": {
                    "1": "shift_limit_plus_one"
                },
                "0x13": {
                    "1": "shift_lower_bound"
                },
                "0x80000000ffffffff": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "reverse_bits_08000418",
            "code": "\nulonglong reverse_bits_08000418(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint bit31;\n  uint temp;\n  uint result;\n  uint shifted_input;\n  uint temp2;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_zero;\n  bool is_negative;\n  \n  temp2 = input << 1;\n  is_zero = temp2 == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)temp2 >> 3) >> 1;\n  result = bit31 | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = temp2 & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((temp2 & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp = input;\n  temp2 = shifted_input;\n  if (shifted_input == 0) {\n    temp = 0;\n    temp2 = input;\n  }\n  bit_count = leading_zero_count(temp2);\n  if (shifted_input == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = SBORROW4(shift_amount,0x20);\n  shifted_input = bit_count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = SCARRY4(shifted_input,0xc);\n    bit_count = bit_count + -0x1f;\n    is_zero = bit_count < 0;\n    is_zero = bit_count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_zero == is_negative) {\n      temp = temp2 << (shift_amount & 0xff);\n      temp2 = temp2 >> (0xcU - bit_count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  temp2 = temp2 << (shifted_input & 0xff);\n  if (is_zero || is_zero != is_negative) {\n    temp2 = temp2 | temp >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_zero != is_negative) {\n    temp = temp << (shifted_input & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp2 + (0x380 - shift_amount) * 0x100000 | bit31,temp);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result,temp2 >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shifted_input - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(bit31 | temp2 >> (shifted_input & 0xff),\n                    temp >> (shifted_input & 0xff) | temp2 << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,temp >> (0x20 - (0xcU - bit_count) & 0xff) | temp2 << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "reverse_bits_08000418",
                "param_1": "input",
                "param_4": "mask",
                "uVar1": "bit31",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "temp2",
                "iVar6": "bit_count",
                "uVar7": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "param_2": "param2",
                "param_3": "param3",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000418": {
                    "2": "reverse_bits_and_shift",
                    "1": "extract_bits",
                    "24": "reverse_bits"
                },
                "param_1": {
                    "24": "input",
                    "2": "value",
                    "1": "number",
                    "4": "input_value"
                },
                "param_4": {
                    "3": "flag",
                    "10": "mask",
                    "5": "param4",
                    "2": "unused_param3",
                    "4": "unused3",
                    "1": "byte_mask"
                },
                "uVar1": {
                    "2": "sign_extension",
                    "1": "highest_bit",
                    "4": "msb",
                    "6": "bit31"
                },
                "uVar2": {
                    "1": "result",
                    "7": "temp",
                    "4": "shifted_input",
                    "3": "output"
                },
                "uVar3": {
                    "1": "result_high_bits",
                    "7": "result_high",
                    "14": "result"
                },
                "uVar4": {
                    "1": "shifted_val",
                    "2": "shifted_bits",
                    "3": "temp2",
                    "5": "shift_amount",
                    "6": "shifted_input"
                },
                "uVar5": {
                    "1": "tmp",
                    "3": "temp",
                    "2": "temp3",
                    "4": "temp2"
                },
                "iVar6": {
                    "9": "count",
                    "1": "lz_count",
                    "4": "leading_zeros",
                    "2": "shift_count",
                    "11": "bit_count"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "shifted_amount",
                    "7": "shift_amount"
                },
                "in_r12": {
                    "1": "diff2",
                    "9": "remaining_bits",
                    "2": "bit_count",
                    "4": "remainder"
                },
                "bVar8": {
                    "1": "is_bit_count_less_than32",
                    "2": "condition1",
                    "6": "is_zero",
                    "4": "is_negative"
                },
                "bVar9": {
                    "1": "should_return",
                    "3": "is_masked",
                    "7": "is_zero",
                    "2": "condition1"
                },
                "bVar10": {
                    "1": "is_shift_valid",
                    "2": "condition2",
                    "4": "is_negative"
                },
                "param_2": {
                    "6": "param2",
                    "1": "var2",
                    "4": "unused1",
                    "2": "unused_param"
                },
                "param_3": {
                    "1": "unknown2",
                    "6": "param3",
                    "2": "unused_param2",
                    "5": "unused2"
                },
                "uVar13": {
                    "1": "result"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "uVar6": {
                    "1": "temp2"
                },
                "F_08000418": {
                    "1": "reverse_bits"
                },
                "input": {
                    "1": ""
                },
                "signExtension": {
                    "1": ""
                },
                "shiftedInput": {
                    "1": ""
                },
                "resultHigh": {
                    "1": ""
                },
                "shiftAmount": {
                    "1": ""
                },
                "inputDouble": {
                    "1": ""
                },
                "leadingZeros": {
                    "1": ""
                },
                "shifted": {
                    "1": ""
                },
                "shiftedHigh": {
                    "1": ""
                },
                "shiftedEqZero": {
                    "1": ""
                },
                "eq_ff000000": {
                    "1": ""
                },
                "overflow": {
                    "1": ""
                }
            }
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_result_080004c8",
            "code": "\nulonglong calculate_result_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = FUN_080006a4();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_input"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080004c8": {
                    "1": "calculate_floating_point",
                    "5": "calculate_product",
                    "2": "perform_calculation",
                    "10": "calculate_result"
                },
                "param_1": {
                    "1": "first_param",
                    "3": "value1",
                    "21": "input1"
                },
                "param_2": {
                    "1": "float_part2",
                    "21": "input2",
                    "3": "value2"
                },
                "param_3": {
                    "1": "third_param",
                    "3": "value3",
                    "20": "input3"
                },
                "param_4": {
                    "1": "fourth_param",
                    "3": "value4",
                    "20": "input4"
                },
                "uVar1": {
                    "2": "product1",
                    "1": "result32bit",
                    "4": "temp1",
                    "11": "result1",
                    "8": "result"
                },
                "lVar2": {
                    "2": "product2",
                    "1": "sum",
                    "4": "temp2",
                    "11": "result2"
                },
                "uVar3": {
                    "1": "masked_input1",
                    "11": "temp1",
                    "4": "temp3",
                    "2": "temp_var1"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "temp_var2",
                    "4": "temp4",
                    "11": "temp2"
                },
                "iVar5": {
                    "1": "temp_result3",
                    "4": "temp5",
                    "2": "temp_var3",
                    "10": "temp3",
                    "5": "sum"
                },
                "uVar6": {
                    "1": "temp_d",
                    "4": "temp6",
                    "2": "difference",
                    "10": "temp4"
                },
                "unaff_r5": {
                    "7": "temp5",
                    "1": "input4_upper",
                    "4": "temp7"
                },
                "uVar7": {
                    "3": "temp5",
                    "1": "lower_value",
                    "7": "temp6",
                    "4": "temp8",
                    "2": "u_var7"
                },
                "uVar8": {
                    "1": "temp_var6",
                    "3": "temp6",
                    "7": "temp7",
                    "2": "temp3",
                    "4": "temp9"
                },
                "bVar9": {
                    "1": "flag_a",
                    "3": "condition1",
                    "17": "flag1",
                    "6": "is_zero"
                },
                "bVar10": {
                    "2": "is_negative",
                    "1": "flag_b",
                    "3": "condition2",
                    "17": "flag2"
                },
                "bVar11": {
                    "2": "is_negative",
                    "1": "is_borrow",
                    "17": "flag3",
                    "3": "condition3"
                },
                "uVar12": {
                    "1": "concatenated",
                    "2": "concatenated_input",
                    "8": "combined_input",
                    "5": "combined_inputs"
                }
            }
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "reverse_bits_080006a4",
            "code": "\nulonglong reverse_bits_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit_3;\n  uint temp_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input4 >> 0x14;\n  if (temp1 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      temp_4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp_4;\n      if (bit_3 != 0) {\n        result CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit_3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit_3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp_4 = input2;\n  if (((!is_zero) && ((temp1 != bit_5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input1 = input3, temp_4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    result (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result CONCAT44(temp_4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "reverse_bits_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "bit_3",
                "uVar3": "temp_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080006a4": {
                    "1": "reversed_bit_manipulation",
                    "2": "reverse_operation",
                    "5": "reverse_bits"
                },
                "param_1": {
                    "11": "input_1",
                    "1": "input_a",
                    "2": "num1",
                    "15": "input1"
                },
                "param_2": {
                    "16": "input2",
                    "1": "operand2",
                    "2": "num2",
                    "11": "input_2"
                },
                "param_3": {
                    "11": "input_3",
                    "1": "operand3",
                    "16": "input3",
                    "2": "num3"
                },
                "param_4": {
                    "1": "operand4",
                    "11": "input_4",
                    "2": "num4",
                    "16": "input4"
                },
                "uVar1": {
                    "1": "bit1_mask",
                    "2": "temp3",
                    "3": "bit_1",
                    "5": "bit1"
                },
                "unaff_r4": {
                    "5": "bit2",
                    "1": "temp2",
                    "3": "bit_2",
                    "8": "temp1",
                    "2": "temp_2"
                },
                "uVar2": {
                    "3": "temp3",
                    "1": "result",
                    "2": "shifted_input_4"
                },
                "uVar3": {
                    "1": "result2",
                    "3": "temp4",
                    "2": "bit4"
                },
                "in_r12": {
                    "3": "bit_5",
                    "1": "bit4",
                    "2": "constant_value"
                },
                "bVar4": {
                    "2": "flag",
                    "1": "is_equal",
                    "24": "is_zero"
                },
                "return": {
                    "1": "result"
                }
            }
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculate_floating_point_0800071c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_0800088a();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800071c": {
                    "2": "calculate_value",
                    "3": "calculate_result",
                    "14": "calculate_floating_point"
                },
                "param_1": {
                    "2": "sign_bit",
                    "8": "sign",
                    "1": "input_param",
                    "3": "value1",
                    "10": "input1"
                },
                "param_2": {
                    "1": "param_a",
                    "10": "input2",
                    "3": "value2",
                    "6": "exponent",
                    "2": "input_2"
                },
                "param_3": {
                    "2": "mantissa_bits",
                    "1": "low",
                    "3": "value3",
                    "10": "input3"
                },
                "param_4": {
                    "4": "mantissa2",
                    "1": "flags2",
                    "2": "input_4",
                    "3": "value4",
                    "10": "input4"
                },
                "uVar1": {
                    "1": "result",
                    "18": "temp1",
                    "2": "result1"
                },
                "uVar2": {
                    "1": "exponent_bits2",
                    "2": "temp_2",
                    "18": "temp2"
                },
                "uVar3": {
                    "2": "temp_3",
                    "1": "mantissa_b",
                    "18": "temp3"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "temp_4",
                    "18": "temp4"
                },
                "uVar5": {
                    "18": "temp5",
                    "2": "temp1",
                    "1": "exponent_d"
                },
                "uVar6": {
                    "2": "temp2",
                    "1": "result_6",
                    "18": "temp6"
                },
                "uVar7": {
                    "1": "u_var7",
                    "2": "temp_7",
                    "18": "temp7"
                },
                "iVar8": {
                    "2": "temp_8",
                    "1": "difference_exponents",
                    "11": "temp8",
                    "10": "difference"
                },
                "uVar9": {
                    "1": "normalized_exponent",
                    "2": "temp_9",
                    "12": "temp9"
                },
                "unaff_r5": {
                    "1": "exponent",
                    "2": "temp_10",
                    "3": "unaff_r5",
                    "9": "temp10"
                },
                "uVar10": {
                    "2": "temp9",
                    "1": "value4",
                    "9": "temp11",
                    "4": "temp10"
                },
                "uVar11": {
                    "1": "temp10",
                    "4": "temp11",
                    "2": "temp_12",
                    "9": "temp12"
                },
                "uVar12": {
                    "1": "temp10",
                    "2": "temp_13",
                    "5": "temp12",
                    "9": "temp13"
                },
                "uVar13": {
                    "2": "u_var13",
                    "1": "value7",
                    "9": "temp14",
                    "3": "temp13"
                },
                "bVar14": {
                    "6": "condition1",
                    "2": "flag_1",
                    "10": "flag1",
                    "1": "condition_1",
                    "8": "is_zero"
                },
                "bVar15": {
                    "1": "condition_2",
                    "6": "condition2",
                    "2": "flag_2",
                    "10": "flag2",
                    "5": "is_equal"
                },
                "bVar16": {
                    "1": "condition_3",
                    "2": "flag_3",
                    "10": "flag3",
                    "3": "carry",
                    "6": "condition3"
                },
                "uVar17": {
                    "1": "concatenated",
                    "2": "output",
                    "9": "result"
                },
                "bVar17": {
                    "1": "is_carry",
                    "2": "flag4"
                },
                "uVar18": {
                    "2": "result_high",
                    "1": "result"
                },
                "uVar19": {
                    "2": "result2",
                    "1": "shift_count"
                },
                "uVar20": {
                    "1": "result3"
                },
                "uVar21": {
                    "1": "result4"
                },
                "uVar22": {
                    "1": "result5"
                },
                "uVar23": {
                    "1": "result6"
                }
            }
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "reverse_bits_0800088a",
            "code": "\nulonglong reverse_bits_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp_1;\n  uint bit2;\n  uint bit3;\n  uint mask;\n  bool is_zero;\n  \n  bit2 = mask & input4 >> 0x14;\n  bit3 = input2;\n  if (temp_1 != mask || bit2 != mask) {\n    if (temp_1 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != mask)\n         ) {\nreturn_case_1:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == mask) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_case_2:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp_1 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return combine_64_bit_number(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return combine_64_bit_number(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_case_1;\n      if ((input3 | input4 << 1) != 0) goto return_case_2;\n    }\n  }\n  return combine_64_bit_number(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "reverse_bits_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "in_r12": "mask",
                "unaff_r4": "temp_1",
                "bVar4": "is_zero",
                "LAB_080006fc": "return_case_1",
                "LAB_080006c0": "return_case_2",
                "CONCAT44": "combine_64_bit_number"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800088a": {
                    "1": "calculate_double_bit_pattern",
                    "7": "reverse_bits",
                    "2": "decode_float"
                },
                "param_1": {
                    "1": "first_parameter",
                    "8": "input_1",
                    "2": "value1",
                    "13": "input1"
                },
                "param_2": {
                    "13": "input2",
                    "1": "second_parameter",
                    "8": "input_2",
                    "2": "value2"
                },
                "param_3": {
                    "8": "input_3",
                    "1": "fraction",
                    "2": "value3",
                    "13": "input3"
                },
                "param_4": {
                    "1": "quotient",
                    "8": "input_4",
                    "2": "value4",
                    "13": "input4"
                },
                "uVar1": {
                    "1": "bit_source",
                    "3": "bit_1",
                    "2": "bit_check_1",
                    "11": "bit1"
                },
                "uVar2": {
                    "1": "temp3",
                    "6": "bit2",
                    "2": "temp_2",
                    "4": "temp2",
                    "3": "temp_4"
                },
                "uVar3": {
                    "1": "bit_shifted_input2",
                    "2": "bit4",
                    "3": "temp_5",
                    "6": "bit3",
                    "4": "temp3"
                },
                "in_r12": {
                    "6": "mask",
                    "1": "bit_5",
                    "2": "constant_r12",
                    "3": "temp_2",
                    "5": "constant"
                },
                "unaff_r4": {
                    "2": "constant",
                    "1": "bit4",
                    "3": "bit2",
                    "5": "temp_1",
                    "4": "temp1"
                },
                "bVar4": {
                    "2": "temp_6",
                    "1": "temp_var6",
                    "25": "is_zero"
                },
                "LAB_080006fc": {
                    "1": "label_return_double_bit_pattern",
                    "2": "return_case_1"
                },
                "LAB_080006c0": {
                    "1": "label_return_single_bit_pattern",
                    "2": "return_case_2"
                },
                "CONCAT44": {
                    "1": "combine_64_bit_number"
                }
            }
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "compare_parameters_080008fc",
            "code": "\nuint compare_parameters_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "compare_parameters_080008fc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "is_negative"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080008fc": {
                    "1": "compare_and_check",
                    "5": "check_parameters",
                    "2": "check_params_equality",
                    "4": "check_params",
                    "7": "compare_parameters",
                    "3": "check_equality"
                },
                "param_1": {
                    "2": "input_1",
                    "1": "first_parameter",
                    "5": "value_1",
                    "3": "first_param",
                    "12": "value1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "3": "second_param",
                    "5": "value_2",
                    "2": "input_2",
                    "13": "value2"
                },
                "param_3": {
                    "2": "input_3",
                    "3": "third_param",
                    "1": "input3",
                    "13": "value3",
                    "5": "value_3"
                },
                "param_4": {
                    "5": "value_4",
                    "1": "input4",
                    "2": "input_4",
                    "3": "d",
                    "12": "value4"
                },
                "uVar1": {
                    "1": "difference",
                    "7": "xor_result",
                    "2": "temp",
                    "14": "result"
                },
                "bVar2": {
                    "2": "is_equal",
                    "1": "is_value_zero",
                    "16": "is_zero",
                    "3": "are_values_zero"
                },
                "bVar3": {
                    "1": "is_result_zero",
                    "8": "is_negative",
                    "3": "is_less_or_equal",
                    "2": "is_param4_less_than_param2"
                },
                "<original_function_name>": {
                    "1": "check_for_duplications"
                },
                "<param_1>": {
                    "1": "input_1"
                },
                "<param_2>": {
                    "1": "input_2"
                },
                "<param_3>": {
                    "1": "input_3"
                },
                "<param_4>": {
                    "1": "input_4"
                }
            }
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_function_08000978",
            "code": "\nvoid execute_function_08000978(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_08000988(arg3,arg4,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_function_08000978",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000978": {
                    "1": "execute_function_with_params",
                    "17": "execute_function",
                    "2": "call_sub_functions"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input_param_1",
                    "3": "argument1",
                    "7": "arg1",
                    "4": "param1",
                    "6": "input1"
                },
                "param_2": {
                    "4": "param2",
                    "3": "argument2",
                    "6": "input2",
                    "1": "param_2",
                    "2": "input_2",
                    "7": "arg2"
                },
                "param_3": {
                    "2": "param_3",
                    "1": "third_param",
                    "4": "input3",
                    "7": "arg3",
                    "3": "argument3"
                },
                "param_4": {
                    "4": "input4",
                    "1": "process_parameter4",
                    "2": "input_param_4",
                    "3": "argument4",
                    "7": "arg4"
                },
                "FUN_08000988": {
                    "1": "initialize_function",
                    "5": "process_data",
                    "8": "sub_function",
                    "3": "execute_sub_function"
                }
            }
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "initialize_08000988",
            "code": "\nundefined4 initialize_08000988(undefined4 input)\n\n{\n  FUN_080008fc();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000988": "initialize_08000988",
                "param_1": "input"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000988": {
                    "11": "initialize",
                    "1": "perform_initialization",
                    "7": "execute_and_return"
                },
                "param_1": {
                    "12": "input",
                    "1": "user_input",
                    "4": "input_value",
                    "2": "input_data",
                    "8": "input_param"
                },
                "FUN_080008fc": {
                    "2": "perform_action",
                    "8": "process_data",
                    "1": "perform_sub_operations",
                    "15": "perform_operation"
                },
                "param_2": {
                    "3": "operand1",
                    "1": "param_a"
                },
                "param_3": {
                    "3": "operand_2",
                    "1": "op_param_2"
                },
                "param_4": {
                    "3": "operand_3",
                    "1": "action_param3"
                }
            }
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_if_nonzero_08000998",
            "code": "\nbool check_if_nonzero_08000998(void)\n\n{\n  char result;\n  \n  FUN_08000988();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_if_nonzero_08000998",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000998": {
                    "1": "check_non_zero_value",
                    "2": "is_character_non_null",
                    "3": "check_if_nonzero"
                },
                "in_ZR": {
                    "1": "is_not_zero",
                    "2": "is_initialized",
                    "3": "is_not_null",
                    "5": "input_char",
                    "6": "result"
                },
                "FUN_08000988": {
                    "1": "call_sub_function"
                },
                "param_1": {
                    "1": "system_initialization_parameter"
                }
            }
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_null_terminated_080009ac",
            "code": "\nbool check_if_null_terminated_080009ac(void)\n\n{\n  char input_char;\n  \n  FUN_08000988();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_null_terminated_080009ac",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009ac": {
                    "2": "check_if_string_empty",
                    "1": "is_null_terminator",
                    "3": "is_null_terminated",
                    "4": "check_if_null_terminated"
                },
                "in_CY": {
                    "1": "cy",
                    "14": "input_char",
                    "10": "input_character",
                    "2": "input_cy"
                },
                "FUN_08000988": {
                    "3": "initialize_variables",
                    "1": "initialize_subfunctions"
                }
            }
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_conditions_080009c0",
            "code": "\nbool check_conditions_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000988();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_conditions_080009c0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009c0": {
                    "2": "check_carry_zero",
                    "1": "check_carry_and_zero_flag",
                    "3": "check_cy_and_zr",
                    "7": "check_conditions",
                    "5": "check_flags"
                },
                "in_ZR": {
                    "1": "condition_2",
                    "2": "zero_result",
                    "4": "is_zero",
                    "16": "zero_flag"
                },
                "in_CY": {
                    "4": "is_carry",
                    "1": "condition_1",
                    "19": "carry_flag",
                    "2": "is_carry_flag"
                },
                "FUN_08000988": {
                    "4": "initialize_flags",
                    "1": "initialize_components",
                    "2": "initialize_variables"
                },
                "param_1": {
                    "1": "unused_param"
                }
            }
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_cy_and_zr_080009d4",
            "code": "\nbool check_cy_and_zr_080009d4(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000978();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_cy_and_zr_080009d4",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009d4": {
                    "1": "reverse_check",
                    "3": "check_cy_zr",
                    "13": "check_cy_and_zr",
                    "5": "check_conditions",
                    "2": "check_condition"
                },
                "in_CY": {
                    "2": "is_carry",
                    "1": "is_cy_set",
                    "15": "carry_flag"
                },
                "in_ZR": {
                    "1": "is_zr_true",
                    "4": "is_zero",
                    "13": "zero_flag"
                },
                "FUN_08000978": {
                    "1": "perform_initialization",
                    "3": "initialize_parameters"
                },
                "param_1": {
                    "1": "arg1"
                },
                "param_2": {
                    "1": "arg2"
                },
                "param_3": {
                    "1": "arg3"
                },
                "param_4": {
                    "1": "unused_param_4"
                }
            }
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_if_null_terminated_080009e8",
            "code": "\nbool check_if_null_terminated_080009e8(void)\n\n{\n  char input_character;\n  \n  FUN_08000978();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_if_null_terminated_080009e8",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009e8": {
                    "1": "is_null_terminated",
                    "3": "check_if_string_empty",
                    "2": "check_if_input_empty",
                    "6": "check_if_null_terminated"
                },
                "in_CY": {
                    "1": "input_cy",
                    "3": "character",
                    "11": "input_char",
                    "12": "input_character",
                    "2": "cy_value"
                },
                "FUN_08000978": {
                    "2": "initialize_variables",
                    "1": "initialize_subfunctions"
                }
            }
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_floating_point_080009fc",
            "code": "\nuint calculate_floating_point_080009fc(uint input_value,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = input2 * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input_value | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != has_overflow) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input_value >> (temp1 & 0xff);\n    if (input_value << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input_value = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input_value >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input_value * 8);\n  if (input_value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_080009fc",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "SCARRY4": "is_carry",
                "SCARRY4(uVar3,0x2e00000)": "has_overflow"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009fc": {
                    "1": "calculate_floating_point_value",
                    "2": "convert_to_float",
                    "5": "calculate_float",
                    "8": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_a",
                    "8": "input_value",
                    "2": "input_float",
                    "4": "input1"
                },
                "param_2": {
                    "1": "input_float2",
                    "4": "bit_pattern",
                    "3": "input_flag",
                    "2": "shift_amount"
                },
                "uVar1": {
                    "1": "result_bits",
                    "28": "result"
                },
                "uVar2": {
                    "1": "double_bit_pattern",
                    "3": "multiplied_value",
                    "2": "temp_var",
                    "8": "temp1",
                    "4": "temp_var1"
                },
                "uVar3": {
                    "1": "temp_b",
                    "2": "modified_bit_pattern",
                    "6": "temp_var2",
                    "8": "temp2"
                },
                "in_r12": {
                    "1": "adjusted_bit_pattern_with_offset",
                    "5": "temp_var3",
                    "2": "temp_value",
                    "8": "temp3"
                },
                "bVar4": {
                    "1": "is_result_zero",
                    "21": "is_zero"
                },
                "bVar5": {
                    "1": "is_below_threshold",
                    "2": "is_less_than_threshold",
                    "6": "is_less_than"
                },
                "SCARRY4": {
                    "1": "carry_overflow"
                },
                "uVar2 >> 0x15": {
                    "1": "right_shifted_product"
                },
                "param_2 << 0xc": {
                    "1": "multiplier_shifted"
                },
                "param_2 & 0x40000000": {
                    "1": "is_negative_multiplier"
                },
                "param_2 & 0x80000000": {
                    "1": "is_negative_result"
                },
                "SCARRY4(uVar3,0x2e00000)": {
                    "1": "has_overflow"
                },
                "uVar2 + 0x92e00000": {
                    "1": "normalized_product"
                },
                "uVar2 + 0x92e00000 >> 0x15": {
                    "1": "normalized_shifted_product"
                },
                "uVar2 + 0x90000000": {
                    "1": "offset_with_base_value"
                },
                "uVar2 * 2": {
                    "1": "double_of_product"
                },
                "uVar1 | param_2 << (0x20 - uVar2 & 0xff)": {
                    "1": "modified_input_value"
                },
                "param_2 & 0x1fffff | 0x100000": {
                    "1": "modified_multiplier"
                },
                "param_1 << (0x20 - uVar2 & 0xff)": {
                    "1": "left_shifted_value"
                },
                "uVar1 | uVar3 << (0x20 - uVar2 & 0xff)": {
                    "1": "modified_result"
                },
                "param_1 * 8 == 0x80000000": {
                    "1": "is_result_overflow"
                }
            }
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_float_08000aa4",
            "code": "\nuint calculate_float_08000aa4(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shift_amount;\n  int shift_amount2;\n  uint result1;\n  uint result2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool is_equal;\n  \n  result1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  is_equal = result1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result1 == input4;\n  }\n  shift_amount = (int)result1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shift_amount == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shift_amount2 = (int)(input2 << 1) >> 0x18;\n    if (shift_amount == -1 || shift_amount2 == -1) {\n      result1 = result1;\n      if (shift_amount == -1) {\n        result1 = input1;\n      }\n      if (shift_amount != -1 || shift_amount2 != -1) {\n        result1 = result1;\n      }\n      is_equal = (result1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (result1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result1 == result1;\n      }\n      if (!is_equal) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ result1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = result1;\n      }\n      return input1;\n    }\n    if (input1 != result1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      result1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  is_equal = difference != 0;\n  result2 = result1;\n  if (is_equal && result1 <= input4) {\n    result2 = result1 + difference;\n  }\n  if (is_equal && result1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (is_equal && result1 <= input4) {\n    input1 = input1 ^ result1;\n  }\n  if (is_equal && result1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (result2 == difference) {\n    result2 = result2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    is_equal = result2 != 0;\n    result2 = -result2;\n    result1 = -result1 - (uint)is_equal;\n  }\n  if (result1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    result1 = result1 * 2 + (uint)(result1 != 0);\n    result1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = leading_zero_count(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        result1 = result1 >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (result1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    result1 = result2 - 1;\n    if (0xffffff < result1) {\n      result1 = result1 & 1;\n      result1 = result1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = result2;\n      if (0xfd < result2) goto LAB_08000bde;\n    }\n  }\n  result1 = result1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_float_08000aa4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift_amount",
                "iVar2": "shift_amount2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "is_equal",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000aa4": {
                    "1": "calculate_result",
                    "12": "calculate_float",
                    "6": "calculate_floating_point"
                },
                "param_1": {
                    "2": "input_float",
                    "1": "input_a",
                    "12": "input1"
                },
                "param_2": {
                    "2": "input_2",
                    "1": "precision",
                    "12": "input2"
                },
                "param_3": {
                    "1": "input_val3",
                    "2": "param_3",
                    "3": "input_flag",
                    "10": "input3"
                },
                "param_4": {
                    "1": "input_uint",
                    "2": "result",
                    "10": "input4"
                },
                "iVar1": {
                    "1": "shifted_input_a",
                    "3": "shift_amount1",
                    "2": "shifted_input1",
                    "4": "shift_amount"
                },
                "iVar2": {
                    "1": "integer_part",
                    "2": "second_shift_amount",
                    "3": "shift_amount2"
                },
                "uVar3": {
                    "1": "root",
                    "3": "result1",
                    "2": "complement_input2"
                },
                "uVar4": {
                    "1": "masked_shifted_input_float",
                    "2": "temp2",
                    "3": "result2"
                },
                "uVar5": {
                    "1": "float1_shifted",
                    "5": "result1",
                    "2": "temp1",
                    "3": "shifted_input1"
                },
                "uVar6": {
                    "1": "updated_shifted_input1",
                    "2": "u_var6",
                    "4": "result2"
                },
                "uVar7": {
                    "1": "count2",
                    "2": "shift_difference",
                    "14": "difference"
                },
                "bVar8": {
                    "3": "is_true",
                    "1": "comparison_result",
                    "4": "is_zero",
                    "2": "is_condition_met",
                    "13": "is_equal"
                },
                "uVar5_tmp1": {
                    "1": "input1_shifted"
                },
                "uVar3_tmp1": {
                    "1": "input1_shifted_tmp"
                },
                "uVar5_tmp2": {
                    "1": "input1_shifted_tmp1"
                },
                "uVar3_tmp2": {
                    "1": "input1_shifted_tmp2"
                },
                "uVar5_tmp3": {
                    "1": "input1_shifted_tmp3"
                },
                "uVar7_tmp": {
                    "1": "difference_tmp"
                },
                "uVar3_tmp3": {
                    "1": "input1_shifted_tmp4"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                }
            }
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_float_08000aa8",
            "code": "\nuint calculate_float_08000aa8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result;\n  uint result2;\n  uint temp1;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    param4 = input2 << 1;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == param4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)param4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - result2;\n  is_zero = difference != 0;\n  temp1 = result2;\n  if (is_zero && result2 <= param4) {\n    temp1 = result2 + difference;\n  }\n  if (is_zero && result2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (temp1 == difference) {\n    result = result ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result != 0;\n    result = -result;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = leading_zero_count(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)difference < (int)temp1) {\n        result2 = result2 >> (-(difference - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = temp1 - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = temp1;\n      if (0xfd < temp1) goto LAB_08000bde;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "result",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "difference",
                "bVar7": "is_zero",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000aa8": {
                    "1": "perform_arithmetic_operation",
                    "2": "calculate_float_value",
                    "13": "calculate_float",
                    "6": "calculate_floating_point"
                },
                "param_1": {
                    "2": "input_value1",
                    "1": "numerator",
                    "3": "input_float1",
                    "6": "num1",
                    "11": "input1"
                },
                "param_2": {
                    "11": "input2",
                    "2": "value2",
                    "1": "value_2",
                    "3": "input_float2",
                    "6": "num2"
                },
                "param_3": {
                    "2": "input_flag",
                    "8": "param3",
                    "1": "third_param",
                    "6": "input3"
                },
                "param_4": {
                    "1": "value2",
                    "7": "param4",
                    "2": "comparison_param",
                    "4": "result",
                    "6": "input4"
                },
                "iVar1": {
                    "2": "shifted_value1",
                    "1": "shift_val1",
                    "3": "shift1",
                    "6": "shifted_input1"
                },
                "iVar2": {
                    "1": "shift_count2",
                    "4": "shift2",
                    "2": "shifted_value2",
                    "6": "shifted_input2"
                },
                "uVar3": {
                    "1": "num1_temp",
                    "5": "result",
                    "2": "temp1"
                },
                "uVar4": {
                    "1": "result",
                    "2": "shifted_result",
                    "4": "result2"
                },
                "uVar5": {
                    "1": "difference",
                    "2": "shift_amount",
                    "4": "temp1"
                },
                "uVar6": {
                    "1": "abs_difference",
                    "2": "diff",
                    "4": "temp2",
                    "17": "difference"
                },
                "bVar7": {
                    "1": "equal_exponents",
                    "15": "is_zero",
                    "2": "is_condition_met",
                    "9": "is_equal"
                },
                "LZCOUNT()": {
                    "1": "leading_zeros_count"
                },
                "LZCOUNT": {
                    "2": "leading_zero_count",
                    "1": "leading_zeros_count"
                },
                "uVar8": {
                    "1": "temp1"
                },
                "uVar9": {
                    "1": "temp2"
                },
                "uVar10": {
                    "1": "temp3"
                },
                "uVar11": {
                    "1": "temp4"
                }
            }
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_value_08000c08",
            "code": "\nuint calculate_value_08000c08(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  leading_zeros = constant + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_value_08000c08",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c08": {
                    "7": "calculate_value",
                    "1": "count_bits_and_shift",
                    "5": "calculate_result",
                    "2": "reverse_bits"
                },
                "param_1": {
                    "14": "input",
                    "3": "input_number",
                    "1": "compressed_value",
                    "13": "input_value"
                },
                "uVar1": {
                    "4": "leading_zeroes",
                    "17": "leading_zeros",
                    "1": "leading_zeros_count",
                    "3": "leading_zero_count",
                    "2": "result"
                },
                "uVar2": {
                    "1": "shifted_input",
                    "3": "shift_value",
                    "19": "shift_amount"
                },
                "iVar3": {
                    "3": "constant_value",
                    "5": "intermediate_value",
                    "2": "multiplier",
                    "1": "product",
                    "12": "constant"
                },
                "uVar4": {
                    "2": "comparison_result",
                    "1": "result",
                    "7": "mask",
                    "3": "temp"
                },
                "uVar2_old": {
                    "1": "temp_shift_amount"
                },
                "uVar1_old": {
                    "1": "temp_leading_zeros"
                },
                "uVar4_old": {
                    "1": "temp_overflow_check"
                },
                "uVar1_old_2": {
                    "1": "temp_leading_zeros2"
                },
                "uVar4_old_2": {
                    "1": "temp_overflow_check2"
                },
                "output": {
                    "1": "result"
                },
                "uVar2_temp": {
                    "1": "shift_amount_temp"
                },
                "uVar1_temp": {
                    "1": "shifted_input"
                },
                "uVar2_final": {
                    "1": "shift_amount_final"
                },
                "uVar1_final": {
                    "1": "leading_zeros"
                },
                "uVar5": {
                    "1": "result_value",
                    "4": "result"
                },
                "uVar6": {
                    "2": "mask"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_negative"
                },
                "uVar1 > 7": {
                    "2": "is_greater_than7"
                },
                "uVar1 - 8": {
                    "1": "shift_result"
                },
                "param_1 << uVar1 + 0x18": {
                    "1": "left_shifted_value"
                },
                "param_1 >> (0x20 - (uVar1 + 0x18) & 0xff)": {
                    "1": "right_shifted_value"
                },
                "uVar2 & 0x7fffffff": {
                    "1": "absolute_value"
                },
                "uVar2 >> 0x1f": {
                    "1": "is_negative"
                },
                "(int)uVar2 >> 0x1f": {
                    "1": "integer_negative"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_bit_set"
                },
                "uVar2 & 0xff": {
                    "1": "mask"
                },
                "param_1 << (uVar1 + 0x18)": {
                    "1": "shifted_input"
                },
                "(param_1 >> (0x20 - (uVar1 + 0x18) & 0xff)) - ((int)shiftedInput >> 0x1f)": {
                    "1": "calculation1"
                },
                "(uVar2 & 0xff)": {
                    "1": "mask2"
                },
                "uVar1_new": {
                    "1": "leading_zeros_minus_8"
                },
                "uVar4_new": {
                    "1": "mask"
                },
                "uVar1_new_2": {
                    "1": "leading_zeros"
                },
                "uVar2_new": {
                    "1": "shift_amount_plus_24"
                },
                "uVar1_new_3": {
                    "1": "leading_zeros"
                },
                "uVar1_new_4": {
                    "1": "leading_zeros_plus_24"
                },
                "uVar1_orig": {
                    "1": "<unchanged>"
                },
                "uVar2_orig": {
                    "1": "<unchanged>"
                },
                "iVar3_orig": {
                    "1": "<unchanged>"
                },
                "uVar4_orig": {
                    "1": "<unchanged>"
                },
                "uVar10": {
                    "1": "new_value"
                },
                "uVar7": {
                    "1": "is_negative"
                },
                "iVar3_new": {
                    "1": "constant"
                },
                "uVar1_final_new": {
                    "1": "leading_zeros"
                },
                "uVar2_byte": {
                    "1": "shift_amount_byte"
                },
                "uVar1_byte": {
                    "1": "leading_zeros_byte"
                },
                "uVar2_shifted": {
                    "1": "shift_amount_shifted"
                },
                "param_1_shifted": {
                    "1": "input_number_shifted"
                },
                "uVar2_shifted_negated": {
                    "1": "shift_amount_shifted_negated"
                },
                "uVar2_shifted_masked": {
                    "1": "shift_amount_shifted_masked"
                },
                "uVar2_shifted_normalized": {
                    "1": "shift_amount_shifted_normalized"
                }
            }
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "count_leading_zeros_08000c10",
            "code": "\nuint count_leading_zeros_08000c10(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros_08000c10(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "count_leading_zeros_08000c10",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c10": {
                    "1": "decode_integer",
                    "3": "reverse_bits",
                    "4": "decode_unsigned_integer",
                    "5": "count_leading_zeros",
                    "2": "count_set_bits"
                },
                "param_1": {
                    "13": "input",
                    "1": "integer",
                    "8": "input_value",
                    "2": "num",
                    "4": "number"
                },
                "uVar1": {
                    "1": "leading_zero_count",
                    "5": "leading_zeroes",
                    "16": "leading_zeros",
                    "2": "num_set_bits"
                },
                "uVar2": {
                    "2": "shifted_bits",
                    "1": "shift_count",
                    "18": "shift_amount",
                    "4": "shift"
                },
                "uVar3": {
                    "17": "sign_bit",
                    "3": "is_negative",
                    "1": "signed_mask",
                    "4": "sign"
                },
                "iVar4": {
                    "1": "contribution",
                    "4": "adjusted_value",
                    "23": "result"
                },
                "uVar2_2": {
                    "1": "shifted_value"
                },
                "uVar3_2": {
                    "1": "result"
                },
                "uVar1_temp": {
                    "1": "mask1"
                },
                "uVar2_temp": {
                    "1": "mask2"
                },
                "uVar3_temp": {
                    "1": "mask3"
                },
                "uVar1_temp2": {
                    "1": "overflow_check"
                },
                "uVar2_temp2": {
                    "1": "overflow_mask"
                },
                "uVar1_2": {
                    "1": "mask"
                },
                "uVar3_3": {
                    "1": "result2"
                },
                "uVar2_3": {
                    "1": "shift_amount2"
                },
                "uVar3_4": {
                    "1": "result3"
                },
                "uParam_1": {
                    "1": "num"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                }
            }
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_float_08000cb8",
            "code": "\nuint calculate_float_08000cb8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int diff;\n  uint product;\n  int diff2;\n  uint temp;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  temp = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    is_zero = diff == 0;\n    diff2 = diff;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,diff);\n      diff2 = 0xff - diff;\n      is_zero = diff == 0xff;\n    }\n    if (!is_zero && diff2 < 0 == is_negative) {\n      result = result | diff * 0x800000;\n    }\n    if (!is_zero && diff2 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(diff,1);\n    temp = sum - 0x80;\n    is_zero = temp == 0;\n    exponent1 = temp;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp & 0x80000000 | result;\n    temp = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp,0xfd);\n    is_zero = temp == 0xfd;\n    exponent1 = temp - 0xfd;\n    if (temp < 0xfe) {\n      result = result + temp * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp + 0x19) < 0;\n    if (temp == 0xffffffe7 || is_zero != SCARRY4(temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp != 0xffffffe7 && is_zero == SCARRY4(temp,0x19)) {\n      exponent1 = (result << 1) >> (-temp & 0xff);\n      temp = result << (temp + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp << 1) == 0) {\n        exponent1 = exponent1 & ~(temp >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_float_08000cb8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "exponent1",
                "uVar2": "result",
                "uVar8": "temp",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "diff2",
                "lVar1": "product",
                "uVar6": "product"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000cb8": {
                    "1": "decode_float",
                    "10": "calculate_float",
                    "9": "calculate_floating_point"
                },
                "param_1": {
                    "2": "input_1",
                    "1": "input_a",
                    "3": "number1",
                    "6": "value1",
                    "13": "input1"
                },
                "param_2": {
                    "13": "input2",
                    "1": "num2",
                    "3": "number2",
                    "2": "input_2",
                    "6": "value2"
                },
                "param_3": {
                    "2": "flags",
                    "1": "bit_mask",
                    "9": "param3",
                    "6": "input3"
                },
                "param_4": {
                    "1": "temp2",
                    "9": "param4",
                    "3": "result",
                    "6": "input4"
                },
                "uVar3": {
                    "1": "shift_amount1",
                    "2": "shifted_value1",
                    "5": "exponent1",
                    "3": "shift1",
                    "4": "temp1"
                },
                "uVar2": {
                    "1": "float_result",
                    "25": "result"
                },
                "uVar8": {
                    "2": "temp3",
                    "1": "temp4",
                    "3": "temp"
                },
                "bVar9": {
                    "4": "condition1",
                    "2": "flag1",
                    "1": "check_condition",
                    "18": "is_zero",
                    "3": "is_zero1"
                },
                "bVar10": {
                    "2": "flag2",
                    "10": "is_negative",
                    "1": "has_carry",
                    "4": "condition2",
                    "3": "is_borrow"
                },
                "iVar4": {
                    "3": "shifted_sum",
                    "1": "sum_of_shifted_bits",
                    "2": "sum_shifted_inputs",
                    "14": "sum"
                },
                "iVar5": {
                    "1": "difference_shifted_inputs",
                    "2": "adjusted_sum",
                    "6": "diff",
                    "3": "difference"
                },
                "iVar7": {
                    "1": "updated_shift_amount1",
                    "3": "diff2",
                    "2": "difference"
                },
                "lVar1": {
                    "1": "result",
                    "3": "product"
                },
                "uVar6": {
                    "1": "shifted_result",
                    "4": "temp2",
                    "2": "multiplied_result",
                    "5": "product"
                },
                "uVar26": {
                    "1": "result_sign"
                },
                "uVar27": {
                    "1": "shifted_mantissa"
                },
                "uVar28": {
                    "1": "shifted_sign"
                },
                "uVar6_temp": {
                    "1": "product_low_temp"
                },
                "uVar2_temp": {
                    "1": "result_temp"
                },
                "uVar8_temp": {
                    "1": "msb_result_temp"
                },
                "bVar10_temp": {
                    "1": "overflow1_temp"
                },
                "iVar5_temp": {
                    "1": "diff_msb_temp"
                },
                "uVar8_shifted": {
                    "1": "msb_result_shifted"
                },
                "bVar9_temp": {
                    "1": "is_zero1_temp"
                },
                "uVar3_temp": {
                    "1": "msb1_temp"
                }
            }
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_float_08000e20",
            "code": "\nuint calculate_float_08000e20(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint sum;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        condition1 = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = signed_carry(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = signed_borrow(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow(sum,1);\n      sum = difference + 0x7e;\n      condition1 = sum == 0;\n      result = sum;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = temp1 <= temp2;\n      if (!condition1) {\n        temp2 = temp2 << 1;\n      }\n      sum = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        condition1 = temp1 >> 1 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = temp1 >> 2 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = temp1 >> 3 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        condition1 = temp2 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = signed_borrow(sum,0xfd);\n      condition1 = sum == 0xfd;\n      result = sum - 0xfd;\n      if (sum < 0xfe) {\n        input1 = input1 + sum * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(sum + 0x19) < 0;\n      if (sum == 0xffffffe7 || condition1 != signed_carry(sum,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (sum == 0xffffffe7 || condition1 != signed_carry(sum,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-sum & 0xff);\n      sum = input1 << (sum + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | sum << 1) == 0) {\n        result = result & ~(sum >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_float_08000e20",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "difference",
                "uVar4": "sum",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "SCARRY4": "signed_carry",
                "SBORROW4": "signed_borrow"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e20": {
                    "1": "floating_point_addition",
                    "2": "calculate_floating_point",
                    "10": "calculate_float"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "value1",
                    "8": "float1",
                    "9": "input1"
                },
                "param_2": {
                    "9": "input2",
                    "1": "second_operand",
                    "8": "float2",
                    "2": "value2"
                },
                "param_3": {
                    "1": "unknown_param",
                    "11": "param3",
                    "2": "unused_parameter",
                    "6": "input3"
                },
                "param_4": {
                    "1": "fractional_part_copy",
                    "11": "param4",
                    "2": "float4",
                    "6": "input4"
                },
                "uVar1": {
                    "1": "result",
                    "2": "quotient",
                    "4": "temp1"
                },
                "uVar2": {
                    "1": "loop_variable_2",
                    "2": "mask2",
                    "4": "temp2",
                    "3": "exponent1"
                },
                "iVar3": {
                    "2": "bit_difference",
                    "1": "loop_variable_3",
                    "3": "temp3",
                    "12": "difference"
                },
                "uVar4": {
                    "1": "u_var4",
                    "3": "temp4",
                    "2": "temp"
                },
                "iVar5": {
                    "1": "carry_flag",
                    "2": "temp2",
                    "3": "temp5",
                    "8": "sum"
                },
                "uVar6": {
                    "2": "final_result",
                    "1": "output_float",
                    "23": "result"
                },
                "bVar7": {
                    "1": "false_flag",
                    "2": "check1",
                    "8": "condition1",
                    "3": "condition_1",
                    "6": "is_zero"
                },
                "bVar8": {
                    "1": "is_condition_true2",
                    "2": "cond2",
                    "3": "flag2",
                    "8": "condition2"
                },
                "bVar9": {
                    "1": "overflow_condition",
                    "2": "cond3",
                    "3": "condition_3",
                    "7": "condition3"
                },
                "SCARRY4": {
                    "1": "signed_carry"
                },
                "SBORROW4": {
                    "1": "signed_borrow"
                }
            }
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_result_08000f68",
            "code": "\nuint calculate_result_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f68": {
                    "1": "binary_arithmetic_check",
                    "6": "check_overflow",
                    "4": "multiply_and_compare",
                    "2": "check_integer_overflow",
                    "7": "calculate_result",
                    "3": "check_overflow_and_sign"
                },
                "param_1": {
                    "1": "multiplier",
                    "14": "input_1",
                    "2": "number1",
                    "4": "input1",
                    "3": "input_value1"
                },
                "param_2": {
                    "6": "input2",
                    "3": "input_value2",
                    "1": "operand_b",
                    "2": "input_value_2",
                    "16": "input_2"
                },
                "bVar1": {
                    "23": "is_negative",
                    "1": "has_overflow",
                    "4": "is_negative_result"
                },
                "uVar2": {
                    "1": "multiplied_input1",
                    "3": "input_1_times_2",
                    "5": "input_1_doubled",
                    "2": "double_input1"
                },
                "uVar3": {
                    "1": "input_value2_twice",
                    "2": "double_input2",
                    "3": "input_2_times_2",
                    "5": "input_2_doubled"
                },
                "uVar4": {
                    "1": "combined_number",
                    "2": "combined_input_masked",
                    "4": "combined_input",
                    "7": "combined_inputs"
                },
                "bVar5": {
                    "1": "is_combined_bits_zero",
                    "3": "is_zero_result",
                    "25": "is_zero"
                },
                "return_var": {
                    "1": "result"
                },
                "param_1_shifted": {
                    "1": "output_1_shifted"
                },
                "param_1_combined": {
                    "1": "output_1_combined"
                },
                "param_1_result": {
                    "1": "output_1_result"
                },
                "param_1 | 1": {
                    "1": "output_value"
                },
                "param_1 ^ param_2": {
                    "1": "xor_result"
                },
                "param_1_times_2": {
                    "1": "input_1_times_2"
                },
                "param_1_xor_param_2": {
                    "1": "input_1_xor_input_2"
                },
                "param_1_minus_2_times_input_2": {
                    "1": "input_1_minus_2_times_input_2"
                },
                "param_2_right_shifted_31_bits": {
                    "1": "input_2_right_shifted_31_bits"
                },
                "combined_inputs": {
                    "1": "combined_inputs"
                },
                "inverted_param_2_right_shifted_31_bits": {
                    "1": "inverted_input_2_right_shifted_31_bits"
                },
                "output": {
                    "1": "result"
                },
                "return": {
                    "2": "result"
                },
                "return_val": {
                    "1": "result"
                }
            }
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "execute_function_08000fc8",
            "code": "\nvoid execute_function_08000fc8(undefined4 input1,undefined4 input2)\n\n{\n  FUN_08000fd0(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "execute_function_08000fc8",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000fc8": {
                    "1": "rearrange_parameters",
                    "2": "reverse_and_swap_params",
                    "9": "execute_function"
                },
                "param_1": {
                    "2": "param1",
                    "1": "reversed_param",
                    "5": "arg1",
                    "3": "first_param",
                    "7": "input1"
                },
                "param_2": {
                    "2": "input_2",
                    "1": "param_destination",
                    "7": "input2",
                    "3": "second_param",
                    "5": "arg2"
                },
                "FUN_08000fd0": {
                    "1": "swap_params",
                    "2": "copy_data",
                    "5": "call_sub_function"
                }
            }
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_params_08000fd0",
            "code": "\nundefined8 concatenate_params_08000fd0(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_08000f68();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_params_08000fd0",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000fd0": {
                    "2": "concatenate_values",
                    "14": "concatenate_params",
                    "7": "concatenate_parameters",
                    "1": "concatenate_u_ints"
                },
                "param_1": {
                    "2": "value1",
                    "1": "input_param_1",
                    "4": "input1",
                    "5": "first_parameter",
                    "9": "first_param"
                },
                "param_2": {
                    "1": "parameter_2",
                    "4": "input2",
                    "2": "value2",
                    "9": "second_param",
                    "5": "second_parameter"
                },
                "FUN_08000f68": {
                    "2": "perform_concatenation",
                    "1": "perform_operation",
                    "4": "combine_values",
                    "6": "combine_params",
                    "3": "concatenate_values"
                }
            }
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "is_cy_null_08000ff4",
            "code": "\nbool is_cy_null_08000ff4(void)\n\n{\n  char input_character;\n  \n  FUN_08000fd0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "is_cy_null_08000ff4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ff4": {
                    "1": "check_if_null_terminated",
                    "6": "is_cy_null",
                    "2": "check_if_empty",
                    "3": "is_null_terminated",
                    "5": "check_null_termination"
                },
                "in_CY": {
                    "1": "is_empty",
                    "8": "input_char",
                    "3": "cy",
                    "2": "char_input",
                    "11": "input_character"
                },
                "FUN_08000fd0": {
                    "1": "initialize_value",
                    "3": "initialize_cy"
                }
            }
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_if_null_terminated_08001030",
            "code": "\nbool check_if_null_terminated_08001030(void)\n\n{\n  char input_character;\n  \n  FUN_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_if_null_terminated_08001030",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001030": {
                    "2": "is_cy_null",
                    "1": "check_if_null_character",
                    "4": "check_null_termination",
                    "5": "check_if_input_is_empty",
                    "6": "check_if_null_terminated"
                },
                "in_CY": {
                    "1": "input_cy",
                    "13": "input_char",
                    "15": "input_character"
                },
                "FUN_08000fc8": {
                    "1": "call_subfunction"
                }
            }
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "reverse_bits_08001044",
            "code": "\nuint reverse_bits_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "reverse_bits_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001044": {
                    "1": "reverse_unsigned_number",
                    "3": "extract_bits",
                    "2": "calculate_shifted_value",
                    "7": "reverse_bits"
                },
                "param_1": {
                    "8": "input",
                    "1": "binary_number",
                    "16": "input_value",
                    "2": "value",
                    "3": "input_number"
                },
                "uVar1": {
                    "1": "shift_value",
                    "5": "shifted_value",
                    "15": "shift_amount",
                    "6": "shift_count",
                    "2": "result"
                }
            }
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copy_memory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_end_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint temp_size;\n  bool loop_condition;\n  \n  dest_end_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      temp_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = dest_end_ptr;\n          loop_condition = temp_size != 0;\n          temp_size = temp_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest_end_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto copy_remainder;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      temp_size = 4 - ((uint)destination & 3);\n      size = size - temp_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_end_ptr = dest_ptr;\n      source = src_ptr;\n      if ((temp_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest_end_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest_end_ptr = *source;\n    dest_end_ptr[1] = source[1];\n    dest_end_ptr[2] = source[2];\n    dest_end_ptr[3] = source[3];\n    dest_end_ptr[4] = source[4];\n    dest_end_ptr[5] = source[5];\n    dest_end_ptr[6] = source[6];\n    dest_end_ptr[7] = source[7];\n    dest_end_ptr[8] = source[8];\n    dest_end_ptr[9] = source[9];\n    dest_end_ptr[10] = source[10];\n    dest_end_ptr[0xb] = source[0xb];\n    dest_end_ptr[0xc] = source[0xc];\n    dest_end_ptr[0xd] = source[0xd];\n    dest_end_ptr[0xe] = source[0xe];\n    dest_end_ptr[0xf] = source[0xf];\n    dest_end_ptr = dest_end_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest_end_ptr = *source;\n      dest_end_ptr[1] = source[1];\n      dest_end_ptr[2] = source[2];\n      dest_end_ptr[3] = source[3];\n      dest_end_ptr = dest_end_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  temp_size = remaining_size + 0xc;\n  src_ptr = dest_end_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < temp_size;\n      temp_size = temp_size - 4;\n      dest_end_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ncopy_remainder:\n  if (temp_size + 4 != 0) {\n    dest_ptr = dest_end_ptr;\n    src_ptr = source;\n    if ((temp_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_end_ptr + 1);\n      *(undefined *)dest_end_ptr = *(undefined *)source;\n    }\n    if ((temp_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_end_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "temp_size",
                "bVar6": "loop_condition",
                "LAB_08001108": "copy_remainder"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001084": {
                    "1": "copy_and_pad_memory",
                    "2": "copy_data",
                    "27": "copy_memory"
                },
                "param_1": {
                    "21": "destination",
                    "10": "dest"
                },
                "param_2": {
                    "21": "source",
                    "10": "src"
                },
                "param_3": {
                    "1": "num_bytes",
                    "12": "length",
                    "18": "size"
                },
                "puVar1": {
                    "1": "dest_ptr1",
                    "22": "dest_ptr",
                    "7": "dst_ptr"
                },
                "puVar2": {
                    "1": "dst_ptr_end",
                    "2": "dest_end",
                    "4": "src_ptr",
                    "5": "dest_end_ptr",
                    "3": "dst_end_ptr"
                },
                "puVar3": {
                    "1": "temp_dest",
                    "18": "src_ptr",
                    "2": "src"
                },
                "uVar4": {
                    "1": "temp_length",
                    "15": "remaining_size",
                    "10": "remaining_length"
                },
                "uVar5": {
                    "1": "inner_loop_size",
                    "4": "copy_length",
                    "2": "copy_size",
                    "3": "temp_length"
                },
                "bVar6": {
                    "2": "flag",
                    "1": "is_remaining_length_valid",
                    "4": "is_remaining",
                    "10": "loop_condition"
                },
                "LAB_08001108": {
                    "1": "copy_loop",
                    "2": "copy_remainder"
                }
            }
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_parameters_08001170",
            "code": "\nundefined4 check_parameters_08001170(uint value1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((value1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_parameters_08001170",
                "param_1": "value1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001170": {
                    "13": "check_parameters",
                    "1": "check_validity",
                    "3": "check_parameters_validity",
                    "4": "check_params",
                    "2": "check_valid_params"
                },
                "param_1": {
                    "7": "input1",
                    "4": "value_1",
                    "1": "first_param",
                    "2": "number1"
                },
                "param_2": {
                    "7": "input_2",
                    "1": "second_param",
                    "2": "number2",
                    "4": "value_2",
                    "6": "value2"
                },
                "param_3": {
                    "7": "input3",
                    "1": "third_param",
                    "6": "value3",
                    "4": "value_3",
                    "2": "number3"
                },
                "param_4": {
                    "4": "value_4",
                    "2": "number4",
                    "7": "input4",
                    "1": "input_value_4",
                    "6": "value4"
                }
            }
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_result_0800119c",
            "code": "\nuint calculate_result_0800119c(uint input1,uint input2)\n\n{\n  uint shifted_value;\n  int offset;\n  uint shift_amount;\n  \n  offset = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    shifted_value = offset >> 0x15;\n    shift_amount = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_result_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shifted_value",
                "iVar2": "offset",
                "uVar3": "shift_amount"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800119c": {
                    "1": "convert_to_twos_complement",
                    "5": "calculate_result",
                    "2": "calculate_signed_division",
                    "3": "reverse_bits"
                },
                "param_1": {
                    "1": "input_a",
                    "7": "input_value",
                    "2": "dividend",
                    "9": "input1",
                    "4": "input_value1"
                },
                "param_2": {
                    "8": "input2",
                    "4": "input_value2",
                    "1": "value2",
                    "2": "multiplier"
                },
                "uVar1": {
                    "1": "quotient",
                    "8": "shifted_value",
                    "3": "result1",
                    "2": "shifted_result",
                    "4": "result"
                },
                "iVar2": {
                    "1": "multiplier",
                    "3": "adjusted_value",
                    "2": "adjusted_divisor",
                    "5": "offset"
                },
                "uVar3": {
                    "3": "temp_value",
                    "1": "bit_to_shift",
                    "2": "difference",
                    "5": "shift_amount"
                },
                "uParam1": {
                    "1": "unsigned_param"
                },
                "uVar4": {
                    "2": "shifted_result",
                    "1": "shifted_value"
                },
                "uVar5": {
                    "1": "result"
                }
            }
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "get_concatenated_values_080011ec",
            "code": "\nundefined8 get_concatenated_values_080011ec(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return concatenate_values(input2,input1);\n  }\n  result = FUN_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "get_concatenated_values_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "CONCAT44": "concatenate_values"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080011ec": {
                    "1": "convert_params_to64_bit",
                    "3": "process_parameters",
                    "2": "merge_parameters",
                    "4": "get_concatenated_values"
                },
                "param_1": {
                    "6": "input_1",
                    "1": "buffer_length",
                    "4": "first_param",
                    "2": "param1",
                    "8": "input1"
                },
                "param_2": {
                    "2": "param2",
                    "8": "input2",
                    "4": "value2",
                    "1": "param_2",
                    "6": "input_2"
                },
                "param_3": {
                    "5": "input_3",
                    "4": "third_param",
                    "1": "param_3",
                    "2": "param3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "input_value_4",
                    "2": "param4",
                    "5": "input_4",
                    "4": "value4",
                    "7": "input4"
                },
                "uVar1": {
                    "2": "concatenated_values",
                    "21": "result",
                    "1": "concatenated_result"
                },
                "FUN_0800121c": {
                    "1": "perform_operation",
                    "5": "calculate_result"
                },
                "param_5": {
                    "1": "output_ptr"
                },
                "CONCAT44": {
                    "1": "concatenate_values"
                }
            }
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_division_remainder_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_remainder_0800121c(uint dividend,uint divisor,uint divisor,uint remainder,uint *remainder)\n\n{\n  code *jump_table;\n  ulonglong temp;\n  uint quotient;\n  uint temp_quotient;\n  uint temp3;\n  int shift_amount;\n  uint quotient;\n  uint divisor_shifted;\n  uint remainder1;\n  uint *remainder_pointer;\n  uint quotient3;\n  uint u_var11;\n  uint temp5;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (remainder == 0) {\n    if (divisor < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      divisor_shifted = divisor;\n      if (shift_amount != 0) {\n        divisor_shifted = divisor << shift_amount;\n        divisor = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      u_var11 = divisor_shifted >> 0x10;\n      remainder1 = divisor / u_var11;\n      quotient3 = remainder1 * (divisor_shifted & 0xffff);\n      quotient = dividend >> 0x10 | (divisor - u_var11 * remainder1) * 0x10000;\n      temp_quotient = remainder1;\n      if (quotient <= quotient3 && quotient3 - quotient != 0) {\n        carry_flag = check_carry(divisor_shifted,quotient);\n        quotient = divisor_shifted + quotient;\n        temp_quotient = remainder1 - 1;\n        if ((carry_flag == false) && (quotient <= quotient3 && quotient3 - quotient != 0)) {\n          temp_quotient = remainder1 - 2;\n          quotient = quotient + divisor_shifted;\n        }\n      }\n      quotient = (quotient - quotient3) / u_var11;\n      temp3 = quotient * (divisor_shifted & 0xffff);\n      remainder1 = dividend & 0xffff | ((quotient - quotient3) - u_var11 * quotient) * 0x10000;\n      quotient = quotient;\n      if (remainder1 <= temp3 && temp3 - remainder1 != 0) {\n        carry_flag = check_carry(divisor_shifted,remainder1);\n        remainder1 = divisor_shifted + remainder1;\n        quotient = quotient - 1;\n        if ((carry_flag == false) && (remainder1 <= temp3 && temp3 - remainder1 != 0)) {\n          quotient = quotient - 2;\n          remainder1 = remainder1 + divisor_shifted;\n        }\n      }\n      quotient = quotient | temp_quotient << 0x10;\n      remainder_pointer = (uint *)0x0;\n      remainder1 = remainder1 - temp3;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x8001302);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        remainder_pointer = (uint *)0x1;\n        divisor = divisor - divisor;\n        u_var11 = divisor >> 0x10;\n        quotient = divisor & 0xffff;\n        divisor_shifted = divisor;\n      }\n      else {\n        divisor_shifted = divisor << shift_amount;\n        quotient = divisor >> (0x20U - shift_amount & 0xff);\n        u_var11 = divisor_shifted >> 0x10;\n        quotient3 = quotient / u_var11;\n        quotient = divisor_shifted & 0xffff;\n        temp3 = quotient3 * quotient;\n        remainder1 = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        temp_quotient = remainder1 >> 0x10 | (quotient - u_var11 * quotient3) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = quotient3;\n        if (temp_quotient <= temp3 && temp3 - temp_quotient != 0) {\n          carry_flag = check_carry(divisor_shifted,temp_quotient);\n          temp_quotient = divisor_shifted + temp_quotient;\n          quotient = quotient3 - 1;\n          if ((carry_flag == false) && (temp_quotient <= temp3 && temp3 - temp_quotient != 0)) {\n            quotient = quotient3 - 2;\n            temp_quotient = temp_quotient + divisor_shifted;\n          }\n        }\n        quotient3 = (temp_quotient - temp3) / u_var11;\n        temp5 = quotient3 * quotient;\n        divisor = remainder1 & 0xffff | ((temp_quotient - temp3) - u_var11 * quotient3) * 0x10000;\n        temp_quotient = quotient3;\n        if (divisor <= temp5 && temp5 - divisor != 0) {\n          carry_flag = check_carry(divisor_shifted,divisor);\n          divisor = divisor_shifted + divisor;\n          temp_quotient = quotient3 - 1;\n          if ((carry_flag == false) && (divisor <= temp5 && temp5 - divisor != 0)) {\n            temp_quotient = quotient3 - 2;\n            divisor = divisor + divisor_shifted;\n          }\n        }\n        divisor = divisor - temp5;\n        remainder_pointer = (uint *)(temp_quotient | quotient << 0x10);\n      }\n      quotient3 = divisor / u_var11;\n      quotient = quotient * quotient3;\n      remainder1 = dividend >> 0x10 | (divisor - u_var11 * quotient3) * 0x10000;\n      temp_quotient = quotient3;\n      if (remainder1 <= quotient && quotient - remainder1 != 0) {\n        carry_flag = check_carry(divisor_shifted,remainder1);\n        remainder1 = divisor_shifted + remainder1;\n        temp_quotient = quotient3 - 1;\n        if ((carry_flag == false) && (remainder1 <= quotient && quotient - remainder1 != 0)) {\n          temp_quotient = quotient3 - 2;\n          remainder1 = remainder1 + divisor_shifted;\n        }\n      }\n      quotient3 = (remainder1 - quotient) / u_var11;\n      quotient = quotient * quotient3;\n      remainder1 = dividend & 0xffff | ((remainder1 - quotient) - u_var11 * quotient3) * 0x10000;\n      quotient = quotient3;\n      if (remainder1 <= quotient && quotient - remainder1 != 0) {\n        carry_flag = check_carry(divisor_shifted,remainder1);\n        remainder1 = divisor_shifted + remainder1;\n        quotient = quotient3 - 1;\n        if ((carry_flag == false) && (remainder1 <= quotient && quotient - remainder1 != 0)) {\n          quotient = quotient3 - 2;\n          remainder1 = remainder1 + divisor_shifted;\n        }\n      }\n      remainder1 = remainder1 - quotient;\n      quotient = quotient | temp_quotient << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = remainder1 >> leading_zero_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    remainder_pointer = remainder;\n    if (divisor < remainder) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      shift_amount = leading_zero_count(remainder);\n      if (shift_amount == 0) {\n        if ((remainder < divisor) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          divisor = (divisor - remainder) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        remainder_pointer = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        remainder1 = 0x20 - shift_amount;\n        quotient = divisor >> (remainder1 & 0xff) | remainder << shift_amount;\n        divisor_shifted = divisor >> (remainder1 & 0xff);\n        temp3 = quotient >> 0x10;\n        quotient3 = divisor_shifted / temp3;\n        u_var11 = quotient3 * (quotient & 0xffff);\n        quotient = divisor << shift_amount | dividend >> (remainder1 & 0xff);\n        temp_quotient = quotient >> 0x10 | (divisor_shifted - temp3 * quotient3) * 0x10000;\n        dividend = dividend << shift_amount;\n        divisor_shifted = quotient3;\n        if (temp_quotient <= u_var11 && u_var11 - temp_quotient != 0) {\n          carry_flag = check_carry(quotient,temp_quotient);\n          temp_quotient = quotient + temp_quotient;\n          divisor_shifted = quotient3 - 1;\n          if ((carry_flag == false) && (temp_quotient <= u_var11 && u_var11 - temp_quotient != 0)) {\n            divisor_shifted = quotient3 - 2;\n            temp_quotient = temp_quotient + quotient;\n          }\n        }\n        quotient3 = (temp_quotient - u_var11) / temp3;\n        temp5 = quotient3 * (quotient & 0xffff);\n        temp_quotient = quotient & 0xffff | ((temp_quotient - u_var11) - temp3 * quotient3) * 0x10000;\n        quotient = quotient3;\n        if (temp_quotient <= temp5 && temp5 - temp_quotient != 0) {\n          carry_flag = check_carry(quotient,temp_quotient);\n          temp_quotient = quotient + temp_quotient;\n          quotient = quotient3 - 1;\n          if ((carry_flag == false) && (temp_quotient <= temp5 && temp5 - temp_quotient != 0)) {\n            quotient = quotient3 - 2;\n            temp_quotient = temp_quotient + quotient;\n          }\n        }\n        quotient = quotient | divisor_shifted << 0x10;\n        temp = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n        if (CONCAT44(temp_quotient - temp5,dividend) < temp) {\n          quotient = quotient - 1;\n          temp = temp - CONCAT44(quotient,divisor << shift_amount);\n        }\n        if (remainder != (uint *)0x0) {\n          divisor_shifted = ((temp_quotient - temp5) - (int)(temp >> 0x20)) - (uint)(dividend < (uint)temp);\n          *remainder = divisor_shifted << (remainder1 & 0xff) | dividend - (uint)temp >> shift_amount;\n          remainder[1] = divisor_shifted >> shift_amount;\n          remainder_pointer = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(remainder_pointer,quotient);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_division_remainder_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "remainder",
                "uVar1": "temp",
                "uVar2": "quotient",
                "uVar3": "temp_quotient",
                "uVar4": "temp3",
                "iVar5": "shift_amount",
                "uVar6": "quotient",
                "uVar7": "divisor_shifted",
                "uVar8": "remainder1",
                "uVar10": "quotient3",
                "uVar11": "u_var11",
                "uVar12": "temp5",
                "bVar13": "carry_flag",
                "uVar14": "result",
                "LZCOUNT": "leading_zero_count",
                "puVar9": "remainder_pointer",
                "uVar9": "temp4",
                "CARRY4": "check_carry",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800121c": {
                    "3": "divide_and_remainder",
                    "1": "calculate_modular_division",
                    "2": "calculate_quotient_remainder",
                    "5": "perform_division"
                },
                "param_1": {
                    "1": "input_param",
                    "29": "dividend"
                },
                "param_2": {
                    "2": "dividend_low",
                    "1": "quotient",
                    "10": "divisor",
                    "4": "dividend_high",
                    "3": "dividend_remainder"
                },
                "param_3": {
                    "1": "multiplier",
                    "17": "divisor",
                    "8": "quotient"
                },
                "param_4": {
                    "1": "remainder_high",
                    "2": "divisor_upper",
                    "3": "divisor_remainder",
                    "11": "remainder"
                },
                "param_5": {
                    "2": "quotient",
                    "1": "remainder_ptr",
                    "3": "quotient_and_remainder",
                    "9": "remainder",
                    "7": "result"
                },
                "uVar1": {
                    "1": "temp64bits",
                    "3": "partial_product",
                    "2": "temp1",
                    "7": "temp"
                },
                "uVar2": {
                    "1": "div_temp1",
                    "4": "quotient",
                    "2": "temp1",
                    "3": "quotient_low"
                },
                "uVar3": {
                    "1": "div_temp2",
                    "2": "temp3",
                    "3": "temp_quotient"
                },
                "uVar4": {
                    "1": "remainder_lower_half",
                    "2": "temp4"
                },
                "iVar5": {
                    "1": "shift",
                    "14": "shift_amount",
                    "5": "shift_count"
                },
                "uVar6": {
                    "1": "quotient_combined",
                    "2": "quotient2",
                    "8": "quotient",
                    "3": "result"
                },
                "uVar7": {
                    "2": "divisor_shifted",
                    "1": "initial_quotient"
                },
                "uVar8": {
                    "1": "temp4",
                    "2": "remainder1"
                },
                "uVar10": {
                    "1": "quotient_low",
                    "2": "partial_quotient",
                    "3": "quotient3"
                },
                "uVar11": {
                    "1": "temp_remainder1",
                    "2": "u_var11"
                },
                "uVar12": {
                    "1": "q3_remainder",
                    "2": "remainder2"
                },
                "bVar13": {
                    "1": "did_carry",
                    "6": "carry",
                    "17": "carry_flag"
                },
                "uVar14": {
                    "10": "return_value",
                    "1": "result64bit",
                    "13": "result"
                },
                "LZCOUNT": {
                    "2": "leading_zero_count"
                },
                "puVar9": {
                    "1": "pointer_result"
                },
                "uVar13": {
                    "1": "temp13"
                },
                "uVar5": {
                    "1": "temp3"
                },
                "uVar9": {
                    "1": "temp9"
                },
                "CARRY4": {
                    "1": "check_carry"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jumptable"
                },
                "bVar10": {
                    "1": "has_remainder"
                },
                "bVar11": {
                    "1": "has_carry"
                },
                "iVar12": {
                    "1": "shift_amount"
                },
                "uVar15": {
                    "1": "temp6"
                }
            }
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_device_080014f0",
            "code": "\n\n\nundefined4 initialize_device_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_device_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080014f0": {
                    "4": "set_flag_and_call_functions",
                    "5": "initialize_system",
                    "1": "update_settings",
                    "2": "initialize_flags",
                    "8": "initialize_device"
                },
                "param_1": {
                    "4": "mode",
                    "1": "color",
                    "2": "count",
                    "7": "value"
                },
                "FUN_08001714": {
                    "1": "display_message",
                    "3": "set_flag_value",
                    "15": "set_flag",
                    "2": "set_configuration"
                },
                "FUN_0800151c": {
                    "1": "configure_settings",
                    "2": "set_bits",
                    "6": "set_mode"
                },
                "FUNC_08002d8a": {
                    "1": "additional_action",
                    "4": "perform_task",
                    "2": "perform_initialization"
                },
                "FUN_08002d8a": {
                    "1": "perform_operation"
                },
                "param_2": {
                    "1": "unused_param"
                },
                "param_3": {
                    "1": "unused_param_2"
                },
                "PTR_FUN_08001714": {
                    "1": "execute_subfunction_1"
                },
                "PTR_FUNC_08002d8a": {
                    "1": "execute_subfunction_2"
                },
                "FUNC_0800151c": {
                    "1": "set_value"
                },
                "_DAT_40022000": {
                    "1": "flag",
                    "2": "device_flags"
                }
            }
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "check_and_set_param_0800151c",
            "code": "\nundefined4 check_and_set_param_0800151c(uint input_param)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (input_param < 0x10) {\n      FUN_0800172a(0xffffffff,input_param,0);\n      return_value = 0;\n      DAT_20000000 = input_param;\n    }\n    else {\n      return_value = 1;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "check_and_set_param_0800151c",
                "param_1": "input_param",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800151c": {
                    "1": "calculate_and_update_threshold",
                    "2": "check_and_set_parameter",
                    "13": "check_and_set_param"
                },
                "param_1": {
                    "3": "value",
                    "1": "milliseconds",
                    "6": "param",
                    "7": "input_param"
                },
                "iVar1": {
                    "29": "result",
                    "1": "seconds"
                },
                "uVar2": {
                    "9": "return_value",
                    "8": "is_success",
                    "5": "is_valid",
                    "3": "success",
                    "1": "return_val",
                    "2": "result"
                },
                "FUN_08001762": {
                    "1": "divide_and_conquer",
                    "3": "calculate_ratio"
                },
                "DAT_20000018": {
                    "2": "data_size",
                    "1": "divisor"
                },
                "DAT_20000004": {
                    "1": "constant2",
                    "2": "time_unit"
                },
                "FUN_0800172a": {
                    "1": "print_error_message",
                    "6": "log_error",
                    "2": "print_error"
                },
                "param_2": {
                    "1": "param1",
                    "3": "error_code"
                },
                "param_3": {
                    "1": "extra_data",
                    "2": "error_flag"
                },
                "DAT_20000000": {
                    "2": "stored_param",
                    "1": "error_code"
                },
                "(int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004))": {
                    "1": "calculated_ratio"
                },
                "param_1 < 0x10": {
                    "1": "is_input_less_than16"
                },
                "0xffffffff": {
                    "1": "error_code"
                },
                "0x10": {
                    "1": "threshold_limit"
                }
            }
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "update_data_0800157c",
            "code": "\nvoid update_data_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "update_data_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800157c": {
                    "1": "accumulate_values",
                    "5": "update_data",
                    "2": "add_values",
                    "3": "increment_value"
                },
                "DAT_20000a48": {
                    "1": "incremented_value",
                    "3": "current_value",
                    "2": "global_variable",
                    "7": "result"
                },
                "DAT_20000004": {
                    "1": "data_value",
                    "3": "value_to_add",
                    "6": "increment_value",
                    "4": "increment",
                    "5": "value",
                    "2": "data_to_add"
                }
            }
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_080015a0",
            "code": "\nuint32_t get_data_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_080015a0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015a0": {
                    "1": "get_global_data",
                    "2": "get_global_variable_value",
                    "6": "get_global_value",
                    "9": "get_data"
                },
                "DAT_20000a48": {
                    "9": "data",
                    "1": "result",
                    "2": "global_variable_value",
                    "5": "global_value",
                    "6": "data_value"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            }
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_memory_configuration_080015b4",
            "code": "\n\n\nvoid set_memory_configuration_080015b4(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_memory_configuration_080015b4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015b4": {
                    "1": "set_register_value",
                    "2": "set_control_bits",
                    "3": "update_configuration",
                    "5": "set_memory_configuration"
                },
                "param_1": {
                    "1": "param",
                    "5": "input_value",
                    "2": "flags",
                    "4": "value",
                    "3": "configuration"
                },
                "_DAT_e000ed0c": {
                    "1": "configuration",
                    "2": "memory_register",
                    "4": "control_register",
                    "7": "register_value"
                }
            }
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_bits_from_register_080015fc",
            "code": "\n\n\nuint get_bits_from_register_080015fc(void)\n\n{\n  result _DAT_e000ed0c >> 8 bitwise_and 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc",
                "&": "bitwise_and",
                "return": "result"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015fc": {
                    "5": "get_bits_from_register",
                    "1": "get_last_three_bits",
                    "2": "get_shifted_bits_mask",
                    "4": "get_shifted_bits"
                },
                "_DAT_e000ed0c": {
                    "4": "data",
                    "1": "original_value",
                    "2": "input_value",
                    "5": "data_register",
                    "13": "register_value"
                },
                "getShiftedBit": {
                    "1": "shifted_bit"
                },
                ">>": {
                    "1": "right_shift_by8"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "7": {
                    "1": "mask"
                },
                "DAT_e000ed0c": {
                    "1": "register_value"
                },
                "e000ed0c": {
                    "2": "shifted_value"
                },
                "return": {
                    "1": "result"
                }
            }
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "write_to_memory_08001618",
            "code": "\nvoid write_to_memory_08001618(byte input_byte,uint data)\n\n{\n  if ((char)input_byte < '\\0') {\n    *(char *)((input_byte & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input_byte + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "write_to_memory_08001618",
                "param_1": "input_byte",
                "param_2": "data"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001618": {
                    "3": "write_data_to_memory",
                    "2": "store_data",
                    "1": "update_data",
                    "6": "write_to_memory"
                },
                "param_1": {
                    "7": "address",
                    "2": "data",
                    "1": "data_offset",
                    "9": "input_byte",
                    "4": "byte_value"
                },
                "param_2": {
                    "7": "data",
                    "1": "byte_value",
                    "5": "input_value",
                    "6": "value",
                    "3": "data_value"
                },
                "*((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "memory_address1"
                },
                "*((char)param_1 + -0x1fff1c00)": {
                    "1": "memory_address2"
                },
                "0xe000ed14": {
                    "1": "memory_segment1"
                },
                "0x1fff1c00": {
                    "1": "memory_segment2"
                },
                "param_3": {
                    "1": "address"
                },
                "param_1 & 0xf": {
                    "1": "offset"
                },
                "param_1 + -0x1fff1c00": {
                    "1": "offset_negative"
                },
                "valueToStore & 0xff": {
                    "1": "stored_value"
                },
                "(valueToStore & 0xff) << 4": {
                    "1": "shifted_value"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "memory_address1"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "store_value2"
                },
                "<char>param_1": {
                    "1": "signed_input_byte"
                },
                "<param_1 & 0xf>": {
                    "1": "address_offset_1"
                },
                "<param_1 & 0xf> + 0xe000ed14": {
                    "1": "memory_address_1"
                },
                "<char>param_1 + -0x1fff1c00": {
                    "1": "address_offset_2"
                },
                "(char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "bitwise_operation_0800166c",
            "code": "\nuint bitwise_operation_0800166c(uint bit_position,uint data,uint input3)\n\n{\n  uint shift_amount;\n  \n  bit_position = bit_position & 7;\n  shift_amount = 7 - bit_position;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_position + 4 < 7) {\n    bit_position = 0;\n  }\n  else {\n    bit_position = bit_position - 3;\n  }\n  return input3 & ~(-1 << (bit_position & 0xff)) |\n         (~(-1 << (shift_amount & 0xff)) & data) << (bit_position & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "bit_position",
                "param_2": "data",
                "param_3": "input3",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800166c": {
                    "3": "bitwise_operations",
                    "2": "apply_bitwise_operations",
                    "1": "extract_bit_mask",
                    "10": "bitwise_operation"
                },
                "param_1": {
                    "2": "offset",
                    "1": "input_bit",
                    "3": "input_param",
                    "5": "bit_position"
                },
                "param_2": {
                    "1": "value1",
                    "3": "source_bits",
                    "2": "bit_mask"
                },
                "param_3": {
                    "2": "output_value",
                    "3": "target_bits",
                    "1": "original_data",
                    "4": "input3"
                },
                "uVar1": {
                    "7": "shift_amount",
                    "1": "bit_count_to_shift",
                    "2": "mask_length",
                    "3": "shift_count"
                },
                "param_1 + 4": {
                    "1": "mask_threshold"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "param_1_4": {
                    "1": "shifted_input1"
                },
                "param_1_minus_3": {
                    "1": "shifted_input1_minus3"
                },
                "uVar2": {
                    "1": "temp_value"
                },
                "uVar3": {
                    "1": "shifted_source"
                },
                "param_1 (inside if condition)": {
                    "1": "comparison_result"
                },
                "param_1 (inside else condition)": {
                    "1": "shift_value"
                },
                "new_variable_name_1": {
                    "1": "temp1"
                },
                "new_variable_name_2": {
                    "1": "temp2"
                },
                "param_1 & 0xff": {
                    "1": "shift_amount_input"
                },
                "uVar1 & 0xff": {
                    "1": "shift_amount_bits"
                }
            }
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_initialize_080016d0",
            "code": "\n\n\nbool check_and_initialize_080016d0(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_initialize_080016d0",
                "param_1": "input_value",
                "bVar1": "is_valid"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080016d0": {
                    "1": "is_valid_param",
                    "2": "check_and_initialize_data",
                    "4": "check_and_set_values",
                    "8": "check_and_initialize",
                    "3": "check_and_set_param"
                },
                "param_1": {
                    "2": "input",
                    "15": "input_value",
                    "1": "input_param",
                    "3": "value",
                    "7": "byte_value"
                },
                "bVar1": {
                    "1": "is_less_than_1_m",
                    "8": "is_valid",
                    "5": "is_input_valid",
                    "2": "is_valid_input",
                    "3": "is_less_than_threshold"
                },
                "_DAT_e000e014": {
                    "1": "new_data_value",
                    "2": "updated_value"
                },
                "FUN_08001618": {
                    "2": "set_flags",
                    "1": "set_byte_value",
                    "6": "set_values"
                },
                "param_2": {
                    "1": "limit",
                    "2": "byte_value"
                },
                "_DAT_e000e018": {
                    "1": "flag_value",
                    "2": "value_1"
                },
                "_DAT_e000e010": {
                    "1": "flag2",
                    "2": "value_2"
                }
            }
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "execute_function_08001714",
            "code": "\nvoid execute_function_08001714(undefined4 input)\n\n{\n  FUN_080015b4(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "execute_function_08001714",
                "param_1": "input"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001714": {
                    "2": "execute_task",
                    "1": "initialize_function",
                    "7": "execute_function",
                    "3": "execute_initialization",
                    "4": "initialize_system"
                },
                "param_1": {
                    "6": "input",
                    "5": "input_value",
                    "2": "task_id",
                    "1": "parameter",
                    "3": "input_param"
                },
                "FUN_080015b4": {
                    "1": "initialize_components",
                    "5": "process_input",
                    "7": "process_data",
                    "2": "configure_system"
                }
            }
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "process_data_0800172a",
            "code": "\nvoid process_data_0800172a(char input_byte,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,value1,value2);\n  FUN_08001618((int)input_byte,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "input_byte",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800172a": {
                    "22": "process_data",
                    "1": "extract_and_process_data"
                },
                "param_1": {
                    "5": "input",
                    "4": "data",
                    "3": "character",
                    "1": "byte_data",
                    "15": "input_byte"
                },
                "param_2": {
                    "2": "param_2",
                    "1": "arg1",
                    "10": "param1",
                    "11": "value1"
                },
                "param_3": {
                    "10": "param2",
                    "2": "param_3",
                    "1": "arg2",
                    "11": "value2"
                },
                "uVar1": {
                    "3": "result1",
                    "1": "output_uint",
                    "2": "initial_value",
                    "19": "result"
                },
                "FUN_08001618": {
                    "1": "process_byte_and_uint",
                    "3": "store_data",
                    "4": "send_data",
                    "2": "update_data"
                },
                "FUN_0800166c": {
                    "5": "calculate_value",
                    "1": "perform_operation",
                    "2": "calculate_result",
                    "3": "perform_calculation"
                },
                "FUN_080015fc": {
                    "1": "initialize_data",
                    "2": "get_data",
                    "11": "get_initial_value",
                    "3": "retrieve_value"
                }
            }
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "process_data_08001762",
            "code": "\nundefined4 process_data_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = FUN_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "process_data_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001762": {
                    "16": "process_data",
                    "1": "calculate_result",
                    "2": "process_function"
                },
                "param_1": {
                    "14": "input",
                    "4": "data",
                    "7": "input_data",
                    "6": "input_value"
                },
                "uVar1": {
                    "21": "result",
                    "2": "return_value"
                },
                "FUN_080016d0": {
                    "1": "check_value",
                    "2": "check_condition"
                }
            }
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flag_0800177c",
            "code": "\n\n\nvoid set_flag_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flag_0800177c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800177c": {
                    "1": "update_global_value",
                    "2": "update_status",
                    "11": "set_flag"
                },
                "param_1": {
                    "2": "flag",
                    "1": "param",
                    "11": "value",
                    "3": "status",
                    "9": "flag_value"
                },
                "_DAT_e000e010": {
                    "2": "status_register",
                    "1": "register_flags",
                    "4": "register_value",
                    "11": "flag_register"
                },
                "param_1 == 4": {
                    "1": "is_value_four"
                }
            }
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_system_080017b4",
            "code": "\nvoid initialize_system_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_system_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080017b4": {
                    "11": "initialize",
                    "3": "initialize_application",
                    "12": "initialize_system",
                    "1": "execute_initial_process",
                    "2": "initialize_function"
                },
                "FUN_08004f78": {
                    "1": "set_to_default",
                    "4": "perform_operation",
                    "2": "perform_initialization"
                }
            }
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bits_080017c4",
            "code": "\n\n\nvoid update_bits_080017c4(uint *output_array,uint *input_array)\n\n{\n  uint bit_mask;\n  uint bit_value;\n  uint opcode;\n  uint *output_ptr;\n  int index;\n  uint new_value;\n  uint bit_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_value = *input_array & bit_mask;\n    if (bit_value == bit_mask) {\n      opcode = input_array[1];\n      if (opcode == 0x12) {\n        new_value = input_array[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = input_array[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            new_value = input_array[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = input_array[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (input_array[2] == 0) {\n          new_value = 4;\n        }\n        else if (input_array[2] == 1) {\n          new_value = 8;\n          output_array[4] = bit_mask;\n        }\n        else {\n          new_value = 8;\n          output_array[5] = bit_mask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bit_value < 0x100) {\n        bit_mask = bit_index << 2;\n        output_ptr = output_array;\n      }\n      else {\n        output_ptr = output_array + 1;\n        bit_mask = (bit_index - 8) * 4;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask & 0xff)) | new_value << (bit_mask & 0xff);\n      if ((input_array[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (output_array == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output_array == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output_array == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output_array == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bit_index & 3) << 2) |\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000);\n        if ((input_array[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bit_value & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bit_value | _DAT_40010400;\n        }\n        if ((input_array[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bit_value & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bit_value | _DAT_40010404;\n        }\n        if ((input_array[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bit_value & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bit_value | _DAT_40010408;\n        }\n        if ((input_array[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bit_value & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bit_value | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bits_080017c4",
                "param_1": "output_array",
                "param_2": "input_array",
                "uVar1": "bit_mask",
                "uVar2": "bit_value",
                "uVar3": "opcode",
                "puVar4": "output_ptr",
                "iVar5": "index",
                "local_10": "new_value",
                "local_c": "bit_index"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080017c4": {
                    "1": "update_values",
                    "4": "update_flags",
                    "2": "update_configuration"
                },
                "param_1": {
                    "1": "input_flags",
                    "2": "array1"
                },
                "param_2": {
                    "1": "input_settings",
                    "2": "input_flags",
                    "3": "input_array"
                },
                "uVar1": {
                    "3": "mask",
                    "1": "bit",
                    "25": "bit_mask"
                },
                "uVar2": {
                    "1": "flag_result",
                    "4": "bit_result",
                    "6": "bit_check",
                    "10": "bit_value",
                    "3": "input_bit"
                },
                "uVar3": {
                    "1": "instruction_value",
                    "2": "instruction",
                    "11": "opcode",
                    "3": "value",
                    "4": "flag_value"
                },
                "puVar4": {
                    "4": "output_ptr",
                    "1": "data_array_ptr",
                    "2": "config_ptr",
                    "3": "ptr"
                },
                "iVar5": {
                    "1": "component_index",
                    "2": "config_index",
                    "18": "index"
                },
                "local_10": {
                    "1": "flag_value",
                    "17": "new_value",
                    "2": "offset"
                },
                "local_c": {
                    "1": "current_index",
                    "14": "bit_index",
                    "8": "counter",
                    "2": "config_index"
                },
                "_DAT_40021018": {
                    "1": "device_status_reg"
                },
                "_DAT_40010400": {
                    "1": "device_reg1"
                },
                "_DAT_40010404": {
                    "1": "device_reg2"
                },
                "_DAT_40010408": {
                    "1": "device_reg3"
                },
                "_DAT_4001040c": {
                    "1": "device_reg4"
                }
            }
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "set_param_value_08001a80",
            "code": "\nvoid set_param_value_08001a80(int base_address,ushort value,char is_shifted)\n\n{\n  if (is_shifted == '\\0') {\n    *(unsigned_int *)(base_address + 0x10) = new_value << 0x10;\n  }\n  else {\n    *(unsigned_int *)(base_address + 0x10) = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "unsigned_int",
                "(uint)param_2": "new_value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001a80": {
                    "1": "convert_and_store",
                    "4": "set_param",
                    "3": "update_parameter",
                    "2": "update_data",
                    "14": "set_param_value"
                },
                "param_1": {
                    "1": "param_addr",
                    "7": "object_address",
                    "9": "base_address"
                },
                "param_2": {
                    "1": "parameter_value",
                    "2": "new_value",
                    "24": "value"
                },
                "param_3": {
                    "3": "flag",
                    "1": "is_param_valid",
                    "2": "condition",
                    "22": "is_shifted"
                },
                "*(uint *)(param_1 + 0x10)": {
                    "1": "obj_value",
                    "2": "target_address"
                },
                "(uint)param_2 << 0x10": {
                    "1": "extended_value",
                    "2": "shifted_value"
                },
                "value": {
                    "1": "updated_value"
                },
                "param_1 + 0x10": {
                    "1": "address_to_update",
                    "2": "address_offset"
                },
                "uint": {
                    "3": "unsigned_integer",
                    "6": "unsigned_int"
                },
                "(uint)param_2": {
                    "1": "new_value"
                }
            }
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_parameters_08001ab0",
            "code": "\nundefined4 calculate_parameters_08001ab0(uint **parameters)\n\n{\n  uint result;\n  char is_valid;\n  undefined4 return_value;\n  uint temp;\n  bool is_zero;\n  \n  if (parameters == (uint **)0x0) {\n    return_value = 1;\n  }\n  else {\n    if (*(char *)((int)parameters + 0x3d) == '\\0') {\n      *(undefined *)(parameters + 0xf) = 0;\n      FUNC_08001cb8(parameters);\n    }\n    *(undefined *)((int)parameters + 0x3d) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    result = FUN_08003518();\n    if (parameters[1] < (uint *)0x186a1) {\n      temp = result;\n      if (result < 2000000) {\n        temp = 1;\n      }\n      is_valid = (char)temp;\n      if (1999999 < result) {\n        is_valid = '\\0';\n      }\n    }\n    else {\n      temp = result;\n      if (result < 4000000) {\n        temp = 1;\n      }\n      is_valid = (char)temp;\n      if (3999999 < result) {\n        is_valid = '\\0';\n      }\n    }\n    if (is_valid == '\\0') {\n      temp = result / 1000000;\n      (*parameters)[1] = temp;\n      if ((uint *)0x186a0 < parameters[1]) {\n        temp = (temp * 300) / 1000;\n      }\n      (*parameters)[8] = temp + 1;\n      if (parameters[1] < (uint *)0x186a1) {\n        result = (result - 1) / (uint)((int)parameters[1] << 1) + 1 & 0xfff;\n        if (result < 4) {\n          result = 4;\n        }\n      }\n      else {\n        if (parameters[2] == (uint *)0x0) {\n          temp = (result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff;\n          is_zero = temp == 0;\n          if (is_zero) {\n            temp = 1;\n          }\n          is_valid = (char)temp;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        else {\n          temp = (result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff;\n          is_zero = temp == 0;\n          if (is_zero) {\n            temp = 1;\n          }\n          is_valid = (char)temp;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        if (is_valid == '\\0') {\n          if (parameters[2] == (uint *)0x0) {\n            result = (result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            result = (result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n      (*parameters)[7] = result;\n      **parameters = (uint)parameters[8] | (uint)parameters[7];\n      (*parameters)[2] = (uint)parameters[3] | (uint)parameters[4];\n      (*parameters)[3] = (uint)parameters[6] | (uint)parameters[5];\n      **parameters = **parameters | 1;\n      parameters[0x10] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      return_value = 0;\n    }\n    else {\n      return_value = 1;\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_parameters_08001ab0",
                "param_1": "parameters",
                "uVar1": "result",
                "uVar3": "return_value",
                "uVar4": "temp",
                "bVar5": "is_zero",
                "cVar2": "is_valid"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001ab0": {
                    "1": "update_params_and_flags",
                    "2": "calculate_params",
                    "6": "calculate_parameters",
                    "3": "initialize_parameters"
                },
                "param_1": {
                    "3": "input_params",
                    "1": "game_data",
                    "11": "parameters",
                    "5": "param"
                },
                "uVar1": {
                    "3": "random_value",
                    "1": "parameter_value",
                    "22": "result"
                },
                "uVar3": {
                    "8": "status",
                    "15": "return_value",
                    "2": "success",
                    "6": "result"
                },
                "uVar4": {
                    "3": "temp_value",
                    "14": "temp",
                    "7": "temp_var",
                    "1": "value2"
                },
                "bVar5": {
                    "1": "check",
                    "27": "is_zero"
                },
                "cVar2": {
                    "7": "flag",
                    "1": "check",
                    "3": "is_in_range",
                    "11": "is_valid",
                    "6": "condition"
                },
                "FUNC_08001cb8": {
                    "1": "update_game_data",
                    "2": "perform_operation"
                },
                "FUN_08003518": {
                    "1": "get_random_value",
                    "2": "get_value",
                    "4": "get_random_number"
                },
                "calculateParams": {
                    "1": "calculate_params"
                }
            }
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocess_data_08001ccc(uint **data,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,undefined4 param7)\n\n{\n  int result1;\n  int result2;\n  undefined4 return_value;\n  uint *temp_ptr;\n  \n  result1 = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result2 = 0;\n        goto process_data_08001ccc;\n      }\n      result2 = FUN_080015a0();\n    } while ((uint)(result2 - result1) < 0x1a);\n    temp_ptr2 = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result2 = 3;\nprocess_data_08001ccc:\n    if (result2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        temp_ptr3 = (uint *)0x0;\n        param5_ptr = param5;\n        *(undefined2 *)((int)data + 0x2a) = param6;\n        param_1_array_b = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result2 = FUN_08002640(data,param2,param3,param4,param7,result1);\n        if (result2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            result2 = FUN_08002bb4(data,param7,result1);\n            if (result2 != 0) {\n              if (temp_ptr3 == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            temp_ptr = param5_ptr;\n            param5_ptr = (uint *)((int)temp_ptr + 1);\n            (*data)[4] = (uint)*(byte *)temp_ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              temp_ptr = param5_ptr;\n              param5_ptr = (uint *)((int)temp_ptr + 1);\n              (*data)[4] = (uint)*(byte *)temp_ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          result1 = FUN_08002c2e(data,param7,result1);\n          if (result1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            return_value = 0;\n          }\n          else if (temp_ptr3 == (uint *)0x4) {\n            **data = **data | 0x200;\n            return_value = 1;\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (temp_ptr3 == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "return_value",
                "puVar4": "temp_ptr",
                "LAB_08001d9c": "process_data",
                "param_1[0xc]": "temp_ptr2",
                "param_1[0x10]": "temp_ptr3",
                "param_1[9]": "param5_ptr",
                "param_1[0xb]": "param_1_array_b"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001ccc": {
                    "4": "process_input",
                    "14": "process_data",
                    "1": "perform_operation",
                    "2": "parse_input"
                },
                "param_1": {
                    "11": "data",
                    "3": "input_params",
                    "1": "command_data",
                    "2": "input_pointer",
                    "5": "input_data"
                },
                "param_2": {
                    "10": "param2",
                    "1": "input1",
                    "5": "value1",
                    "6": "param1",
                    "2": "parameter_2",
                    "3": "param_2"
                },
                "param_3": {
                    "6": "param2",
                    "2": "parameter_3",
                    "1": "parameter_three",
                    "10": "param3",
                    "3": "param_3",
                    "5": "value2"
                },
                "param_4": {
                    "10": "param4",
                    "6": "param3",
                    "1": "input3",
                    "3": "param_4",
                    "5": "value3",
                    "2": "parameter_4"
                },
                "param_5": {
                    "1": "input4",
                    "2": "input_array",
                    "5": "param4",
                    "8": "param5",
                    "3": "param_5"
                },
                "param_6": {
                    "1": "input_value_4",
                    "10": "param6",
                    "3": "param_6",
                    "5": "param5",
                    "4": "value4",
                    "2": "parameter_6"
                },
                "param_7": {
                    "1": "param_f",
                    "2": "result",
                    "5": "param6",
                    "3": "param_7",
                    "9": "param7"
                },
                "iVar1": {
                    "1": "result_var1",
                    "3": "result_1",
                    "10": "result1",
                    "5": "result"
                },
                "iVar2": {
                    "1": "result",
                    "3": "value2",
                    "10": "result2"
                },
                "uVar3": {
                    "1": "output",
                    "21": "return_value",
                    "4": "result"
                },
                "puVar4": {
                    "2": "byte_ptr",
                    "1": "ptr_var",
                    "5": "ptr",
                    "4": "byte_pointer",
                    "7": "temp_ptr"
                },
                "FUN_080015a0": {
                    "1": "helper_function_1",
                    "3": "get_initial_value"
                },
                "FUn_08002640": {
                    "1": "perform_task"
                },
                "FUN_08002bb4": {
                    "1": "perform_operation",
                    "2": "check_condition1"
                },
                "FUN_08002c2e": {
                    "1": "verify_data",
                    "2": "check_condition2"
                },
                "LAB_08001d9c": {
                    "1": "label1"
                },
                "iVar2 == 0": {
                    "1": "is_successful"
                },
                "param_1 + 0xf": {
                    "1": "flag_ptr"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "condition_flag"
                },
                "(~(*param_1)[6] & 2) != 0": {
                    "1": "is_condition_met"
                },
                "(uint)(iVar2 - iVar1) < 0x1a": {
                    "1": "is_difference_less_than26"
                },
                "param_1[0xc]": {
                    "1": "temp_ptr2"
                },
                "(**param_1 & 1) != 1": {
                    "1": "is_bit_set"
                },
                "**param_1 = **param_1 | 1": {
                    "1": "set_bit"
                },
                "**param_1 = **param_1 & 0xfffff7ff": {
                    "1": "clear_bit"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "new_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "flag2"
                },
                "param_1[0x10]": {
                    "1": "temp_ptr3"
                },
                "param_1[9]": {
                    "1": "param5_ptr"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "param6_value"
                },
                "FUN_08002640": {
                    "1": "process_data_internal",
                    "2": "process_data"
                },
                "*(char *)((int)parameter_1 + 0x3d)": {
                    "1": "char_var1"
                },
                "*(char *)((int)parameter_1 + 0x3e)": {
                    "1": "char_var2"
                },
                "*(undefined2 *)((int)parameter_1 + 0x2a)": {
                    "1": "short_var1"
                },
                "param_1[0xb]": {
                    "1": "param_1_array_b"
                },
                "(*param_1)": {
                    "1": "deref_param_1"
                },
                "(**param_1)": {
                    "1": "deref_deref_param_1"
                },
                "(*param_1)[6]": {
                    "1": "deref_deref_offset6_param_1"
                },
                "(*param_1)[5]": {
                    "1": "deref_deref_offset5_param_1"
                },
                "(*param_1)[4]": {
                    "1": "deref_deref_offset4_param_1"
                },
                "(((*param_1)[5] & 4) == 4)": {
                    "1": "check_deref_deref_offset5_param_1"
                },
                "(*(short *)((int)param_1 + 0x2a) != 0)": {
                    "1": "check_short_var1"
                },
                "(**param_1 | 1)": {
                    "1": "or_op_deref_deref_param_1_1"
                },
                "**param_1 & 0xfffff7ff": {
                    "1": "and_op_deref_deref_param_1_0xfffff7ff"
                },
                "*(short *)(param_1 + 10)": {
                    "1": "short_array_10"
                },
                "(*(short *)(param_1 + 10) != 0)": {
                    "1": "check_short_array_10"
                },
                "(param_1[0x10] == (uint *)0x4)": {
                    "1": "param_1_array_10_eq_4"
                },
                "(*(char *)(param_1 + 0xf) == '\\x01')": {
                    "1": "char_array_f_eq_1"
                },
                "((*(char *)((int)param_1 + 0x3d) == ' ') && (deref_deref_offset6_param_1 & 2) == 0)": {
                    "1": "check_start_condition"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "new_value3"
                },
                "(**param_1 & 1)": {
                    "1": "bitwise_result"
                },
                "(*(short *)((int)param_1 + 0x2a))": {
                    "1": "short_value1"
                },
                "FUN_08002640(param_1,param_2,param_3,param_4,param_7,iVar1)": {
                    "1": "function_a"
                },
                "FUN_08002bb4(param_1,param_7,iVar1)": {
                    "1": "function_b"
                },
                "(uint)*(byte *)puVar4": {
                    "1": "byte_value"
                },
                "*(short *)((int)param_1 + 0x2a) - 1": {
                    "1": "short_value2"
                },
                "((*param_1)[5] & 4) == 4": {
                    "1": "bitwise_result2"
                },
                "FUN_08002c2e(param_1,param_7,iVar1)": {
                    "1": "function_c"
                },
                "F_UNREACHABLE_BLOCK_1": {
                    "1": "unreachable_block_1"
                },
                "F_UNREACHABLE_BLOCK_2": {
                    "1": "unreachable_block_2"
                },
                "F_UNREACHABLE_BLOCK_3": {
                    "1": "unreachable_block_3"
                },
                "F_UNREACHABLE_BLOCK_4": {
                    "1": "unreachable_block_4"
                },
                "F_UNREACHABLE_BLOCK_5": {
                    "1": "unreachable_block_5"
                }
            }
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocess_data_08001f6c(uint **data,undefined2 param1,undefined2 param2,undefined2 param3,uint *param5,\n            undefined2 param6,uint param7)\n\n{\n  int result1;\n  uint result2;\n  int result3;\n  undefined4 result;\n  uint *pointer;\n  \n  result1 = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result3 = 0;\n        goto label1;\n      }\n      result3 = FUN_080015a0();\n    } while ((uint)(result3 - result1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result3 = 3;\nlabel1:\n    if (result3 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param5;\n        *(undefined2 *)((int)data + 0x2a) = param6;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result3 = FUN_080027f4(data,param1,param2,param3,param7,result1);\n        if (result3 == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disable_interrupts();\n            **data = **data | 0x200;\n            enable_interrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disable_interrupts();\n            **data = **data & 0xfffffbff;\n            enable_interrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                result3 = FUN_08002ca8(data,param7,result1);\n                if (result3 != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                result2 = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = character;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result3 = 0;\n                    goto label2;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result3 = FUN_080015a0(), (uint)(result3 - result1) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result3 = 3;\nlabel2:\n                if (result3 != 0) {\n                  return 3;\n                }\n                disable_interrupts();\n                **data = **data | 0x200;\n                result2 = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = character;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                result2 = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = character;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result3 = 0;\n                    goto label3;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result3 = FUN_080015a0(), (uint)(result3 - result1) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result3 = 3;\nlabel3:\n                if (result3 != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disable_interrupts();\n                result2 = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = character;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result3 = 0;\n                    goto label4;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result3 = FUN_080015a0(), (uint)(result3 - result1) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result3 = 3;\nlabel4:\n                if (result3 != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                result2 = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = character;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                result2 = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = character;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              result3 = FUN_08002ca8(data,param7,result1);\n              if (result3 != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              result2 = (*data)[4];\n              pointer = data[9];\n              data[9] = (uint *)((int)pointer + 1);\n              *(char *)pointer = character;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                result2 = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = character;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "result1",
                "uVar2": "result2",
                "iVar3": "result3",
                "uVar4": "result",
                "puVar5": "pointer",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts",
                "LAB_08002040": "label1",
                "LAB_080022fa": "label2",
                "LAB_08002418": "label3",
                "LAB_0800250a": "label4",
                "(char)uVar2": "character"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001f6c": {
                    "5": "process_input",
                    "1": "perform_operation",
                    "18": "process_data"
                },
                "param_1": {
                    "2": "input",
                    "11": "data",
                    "1": "parameters",
                    "3": "data_ptr",
                    "4": "input_data"
                },
                "param_2": {
                    "8": "param2",
                    "1": "param_2",
                    "2": "arg1",
                    "5": "value1",
                    "12": "param1"
                },
                "param_3": {
                    "12": "param2",
                    "1": "flag2",
                    "8": "param3",
                    "5": "value2",
                    "2": "arg2"
                },
                "param_4": {
                    "8": "param4",
                    "12": "param3",
                    "1": "input3",
                    "5": "value3",
                    "2": "arg3"
                },
                "param_5": {
                    "2": "buffer",
                    "5": "param4",
                    "1": "input4",
                    "6": "param5"
                },
                "param_6": {
                    "5": "value4",
                    "1": "param_6",
                    "11": "param6"
                },
                "param_7": {
                    "4": "value5",
                    "1": "param_f",
                    "5": "param5",
                    "11": "param7"
                },
                "iVar1": {
                    "1": "return_value1",
                    "5": "initial_value",
                    "8": "result1",
                    "6": "value1",
                    "4": "result"
                },
                "uVar2": {
                    "1": "some_variable_2",
                    "3": "temp_value",
                    "2": "temp1",
                    "6": "value2",
                    "8": "result2",
                    "5": "var2"
                },
                "iVar3": {
                    "5": "var3",
                    "3": "loop_counter",
                    "1": "return_value3",
                    "8": "result3",
                    "2": "temp2",
                    "6": "value3"
                },
                "uVar4": {
                    "7": "return_value",
                    "3": "var4",
                    "1": "some_variable_4",
                    "6": "result4",
                    "11": "result"
                },
                "puVar5": {
                    "2": "ptr_var",
                    "3": "var5",
                    "1": "some_variable_5",
                    "6": "ptr"
                },
                "FUN_080015a0": {
                    "2": "get_time",
                    "1": "get_current_time"
                },
                "FUN_080027f4": {
                    "1": "process_data_helper2"
                },
                "FUN_08002ca8": {
                    "1": "another_process"
                },
                "disableIRQinterrupts": {
                    "1": "disable_ir_qinterrupts",
                    "2": "disable_interrupts"
                },
                "enableIRQinterrupts": {
                    "1": "enable_ir_qinterrupts",
                    "2": "enable_interrupts"
                },
                "FUn_080015a0": {
                    "1": "helper_function1"
                },
                "LAB_08002040": {
                    "2": "label1"
                },
                "LAB_080022fa": {
                    "2": "label2"
                },
                "LAB_08002418": {
                    "2": "label3"
                },
                "LAB_0800250a": {
                    "2": "label4"
                },
                "processData": {
                    "1": "process_data"
                },
                "**param_1": {
                    "1": "deref_data"
                },
                "(uint *)((int)puVar5 + 1)": {
                    "1": "incremented_pointer"
                },
                "(char)uVar2": {
                    "1": "character"
                },
                "(short *)(param_1 + 10)": {
                    "1": "short_ptr"
                },
                "**(short *)((int)param_1 + 0x2a)": {
                    "1": "short_variable"
                }
            }
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "process_data_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nprocess_data_08002640(uint **data,byte flag,undefined2 value,short condition,uint limit,int threshold)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - threshold) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = FUN_08002ad8(data,0x10002,limit,threshold);\n    if (result == 0) {\n      result = FUN_08002bb4(data,limit,threshold,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)value;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value >> 8);\n          result = FUN_08002bb4(data,limit,threshold);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value;\n        }\n        return_value = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002640": "process_data_08002640",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "threshold",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002640": {
                    "1": "update_parameters",
                    "18": "process_data",
                    "2": "update_flags_and_check_condition"
                },
                "param_1": {
                    "21": "data",
                    "1": "ptr_array",
                    "2": "input_array"
                },
                "param_2": {
                    "20": "flag",
                    "1": "param_byte",
                    "6": "byte_value"
                },
                "param_3": {
                    "5": "short_value",
                    "2": "param_value",
                    "1": "byte_value",
                    "13": "value",
                    "4": "value1"
                },
                "param_4": {
                    "2": "mode",
                    "1": "flag_value",
                    "5": "option",
                    "9": "condition",
                    "4": "value2"
                },
                "param_5": {
                    "1": "max_value",
                    "2": "size",
                    "16": "limit"
                },
                "param_6": {
                    "9": "threshold",
                    "1": "param",
                    "2": "value4",
                    "3": "limit"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "3": "error_code",
                    "2": "status",
                    "21": "result"
                },
                "uVar2": {
                    "6": "result",
                    "23": "return_value",
                    "1": "output_value"
                },
                "FUN_08002bb4": {
                    "1": "perform_operation"
                },
                "FUN_08002ad8": {
                    "1": "initialize_data"
                },
                "FUN_080015a0": {
                    "1": "get_comparison_result",
                    "3": "calculate_difference"
                },
                "FUC_080015a0": {
                    "1": "get_difference"
                }
            }
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "process_data_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nprocess_data_080027f4(uint **data,byte flag,undefined2 value,short condition,uint limit,int threshold)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x400;\n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto check_result;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - threshold) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\ncheck_result:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = FUN_08002ad8(data,0x10002,limit,threshold);\n    if (result == 0) {\n      result = FUN_08002bb4(data,limit,threshold,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)value;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value >> 8);\n          result = FUN_08002bb4(data,limit,threshold);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value;\n        }\n        result = FUN_08002bb4(data,limit,threshold);\n        if (result == 0) {\n          **data = **data | 0x100;\n          do {\n            if ((~(*data)[5] & 1) == 0) {\n              result = 0;\n              goto check_result_2;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = FUN_080015a0(), (uint)(result - threshold) <= limit))));\n          data[0xc] = (uint *)0x0;\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\ncheck_result_2:\n          if (result == 0) {\n            (*data)[4] = (uint)(flag | 1);\n            result = FUN_08002ad8(data,0x10002,limit,threshold);\n            if (result == 0) {\n              return_value = 0;\n            }\n            else if (data[0x10] == (uint *)0x4) {\n              return_value = 1;\n            }\n            else {\n              return_value = 3;\n            }\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          **data = **data | 0x200;\n          return_value = 1;\n        }\n        else {\n          return_value = 3;\n        }\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "process_data_080027f4",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "threshold",
                "iVar1": "result",
                "uVar2": "return_value",
                "LAB_080028d2": "check_result",
                "LAB_08002a90": "check_result_2"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080027f4": {
                    "1": "update_permissions",
                    "10": "process_data",
                    "2": "execute_operation"
                },
                "param_1": {
                    "8": "data",
                    "1": "flag_array",
                    "2": "parameters",
                    "4": "data_ptr",
                    "3": "input_data"
                },
                "param_2": {
                    "13": "flag",
                    "1": "byte_param",
                    "2": "byte_flag",
                    "6": "byte_value",
                    "3": "byte_val"
                },
                "param_3": {
                    "4": "short_value",
                    "1": "input_data",
                    "9": "value",
                    "2": "value1"
                },
                "param_4": {
                    "4": "flag",
                    "1": "operand_type",
                    "3": "option",
                    "7": "condition",
                    "2": "value2"
                },
                "param_5": {
                    "3": "uint_value",
                    "1": "param_5",
                    "18": "limit"
                },
                "param_6": {
                    "13": "threshold",
                    "1": "limit"
                },
                "iVar1": {
                    "1": "result_code",
                    "4": "status",
                    "20": "result"
                },
                "uVar2": {
                    "20": "return_value",
                    "1": "return_val",
                    "2": "output",
                    "6": "result"
                },
                "FUN_080015a0": {
                    "1": "get_difference"
                },
                "FUN_08002ad8": {
                    "1": "perform_operation"
                },
                "FUN_08002bb4": {
                    "1": "perform_action1",
                    "2": "process_data"
                },
                "data_ptr": {
                    "1": "data"
                },
                "flag": {
                    "1": "input_flag"
                },
                "comparison_value": {
                    "1": "comp_value"
                },
                "FUNK_080015a0": {
                    "1": "get_timestamp"
                },
                "LAB_080028d2": {
                    "1": "check_result"
                },
                "LAB_08002a90": {
                    "1": "check_result_2"
                }
            }
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_flags_08002ad8",
            "code": "\nundefined4 check_and_update_flags_08002ad8(uint **parameters,uint flag,uint limit,int comparison_value)\n\n{\n  int result;\n  char flag;\n  uint modified_value;\n  bool is_modified;\n  \n  do {\n    if ((flag >> 0x10 & 0xff) == 1) {\n      modified_value = flag & ~(*parameters)[5] & 0xffff;\n      is_modified = modified_value != 0;\n      if (is_modified) {\n        modified_value = 1;\n      }\n      flag = (char)modified_value;\n      if (!is_modified) {\n        flag = '\\0';\n      }\n    }\n    else {\n      modified_value = flag & ~(*parameters)[6] & 0xffff;\n      is_modified = modified_value != 0;\n      if (is_modified) {\n        modified_value = 1;\n      }\n      flag = (char)modified_value;\n      if (!is_modified) {\n        flag = '\\0';\n      }\n    }\n    if (flag == '\\0') {\n      return_value 0;\n    }\n    if (((*parameters)[5] & 0x400) == 0x400) {\n      **parameters = **parameters | 0x200;\n      (*parameters)[5] = 0xfffffbff;\n      array_element1 = (uint *)0x4;\n      array_element2 = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)(parameters + 0xf) = 0;\n      return_value 1;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - comparison_value) <= limit))));\n  array_element2 = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  *(undefined *)(parameters + 0xf) = 0;\n  return_value 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_flags_08002ad8",
                "param_1": "parameters",
                "param_2": "flag",
                "param_3": "limit",
                "param_4": "comparison_value",
                "iVar1": "result",
                "cVar2": "flag",
                "uVar3": "modified_value",
                "bVar4": "is_modified",
                "param_1[0x10]": "array_element1",
                "param_1[0xc]": "array_element2",
                "return": "return_value"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ad8": {
                    "1": "perform_operation",
                    "2": "check_condition_and_modify",
                    "6": "check_and_update_flags"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "input_data",
                    "4": "parameters",
                    "2": "params"
                },
                "param_2": {
                    "7": "flag",
                    "1": "input_value1",
                    "2": "flag_value",
                    "5": "value",
                    "6": "value1"
                },
                "param_3": {
                    "2": "threshold",
                    "1": "value_2",
                    "6": "value2",
                    "12": "limit"
                },
                "param_4": {
                    "4": "threshold",
                    "1": "param",
                    "3": "limit",
                    "7": "comparison_value",
                    "5": "value3",
                    "2": "compare_value"
                },
                "iVar1": {
                    "5": "return_value",
                    "1": "condition_result",
                    "21": "result",
                    "2": "difference"
                },
                "cVar2": {
                    "7": "flag",
                    "6": "char_value",
                    "2": "char_result",
                    "1": "updated_value",
                    "4": "flag_char",
                    "3": "result"
                },
                "uVar3": {
                    "1": "result",
                    "4": "masked_value",
                    "2": "updated_value",
                    "3": "modified_flag",
                    "5": "modified_value"
                },
                "bVar4": {
                    "7": "is_non_zero",
                    "9": "is_modified",
                    "1": "is_mask_nonzero",
                    "2": "is_updated"
                },
                "**param_1": {
                    "1": "ptr_deref"
                },
                "(*param_1)[5]": {
                    "1": "param_1_index_5"
                },
                "(*param_1)[6]": {
                    "1": "param_1_index_6"
                },
                "0x10": {
                    "1": "data_offset"
                },
                "0xc": {
                    "1": "array_index2"
                },
                "(int)param_1 + 0x3d": {
                    "1": "offset"
                },
                "param_1[0x10]": {
                    "1": "array_element1"
                },
                "param_1[0xc]": {
                    "1": "variable_2"
                },
                "FUN_080015a0": {
                    "1": "get_condition_result"
                },
                "param_1 + 0xf": {
                    "1": "variable_4"
                },
                "0x3d": {
                    "1": "offset"
                },
                "0xf": {
                    "1": "param15"
                },
                "return": {
                    "1": "return_value"
                }
            }
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_flag_08002bb4",
            "code": "\nundefined4 check_flag_08002bb4(int *array,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*array + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = FUN_08002d3c(array);\n    if (result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (result = FUN_080015a0(), size < (uint)(result - offset))))) {\n      flag1 = flag1 | 0x20;\n      flag2 = 0;\n      *(undefined *)((int)array + 0x3d) = 0x20;\n      *(undefined *)(array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_flag_08002bb4",
                "param_1": "array",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result",
                "param_1[0x10]": "flag1",
                "param_1[0xc]": "flag2"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002bb4": {
                    "5": "check_flag",
                    "1": "check_condition_and_update",
                    "4": "check_flag_status",
                    "2": "check_and_update_flags"
                },
                "param_1": {
                    "4": "data",
                    "10": "array",
                    "3": "flag_array",
                    "1": "flag_data",
                    "2": "pointer"
                },
                "param_2": {
                    "1": "limit",
                    "2": "max_size",
                    "5": "array_size",
                    "4": "value",
                    "8": "size",
                    "3": "length"
                },
                "param_3": {
                    "4": "index",
                    "1": "limit",
                    "2": "value",
                    "11": "offset"
                },
                "iVar1": {
                    "27": "result",
                    "4": "return_value"
                },
                "FUN_08002d3c": {
                    "1": "check_validity",
                    "2": "check_flag_condition",
                    "3": "check_condition"
                },
                "FUN_080015a0": {
                    "1": "get_threshold",
                    "2": "get_memory_size"
                },
                "param_1[0x14]": {
                    "1": "array[20]"
                },
                "param_1[0x10]": {
                    "1": "flags"
                },
                "param_1[0xc]": {
                    "1": "flag2"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag3"
                },
                "param_1 + 0xf": {
                    "1": "pointer"
                }
            }
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_memory_access_08002c2e",
            "code": "\nundefined4 check_memory_access_08002c2e(int *array,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*array + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(array);\n    if (result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (result = FUN_080015a0(), size < (uint)(result - offset))))) {\n      data_flag = data_flag | 0x20;\n      counter = 0;\n      *(undefined *)((int)array + 0x3d) = 0x20;\n      *(undefined *)(array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_memory_access_08002c2e",
                "param_1": "array",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result",
                "param_1[0x10]": "data_flag",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c2e": {
                    "1": "check_and_modify_flag",
                    "4": "check_memory_access",
                    "2": "check_status",
                    "3": "check_and_modify_flags"
                },
                "param_1": {
                    "1": "pointer_array",
                    "5": "data",
                    "12": "array",
                    "2": "flag_array"
                },
                "param_2": {
                    "1": "index",
                    "2": "limit",
                    "3": "array_size",
                    "11": "size",
                    "5": "length"
                },
                "param_3": {
                    "3": "threshold",
                    "1": "data_offset",
                    "5": "value",
                    "19": "offset"
                },
                "iVar1": {
                    "2": "status",
                    "25": "result",
                    "3": "return_value"
                },
                "FUN_08002d3c": {
                    "1": "perform_operation",
                    "2": "check_validity",
                    "3": "check_condition"
                },
                "FUN_080015a0": {
                    "1": "get_threshold",
                    "2": "get_array_size",
                    "3": "get_memory_size"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flags"
                },
                "param_1[0x10]": {
                    "1": "array_flag"
                },
                "param_1[0xc]": {
                    "3": "counter",
                    "1": "input_array[0xc]"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "data_status"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "status2"
                },
                "param_1[0x14]": {
                    "2": "flag"
                },
                "(int)param_1 + 0x3d": {
                    "1": "status"
                },
                "param_1 + 0xf": {
                    "2": "pointer"
                },
                "param_1 + 0x3d": {
                    "1": "bit_value"
                },
                "0x14": {
                    "1": "flag"
                },
                "0xffffffff": {
                    "1": "max_size"
                },
                "0x3d": {
                    "1": "some_constant"
                },
                "0x20": {
                    "1": "flag_constant"
                }
            }
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_condition_08002ca8",
            "code": "\nundefined4 check_condition_08002ca8(int *data,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*data + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*data + 0x14) & 0x10) == 0x10) break;\n    if ((size == 0) || (result = FUN_080015a0(), size < (uint)(result - offset))) {\n      flag_value = flag_value | 0x20;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*data + 0x14) = 0xffffffef;\n  flag_value = 0;\n  data[0xc] = 0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_condition_08002ca8",
                "param_1": "data",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result",
                "param_1[0x10]": "flag_value"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ca8": {
                    "2": "check_flag_status",
                    "1": "check_flags_and_modify",
                    "3": "check_status"
                },
                "param_1": {
                    "2": "input",
                    "6": "data",
                    "4": "input_array",
                    "1": "memory_ptr",
                    "3": "flag_ptr"
                },
                "param_2": {
                    "3": "data_size",
                    "1": "param_2",
                    "13": "size"
                },
                "param_3": {
                    "1": "subtracted_size",
                    "2": "value",
                    "17": "offset"
                },
                "iVar1": {
                    "4": "required_size",
                    "1": "max_offset",
                    "2": "temp_var",
                    "14": "result"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flags"
                },
                "param_1[0x10]": {
                    "1": "flags"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag3"
                },
                "FUN_080015a0": {
                    "1": "get_threshold",
                    "2": "get_required_size"
                },
                "0x14": {
                    "1": "flags"
                },
                "0x40": {
                    "1": "flag1"
                },
                "0x10": {
                    "1": "flag2"
                },
                "0x3d": {
                    "1": "status"
                },
                "0x20": {
                    "1": "modified_flag"
                },
                "0xf": {
                    "1": "temp"
                },
                "param_1 + 0xf": {
                    "1": "flag_ptr"
                },
                "F|8192": {
                    "1": "flag"
                },
                "F": {
                    "1": "flag"
                },
                "PTR_FUN_080015a0": {
                    "1": "get_threshold"
                },
                "*(uint *)(*input + 0x14)": {
                    "1": "flags"
                },
                "*(undefined *)((int)input + 0x3d)": {
                    "1": "flag"
                },
                "*(undefined *)(input + 0xf)": {
                    "1": "counter"
                },
                "*(undefined4 *)(*input + 0x14)": {
                    "1": "flag_value"
                },
                "*(uint *)(*param_1 + 0x14) & 0x40": {
                    "1": "bitmask_check1"
                },
                "*(uint *)(*param_1 + 0x14) & 0x10": {
                    "1": "bitmask_check2"
                },
                "*(undefined4 *)(*param_1 + 0x14)": {
                    "1": "pointer_array_element1"
                },
                "param_2 == 0": {
                    "1": "is_size_zero"
                },
                "param_2 < (uint)(iVar1 - param_3)": {
                    "1": "is_size_less_than_diff"
                }
            }
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flag_status_08002d3c",
            "code": "\nbool check_flag_status_08002d3c(int *flag_ptr)\n\n{\n  bool is_flag_set;\n  \n  is_flag_set = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    error_code = 4;\n    counter = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return is_flag_set;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "param_1": "flag_ptr",
                "bVar1": "is_flag_set",
                "param_1[0x10]": "error_code",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d3c": {
                    "1": "update_flags_and_values",
                    "8": "check_flag",
                    "12": "check_flag_status",
                    "2": "check_flag_and_set_values"
                },
                "param_1": {
                    "2": "flag_array",
                    "3": "flag_pointer",
                    "1": "flags",
                    "9": "flag_ptr"
                },
                "bVar1": {
                    "2": "flag",
                    "1": "is_flag_enabled",
                    "23": "is_flag_set"
                },
                "0x14": {
                    "1": "flag_offset",
                    "2": "offset"
                },
                "0x400": {
                    "1": "flag",
                    "4": "flag_mask"
                },
                "0xfffffbff": {
                    "1": "flag_reset"
                },
                "4": {
                    "2": "new_value",
                    "1": "flag_value"
                },
                "0x3d": {
                    "1": "some_constant"
                },
                "0x20": {
                    "1": "new_character"
                },
                "*param_1": {
                    "1": "flag_pointer"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "value",
                    "3": "flag_value"
                },
                "*(undefined4 *)(*param_1 + 0x14)": {
                    "2": "flag_address",
                    "1": "flag_register"
                },
                "param_1[0x10]": {
                    "1": "flag_count",
                    "3": "error_code"
                },
                "param_1[0xc]": {
                    "1": "flag_index",
                    "4": "counter"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "bit_mask",
                    "2": "buffer_size"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_result"
                },
                "0x10": {
                    "1": "value_index"
                },
                "0xc": {
                    "1": "current_index"
                },
                "0xf": {
                    "1": "other_index"
                },
                "(uint *)(*param_1 + 0x14)": {
                    "1": "flag_value_ptr"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_char_ptr"
                },
                "param_1 + 0xf": {
                    "1": "flag_bool_ptr"
                },
                "0": {
                    "1": "initial_value"
                }
            }
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "process_flags_08002d98",
            "code": "\n\n\nundefined4 process_flags_08002d98(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool flag;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (input_params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (input_params[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (input_params[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (input_params[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (input_params[1] == 0) {\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (input_params[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (input_params[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (input_params[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = FUN_080015a0();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (input_params[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (input_params[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (input_params[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (input_params[3] == 0) {\n      start_time = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (input_params[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (input_params[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (input_params[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = input_params[9] | input_params[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          current_time = FUN_080015a0();\n          if (2 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "flags",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "bVar4": "flag",
                "FUN_08002d98": "process_flags_08002d98",
                "param_1[1]": "input_params[1]",
                "param_1[4]": "input_params[4]",
                "param_1[6]": "input_params[6]",
                "param_1[3]": "input_params[3]",
                "param_1[7]": "input_params[7]",
                "param_1[8]": "input_params[8]",
                "param_1[9]": "input_params[9]"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "param",
                    "3": "params",
                    "2": "parameter",
                    "4": "parameters",
                    "11": "flags"
                },
                "iVar1": {
                    "1": "counter1",
                    "3": "initial_time",
                    "17": "start_time",
                    "2": "initial_value",
                    "4": "start_value"
                },
                "iVar2": {
                    "1": "updated_value",
                    "18": "current_time",
                    "2": "end_time",
                    "4": "current_value"
                },
                "uVar3": {
                    "24": "result",
                    "4": "return_value"
                },
                "bVar4": {
                    "9": "flag",
                    "1": "is_first_run",
                    "2": "condition",
                    "3": "is_flag_set"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "4": "register1"
                },
                "_DAT_40021000": {
                    "1": "value2",
                    "2": "register_2",
                    "3": "control_register",
                    "6": "register2"
                },
                "FUN_080015a0": {
                    "4": "get_time",
                    "1": "timer_function",
                    "3": "get_current_time"
                },
                "_DAT_40021024": {
                    "1": "status_register",
                    "2": "register_3",
                    "4": "register3"
                },
                "_DAT_40007000": {
                    "1": "register_4",
                    "3": "register4",
                    "2": "register5"
                },
                "_DAT_4002101c": {
                    "1": "value7",
                    "2": "register5"
                },
                "_DAT_40021020": {
                    "1": "mode_register",
                    "4": "register6"
                },
                "_DAT_42420000": {
                    "1": "flag_a",
                    "2": "register3",
                    "3": "flag1"
                },
                "_DAT_42420480": {
                    "1": "register_4",
                    "2": "flag2"
                },
                "_DAT_42420060": {
                    "1": "flag2",
                    "3": "register9"
                },
                "register_1": {
                    "1": "register_1_temp"
                },
                "register_2": {
                    "1": "condition_2"
                },
                "FUN_08002d98": {
                    "1": "process_function",
                    "2": "handle_flags",
                    "6": "process_flags"
                },
                "param_1[1]": {
                    "1": "input_params[1]"
                },
                "param_1[4]": {
                    "1": "value1"
                },
                "param_1[6]": {
                    "1": "param6"
                },
                "param_1[3]": {
                    "1": "param3"
                },
                "param_1[7]": {
                    "1": "param7"
                },
                "_DAT_4002100c": {
                    "1": "value10"
                },
                "_DAT_40021008": {
                    "1": "value11"
                },
                "param_1[8]": {
                    "1": "input_params[8]"
                },
                "param_1[9]": {
                    "1": "param9"
                },
                "param_1[1] == 0": {
                    "1": "condition2"
                },
                "param_1[1] == 0x10000": {
                    "1": "condition3"
                },
                "param_1[1] == 0x50000": {
                    "1": "condition4"
                },
                "FUN_080015a0()": {
                    "1": "get_elapsed_time()"
                },
                "100": {
                    "1": "threshold1"
                },
                "_DAT_40021000 & 0x20000": {
                    "1": "register2_flag1"
                },
                "_DAT_40021000 & 0x20000 == 0": {
                    "1": "register2_flag2"
                },
                "2": {
                    "1": "threshold2"
                },
                "_DAT_40021024 & 2": {
                    "1": "register4_flag"
                },
                "3": {
                    "1": "threshold3"
                },
                "param_1[4] != 1": {
                    "1": "condition5"
                },
                "param_1[4] == 0": {
                    "1": "condition6"
                },
                "param_1[4] == 0x10000": {
                    "1": "condition7"
                },
                "param_1[6] == 0": {
                    "1": "condition8"
                },
                "_DAT_4002101c & 0x10000000 == 0": {
                    "1": "condition9"
                },
                "_DAT_40007000 & 0x100": {
                    "1": "register5_flag"
                },
                "param_1[3] == 1": {
                    "1": "condition11"
                },
                "param_1[3] == 0": {
                    "1": "condition12"
                },
                "param_1[3] == 5": {
                    "1": "condition13"
                },
                "_DAT_40021020 & 2": {
                    "1": "register6_flag1"
                },
                "_DAT_40021020 & 2 == 0": {
                    "1": "register6_flag2"
                },
                "5000": {
                    "1": "threshold4"
                },
                "register6Flag1": {
                    "1": "register6_flag3"
                },
                "register6Flag2": {
                    "1": "register6_flag4"
                },
                "param_1[7] == 0": {
                    "1": "condition14"
                },
                "param_1[7] == 2": {
                    "1": "condition15"
                },
                "param_1[8] == 0x10000": {
                    "1": "condition16"
                },
                "_DAT_40021000 & 0x2000000": {
                    "1": "register7_flag1"
                },
                "_DAT_40021000 & 0x2000000 == 0": {
                    "1": "register7_flag2"
                },
                "_DAT_40021004: , : controlReg5: ,\n  : _DAT_42420060": {
                    "1": "flag3"
                },
                "FUN_08003568": {
                    "2": "set_flag",
                    "1": "toggle_device_mode"
                },
                "FUND_080015a0": {
                    "1": "get_current_time"
                },
                "FIR_080015a0": {
                    "1": "get_time"
                },
                "FUM_080015a0": {
                    "1": "get_elapsed_time"
                },
                "dataRegister1": {
                    "1": "updated_data1"
                },
                "dataRegister2": {
                    "1": "updated_data2"
                },
                "params[1]": {
                    "1": "param1"
                },
                "params[4]": {
                    "1": "param4"
                },
                "params[5]": {
                    "1": "param5"
                },
                "F_FUN_080015a0": {
                    "1": "get_elapsed_time"
                },
                "F_FUN_08003568": {
                    "1": "change_value"
                }
            }
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "update_memory_protection_08003260",
            "code": "\n\n\nundefined4 update_memory_protection_08003260(uint *flags,uint size)\n\n{\n  int initial_value;\n  int current_value;\n  uint result;\n  undefined4 status;\n  \n  if (((_DAT_40022000 & 7) < size) &&\n     (_DAT_40022000 = size | _DAT_40022000 & 0xfffffff8, size != (size & 7))) {\n    status = 1;\n  }\n  else {\n    if ((*flags & 2) != 0) {\n      _DAT_40021004 = param_array[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*flags & 1) == 0) {\nLAB_08003394:\n      if ((size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = size | _DAT_40022000 & 0xfffffff8, size != (size & 7))) {\n        status = 1;\n      }\n      else {\n        if ((*flags & 4) != 0) {\n          _DAT_40021004 = param_array[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*flags & 8) != 0) {\n          _DAT_40021004 = param_array[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        result = FUN_08003440();\n        DAT_20000018 = result >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        status = 0;\n      }\n    }\n    else {\n      if (operation_type == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((operation_type != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = operation_type | _DAT_40021004 & 0xfffffffc;\n      initial_value = FUN_080015a0();\n      if (operation_type == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_value = FUN_080015a0();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        status = 3;\n      }\n      else if (operation_type == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_value = FUN_080015a0();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        status = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_value = FUN_080015a0();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        status = 3;\n      }\n    }\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003260": "update_memory_protection_08003260",
                "param_1": "flags",
                "param_2": "size",
                "uVar3": "result",
                "uVar4": "status",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "param_1[1]": "operation_type",
                "param_1[2]": "param_array[2]",
                "param_1[3]": "param_array[3]",
                "param_1[4]": "param_array[4]"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003260": {
                    "1": "update_permissions",
                    "4": "update_memory_protection",
                    "2": "update_settings",
                    "3": "update_configuration"
                },
                "param_1": {
                    "2": "memory_info",
                    "1": "config_params",
                    "3": "settings",
                    "5": "flags"
                },
                "param_2": {
                    "1": "new_config",
                    "4": "value",
                    "17": "size",
                    "2": "new_permissions"
                },
                "uVar3": {
                    "1": "processed_value",
                    "2": "shifted_value",
                    "24": "result"
                },
                "uVar4": {
                    "1": "success_flag",
                    "5": "return_value",
                    "3": "error_code",
                    "2": "return_code",
                    "13": "status",
                    "4": "result"
                },
                "iVar1": {
                    "1": "first_timestamp",
                    "3": "start_time",
                    "8": "initial_value",
                    "7": "start_value",
                    "2": "start"
                },
                "iVar2": {
                    "1": "end",
                    "4": "current_time",
                    "11": "current_value"
                },
                "_DAT_40022000": {
                    "1": "global_variable1",
                    "3": "memory_control_register"
                },
                "_DAT_40021004": {
                    "1": "data_config",
                    "2": "register"
                },
                "DAT_20000018": {
                    "3": "data",
                    "1": "result",
                    "2": "processed_data"
                },
                "DAT_08009eb0": {
                    "4": "lookup_table",
                    "1": "permissions_lookup_table"
                },
                "_DAT_40021000": {
                    "1": "register2"
                },
                "FUN_08003440": {
                    "1": "get_data"
                },
                "FUN_0800151c": {
                    "1": "initialize_data",
                    "3": "log_event"
                },
                "param_1[1]": {
                    "1": "operation_type"
                },
                "FUN_080015a0": {
                    "1": "get_elapsed_time",
                    "2": "get_current_time"
                },
                "param_1[2]": {
                    "1": "param_array[2]"
                },
                "param_1[3]": {
                    "1": "param_array[3]"
                },
                "param_1[4]": {
                    "1": "param_array[4]"
                }
            }
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculate_execution_time_08003440(void)\n\n{\n  undefined2 delay_multiplier;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint result;\n  undefined4 temp;\n  uint dat_40021004;\n  uint execution_time;\n  uint temp;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  delay_multiplier = 0x201;\n  temp = 0;\n  temp = 0;\n  result = 0;\n  execution_time = 0;\n  dat_40021004 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    execution_time = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp = result * 4000000;\n    }\n    else {\n      temp = (result * 8000000) / (uint)*(byte *)((int)&delay_multiplier + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    execution_time = temp;\n  }\n  else {\n    execution_time = 8000000;\n  }\n  return execution_time;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "delay_multiplier",
                "local_2c": "constant1",
                "uStack_28": "constant2",
                "uStack_24": "constant3",
                "uStack_20": "constant4",
                "local_1c": "result",
                "local_18": "temp",
                "local_14": "dat_40021004",
                "local_10": "execution_time",
                "local_c": "temp"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003440": {
                    "1": "calculate_local_timing",
                    "7": "calculate_delay",
                    "4": "calculate_clock_speed",
                    "3": "calculate_local_time",
                    "2": "calculate_timeout",
                    "11": "calculate_execution_time"
                },
                "local_30": {
                    "1": "num_seconds_in_minute",
                    "2": "timeout_value",
                    "3": "delay_multiplier"
                },
                "local_2c": {
                    "1": "value_x",
                    "8": "constant1",
                    "2": "constant_a",
                    "7": "value1"
                },
                "uStack_28": {
                    "1": "value0",
                    "2": "constant_b",
                    "7": "value2",
                    "8": "constant2"
                },
                "uStack_24": {
                    "1": "value_c",
                    "2": "constant_c",
                    "7": "value3",
                    "8": "constant3"
                },
                "uStack_20": {
                    "1": "stack_pointer4",
                    "2": "constant_d",
                    "7": "value4",
                    "8": "constant4"
                },
                "local_1c": {
                    "1": "clock_speed",
                    "3": "execution_time",
                    "2": "multiplier",
                    "8": "result"
                },
                "local_18": {
                    "1": "variable1",
                    "2": "temporary",
                    "3": "temp1"
                },
                "local_14": {
                    "2": "global_data",
                    "3": "data",
                    "1": "variable2",
                    "4": "dat_40021004"
                },
                "local_10": {
                    "1": "local_time",
                    "2": "timeout",
                    "4": "delay",
                    "5": "clock_speed",
                    "9": "execution_time"
                },
                "local_c": {
                    "2": "temp_variable",
                    "3": "temp1",
                    "1": "calculation1"
                },
                "_DAT_40021004": {
                    "1": "status",
                    "2": "input_data"
                },
                "DAT_40021004": {
                    "1": "input_data"
                }
            }
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_value_08003504",
            "code": "\naddress get_data_value_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_value_08003504",
                "undefined4": "address"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003504": {
                    "1": "get_config_value",
                    "2": "get_global_variable_value",
                    "9": "get_data_value",
                    "8": "get_data",
                    "5": "get_data_address"
                },
                "DAT_20000018": {
                    "6": "data",
                    "1": "data_element",
                    "3": "global_variable",
                    "5": "data_value",
                    "4": "data_address"
                },
                "undefined4": {
                    "1": "address"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shifted_result_08003518",
            "code": "\n\n\nuint shifted_result_08003518(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(shift_amount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shifted_result_08003518",
                "uVar1": "result",
                "sbyte": "shift_amount"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003518": {
                    "1": "readable_shifted_value",
                    "2": "shift_and_return_value",
                    "4": "shifted_result",
                    "3": "extracted_value_from_binary"
                },
                "uVar1": {
                    "2": "original_value",
                    "1": "retrieved_value",
                    "5": "result"
                },
                "FUN_08003504": {
                    "1": "get_value_from_sub_function",
                    "3": "get_initial_value",
                    "2": "get_unsigned_value",
                    "5": "get_original_value"
                },
                "DAT_08009ec0": {
                    "1": "data_offset"
                },
                "_DAT_40021004": {
                    "2": "value",
                    "1": "input_value_from_hardware",
                    "3": "input_value"
                },
                "sbyte_08009ec0": {
                    "1": "shift_amount_byte"
                },
                "sbyte": {
                    "1": "signed_byte",
                    "2": "shift_amount"
                },
                "&DAT_08009ec0": {
                    "1": "byte_value"
                },
                "sbyte *((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7))": {
                    "1": "shifted_value"
                },
                "sbyte_value": {
                    "1": "shift_amount"
                },
                "uVar2": {
                    "1": "offset"
                }
            }
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "shifted_value_08003540",
            "code": "\n\n\nuint shifted_value_08003540(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(shift_amount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "shifted_value_08003540",
                "uVar1": "result",
                "sbyte": "shift_amount"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003540": {
                    "1": "shift_and_return_value",
                    "2": "extract_bits",
                    "4": "shifted_value"
                },
                "FUN_08003504": {
                    "1": "get_data",
                    "6": "get_value",
                    "4": "get_initial_value",
                    "3": "get_unsigned_value"
                },
                "uVar1": {
                    "1": "initial_value",
                    "2": "result_of_subfunction",
                    "8": "result"
                },
                "*(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7))": {
                    "1": "shift_amount"
                },
                "&DAT_08009ec0": {
                    "2": "data_pointer",
                    "1": "data_address"
                },
                "_DAT_40021004": {
                    "1": "offset",
                    "3": "data_value",
                    "2": "input_data"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "sbyte": {
                    "2": "offset",
                    "4": "shift_amount",
                    "1": "bit_offset"
                },
                "DAT_08009ec0": {
                    "1": "data_address"
                },
                "sbyte *((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7))": {
                    "1": "shift_amount"
                },
                "7": {
                    "2": "bit_mask"
                },
                "sbyte *": {
                    "1": "pointer_to_byte"
                }
            }
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "calculate_iterations_08003568",
            "code": "\nvoid calculate_iterations_08003568(int input_value)\n\n{\n  bool is_count_positive;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000018 / 8000);\n  do {\n    is_count_positive = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (is_count_positive);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "calculate_iterations_08003568",
                "param_1": "input_value",
                "local_c": "delay_count",
                "bVar1": "is_count_positive"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003568": {
                    "9": "calculate_delay",
                    "1": "delay",
                    "12": "calculate_iterations",
                    "5": "delay_function"
                },
                "param_1": {
                    "5": "input",
                    "22": "input_value",
                    "1": "time_in_seconds",
                    "2": "multiplier"
                },
                "local_c": {
                    "3": "iterations",
                    "1": "scaled_iterations",
                    "7": "delay_count",
                    "2": "iteration_count",
                    "6": "result"
                },
                "bVar1": {
                    "1": "is_count_positive"
                }
            }
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_and_process_data_080035a4",
            "code": "\nundefined4 check_and_process_data_080035a4(undefined4 *data_ptr)\n\n{\n  undefined4 result;\n  \n  if (data_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      FUNC_080035fa(data_ptr);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    FUN_08003c94(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_and_process_data_080035a4",
                "param_1": "data_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080035a4": {
                    "4": "validate_param",
                    "5": "check_and_update_status",
                    "1": "check_parameter_validity",
                    "9": "check_and_process_data",
                    "3": "validate_and_process_data"
                },
                "param_1": {
                    "5": "param",
                    "2": "input_ptr",
                    "1": "status_pointer",
                    "9": "data_ptr",
                    "3": "input_array"
                },
                "uVar1": {
                    "4": "return_value",
                    "1": "is_valid",
                    "3": "status",
                    "22": "result"
                },
                "FUN_08003c94": {
                    "1": "perform_operation",
                    "5": "process_data",
                    "2": "process_sub_data"
                },
                "FUNC_080035fa": {
                    "1": "execute_operation",
                    "9": "process_data"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "3": "flag",
                    "1": "flag_value"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "data_mark",
                    "2": "value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "2": "status",
                    "1": "temporary_flag"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "param_1 + 1": {
                    "1": "data_ptr_next"
                },
                "param_1 + 0xf": {
                    "1": "data_ptr_offset_f"
                },
                "char_ptr": {
                    "1": "status_flag_ptr"
                },
                "FUNC_08003c94": {
                    "1": "process_data"
                },
                "(int)param_1 + 0x3d": {
                    "1": "data_ptr_offset"
                }
            }
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_flags_0800360c",
            "code": "\nundefined4 set_flags_0800360c(uint **array)\n\n{\n  (*array)third_element = (*array)third_element | 1;\n  **array = **array | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "array",
                "[3]": "third_element"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800360c": {
                    "1": "set_flag_and_value",
                    "3": "set_bit_to_one",
                    "5": "set_flags_and_values",
                    "2": "set_flags_and_value",
                    "8": "set_flags"
                },
                "param_1": {
                    "3": "values",
                    "7": "array",
                    "1": "input_pointer",
                    "2": "array_pointer"
                },
                "**param_1": {
                    "1": "current_value",
                    "3": "array[0]",
                    "5": "value"
                },
                "(*param_1)[3]": {
                    "1": "flags[3]",
                    "3": "array[3]",
                    "2": "third_element"
                },
                "values": {
                    "1": "numbers"
                },
                "*param_1": {
                    "1": "current_element"
                },
                "param_1[3]": {
                    "1": "values[3]"
                },
                "values[3]": {
                    "1": "values[3]"
                },
                "param_1[3][0]": {
                    "1": "data[3][0]"
                },
                "[3]": {
                    "1": "third_element"
                },
                "[3] | 1": {
                    "1": "updated_value"
                },
                "**param_1 | 1": {
                    "1": "updated_array_value"
                },
                "|": {
                    "1": "bitwise_or"
                }
            }
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "check_and_process_data_08003640",
            "code": "\nundefined4 check_and_process_data_08003640(undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_08003696(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 2;\n    FUN_08003c94(*data,data + 1);\n    *(undefined *)((int)data + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003640": "check_and_process_data_08003640",
                "param_1": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003640": {
                    "3": "validate_and_process_data",
                    "2": "check_validity",
                    "1": "verify_param",
                    "9": "check_and_process_data"
                },
                "param_1": {
                    "3": "input",
                    "8": "data",
                    "2": "data_pointer",
                    "1": "input_param",
                    "4": "param"
                },
                "uVar1": {
                    "5": "status",
                    "18": "result",
                    "7": "return_value",
                    "1": "is_valid"
                },
                "FUNC_08003696": {
                    "1": "update_data",
                    "6": "process_data",
                    "3": "initialize_data",
                    "2": "reset_param"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "2": "flag",
                    "1": "data_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "temporary_variable",
                    "2": "data_flag"
                },
                "FUN_08003c94": {
                    "1": "process_sub_function",
                    "9": "process_data",
                    "2": "process_sub_data",
                    "3": "perform_operation"
                },
                "*param_1": {
                    "1": "first_parameter",
                    "2": "data_value"
                },
                "param_1 + 1": {
                    "1": "param_2",
                    "2": "next_data"
                },
                "param_2": {
                    "1": "next_user_data"
                },
                "param_1 + 0xf": {
                    "1": "action_param",
                    "2": "data_offset"
                },
                "*(char *)((int)data_ptr + 0x3d)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)data_ptr + 0x3d)": {
                    "1": "flag_value"
                },
                "FUNCH_08003c94": {
                    "1": "process_param"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "data_flag",
                    "2": "status"
                },
                "FUNC_08003c94": {
                    "1": "process_data"
                },
                "FUN_08003696": {
                    "1": "reset_data"
                }
            }
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_flags_080036a8",
            "code": "\nundefined4 update_flags_080036a8(unsigned_int **data,undefined4 value)\n\n{\n  FUN_080041ea(*data,value,1);\n  if (*data == (unsigned_int *)0x40012c00) {\n    (*data)element_17 = (*data)element_17 | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_flags_080036a8",
                "param_1": "data",
                "param_2": "value",
                "uint": "unsigned_int",
                "[0x11]": "element_17"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080036a8": {
                    "1": "update_values",
                    "2": "update_flags_and_values",
                    "3": "update_data",
                    "9": "update_flags"
                },
                "param_1": {
                    "10": "data",
                    "1": "input_pointer",
                    "2": "memory",
                    "3": "data_pointer",
                    "4": "flags"
                },
                "param_2": {
                    "4": "flag",
                    "25": "value",
                    "1": "new_value"
                },
                "param_3": {
                    "13": "flag",
                    "1": "flag_value",
                    "2": "flag_index"
                },
                "FUN_080041ea": {
                    "1": "set_flags",
                    "2": "process_data"
                },
                "(*param_1)[0x11]": {
                    "1": "data_element",
                    "2": "data[17]"
                },
                "param_1[0x11]": {
                    "1": "value[17]"
                },
                "*param_1": {
                    "1": "value_ptr",
                    "2": "value"
                },
                "uint": {
                    "1": "unsigned_integer",
                    "2": "unsigned_int"
                },
                "0x40012c00": {
                    "1": "special_value"
                },
                "0x11": {
                    "4": "index"
                },
                "**param_1": {
                    "2": "data_value",
                    "1": "input_pointer_value"
                },
                "(uint *)0x40012c00": {
                    "2": "target_address",
                    "1": "base_address"
                },
                "*param_1[0x11]": {
                    "1": "data_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "[0x11]": {
                    "1": "element_17"
                },
                "0x8000": {
                    "1": "bit_mask"
                },
                "1": {
                    "1": "updated_flag"
                },
                "DAT_40012c00": {
                    "1": "special_value"
                }
            }
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_data_080036f8",
            "code": "\nvoid process_data_080036f8(int *data)\n\n{\n  if (((*(uint *)(*data + 0x10) & 2) == 2) && ((*(uint *)(*data + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 7) = 1;\n    if ((*(uint *)(*data + 0x18) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 4) == 4) && ((*(uint *)(*data + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 7) = 2;\n    if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 8) == 8) && ((*(uint *)(*data + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 7) = 4;\n    if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 0x10) == 0x10) && ((*(uint *)(*data + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffef;\n    *(undefined *)(data + 7) = 8;\n    if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 1) == 1) && ((*(uint *)(*data + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffe;\n    FUN_08004f78(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x80) == 0x80) && ((*(uint *)(*data + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffff7f;\n    FUNC_08004378(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x40) == 0x40) && ((*(uint *)(*data + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffbf;\n    FUNC_08003c80(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x20) == 0x20) && ((*(uint *)(*data + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffdf;\n    FUNC_08004366(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "param_1": "data"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080036f8": {
                    "1": "handle_params",
                    "9": "process_data",
                    "2": "process_parameters",
                    "5": "process_flags"
                },
                "param_1": {
                    "2": "input_array",
                    "8": "data",
                    "1": "param",
                    "3": "flags"
                },
                "FUNC_08003c4a": {
                    "1": "handle_case2",
                    "2": "process_case1"
                },
                "FUNC_08003c5c": {
                    "1": "perform_action_b",
                    "2": "do_something_c"
                },
                "FUNC_08003c6e": {
                    "1": "handle_bit3",
                    "2": "perform_action_c"
                },
                "FUNC_08003c80": {
                    "1": "handle_bit6",
                    "2": "process_case4"
                },
                "FUNC_08004366": {
                    "2": "process_case5",
                    "1": "do_something_g"
                },
                "FUNC_08004378": {
                    "1": "process_flag0x80",
                    "2": "reverse_bit7"
                },
                "FUN_08004f78": {
                    "1": "reverse_something",
                    "2": "reverse_data"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "value1",
                    "3": "flag1"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value_at_offset_c",
                    "3": "flag2"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "result_flag",
                    "4": "result"
                },
                "*(undefined *)(param_1 + 7)": {
                    "2": "flag",
                    "1": "execution_status",
                    "4": "status"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "3": "condition1",
                    "1": "param_1_value_4"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "3": "condition2",
                    "1": "check_flag_2"
                },
                "param_1 + 7": {
                    "1": "input_status"
                },
                "FUNC_08004f78": {
                    "1": "do_something_d"
                },
                "*param_1": {
                    "1": "input_array"
                },
                "*(undefined (*)(void))(void)": {
                    "1": "func_08004366"
                },
                "(uint *)(*param_1 + 0x10)": {
                    "1": "flag1"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "flag2"
                },
                "(undefined4 *)(*param_1 + 0x10)": {
                    "1": "result"
                },
                "(uint *)(*param_1 + 0x18)": {
                    "1": "flag3"
                },
                "(uint *)(*param_1 + 0x1c)": {
                    "1": "flag4"
                },
                "*(uint *)(*param + 0x10)": {
                    "1": "flag1"
                },
                "*(uint *)(*param + 0xc)": {
                    "1": "flag2"
                },
                "*(undefined4 *)(*param + 0x10)": {
                    "1": "result"
                },
                "*(undefined *)(param + 7)": {
                    "1": "status"
                },
                "*(uint *)(*param + 0x18)": {
                    "1": "check1"
                },
                "*(uint *)(*param + 0x1c)": {
                    "1": "check2"
                }
            }
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "process_data_08003908",
            "code": "\nundefined4 process_data_08003908(int *array,int value,undefined4 flag)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    switch(flag) {\n    case 0:\n      FUN_08003d60(*array,value);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 8;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffffb;\n      *(uint *)(*array + 0x18) = *(uint *)(value + 0x10) | *(uint *)(*array + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*array,value);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 0x800;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffbff;\n      *(uint *)(*array + 0x18) = *(int *)(value + 0x10) << 8 | *(uint *)(*array + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*array,value);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 8;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffffb;\n      *(uint *)(*array + 0x1c) = *(uint *)(value + 0x10) | *(uint *)(*array + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*array,value);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 0x800;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffbff;\n      *(uint *)(*array + 0x1c) = *(int *)(value + 0x10) << 8 | *(uint *)(*array + 0x1c);\n    }\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "process_data_08003908",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "result",
                "switch(param_3)": "switch(flag)"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003908": {
                    "3": "process_function",
                    "8": "process_data",
                    "1": "update_flags",
                    "2": "update_permissions"
                },
                "param_1": {
                    "6": "data",
                    "9": "array",
                    "1": "flag_array",
                    "2": "permissions",
                    "3": "input_array"
                },
                "param_2": {
                    "7": "param_value",
                    "2": "param",
                    "1": "length",
                    "12": "value",
                    "4": "size"
                },
                "param_3": {
                    "9": "flag",
                    "2": "mode",
                    "1": "code_type",
                    "3": "switch_value",
                    "4": "option"
                },
                "uVar1": {
                    "1": "status",
                    "18": "result",
                    "12": "return_value"
                },
                "FUN_08003ff8": {
                    "1": "process_case_c",
                    "2": "process_case_0xc"
                },
                "FUN_08003e38": {
                    "1": "set_flag2",
                    "2": "process_case_4"
                },
                "FUN_08003f18": {
                    "1": "update_permission_type_d",
                    "2": "process_case_8"
                },
                "FUN_08003d60": {
                    "1": "set_flag_a",
                    "2": "process_case_0"
                },
                "dataPointer": {
                    "1": "data"
                },
                "param2": {
                    "1": "value"
                },
                "param_1 + 0xf": {
                    "1": "array[15]"
                },
                "(int)param_1 + 0x3d": {
                    "1": "array[61]"
                },
                "*param_1": {
                    "1": "array[0]"
                },
                "*param_2": {
                    "1": "value[0]"
                },
                "*(int *)(param_2 + 0x10)": {
                    "1": "value[0x10]"
                },
                "*(uint *)(param_2 + 0x10)": {
                    "1": "value[0x10]"
                },
                "F": {
                    "1": "flag"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "switch_flag_value"
                },
                "switch(param_3)": {
                    "1": "switch(flag)"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "flag_register1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "flag_register4"
                }
            }
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "process_data_08003a94",
            "code": "\nundefined4 process_data_08003a94(int *data_ptr,uint *values)\n\n{\n  undefined4 result;\n  uint param_value;\n  \n  if (*(char *)(data_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data_ptr + 0xf) = 1;\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xffff0088;\n    param_value = *values;\n    if (param_value == 0x40) {\n      FUN_080040a0(*data_ptr,param_value1,param_value3);\n      FUN_0800416a(*data_ptr,0x40);\n    }\n    else if (param_value < 0x41) {\n      if (param_value == 0x10) {\n        FUN_0800416a(*data_ptr,0x10);\n      }\n      else if (param_value < 0x11) {\n        if (param_value == 0) {\n          FUN_0800416a(*data_ptr,0);\n        }\n      }\n      else if (param_value == 0x20) {\n        FUN_0800416a(*data_ptr,0x20);\n      }\n      else if (param_value == 0x30) {\n        FUN_0800416a(*data_ptr,0x30);\n      }\n    }\n    else if (param_value == 0x70) {\n      FUN_080041a8(*data_ptr,param_value2,param_value1,param_value3);\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xffffff88 | 0x77;\n    }\n    else if (param_value < 0x71) {\n      if (param_value == 0x50) {\n        FUN_080040a0(*data_ptr,param_value1,param_value3);\n        FUN_0800416a(*data_ptr,0x50);\n      }\n      else if (param_value == 0x60) {\n        FUN_08004104(*data_ptr,param_value1,param_value3);\n        FUN_0800416a(*data_ptr,0x60);\n      }\n    }\n    else if (param_value == 0x1000) {\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xfffffff8;\n    }\n    else if (param_value == 0x2000) {\n      FUN_080041a8(*data_ptr,param_value2,param_value1,param_value3);\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) | 0x4000;\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    *(undefined *)(data_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "process_data_08003a94",
                "param_1": "data_ptr",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "param_value",
                "param_2[1]": "param_value1",
                "param_2[2]": "param_value2",
                "param_2[3]": "param_value3"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003a94": {
                    "1": "execute_operation",
                    "6": "process_params",
                    "9": "process_data",
                    "3": "update_configuration"
                },
                "param_1": {
                    "1": "flag_array",
                    "3": "config",
                    "2": "input_array",
                    "4": "param_array",
                    "7": "data_ptr"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "info_ptr",
                    "7": "values",
                    "5": "param_values",
                    "3": "param_array",
                    "4": "param_ptr"
                },
                "uVar1": {
                    "22": "result",
                    "9": "return_value"
                },
                "uVar2": {
                    "14": "param_value",
                    "1": "operation_code",
                    "3": "info_value",
                    "10": "value"
                },
                "FUN_08004104": {
                    "2": "perform_operation1",
                    "1": "apply_function1"
                },
                "FUN_080040a0": {
                    "1": "perform_action_b",
                    "2": "perform_action2"
                },
                "FUN_0800416a": {
                    "1": "set_data_type",
                    "2": "set_flag"
                },
                "FUN_080041a8": {
                    "1": "set_config_0x70",
                    "2": "perform_action4"
                },
                "*param_1": {
                    "1": "param_array_pointer"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "param_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "updated_param_flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "updated_param_value"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "param_value_pointer"
                },
                "param_2[1]": {
                    "1": "param_value1"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "param_2[3]": {
                    "1": "param_value3"
                }
            }
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_08003c94",
            "code": "\nvoid update_memory_08003c94(uint *memory_address,uint *new_values)\n\n{\n  uint current_value;\n  \n  current_value = *memory_address;\n  if ((((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n      (memory_address == (uint *)0x40000400)) || (memory_address == (uint *)0x40000800)) {\n    current_value = new_values[1] | current_value & 0xffffff8f;\n  }\n  if (((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n     ((memory_address == (uint *)0x40000400 || (memory_address == (uint *)0x40000800)))) {\n    current_value = new_values[3] | current_value & 0xfffffcff;\n  }\n  *memory_address = new_values[5] | current_value & 0xffffff7f;\n  memory_value2 = new_values[2];\n  memory_value3 = *new_values;\n  if (memory_address == (uint *)0x40012c00) {\n    special_value = new_values[4];\n  }\n  flag = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "param_1": "memory_address",
                "param_2": "new_values",
                "local_c": "current_value",
                "uRam40012c30": "special_value",
                "param_1[0xb]": "memory_value2",
                "param_1[10]": "memory_value3",
                "param_1[5]": "flag"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003c94": {
                    "1": "modify_and_copy_registers",
                    "16": "update_memory",
                    "2": "update_configuration",
                    "3": "update_registers"
                },
                "param_1": {
                    "1": "memory1",
                    "3": "register1",
                    "9": "memory_address"
                },
                "param_2": {
                    "4": "data",
                    "1": "new_config",
                    "6": "new_values",
                    "3": "new_data",
                    "2": "new_memory"
                },
                "local_c": {
                    "1": "temporary_value",
                    "5": "temp_value",
                    "2": "memory_value",
                    "4": "original_value",
                    "9": "current_value"
                },
                "uRam40012c30": {
                    "2": "updated_value",
                    "1": "register1_value4",
                    "6": "special_value"
                },
                "PTR_40012c00": {
                    "1": "memory_segment_pointer1"
                },
                "PTR_40000000": {
                    "1": "memory_segment_pointer2"
                },
                "PTR_40000400": {
                    "1": "memory_segment_pointer3"
                },
                "PTR_40000800": {
                    "1": "memory_segment_pointer4"
                },
                "param_1[0xb]": {
                    "2": "memory_value2"
                },
                "param_1[10]": {
                    "2": "memory_value3"
                },
                "param_1[5]": {
                    "2": "flag"
                },
                "*param_1": {
                    "1": "current_memory"
                }
            }
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_parameters_08003d60",
            "code": "\nvoid update_parameters_08003d60(int base_address,uint *parameters)\n\n{\n  uint new_value1;\n  uint new_value2;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  local_value = *(uint *)(base_address + 4);\n  new_value1 = *parameters;\n  new_value2 = value2 | *(uint *)(base_address + 0x20) & 0xfffffffd;\n  if (base_address == 0x40012c00) {\n    new_value2 = (value3 | new_value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = value6 | value5 | local_value & 0xfffffcff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x18) = new_value1 | *(uint *)(base_address + 0x18) & 0xffffff8c;\n  *(uint *)(base_address + 0x34) = value1;\n  *(uint *)(base_address + 0x20) = new_value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_parameters_08003d60",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "new_value1",
                "uVar2": "new_value2",
                "local_10": "local_value",
                "param_2[2]": "value2",
                "param_2[3]": "value3",
                "param_2[6]": "value6",
                "param_2[5]": "value5",
                "param_2[1]": "value1"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003d60": {
                    "1": "set_flags_and_values",
                    "2": "update_flags_and_values",
                    "3": "update_params",
                    "4": "update_data",
                    "6": "update_parameters"
                },
                "param_1": {
                    "2": "settings_address",
                    "6": "param_address",
                    "1": "param_base_address",
                    "8": "base_address",
                    "3": "data_address"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "data_values",
                    "3": "values",
                    "6": "param_values",
                    "7": "parameters"
                },
                "uVar1": {
                    "7": "first_value",
                    "2": "data1",
                    "1": "input_value1",
                    "9": "new_value1",
                    "5": "value1"
                },
                "uVar2": {
                    "2": "data2",
                    "6": "second_value",
                    "9": "new_value2",
                    "1": "flag2",
                    "4": "value2"
                },
                "local_10": {
                    "13": "local_value",
                    "3": "temp_value",
                    "1": "current_value",
                    "2": "local_var"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "parameter_mask"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "config_param_value2"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "other_value1"
                },
                "*(uint *)(param_1 + 0x34)": {
                    "1": "config_param_value4"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffffe": {
                    "1": "updated_config_param_value"
                },
                "uVar1 | *(uint *)(param_1 + 0x18) & 0xffffff8c": {
                    "1": "updated_config_param_value3"
                },
                "param_2[2] | *(uint *)(param_1 + 0x20) & 0xfffffffd": {
                    "1": "updated_config_data_value"
                },
                "param_2[3] | uVar2 & 0xfffffff7": {
                    "1": "updated_config_data_value2"
                },
                "param_2[6] | param_2[5] | local_10 & 0xfffffcff": {
                    "1": "updated_config_param_value2"
                },
                "0x20": {
                    "1": "mask_clear_bit_1"
                },
                "0xfffffffe": {
                    "1": "bit_0_clear"
                },
                "0x4": {
                    "1": "offset_settings"
                },
                "0x18": {
                    "1": "offset_setting"
                },
                "0xffffff8c": {
                    "1": "mask_clear_bits_27_31"
                },
                "0x34": {
                    "1": "updated_value"
                },
                "0x10": {
                    "1": "flag_bit_30"
                },
                "0xfffffffd": {
                    "1": "mask_clear_bits_1_2"
                },
                "0x40012c00": {
                    "1": "base_address"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "(param_1 + 0x20)": {
                    "1": "register_ptr_value"
                },
                "(param_1 + 0x4)": {
                    "1": "register_ptr_4"
                },
                "param_2[3]": {
                    "1": "other_value4"
                },
                "param_2[6]": {
                    "1": "value6"
                },
                "param_2[5]": {
                    "1": "other_value5"
                },
                "(param_1 + 0x18)": {
                    "1": "register_ptr_18"
                },
                "param_2[1]": {
                    "1": "new_value3"
                },
                "(param_1 + 0x34)": {
                    "1": "register_ptr_34"
                },
                "param_1 + 0x20": {
                    "1": "address1"
                },
                "param_1 + 4": {
                    "1": "address2"
                },
                "param_1 + 0x18": {
                    "1": "address3"
                },
                "param_1 + 0x34": {
                    "1": "address4"
                },
                "param_2[3] | uVar2 & 0xfffffff7) & 0xfffffffb": {
                    "1": "masked_value2"
                },
                "*(uint *)(param_1 + 0x4)": {
                    "1": "new_value1"
                },
                "*(uint *)(param_1 + 0x18) & 0xffffff8c": {
                    "1": "new_value2"
                }
            }
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_data_08003e38",
            "code": "\nvoid update_data_08003e38(int base_address,int *param_array)\n\n{\n  int temp_var1;\n  uint updated_value;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  local_value = *(uint *)(base_address + 4);\n  temp_var1 = *param_array;\n  updated_value = parameter3 << 4 | *(uint *)(base_address + 0x20) & 0xffffffdf;\n  if (base_address == 0x40012c00) {\n    updated_value = (parameter4 << 4 | updated_value & 0xffffff7f) & 0xffffffbf;\n    local_value = parameter5 << 2 | parameter6 << 2 | local_value & 0xfffff3ff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x18) = temp_var1 << 8 | *(uint *)(base_address + 0x18) & 0xffff8cff;\n  *(int *)(base_address + 0x38) = parameter2;\n  *(uint *)(base_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "base_address",
                "param_2": "param_array",
                "iVar1": "temp_var1",
                "uVar2": "updated_value",
                "local_10": "local_value",
                "param_2[2]": "parameter3",
                "param_2[1]": "parameter2",
                "param_2[3]": "parameter4",
                "param_2[6]": "parameter5",
                "param_2[5]": "parameter6"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003e38": {
                    "1": "update_flags_and_values",
                    "4": "update_parameters",
                    "5": "update_configuration",
                    "2": "update_parameter",
                    "9": "update_data"
                },
                "param_1": {
                    "2": "address",
                    "6": "config_address",
                    "1": "param_addr",
                    "4": "data_ptr",
                    "7": "base_address",
                    "5": "data_address"
                },
                "param_2": {
                    "2": "params_array",
                    "1": "input_data",
                    "5": "param_array",
                    "4": "config_data"
                },
                "iVar1": {
                    "1": "first_param",
                    "2": "index",
                    "4": "value1",
                    "3": "data_value",
                    "5": "temp_var1"
                },
                "uVar2": {
                    "1": "updated_config",
                    "3": "value2",
                    "11": "updated_value",
                    "4": "modified_value",
                    "2": "var2"
                },
                "local_10": {
                    "2": "local_var1",
                    "1": "original_config",
                    "3": "temp_value",
                    "6": "local_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "value_3"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "value2"
                },
                "param_1 == 0x40012c00": {
                    "1": "is_special_config"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "config_value"
                },
                "*(int *)(param_1 + 0x38)": {
                    "1": "second_value"
                },
                "param_1 + 0x20": {
                    "1": "flag_address"
                },
                "param_1 + 4": {
                    "1": "value_address"
                },
                "param_1 + 0x18": {
                    "1": "flag2_address"
                },
                "param_1 + 0x38": {
                    "1": "param1_address"
                },
                "0x20": {
                    "1": "mask_one"
                },
                "0xffffffef": {
                    "1": "mask_one_complement"
                },
                "0x4": {
                    "1": "offset"
                },
                "0x40012c00": {
                    "1": "special_address"
                },
                "0xffffffdf": {
                    "1": "mask_two"
                },
                "0x7f": {
                    "1": "mask_two_complement"
                },
                "0xffffff7f": {
                    "1": "mask_three_complement"
                },
                "0xbf": {
                    "1": "mask_three"
                },
                "0xfffff3ff": {
                    "1": "mask_four_complement"
                },
                "0x18": {
                    "1": "offset_two"
                },
                "0xffff8cff": {
                    "1": "mask_four"
                },
                "0x38": {
                    "1": "offset_three"
                },
                "1": {
                    "1": "array_element1"
                },
                "2": {
                    "1": "array_element2"
                },
                "3": {
                    "1": "array_element3"
                },
                "5": {
                    "1": "array_element5"
                },
                "6": {
                    "1": "array_element6"
                },
                "*(uint *)(address + 0x20)": {
                    "1": "value_1"
                },
                "*(uint *)(address + 4)": {
                    "1": "value_2"
                },
                "param_2[2]": {
                    "1": "parameter3"
                },
                "param_2[1]": {
                    "1": "parameter2"
                },
                "param_2[3]": {
                    "1": "parameter4"
                },
                "param_2[6]": {
                    "1": "parameter5"
                },
                "param_2[5]": {
                    "1": "parameter6"
                }
            }
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_data_08003f18",
            "code": "\nvoid update_data_08003f18(int base_address,uint *data_array)\n\n{\n  uint new_value1;\n  uint new_value2;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(base_address + 4);\n  new_value1 = *data_array;\n  new_value2 = param2_value_at_index2 << 8 | *(uint *)(base_address + 0x20) & 0xfffffdff;\n  if (base_address == 0x40012c00) {\n    new_value2 = (param2_value_at_index3 << 8 | new_value2 & 0xfffff7ff) & 0xfffffbff;\n    local_value = param2_value_at_index6 << 4 | param2_value_at_index5 << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x1c) = new_value1 | *(uint *)(base_address + 0x1c) & 0xffffff8c;\n  *(uint *)(base_address + 0x3c) = new_value2;\n  *(uint *)(base_address + 0x20) = new_value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "base_address",
                "param_2": "data_array",
                "uVar1": "new_value1",
                "uVar2": "new_value2",
                "local_10": "local_value",
                "param_2[2]": "param2_value_at_index2",
                "param_2[3]": "param2_value_at_index3",
                "param_2[6]": "param2_value_at_index6",
                "param_2[5]": "param2_value_at_index5",
                "param_2[1]": "new_value2"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f18": {
                    "2": "update_flags_and_values",
                    "1": "update_memory_and_flags",
                    "3": "update_parameters",
                    "6": "update_data"
                },
                "param_1": {
                    "6": "data_address",
                    "5": "config_address",
                    "1": "param_addr",
                    "9": "base_address",
                    "2": "memory_address"
                },
                "param_2": {
                    "6": "data_array",
                    "4": "input_data",
                    "2": "param_array",
                    "1": "input_settings",
                    "5": "config_data"
                },
                "uVar1": {
                    "1": "first_param_value",
                    "7": "new_value1",
                    "6": "value1",
                    "2": "first_input_value"
                },
                "uVar2": {
                    "1": "second_data",
                    "7": "new_value2",
                    "3": "updated_value",
                    "4": "modified_value",
                    "6": "value2"
                },
                "local_10": {
                    "1": "previous_value",
                    "9": "local_value",
                    "8": "temp_value",
                    "2": "current_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "current_config_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "param1_value_at_offset4"
                },
                "*param_2": {
                    "1": "config_data_value"
                },
                "param_2[2]": {
                    "1": "input_data2"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "param1_value_at_offset1c"
                },
                "param_2[3]": {
                    "1": "input_data3"
                },
                "param_2[6]": {
                    "1": "config_data_value4"
                },
                "param_2[5]": {
                    "1": "config_value4"
                },
                "*(uint *)(param_1 + 0x3c)": {
                    "1": "result_value"
                },
                "0x20": {
                    "1": "offset1"
                },
                "0x1c": {
                    "1": "offset_2"
                },
                "0x3c": {
                    "1": "offset4"
                },
                "0xfffffeff": {
                    "1": "clear_bit8"
                },
                "0x40012c00": {
                    "1": "specific_address"
                },
                "0xfffffdff": {
                    "1": "clear_bit9"
                },
                "0xfffff7ff": {
                    "1": "clear_bit11"
                },
                "0xfffffbff": {
                    "1": "mask5"
                },
                "0xffffcfff": {
                    "1": "mask6"
                },
                "0x4": {
                    "1": "offset2"
                },
                "0xffffff8c": {
                    "1": "mask2"
                },
                "0x40012c00 + 0x20": {
                    "1": "special_offset"
                },
                "4": {
                    "1": "offset_3"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffeff": {
                    "1": "config_mask1"
                },
                "param_2[2] << 8 | *(uint *)(param_1 + 0x20) & 0xfffffdff": {
                    "1": "config_mask2"
                },
                "param_2[3] << 8 | uVar2 & 0xfffff7ff": {
                    "1": "config_mask3"
                },
                "param_2[6] << 4 | param_2[5] << 4 | local_10 & 0xffffcfff": {
                    "1": "modified_local_value"
                },
                "uVar1 | *(uint *)(param_1 + 0x1c) & 0xffffff8c": {
                    "1": "updated_value1"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffdff": {
                    "1": "updated_config_value1"
                },
                "uVar2 & 0xfffff7ff": {
                    "1": "updated_config_value2"
                },
                "local_10 & 0xffffcfff": {
                    "1": "updated_config_variable"
                },
                "param_2[1]": {
                    "1": "new_value2"
                },
                "param_2[3] << 8 | uVar2 & 0xfffff7ff)": {
                    "1": "modified_register2"
                }
            }
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_data_08003ff8",
            "code": "\nvoid update_data_08003ff8(int base_address,int *param_array)\n\n{\n  int value1;\n  int value2;\n  uint value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  value = *(uint *)(base_address + 4);\n  value1 = *param_array;\n  value2 = param_array[2];\n  if (base_address == 0x40012c00) {\n    value = param_array[5] << 6 | value & 0xffffbfff;\n  }\n  *(uint *)(base_address + 4) = value;\n  *(uint *)(base_address + 0x1c) = value1 << 8 | *(uint *)(base_address + 0x1c) & 0xffff8cff;\n  *(int *)(base_address + 0x40) = param_array[1];\n  *(uint *)(base_address + 0x20) = value2 << 0xc | *(uint *)(base_address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "base_address",
                "param_2": "param_array",
                "local_c": "value",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ff8": {
                    "1": "update_registers",
                    "2": "update_memory",
                    "3": "update_flags_and_values",
                    "11": "update_data"
                },
                "param_1": {
                    "1": "decoded_data",
                    "2": "data_pointer",
                    "12": "base_address",
                    "6": "data_address"
                },
                "param_2": {
                    "3": "input_params",
                    "1": "input_data",
                    "2": "values",
                    "8": "param_array",
                    "4": "parameters"
                },
                "local_c": {
                    "3": "flag",
                    "1": "original_value",
                    "5": "local_value",
                    "4": "temp_value",
                    "6": "value"
                },
                "iVar1": {
                    "1": "param1_var",
                    "2": "variable1",
                    "5": "var1",
                    "11": "value1",
                    "3": "param_value1"
                },
                "iVar2": {
                    "1": "value_2",
                    "11": "value2",
                    "3": "param_value2",
                    "2": "param2_value",
                    "5": "var2"
                }
            }
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_flags_and_values_080040a0",
            "code": "\nvoid update_flags_and_values_080040a0(int base_address,uint new_value,int shift_amount)\n\n{\n  uint temp_value;\n  \n  temp_value = *(uint *)(base_address + 0x20);\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  *(uint *)(base_address + 0x18) = shift_amount << 4 | *(uint *)(base_address + 0x18) & 0xffffff0f;\n  *(uint *)(base_address + 0x20) = new_value | temp_value & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_flags_and_values_080040a0",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "shift_amount",
                "uVar1": "temp_value"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040a0": {
                    "1": "set_flags_and_values",
                    "4": "update_values",
                    "2": "update_param",
                    "5": "update_param_values",
                    "3": "update_parameters",
                    "6": "update_flags_and_values"
                },
                "param_1": {
                    "5": "address",
                    "1": "param",
                    "7": "base_address",
                    "4": "data_pointer",
                    "2": "input_param",
                    "3": "memory_address"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "param_value",
                    "4": "mask",
                    "8": "new_value",
                    "3": "value"
                },
                "param_3": {
                    "1": "value_to_be_shifted",
                    "2": "shift_value",
                    "8": "value",
                    "9": "shift_amount"
                },
                "uVar1": {
                    "1": "current_value",
                    "3": "previous_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "address_value"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "parameter_value"
                },
                "param_1 + 0x20": {
                    "1": "data_pointer"
                },
                "param_1 + 0x18": {
                    "1": "another_data_pointer"
                }
            }
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_flags_and_values_08004104",
            "code": "\nvoid update_flags_and_values_08004104(int base_address,int value1,int value2)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  *(uint *)(base_address + 0x18) = value2 << 0xc | *(uint *)(base_address + 0x18) & 0xffff0fff;\n  *(uint *)(base_address + 0x20) = value1 << 4 | *(uint *)(base_address + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004104": {
                    "1": "update_flag_and_values",
                    "2": "update_memory_values",
                    "5": "update_flags",
                    "3": "update_parameters",
                    "9": "update_flags_and_values"
                },
                "param_1": {
                    "2": "object_address",
                    "1": "base_addr",
                    "7": "base_address",
                    "4": "memory_address",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "flag_value",
                    "7": "value",
                    "10": "value1",
                    "3": "value2"
                },
                "param_3": {
                    "1": "flag2",
                    "3": "value3",
                    "2": "shift",
                    "10": "value2"
                },
                "param_2 << 4": {
                    "1": "shifted_value"
                },
                "param_1 + 0x20": {
                    "1": "flags_ptr"
                },
                "param_1 + 0x18": {
                    "1": "values_ptr"
                },
                "valuesPtr & 0xffff0fff": {
                    "1": "updated_values"
                },
                "flagsPtr & 0xffffff5f": {
                    "1": "updated_flags"
                },
                "flagsPtr & 0xffffffef": {
                    "1": "updated_flags2"
                },
                "*(uint *)(flagsPtr + 0x20)": {
                    "1": "current_flags"
                },
                "*(uint *)(valuesPtr + 0x18)": {
                    "1": "current_values"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "2": "data",
                    "1": "bit_field1"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "2": "data",
                    "1": "bit_field2"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffffef": {
                    "1": "updated_a"
                },
                "*(uint *)(param_1 + 0x18) & 0xffff0fff": {
                    "1": "masked_bit_field2"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffff5f": {
                    "1": "updated_bit_field1"
                },
                "(param_1 + 0x20)": {
                    "1": "flag_register"
                },
                "(param_1 + 0x18)": {
                    "1": "data_register"
                },
                "param_3 << 0xc | *(uint *)(param_1 + 0x18) & 0xffff0fff": {
                    "1": "updated_b"
                },
                "param_2 << 4 | *(uint *)(param_1 + 0x20) & 0xffffff5f": {
                    "1": "updated_a"
                },
                "0x20": {
                    "1": "flags_ptr"
                },
                "0x18": {
                    "1": "value_ptr"
                },
                "param_4": {
                    "1": "num_bits_to_shift"
                },
                "param_5": {
                    "1": "bit_mask1"
                },
                "param_6": {
                    "1": "bit_mask2"
                }
            }
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_parameter_0800416a",
            "code": "\nvoid update_parameter_0800416a(int base_address,ushort new_value)\n\n{\n  *(unsigned_integer *)(base_address + 8) = *(unsigned_integer *)(base_address + 8) & 0xffffff8f | (unsigned_integer)(new_value | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_parameter_0800416a",
                "param_1": "base_address",
                "param_2": "new_value",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800416a": {
                    "1": "update_data_to_param",
                    "3": "update_parameter",
                    "2": "update_memory_value"
                },
                "param_1": {
                    "1": "data_offset",
                    "15": "base_address",
                    "4": "data_pointer",
                    "3": "data_address"
                },
                "param_2": {
                    "10": "new_value",
                    "1": "new_data",
                    "8": "value",
                    "2": "flag_value"
                },
                "uint": {
                    "1": "unsigned_int",
                    "2": "unsigned_integer"
                },
                "0xffffff8f": {
                    "4": "mask"
                },
                "7": {
                    "1": "bit_mask"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "param_5": {
                    "1": "param_5"
                },
                "param_1 + 8": {
                    "1": "value_address",
                    "2": "address_to_modify"
                },
                "*((uint *)(base_address + 8))": {
                    "1": "current_value"
                },
                "(current_value & 0xffffff8f) | (uint)(value | 7)": {
                    "1": "updated_value"
                },
                "FUN_080416a": {
                    "1": "update_flag"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "flag_value",
                    "2": "current_value"
                },
                "param_2 | 7": {
                    "1": "updated_bits"
                },
                "*(uint *)(param_1 + 8) & 0xffffff8f | (uint)(param_2 | 7)": {
                    "1": "updated_value"
                },
                "newValue | 7": {
                    "1": "combined_value"
                },
                "*(uint *)(param_1 + 8) & 0xffffff8f | (uint)(modifiedFlags)": {
                    "1": "updated_data"
                },
                "(uint)(param_2 | 7)": {
                    "1": "updated_value"
                },
                "| 7": {
                    "1": "bitwise_or"
                }
            }
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_param_080041a8",
            "code": "\nvoid update_param_080041a8(int base_address,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(base_address + 8) = value1 | value3 << 8 | value2 | *(uint *)(base_address + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_param_080041a8",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041a8": {
                    "1": "update_parameters",
                    "5": "update_param",
                    "3": "update_param_value"
                },
                "param_1": {
                    "5": "address",
                    "1": "param_addr",
                    "2": "data_address",
                    "9": "base_address"
                },
                "param_2": {
                    "2": "new_value1",
                    "1": "new_bitwise_value",
                    "23": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "new_value2",
                    "23": "value2"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "shift_value",
                    "21": "value3"
                },
                "param_2 | param_4 << 8 | param_3 | *(uint *)(param_1 + 8) & 0xffff00ff": {
                    "1": "updated_value"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "data_at_offset"
                }
            }
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bitwise_value_080041ea",
            "code": "\nvoid update_bitwise_value_080041ea(int base_address,uint bit_position,int bit_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | bit_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bitwise_value_080041ea",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "bit_value"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041ea": {
                    "1": "update_bitwise_flags",
                    "7": "update_bitwise_value",
                    "5": "update_bit_value",
                    "4": "update_bits"
                },
                "param_1": {
                    "4": "data",
                    "1": "base_pointer",
                    "20": "base_address"
                },
                "param_2": {
                    "24": "bit_position",
                    "5": "bit_index",
                    "1": "position"
                },
                "param_3": {
                    "9": "new_value",
                    "2": "value",
                    "16": "bit_value",
                    "1": "value_to_set",
                    "3": "new_bit_value"
                },
                "param_2 & 0xff": {
                    "2": "bit_mask"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "data_value"
                },
                "* (uint *)(baseAddress + 0x20)": {
                    "1": "bitwise_value"
                },
                "* (uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff))": {
                    "1": "cleared_bitwise_value"
                },
                "param_3 << (bitPosition & 0xff)": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "set_flag_and_assign_value_0800422e",
            "code": "\nundefined4 set_flag_and_assign_value_0800422e(int *param_array,uint *data_array)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(param_array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(param_array + 0xf) = 1;\n    *(uint *)(*param_array + 0x44) =\n         data6 |\n         (data6 |\n         (data5 |\n         (data4 |\n         (*data_array | (data1 | (data2 | data_array[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(param_array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "set_flag_and_assign_value_0800422e",
                "param_1": "param_array",
                "param_2": "data_array",
                "uVar1": "return_value",
                "param_2[6]": "data6",
                "param_2[5]": "data5",
                "param_2[4]": "data4",
                "param_2[1]": "data1",
                "param_2[2]": "data2"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800422e": {
                    "1": "update_values",
                    "2": "update_status"
                },
                "param_1": {
                    "3": "array",
                    "2": "flag_array",
                    "1": "flags_array",
                    "6": "param_array",
                    "5": "input_array"
                },
                "param_2": {
                    "10": "data_array",
                    "8": "data",
                    "1": "uint_array",
                    "4": "values"
                },
                "uVar1": {
                    "1": "return_code",
                    "12": "result",
                    "14": "return_value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "config_flag",
                    "2": "flag_value"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_updated"
                },
                "*(uint *)(*param_1 + 0x44)": {
                    "1": "config_value"
                },
                "param_2[6]": {
                    "1": "data6"
                },
                "param_2[5]": {
                    "1": "data5"
                },
                "param_2[4]": {
                    "1": "data4"
                },
                "*param_2": {
                    "1": "value_at_data_ptr"
                },
                "param_2[1]": {
                    "1": "data1"
                },
                "param_2[2]": {
                    "1": "data2"
                },
                "param_2[3] & 0xfffffcff": {
                    "1": "masked_data3"
                },
                "0xfffffbff": {
                    "1": "data3_mask"
                },
                "0xfffff7ff": {
                    "1": "data2_mask"
                },
                "0xffffefff": {
                    "1": "data1_mask"
                },
                "0xffffdfff": {
                    "1": "data0_mask"
                },
                "0xffffbfff": {
                    "1": "data4_mask"
                },
                "0xffff7fff": {
                    "1": "data5_mask"
                },
                "(param_1 + 0xf)[0]": {
                    "1": "is_flag_set"
                },
                "(paramArray + 0xf)": {
                    "1": "is_flag_set"
                },
                "<original_function_name>": {
                    "1": "decode_and_set_value"
                },
                "<param_1>": {
                    "1": "value_ptr"
                },
                "<param_2>": {
                    "1": "data_ptr"
                },
                "*param_1": {
                    "1": "address_of_value_ptr"
                },
                "value_ptr[15]": {
                    "1": "flag"
                },
                "*(uint *)(address_of_value_ptr + 0x44)": {
                    "1": "result"
                },
                "data_ptr[6]": {
                    "1": "bit_6"
                },
                "data_ptr[5]": {
                    "1": "bit_5"
                },
                "data_ptr[4]": {
                    "1": "bit_4"
                },
                "data_ptr[1]": {
                    "1": "bit_1"
                },
                "data_ptr[2]": {
                    "1": "bit_2"
                },
                "data_ptr[3]": {
                    "1": "bit_3"
                }
            }
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_and_values_080042de",
            "code": "\nundefined4 update_flags_and_values_080042de(int *array,uint *values)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)(info_array_address + 0x3d) = 2;\n    *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xffffff8f;\n    *(uint *)(*array + 4) = *values | *(uint *)(*array + 4);\n    *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xffffff7f;\n    *(uint *)(*array + 8) = values[1] | *(uint *)(*array + 8);\n    *(undefined *)(info_array_address + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_and_values_080042de",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "result",
                "param_2[1]": "values[1]",
                "(int)param_1": "info_array_address"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042de": {
                    "1": "update_parameters",
                    "2": "update_configuration",
                    "6": "update_flags_and_values"
                },
                "param_1": {
                    "2": "flag_array",
                    "3": "array",
                    "1": "config_params"
                },
                "param_2": {
                    "2": "mask",
                    "5": "values",
                    "1": "new_permissions",
                    "4": "flags",
                    "3": "update_values"
                },
                "uVar1": {
                    "2": "status",
                    "18": "result",
                    "10": "return_value",
                    "1": "error_code"
                },
                "param_1 + 0xf": {
                    "1": "flags[15]"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flags[0x3d]"
                },
                "*param_1": {
                    "1": "flags[0]"
                },
                "*param_2": {
                    "1": "mask_array"
                },
                "param_2[1]": {
                    "1": "values[1]"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "(int)param_1": {
                    "1": "info_array_address"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_pointer"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "first_value"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "second_value"
                },
                "*(uint *)(*param_1 + 4) & 0xffffff8f": {
                    "1": "masked_first_value"
                },
                "*param_2 | *(uint *)(*param_1 + 4)": {
                    "1": "updated_first_value"
                },
                "param_2[1] | *(uint *)(*param_1 + 8)": {
                    "1": "updated_second_value"
                },
                "0xf": {
                    "1": "flag"
                },
                "0x3d": {
                    "1": "byte_value"
                },
                "4": {
                    "1": "mask1"
                },
                "8": {
                    "1": "mask2"
                }
            }
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_0800438a",
            "code": "\nundefined4 initialize_data_0800438a(int *data)\n\n{\n  undefined4 result;\n  \n  if (data == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08004424(data);\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    FUN_080046ec(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    subsystem_index = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_0800438a",
                "param_1": "data",
                "uVar1": "result",
                "param_1[0xf]": "subsystem_index"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800438a": {
                    "1": "initialize_control_structure",
                    "3": "initialize_data_structure",
                    "2": "initialize_flags",
                    "6": "initialize_data"
                },
                "param_1": {
                    "2": "param",
                    "5": "data_ptr",
                    "1": "data_struct_ptr",
                    "3": "data_structure"
                },
                "uVar1": {
                    "12": "result",
                    "1": "return_val",
                    "2": "return_code"
                },
                "FUNC_08004424": {
                    "1": "perform_initialization",
                    "2": "initialize_function"
                },
                "FUN_080046ec": {
                    "4": "process_data",
                    "2": "reverse_data",
                    "1": "process_flags"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "flag_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "temp_var"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "control_flag"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "control_register1"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "control_register2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "control_register3"
                },
                "param_1[0xf]": {
                    "1": "subsystem_index"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "temp_var1"
                }
            }
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 process_data_08004436(uint **data,ushort *input_array,short input_length,uint timeout)\n\n{\n  int result;\n  int temp_var2;\n  undefined4 result;\n  ushort *current_input;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input_array == (ushort *)0x0) || (input_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      result = FUN_080015a0();\n      *(short *)(data + 9) = input_length;\n      *(short *)((int)data + 0x26) = input_length;\n      current_input = input_array;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              temp_var2 = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp_var2 = FUN_080015a0(), (uint)(temp_var2 - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          temp_var2 = 3;\nLAB_0800454c:\n          if (temp_var2 != 0) {\n            return 3;\n          }\n          (*data)[1] = *current_input & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            current_input = current_input + 1;\n          }\n          else {\n            current_input = (ushort *)((int)current_input + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              temp_var2 = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp_var2 = FUN_080015a0(), (uint)(temp_var2 - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          temp_var2 = 3;\nLAB_08004614:\n          if (temp_var2 != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)current_input;\n          current_input = (ushort *)((int)current_input + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (temp_var2 = FUN_080015a0(), (uint)(temp_var2 - result) <= timeout))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "data",
                "param_2": "input_array",
                "param_3": "input_length",
                "param_4": "timeout",
                "iVar1": "result",
                "iVar2": "temp_var2",
                "uVar3": "result",
                "local_58": "current_input"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004436": {
                    "2": "process_input",
                    "1": "decode_and_process_data",
                    "15": "process_data"
                },
                "param_1": {
                    "11": "data",
                    "1": "ptr_array",
                    "2": "param_pointer",
                    "4": "data_ptr",
                    "5": "input_data"
                },
                "param_2": {
                    "5": "input",
                    "3": "input_data",
                    "2": "data",
                    "1": "p_buffer",
                    "7": "input_array"
                },
                "param_3": {
                    "4": "buffer_size",
                    "3": "array_size",
                    "9": "input_length",
                    "1": "input_count",
                    "2": "buffer_length"
                },
                "param_4": {
                    "1": "max_duration",
                    "15": "timeout",
                    "4": "time_limit",
                    "6": "max_iterations",
                    "2": "max_time"
                },
                "iVar1": {
                    "1": "temp_count",
                    "4": "result1",
                    "8": "result",
                    "7": "temp_var1"
                },
                "iVar2": {
                    "3": "temp_result",
                    "1": "inner_result2",
                    "7": "temp_var2",
                    "4": "result2",
                    "2": "compare_result"
                },
                "uVar3": {
                    "8": "return_value",
                    "1": "result_code",
                    "2": "status",
                    "15": "result"
                },
                "local_58": {
                    "6": "current_char",
                    "9": "current_input",
                    "1": "current_ushort",
                    "3": "current_data"
                },
                "FUN_080015a0": {
                    "1": "calculate_elapsed_time"
                }
            }
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "update_configuration_080046ec",
            "code": "\nvoid update_configuration_080046ec(int *parameters)\n\n{\n  ulonglong quotient;\n  int result1;\n  int temp_var2;\n  uint result2;\n  int temp5;\n  undefined8 return_value;\n  \n  *(uint *)(*parameters + 0x10) = parameters[3] | *(uint *)(*parameters + 0x10) & 0xffffcfff;\n  *(uint *)(*parameters + 0xc) =\n       *(uint *)(*parameters + 0xc) & 0xffffe9f3 | parameters[5] | parameters[2] | parameters[4];\n  *(uint *)(*parameters + 0x14) = parameters[6] | *(uint *)(*parameters + 0x14) & 0xfffffcff;\n  if (*parameters == 0x40013800) {\n    return_value = FUN_08003540();\n    quotient = (ulonglong)(uint)((int)return_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    result1 = FUN_08003540((int)return_value,(int)((ulonglong)return_value >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = parameters[1];\n    return_value = FUN_08003540();\n    result2 = ((uint)(result1 * 0x19) / (uint)(temp_var2 << 2) +\n            (int)(((ulonglong)(uint)((int)return_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003540((int)return_value,(int)((ulonglong)return_value >> 0x20),result2 * 0x51eb851f);\n    temp5 = parameters[1];\n    temp_var2 = FUN_08003540();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(temp5 << 2) +\n           (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (result2 / 100 & 0xf0);\n  }\n  else {\n    return_value = FUN_08003518();\n    quotient = (ulonglong)(uint)((int)return_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    result1 = FUN_08003518((int)return_value,(int)((ulonglong)return_value >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = parameters[1];\n    return_value = FUN_08003518();\n    result2 = ((uint)(result1 * 0x19) / (uint)(temp_var2 << 2) +\n            (int)(((ulonglong)(uint)((int)return_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003518((int)return_value,(int)((ulonglong)return_value >> 0x20),result2 * 0x51eb851f);\n    temp5 = parameters[1];\n    temp_var2 = FUN_08003518();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(temp5 << 2) +\n           (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (result2 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "update_configuration_080046ec",
                "param_1": "parameters",
                "uVar1": "quotient",
                "iVar2": "result1",
                "iVar3": "temp_var2",
                "uVar4": "result2",
                "iVar5": "temp5",
                "uVar6": "return_value"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080046ec": {
                    "1": "update_config_values",
                    "2": "update_settings",
                    "6": "update_values",
                    "5": "update_parameters"
                },
                "param_1": {
                    "1": "param",
                    "6": "config",
                    "2": "config_data",
                    "3": "input_array",
                    "8": "parameters"
                },
                "uVar1": {
                    "1": "multiplier",
                    "2": "ratio",
                    "4": "result1",
                    "3": "calculation1",
                    "8": "quotient"
                },
                "iVar2": {
                    "2": "result2",
                    "1": "calculation1",
                    "11": "result1",
                    "4": "temp2",
                    "5": "temp_var1"
                },
                "iVar3": {
                    "1": "temp_value3",
                    "2": "var1",
                    "5": "temp_var2",
                    "4": "temp3"
                },
                "uVar4": {
                    "1": "result",
                    "2": "result4",
                    "6": "result2",
                    "4": "temp4"
                },
                "iVar5": {
                    "2": "i_var5",
                    "3": "temp_var3",
                    "1": "temp3",
                    "4": "temp5"
                },
                "uVar6": {
                    "4": "random_value",
                    "1": "value1",
                    "8": "return_value",
                    "6": "function_result",
                    "2": "result"
                },
                "FUN_08003540": {
                    "2": "calculate_value1",
                    "4": "get_first_value",
                    "1": "get_function_result1",
                    "3": "get_value1"
                },
                "FUN_08003518": {
                    "1": "get_function_result2",
                    "2": "get_another_random_value",
                    "3": "get_value2",
                    "4": "get_second_value"
                },
                "0x10": {
                    "1": "offset_a"
                },
                "0xc": {
                    "1": "offset_b"
                },
                "0x14": {
                    "1": "offset_c"
                },
                "0x40013800": {
                    "1": "constant_x"
                },
                "0x19": {
                    "1": "multiplier_a"
                },
                "0x51eb851f": {
                    "1": "multiplier_b"
                },
                "8": {
                    "1": "offset_d"
                },
                "0xffffcfff": {
                    "1": "mask_a"
                },
                "0xffffe9f3": {
                    "1": "mask_b"
                },
                "0xfffffcff": {
                    "1": "mask_c"
                },
                "0xf": {
                    "1": "mask_d"
                },
                "0x32": {
                    "1": "value_a"
                },
                "100": {
                    "1": "divisor"
                },
                "*param_1": {
                    "2": "parameters"
                },
                "iVar2_1": {
                    "1": "result2"
                },
                "iVar3_1": {
                    "1": "var1_1"
                },
                "iVar5_1": {
                    "1": "var3_1"
                },
                "iVar2_2": {
                    "1": "result2_1"
                },
                "iVar3_2": {
                    "1": "var1_2"
                },
                "iVar5_2": {
                    "1": "var3_2"
                }
            }
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_parameters_0800491c",
            "code": "\nvoid initialize_parameters_0800491c(undefined4 *output_array)\n\n{\n  undefined flag1;\n  undefined flag2;\n  undefined byte_array [5];\n  \n  flag1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&flag1,1);\n  flag2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&flag2,1);\n  byte_array[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,byte_array,1);\n  *output_array = 0;\n  output_array[1] = 0;\n  output_array[2] = 0;\n  output_array[3] = 0;\n  output_array[4] = 0;\n  output_array[5] = 0;\n  output_array[6] = 0;\n  output_array[7] = 0;\n  output_array[8] = 0;\n  output_array[9] = 0;\n  output_array[10] = 0;\n  FUN_080049cc(output_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_parameters_0800491c",
                "param_1": "output_array",
                "local_13": "flag1",
                "local_12": "flag2",
                "local_11": "byte_array"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800491c": {
                    "3": "initialize_params",
                    "10": "initialize_parameters",
                    "4": "initialize_param",
                    "1": "initialize_function",
                    "2": "initialize_memory",
                    "9": "initialize_data"
                },
                "param_1": {
                    "5": "parameters",
                    "2": "data_pointer",
                    "1": "memory_array",
                    "3": "data_buffer",
                    "4": "param"
                },
                "local_13": {
                    "2": "value1",
                    "4": "zero_value",
                    "1": "variable1"
                },
                "local_12": {
                    "1": "variable2",
                    "2": "value2",
                    "4": "flag2",
                    "3": "value"
                },
                "local_11": {
                    "2": "temp_array",
                    "1": "array1",
                    "3": "flag_array",
                    "5": "byte_array",
                    "4": "buffer"
                },
                "FUN_080049cc": {
                    "1": "calculate_checksum",
                    "3": "process_data",
                    "4": "process_parameters"
                }
            }
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_averages_080049cc",
            "code": "\nvoid calculate_averages_080049cc(int data)\n\n{\n  undefined4 result;\n  undefined4 temp2;\n  undefined4 temp1;\n  undefined4 current_time;\n  int num_iterations;\n  int i;\n  undefined4 max2;\n  undefined4 max1;\n  undefined4 sum2;\n  undefined4 sum1;\n  \n  num_iterations = 1;\n  sum1 = 0;\n  sum2 = 0;\n  max1 = 0;\n  max2 = 0;\n  current_time = (*DAT_20000a50)();\n  i = 0;\n  while( true ) {\n    if (num_iterations <= i) break;\n    temp1 = 0;\n    temp2 = 0;\n    FUN_08004ae0(data);\n    FUN_08004d78(data,&temp1,&temp2);\n    max1 = FUN_08000aa8(max1,temp1);\n    max2 = FUN_08000aa8(max2,temp2);\n    sum1 = FUN_08000aa8(sum1,*(undefined4 *)(data + 0x10));\n    sum2 = FUN_08000aa8(sum2,*(undefined4 *)(data + 0x14));\n    current_time = (*DAT_20000a50)();\n    i = i + 1;\n  }\n  result = FUN_08000c10(num_iterations);\n  result = FUN_08000e20(sum1,result);\n  *(undefined4 *)(data + 0x1c) = result;\n  result = FUN_08000c10(num_iterations);\n  result = FUN_08000e20(sum2,result);\n  *(undefined4 *)(data + 0x20) = result;\n  result = FUN_08000c10(num_iterations);\n  result = FUN_08000e20(max1,result);\n  *(undefined4 *)(data + 0x24) = result;\n  result = FUN_08000c10(num_iterations);\n  result = FUN_08000e20(max2,result);\n  *(undefined4 *)(data + 0x28) = result;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_averages_080049cc",
                "param_1": "data",
                "local_20": "num_iterations",
                "local_1c": "i",
                "local_28": "temp1",
                "local_2c": "temp2",
                "local_24": "current_time",
                "local_c": "sum1",
                "local_10": "sum2",
                "local_14": "max1",
                "local_18": "max2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080049cc": {
                    "1": "calculate_and_set_values",
                    "13": "calculate_averages",
                    "8": "calculate_statistics",
                    "2": "calculate_stats",
                    "3": "calculate_checksum"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "data",
                    "2": "data_array",
                    "4": "input_array",
                    "6": "input_data"
                },
                "local_20": {
                    "1": "value2",
                    "4": "iteration_count",
                    "8": "num_iterations",
                    "7": "count",
                    "3": "num_elements"
                },
                "local_1c": {
                    "1": "current_index",
                    "9": "i",
                    "3": "count",
                    "6": "counter",
                    "7": "iteration_count",
                    "2": "index"
                },
                "local_28": {
                    "1": "sum_b",
                    "2": "max_value",
                    "5": "temp1",
                    "4": "sum1",
                    "3": "temp_var1"
                },
                "local_2c": {
                    "1": "sum_b",
                    "3": "temp_var2",
                    "4": "sum2",
                    "5": "temp2",
                    "2": "total_sum"
                },
                "local_24": {
                    "1": "current_value",
                    "8": "get_time",
                    "9": "current_time",
                    "3": "get_timestamp"
                },
                "local_c": {
                    "1": "total_param_1",
                    "7": "sum1",
                    "3": "value1"
                },
                "local_10": {
                    "2": "value2",
                    "1": "sum_param2",
                    "7": "sum2"
                },
                "local_14": {
                    "1": "sum_of_min_values",
                    "2": "average_a",
                    "3": "max1"
                },
                "local_18": {
                    "3": "max2",
                    "1": "total_metric_2",
                    "2": "average1"
                },
                "FUN_08004d78": {
                    "1": "calculate_sub_metrics",
                    "2": "get_values",
                    "4": "calculate_sums"
                },
                "FUN_08000e20": {
                    "1": "calculate_final_average",
                    "2": "combine_metrics",
                    "3": "calculate_average"
                },
                "FUN_08004ae0": {
                    "2": "initialize_data",
                    "1": "calculate_statistics_helper"
                },
                "FUN_08000aa8": {
                    "3": "calculate_sum",
                    "1": "calculate_average_ab",
                    "2": "calculate_max"
                },
                "FUN_08000c10": {
                    "1": "create_checksum",
                    "3": "calculate_average"
                },
                "uVar1": {
                    "1": "result1",
                    "2": "average",
                    "9": "result"
                },
                "DAT_20000a50": {
                    "1": "get_random_value"
                },
                "param_2": {
                    "1": "current_value"
                },
                "param_3": {
                    "1": "current_count"
                },
                "param_4": {
                    "1": "checksum"
                },
                "param_1 + 0x1c": {
                    "1": "output_data1"
                },
                "param_1 + 0x20": {
                    "1": "output_data2"
                },
                "param_1 + 0x24": {
                    "1": "output_data3"
                },
                "param_1 + 0x28": {
                    "1": "output_data4"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "output1"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "output2"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "output3"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "output4"
                }
            }
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_data_08004ae0",
            "code": "\nvoid extract_data_08004ae0(undefined4 *output_array)\n\n{\n  undefined4 result;\n  undefined temp1;\n  undefined temp2;\n  undefined temp3;\n  undefined temp4;\n  undefined temp5;\n  undefined temp6;\n  undefined temp7;\n  undefined temp8;\n  undefined temp9;\n  undefined temp10;\n  undefined temp11;\n  undefined temp12;\n  undefined temp13;\n  undefined temp14;\n  short short1;\n  short short2;\n  short short3;\n  short short4;\n  short short5;\n  short short6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&temp1,0xe);\n  short6 = CONCAT11(temp3,temp4);\n  short5 = CONCAT11(temp5,temp6);\n  short4 = CONCAT11(temp7,temp8);\n  short3 = CONCAT11(temp9,temp10);\n  short2 = CONCAT11(temp11,temp12);\n  short1 = CONCAT11(temp13,temp14);\n  result = FUN_08000c10((int)CONCAT11(temp1,temp2));\n  *output_array = result;\n  result = FUN_08000c10((int)short6);\n  output_array[1] = result;\n  result = FUN_08000c10((int)short5);\n  output_array[2] = result;\n  result = FUN_08000c10((int)short4);\n  output_array[3] = result;\n  result = FUN_08000c10((int)short3);\n  output_array[4] = result;\n  result = FUN_08000c10((int)short2);\n  output_array[5] = result;\n  result = FUN_08000c10((int)short1);\n  output_array[6] = result;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_data_08004ae0",
                "param_1": "output_array",
                "local_2c": "temp1",
                "local_2b": "temp2",
                "local_2a": "temp3",
                "local_29": "temp4",
                "local_28": "temp5",
                "local_27": "temp6",
                "local_26": "temp7",
                "local_25": "temp8",
                "local_24": "temp9",
                "local_23": "temp10",
                "local_22": "temp11",
                "local_21": "temp12",
                "local_20": "temp13",
                "local_1f": "temp14",
                "local_1e": "short1",
                "local_1c": "short2",
                "local_1a": "short3",
                "local_18": "short4",
                "local_16": "short5",
                "local_14": "short6",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ae0": {
                    "1": "reverse_and_copy_data",
                    "7": "extract_data",
                    "3": "initialize_param_values",
                    "2": "initialize_parameters"
                },
                "param_1": {
                    "13": "output_array",
                    "2": "output",
                    "1": "output_buffer",
                    "3": "param_array",
                    "5": "result_array"
                },
                "local_2c": {
                    "1": "var_1",
                    "3": "first_byte",
                    "5": "temp1",
                    "2": "var1"
                },
                "local_2b": {
                    "1": "value_2",
                    "5": "temp2",
                    "2": "var2",
                    "3": "second_byte"
                },
                "local_2a": {
                    "2": "var3",
                    "1": "var_3",
                    "3": "third_byte",
                    "5": "byte3"
                },
                "local_29": {
                    "1": "byte_var4",
                    "2": "var4",
                    "3": "fourth_byte",
                    "5": "byte4"
                },
                "local_28": {
                    "1": "var_5",
                    "5": "byte5",
                    "2": "var5",
                    "3": "fifth_byte"
                },
                "local_27": {
                    "2": "var6",
                    "1": "var_6",
                    "5": "temp6",
                    "3": "sixth_byte"
                },
                "local_26": {
                    "5": "temp7",
                    "1": "seventh_value",
                    "3": "seventh_byte",
                    "2": "var7"
                },
                "local_25": {
                    "1": "eighth_value",
                    "5": "byte8",
                    "2": "var8",
                    "3": "eighth_byte"
                },
                "local_24": {
                    "1": "val_9",
                    "2": "var9",
                    "5": "temp9",
                    "3": "ninth_byte"
                },
                "local_23": {
                    "1": "byte_var10",
                    "5": "temp10",
                    "2": "var10",
                    "3": "tenth_byte"
                },
                "local_22": {
                    "3": "eleventh_byte",
                    "1": "initialize_param_11",
                    "5": "byte11",
                    "2": "var11"
                },
                "local_21": {
                    "1": "char_12",
                    "3": "twelfth_byte",
                    "5": "byte12",
                    "2": "var12"
                },
                "local_20": {
                    "1": "tmp_20",
                    "3": "thirteenth_byte",
                    "5": "byte13",
                    "2": "var13"
                },
                "local_1f": {
                    "1": "tmp_1f",
                    "3": "fourteenth_byte",
                    "2": "var14",
                    "5": "byte14"
                },
                "local_1e": {
                    "2": "short_var1",
                    "1": "data_1",
                    "6": "short1",
                    "5": "first_short"
                },
                "local_1c": {
                    "6": "short2",
                    "2": "var16",
                    "1": "variable2",
                    "5": "second_short"
                },
                "local_1a": {
                    "6": "short3",
                    "1": "var17",
                    "2": "short_3",
                    "4": "third_short"
                },
                "local_18": {
                    "1": "var17",
                    "2": "short_var4",
                    "6": "short4",
                    "4": "fourth_short"
                },
                "local_16": {
                    "1": "var19",
                    "4": "fifth_short",
                    "2": "short_var5",
                    "6": "short5"
                },
                "local_14": {
                    "1": "var19",
                    "2": "data5",
                    "4": "sixth_short",
                    "6": "short6"
                },
                "FUN_08000c10": {
                    "1": "transform_data",
                    "2": "get_reversed_value"
                },
                "uVar1": {
                    "3": "result",
                    "1": "decrypted_value"
                },
                "local_19": {
                    "1": "data3"
                }
            }
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "update_data_08004bd8",
            "code": "\nvoid update_data_08004bd8(int input,undefined4 *output)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(input + 0x10),*(undefined4 *)(input + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(input + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(input + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(input + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "update_data_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004bd8": {
                    "1": "convert_and_assign",
                    "4": "update_data",
                    "3": "process_data",
                    "2": "calculate_result"
                },
                "param_1": {
                    "10": "input_param",
                    "1": "input1",
                    "2": "data_offset"
                },
                "param_2": {
                    "1": "output_1",
                    "10": "output_param",
                    "11": "output",
                    "2": "result"
                },
                "uVar1": {
                    "1": "var1",
                    "19": "result1",
                    "3": "value1",
                    "6": "result_1"
                },
                "uVar2": {
                    "3": "value2",
                    "19": "result2",
                    "1": "var2",
                    "6": "result_2"
                },
                "uVar3": {
                    "1": "converted_input3",
                    "19": "result3",
                    "6": "result_3",
                    "3": "value3"
                },
                "FUN_08000aa4": {
                    "1": "calculate_result_1"
                },
                "FUN_08000418": {
                    "1": "calculate_result_2"
                },
                "FUN_080004c8": {
                    "1": "calculate_result_3"
                },
                "FUN_0800015c": {
                    "1": "calculate_result_4"
                },
                "FUN_0800071c": {
                    "1": "calculate_result_5"
                },
                "FUN_08000158": {
                    "1": "calculate_result_6"
                },
                "FUN_080009fc": {
                    "1": "calculate_result_7"
                },
                "DAT_200009e4": {
                    "1": "data_1"
                },
                "DAT_20000005": {
                    "1": "data_2"
                }
            }
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_result_08004d78",
            "code": "\nvoid calculate_result_08004d78(undefined4 *input_values,undefined4 *output_value1,undefined4 *output_value2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  result1 = FUN_08000e20(*input_values,0x45800000);\n  result2 = FUN_08000e20(input_values[1],0x45800000);\n  result3 = FUN_08000e20(input_values[2],0x45800000);\n  temp1 = FUN_08000418(result2);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result2 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  temp1 = FUN_08000418(result1);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result1 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  *output_value1 = result2;\n  *output_value2 = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_result_08004d78",
                "param_1": "input_values",
                "param_2": "output_value1",
                "param_3": "output_value2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "temp1",
                "uVar5": "temp2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d78": {
                    "1": "calculate_param_values",
                    "6": "calculate_values",
                    "7": "calculate_parameters",
                    "2": "calculate_results",
                    "12": "calculate_result"
                },
                "param_1": {
                    "1": "input",
                    "4": "input_params",
                    "5": "values",
                    "8": "input_array"
                },
                "param_2": {
                    "10": "output_value1",
                    "5": "output1",
                    "1": "result_1",
                    "2": "output_var1",
                    "3": "output_param1",
                    "6": "result1"
                },
                "param_3": {
                    "3": "output_param2",
                    "2": "result1",
                    "6": "result2",
                    "5": "output2",
                    "1": "result_2",
                    "10": "output_value2"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "4": "temp1",
                    "2": "value1",
                    "20": "result1"
                },
                "uVar2": {
                    "1": "value_2",
                    "20": "result2",
                    "2": "value2",
                    "4": "temp2"
                },
                "uVar3": {
                    "1": "value_3",
                    "20": "result3",
                    "2": "result_c",
                    "4": "temp3"
                },
                "uVar4": {
                    "1": "calculation1",
                    "3": "temp4",
                    "11": "temp1",
                    "5": "temp_var1"
                },
                "uVar5": {
                    "3": "temp_result2",
                    "1": "intermediate_result2",
                    "5": "temp_var2",
                    "11": "temp2"
                },
                "FUN_08000e20": {
                    "1": "calculate_result"
                },
                "FUN_08000418": {
                    "1": "convert_to_unsigned_long_long"
                },
                "thunk_FUN_08005838": {
                    "1": "perform_thunk"
                },
                "FUN_080004c8": {
                    "1": "calculate_unsigned_long_long_value2"
                },
                "FUN_0800071c": {
                    "1": "calculate_other_result"
                },
                "FUN_080009fc": {
                    "1": "calculate_final_value"
                },
                "*param_1": {
                    "1": "input_array"
                },
                "*param_2": {
                    "1": "result1"
                },
                "*param_3": {
                    "1": "result2"
                }
            }
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "execute_system_call_08004e6c",
            "code": "\nvoid execute_system_call_08004e6c(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "execute_system_call_08004e6c",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e6c": {
                    "2": "perform_system_call",
                    "1": "initiate_software_interrupt",
                    "3": "trigger_software_interrupt",
                    "6": "invoke_system_interrupt",
                    "7": "execute_system_call"
                },
                "software_interrupt": {
                    "6": "trigger_interrupt",
                    "3": "execute_interrupt",
                    "4": "perform_interrupt",
                    "1": "request_interrupt"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "PTR_interrupt_number": {
                    "1": "interrupt_number"
                }
            }
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_data_08004e74",
            "code": "\nundefined4 initialize_data_08004e74(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = FUN_08004e6c(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_data_08004e74",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e74": {
                    "1": "initialize_value",
                    "3": "initialize",
                    "2": "initialize_if_needed",
                    "7": "initialize_data",
                    "4": "initialize_function"
                },
                "param_1": {
                    "10": "input",
                    "3": "input_parameter",
                    "4": "input_param",
                    "1": "value",
                    "6": "input_data",
                    "2": "param"
                },
                "uVar1": {
                    "17": "result",
                    "12": "return_value",
                    "2": "output_value"
                }
            }
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "execute_function_08004ea4",
            "code": "\nvoid execute_function_08004ea4(undefined data_array,undefined input1,undefined4 input2,undefined2 input3)\n\n{\n  FUN_08001ccc(&DAT_20000a88,data_array,input1,1,input2,input3,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "execute_function_08004ea4",
                "param_1": "data_array",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ea4": {
                    "1": "execute_function_with_params",
                    "2": "execute_data_transfer",
                    "9": "execute_function",
                    "3": "execute_data_processing",
                    "6": "initialize_data"
                },
                "param_1": {
                    "1": "data_array1",
                    "3": "function_ptr",
                    "6": "data_array",
                    "5": "data_ptr",
                    "4": "data_pointer",
                    "2": "buffer"
                },
                "param_2": {
                    "1": "input_value1",
                    "3": "param_2",
                    "2": "input_1",
                    "4": "input1"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "data2",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "offset",
                    "2": "input_3",
                    "4": "input3"
                },
                "FUN_08001ccc": {
                    "1": "update_data",
                    "6": "process_data",
                    "3": "copy_data"
                },
                "param_5": {
                    "1": "transfer_buffer"
                },
                "DAT_20000a88": {
                    "1": "data_pointer"
                },
                "DAT_20000008": {
                    "1": "constant_value"
                }
            }
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "execute_function_08004ee8",
            "code": "\nvoid execute_function_08004ee8(undefined data_array,undefined input_1,undefined4 input_2,undefined2 input_3)\n\n{\n  FUN_08001f6c(&DAT_20000a88,data_array,input_1,1,input_2,input_3,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "execute_function_08004ee8",
                "param_1": "data_array",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ee8": {
                    "2": "extract_and_process_data",
                    "7": "process_data",
                    "1": "execute_func",
                    "9": "execute_function"
                },
                "param_1": {
                    "12": "data_array",
                    "2": "data",
                    "1": "function_list",
                    "6": "data_ptr"
                },
                "param_2": {
                    "2": "input1",
                    "1": "param_value_1",
                    "3": "param_2",
                    "6": "input_1"
                },
                "param_3": {
                    "1": "size_of_data",
                    "6": "input_2",
                    "2": "input2",
                    "4": "param_3",
                    "3": "size"
                },
                "param_4": {
                    "1": "value_2",
                    "4": "param_4",
                    "2": "input3",
                    "6": "input_3"
                },
                "FUN_08001f6c": {
                    "1": "process_data_helper",
                    "3": "process_data",
                    "4": "update_data"
                },
                "param_5": {
                    "1": "ptr_data"
                }
            }
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "get_return_value_08004f2c",
            "code": "\nundefined4 get_return_value_08004f2c(void)\n\n{\n  undefined4 return_value;\n  \n  return_value = FUN_080015a0();\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "get_return_value_08004f2c",
                "uVar1": "return_value"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004f2c": {
                    "1": "initialize_function",
                    "6": "execute_main_function",
                    "5": "initialize_application",
                    "2": "extract_data",
                    "10": "get_return_value"
                },
                "FUN_080015a0": {
                    "4": "get_data",
                    "2": "get_return_value",
                    "1": "perform_operation",
                    "3": "get_initial_value"
                },
                "uVar1": {
                    "2": "result",
                    "3": "return_value"
                }
            }
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initialize_data_08004f3c(undefined4 data_pointer,undefined2 string_pointer)\n\n{\n  FUN_08004436(&DAT_20000adc,data_pointer,string_pointer,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "data_pointer",
                "param_2": "string_pointer"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004f3c": {
                    "2": "execute_function",
                    "1": "execute_process",
                    "23": "initialize_data"
                },
                "param_1": {
                    "4": "data_ptr",
                    "6": "data_array",
                    "15": "data_pointer",
                    "2": "data_structure"
                },
                "param_2": {
                    "1": "data_value",
                    "2": "source_string",
                    "3": "input_data",
                    "4": "string_pointer"
                },
                "FUN_08004436": {
                    "1": "retrieve_data",
                    "13": "process_data",
                    "2": "update_data",
                    "6": "copy_data"
                },
                "param_3": {
                    "4": "value",
                    "1": "data_update_value",
                    "2": "size",
                    "3": "length"
                },
                "param_4": {
                    "1": "param_uint",
                    "2": "value",
                    "4": "size",
                    "8": "constant",
                    "5": "constant_value"
                }
            }
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_data_08004f60",
            "code": "\nvoid initialize_data_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_data_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004f60": {
                    "18": "initialize_data",
                    "1": "initialize_data_buffer",
                    "11": "initialize_memory"
                },
                "FUN_08005d68": {
                    "2": "copy_memory",
                    "1": "copy_data_to_memory",
                    "4": "fill_memory",
                    "3": "initialize_memory"
                },
                "param_1": {
                    "3": "data_ptr",
                    "4": "data_array",
                    "1": "memory_array",
                    "2": "memory_pointer",
                    "8": "data_pointer"
                },
                "param_2": {
                    "4": "param2",
                    "1": "arg2",
                    "2": "param",
                    "3": "fill_value",
                    "5": "value"
                },
                "param_3": {
                    "2": "param3",
                    "1": "length",
                    "23": "size"
                },
                "undefined4": {
                    "1": "some_type"
                },
                "undefined": {
                    "1": "another_type"
                },
                "dataPointer": {
                    "1": "p_data"
                },
                "undefinedValue": {
                    "1": "value"
                },
                "length": {
                    "1": "size"
                },
                "DAT_20000ba8": {
                    "1": "data"
                }
            }
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "initialize_audio_08004f78",
            "code": "\nvoid initialize_audio_08004f78(void)\n\n{\n  undefined4 result;\n  int return_value2;\n  undefined4 value;\n  uint modified_var;\n  undefined8 pitch_value;\n  byte pitch;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitch_value = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitch_value,(int)((ulonglong)pitch_value >> 0x20));\n  result = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,result);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  result = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(result,DAT_20000b5c);\n  result = FUN_08000c10(DAT_20000010);\n  return_value2 = FUN_08000ff4(result,DAT_20000b5c);\n  if (return_value2 == 0) {\n    result = FUN_08000c10(DAT_200009f4);\n    return_value2 = FUN_08001030(result,DAT_20000b5c);\n    if (return_value2 != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  modified_var = DAT_20000a08 ^ 0x80000000;\n  result = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(modified_var,result);\n  result = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  result = FUN_08000aa8(result,DAT_20000a58);\n  value = FUN_08000c10(DAT_20000010);\n  return_value2 = FUN_08001030(result,value);\n  if (return_value2 == 0) {\n    value = FUN_08000c10(DAT_200009f4);\n    return_value2 = FUN_08000ff4(result,value);\n    if (return_value2 == 0) {\n      pitch = FUN_08001044(result);\n    }\n    else {\n      pitch = DAT_200009f4;\n    }\n  }\n  else {\n    pitch = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  return_value2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,return_value2 != 0);\n  return_value2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,return_value2 == 0);\n  return_value2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,return_value2 != 0);\n  return_value2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,return_value2 == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitch;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitch;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "initialize_audio_08004f78",
                "local_11": "pitch",
                "uVar1": "result",
                "iVar2": "return_value2",
                "uVar3": "value",
                "uVar4": "modified_var",
                "uVar5": "pitch_value"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004f78": {
                    "2": "initialize_audio_system",
                    "1": "initialize_sound_system",
                    "6": "process_audio_data",
                    "11": "initialize_audio"
                },
                "FUN_08004ae0": {
                    "2": "initialize_audio_device",
                    "1": "setup_audio_data",
                    "4": "initialize_buffer",
                    "17": "initialize_data"
                },
                "FUN_08004bd8": {
                    "1": "init_audio_output",
                    "2": "copy_data",
                    "8": "load_data"
                },
                "FUN_08004f60": {
                    "1": "initialize_sound",
                    "2": "initialize_audio",
                    "3": "calculate_pitch"
                },
                "FUN_08000418": {
                    "1": "convert_value",
                    "7": "calculate_pitch",
                    "3": "get_audio_pitch",
                    "6": "get_pitch"
                },
                "FUN_08005dfc": {
                    "3": "print_pitch_value",
                    "2": "print_message",
                    "22": "print_pitch",
                    "1": "print_audio_pitch"
                },
                "FUN_08005e40": {
                    "2": "get_length",
                    "1": "get_normalized_pitch",
                    "3": "get_pitch_value",
                    "8": "get_string_length"
                },
                "FUN_08004f3c": {
                    "1": "update_pitch",
                    "2": "set_pitch_string",
                    "3": "set_pitch"
                },
                "FUN_08000aa4": {
                    "5": "calculate_value",
                    "2": "process_data",
                    "1": "process_data1",
                    "3": "calculate_value_a"
                },
                "FUN_08000cb8": {
                    "3": "calculate_value_b",
                    "2": "update_value",
                    "1": "func2",
                    "4": "calculate_result"
                },
                "FUN_08000aa8": {
                    "1": "calculate_third_value",
                    "3": "combine_audio_data",
                    "2": "combine_data",
                    "5": "combine_values"
                },
                "FUN_08000c10": {
                    "1": "get_audio_source",
                    "2": "get_constant_value"
                },
                "FUN_08000ff4": {
                    "1": "check_condition_one",
                    "2": "check_condition_a",
                    "3": "is_data_valid",
                    "12": "check_condition"
                },
                "FUN_08001030": {
                    "1": "check_validity",
                    "2": "check_result",
                    "3": "check_value"
                },
                "FUN_08001044": {
                    "1": "reverse_pitch",
                    "2": "calculate_local_value",
                    "6": "calculate_pitch"
                },
                "FUN_08001a80": {
                    "1": "log_audio_status",
                    "5": "update_status",
                    "9": "set_flag"
                },
                "FUN_08000c08": {
                    "1": "choose_result"
                },
                "local_11": {
                    "2": "pitch",
                    "1": "local_var"
                },
                "FUN_080005dfc": {
                    "1": "print_pitch"
                },
                "initializeAudio": {
                    "1": "initialize_audio"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "initializePointers": {
                    "1": "initialize_pointers"
                },
                "initializeSound": {
                    "1": "initialize_sound"
                },
                "getPitch": {
                    "1": "get_pitch"
                },
                "printPitch": {
                    "1": "print_pitch"
                },
                "setLength": {
                    "1": "set_length"
                },
                "calculateSomething": {
                    "1": "calculate_something"
                },
                "calculateSomethingElse": {
                    "1": "calculate_something_else"
                },
                "calculateMore": {
                    "1": "calculate_more"
                },
                "fetchData": {
                    "1": "fetch_data"
                },
                "conditionA": {
                    "1": "condition_a"
                },
                "conditionB": {
                    "1": "condition_b"
                },
                "reversePitch": {
                    "1": "reverse_pitch"
                },
                "uVar1": {
                    "2": "result",
                    "1": "return_val1"
                },
                "iVar2": {
                    "1": "return_value"
                },
                "uVar3": {
                    "2": "value",
                    "1": "return_val3"
                },
                "uVar4": {
                    "1": "var1"
                },
                "uVar5": {
                    "1": "var2"
                },
                "DAT_20000a5c": {
                    "1": "data_structure1"
                },
                "DAT_20000ba0": {
                    "1": "data_structure2"
                },
                "DAT_20000ba8": {
                    "1": "output_message"
                },
                "DAT_200009f8": {
                    "1": "data_value1"
                },
                "DAT_20000be8": {
                    "1": "data_value2"
                },
                "DAT_20000a00": {
                    "1": "data_value3"
                },
                "DAT_20000a04": {
                    "1": "data_value4"
                },
                "DAT_20000b5c": {
                    "1": "data_value5"
                },
                "DAT_20000014": {
                    "1": "constant1"
                },
                "DAT_20000010": {
                    "1": "constant2"
                },
                "DAT_200009f4": {
                    "1": "constant3"
                },
                "DAT_200009fc": {
                    "1": "saved_data_value"
                },
                "DAT_20000b1c": {
                    "1": "memory_addr"
                }
            }
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_program_08005224",
            "code": "\nvoid initialize_program_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_program_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005224": {
                    "1": "initiate_program",
                    "4": "initialize_application",
                    "2": "initialize_app",
                    "7": "initialize_system",
                    "8": "initialize_program"
                },
                "FUN_08005348": {
                    "1": "perform_initial_configuration",
                    "2": "perform_initialization"
                },
                "FUN_0800360c": {
                    "1": "load_textures",
                    "2": "initialize_buffer",
                    "4": "initialize_data",
                    "11": "allocate_memory"
                },
                "FUN_08005598": {
                    "1": "perform_preprocessing",
                    "5": "initialize_graphics",
                    "2": "configure_settings"
                },
                "FUN_080052a0": {
                    "1": "configure_settings",
                    "2": "initialize_graphics",
                    "3": "initialize_audio"
                },
                "FUN_08004e74": {
                    "1": "disable_feature",
                    "11": "disable_interrupts"
                },
                "FUN_080036a8": {
                    "1": "configure_settings",
                    "2": "set_memory",
                    "5": "initialize_memory",
                    "3": "initialize_buffer"
                },
                "FUN_080055f4": {
                    "2": "initialize_audio",
                    "1": "perform_operation_c"
                },
                "FUN_0800491c": {
                    "1": "initialize8",
                    "4": "initialize_variables",
                    "2": "initialize_memory",
                    "7": "initialize_data"
                },
                "FUN_080014f0": {
                    "1": "initiate_communication",
                    "2": "perform_initialization",
                    "10": "initialize_system"
                },
                "FUN_080053b0": {
                    "1": "configure_settings",
                    "2": "process_input",
                    "3": "initialize_input"
                },
                "FUN_08005500": {
                    "1": "perform_initialization",
                    "2": "initialize_audio"
                },
                "DAT_20000a54": {
                    "1": "sound_data_address"
                },
                "DAT_20000a4c": {
                    "1": "music_data_address"
                },
                "DAT_20000a50": {
                    "1": "texture_data_address"
                },
                "DAT_20000b60": {
                    "1": "texture_buffer"
                }
            }
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_program_080052a0",
            "code": "\nvoid initialize_program_080052a0(void)\n\n{\n  int result;\n  undefined8 time;\n  undefined4 flag;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 error_code4;\n  undefined4 error_code5;\n  undefined4 flag1;\n  undefined4 constant1;\n  undefined4 counter;\n  undefined4 flag4;\n  undefined4 flag5;\n  undefined4 constant2;\n  undefined4 constant3;\n  \n  flag1 = 1;\n  constant1 = 0x10000;\n  counter = 0;\n  flag4 = 1;\n  flag5 = 2;\n  constant2 = 0x10000;\n  constant3 = 0x1c0000;\n  result = FUN_08002d98(&flag1);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  flag = 0xf;\n  param2 = 2;\n  param3 = 0x80;\n  error_code4 = 0;\n  error_code5 = 0;\n  result = FUN_08003260(&flag,2);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  time = FUN_08003504();\n  FUN_08001762((uint)time / 1000,(int)((ulonglong)time >> 0x20),(uint)time * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_program_080052a0",
                "local_30": "flag1",
                "local_2c": "constant1",
                "local_28": "counter",
                "local_14": "flag5",
                "local_10": "constant2",
                "local_c": "constant3",
                "local_44": "flag",
                "local_40": "param2",
                "local_3c": "param3",
                "iVar1": "result",
                "uVar2": "time",
                "local_38": "error_code4",
                "local_34": "error_code5",
                "local_20": "flag4"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080052a0": {
                    "9": "initialize_application",
                    "1": "perform_initial_setup",
                    "3": "initialize_system",
                    "12": "initialize_program",
                    "2": "initialize_function"
                },
                "local_30": {
                    "3": "flag",
                    "1": "int_value1",
                    "2": "mode",
                    "4": "flag1"
                },
                "local_2c": {
                    "1": "value7",
                    "5": "constant1",
                    "2": "value2",
                    "3": "flag2"
                },
                "local_28": {
                    "1": "local_var3",
                    "2": "value3",
                    "3": "counter"
                },
                "local_14": {
                    "1": "task5",
                    "2": "constant3",
                    "3": "flag5"
                },
                "local_10": {
                    "1": "end_value",
                    "3": "constant2",
                    "2": "var11"
                },
                "local_c": {
                    "1": "memory_limit",
                    "2": "value7",
                    "3": "constant3"
                },
                "FUN_08002d98": {
                    "1": "check_condition1",
                    "4": "check_initialization",
                    "3": "check_flag"
                },
                "local_44": {
                    "4": "flag",
                    "2": "num1",
                    "1": "flag_value",
                    "3": "error_code1"
                },
                "local_40": {
                    "1": "value1",
                    "2": "value2",
                    "3": "value",
                    "4": "param2"
                },
                "local_3c": {
                    "2": "value",
                    "1": "some_value3",
                    "4": "param3",
                    "3": "error_code3"
                },
                "iVar1": {
                    "2": "status",
                    "16": "result"
                },
                "FUN_08005674": {
                    "1": "log_error",
                    "3": "handle_error",
                    "4": "report_error"
                },
                "FUN_08003260": {
                    "1": "verify_data",
                    "3": "perform_operation"
                },
                "FUN_08003504": {
                    "1": "get_formatted_time",
                    "3": "get_timestamp",
                    "2": "get_return_value"
                },
                "FUN_08001762": {
                    "3": "calculate_value",
                    "1": "calculate_result",
                    "4": "print_time"
                },
                "uVar2": {
                    "1": "time_val",
                    "9": "time",
                    "3": "time_value",
                    "4": "timestamp"
                },
                "FUN_0800177c": {
                    "3": "set_mode",
                    "1": "function_a",
                    "2": "print_result"
                },
                "FUN_0800172a": {
                    "1": "perform_operation",
                    "2": "initialize_settings"
                },
                "local_38": {
                    "1": "option4",
                    "2": "value4",
                    "3": "error_code4"
                },
                "local_34": {
                    "1": "var_34",
                    "2": "num5",
                    "3": "error_code5"
                },
                "local_20": {
                    "1": "int_value4",
                    "2": "constant2",
                    "3": "flag4"
                },
                "num6": {
                    "1": "local_30"
                },
                "num9": {
                    "1": "local_20"
                },
                "num10": {
                    "1": "local_14"
                },
                "num11": {
                    "1": "local_10"
                },
                "num12": {
                    "1": "local_c"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                }
            }
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initialize_data_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = FUN_08001ab0(&DAT_20000a88);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005348": {
                    "24": "initialize_data",
                    "5": "initialize_variables",
                    "1": "initialize_memory"
                },
                "iVar1": {
                    "10": "result",
                    "1": "return_value"
                },
                "FUN_08001ab0": {
                    "3": "check_data",
                    "2": "validate_pointer",
                    "1": "check_memory_allocation"
                },
                "FUN_08005674": {
                    "6": "display_error",
                    "2": "display_error_message",
                    "5": "log_error",
                    "1": "report_error"
                },
                "param_1": {
                    "1": "memory"
                }
            }
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_program_080053b0",
            "code": "\nvoid initialize_program_080053b0(void)\n\n{\n  int result;\n  undefined4 error_code1;\n  undefined4 error_code2;\n  undefined4 error_code3;\n  undefined4 error_code4;\n  undefined4 error_code5;\n  undefined4 buffer_size;\n  undefined4 value7;\n  undefined4 size;\n  undefined4 value9;\n  undefined4 value10;\n  undefined4 value11;\n  undefined4 value12;\n  undefined4 value13;\n  undefined4 value14;\n  undefined4 value15;\n  undefined4 value16;\n  undefined4 buffer [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  result = FUN_080035a4(&DAT_20000b1c);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  buffer[0] = 0x1000;\n  result = FUN_08003a94(&DAT_20000b1c,buffer);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  result = FUN_08003640(&DAT_20000b1c);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  value15 = 0;\n  value16 = 0;\n  result = FUN_080042de(&DAT_20000b1c,&value15);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  size = 0x60;\n  value9 = 0;\n  value10 = 0;\n  value11 = 0;\n  value12 = 0;\n  value13 = 0;\n  value14 = 0;\n  result = FUN_08003908(&DAT_20000b1c,&size,0);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  result = FUN_08003908(&DAT_20000b1c,&size,0xc);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  error_code1 = 0;\n  error_code2 = 0;\n  error_code3 = 0;\n  error_code4 = 0;\n  error_code5 = 0;\n  buffer_size = 0x2000;\n  value7 = 0;\n  result = FUN_0800422e(&DAT_20000b1c,&error_code1);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "local_18": "buffer",
                "local_20": "value15",
                "local_1c": "value16",
                "local_3c": "size",
                "local_38": "value9",
                "local_34": "value10",
                "local_30": "value11",
                "local_2c": "value12",
                "local_28": "value13",
                "local_24": "value14",
                "local_58": "error_code1",
                "local_54": "error_code2",
                "local_50": "error_code3",
                "local_4c": "error_code4",
                "local_48": "error_code5",
                "local_44": "buffer_size",
                "local_40": "value7",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080053b0": {
                    "1": "initialize_binary",
                    "2": "initialize_system",
                    "8": "initialize_application",
                    "16": "initialize_program"
                },
                "local_18": {
                    "3": "array",
                    "1": "array1",
                    "2": "size_array",
                    "4": "buffer"
                },
                "local_20": {
                    "1": "param8",
                    "3": "value15",
                    "2": "error_code15"
                },
                "local_1c": {
                    "1": "param8",
                    "2": "error_code16",
                    "3": "value16"
                },
                "local_3c": {
                    "1": "thread_stack_size",
                    "2": "error_code8",
                    "3": "size"
                },
                "local_38": {
                    "1": "zero",
                    "2": "error_code9",
                    "3": "value9"
                },
                "local_34": {
                    "1": "stack_limit",
                    "2": "error_code10",
                    "3": "value10"
                },
                "local_30": {
                    "1": "temp4",
                    "2": "error_code11",
                    "3": "value11"
                },
                "local_2c": {
                    "1": "local_variable7",
                    "3": "value12",
                    "2": "error_code12"
                },
                "local_28": {
                    "1": "initialized_value7",
                    "3": "value13",
                    "2": "error_code13"
                },
                "local_24": {
                    "2": "buffer14",
                    "1": "param7",
                    "3": "value14"
                },
                "local_58": {
                    "1": "memory_allocation1",
                    "2": "result1",
                    "3": "value1",
                    "5": "error_code1"
                },
                "local_54": {
                    "1": "param_2",
                    "2": "var2",
                    "3": "value2",
                    "5": "error_code2"
                },
                "local_50": {
                    "2": "buffer3",
                    "1": "local_var3",
                    "5": "error_code3",
                    "3": "value3"
                },
                "local_4c": {
                    "1": "error_count",
                    "2": "buffer4",
                    "5": "error_code4",
                    "3": "value4"
                },
                "local_48": {
                    "1": "memory_allocation5",
                    "3": "value5",
                    "2": "buffer5",
                    "5": "error_code5"
                },
                "local_44": {
                    "2": "buffer6",
                    "1": "limit",
                    "6": "buffer_size",
                    "3": "value6"
                },
                "local_40": {
                    "2": "buffer7",
                    "1": "value",
                    "3": "value7"
                },
                "FUN_08003640": {
                    "1": "perform_initialization"
                },
                "FUN_08003908": {
                    "1": "setup_configuration",
                    "2": "configure_settings"
                },
                "FUN_08005674": {
                    "1": "log_error",
                    "4": "handle_error",
                    "3": "print_error_message",
                    "2": "report_error"
                },
                "FUN_0800422e": {
                    "1": "do_something3",
                    "4": "load_data"
                },
                "FUN_08005680": {
                    "3": "cleanup_program",
                    "1": "clean_up",
                    "4": "cleanup_resources"
                },
                "FUN_080035a4": {
                    "1": "verify_data",
                    "3": "check_initialization",
                    "2": "initialize_data"
                },
                "FUN_080042de": {
                    "1": "initialize_part_four"
                },
                "FUN_08003a94": {
                    "1": "initialize_part_five"
                },
                "iVar1": {
                    "4": "result"
                },
                "DAT_20000b1c": {
                    "3": "data1",
                    "1": "pointer1"
                },
                "DAT_20000b20": {
                    "1": "ptr2",
                    "3": "data2"
                },
                "DAT_20000b24": {
                    "3": "data3",
                    "1": "pointer3"
                },
                "DAT_20000b28": {
                    "1": "ptr4",
                    "3": "data4"
                },
                "DAT_20000b2c": {
                    "1": "value4",
                    "3": "data5"
                },
                "DAT_20000b30": {
                    "1": "pointer6",
                    "3": "data6"
                },
                "DAT_20000b34": {
                    "1": "pointer7",
                    "3": "data7"
                },
                "initializeSystem": {
                    "1": "initialize_system"
                },
                "initializeApplication": {
                    "1": "initialize_app"
                }
            }
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_data_08005500",
            "code": "\nvoid initialize_data_08005500(void)\n\n{\n  int result;\n  undefined4 buffer_size;\n  undefined4 counter;\n  undefined4 page_sizes [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = FUN_080035a4(&DAT_20000b60);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  page_sizes[0] = 0x1000;\n  result = FUN_08003a94(&DAT_20000b60,page_sizes);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  buffer_size = 0x20;\n  counter = 0;\n  result = FUN_080042de(&DAT_20000b60,&buffer_size);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_data_08005500",
                "local_18": "page_sizes",
                "local_1c": "counter",
                "local_20": "buffer_size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005500": {
                    "2": "initialize",
                    "3": "initialize_variables",
                    "1": "initialize_settings",
                    "18": "initialize_data"
                },
                "FUN_080035a4": {
                    "2": "check_initialization",
                    "3": "check_data",
                    "1": "check_pointer",
                    "7": "check_memory_allocation"
                },
                "FUN_08003a94": {
                    "1": "check_data2",
                    "4": "initialize_memory",
                    "5": "allocate_memory"
                },
                "FUN_080042de": {
                    "6": "read_data",
                    "1": "update_values",
                    "3": "process_data",
                    "2": "update_data"
                },
                "FUN_08005674": {
                    "1": "log_error_message",
                    "5": "print_error_message",
                    "2": "display_error_message"
                },
                "local_18": {
                    "1": "memory_size",
                    "2": "sizes",
                    "4": "page_sizes"
                },
                "local_1c": {
                    "1": "buffer_count",
                    "2": "initial_value",
                    "6": "counter",
                    "3": "buffer_index"
                },
                "local_20": {
                    "1": "block_size",
                    "18": "buffer_size",
                    "3": "size"
                },
                "local_18[4]": {
                    "1": "buffer"
                },
                "iVar1": {
                    "5": "result",
                    "3": "return_value"
                },
                "DAT_20000b60": {
                    "1": "data_pointer"
                },
                "DAT_20000b64": {
                    "1": "value1"
                },
                "DAT_20000b68": {
                    "1": "value2"
                },
                "DAT_20000b6c": {
                    "1": "value3"
                },
                "DAT_20000b70": {
                    "1": "value4"
                },
                "DAT_20000b78": {
                    "1": "value5"
                }
            }
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_08005598",
            "code": "\nvoid initialize_data_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = FUN_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005598": {
                    "27": "initialize_data",
                    "3": "initialize_variables",
                    "1": "initialize_globals"
                },
                "param_1": {
                    "3": "data_ptr",
                    "1": "pointer"
                },
                "iVar1": {
                    "2": "return_value",
                    "15": "result"
                },
                "FUN_08005674": {
                    "11": "display_error",
                    "1": "print_error_message",
                    "2": "report_error",
                    "6": "display_error_message"
                },
                "FUN_0800438a": {
                    "2": "check_address_validity",
                    "1": "check_status",
                    "10": "check_data_validity",
                    "8": "check_data"
                },
                "../src/main.c": {
                    "2": "source_file"
                },
                "0x1ed": {
                    "2": "line_number"
                },
                "DAT_20000adc": {
                    "1": "base_address"
                },
                "DAT_20000ae0": {
                    "1": "offset1"
                },
                "DAT_20000af0": {
                    "1": "offset2"
                }
            }
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_data_080055f4",
            "code": "\n\n\nvoid initialize_data_080055f4(void)\n\n{\n  undefined4 data_size;\n  undefined4 flag;\n  undefined4 value;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  data_size = 0x1e;\n  flag = 1;\n  value = 2;\n  FUN_080017c4(0x40010800,&data_size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_data_080055f4",
                "local_18": "data_size",
                "local_14": "flag",
                "local_c": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080055f4": {
                    "1": "initialize_components",
                    "2": "initialize_flags",
                    "4": "initialize_device",
                    "12": "initialize_data"
                },
                "local_18": {
                    "1": "widget_height",
                    "12": "data_size",
                    "2": "length",
                    "4": "buffer_size"
                },
                "local_14": {
                    "13": "flag",
                    "1": "data_byte",
                    "2": "flag1",
                    "4": "value1"
                },
                "local_c": {
                    "2": "flag2",
                    "1": "flags",
                    "5": "count",
                    "8": "value",
                    "4": "value2"
                },
                "_DAT_40021018": {
                    "1": "register",
                    "2": "register_value",
                    "3": "flags"
                },
                "FUN_08001a80": {
                    "2": "configure_device",
                    "1": "set_device_config"
                },
                "FUN_080017c4": {
                    "1": "send_device_config",
                    "2": "process_data"
                },
                "param_1": {
                    "1": "array1",
                    "2": "data_pointer"
                },
                "param_2": {
                    "1": "array2"
                },
                "param_3": {
                    "1": "character"
                },
                "0x40010800": {
                    "1": "data_buffer"
                },
                "0x1e": {
                    "1": "buffer_size"
                },
                "_DAT_40021018 & 8": {
                    "1": "flag_value"
                }
            }
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infinite_loop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( always_true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674",
                "true": "always_true"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005674": {
                    "3": "run_infinite_loop",
                    "1": "never_ending_loop",
                    "27": "infinite_loop"
                },
                "do": {
                    "1": "loop",
                    "3": "do"
                },
                "while": {
                    "2": "while"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "": {
                    "1": ""
                },
                "true": {
                    "1": "true"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "PTR_1": {
                    "1": "unchanged"
                },
                "DAT_1": {
                    "1": "unchanged"
                }
            }
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_values_08005680",
            "code": "\nvoid initialize_values_08005680(int *data_ptr)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  if (*data_ptr == 0x40012c00) {\n    value1 = 0x900;\n    value2 = 2;\n    value3 = 2;\n    FUN_080017c4(0x40010800,&value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_values_08005680",
                "param_1": "data_ptr",
                "local_18": "value1",
                "local_14": "value2",
                "local_c": "value3"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005680": {
                    "1": "initialize_process",
                    "2": "process_parameter",
                    "3": "initialize_data",
                    "4": "initialize_values"
                },
                "param_1": {
                    "2": "config_ptr",
                    "1": "input_pointer",
                    "3": "input_ptr"
                },
                "local_18": {
                    "1": "option_value",
                    "3": "value_a",
                    "4": "value",
                    "8": "value1",
                    "2": "constant_value"
                },
                "local_14": {
                    "1": "index",
                    "4": "count",
                    "6": "counter",
                    "3": "value_b",
                    "2": "value1",
                    "8": "value2"
                },
                "local_c": {
                    "5": "flag",
                    "1": "num3",
                    "8": "value3",
                    "3": "value_c",
                    "2": "value2"
                },
                "FUN_080017c4": {
                    "2": "update_data",
                    "3": "process_data",
                    "1": "update_values"
                },
                "param_2": {
                    "1": "value_pointer"
                }
            }
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_program_08005704",
            "code": "\nvoid initialize_program_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_program_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005704": {
                    "5": "initialize",
                    "4": "initialize_application",
                    "1": "initialize_binary",
                    "6": "execute_initialization",
                    "3": "initialize_system",
                    "7": "initialize_program",
                    "2": "initialize_components"
                },
                "FUN_0800157c": {
                    "2": "perform_first_task",
                    "1": "configure_component_a",
                    "3": "perform_initialization"
                },
                "FUN_080017b4": {
                    "1": "perform_post_process",
                    "2": "configure_settings"
                }
            }
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_08005714",
            "code": "\nvoid initialize_data_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005714": {
                    "24": "initialize_data",
                    "3": "initialize_data_structures",
                    "1": "initialize_application"
                },
                "param_1": {
                    "4": "data_array",
                    "2": "data_structure_ptr",
                    "1": "data_buffer",
                    "3": "data_ptr"
                },
                "FUN_080036f8": {
                    "2": "initialize_parameter",
                    "1": "update_data_structure",
                    "3": "update_data"
                }
            }
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *ptr;\n  undefined *result;\n  undefined temp_buffer [4];\n  int remaining_size;\n  undefined *current_pointer;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_pointer = DAT_20000a10;\n  if (temp_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    ptr = (undefined4 *)FUN_08005d14();\n    *ptr = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "ptr",
                "puVar2": "result",
                "auStack_18": "temp_buffer",
                "local_14": "remaining_size",
                "local_c": "current_pointer"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005728": {
                    "1": "reserve_memory",
                    "29": "allocate_memory"
                },
                "param_1": {
                    "1": "size_in_bytes",
                    "29": "size"
                },
                "puVar1": {
                    "1": "memory_address",
                    "3": "result",
                    "4": "new_pointer",
                    "7": "ptr",
                    "2": "new_block"
                },
                "puVar2": {
                    "1": "allocation_result",
                    "3": "return_value",
                    "4": "allocated_memory",
                    "15": "result",
                    "2": "result_pointer"
                },
                "auStack_18": {
                    "1": "temporary_buffer",
                    "10": "stack_buffer",
                    "2": "limit"
                },
                "local_14": {
                    "2": "local_size",
                    "23": "remaining_size",
                    "1": "actual_size",
                    "3": "required_size"
                },
                "local_c": {
                    "1": "current_position",
                    "2": "current_block",
                    "5": "current_pointer",
                    "4": "current_address"
                },
                "FUN_08005d14": {
                    "1": "allocate_block"
                }
            }
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_registers_08005780",
            "code": "\n\n\nvoid initialize_registers_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_registers_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005780": {
                    "5": "initialize_hardware",
                    "11": "initialize_registers",
                    "2": "initialize_device",
                    "9": "initialize_memory"
                },
                "_DAT_40021000": {
                    "1": "peripheral_config_register1",
                    "6": "control_register",
                    "2": "hardware_register1",
                    "3": "control_register1"
                },
                "_DAT_40021004": {
                    "1": "interrupt_configuration_register",
                    "2": "hardware_register2",
                    "3": "control_register2"
                },
                "_DAT_40021008": {
                    "1": "memory_address",
                    "3": "data_register",
                    "2": "register_3"
                },
                "_DAT_e000ed08": {
                    "2": "register_4",
                    "1": "system_timer",
                    "3": "register4"
                },
                "": {
                    "2": ""
                }
            }
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 upper_bits;\n  uint flag;\n  uint param_4_masked;\n  uint param_2_masked;\n  undefined8 result;\n  \n  param_4_masked = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (param_4_masked | (-input3 | input3) >> 0x1f)) ||\n     (param_2_masked = input2 & 0x7fffffff, 0x7ff00000 < (param_2_masked | (-input1 | input1) >> 0x1f))) {\n    param_4_masked = FUN_0800015c(input3,input4,input1,input2);\n    return param_4_masked;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    param_4_masked = FUN_080059f0();\n    return param_4_masked;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((param_2_masked | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((param_4_masked | input3) != 0) {\n    if (param_4_masked == 0x7ff00000) {\n      if (param_2_masked == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (param_2_masked != 0x7ff00000) {\n      difference = (int)(param_2_masked - param_4_masked) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != check_integer_overflow(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = FUN_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      upper_bits = (undefined4)((ulonglong)result >> 0x20);\n      param_4_masked = (uint)result;\n      if (flag == 1) {\n        return param_4_masked;\n      }\n      if (flag == 2) {\n        result = FUN_08000158(param_4_masked,upper_bits,0x33145c07,0x3ca1a626);\n        param_4_masked = FUN_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return param_4_masked;\n      }\n      if (flag != 0) {\n        result = FUN_08000158(param_4_masked,upper_bits,0x33145c07,0x3ca1a626);\n        param_4_masked = FUN_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return param_4_masked;\n      }\n      return param_4_masked;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar4": "param_4_masked",
                "uVar5": "param_2_masked",
                "uVar3": "flag",
                "iVar1": "difference",
                "uVar6": "result",
                "uVar2": "upper_bits",
                "SCARRY4": "check_integer_overflow"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_08005838": {
                    "2": "calculate_value",
                    "1": "reverse_arguments",
                    "16": "calculate_result"
                },
                "param_1": {
                    "9": "input_1",
                    "2": "input_value_1",
                    "3": "input_param1",
                    "1": "first_parameter",
                    "11": "input1"
                },
                "param_2": {
                    "11": "input2",
                    "1": "value2",
                    "3": "input_param2",
                    "2": "input_value_2",
                    "9": "input_2"
                },
                "param_3": {
                    "9": "input_3",
                    "3": "input_param3",
                    "1": "third_parameter",
                    "2": "input_value_3",
                    "11": "input3"
                },
                "param_4": {
                    "1": "operand4",
                    "9": "input_4",
                    "3": "input_param4",
                    "2": "input_value_4",
                    "11": "input4"
                },
                "uVar4": {
                    "1": "valid_input_4",
                    "4": "param_4_masked",
                    "2": "positive_input4"
                },
                "uVar5": {
                    "1": "masked_operand2",
                    "4": "param_2_masked",
                    "2": "positive_input2"
                },
                "uVar3": {
                    "4": "flag",
                    "1": "bitwise_result",
                    "3": "condition",
                    "2": "shifted_bits"
                },
                "iVar1": {
                    "1": "temp_var_1",
                    "25": "difference"
                },
                "uVar6": {
                    "3": "temp_result",
                    "1": "combined_result",
                    "2": "result2",
                    "18": "result"
                },
                "uVar2": {
                    "1": "filtered_input4_negative",
                    "2": "result1",
                    "3": "result_upper",
                    "5": "upper_bits"
                },
                "FUN_0800015c": {
                    "1": "handle_overflow_case",
                    "2": "handle_overflow"
                },
                "FUN_080059f0": {
                    "1": "perform_operation",
                    "2": "handle_special_case"
                },
                "FUN_0800071c": {
                    "1": "calculate_something_1",
                    "2": "do_something"
                },
                "FUNC_08005d0c": {
                    "1": "perform_operation"
                },
                "FUN_08000158": {
                    "2": "combine_values",
                    "1": "calculate_result"
                },
                "SCARRY4": {
                    "1": "check_integer_overflow"
                },
                "uVar1": {
                    "1": "lower_result"
                },
                "F1_FUN_0800015c": {
                    "1": "handle_invalid_inputs"
                },
                "F2_FUN_080059f0": {
                    "1": "handle_special_case"
                },
                "F3_FUN_0800071c": {
                    "1": "some_calculation"
                },
                "F4_Func_08005d0c": {
                    "1": "perform_some_action"
                },
                "F5_FUN_08000158": {
                    "1": "calculate_new_value"
                }
            }
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculate_result_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result1;\n  uint flag;\n  uint modified_input4;\n  uint modified_input2;\n  undefined8 result;\n  \n  modified_input4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (modified_input4 | (-input3 | input3) >> 0x1f)) ||\n     (modified_input2 = input2 & 0x7fffffff, 0x7ff00000 < (modified_input2 | (-input1 | input1) >> 0x1f))) {\n    modified_input4 = FUN_0800015c(input3,input4,input1,input2);\n    return modified_input4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    modified_input4 = FUN_080059f0();\n    return modified_input4;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((modified_input2 | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((modified_input4 | input3) != 0) {\n    if (modified_input4 == 0x7ff00000) {\n      if (modified_input2 == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (modified_input2 != 0x7ff00000) {\n      difference = (int)(modified_input2 - modified_input4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = FUN_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result1 = (undefined4)((ulonglong)result >> 0x20);\n      modified_input4 = (uint)result;\n      if (flag == 1) {\n        return modified_input4;\n      }\n      if (flag == 2) {\n        result = FUN_08000158(modified_input4,result1,0x33145c07,0x3ca1a626);\n        modified_input4 = FUN_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return modified_input4;\n      }\n      if (flag != 0) {\n        result = FUN_08000158(modified_input4,result1,0x33145c07,0x3ca1a626);\n        modified_input4 = FUN_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return modified_input4;\n      }\n      return modified_input4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "result1",
                "uVar3": "flag",
                "uVar4": "modified_input4",
                "uVar5": "modified_input2",
                "uVar6": "result",
                "FUN_08005838": "calculate_result_08005838"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "6": "input_1",
                    "1": "input_param_1",
                    "2": "num1",
                    "21": "input1"
                },
                "param_2": {
                    "21": "input2",
                    "1": "input_param_2",
                    "2": "num2",
                    "6": "input_2"
                },
                "param_3": {
                    "6": "input_3",
                    "1": "number3",
                    "21": "input3",
                    "2": "num3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "6": "input_4",
                    "2": "num4",
                    "21": "input4"
                },
                "iVar1": {
                    "1": "temp_var_1",
                    "2": "temp_var1",
                    "22": "difference"
                },
                "uVar2": {
                    "1": "result_high_bits",
                    "2": "result",
                    "4": "result_upper",
                    "5": "result1"
                },
                "uVar3": {
                    "5": "flag",
                    "2": "result_flag",
                    "1": "shifted_bits"
                },
                "uVar4": {
                    "3": "modified_input4",
                    "2": "positive_input_4",
                    "1": "positive_param4"
                },
                "uVar5": {
                    "1": "masked_num2",
                    "2": "result4",
                    "3": "modified_input2"
                },
                "uVar6": {
                    "1": "result_part2",
                    "2": "temp_var6",
                    "17": "result"
                },
                "FUN_08005838": {
                    "1": "calculate_return_value",
                    "2": "process_numbers",
                    "14": "calculate_result"
                },
                "FUN_0800015c": {
                    "1": "calculate_result_2"
                },
                "FUN_080059f0": {
                    "2": "handle_special_case",
                    "1": "special_case"
                },
                "FUN_0800071c": {
                    "1": "calculate_func_c"
                },
                "FUN_08000158": {
                    "1": "perform_operation"
                },
                "FUNC_08005d0c": {
                    "1": "perform_computations"
                }
            }
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculate_result_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint temp1;\n  int temp2;\n  undefined8 temp_result;\n  undefined8 final_result;\n  \n  final_result = CONCAT44(input2,input1);\n  temp1 = input2 & 0x7fffffff;\n  if (temp1 < 0x44100000) {\n    if (temp1 < 0x3fdc0000) {\n      if (temp1 < 0x3e200000) {\n        temp_result = FUN_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        temp2 = FUN_080009e8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (temp2 != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      temp2 = -1;\n    }\n    else {\n      final_result = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)final_result >> 0x20);\n      result1 = (undefined4)final_result;\n      if (temp1 < 0x3ff30000) {\n        if (temp1 < 0x3fe60000) {\n          final_result = FUN_0800015c(result1,result4,result1,result4);\n          final_result = FUN_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          temp_result = FUN_0800015c(result1,result4,0,0x40000000);\n          final_result = FUN_0800071c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                                (int)((ulonglong)temp_result >> 0x20));\n          temp2 = 0;\n        }\n        else {\n          final_result = FUN_08000158(result1,result4,0,0x3ff00000);\n          temp_result = FUN_0800015c(result1,result4,0,0x3ff00000);\n          final_result = FUN_0800071c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                                (int)((ulonglong)temp_result >> 0x20));\n          temp2 = 1;\n        }\n      }\n      else if (temp1 < 0x40038000) {\n        final_result = FUN_08000158(result1,result4,0,0x3ff80000);\n        temp_result = FUN_080004c8(result1,result4,0,0x3ff80000);\n        temp_result = FUN_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        final_result = FUN_0800071c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                              (int)((ulonglong)temp_result >> 0x20));\n        temp2 = 2;\n      }\n      else {\n        final_result = FUN_0800071c(0,0xbff00000,result1,result4);\n        temp2 = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)final_result >> 0x20);\n    result5 = (undefined4)final_result;\n    final_result = FUN_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)final_result >> 0x20);\n    result1 = (undefined4)final_result;\n    final_result = FUN_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)final_result >> 0x20);\n    result4 = (undefined4)final_result;\n    final_result = FUN_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result1,result2);\n    temp_result = FUN_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)final_result >> 0x20);\n    if (temp2 == -1) {\n      final_result = FUN_08000158(result5,result6,(int)final_result,result1);\n      return final_result;\n    }\n    temp2 = temp2 * 8;\n    final_result = FUN_08000158((int)final_result,result1,*(undefined4 *)(&UNK_08009ee8 + temp2),\n                          *(undefined4 *)(&UNK_08009eec + temp2));\n    final_result = FUN_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    final_result = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + temp2),\n                          *(undefined4 *)(&UNK_08009ecc + temp2),(int)final_result,\n                          (int)((ulonglong)final_result >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n    }\n  }\n  else {\n    if ((temp1 < 0x7ff00001) && ((temp1 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    final_result = FUN_0800015c(input1,input2,input1,input2,input4);\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "temp1",
                "iVar8": "temp2",
                "uVar9": "temp_result",
                "uVar10": "final_result"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080059f0": {
                    "2": "calculate_value",
                    "3": "perform_calculation",
                    "19": "calculate_result"
                },
                "param_1": {
                    "5": "input_1",
                    "1": "input_parameter_1",
                    "2": "input_param_1",
                    "3": "input_value1",
                    "14": "input1"
                },
                "param_2": {
                    "1": "input_parameter_2",
                    "14": "input2",
                    "3": "value2",
                    "2": "input_param_2",
                    "5": "input_2"
                },
                "param_3": {
                    "3": "value3",
                    "2": "input_param_3",
                    "6": "constant1",
                    "1": "extra_param_1",
                    "8": "input3"
                },
                "param_4": {
                    "2": "input_param_4",
                    "1": "extra_param_2",
                    "3": "value4",
                    "8": "input4",
                    "6": "constant2"
                },
                "uVar1": {
                    "1": "var1",
                    "6": "temp1",
                    "16": "result1",
                    "5": "result_1",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "temp_var2",
                    "16": "result2",
                    "6": "temp2",
                    "5": "result_2"
                },
                "uVar3": {
                    "1": "temporary_var_3",
                    "2": "temp_var3",
                    "16": "result3",
                    "5": "result_3",
                    "6": "temp3"
                },
                "uVar4": {
                    "5": "result_4",
                    "1": "temporary_var_4",
                    "16": "result4",
                    "2": "temp_var4",
                    "6": "temp4"
                },
                "uVar5": {
                    "6": "temp5",
                    "2": "temp_var5",
                    "1": "var5",
                    "16": "result5",
                    "5": "result_5"
                },
                "uVar6": {
                    "1": "temporary_var_6",
                    "6": "temp6",
                    "16": "result6",
                    "2": "temp_var6",
                    "5": "result_6"
                },
                "uVar7": {
                    "1": "temp7",
                    "2": "unsigned_input_2",
                    "4": "abs_input2",
                    "5": "temp1"
                },
                "iVar8": {
                    "1": "calculation_type",
                    "2": "temp_var2",
                    "5": "temp2",
                    "3": "result"
                },
                "uVar9": {
                    "7": "temp_result",
                    "2": "result1",
                    "1": "result_var1",
                    "3": "temp3"
                },
                "uVar10": {
                    "1": "result",
                    "2": "result2",
                    "8": "final_result",
                    "3": "temp4"
                },
                "FUNC_08005d0c": {
                    "1": "get_function_pointer"
                },
                "FUN_080009e8": {
                    "1": "check_return_value"
                },
                "FUN_0800015c": {
                    "1": "calculate_intermediate1"
                },
                "FUN_080004c8": {
                    "1": "calculate_intermediate2"
                },
                "FUN_0800071c": {
                    "1": "calculate_intermediate3"
                },
                "FUN_08000158": {
                    "1": "calculate_intermediate4"
                },
                "uCvar8": {
                    "1": "result"
                }
            }
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_data_08005d14",
            "code": "\nundefined4 get_data_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_data_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005d14": {
                    "4": "get_global_variable",
                    "1": "get_constant_value",
                    "2": "get_dat_value",
                    "3": "get_data_value",
                    "15": "get_data"
                },
                "DAT_2000001c": {
                    "12": "data",
                    "1": "data_offset",
                    "4": "global_variable",
                    "2": "global_value"
                }
            }
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_sub_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid execute_sub_functions_08005d20(void)\n\n{\n  int counter;\n  code **function_pointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  function_pointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_sub_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "function_pointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005d20": {
                    "3": "execute_subfunctions",
                    "1": "execute_multiple_functions",
                    "21": "execute_sub_functions",
                    "2": "execute_functions"
                },
                "iVar1": {
                    "1": "sub_function_counter",
                    "2": "iteration_counter",
                    "17": "counter",
                    "7": "iteration_count"
                },
                "ppcVar2": {
                    "1": "function_list",
                    "4": "function_pointers",
                    "8": "function_pointer",
                    "6": "function_pointer_array",
                    "2": "function_array"
                },
                "FUNC_08009e68": {
                    "1": "init_function",
                    "11": "initialize"
                },
                "FUNC_080078a0": {
                    "1": "function_a",
                    "4": "sub_function1"
                },
                "FUN_08000134": {
                    "1": "execute_operation",
                    "4": "sub_function2"
                },
                "ppcvar2": {
                    "1": "function_pointers"
                }
            }
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_08005d68",
            "code": "\nvoid fill_memory_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  uint remaining_size;\n  undefined4 pattern;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = pattern;\n        dest_ptr[-3] = pattern;\n        dest_ptr[-2] = pattern;\n        dest_ptr[-1] = pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while ((undefined4 *)(size + (int)dest) != next_dest_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "remaining_size",
                "uVar4": "pattern",
                "bVar5": "is_zero",
                "LAB_08005de4": "end_loop"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005d68": {
                    "4": "memset_with_value",
                    "1": "fill_with_pattern",
                    "5": "memset",
                    "3": "fill_buffer_with_byte",
                    "2": "fill_memory_with_byte"
                },
                "param_1": {
                    "1": "array",
                    "8": "destination",
                    "12": "dest",
                    "9": "buffer"
                },
                "param_2": {
                    "1": "byte_to_fill",
                    "25": "value",
                    "2": "pattern"
                },
                "param_3": {
                    "1": "bytes",
                    "4": "count",
                    "17": "size",
                    "8": "length"
                },
                "puVar1": {
                    "1": "dst_ptr",
                    "2": "current",
                    "4": "ptr",
                    "19": "dest_ptr"
                },
                "puVar2": {
                    "3": "next",
                    "1": "next_dst_ptr",
                    "8": "next_dest_ptr",
                    "4": "temp_ptr",
                    "2": "ptr2"
                },
                "uVar3": {
                    "1": "updated_count",
                    "5": "remaining",
                    "3": "remaining_bytes",
                    "15": "remaining_size",
                    "6": "remaining_length"
                },
                "uVar4": {
                    "2": "packed_value",
                    "1": "block_value",
                    "4": "value_concat",
                    "3": "value32",
                    "6": "pattern"
                },
                "bVar5": {
                    "1": "is_empty",
                    "4": "is_remaining_size_zero",
                    "2": "is_remaining_zero",
                    "5": "is_size_zero",
                    "9": "is_zero"
                },
                "LAB_08005de4": {
                    "1": "end_loop"
                }
            }
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "clear_memory_08005dfc",
            "code": "\nvoid clear_memory_08005dfc(pointer *data_pointer,pointer4 size,pointer4 param3,pointer4 param4)\n\n{\n  pointer *local_array [2];\n  pointer4 local_var1;\n  pointer4 local_var2;\n  pointer *local_pointer;\n  pointer4 max_size;\n  pointer4 param3_copy;\n  pointer4 param4_copy;\n  \n  max_size = 0x7fffffff;\n  local_var1 = 0x7fffffff;\n  local_var2 = 0xffff0208;\n  local_array[0] = data_pointer;\n  local_pointer = data_pointer;\n  param3_copy = param3;\n  param4_copy = param4;\n  FUNC_08005e9c(DAT_2000001c,local_array,size,&param3_copy);\n  *local_array[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "clear_memory_08005dfc",
                "param_1": "data_pointer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "local_array",
                "local_78": "local_var1",
                "uStack_74": "local_var2",
                "local_70": "local_pointer",
                "local_6c": "max_size",
                "uStack_8": "param3_copy",
                "uStack_4": "param4_copy",
                "local_8": "unused_variable1",
                "undefined": "pointer"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005dfc": {
                    "1": "clear_and_terminate",
                    "4": "clear_local_variable",
                    "10": "clear_memory",
                    "2": "initialize_function",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "buffer",
                    "7": "data_pointer",
                    "6": "input_array"
                },
                "param_2": {
                    "3": "param2",
                    "1": "param_2",
                    "2": "size_of_array",
                    "7": "value1",
                    "12": "size"
                },
                "param_3": {
                    "2": "param_3",
                    "1": "param",
                    "8": "param3",
                    "5": "value1",
                    "7": "value2"
                },
                "param_4": {
                    "1": "pointer",
                    "8": "param4",
                    "2": "param_4",
                    "7": "value3",
                    "5": "value2"
                },
                "local_80": {
                    "1": "local_array1",
                    "15": "local_array",
                    "2": "buffer",
                    "3": "buffer_array"
                },
                "local_78": {
                    "2": "max_value1",
                    "1": "variable1",
                    "5": "local_variable1",
                    "3": "local_value1",
                    "8": "local_var1"
                },
                "uStack_74": {
                    "5": "local_var2",
                    "1": "variable2",
                    "3": "constant_value"
                },
                "local_70": {
                    "1": "memory_copy",
                    "2": "local_var3",
                    "6": "local_pointer"
                },
                "local_6c": {
                    "1": "variable3",
                    "2": "local_var4",
                    "5": "max_size",
                    "3": "local_var3"
                },
                "uStack_8": {
                    "1": "value_ptr",
                    "4": "param_3_copy",
                    "5": "param3_copy",
                    "3": "local_var5"
                },
                "uStack_4": {
                    "1": "param_four",
                    "4": "param4_copy",
                    "3": "local_var6"
                },
                "local_8": {
                    "1": "unused_variable1"
                },
                "local_4": {
                    "1": "unused_variable2"
                },
                "FUNC_08005e9c": {
                    "1": "some_function",
                    "3": "process_data"
                },
                "DAT_2000001c": {
                    "1": "some_data"
                },
                "undefined": {
                    "1": "pointer"
                }
            }
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "count_leading_zeros_08005e40",
            "code": "\nint count_leading_zeros_08005e40(uint input)\n\n{\n  int offset;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  offset = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    offset = offset + 4;\n  }\n  return offset + (0x1fU - leading_zero_count(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "count_leading_zeros_08005e40",
                "param_1": "input",
                "iVar1": "offset",
                "puVar2": "ptr",
                "uVar3": "value",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005e40": {
                    "1": "calculate_bits_set",
                    "6": "count_leading_zeros",
                    "3": "find_first_set_bit_index",
                    "2": "calculate_lz_count"
                },
                "param_1": {
                    "18": "input",
                    "1": "input_number",
                    "6": "input_value",
                    "2": "num"
                },
                "iVar1": {
                    "1": "num_bits_before_pattern",
                    "2": "leading_zeroes",
                    "8": "leading_zeros",
                    "12": "offset"
                },
                "puVar2": {
                    "1": "aligned_address",
                    "2": "p_u_int",
                    "19": "ptr"
                },
                "uVar3": {
                    "1": "current_u_int",
                    "4": "mask",
                    "2": "word_value",
                    "16": "value"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count",
                    "4": "leading_zero_count"
                }
            }
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_division_080078c0",
            "code": "\nuint calculate_division_080078c0(int dividend,int divisor)\n\n{\n  uint quotient;\n  uint *ptr1;\n  int carry;\n  int divisor_length;\n  int index;\n  uint quotient;\n  uint *divisor_ptr;\n  uint *ptr3;\n  uint *ptr4;\n  uint temp;\n  uint *ptr5;\n  uint *ptr6;\n  \n  divisor_length = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < divisor_length) {\n    return 0;\n  }\n  index = divisor_length + -1;\n  divisor_ptr = (uint *)(divisor + 0x14);\n  ptr3 = (uint *)(dividend + 0x14);\n  quotient = ptr3[index] / (divisor_ptr[index] + 1);\n  ptr4 = divisor_ptr + index;\n  if (quotient != 0) {\n    quotient = 0;\n    carry = 0;\n    ptr1 = ptr3;\n    ptr5 = divisor_ptr;\n    do {\n      ptr6 = ptr5 + 1;\n      quotient = quotient * (*ptr5 & 0xffff) + quotient;\n      temp = quotient * (*ptr5 >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*ptr1 & 0xffff);\n      carry = ((*ptr1 >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *ptr1 = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      ptr1 = ptr1 + 1;\n      ptr5 = ptr6;\n    } while (ptr6 <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + divisor_length + -2) && (ptr3[divisor_length + -2] == 0)) {\n        ptr1 = ptr3 + divisor_length + -3;\n        do {\n          index = index + -1;\n          if (ptr1 <= ptr3) break;\n          quotient = *ptr1;\n          ptr1 = ptr1 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  divisor_length = FUN_080094f8();\n  if (-1 < divisor_length) {\n    divisor_length = 0;\n    quotient = quotient + 1;\n    ptr1 = ptr3;\n    do {\n      ptr5 = divisor_ptr + 1;\n      quotient = (divisor_length - (*divisor_ptr & 0xffff)) + (*ptr1 & 0xffff);\n      divisor_length = ((*ptr1 >> 0x10) - (*divisor_ptr >> 0x10)) + ((int)quotient >> 0x10);\n      *ptr1 = quotient & 0xffff | divisor_length * 0x10000;\n      divisor_length = divisor_length >> 0x10;\n      ptr1 = ptr1 + 1;\n      divisor_ptr = ptr5;\n    } while (ptr5 <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + index + -1) && (ptr3[index + -1] == 0)) {\n        divisor_ptr = ptr3 + index + -2;\n        do {\n          index = index + -1;\n          if (divisor_ptr <= ptr3) break;\n          quotient = *divisor_ptr;\n          divisor_ptr = divisor_ptr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  return quotient;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "ptr1",
                "iVar3": "carry",
                "iVar4": "divisor_length",
                "iVar5": "index",
                "uVar6": "quotient",
                "puVar7": "divisor_ptr",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar10": "temp",
                "puVar11": "ptr5",
                "puVar12": "ptr6"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080078c0": {
                    "1": "rearrange_data",
                    "11": "calculate_division",
                    "2": "calculate_division_and_modify_array",
                    "6": "calculate_quotient"
                },
                "param_1": {
                    "2": "data1",
                    "1": "input_param",
                    "14": "dividend",
                    "3": "array1",
                    "4": "numerator"
                },
                "param_2": {
                    "2": "data2",
                    "1": "input_array_2",
                    "3": "array2",
                    "4": "denominator",
                    "14": "divisor"
                },
                "uVar1": {
                    "5": "temp1",
                    "2": "carry",
                    "8": "result",
                    "1": "temp_var1",
                    "13": "quotient"
                },
                "puVar2": {
                    "1": "input_pointer",
                    "5": "dividend_ptr",
                    "2": "ptr_dividend",
                    "4": "numerator_ptr",
                    "6": "ptr1"
                },
                "iVar3": {
                    "1": "carry_out",
                    "2": "temp2",
                    "21": "carry"
                },
                "iVar4": {
                    "1": "divisor_array_size",
                    "7": "divisor_length",
                    "2": "array1_length",
                    "6": "length"
                },
                "iVar5": {
                    "1": "current_index",
                    "2": "last_index",
                    "22": "index"
                },
                "uVar6": {
                    "1": "temp_quotient",
                    "2": "division_result",
                    "7": "result",
                    "17": "quotient"
                },
                "puVar7": {
                    "1": "divisor_iter",
                    "9": "divisor_ptr",
                    "2": "ptr_divisor",
                    "4": "denominator_ptr",
                    "7": "ptr2"
                },
                "puVar8": {
                    "1": "numerator_array",
                    "6": "ptr3",
                    "2": "dividend_array"
                },
                "puVar9": {
                    "1": "last_element_ptr",
                    "2": "ptr_data2_end",
                    "3": "divisor_end_ptr",
                    "5": "ptr4"
                },
                "uVar10": {
                    "2": "temp_result",
                    "1": "temp2",
                    "7": "temp",
                    "4": "carry2",
                    "5": "carry"
                },
                "puVar11": {
                    "1": "ptr2_iter",
                    "2": "temp_ptr1",
                    "4": "ptr5"
                },
                "puVar12": {
                    "1": "divisor_ptr4",
                    "4": "ptr6",
                    "2": "temp_ptr2"
                },
                "FUN_080094f8": {
                    "1": "check_divisor_zero"
                }
            }
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_float_to_string_080079e8",
            "code": "\nchar * convert_float_to_string_080079e8(int value,undefined4 precision,uint sign,uint exponent,uint precision,\n                   uint precision,int *output_length,uint *is_negative,char **output_string)\n\n{\n  bool is_infinity;\n  bool is_zero;\n  bool is_scientific;\n  char digit;\n  byte carry;\n  undefined4 result;\n  int i;\n  int digit_index;\n  int result;\n  char *result;\n  uint temp;\n  undefined4 temp1;\n  undefined4 temp2;\n  int temp;\n  int digit_count;\n  undefined4 temp3;\n  uint temp4;\n  uint exponent_value;\n  int shift;\n  char *digit_ptr;\n  char *decimal_part_ptr;\n  undefined4 *exponent_pos;\n  undefined4 temp6;\n  int temp;\n  bool is_negative;\n  undefined8 temp_value;\n  undefined8 temp8;\n  undefined8 temp9;\n  uint int_part_backup;\n  uint str_length;\n  uint exponent;\n  int leading_digits;\n  uint num_decimals;\n  int int_part_length;\n  int num_integral_digits;\n  uint leading_zeros;\n  uint iteration_sum;\n  uint temp;\n  uint temp_value1;\n  uint iteration_temp;\n  int i;\n  int temp_array [2];\n  \n  temp = *(int *)(value + 0x40);\n  if (temp != 0) {\n    exponent_value = *(uint *)(value + 0x44);\n    *(uint *)(temp + 4) = exponent_value;\n    *(int *)(temp + 8) = 1 << (exponent_value & 0xff);\n    FUN_0800910c(value,temp);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  is_negative = (int)exponent < 0;\n  exponent_value = exponent;\n  if (is_negative) {\n    exponent_value = exponent & 0x7fffffff;\n  }\n  *is_negative = (uint)is_negative;\n  str_length = exponent;\n  if (is_negative) {\n    str_length = exponent_value;\n  }\n  temp4 = str_length;\n  if ((~exponent_value & 0x7ff00000) == 0) {\n    *output_length = 9999;\n    if ((sign == 0) && ((exponent_value & 0xfffff) == 0)) {\n      result = \"Infinity\";\n      if (output_string == (char **)0x0) {\n        return result;\n      }\n      decimal_part_ptr = \"\";\n    }\n    else {\n      result = \"NaN\";\n      if (output_string == (char **)0x0) {\n        return result;\n      }\n      decimal_part_ptr = \"\";\n    }\n    *output_string = decimal_part_ptr;\n    return result;\n  }\n  temp_value = FUN_08000998(sign,str_length,0,0);\n  if ((int)temp_value != 0) {\n    *output_length = 1;\n    if (output_string != (char **)0x0) {\n      *output_string = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  result = FUN_08009630(value,(int)((ulonglong)temp_value >> 0x20),sign,str_length,temp_array,&i)\n  ;\n  temp = i;\n  if (exponent_value >> 0x14 == 0) {\n    shift = temp_array[0] + i;\n    digit_count = shift + 0x432;\n    if (digit_count < 0x21) {\n      exponent_value = sign << (0x20U - digit_count & 0xff);\n    }\n    else {\n      exponent_value = sign >> (shift + 0x412U & 0xff) | exponent_value << (0x40U - digit_count & 0xff);\n    }\n    temp_value = FUN_080003d4(exponent_value);\n    shift = shift + -1;\n    is_negative = true;\n    temp = (int)((ulonglong)temp_value >> 0x20) + 0xfe100000;\n    exponent_value = (uint)temp_value;\n  }\n  else {\n    shift = (exponent_value >> 0x14) - 0x3ff;\n    temp = str_length & 0xfffff | 0x3ff00000;\n    is_negative = false;\n    exponent_value = sign;\n  }\n  temp_value = FUN_08000158(exponent_value,temp,0,0x3ff80000);\n  temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x636f4361,0x3fd287a7);\n  temp_value = FUN_0800015c((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp8 = FUN_080003f4(shift);\n  temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x509f79fb,0x3fd34413);\n  temp_value = FUN_0800015c((int)temp_value,(int)((ulonglong)temp_value >> 0x20),(int)temp8,\n                        (int)((ulonglong)temp8 >> 0x20));\n  temp2 = (undefined4)((ulonglong)temp_value >> 0x20);\n  exponent = FUN_0800119c();\n  digit_count = FUN_080009ac((int)temp_value,temp2,0,0);\n  if (digit_count != 0) {\n    temp8 = FUN_080003f4(exponent);\n    digit_count = FUN_08000998((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp_value,temp2);\n    if (digit_count == 0) {\n      exponent = exponent - 1;\n    }\n  }\n  if (exponent < 0x17) {\n    digit_count = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + exponent * 8),\n                          *(undefined4 *)(&DAT_08009fac + exponent * 8),sign,str_length);\n    if (digit_count == 0) {\n      is_zero = false;\n    }\n    else {\n      exponent = exponent - 1;\n      is_zero = false;\n    }\n  }\n  else {\n    is_zero = true;\n  }\n  digit_count = (temp - shift) + -1;\n  if (digit_count < 0) {\n    leading_digits = 1 - (temp - shift);\n    digit_count = 0;\n  }\n  else {\n    leading_digits = 0;\n  }\n  if ((int)exponent < 0) {\n    leading_zeros = 0;\n    leading_digits = leading_digits - exponent;\n    num_integral_digits = -exponent;\n  }\n  else {\n    digit_count = digit_count + exponent;\n    leading_zeros = exponent;\n    num_integral_digits = 0;\n  }\n  if (9 < precision) {\n    temp_value1 = 0xffffffff;\n    is_infinity = true;\n    num_decimals = 0xffffffff;\n    is_scientific = true;\n    precision = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  is_infinity = (int)precision < 6;\n  if (!is_infinity) {\n    precision = precision - 4;\n  }\n  switch(precision) {\n  case 2:\n    is_scientific = false;\n    break;\n  case 3:\n    is_scientific = false;\n    goto LAB_08008300;\n  case 4:\n    is_scientific = true;\n    break;\n  case 5:\n    is_scientific = true;\nLAB_08008300:\n    temp_value1 = exponent + precision;\n    num_decimals = temp_value1 + 1;\n    exponent_value = num_decimals;\n    if ((int)num_decimals < 1) {\n      exponent_value = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    result = (char *)FUN_080090c0(value,0);\n    temp_value1 = 0xffffffff;\n    num_decimals = 0xffffffff;\n    precision = 0;\n    *(char **)(value + 0x40) = result;\n    is_scientific = true;\n    goto LAB_08007e36;\n  }\n  if ((int)precision < 1) {\n    temp_value1 = 1;\n    precision = 1;\n    num_decimals = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    temp = temp_value1;\n  }\n  else {\n    temp_value1 = precision;\n    num_decimals = precision;\n    exponent_value = precision;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    temp = num_decimals;\n    if (0x17 < (int)exponent_value) {\n      shift = 4;\n      temp = 1;\n      do {\n        i = temp;\n        shift = shift * 2;\n        temp = i + 1;\n      } while (shift + 0x14U <= exponent_value);\n      *(int *)(value + 0x44) = i;\n    }\n  }\n  result = (char *)FUN_080090c0(value);\n  *(char **)(value + 0x40) = result;\n  if ((temp < 0xf) && (is_infinity)) {\n    if ((int)exponent < 1) {\n      if (exponent == 0) {\n        temp = 2;\n        int_part_backup = sign;\n      }\n      else {\n        temp = (-exponent & 0xf) * 8;\n        temp_value = FUN_080004c8(sign,str_length,*(undefined4 *)(&DAT_08009fa8 + temp),\n                              *(undefined4 *)(&DAT_08009fac + temp));\n        str_length = (uint)((ulonglong)temp_value >> 0x20);\n        int_part_backup = (uint)temp_value;\n        shift = (int)-exponent >> 4;\n        if (shift == 0) {\n          temp = 2;\n        }\n        else {\n          is_infinity = false;\n          temp = 2;\n          exponent_pos = &DAT_08009f80;\n          do {\n            if (shift << 0x1f < 0) {\n              temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),*exponent_pos,exponent_pos[1]\n                                   );\n              is_infinity = true;\n              temp = temp + 1;\n            }\n            shift = shift >> 1;\n            exponent_pos = exponent_pos + 2;\n          } while (shift != 0);\n          if (is_infinity) {\n            int_part_backup = (uint)temp_value;\n            str_length = (uint)((ulonglong)temp_value >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      exponent_value = (int)exponent >> 4;\n      temp8 = *(undefined8 *)(&DAT_08009fa8 + (exponent & 0xf) * 8);\n      temp_value = *(undefined8 *)(&DAT_08009fa8 + (exponent & 0xf) * 8);\n      if ((int)(exponent_value << 0x1b) < 0) {\n        temp9 = FUN_0800071c(sign,str_length,0x7f73bf3c,0x75154fdd);\n        temp = (uint)((ulonglong)temp9 >> 0x20);\n        iteration_sum = (uint)temp9;\n        temp = 3;\n        exponent_value = exponent_value & 0xf;\n      }\n      else {\n        temp = 2;\n        temp = str_length;\n        iteration_sum = sign;\n      }\n      if (exponent_value != 0) {\n        exponent_pos = &DAT_08009f80;\n        do {\n          if ((int)(exponent_value << 0x1f) < 0) {\n            temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),*exponent_pos,exponent_pos[1]);\n            temp = temp + 1;\n          }\n          exponent_value = (int)exponent_value >> 1;\n          exponent_pos = exponent_pos + 2;\n          temp8 = temp_value;\n        } while (exponent_value != 0);\n      }\n      str_length = (uint)((ulonglong)temp8 >> 0x20);\n      int_part_backup = (uint)temp8;\n      temp_value = FUN_0800071c(iteration_sum,temp,int_part_backup,str_length);\n      int_part_backup = (uint)temp_value;\n      str_length = (uint)((ulonglong)temp_value >> 0x20);\n    }\n    temp_value = CONCAT44(str_length,int_part_backup);\n    if ((is_zero) && (shift = FUN_080009ac(int_part_backup,str_length,0,0x3ff00000), shift != 0)) {\n      if (num_decimals == 0) {\n        temp_value = FUN_080003f4(temp);\n        temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),int_part_backup,str_length);\n        temp_value = FUN_0800015c((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)temp_value;\n        temp = (int)((ulonglong)temp_value >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)temp_value1) {\n        temp_value = FUN_080004c8(int_part_backup,str_length,0,0x40240000);\n        temp8 = FUN_080003f4(temp + 1);\n        temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp_value,\n                              (int)((ulonglong)temp_value >> 0x20));\n        temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)temp8;\n        iteration_sum = temp_value1;\n        iteration_temp = exponent - 1;\n        temp = (int)((ulonglong)temp8 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp8 = FUN_080003f4(temp);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),int_part_backup,str_length);\n    temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x401c0000);\n    temp2 = (undefined4)temp8;\n    temp = (int)((ulonglong)temp8 >> 0x20) + -0x3400000;\n    if (num_decimals != 0) {\n      iteration_temp = exponent;\n      iteration_sum = num_decimals;\nLAB_08007cfa:\n      str_length = (uint)((ulonglong)temp_value >> 0x20);\n      int_part_backup = (uint)temp_value;\n      digit = FUN_0800119c(int_part_backup,str_length);\n      digit = digit + '0';\n      temp3 = (&DAT_08009fa0)[iteration_sum * 2];\n      temp1 = (&DAT_08009fa4)[iteration_sum * 2];\n      temp_value = FUN_080003f4();\n      temp_value = FUN_08000158(int_part_backup,str_length,(int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n      temp6 = (undefined4)((ulonglong)temp_value >> 0x20);\n      decimal_part_ptr = result + 1;\n      if (is_scientific) {\n        temp8 = FUN_0800071c(0,0x3fe00000,temp3,temp1);\n        temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp2,temp);\n        temp2 = (undefined4)((ulonglong)temp8 >> 0x20);\n        *result = digit;\n        temp = FUN_080009e8((int)temp8,temp2,(int)temp_value,temp6);\n        if (temp != 0) {\nLAB_08008784:\n          exponent = iteration_temp;\n          goto LAB_08008294;\n        }\n        temp9 = FUN_08000158(0,0x3ff00000,(int)temp_value,temp6);\n        temp = FUN_080009e8((int)temp8,temp2,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n        if (temp == 0) {\n          if (iteration_sum != 1) {\n            digit_ptr = decimal_part_ptr;\n            do {\n              temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x40240000);\n              temp2 = (undefined4)((ulonglong)temp8 >> 0x20);\n              temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0x40240000);\n              digit = FUN_0800119c();\n              temp9 = FUN_080003f4();\n              temp_value = FUN_08000158((int)temp_value,(int)((ulonglong)temp_value >> 0x20),(int)temp9,\n                                    (int)((ulonglong)temp9 >> 0x20));\n              temp3 = (undefined4)((ulonglong)temp_value >> 0x20);\n              digit = digit + '0';\n              decimal_part_ptr = digit_ptr + 1;\n              *digit_ptr = digit;\n              temp = FUN_080009ac((int)temp_value,temp3,(int)temp8,temp2);\n              if (temp != 0) {\n                exponent = iteration_temp;\n                goto LAB_08008294;\n              }\n              temp9 = FUN_08000158(0,0x3ff00000,(int)temp_value,temp3);\n              temp = FUN_080009ac((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,temp2)\n              ;\n              if (temp != 0) goto LAB_08008798;\n              digit_ptr = decimal_part_ptr;\n            } while (decimal_part_ptr != result + iteration_sum);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        exponent = iteration_temp;\n      }\n      else {\n        temp8 = FUN_080004c8(temp2,temp,temp3,temp1);\n        temp2 = (undefined4)((ulonglong)temp8 >> 0x20);\n        *result = digit;\n        if (iteration_sum != 1) {\n          digit_ptr = decimal_part_ptr;\n          do {\n            temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0x40240000);\n            digit = FUN_0800119c();\n            temp9 = FUN_080003f4();\n            temp_value = FUN_08000158((int)temp_value,(int)((ulonglong)temp_value >> 0x20),(int)temp9,\n                                  (int)((ulonglong)temp9 >> 0x20));\n            decimal_part_ptr = digit_ptr + 1;\n            *digit_ptr = digit + '0';\n            digit_ptr = decimal_part_ptr;\n          } while (decimal_part_ptr != result + iteration_sum);\n        }\n        temp3 = (undefined4)((ulonglong)temp_value >> 0x20);\n        temp9 = FUN_0800015c((int)temp8,temp2,0,0x3fe00000);\n        temp = FUN_080009ac((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp_value,temp3);\n        if (temp == 0) {\n          temp8 = FUN_08000158(0,0x3fe00000,(int)temp8,temp2);\n          temp = FUN_080009e8((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp_value,temp3);\n          digit_ptr = decimal_part_ptr;\n          if (temp == 0) goto LAB_08007e36;\n          do {\n            decimal_part_ptr = digit_ptr;\n            digit_ptr = decimal_part_ptr + -1;\n          } while (decimal_part_ptr[-1] == '0');\n          goto LAB_08008784;\n        }\n        exponent = iteration_temp;\n        digit = decimal_part_ptr[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    temp_value = FUN_08000158(int_part_backup,str_length,0,0x40140000);\n    temp3 = (undefined4)((ulonglong)temp_value >> 0x20);\n    shift = FUN_080009e8((int)temp_value,temp3,temp2,temp);\n    if (shift == 0) {\n      temp = FUN_080009ac((int)temp_value,temp3,temp2,temp + -0x80000000);\n      if (temp == 0) goto LAB_08007e36;\n      shift = 0;\n      temp = 0;\n      decimal_part_ptr = result;\n      goto LAB_080084f0;\n    }\n    digit_count = 0;\n    i = 0;\nLAB_08008406:\n    *result = '1';\n    exponent = exponent + 1;\n    decimal_part_ptr = result + 1;\n    shift = i;\n    temp = digit_count;\nLAB_08008416:\n    FUN_0800910c(value,temp);\n    if (shift == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    decimal_part_ptr = result;\n    if ((-1 < temp_array[0]) && ((int)exponent < 0xf)) {\n      temp2 = *(undefined4 *)(&DAT_08009fa8 + exponent * 8);\n      temp3 = *(undefined4 *)(&DAT_08009fac + exponent * 8);\n      if ((-1 < (int)precision) || (0 < (int)num_decimals)) {\n        FUN_0800071c(sign,temp4,temp2,temp3);\n        carry = FUN_0800119c();\n        temp_value = FUN_080003f4();\n        temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),temp2,temp3);\n        temp_value = FUN_08000158(sign,temp4,(int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n        *result = carry + 0x30;\n        decimal_part_ptr = result + 1;\n        if (num_decimals != 1) {\n          temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0x40240000);\n          temp = FUN_08000998((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0);\n          while (temp == 0) {\n            temp6 = (undefined4)((ulonglong)temp_value >> 0x20);\n            FUN_0800071c((int)temp_value,temp6,temp2,temp3);\n            carry = FUN_0800119c();\n            temp8 = FUN_080003f4();\n            temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp2,temp3);\n            temp_value = FUN_08000158((int)temp_value,temp6,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n            digit_ptr = decimal_part_ptr + 1;\n            *decimal_part_ptr = carry + 0x30;\n            decimal_part_ptr = digit_ptr;\n            if (num_decimals == (int)digit_ptr - (int)result) goto LAB_08007f3a;\n            temp_value = FUN_080004c8((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0x40240000);\n            temp = FUN_08000998((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        temp_value = FUN_0800015c((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n        temp6 = (undefined4)((ulonglong)temp_value >> 0x20);\n        temp = FUN_080009e8((int)temp_value,temp6,temp2,temp3);\n        if ((temp == 0) &&\n           ((temp = FUN_08000998((int)temp_value,temp6,temp2,temp3), temp == 0 ||\n            ((carry & 1) == 0)))) goto LAB_08008294;\n        digit = decimal_part_ptr[-1];\nLAB_08007f7c:\n        while (digit_ptr = decimal_part_ptr + -1, digit == '9') {\n          if (result == digit_ptr) {\n            *result = '0';\n            digit = decimal_part_ptr[-1];\n            exponent = exponent + 1;\n            digit_ptr = result;\n            break;\n          }\n          digit = decimal_part_ptr[-2];\n          decimal_part_ptr = digit_ptr;\n        }\n        *digit_ptr = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (num_decimals == 0) {\n        temp_value = FUN_080004c8(temp2,temp3,0,0x40140000);\n        result = FUN_080009d4((int)temp_value,(int)((ulonglong)temp_value >> 0x20),sign,temp4);\n        shift = 0;\n        digit_count = 0;\n        i = 0;\n        temp = 0;\n        if (result == 0) goto LAB_08008406;\n      }\n      else {\n        shift = 0;\n        temp = 0;\n      }\nLAB_080084f0:\n      exponent = ~precision;\n      result = decimal_part_ptr;\n      goto LAB_08008416;\n    }\n    temp = num_integral_digits;\n    if (is_scientific) {\n      if ((int)precision < 2) {\n        if (is_negative) {\n          int_part_length = leading_digits;\n          leading_digits = leading_digits + temp_array[0] + 0x433;\n          digit_count = digit_count + temp_array[0] + 0x433;\n        }\n        else {\n          int_part_length = leading_digits;\n          leading_digits = leading_digits + (0x36 - i);\n          digit_count = digit_count + (0x36 - i);\n        }\n      }\n      else {\n        shift = num_decimals - 1;\n        if (num_integral_digits < shift) {\n          leading_zeros = leading_zeros + (shift - num_integral_digits);\n          temp = 0;\n          num_integral_digits = shift;\n        }\n        else {\n          temp = num_integral_digits - shift;\n        }\n        if ((int)num_decimals < 0) {\n          int_part_length = leading_digits - num_decimals;\n        }\n        else {\n          digit_count = digit_count + num_decimals;\n          int_part_length = leading_digits;\n          leading_digits = leading_digits + num_decimals;\n        }\n      }\n      shift = FUN_08009244(value,1);\n    }\n    else {\n      int_part_length = leading_digits;\n      shift = 0;\n    }\n    if ((0 < int_part_length) && (0 < digit_count)) {\n      i = int_part_length;\n      if (digit_count <= int_part_length) {\n        i = digit_count;\n      }\n      digit_count = digit_count - i;\n      leading_digits = leading_digits - i;\n      int_part_length = int_part_length - i;\n    }\n    if (num_integral_digits != 0) {\n      if (is_scientific) {\n        temp2 = result;\n        if (temp != 0) {\n          shift = FUN_080093a4(value,shift,temp);\n          temp2 = FUN_08009258(value,shift,result);\n          FUN_0800910c(value,result);\n          result = temp2;\n          if (num_integral_digits - temp == 0) goto LAB_08008062;\n        }\n        result = FUN_080093a4(value,temp2,num_integral_digits - temp);\n      }\n      else {\n        result = FUN_080093a4(value,result,num_integral_digits);\n      }\n    }\nLAB_08008062:\n    temp = FUN_08009244(value,1);\n    if (leading_zeros == 0) {\n      if (((int)precision < 2) && (sign == 0)) {\nLAB_0800835a:\n        if ((temp4 & 0xfffff) == 0) {\n          temp4 = temp4 & 0x7ff00000;\n          if (temp4 != 0) {\n            digit_count = digit_count + 1;\n            leading_digits = leading_digits + 1;\n            temp4 = 1;\n          }\n        }\n        else {\n          temp4 = 0;\n        }\n        is_negative = leading_zeros != 0;\n        exponent_value = sign;\n        leading_zeros = temp4;\n        if (is_negative) goto LAB_080082d4;\n      }\n      i = 1;\n    }\n    else {\n      temp_value = FUN_080093a4(value,temp);\n      temp = (int)temp_value;\n      if (((int)precision < 2) && (sign == 0)) goto LAB_0800835a;\n      leading_zeros = 0;\n      exponent_value = (uint)((ulonglong)temp_value >> 0x20);\nLAB_080082d4:\n      i = FUN_080091a4(*(undefined4 *)(temp + *(int *)(temp + 0x10) * 4 + 0x10),exponent_value);\n      i = 0x20 - i;\n    }\n    exponent_value = i + digit_count & 0x1f;\n    if (exponent_value == 0) {\n      i = 0x1c;\nLAB_08008096:\n      digit_count = digit_count + i;\n      leading_digits = leading_digits + i;\n      int_part_length = int_part_length + i;\n    }\n    else {\n      if (4 < (int)(0x20 - exponent_value)) {\n        i = 0x1c - exponent_value;\n        goto LAB_08008096;\n      }\n      if (0x20 - exponent_value != 4) {\n        i = 0x3c - exponent_value;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < leading_digits) {\n      result = FUN_08009444(value,result,leading_digits);\n    }\n    if (0 < digit_count) {\n      temp = FUN_08009444(value,temp,digit_count);\n    }\n    digit_ptr = result;\n    if ((is_zero) && (digit_count = FUN_080094f8(result,temp), digit_count < 0)) {\n      exponent = exponent - 1;\n      result = FUN_08009120(value,result,10,0);\n      if (is_scientific) {\n        shift = FUN_08009120(value,shift,10,0);\n        if ((0 < (int)temp_value1) || ((int)precision < 3)) {\n          num_decimals = temp_value1;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)temp_value1) || ((int)precision < 3)) {\n        num_decimals = temp_value1;\n        goto LAB_0800820a;\n      }\n      num_decimals = temp_value1;\nLAB_080084e8:\n      if (num_decimals == 0) {\n        digit_count = FUN_08009120(value,temp,5);\n        result = FUN_080094f8(result,digit_count);\n        i = shift;\n        temp = digit_count;\n        if (0 < result) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)num_decimals < 1) && (2 < (int)precision)) goto LAB_080084e8;\n    if (is_scientific) {\nLAB_080080de:\n      int_part_backup = shift;\n      if (0 < int_part_length) {\n        int_part_backup = FUN_08009444(value,shift,int_part_length);\n      }\n      shift = int_part_backup;\n      if (leading_zeros != 0) {\n        shift = FUN_080090c0(value,*(undefined4 *)(int_part_backup + 4));\n        FUN_08001084(shift + 0xc,int_part_backup + 0xc,(*(int *)(int_part_backup + 0x10) + 2) * 4);\n        shift = FUN_08009444(value,shift,1);\n      }\nLAB_08008108:\n      digit_count = FUN_080078c0(result,temp);\n      i = FUN_080094f8(result,int_part_backup);\n      result = FUN_08009530(value,temp,shift);\n      temp = digit_count + 0x30;\n      if (*(int *)(result + 0xc) == 0) {\n        digit_index = FUN_080094f8(result);\n        FUN_0800910c(value,result);\n        if ((digit_index != 0) || (precision != 0)) goto LAB_0800815a;\n        if ((sign & 1) != 0) {\n          digit_index = 0;\n          goto LAB_0800815a;\n        }\n        if (temp != 0x39) {\n          if (0 < i) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        decimal_part_ptr = digit_ptr + 1;\n        digit = '9';\n        *digit_ptr = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(value,result);\n      digit_index = 1;\nLAB_0800815a:\n      if ((i < 0) || (((i == 0 && (precision == 0)) && ((sign & 1) == 0)))) {\n        if (0 < digit_index) {\n          result = FUN_08009444(value,result,1);\n          i = FUN_080094f8(result,temp);\n          if ((0 < i) || ((i == 0 && (digit_count << 0x1f < 0)))) {\n            if (temp == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            temp = digit_count + 0x31;\n          }\n        }\nLAB_080085a4:\n        decimal_part_ptr = digit_ptr + 1;\n        *digit_ptr = (char)temp;\n        goto LAB_08008274;\n      }\n      decimal_part_ptr = digit_ptr + 1;\n      if (0 < digit_index) {\n        if (temp == 0x39) goto LAB_08008752;\n        *digit_ptr = (char)digit_count + '1';\n        goto LAB_08008274;\n      }\n      *digit_ptr = (char)temp;\n      if (result + (num_decimals - 1) != digit_ptr) {\n        result = FUN_08009120(value,result,10,0);\n        digit_ptr = decimal_part_ptr;\n        if (int_part_backup == shift) {\n          int_part_backup = FUN_08009120(value,int_part_backup,10,0);\n          shift = int_part_backup;\n        }\n        else {\n          int_part_backup = FUN_08009120(value,int_part_backup,10,0);\n          shift = FUN_08009120(value,shift,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        temp = FUN_080078c0(result,temp);\n        temp = temp + 0x30;\n        decimal_part_ptr = digit_ptr + 1;\n        *digit_ptr = (char)temp;\n        if ((int)num_decimals <= (int)decimal_part_ptr - (int)result) break;\n        result = FUN_08009120(value,result,10,0);\n        digit_ptr = decimal_part_ptr;\n      }\n      int_part_backup = 0;\n    }\n    result = FUN_08009444(value,result,1);\n    digit_count = FUN_080094f8(result,temp);\n    digit = decimal_part_ptr[-1];\n    if ((0 < digit_count) || ((digit_count == 0 && (temp << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        digit_ptr = decimal_part_ptr + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (result == digit_ptr) {\n          *result = '1';\n          exponent = exponent + 1;\n          goto LAB_08008274;\n        }\n        digit = decimal_part_ptr[-2];\n        decimal_part_ptr = digit_ptr;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = decimal_part_ptr[-2];\n      decimal_part_ptr = decimal_part_ptr + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(value,temp);\n    if (shift == 0) goto LAB_08008294;\n    if ((int_part_backup != 0) && (int_part_backup != shift)) {\n      FUN_0800910c(value);\n    }\n  }\n  FUN_0800910c(value,shift);\nLAB_08008294:\n  FUN_0800910c(value,result);\n  *decimal_part_ptr = '\\0';\n  *output_length = exponent + 1;\n  if (output_string == (char **)0x0) {\n    return result;\n  }\n  *output_string = decimal_part_ptr;\n  return result;\ncode_r0x08008270:\n  *digit_ptr = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "param_1": "value",
                "param_2": "precision",
                "param_3": "sign",
                "param_4": "exponent",
                "param_5": "precision",
                "param_6": "precision",
                "param_7": "output_length",
                "param_8": "is_negative",
                "param_9": "output_string",
                "bVar1": "is_infinity",
                "bVar2": "is_zero",
                "bVar3": "is_scientific",
                "cVar4": "digit",
                "bVar5": "carry",
                "uVar6": "result",
                "iVar7": "i",
                "iVar8": "digit_index",
                "iVar9": "result",
                "pcVar10": "result",
                "uVar11": "temp",
                "uVar12": "temp1",
                "uVar13": "temp2",
                "iVar14": "temp",
                "iVar15": "digit_count",
                "iVar19": "shift",
                "pcVar20": "digit_ptr",
                "pcVar21": "decimal_part_ptr",
                "puVar22": "exponent_pos",
                "uVar23": "temp6",
                "uVar26": "temp_value",
                "uVar27": "temp8",
                "uVar28": "temp9",
                "local_80": "int_part_backup",
                "local_7c": "str_length",
                "local_74": "exponent",
                "local_70": "leading_digits",
                "local_68": "num_decimals",
                "local_60": "int_part_length",
                "local_5c": "num_integral_digits",
                "local_58": "leading_zeros",
                "local_48": "iteration_sum",
                "uStack_44": "temp",
                "local_38": "temp_value1",
                "local_34": "iteration_temp",
                "local_30": "i",
                "local_2c": "temp_array",
                "iVar24": "temp",
                "uVar16": "temp3",
                "uVar17": "temp4",
                "uVar18": "exponent_value",
                "bVar25": "is_negative"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080079e8": {
                    "1": "format_floating_point_number",
                    "2": "format_float",
                    "3": "convert_number_to_string",
                    "8": "convert_float_to_string"
                },
                "param_1": {
                    "6": "input",
                    "1": "input_data",
                    "11": "value",
                    "8": "number"
                },
                "param_2": {
                    "1": "integer_part",
                    "7": "precision",
                    "2": "flags",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "integer_part",
                    "9": "sign",
                    "2": "value",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "fraction",
                    "2": "flags",
                    "3": "param_4",
                    "11": "exponent"
                },
                "param_5": {
                    "1": "digits",
                    "4": "precision",
                    "3": "param_5",
                    "2": "min_width"
                },
                "param_6": {
                    "2": "rounding_mode",
                    "1": "min_decimal_digits",
                    "3": "width",
                    "4": "precision"
                },
                "param_7": {
                    "1": "output_array_size",
                    "2": "output_param1",
                    "5": "length"
                },
                "param_8": {
                    "1": "output_negative",
                    "2": "error_flag",
                    "9": "is_negative"
                },
                "param_9": {
                    "1": "output_str",
                    "2": "string_value",
                    "8": "output_string"
                },
                "bVar1": {
                    "1": "is_negative_precision",
                    "5": "is_negative",
                    "7": "is_infinity",
                    "4": "is_zero",
                    "3": "is_less_than6"
                },
                "bVar2": {
                    "1": "need_extra_digit",
                    "4": "is_zero"
                },
                "bVar3": {
                    "1": "exp_num_digits",
                    "2": "should_round",
                    "3": "is_negative"
                },
                "cVar4": {
                    "1": "char",
                    "14": "digit",
                    "5": "digit_char"
                },
                "bVar5": {
                    "1": "is_exponent_less_than_zero",
                    "11": "carry"
                },
                "uVar6": {
                    "1": "rounded_value",
                    "3": "result"
                },
                "iVar7": {
                    "1": "len_result",
                    "2": "iteration",
                    "3": "i"
                },
                "iVar8": {
                    "1": "result",
                    "2": "exponent_length",
                    "3": "digit_index"
                },
                "iVar9": {
                    "1": "integer_length",
                    "2": "comparison_result",
                    "3": "result"
                },
                "pcVar10": {
                    "1": "formatted_value_ptr",
                    "2": "output",
                    "4": "result"
                },
                "uVar11": {
                    "1": "exponent_flag",
                    "2": "temp"
                },
                "uVar12": {
                    "1": "temp3",
                    "2": "temp1"
                },
                "uVar13": {
                    "1": "temp4",
                    "2": "temp2"
                },
                "iVar14": {
                    "1": "adjusted_exponent",
                    "2": "buffer_index"
                },
                "iVar15": {
                    "1": "digit_length",
                    "2": "adjusted_exponent"
                },
                "iVar19": {
                    "1": "significant_digits",
                    "2": "exponent",
                    "3": "shift"
                },
                "pcVar20": {
                    "1": "digit_ptr"
                },
                "pcVar21": {
                    "1": "digit_ptr_next"
                },
                "puVar22": {
                    "1": "exponential_values_ptr"
                },
                "uVar23": {
                    "1": "temp3",
                    "2": "temp6"
                },
                "uVar26": {
                    "1": "temp_value_extended",
                    "2": "temp7"
                },
                "uVar27": {
                    "1": "temp14",
                    "2": "temp8"
                },
                "uVar28": {
                    "2": "temp9",
                    "1": "temp_value3"
                },
                "local_80": {
                    "1": "temp4"
                },
                "local_7c": {
                    "1": "rounded_value"
                },
                "local_74": {
                    "1": "local_variable3",
                    "5": "exponent",
                    "2": "num_digits"
                },
                "local_70": {
                    "1": "result",
                    "2": "digit_index"
                },
                "local_68": {
                    "1": "decimal_digits_value"
                },
                "local_60": {
                    "1": "fraction_part_digits_without_exponent"
                },
                "local_5c": {
                    "1": "local_variable7"
                },
                "local_58": {
                    "1": "num_non_zero_characters",
                    "3": "leading_zeros"
                },
                "local_48": {
                    "1": "local_variable9"
                },
                "uStack_44": {
                    "1": "local_temp_exp2",
                    "2": "temp"
                },
                "local_38": {
                    "1": "adjusted_exponent",
                    "2": "temp_value1"
                },
                "local_34": {
                    "1": "temp9"
                },
                "local_30": {
                    "1": "whole_digits_for_adjustment",
                    "2": "i"
                },
                "local_2c": {
                    "1": "digits",
                    "3": "temp_array"
                },
                "iVar24": {
                    "2": "char_value",
                    "1": "const_arg3",
                    "3": "num_digits"
                },
                "uVar16": {
                    "1": "hex_length",
                    "2": "temp3"
                },
                "uVar17": {
                    "1": "u_var17",
                    "2": "temp4"
                },
                "uVar18": {
                    "1": "temp_var4",
                    "3": "exponent_value",
                    "2": "absolute_exponent"
                },
                "iVar39": {
                    "1": "carry_over"
                },
                "bVar25": {
                    "3": "is_negative",
                    "2": "is_negative_exponent",
                    "1": "is_negative_fractional_part"
                },
                "F1": {
                    "1": "convert_to_decimal_string"
                },
                "iVar25": {
                    "1": "is_negative_without_sign_bit"
                },
                "uVar19": {
                    "2": "shift_amount",
                    "1": "number_of_digits"
                },
                "valueLength": {
                    "1": "value_length"
                },
                "FUN_0800910c": {
                    "1": "free_memory"
                },
                "FUN_08000998": {
                    "1": "is_in_range"
                },
                "FUN_08009630": {
                    "1": "calculate_decimal_length"
                },
                "FUN_080003d4": {
                    "1": "normalize_value"
                },
                "FUN_08000158": {
                    "1": "concatenate"
                },
                "FUN_080009ac": {
                    "1": "is_denormalized"
                },
                "FUN_080009e8": {
                    "1": "is_denormal_or_zero"
                },
                "FUN_0800124e": {
                    "1": "normalize_exponent"
                },
                "FUN_080012f4": {
                    "1": "normalize_sign"
                },
                "FUN_0800119c": {
                    "1": "calculate_offset"
                },
                "FUN_080090c0": {
                    "1": "allocate_memory"
                },
                "FUN_08001084": {
                    "1": "copy_memory"
                },
                "FUN_08009244": {
                    "1": "set_normalization_params"
                },
                "FUN_08009258": {
                    "1": "copy_integer"
                },
                "FUN_08000840": {
                    "1": "is_greater_than"
                },
                "FUN_08000270": {
                    "1": "is_less_than"
                },
                "FUN_08009120": {
                    "1": "multiply_by_ten"
                },
                "FUN_08009444": {
                    "1": "add_char"
                },
                "FUN_080011c8": {
                    "1": "is_exponent_zero"
                },
                "FUN_080078c0": {
                    "1": "get_ascii_value"
                },
                "FUN_0800071c": {
                    "1": "calculate_subtraction"
                },
                "FUN_080003f4": {
                    "1": "get_power_of_ten"
                },
                "FUN_080004c8": {
                    "1": "calculate_division"
                },
                "FUN_080094f8": {
                    "1": "get_length"
                },
                "FUN_08009530": {
                    "1": "format_string"
                },
                "local_2c [2]": {
                    "1": "buffer_index_range"
                },
                "floatValue == 0": {
                    "1": "is_zero"
                },
                "iVar29": {
                    "1": "half_digit"
                },
                "uVar80": {
                    "1": "inf"
                },
                "uVar90": {
                    "1": "na_n"
                },
                "iVar23": {
                    "1": "temp5"
                },
                "pbVar10": {
                    "1": "infinity_string"
                },
                "pbVar21": {
                    "1": "nan_string"
                }
            }
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "reverse_memory_allocation_0800884c",
            "code": "\nundefined4 reverse_memory_allocation_0800884c(undefined4 input_param,int offset)\n\n{\n  int result;\n  int result2;\n  uint masked_value;\n  \n  FUN_080090a8();\n  masked_value = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  result2 = ((0xfef - offset) + masked_value & 0xfffff000) - 0x1000;\n  if (0xfff < result2) {\n    result = FUN_08009744(input_param,0);\n    if (result == DAT_20000454 + masked_value) {\n      result = FUN_08009744(input_param,-result2);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - result2;\n        *(uint *)(DAT_20000454 + 4) = masked_value - result2 | 1;\n        FUN_080090b4(input_param);\n        return 1;\n      }\n      result2 = FUN_08009744(input_param,0);\n      if (0xf < result2 - DAT_20000454) {\n        DAT_20000a14 = result2 - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = result2 - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "input_param",
                "param_2": "offset",
                "iVar1": "result",
                "iVar2": "result2",
                "uVar3": "masked_value",
                "FUN_0800884c": "reverse_memory_allocation_0800884c"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "param1",
                    "1": "input_data",
                    "10": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "value",
                    "19": "offset",
                    "3": "size"
                },
                "iVar1": {
                    "1": "result_a",
                    "6": "result1",
                    "2": "result_1",
                    "20": "result"
                },
                "iVar2": {
                    "1": "aligned_address",
                    "3": "adjusted_offset",
                    "2": "new_address",
                    "6": "result2"
                },
                "uVar3": {
                    "1": "temp3",
                    "10": "masked_value",
                    "2": "adjusted_size"
                },
                "FUN_080090a8": {
                    "5": "initialize_resources",
                    "2": "initialize_data",
                    "1": "perform_initialization",
                    "3": "initialize_memory"
                },
                "DAT_20000454": {
                    "1": "data_offset",
                    "2": "base_address",
                    "3": "constant_1",
                    "4": "data_address"
                },
                "FUN_08009744": {
                    "1": "execute_operation",
                    "2": "modify_data",
                    "5": "allocate_memory"
                },
                "DAT_20000a14": {
                    "1": "updated_memory_address",
                    "3": "constant_2",
                    "2": "resource_offset"
                },
                "DAT_20000854": {
                    "1": "fixed_offset",
                    "3": "constant_3",
                    "2": "constant_value"
                },
                "FUN_080090b4": {
                    "1": "deinitialize_memory",
                    "3": "release_resources"
                },
                "FUN_0800884c": {
                    "1": "update_memory_region"
                }
            }
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "rearrange_memory_blocks_080088ec",
            "code": "\nvoid rearrange_memory_blocks_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *ptr1;\n  uint *ptr2;\n  undefined *ptr3;\n  uint size;\n  uint next_block_size;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined4 *ptr6;\n  int counter;\n  uint flag1;\n  uint flag2;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  flag1 = *(uint *)(param2 + -4);\n  ptr1 = (uint *)(param2 + -8);\n  size = flag1 & 0xfffffffe;\n  ptr2 = (uint *)((int)ptr1 + size);\n  next_block_size = ptr2[1] & 0xfffffffc;\n  if (DAT_20000454 == ptr2) {\n    size = size + next_block_size;\n    if ((flag1 & 1) == 0) {\n      ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n      next_block_size = ptr1[2];\n      flag1 = ptr1[3];\n      size = size + *(int *)(param2 + -8);\n      *(uint *)(next_block_size + 0xc) = flag1;\n      *(uint *)(flag1 + 8) = next_block_size;\n    }\n    next_block_size = DAT_20000858;\n    ptr1[1] = size | 1;\n    DAT_20000454 = ptr1;\n    if (next_block_size <= size) {\n      FUN_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(param1);\n    return;\n  }\n  ptr2[1] = next_block_size;\n  if ((flag1 & 1) == 0) {\n    ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n    ptr6 = (undefined4 *)ptr1[2];\n    size = size + *(int *)(param2 + -8);\n    flag1 = *(uint *)((int)ptr2 + next_block_size + 4) & 1;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      if (flag1 == 0) {\n        flag1 = ptr2[2];\n        flag2 = ptr2[3];\n        size = size + next_block_size;\n        *(uint *)(flag1 + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag1;\n        ptr1[1] = size | 1;\n        *(uint *)((int)ptr1 + size) = size;\n      }\n      else {\n        ptr1[1] = size | 1;\n        *ptr2 = size;\n      }\n      goto LAB_080089f0;\n    }\n    flag2 = ptr1[3];\n    ptr6[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = ptr6;\n  }\n  else {\n    flag1 = *(uint *)((int)ptr2 + next_block_size + 4) & 1;\n  }\n  if (flag1 == 0) {\n    ptr6 = (undefined4 *)ptr2[2];\n    size = size + next_block_size;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      DAT_2000045c = ptr1;\n      DAT_20000460 = ptr1;\n      ptr1[2] = (uint)&DAT_20000454;\n      ptr1[3] = (uint)&DAT_20000454;\n      ptr1[1] = size | 1;\n      *(uint *)((int)ptr1 + size) = size;\n      goto LAB_080089f0;\n    }\n    next_block_size = ptr2[3];\n    ptr6[3] = next_block_size;\n    *(undefined4 **)(next_block_size + 8) = ptr6;\n    ptr1[1] = size | 1;\n    *(uint *)((int)ptr1 + size) = size;\n  }\n  else {\n    ptr1[1] = size | 1;\n    *(uint *)((int)ptr1 + size) = size;\n  }\n  if (size < 0x200) {\n    counter = (size >> 3) + 1;\n    size = 1 << ((int)(size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    next_block_size = *(uint *)(&DAT_2000044c + counter * 8);\n    ptr1[2] = next_block_size;\n    ptr1[3] = (uint)(&DAT_20000444 + counter * 8);\n    DAT_20000450 = (undefined *)size;\n    *(uint **)(&DAT_2000044c + counter * 8) = ptr1;\n    *(uint **)(next_block_size + 0xc) = ptr1;\n    FUN_080090b4(param1,ptr1,size,param4);\n    return;\n  }\n  next_block_size = size >> 9;\n  if (next_block_size < 5) {\n    counter = ((size >> 6) + 0x39) * 8;\n    index = (size >> 6) + 0x38;\n  }\n  else if (next_block_size < 0x15) {\n    counter = (next_block_size + 0x5c) * 8;\n    index = next_block_size + 0x5b;\n  }\n  else if (next_block_size < 0x55) {\n    counter = ((size >> 0xc) + 0x6f) * 8;\n    index = (size >> 0xc) + 0x6e;\n  }\n  else if (next_block_size < 0x155) {\n    counter = ((size >> 0xf) + 0x78) * 8;\n    index = (size >> 0xf) + 0x77;\n  }\n  else if (next_block_size < 0x555) {\n    counter = ((size >> 0x12) + 0x7d) * 8;\n    index = (size >> 0x12) + 0x7c;\n  }\n  else {\n    counter = 0x3f8;\n    index = 0x7e;\n  }\n  ptr3 = *(undefined **)(&DAT_2000044c + counter);\n  ptr4 = &DAT_20000444 + counter;\n  if (ptr4 == ptr3) {\n    ptr3 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    ptr5 = ptr4;\n    DAT_20000450 = ptr3;\n  }\n  else {\n    do {\n      ptr5 = ptr3;\n      if ((*(uint *)(ptr3 + 4) & 0xfffffffc) <= size) break;\n      ptr3 = *(undefined **)(ptr3 + 8);\n      ptr5 = ptr4;\n    } while (ptr4 != ptr3);\n    ptr4 = *(undefined **)(ptr5 + 0xc);\n  }\n  ptr1[2] = (uint)ptr5;\n  ptr1[3] = (uint)ptr4;\n  *(uint **)(ptr4 + 8) = ptr1;\n  *(uint **)(ptr5 + 0xc) = ptr1;\n  FUN_080090b4(param1,ptr1,ptr3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "rearrange_memory_blocks_080088ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "size",
                "uVar6": "next_block_size",
                "puVar7": "ptr4",
                "puVar8": "ptr5",
                "puVar9": "ptr6",
                "iVar10": "counter",
                "uVar11": "flag1",
                "uVar12": "flag2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080088ec": {
                    "2": "rearrange_memory_blocks",
                    "1": "decompile_function"
                },
                "param_1": {
                    "1": "unknown_param",
                    "7": "arg1",
                    "2": "param_1",
                    "8": "param1",
                    "3": "input_param"
                },
                "param_2": {
                    "6": "param2",
                    "1": "array_param",
                    "2": "array_address",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "unknown_param_1",
                    "9": "param3",
                    "4": "param_3",
                    "7": "arg3",
                    "2": "input3"
                },
                "param_4": {
                    "9": "param4",
                    "1": "unused2",
                    "4": "param_4",
                    "7": "arg4",
                    "2": "input4"
                },
                "iVar1": {
                    "4": "index1",
                    "1": "temp_var1",
                    "17": "index"
                },
                "puVar2": {
                    "1": "pointer_var2",
                    "2": "current_pointer",
                    "3": "current_block",
                    "11": "ptr1",
                    "5": "pointer1"
                },
                "puVar3": {
                    "5": "pointer2",
                    "1": "pointer_var3",
                    "4": "next_block",
                    "11": "ptr2",
                    "2": "ptr_2"
                },
                "puVar4": {
                    "1": "temp_pointer",
                    "2": "temp_ptr1",
                    "11": "ptr3",
                    "5": "pointer3"
                },
                "uVar5": {
                    "1": "data_1",
                    "2": "value1",
                    "8": "size",
                    "3": "block_size"
                },
                "uVar6": {
                    "1": "variable3",
                    "3": "block_size",
                    "5": "next_block_size",
                    "2": "var2",
                    "4": "offset"
                },
                "puVar7": {
                    "5": "pointer4",
                    "1": "head_pointer",
                    "3": "temp_ptr2",
                    "2": "ptr_4",
                    "10": "ptr4"
                },
                "puVar8": {
                    "1": "temp_pointer2",
                    "2": "next_ptr",
                    "10": "ptr5",
                    "3": "temp_ptr3",
                    "5": "pointer5"
                },
                "puVar9": {
                    "1": "temp_pointer2",
                    "2": "ptr_6",
                    "3": "temp_ptr4",
                    "10": "ptr6",
                    "5": "pointer6"
                },
                "iVar10": {
                    "1": "num",
                    "2": "count",
                    "4": "index2",
                    "5": "counter"
                },
                "uVar11": {
                    "2": "flag",
                    "1": "header_flag",
                    "9": "flag1"
                },
                "uVar12": {
                    "1": "temp_size2",
                    "2": "var4",
                    "9": "flag2"
                },
                "DAT_20000454": {
                    "1": "first_block"
                },
                "DAT_20000858": {
                    "1": "limit"
                },
                "DAT_2000045c": {
                    "1": "linked_list_start"
                },
                "DAT_20000460": {
                    "1": "linked_list_end"
                },
                "DAT_20000a44": {
                    "1": "error_msg"
                },
                "DAT_20000450": {
                    "1": "block_bits"
                },
                "DAT_2000044c": {
                    "1": "head_array"
                },
                "DAT_20000444": {
                    "1": "tail_array"
                },
                "FUN_080090a8": {
                    "1": "initialize_memory_manager"
                },
                "FUN_0800884c": {
                    "1": "handle_allocation_error"
                },
                "FUN_080090b4": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "calculate_offset_08008ad4",
            "code": "\nint calculate_offset_08008ad4(void)\n\n{\n  int offset;\n  \n  offset = *(int *)(DAT_2000001c + 0x34);\n  if (offset == 0) {\n    offset = 0x2000085c;\n  }\n  return offset + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "calculate_offset_08008ad4",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008ad4": {
                    "1": "calculate_updated_value",
                    "2": "calculate_modified_value",
                    "11": "calculate_offset",
                    "3": "get_adjusted_value"
                },
                "iVar1": {
                    "1": "result",
                    "5": "value",
                    "11": "offset",
                    "2": "original_value",
                    "4": "current_value"
                },
                "0x2000085c": {
                    "13": "default_offset",
                    "1": "default_base_value",
                    "4": "default_value"
                },
                "0x34": {
                    "1": "offset_value",
                    "3": "offset"
                },
                "0xf0": {
                    "2": "offset",
                    "1": "additional_offset"
                },
                "* (int *)(DAT_2000001c + 0x34)": {
                    "1": "memory_value"
                },
                "+ 0xf0": {
                    "1": "offset"
                }
            }
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *input_array,uint size)\n\n{\n  undefined *ptr1;\n  uint var2;\n  uint var3;\n  int index;\n  undefined *ptr2;\n  uint var4;\n  uint var5;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result;\n  uint adjusted_size;\n  uint aligned_size;\n  int temp3;\n  undefined4 *ptr6;\n  undefined4 *ptr7;\n  \n  adjusted_size = size + 0xb;\n  if (adjusted_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    aligned_size = 0x10;\n    index = 0x18;\n    adjusted_size = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index);\n    if ((ptr5 != &DAT_20000444 + index) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index), &DAT_2000044c + index != ptr5)) {\n      index = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      adjusted_size = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      temp3 = *(int *)(ptr5 + 8);\n      *(int *)(temp3 + 0xc) = index;\n      *(int *)(index + 8) = temp3;\n      *(uint *)(ptr2 + 4) = adjusted_size | 1;\n      FUN_080090b4(input_array);\n      return (int *)(ptr5 + 8);\n    }\n    adjusted_size = adjusted_size + 2;\n  }\n  else {\n    aligned_size = adjusted_size & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_08008c7a:\n      *input_array = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (aligned_size < 0x1f8) {\n      adjusted_size = adjusted_size >> 3;\n      index = aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    var2 = adjusted_size >> 9;\n    if (var2 == 0) {\n      index = 0x200;\n      var4 = 0x40;\n      var2 = 0x3f;\n    }\n    else if (var2 < 5) {\n      var4 = (adjusted_size >> 6) + 0x39;\n      var2 = (adjusted_size >> 6) + 0x38;\n      index = var4 * 8;\n    }\n    else if (var2 < 0x15) {\n      var4 = var2 + 0x5c;\n      var2 = var2 + 0x5b;\n      index = var4 * 8;\n    }\n    else if (var2 < 0x55) {\n      var4 = (adjusted_size >> 0xc) + 0x6f;\n      var2 = (adjusted_size >> 0xc) + 0x6e;\n      index = var4 * 8;\n    }\n    else if (var2 < 0x155) {\n      var4 = (adjusted_size >> 0xf) + 0x78;\n      var2 = (adjusted_size >> 0xf) + 0x77;\n      index = var4 * 8;\n    }\n    else if (var2 < 0x555) {\n      var4 = (adjusted_size >> 0x12) + 0x7d;\n      var2 = (adjusted_size >> 0x12) + 0x7c;\n      index = var4 * 8;\n    }\n    else {\n      index = 0x3f8;\n      var4 = 0x7f;\n      var2 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index); adjusted_size = var4,\n        &DAT_20000444 + index != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      temp3 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - aligned_size;\n      adjusted_size = var2;\n      if (0xf < temp3) break;\n      if (-1 < temp3) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        adjusted_size = *(uint *)(ptr2 + 4);\n        index = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    var4 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    var2 = DAT_20000450;\n    if (var4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var4 = DAT_2000045c[1];\n    var5 = var4 & 0xfffffffc;\n    var2 = var5 - aligned_size;\n    if (0xf < (int)var2) {\n      ptr7 = (undefined4 *)(aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = aligned_size | 1;\n      DAT_2000045c = ptr7;\n      DAT_20000460 = ptr7;\n      ptr7[2] = &DAT_20000454;\n      ptr7[3] = &DAT_20000454;\n      ptr7[1] = var2 | 1;\n      *(uint *)((int)ptr6 + var5) = var2;\n      FUN_080090b4(input_array);\n      return ptr6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)var2) {\n      *(uint *)((int)ptr6 + var5 + 4) = *(uint *)((int)ptr6 + var5 + 4) | 1;\n      FUN_080090b4(input_array);\n      return ptr6 + 2;\n    }\n    if (var5 < 0x200) {\n      index = (var4 >> 3) + 1;\n      temp3 = *(int *)(&DAT_2000044c + index * 8);\n      var2 = 1 << ((int)(var4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr6[2] = temp3;\n      ptr6[3] = &DAT_20000444 + index * 8;\n      DAT_20000450 = var2;\n      *(undefined4 **)(&DAT_2000044c + index * 8) = ptr6;\n      *(undefined4 **)(temp3 + 0xc) = ptr6;\n    }\n    else {\n      var2 = var4 >> 9;\n      if (var2 < 5) {\n        index = ((var4 >> 6) + 0x39) * 8;\n        temp3 = (var4 >> 6) + 0x38;\n      }\n      else if (var2 < 0x15) {\n        index = (var2 + 0x5c) * 8;\n        temp3 = var2 + 0x5b;\n      }\n      else if (var2 < 0x55) {\n        index = ((var4 >> 0xc) + 0x6f) * 8;\n        temp3 = (var4 >> 0xc) + 0x6e;\n      }\n      else if (var2 < 0x155) {\n        index = ((var4 >> 0xf) + 0x78) * 8;\n        temp3 = (var4 >> 0xf) + 0x77;\n      }\n      else if (var2 < 0x555) {\n        index = ((var4 >> 0x12) + 0x7d) * 8;\n        temp3 = (var4 >> 0x12) + 0x7c;\n      }\n      else {\n        index = 0x3f8;\n        temp3 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index);\n      ptr2 = &DAT_20000444 + index;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (temp3 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= var5) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      var2 = DAT_20000450;\n      ptr6[2] = ptr5;\n      ptr6[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = ptr6;\n      *(undefined4 **)(ptr5 + 0xc) = ptr6;\n    }\n    var4 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    if (var4 <= var2) {\nLAB_08008c06:\n      if ((var4 & var2) == 0) {\n        adjusted_size = adjusted_size & 0xfffffffc;\n        do {\n          var4 = var4 << 1;\n          adjusted_size = adjusted_size + 4;\n        } while ((var4 & var2) == 0);\n      }\n      do {\n        ptr7 = (undefined4 *)(&DAT_2000044c + adjusted_size * 8);\n        var2 = adjusted_size;\n        ptr6 = ptr7;\n        do {\n          for (ptr3 = (undefined4 *)ptr6[3]; ptr6 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            var5 = ptr3[1] & 0xfffffffc;\n            var3 = var5 - aligned_size;\n            if (0xf < (int)var3) {\n              temp3 = ptr3[2];\n              index = ptr3[3];\n              ptr6 = (undefined4 *)(aligned_size + (int)ptr3);\n              ptr3[1] = aligned_size | 1;\n              *(int *)(temp3 + 0xc) = index;\n              *(int *)(index + 8) = temp3;\n              DAT_2000045c = ptr6;\n              DAT_20000460 = ptr6;\n              ptr6[2] = &DAT_20000454;\n              ptr6[3] = &DAT_20000454;\n              ptr6[1] = var3 | 1;\n              *(uint *)((int)ptr3 + var5) = var3;\n              FUN_080090b4(input_array);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)var3) {\n              index = ptr3[3];\n              temp3 = ptr3[2];\n              *(uint *)((int)ptr3 + var5 + 4) = *(uint *)((int)ptr3 + var5 + 4) | 1;\n              *(int *)(temp3 + 0xc) = index;\n              *(int *)(index + 8) = temp3;\n              FUN_080090b4(input_array);\n              return ptr3 + 2;\n            }\n          }\n          var2 = var2 + 1;\n          ptr6 = ptr6 + 2;\n        } while ((var2 & 3) != 0);\n        do {\n          var5 = adjusted_size & 3;\n          ptr6 = ptr7 + -2;\n          adjusted_size = adjusted_size - 1;\n          if (var5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var4;\n            break;\n          }\n          ptr7 = (undefined4 *)*ptr7;\n        } while (ptr7 == ptr6);\n        var4 = var4 * 2;\n        if ((DAT_20000450 <= var4 && var4 - DAT_20000450 != 0) || (adjusted_size = var2, var4 == 0))\n        break;\n        for (; (var4 & DAT_20000450) == 0; var4 = var4 << 1) {\n          adjusted_size = adjusted_size + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  adjusted_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((aligned_size <= adjusted_size) && (var2 = adjusted_size - aligned_size, 0xf < (int)var2)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    var2 = aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    var2 = aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)FUN_08009744(input_array,var2);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + adjusted_size;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + var2;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = adjusted_size + var2 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + var2;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      var4 = (uint)ptr2 & 7;\n      if (var4 == 0) {\n        index = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - var4);\n        index = 0x1008 - var4;\n      }\n      index = index - ((uint)(ptr2 + var2) & 0xfff);\n      temp3 = FUN_08009744(input_array,index);\n      if (temp3 == -1) {\n        var2 = 1;\n        index = 0;\n      }\n      else {\n        var2 = (temp3 - (int)ptr2) + index | 1;\n      }\n      ptr4 = DAT_20000a14 + index;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = var2;\n      if (ptr5 != &DAT_2000044c) {\n        if (adjusted_size < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        adjusted_size = adjusted_size - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | adjusted_size;\n        *(undefined4 *)(ptr5 + adjusted_size + 4) = 5;\n        *(undefined4 *)(ptr5 + adjusted_size + 8) = 5;\n        if (0xf < adjusted_size) {\n          FUN_080088ec(input_array,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  var2 = (adjusted_size & 0xfffffffc) - aligned_size;\n  if ((aligned_size <= (adjusted_size & 0xfffffffc)) && (0xf < (int)var2)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + aligned_size;\n    *(uint *)(DAT_20000454 + 4) = aligned_size | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = var2 | 1;\n    FUN_080090b4(input_array);\n    return result;\n  }\nLAB_08008eee:\n  FUN_080090b4(input_array);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_2": "size",
                "puVar1": "ptr1",
                "uVar2": "var2",
                "uVar3": "var3",
                "iVar4": "index",
                "puVar5": "ptr2",
                "uVar6": "var4",
                "uVar7": "var5",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "piVar11": "result",
                "uVar12": "adjusted_size",
                "uVar13": "aligned_size",
                "iVar14": "temp3",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "param_1": "input_array",
                "uVar8": "cond3",
                "uVar15": "mask"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008af8": {
                    "1": "reallocate_memory",
                    "11": "allocate_memory",
                    "7": "allocate_memory_block"
                },
                "*param_1": {
                    "1": "ptr"
                },
                "param_2": {
                    "3": "array_length",
                    "2": "param_size",
                    "1": "block_size",
                    "17": "size"
                },
                "puVar1": {
                    "1": "ptr_7",
                    "2": "p1",
                    "10": "ptr1",
                    "4": "pointer1"
                },
                "uVar2": {
                    "1": "offset",
                    "2": "block_size",
                    "4": "temp1",
                    "3": "temp_var1",
                    "5": "var2"
                },
                "uVar3": {
                    "5": "var3",
                    "1": "chunk_size",
                    "2": "var2",
                    "3": "count2",
                    "4": "temp2"
                },
                "iVar4": {
                    "2": "counter",
                    "1": "iterator1",
                    "4": "var4",
                    "7": "index"
                },
                "puVar5": {
                    "5": "pointer2",
                    "1": "ptr_2",
                    "2": "p2",
                    "3": "ptr1",
                    "10": "ptr2"
                },
                "uVar6": {
                    "1": "temp_count1",
                    "3": "temp3",
                    "2": "u3"
                },
                "uVar7": {
                    "2": "u4",
                    "1": "var_5",
                    "3": "temp4"
                },
                "puVar8": {
                    "2": "p3",
                    "1": "temp_pointer_2",
                    "10": "ptr3",
                    "5": "pointer3"
                },
                "puVar9": {
                    "5": "pointer4",
                    "2": "p4",
                    "1": "temp_ptr1",
                    "9": "ptr4"
                },
                "puVar10": {
                    "1": "temp_pointer_4",
                    "9": "ptr5",
                    "5": "pointer5",
                    "2": "p5"
                },
                "piVar11": {
                    "3": "return_pointer",
                    "1": "result_array",
                    "6": "result_ptr",
                    "16": "result",
                    "2": "result_pointer"
                },
                "uVar12": {
                    "1": "temp_length",
                    "2": "temp1",
                    "9": "adjusted_size"
                },
                "uVar13": {
                    "1": "adjusted_size2",
                    "2": "var13",
                    "7": "aligned_size"
                },
                "iVar14": {
                    "1": "offset",
                    "2": "temp3"
                },
                "puVar15": {
                    "1": "p7",
                    "2": "temp_ptr1",
                    "5": "ptr6"
                },
                "puVar16": {
                    "1": "ptr_temp_3",
                    "2": "ptr6",
                    "5": "ptr7"
                },
                "param_1": {
                    "2": "memory_ptr",
                    "1": "block_ptr",
                    "6": "input_array"
                },
                "FUN_080090a8": {
                    "1": "initialize_memory"
                },
                "FUN_080090b4": {
                    "1": "operation_a"
                },
                "FUN_080088ec": {
                    "1": "operation_b"
                },
                "FUN_08009744": {
                    "1": "allocate_memory"
                },
                "uVar8": {
                    "1": "cond3"
                },
                "uVar15": {
                    "1": "mask"
                },
                "uVar11": {
                    "1": "tail_size"
                },
                "uVar18": {
                    "1": "shift_count"
                },
                "p1": {
                    "1": "p1"
                },
                "p2": {
                    "1": "p2"
                }
            }
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_byte_sequence_0800901c",
            "code": "\nuint * find_byte_sequence_0800901c(uint *data,uint byte_to_find,uint length)\n\n{\n  uint xor_result;\n  uint combined_byte;\n  uint *current_byte;\n  uint masked_byte;\n  bool is_empty;\n  \n  masked_byte = byte_to_find & 0xff;\n  if (((uint)data & 3) == 0) {\nLAB_0800904a:\n    if (3 < length) {\n      combined_byte = (byte_to_find & 0xff) << 8 | masked_byte;\n      current_byte = data;\n      do {\n        xor_result = *current_byte ^ (combined_byte | combined_byte << 0x10);\n        data = current_byte + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto LAB_08009050;\n        length = length - 4;\n        current_byte = data;\n      } while (3 < length);\n    }\n    current_byte = data;\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      data = current_byte;\n      if (*(byte *)data != masked_byte) {\n        current_byte = (uint *)(length + (int)data);\n        do {\n          data = (uint *)((int)data + 1);\n          if (current_byte == data) goto LAB_0800906c;\n        } while (*(byte *)data != masked_byte);\n      }\n    }\n  }\n  else {\n    combined_byte = length - 1;\n    if (length == 0) {\nLAB_0800906c:\n      data = (uint *)0x0;\n    }\n    else if (*(byte *)data != masked_byte) {\n      current_byte = (uint *)((int)data + 1);\n      do {\n        data = current_byte;\n        length = combined_byte;\n        if (((uint)data & 3) == 0) goto LAB_0800904a;\n        is_empty = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_empty) goto LAB_0800906c;\n        current_byte = (uint *)((int)data + 1);\n      } while (*(byte *)data != masked_byte);\n    }\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "uVar1": "xor_result",
                "uVar2": "combined_byte",
                "puVar3": "current_byte",
                "uVar4": "masked_byte",
                "bVar5": "is_empty"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800901c": {
                    "1": "find_matching_byte",
                    "2": "find_first_byte",
                    "13": "find_byte_sequence",
                    "3": "find_first_occurrence"
                },
                "param_1": {
                    "2": "data_ptr",
                    "7": "buffer",
                    "4": "array",
                    "1": "array_ptr",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "byte_value",
                    "8": "byte_to_find",
                    "3": "byte",
                    "2": "byte_pattern",
                    "5": "pattern"
                },
                "param_3": {
                    "7": "array_length",
                    "1": "sequence_length",
                    "3": "data_length",
                    "2": "buffer_length",
                    "4": "size",
                    "11": "length"
                },
                "uVar1": {
                    "15": "xor_result",
                    "4": "temp",
                    "1": "elem",
                    "2": "result"
                },
                "uVar2": {
                    "1": "composite_value",
                    "3": "combined_pattern",
                    "2": "byte_sequence",
                    "4": "combined_byte"
                },
                "puVar3": {
                    "7": "current_element",
                    "1": "data_ptr_temp",
                    "2": "current_pointer",
                    "8": "current_byte"
                },
                "uVar4": {
                    "1": "byte_value",
                    "2": "masked_value",
                    "3": "first_byte",
                    "8": "masked_byte"
                },
                "bVar5": {
                    "1": "is_done",
                    "3": "is_end",
                    "2": "is_equal",
                    "5": "is_empty"
                }
            }
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initialize_data_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080090a8": {
                    "25": "initialize_data",
                    "3": "initialize_data_structure",
                    "1": "load_data_from_memory",
                    "2": "initialize_data_structures"
                },
                "FUNC_08008af0": {
                    "1": "perform_processing",
                    "28": "process_data"
                },
                "DAT_20000bfc": {
                    "1": "data_structure"
                }
            }
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initialize_data_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080090b4": {
                    "29": "initialize_data",
                    "2": "initialize_data_structure"
                },
                "FUNC_08008af4": {
                    "28": "process_data",
                    "3": "perform_initialization"
                }
            }
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "get_or_create_value_080090c0",
            "code": "\nundefined4 * get_or_create_value_080090c0(int data,uint index)\n\n{\n  undefined4 *value_ptr;\n  int entry_address;\n  \n  entry_address = *(int *)(data + 0x4c);\n  if (entry_address == 0) {\n    entry_address = FUN_08009980(data,4,0x21);\n    *(int *)(data + 0x4c) = entry_address;\n    if (entry_address == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  value_ptr = *(undefined4 **)(entry_address + index * 4);\n  if (value_ptr == (undefined4 *)0x0) {\n    entry_address = 1 << (index & 0xff);\n    value_ptr = (undefined4 *)FUN_08009980(data,1,(entry_address + 5) * 4);\n    if (value_ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    value_index = index;\n    bitmask = entry_address;\n  }\n  else {\n    *(undefined4 *)(entry_address + index * 4) = *value_ptr;\n  }\n  counter = 0;\n  flag = 0;\n  return value_ptr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "get_or_create_value_080090c0",
                "param_1": "data",
                "param_2": "index",
                "puVar1": "value_ptr",
                "iVar2": "entry_address",
                "puVar1[1]": "value_index",
                "puVar1[2]": "bitmask",
                "puVar1[3]": "counter",
                "puVar1[4]": "flag"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080090c0": {
                    "1": "find_or_create_data_value",
                    "2": "reverse_lookup",
                    "4": "find_or_create_entry",
                    "3": "retrieve_data"
                },
                "param_1": {
                    "1": "data_manager",
                    "3": "data",
                    "2": "entry"
                },
                "param_2": {
                    "1": "value_index",
                    "27": "index"
                },
                "puVar1": {
                    "1": "data_value_ptr",
                    "2": "entry",
                    "3": "data_ptr",
                    "4": "value_ptr"
                },
                "iVar2": {
                    "1": "item_list_size",
                    "2": "entry_index"
                },
                "FUN_08009980": {
                    "8": "allocate_memory",
                    "1": "create_lookup_table"
                },
                "param_3": {
                    "2": "size",
                    "1": "multiplier"
                },
                "puVar1[1]": {
                    "1": "record_entry_index"
                },
                "puVar1[2]": {
                    "1": "record_entry_value"
                },
                "puVar1[3]": {
                    "1": "counter"
                },
                "puVar1[4]": {
                    "1": "record_entry_unused2"
                },
                "param_2 (in FUN_08009980)": {
                    "1": "count"
                },
                "param_3 (in FUN_08009980)": {
                    "1": "allocation_size"
                },
                "iVar2 (in FUN_08009980)": {
                    "1": "allocated_memory"
                },
                "param_2 * 4": {
                    "1": "offset"
                },
                "iVar2 + param_2 * 4": {
                    "1": "record_entry_offset"
                }
            }
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "extract_data_0800910c",
            "code": "\nvoid extract_data_0800910c(int base_address,undefined4 *destination_pointer)\n\n{\n  int base_address;\n  \n  if (destination_pointer != (undefined4 *)0x0) {\n    base_address = *(int *)(base_address + 0x4c);\n    *destination_pointer = *(undefined4 *)(base_address + index * 4);\n    *(undefined4 **)(base_address + index * 4) = destination_pointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "extract_data_0800910c",
                "param_1": "base_address",
                "param_2": "destination_pointer",
                "iVar1": "base_address",
                "param_2[1]": "index"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800910c": {
                    "1": "copy_and_replace_value",
                    "3": "extract_data",
                    "2": "extract_value_and_move_pointer"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "source",
                    "6": "base_address",
                    "4": "source_address"
                },
                "param_2": {
                    "2": "output_pointer",
                    "1": "pointer_value",
                    "3": "destination_pointer"
                },
                "iVar1": {
                    "1": "source_offset",
                    "2": "temp_var",
                    "5": "data_offset",
                    "3": "array_address"
                },
                "param_2[1]": {
                    "3": "index"
                },
                "iVar1 + arg2[1] * 4": {
                    "1": "offset"
                },
                "*(int *)(param_1 + 0x4c)": {
                    "1": "data_offset"
                },
                "*param_2": {
                    "1": "output_value"
                },
                "*(undefined4 *)(iVar1 + param_2[1] * 4)": {
                    "1": "data_value"
                },
                "*(undefined4 **)(iVar1 + param_2[1] * 4)": {
                    "1": "ptr_to_output"
                },
                "*(undefined4 *)(offsetAddress + outputValue[1] * 4)": {
                    "1": "extracted_value"
                },
                "*(undefined4 *)(offset + outputParameter[1] * 4)": {
                    "1": "value_to_load"
                },
                "*(undefined4 **)(offset + outputParameter[1] * 4)": {
                    "1": "address_to_store"
                },
                "(undefined4 *)0x0": {
                    "1": "null_ptr"
                },
                "*(undefined4 *)(tempVar + arg2[1] * 4)": {
                    "1": "extracted_value"
                },
                "*param_2[1]": {
                    "1": "index"
                }
            }
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_checksum_08009120",
            "code": "\nundefined4 * calculate_checksum_08009120(int input,undefined4 *input_array,int multiplier,uint carry)\n\n{\n  undefined4 *result;\n  uint temp;\n  int array_size;\n  uint *current_element;\n  int counter;\n  \n  counter = 0;\n  array_size = input_array[4];\n  current_element = input_array + 5;\n  do {\n    counter = counter + 1;\n    carry = multiplier * (*current_element & 0xffff) + carry;\n    temp = multiplier * (*current_element >> 0x10) + (carry >> 0x10);\n    *current_element = (carry & 0xffff) + temp * 0x10000;\n    carry = temp >> 0x10;\n    current_element = current_element + 1;\n  } while (counter < array_size);\n  result = input_array;\n  if (carry != 0) {\n    if ((int)input_array[2] <= array_size) {\n      result = (undefined4 *)FUN_080090c0(input,input_array[1] + 1);\n      FUN_08001084(result + 3,input_array + 3,(input_array[4] + 2) * 4);\n      counter = *(int *)(input + 0x4c);\n      *input_array = *(undefined4 *)(counter + input_array[1] * 4);\n      *(undefined4 **)(counter + input_array[1] * 4) = input_array;\n    }\n    result[array_size + 5] = carry;\n    result[4] = array_size + 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "param_1": "input",
                "param_2": "input_array",
                "param_3": "multiplier",
                "param_4": "carry",
                "puVar1": "result",
                "uVar2": "temp",
                "iVar3": "array_size",
                "puVar4": "current_element",
                "iVar5": "counter"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009120": {
                    "1": "transform_array",
                    "2": "perform_calculation",
                    "15": "calculate_checksum"
                },
                "param_1": {
                    "8": "input",
                    "2": "input_length",
                    "1": "input_value1",
                    "3": "size",
                    "6": "input_size"
                },
                "param_2": {
                    "6": "data",
                    "2": "data_array",
                    "3": "array",
                    "1": "checksum",
                    "8": "input_array",
                    "4": "output"
                },
                "param_3": {
                    "31": "multiplier"
                },
                "param_4": {
                    "2": "initial_checksum",
                    "1": "result",
                    "12": "carry",
                    "4": "accumulator",
                    "11": "checksum"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "8": "result_array",
                    "17": "result"
                },
                "uVar2": {
                    "2": "temp_checksum",
                    "1": "carry_high",
                    "13": "temp",
                    "5": "carry"
                },
                "iVar3": {
                    "3": "size",
                    "1": "packet_size",
                    "5": "length",
                    "6": "array_size"
                },
                "puVar4": {
                    "1": "current_value",
                    "2": "data_pointer",
                    "11": "current_element",
                    "5": "ptr",
                    "3": "array_ptr"
                },
                "iVar5": {
                    "1": "iteration_count",
                    "4": "count",
                    "13": "counter",
                    "10": "index"
                },
                "FUN_08001084": {
                    "2": "copy_data"
                },
                "FUN_080090c0": {
                    "6": "allocate_memory"
                },
                "puvar1": {
                    "1": "result"
                },
                "FUNG_08009120": {
                    "1": "calculate_checksum"
                }
            }
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint count_leading_zeros_080091a4(uint input)\n\n{\n  int leading_zeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leading_zeros = 0x10;\n  }\n  else {\n    leading_zeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leading_zeros = leading_zeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leading_zeros = leading_zeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leading_zeros = leading_zeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leading_zeros + 1;\n    }\n    leading_zeros = 0x20;\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leading_zeros"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080091a4": {
                    "2": "count_leading_zeroes",
                    "27": "count_leading_zeros",
                    "1": "find_highest_bit"
                },
                "param_1": {
                    "13": "input",
                    "1": "input_number",
                    "7": "value",
                    "3": "num",
                    "6": "number"
                },
                "iVar1": {
                    "1": "result",
                    "19": "leading_zeros",
                    "8": "leading_zeros_count"
                },
                "0xffff0000": {
                    "1": "mask1"
                },
                "0xff000000": {
                    "1": "mask2"
                },
                "0xf0000000": {
                    "1": "mask3"
                },
                "0xc0000000": {
                    "1": "mask4"
                }
            }
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint count_leading_zeros_080091e4(uint *value)\n\n{\n  int leading_zeros;\n  uint value;\n  \n  value = *value;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leading_zeros = 0x10;\n    }\n    else {\n      leading_zeros = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leading_zeros = leading_zeros + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leading_zeros = leading_zeros + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leading_zeros = leading_zeros + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leading_zeros = leading_zeros + 1;\n    }\n    *value = value;\n    return leading_zeros;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *value = value >> 2;\n    return 2;\n  }\n  *value = value >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "value",
                "iVar1": "leading_zeros",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080091e4": {
                    "7": "count_trailing_zeros",
                    "1": "find_count_of_trailing_zeros",
                    "15": "count_leading_zeros",
                    "6": "find_highest_bit_position"
                },
                "param_1": {
                    "7": "value",
                    "1": "input_ptr",
                    "3": "num_ptr",
                    "5": "number"
                },
                "iVar1": {
                    "1": "result",
                    "4": "trailing_zeros_count",
                    "7": "bit_position",
                    "11": "leading_zeros",
                    "3": "leading_zeros_count"
                },
                "uVar2": {
                    "1": "temp_number",
                    "3": "num",
                    "15": "value"
                },
                "uVar2 & 7": {
                    "1": "num_bits_0_to_2"
                },
                "uVar2 & 0xffff": {
                    "1": "num_bits_0_to_15"
                },
                "uVar2 & 0xff": {
                    "1": "num_bits_0_to_7"
                },
                "uVar2 & 0xf": {
                    "1": "num_bits_0_to_3"
                },
                "uVar2 & 3": {
                    "1": "num_bits_0_to_1"
                }
            }
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_data_08009244",
            "code": "\nvoid initialize_data_08009244(undefined4 data,undefined4 value)\n\n{\n  int result;\n  \n  result = FUN_080090c0(data,1);\n  *(undefined4 *)(result + 0x10) = 1;\n  *(undefined4 *)(result + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009244": {
                    "1": "initialize_values",
                    "3": "set_variable_values",
                    "2": "set_flag_and_value",
                    "14": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "data",
                    "2": "data_pointer",
                    "3": "data_ptr",
                    "4": "input1"
                },
                "param_2": {
                    "4": "input2",
                    "3": "new_value",
                    "2": "input_2",
                    "1": "param",
                    "9": "value"
                },
                "iVar1": {
                    "1": "result_variable",
                    "22": "result",
                    "2": "result_pointer"
                },
                "FUN_080090c0": {
                    "1": "calculate_result",
                    "2": "get_pointer"
                },
                "FUI_080090c0": {
                    "1": "allocate_memory"
                }
            }
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_array_08009258",
            "code": "\nvoid initialize_array_08009258(undefined4 data,int input_array1,int input_array2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int count;\n  uint carry;\n  uint *ptr3;\n  uint start;\n  uint *ptr4;\n  uint temp2;\n  int size2;\n  int min_size;\n  uint end;\n  int size1;\n  int array1;\n  uint *pointer5;\n  uint *temp_pointer4;\n  uint *ptr3;\n  uint *ptr8;\n  uint *ptr9;\n  \n  size1 = *(int *)(input_array1 + 0x10);\n  size2 = *(int *)(input_array2 + 0x10);\n  min_size = size2;\n  array1 = input_array1;\n  if (size1 < size2) {\n    min_size = size1;\n    size1 = size2;\n    array1 = input_array2;\n    input_array2 = input_array1;\n  }\n  size2 = size1 + min_size;\n  count = *(int *)(array1 + 4);\n  if (*(int *)(array1 + 8) < size2) {\n    count = count + 1;\n  }\n  count = FUN_080090c0(data,count);\n  ptr9 = (uint *)(count + 0x14);\n  ptr8 = ptr9 + size2;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start = input_array2 + 0x14;\n  end = start + min_size * 4;\n  ptr3 = (uint *)(array1 + 0x14);\n  if (start < end) {\n    ptr4 = (uint *)(start + ((end - input_array2) - 0x15 & 0xfffffffc));\n    ptr3 = (uint *)(input_array2 + 0x10);\n    do {\n      while( true ) {\n        ptr3 = ptr3 + 1;\n        start = *ptr3 & 0xffff;\n        if (start != 0) break;\n        start = *ptr3 >> 0x10;\n        if (start == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr9;\n        carry = 0;\n        ptr1 = ptr3;\n        pointer5 = ptr9;\n        end = temp2;\n        do {\n          temp_pointer4 = pointer5;\n          carry = carry + start * *(ushort *)ptr1 + (end >> 0x10);\n          *temp_pointer4 = temp2 & 0xffff | carry * 0x10000;\n          ptr2 = ptr1 + 1;\n          end = temp_pointer4[1];\n          temp2 = start * (*ptr1 >> 0x10) + (end & 0xffff) + (carry >> 0x10);\n          carry = temp2 >> 0x10;\n          ptr1 = ptr2;\n          pointer5 = temp_pointer4 + 1;\n        } while (ptr2 < ptr3 + size1);\n        temp_pointer4[1] = temp2;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr3) goto LAB_0800937a;\n      }\n      end = 0;\n      ptr1 = ptr9;\n      pointer5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        temp_pointer4 = pointer5 + 1;\n        temp2 = start * (*pointer5 & 0xffff) + (*ptr2 & 0xffff) + end;\n        carry = start * (*pointer5 >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        end = carry >> 0x10;\n        *ptr2 = temp2 & 0xffff | carry * 0x10000;\n        ptr1 = ptr2 + 1;\n        pointer5 = temp_pointer4;\n      } while (temp_pointer4 < ptr3 + size1);\n      ptr2[1] = end;\n      start = *ptr3 >> 0x10;\n      if (start != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr3);\n  }\nLAB_0800937a:\n  if (0 < size2) {\n    start = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start == 0 && (size2 = size2 + -1, size2 != 0))) {\n      ptr8 = ptr8 + -1;\n      start = *ptr8;\n    }\n  }\n  *(int *)(count + 0x10) = size2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_array_08009258",
                "param_1": "data",
                "param_2": "input_array1",
                "param_3": "input_array2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "count",
                "uVar4": "carry",
                "puVar5": "ptr3",
                "uVar6": "start",
                "puVar7": "ptr4",
                "puVar16": "ptr3",
                "uVar8": "temp2",
                "iVar9": "size2",
                "iVar10": "min_size",
                "uVar11": "end",
                "iVar12": "size1",
                "iVar13": "array1",
                "puVar14": "pointer5",
                "puVar15": "temp_pointer4",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009258": {
                    "1": "optimize_function",
                    "5": "initialize_array",
                    "3": "initialize_arrays",
                    "2": "initialize_memory",
                    "4": "calculate_checksum"
                },
                "param_1": {
                    "5": "input",
                    "6": "param1",
                    "1": "input1",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "array_size1",
                    "2": "input_param_1",
                    "3": "array1"
                },
                "param_3": {
                    "1": "second_param",
                    "2": "size2",
                    "3": "input_array2"
                },
                "puVar1": {
                    "1": "array1_index",
                    "12": "ptr1",
                    "2": "dest_ptr",
                    "3": "pointer1"
                },
                "puVar2": {
                    "3": "pointer2",
                    "2": "src_ptr",
                    "1": "next_value_ptr",
                    "12": "ptr2"
                },
                "iVar3": {
                    "1": "variable1",
                    "2": "array_size1",
                    "3": "result"
                },
                "uVar4": {
                    "1": "variable2",
                    "2": "var2",
                    "5": "temp1",
                    "8": "carry",
                    "3": "temp_var1"
                },
                "puVar5": {
                    "1": "array1",
                    "2": "pointer3",
                    "7": "ptr3"
                },
                "uVar6": {
                    "1": "current_address",
                    "2": "offset",
                    "6": "start"
                },
                "puVar7": {
                    "1": "array2_ptr",
                    "7": "ptr4",
                    "2": "pointer4"
                },
                "puVar16": {
                    "1": "loop_pointer",
                    "2": "ptr5",
                    "4": "ptr3"
                },
                "uVar8": {
                    "2": "temp1",
                    "1": "temp_value3",
                    "3": "temp2"
                },
                "iVar9": {
                    "1": "min_array_size",
                    "4": "size2",
                    "2": "var1"
                },
                "iVar10": {
                    "2": "max_size",
                    "1": "temp_length",
                    "3": "min_size"
                },
                "uVar11": {
                    "1": "array_index",
                    "4": "end",
                    "2": "temp_var"
                },
                "iVar12": {
                    "1": "variable8",
                    "2": "max_value",
                    "4": "size1"
                },
                "iVar13": {
                    "1": "var13",
                    "2": "larger_array",
                    "4": "array1"
                },
                "puVar14": {
                    "1": "loop_var3",
                    "2": "ptr5"
                },
                "puVar15": {
                    "1": "next_array_ptr",
                    "2": "temp_pointer4"
                },
                "puVar17": {
                    "1": "end_array1",
                    "3": "ptr8",
                    "2": "result_array_end"
                },
                "puVar18": {
                    "1": "checksum_array",
                    "3": "ptr9",
                    "2": "result_array"
                },
                "<param_1>": {
                    "1": "<arg_param_1>"
                },
                "iVar14": {
                    "1": "array2"
                },
                "puVar8": {
                    "1": "ptr5"
                }
            }
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * process_data_080093a4(int input,undefined4 *output,uint size)\n\n{\n  int index;\n  int temp_var2;\n  undefined4 *temp_ptr1;\n  undefined4 *temp_ptr2;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              FUN_08009120(input,output,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),\n                           0);\n  }\n  temp_var2 = (int)size >> 2;\n  if (temp_var2 != 0) {\n    temp_ptr2 = *(undefined4 **)(input + 0x48);\n    if (temp_ptr2 == (undefined4 *)0x0) {\n      temp_ptr2 = (undefined4 *)FUN_080090c0(input,1);\n      temp_ptr2[4] = 1;\n      temp_ptr2[5] = 0x271;\n      *(undefined4 **)(input + 0x48) = temp_ptr2;\n      *temp_ptr2 = 0;\n    }\n    temp_ptr1 = output;\n    if (temp_var2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    temp_var2 = temp_var2 >> 1;\n    temp_ptr1 = temp_ptr2;\n    if (temp_var2 != 0) {\n      while( true ) {\n        temp_ptr2 = (undefined4 *)*temp_ptr1;\n        if (temp_ptr2 == (undefined4 *)0x0) {\n          temp_ptr2 = (undefined4 *)FUN_08009258(input,temp_ptr1,temp_ptr1);\n          *temp_ptr1 = temp_ptr2;\n          *temp_ptr2 = 0;\n        }\n        temp_ptr1 = output;\n        if (-1 < temp_var2 << 0x1f) break;\nLAB_080093d2:\n        output = (undefined4 *)FUN_08009258(input,temp_ptr1,temp_ptr2);\n        if (temp_ptr1 == (undefined4 *)0x0) break;\n        index = *(int *)(input + 0x4c);\n        temp_var2 = temp_var2 >> 1;\n        *temp_ptr1 = *(undefined4 *)(index + temp_ptr1[1] * 4);\n        *(undefined4 **)(index + temp_ptr1[1] * 4) = temp_ptr1;\n        temp_ptr1 = temp_ptr2;\n        if (temp_var2 == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "iVar1": "index",
                "iVar2": "temp_var2",
                "puVar3": "temp_ptr1",
                "puVar4": "temp_ptr2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080093a4": {
                    "1": "decode_data",
                    "21": "process_data"
                },
                "param_1": {
                    "7": "input",
                    "3": "input_param",
                    "2": "input_data",
                    "4": "input_size",
                    "1": "num1"
                },
                "param_2": {
                    "3": "output_param",
                    "1": "input_arr",
                    "2": "input_data",
                    "10": "output"
                },
                "param_3": {
                    "1": "input3",
                    "3": "data_size",
                    "2": "array_size",
                    "10": "size",
                    "4": "flags",
                    "6": "length"
                },
                "iVar1": {
                    "5": "index1",
                    "1": "temp_var_1",
                    "2": "temp",
                    "16": "index",
                    "6": "temp_var1"
                },
                "iVar2": {
                    "1": "div_size",
                    "5": "index2",
                    "6": "temp_var2",
                    "2": "iter"
                },
                "puVar3": {
                    "1": "temp_pointer1",
                    "2": "current_pointer",
                    "3": "temp1",
                    "4": "temp_ptr1"
                },
                "puVar4": {
                    "1": "prev_block",
                    "2": "temp_ptr4",
                    "3": "temp2",
                    "4": "new_ptr",
                    "5": "temp_ptr2"
                },
                "FUN_08009120": {
                    "1": "process_flags"
                },
                "FUN_080090c0": {
                    "1": "initialize_data"
                },
                "FUN_08009258": {
                    "1": "create_node"
                }
            }
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "reverse_bits_08009444",
            "code": "\nvoid reverse_bits_08009444(int input,undefined4 *array,uint size)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  undefined4 temp4;\n  int temp5;\n  int temp6;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr4;\n  uint *ptr5;\n  int shift_amount;\n  int new_size;\n  uint carry;\n  uint *ptr3;\n  \n  temp5 = array[4];\n  shift_amount = (int)size >> 5;\n  new_size = shift_amount + temp5 + 1;\n  temp3 = array[1];\n  temp2 = array[2];\n  if ((int)array[2] < new_size) {\n    do {\n      temp6 = temp2 * 2;\n      temp1 = temp2 * -2;\n      temp3 = temp3 + 1;\n      temp2 = temp6;\n    } while (new_size != temp6 && new_size + temp1 < 0 == SBORROW4(new_size,temp6));\n  }\n  temp2 = FUN_080090c0(input,temp3);\n  ptr1 = (uint *)(temp2 + 0x14);\n  if (0 < shift_amount) {\n    ptr5 = ptr1 + shift_amount;\n    ptr2 = ptr1;\n    do {\n      ptr3 = ptr2 + 1;\n      *ptr2 = 0;\n      ptr1 = ptr5;\n      ptr2 = ptr3;\n    } while (ptr3 != ptr5);\n  }\n  temp3 = array[4];\n  ptr2 = array + 5;\n  size = size & 0x1f;\n  if (size == 0) {\n    ptr1 = ptr1 + -1;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr5 + 1;\n      ptr1 = ptr1 + 1;\n      *ptr1 = *ptr5;\n      ptr5 = ptr3;\n    } while (ptr3 < ptr2 + temp3);\n  }\n  else {\n    carry = 0;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr1;\n      *ptr3 = *ptr5 << size | carry;\n      ptr4 = ptr5 + 1;\n      carry = *ptr5 >> (0x20 - size & 0xff);\n      ptr1 = ptr3 + 1;\n      ptr5 = ptr4;\n    } while (ptr4 < ptr2 + temp3);\n    ptr3[1] = carry;\n    if (carry != 0) {\n      new_size = shift_amount + temp5 + 2;\n    }\n  }\n  temp5 = *(int *)(input + 0x4c);\n  temp3 = array[1];\n  temp4 = *(undefined4 *)(temp5 + temp3 * 4);\n  *(int *)(temp2 + 0x10) = new_size + -1;\n  *array = temp4;\n  *(undefined4 **)(temp5 + temp3 * 4) = array;\n  return;\n}\n\n",
            "renaming": {
                "param_1": "input",
                "param_2": "array",
                "param_3": "size",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "iVar6": "temp6",
                "puVar7": "ptr1",
                "puVar8": "ptr2",
                "puVar10": "ptr4",
                "puVar11": "ptr5",
                "iVar12": "shift_amount",
                "iVar13": "new_size",
                "uVar14": "carry",
                "puVar9": "ptr3",
                "FUN_08009444": "reverse_bits_08009444"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "13": "input",
                    "2": "input_parameter",
                    "1": "input_data",
                    "3": "input_param"
                },
                "param_2": {
                    "2": "parameters",
                    "6": "output",
                    "5": "output_array",
                    "1": "output_buffer"
                },
                "param_3": {
                    "1": "shift_amount",
                    "2": "bit_count",
                    "10": "size",
                    "8": "num_bits"
                },
                "iVar1": {
                    "1": "multiplier",
                    "13": "temp1",
                    "3": "temp_var_1",
                    "11": "temp_var1"
                },
                "iVar2": {
                    "3": "temp_var_2",
                    "1": "updated_current_index",
                    "11": "temp_var2",
                    "13": "temp2"
                },
                "iVar3": {
                    "11": "temp_var3",
                    "1": "start_index4",
                    "3": "temp_var_3",
                    "2": "offset",
                    "12": "temp3"
                },
                "uVar4": {
                    "3": "value",
                    "1": "original_value",
                    "10": "temp_var4",
                    "11": "temp4"
                },
                "iVar5": {
                    "7": "temp5",
                    "3": "array_length",
                    "6": "temp_var5",
                    "1": "array_offset",
                    "2": "temp_var_5"
                },
                "iVar6": {
                    "4": "temp5",
                    "1": "var2",
                    "7": "temp_var6",
                    "2": "temp4"
                },
                "puVar7": {
                    "1": "target_ptr2",
                    "2": "dest",
                    "3": "dest_array",
                    "6": "ptr1"
                },
                "puVar8": {
                    "2": "pointer_var2",
                    "3": "source",
                    "1": "iterating_params",
                    "6": "ptr2"
                },
                "puVar10": {
                    "1": "src",
                    "2": "src_ptr",
                    "5": "ptr4"
                },
                "puVar11": {
                    "1": "temp_array3",
                    "2": "ptr3",
                    "5": "ptr5"
                },
                "iVar12": {
                    "1": "shift_divisor",
                    "2": "shift",
                    "7": "shift_amount"
                },
                "iVar13": {
                    "1": "additional_offset",
                    "2": "new_size"
                },
                "uVar14": {
                    "1": "temp_var6",
                    "2": "shifted_bits",
                    "9": "carry"
                },
                "puVar9": {
                    "1": "copy_ptr3",
                    "2": "dest",
                    "5": "ptr3",
                    "3": "dest_ptr"
                },
                "FUN_08009444": {
                    "1": "update_data",
                    "3": "process_data",
                    "7": "reverse_bits"
                },
                "puVar12": {
                    "1": "unknown_ptr"
                },
                "puVar13": {
                    "1": "end_ptr"
                },
                "*param_2": {
                    "1": "new_value"
                },
                "iVar14": {
                    "1": "shift_amount"
                },
                "fun_080090c0": {
                    "1": "get_offset_divisor"
                }
            }
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *ptr_array2;\n  int array2_offset;\n  uint *ptr_array1;\n  \n  array2_offset = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array2_offset;\n  if (difference == 0) {\n    ptr_array2 = (uint *)(array2 + 0x14 + array2_offset * 4);\n    ptr_array1 = (uint *)(array1 + 0x14) + array2_offset;\n    do {\n      ptr_array1 = ptr_array1 + -1;\n      ptr_array2 = ptr_array2 + -1;\n      if (*ptr_array1 != *ptr_array2) {\n        if (*ptr_array2 <= *ptr_array1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr_array1);\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "puVar2": "ptr_array2",
                "iVar3": "array2_offset",
                "puVar4": "ptr_array1"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080094f8": {
                    "29": "compare_arrays",
                    "1": "compare_and_update_arrays"
                },
                "param_1": {
                    "2": "array1_base",
                    "1": "array_1",
                    "26": "array1"
                },
                "param_2": {
                    "1": "array2_address",
                    "2": "array2_base",
                    "26": "array2"
                },
                "iVar1": {
                    "1": "array1_length",
                    "3": "length_difference",
                    "7": "array_difference",
                    "15": "difference"
                },
                "puVar2": {
                    "1": "array2_element",
                    "12": "ptr_array2",
                    "2": "array2_ptr",
                    "7": "ptr2"
                },
                "iVar3": {
                    "2": "array2_start_index",
                    "1": "array2_start",
                    "7": "array2_length",
                    "4": "offset",
                    "11": "array2_offset",
                    "3": "length"
                },
                "puVar4": {
                    "1": "current_element_array1",
                    "2": "array1_ptr",
                    "12": "ptr_array1",
                    "7": "ptr1"
                }
            }
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "check_arrays_equality_08009530",
            "code": "\nvoid check_arrays_equality_08009530(undefined4 arg1,uint *array1,uint *array2,undefined4 param4)\n\n{\n  int result;\n  uint *ptr1;\n  uint temp1;\n  uint temp;\n  undefined4 flag;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  int carry;\n  uint *ptr8;\n  uint count;\n  uint *temp_ptr2;\n  \n  ptr1 = (uint *)array2[4];\n  ptr7 = array1 + 5;\n  ptr8 = array2 + 5;\n  ptr3 = ptr7;\n  ptr5 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = ptr7 + (int)ptr1;\n    ptr1 = ptr8 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= ptr7) {\n        carry = FUN_080090c0(arg1,0,ptr2,ptr1,param4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    flag = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  flag = 1;\n  ptr2 = ptr7;\n  ptr1 = array1;\n  ptr3 = ptr8;\n  ptr5 = array2;\n  array2 = array1;\n  ptr8 = ptr7;\nLAB_08009578:\n  result = FUN_080090c0(arg1,ptr5[1],ptr2,ptr1,param4);\n  carry = 0;\n  count = ptr5[4];\n  temp1 = array2[4];\n  *(undefined4 *)(result + 0xc) = flag;\n  ptr7 = ptr3 + count;\n  ptr1 = (uint *)(result + 0x14);\n  ptr5 = ptr8;\n  do {\n    temp_ptr2 = ptr3 + 1;\n    ptr6 = ptr5 + 1;\n    temp = ((*ptr3 & 0xffff) + carry) - (*ptr5 & 0xffff);\n    carry = ((*ptr3 >> 0x10) - (*ptr5 >> 0x10)) + ((int)temp >> 0x10);\n    temp = temp & 0xffff | carry * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = temp;\n    carry = carry >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = temp_ptr2;\n    ptr5 = ptr6;\n  } while (ptr6 < ptr8 + temp1);\n  ptr1 = temp_ptr2;\n  ptr3 = ptr2;\n  if (temp_ptr2 < ptr7) {\n    do {\n      ptr5 = ptr1 + 1;\n      temp1 = (*ptr1 & 0xffff) + carry;\n      carry = ((int)temp1 >> 0x10) + (*ptr1 >> 0x10);\n      temp = temp1 & 0xffff | carry * 0x10000;\n      *ptr3 = temp;\n      carry = carry >> 0x10;\n      ptr1 = ptr5;\n      ptr3 = ptr3 + 1;\n    } while (ptr5 < ptr7);\n    ptr2 = (uint *)((int)ptr2 + ((int)ptr7 + ~(uint)temp_ptr2 & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (temp == 0) {\n    ptr2 = ptr2 + -1;\n    count = count - 1;\n    temp = *ptr2;\n  }\n  *(uint *)(result + 0x10) = count;\n  return;\n}\n\n",
            "renaming": {
                "param_1": "arg1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "param4",
                "iVar1": "result",
                "puVar2": "ptr1",
                "uVar3": "temp1",
                "uVar4": "temp",
                "uVar5": "flag",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar9": "ptr5",
                "puVar10": "ptr6",
                "puVar11": "ptr7",
                "iVar12": "carry",
                "puVar13": "ptr8",
                "uVar14": "count",
                "puVar8": "temp_ptr2",
                "FUN_08009530": "check_arrays_equality_08009530",
                "uVar": "check_result"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "3": "input_param",
                    "1": "input1",
                    "4": "input_value",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "input_2",
                    "4": "input_array1",
                    "17": "array1"
                },
                "param_3": {
                    "1": "destination_pointer",
                    "4": "input_array2",
                    "17": "array2"
                },
                "param_4": {
                    "2": "additional_value",
                    "1": "value",
                    "3": "arg4",
                    "5": "param4"
                },
                "iVar1": {
                    "1": "return_value",
                    "27": "result",
                    "2": "temp1"
                },
                "puVar2": {
                    "1": "temp_array1",
                    "4": "ptr_array1",
                    "10": "ptr1",
                    "2": "ptr_2"
                },
                "uVar3": {
                    "1": "size_array1",
                    "2": "var_3",
                    "3": "array1_size",
                    "4": "temp1"
                },
                "uVar4": {
                    "1": "u_var_temp2",
                    "3": "temp_value",
                    "4": "temp2",
                    "2": "temp3",
                    "5": "temp"
                },
                "uVar5": {
                    "14": "flag",
                    "1": "var_5",
                    "5": "is_equal"
                },
                "puVar6": {
                    "1": "array2_ptr",
                    "2": "ptr_result",
                    "5": "ptr2",
                    "3": "ptr3"
                },
                "puVar7": {
                    "1": "array2_ptr",
                    "2": "temp_ptr1",
                    "4": "ptr3",
                    "3": "ptr4"
                },
                "puVar9": {
                    "1": "ptr1_copy",
                    "2": "ptr_9",
                    "3": "ptr_array2",
                    "5": "ptr5"
                },
                "puVar10": {
                    "1": "array2_iter",
                    "2": "ptr_10",
                    "4": "ptr6"
                },
                "puVar11": {
                    "1": "array2_ptr",
                    "4": "ptr7",
                    "2": "ptr_11"
                },
                "iVar12": {
                    "4": "counter",
                    "1": "temp4",
                    "2": "count",
                    "11": "carry"
                },
                "puVar13": {
                    "1": "array2_ptr",
                    "2": "ptr_13"
                },
                "uVar14": {
                    "1": "updated_value",
                    "2": "var_14"
                },
                "puVar8": {
                    "1": "loop_pointer",
                    "2": "ptr_8",
                    "3": "temp_ptr1"
                },
                "FUN_08009530": {
                    "4": "check_arrays_equality",
                    "1": "compare_and_set",
                    "2": "check_arrays"
                },
                "uVar": {
                    "1": "temp_variable"
                }
            }
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "decode_data_08009630",
            "code": "\nint decode_data_08009630(undefined4 param1,undefined4 param2,uint input_param_3,uint input_param_4,int *output_1,\n                int *output_2)\n\n{\n  int result;\n  uint var1;\n  int temp_var_1;\n  int temp_var_2;\n  uint shifted_value;\n  uint shift_amount;\n  undefined8 var6;\n  uint local_var1;\n  uint local_var2;\n  \n  result = FUN_080090c0(param1,1);\n  shift_amount = (input_param_4 << 1) >> 0x15;\n  local_var2 = input_param_4 & 0xfffff;\n  if (shift_amount != 0) {\n    local_var2 = local_var2 | 0x100000;\n  }\n  if (input_param_3 == 0) {\n    temp_var_1 = FUN_080091e4(&local_var2);\n    temp_var_2 = 1;\n    var1 = temp_var_1 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = local_var2;\n  }\n  else {\n    local_var1 = input_param_3;\n    var1 = FUN_080091e4(&local_var1);\n    if (var1 == 0) {\n      *(uint *)(result + 0x14) = local_var1;\n    }\n    else {\n      shifted_value = local_var2 << (0x20 - var1 & 0xff);\n      local_var2 = local_var2 >> (var1 & 0xff);\n      *(uint *)(result + 0x14) = shifted_value | local_var1;\n    }\n    if (local_var2 == 0) {\n      temp_var_2 = 1;\n    }\n    else {\n      temp_var_2 = 2;\n    }\n    *(uint *)(result + 0x18) = local_var2;\n    *(int *)(result + 0x10) = temp_var_2;\n  }\n  if (shift_amount == 0) {\n    *output_1 = var1 - 0x432;\n    var6 = FUN_080091a4(*(undefined4 *)(result + temp_var_2 * 4 + 0x10));\n    *output_2 = (int)((ulonglong)var6 >> 0x20) * 0x20 - (int)var6;\n    return result;\n  }\n  *output_1 = (shift_amount - 0x433) + var1;\n  *output_2 = 0x35 - var1;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009630": "decode_data_08009630",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "output_1",
                "param_6": "output_2",
                "iVar1": "result",
                "uVar2": "var1",
                "iVar3": "temp_var_1",
                "iVar4": "temp_var_2",
                "uVar5": "shifted_value",
                "uVar6": "shift_amount",
                "uVar7": "var6",
                "local_20": "local_var1",
                "local_1c": "local_var2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009630": {
                    "2": "calculate_result",
                    "1": "extract_bits_and_compute_value",
                    "4": "decode_data"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "param1",
                    "2": "input_param1",
                    "4": "input1",
                    "3": "param_1"
                },
                "param_2": {
                    "5": "input_2",
                    "4": "arg2",
                    "1": "param_multiplier",
                    "2": "input_param2",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "input_param_1",
                    "4": "value_1",
                    "2": "input_value1",
                    "3": "param3"
                },
                "param_4": {
                    "2": "input_param4",
                    "1": "arg4",
                    "4": "value_2",
                    "3": "param4"
                },
                "param_5": {
                    "3": "output_value1",
                    "1": "output_variable1",
                    "6": "output_1",
                    "5": "output_param_1",
                    "4": "output_param1"
                },
                "param_6": {
                    "1": "result_2",
                    "4": "output_param2",
                    "6": "output2",
                    "3": "output_value2",
                    "5": "output_param_2"
                },
                "iVar1": {
                    "1": "result_variable",
                    "2": "output",
                    "25": "result"
                },
                "uVar2": {
                    "1": "result",
                    "2": "temp_var1",
                    "3": "temp1",
                    "4": "var1"
                },
                "iVar3": {
                    "2": "temp_var2",
                    "1": "tmp_variable_1",
                    "3": "temp2",
                    "6": "temp_var_1",
                    "4": "var2"
                },
                "iVar4": {
                    "4": "temp_var2",
                    "6": "temp_var_2",
                    "3": "temp2",
                    "2": "temp_var3",
                    "1": "temporary_variable2"
                },
                "uVar5": {
                    "1": "shifted_input",
                    "4": "var4",
                    "6": "shifted_value",
                    "3": "temp4",
                    "2": "temp_var4"
                },
                "uVar6": {
                    "1": "temp4",
                    "3": "shift_count",
                    "2": "temp_var_3",
                    "4": "var5",
                    "8": "shift_amount"
                },
                "uVar7": {
                    "3": "temp6",
                    "4": "var6",
                    "2": "combined_result",
                    "1": "temporary_variable5"
                },
                "local_20": {
                    "1": "temp_value3",
                    "2": "temp_var_5",
                    "3": "local_var1"
                },
                "local_1c": {
                    "3": "local_var2",
                    "2": "temp_value_2",
                    "1": "local_flag2"
                },
                "FUN_080091e4": {
                    "1": "get_modified_parameter"
                },
                "FUN_080090c0": {
                    "1": "initialize_data"
                },
                "FUN_080091a4": {
                    "1": "calculate_value"
                }
            }
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_floating_point_080096e0",
            "code": "\nundefined8 calculate_floating_point_080096e0(uint input1,uint input2,int *result,undefined4 constant)\n\n{\n  int counter;\n  uint positive_exponent;\n  undefined8 combined_value;\n  \n  combined_value = CONCAT44(input2,input1);\n  counter = 0;\n  positive_exponent = input2 & 0x7fffffff;\n  *result = 0;\n  if ((positive_exponent < 0x7ff00000) && ((positive_exponent | input1) != 0)) {\n    if (positive_exponent < 0x100000) {\n      combined_value = FUN_080004c8(input1,input2,0,0x43500000,constant);\n      counter = -0x36;\n      positive_exponent = (uint)((ulonglong)combined_value >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)combined_value;\n    input2 = (uint)((ulonglong)combined_value >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)positive_exponent >> 0x14) + -0x3fe + counter;\n  }\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_floating_point_080096e0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "result",
                "param_4": "constant",
                "iVar1": "counter",
                "uVar2": "positive_exponent",
                "uVar3": "combined_value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080096e0": {
                    "1": "decode_float",
                    "2": "calculate_exponent",
                    "4": "convert_float_to_integer",
                    "7": "calculate_floating_point"
                },
                "param_1": {
                    "4": "mantissa",
                    "1": "input_param_1",
                    "2": "integer_part",
                    "5": "input1"
                },
                "param_2": {
                    "1": "input_float2",
                    "2": "input_param2",
                    "4": "exponent",
                    "5": "input2"
                },
                "param_3": {
                    "1": "result_ptr",
                    "3": "output",
                    "2": "output_value",
                    "7": "exponent",
                    "11": "result"
                },
                "param_4": {
                    "4": "param_4",
                    "1": "flags",
                    "14": "constant"
                },
                "iVar1": {
                    "1": "result",
                    "11": "counter",
                    "8": "offset",
                    "3": "iteration_count"
                },
                "uVar2": {
                    "1": "masked_input_param2",
                    "2": "abs_input2",
                    "3": "positive_exponent"
                },
                "uVar3": {
                    "8": "combined_value",
                    "1": "new_float",
                    "2": "combined_float",
                    "4": "combined_inputs"
                },
                "FUN_080004c8": {
                    "1": "calculate_value",
                    "2": "sub_function"
                }
            }
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "process_data_08009744",
            "code": "\nvoid process_data_08009744(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20000c10 = 0;\n  result = FUN_08005728(input);\n  if ((result == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "process_data_08009744",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009744": {
                    "8": "process_data",
                    "2": "find_and_assign_value",
                    "1": "find_return_value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "3": "result_ptr",
                    "8": "output",
                    "10": "result"
                },
                "param_2": {
                    "13": "input",
                    "2": "input_data",
                    "8": "input_param"
                },
                "iVar1": {
                    "9": "return_value",
                    "1": "function_result",
                    "3": "status",
                    "15": "result"
                },
                "DAT_20000c10": {
                    "1": "found_value"
                },
                "*param_1": {
                    "1": "param_value"
                },
                "FUN_08005728": {
                    "1": "retrieve_value"
                }
            }
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_string_08009768",
            "code": "\nvoid copy_string_08009768(uint *dest,uint *src,uint length)\n\n{\n  char current_char;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_char;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (dest_ptr = dest, src_ptr = src, 3 < length)) {\n    do {\n      src = src_ptr + 1;\n      current_char = *src_ptr;\n      dest = dest_ptr;\n      if ((current_char + 0xfefefeff & ~current_char & 0x80808080) != 0) goto end_check;\n      length = length - 4;\n      dest = dest_ptr + 1;\n      *dest_ptr = current_char;\n      dest_ptr = dest;\n      src_ptr = src;\n    } while (3 < length);\n  }\n  src_ptr = src;\n  if (length != 0) {\nend_check:\n    current_char = *(char *)src_ptr;\n    *(char *)dest = current_char;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)dest = current_char;\n    }\n    if (length != 0) {\n      src_ptr = dest;\n      do {\n        dest_ptr = (uint *)((int)src_ptr + 1);\n        *(char *)src_ptr = '\\0';\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (uint *)(length + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_char",
                "cVar1": "current_char",
                "LAB_0800979c": "end_check"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009768": {
                    "2": "copy_string_with_length_check",
                    "1": "copy_and_filter_string",
                    "13": "copy_string",
                    "3": "copy_and_pad_string"
                },
                "param_1": {
                    "11": "destination",
                    "1": "dest_ptr",
                    "15": "dest",
                    "2": "source"
                },
                "param_2": {
                    "1": "destination_array",
                    "2": "destination",
                    "11": "source",
                    "15": "src"
                },
                "param_3": {
                    "20": "length",
                    "10": "size",
                    "1": "n"
                },
                "puVar2": {
                    "21": "src_ptr",
                    "5": "source_ptr",
                    "1": "src",
                    "2": "dest_ptr"
                },
                "puVar3": {
                    "5": "destination_ptr",
                    "2": "src_ptr",
                    "1": "dest_pointer",
                    "18": "dest_ptr",
                    "3": "dst_ptr"
                },
                "uVar4": {
                    "1": "current_data",
                    "4": "value",
                    "3": "current_word",
                    "6": "current_byte",
                    "5": "current_value"
                },
                "cVar1": {
                    "2": "ch",
                    "1": "current_source_char",
                    "18": "current_char",
                    "5": "current_byte"
                },
                "LAB_0800979c": {
                    "1": "end_check"
                }
            }
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 process_data_080097cc(undefined4 *output_array,int *input_array,int *control_array)\n\n{\n  int current_index;\n  uint temp1;\n  int result;\n  int offset;\n  uint max_value;\n  uint loop_counter;\n  undefined4 *pointer1;\n  undefined4 *pointer2;\n  undefined4 value;\n  \n  if (dest_array[2] != 0) {\n    current_index = *input_array;\n    max_value = source_array[2];\n    pointer2 = (undefined4 *)*control_array;\n    do {\n      do {\n        pointer1 = pointer2 + 2;\n        value = *pointer2;\n        loop_counter = pointer2[1];\n        pointer2 = pointer1;\n      } while (loop_counter == 0);\n      temp1 = loop_counter;\n      if ((max_value <= loop_counter) && (temp1 = max_value, (*(ushort *)(input_array + 3) & 0x480) != 0)) {\n        offset = current_index - source_array[4];\n        max_value = (source_array[5] * 3) / 2;\n        temp1 = loop_counter + 1 + offset;\n        if (max_value < temp1) {\n          max_value = temp1;\n        }\n        if ((int)((uint)*(ushort *)(input_array + 3) << 0x15) < 0) {\n          result = FUN_08008af8(output_array,max_value);\n          if (result == 0) {\nerror_handling:\n            *output_array = 0xc;\n            *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x40;\n            metadata_array_flag = 0;\n            dest_array[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(result,source_array[4],offset);\n          *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          result = FUN_08009adc(output_array);\n          if (result == 0) {\n            FUN_080088ec(output_array,source_array[4]);\n            goto error_handling;\n          }\n        }\n        current_index = result + offset;\n        source_array[5] = max_value;\n        source_array[4] = result;\n        *input_array = current_index;\n        source_array[2] = max_value - offset;\n        temp1 = loop_counter;\n      }\n      FUN_08009a18(current_index,value,temp1);\n      offset = dest_array[2];\n      max_value = source_array[2] - temp1;\n      current_index = *input_array + temp1;\n      source_array[2] = max_value;\n      *input_array = current_index;\n      dest_array[2] = offset - loop_counter;\n    } while (offset - loop_counter != 0);\n  }\n  metadata_array_flag = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "control_array",
                "iVar1": "current_index",
                "uVar5": "max_value",
                "puVar8": "pointer2",
                "puVar7": "pointer1",
                "uVar9": "value",
                "uVar6": "loop_counter",
                "uVar2": "temp1",
                "iVar4": "offset",
                "iVar3": "result",
                "param_3[1]": "metadata_array_flag",
                "param_3[2]": "dest_array[2]",
                "param_2[4]": "source_array[4]",
                "param_2[5]": "source_array[5]",
                "param_2[2]": "source_array[2]",
                "LAB_08009896": "error_handling"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080097cc": {
                    "1": "process",
                    "19": "process_data",
                    "3": "extract_data"
                },
                "param_1": {
                    "18": "output_array",
                    "1": "output_data",
                    "3": "output",
                    "4": "output_buffer"
                },
                "param_2": {
                    "4": "input_buffer",
                    "1": "input1",
                    "17": "input_array",
                    "3": "input_data"
                },
                "param_3": {
                    "1": "info_array",
                    "8": "control_array",
                    "4": "data_array"
                },
                "iVar1": {
                    "1": "input_pointer",
                    "7": "current_index",
                    "2": "var1"
                },
                "uVar5": {
                    "1": "new_size",
                    "2": "var5",
                    "3": "input_size",
                    "4": "max_value"
                },
                "puVar8": {
                    "5": "pointer2",
                    "1": "current_array_ptr",
                    "3": "temp_pointer2",
                    "2": "current_ptr"
                },
                "puVar7": {
                    "1": "new_array_ptr",
                    "3": "pointer_1",
                    "5": "pointer1",
                    "2": "temp_array_ptr"
                },
                "uVar9": {
                    "4": "temp_value",
                    "2": "temp_var2",
                    "1": "current_value",
                    "5": "value"
                },
                "uVar6": {
                    "2": "next_value",
                    "1": "temp3"
                },
                "uVar2": {
                    "1": "data_value",
                    "3": "current_value",
                    "2": "temp_var2"
                },
                "iVar4": {
                    "1": "data_offset",
                    "2": "temp_var2",
                    "5": "temp_var",
                    "6": "offset",
                    "3": "difference"
                },
                "iVar3": {
                    "2": "temp_var1",
                    "1": "temp_variable_1",
                    "13": "result"
                },
                "param_3[1]": {
                    "1": "metadata_array_flag"
                },
                "FUN_08001084": {
                    "1": "copy_array_values",
                    "9": "copy_data"
                },
                "FUN_080088ec": {
                    "1": "process_data2",
                    "3": "initialize_data"
                },
                "FUN_08009adc": {
                    "10": "allocate_memory",
                    "1": "process_data2"
                },
                "FUN_08009a18": {
                    "1": "update_index",
                    "2": "process_data3"
                },
                "FUN_08008af8": {
                    "1": "allocate_memory2",
                    "3": "allocate_memory"
                },
                "param_3[2]": {
                    "1": "dest_array[2]"
                },
                "param_2[4]": {
                    "1": "source_array[4]"
                },
                "param_2[5]": {
                    "1": "source_array[5]"
                },
                "*param_2": {
                    "1": "source_array[0]"
                },
                "param_2[2]": {
                    "1": "source_array[2]"
                },
                "*param_1": {
                    "1": "data_array[0]"
                },
                "LAB_08009896": {
                    "1": "error_handling"
                },
                "FUM_08008af8": {
                    "1": "allocate_memory"
                },
                "FUM_08001084": {
                    "1": "copy_data1"
                },
                "FUM_08009adc": {
                    "1": "allocate_memory2"
                },
                "FUM_08009a18": {
                    "1": "process_data2"
                }
            }
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 update_data_080098c0(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    *(uint *)(data_ptr + 4) = count + 1;\n    return_value = DAT_20000448;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = data;\n    FUNC_08008af4(return_value);\n    return_value = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080098c0": {
                    "1": "update_info",
                    "24": "update_data"
                },
                "param_1": {
                    "4": "flag",
                    "1": "mode",
                    "2": "data_flag",
                    "12": "type",
                    "3": "input_type"
                },
                "param_2": {
                    "3": "data1",
                    "8": "data",
                    "6": "new_value",
                    "7": "value",
                    "2": "data_value",
                    "1": "new_data"
                },
                "param_3": {
                    "6": "data1",
                    "1": "info1",
                    "3": "param1",
                    "2": "new_value1",
                    "8": "value1"
                },
                "param_4": {
                    "2": "new_value2",
                    "3": "data3",
                    "6": "data2",
                    "1": "param2_value",
                    "8": "value2"
                },
                "puVar1": {
                    "1": "data_struct_ptr",
                    "19": "data_ptr",
                    "2": "ptr",
                    "4": "data_pointer"
                },
                "uVar2": {
                    "8": "result",
                    "23": "return_value"
                },
                "uVar3": {
                    "3": "mask",
                    "1": "shifted_value",
                    "2": "bit",
                    "20": "bit_mask"
                },
                "uVar4": {
                    "1": "size_counter",
                    "12": "count",
                    "3": "data_count",
                    "5": "index",
                    "2": "current_index"
                },
                "FUNC_08008af4": {
                    "1": "finalize_data"
                },
                "FUNC_08008af0": {
                    "1": "initialize_data"
                }
            }
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initialize_memory_08009980(undefined4 array,int width,int height)\n\n{\n  undefined4 *allocated_memory;\n  uint adjusted_size;\n  undefined4 *initialized_memory;\n  \n  allocated_memory = (undefined4 *)FUN_08008af8(array,height * width);\n  if (allocated_memory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjusted_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (adjusted_size < 0x25) {\n    initialized_memory = allocated_memory;\n    if (0x13 < adjusted_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < adjusted_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (adjusted_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          initialized_memory = allocated_memory + 6;\n        }\n        else {\n          initialized_memory = allocated_memory + 4;\n        }\n        *initialized_memory = 0;\n        initialized_memory[1] = 0;\n        initialized_memory[2] = 0;\n        return allocated_memory;\n      }\n      initialized_memory = allocated_memory + 2;\n    }\n    *initialized_memory = 0;\n    initialized_memory[1] = 0;\n    initialized_memory[2] = 0;\n    return allocated_memory;\n  }\n  FUN_08005d68(allocated_memory,0);\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "array",
                "param_2": "width",
                "param_3": "height",
                "puVar1": "allocated_memory",
                "uVar2": "adjusted_size",
                "puVar3": "initialized_memory"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009980": {
                    "3": "initialize_array",
                    "2": "allocate_and_initialize_buffer",
                    "1": "decompile_and_improve",
                    "6": "allocate_and_initialize_memory",
                    "11": "initialize_memory",
                    "4": "allocate_memory"
                },
                "param_1": {
                    "1": "input_pointer",
                    "5": "array",
                    "2": "input_data",
                    "4": "ptr"
                },
                "param_2": {
                    "4": "num_rows",
                    "6": "size",
                    "9": "width",
                    "1": "num_columns",
                    "2": "length"
                },
                "param_3": {
                    "3": "cols",
                    "1": "item_count",
                    "4": "count",
                    "2": "num_cols",
                    "9": "height"
                },
                "puVar1": {
                    "1": "result",
                    "2": "memory_ptr",
                    "11": "allocated_memory",
                    "4": "ptr"
                },
                "uVar2": {
                    "8": "adjusted_size",
                    "3": "buffer_size",
                    "5": "memory_size",
                    "1": "block_size",
                    "4": "allocated_size",
                    "7": "size"
                },
                "puVar3": {
                    "1": "start",
                    "3": "final_pointer",
                    "2": "updated_memory",
                    "4": "initialized_memory"
                },
                "FUN_08008af8": {
                    "4": "allocate_memory"
                },
                "FUN_08005d68": {
                    "1": "initialize_memory_block",
                    "3": "clear_memory"
                }
            }
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copy_memory_08009a18(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_byte_ptr;\n  undefined4 *src_byte_ptr;\n  uint remaining_size;\n  uint remaining_bytes;\n  \n  if ((source < destination) && (src_ptr = (undefined4 *)((int)source + size), destination < src_ptr)) {\n    dest_byte_ptr = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte_ptr = dest_byte_ptr + -1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n      } while (source != src_ptr);\n    }\n  }\n  else {\n    remaining_bytes = size;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto copy_byte_by_byte;\n      src_ptr = source + 4;\n      dest_ptr = destination + 4;\n      do {\n        src_byte_ptr = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_byte_ptr;\n        dest_ptr = dest_ptr + 4;\n      } while (src_byte_ptr != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      remaining_bytes = size & 0xf;\n      source = source + iteration * 4;\n      destination = destination + iteration * 4;\n      if (3 < remaining_bytes) {\n        src_ptr = destination + -1;\n        remaining_size = remaining_bytes;\n        dest_ptr = source;\n        do {\n          remaining_size = remaining_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_size);\n        iteration = (remaining_bytes - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + iteration);\n        source = (undefined4 *)((int)source + iteration);\n        remaining_bytes = size & 3;\n      }\n    }\n    size = remaining_bytes;\n    if (remaining_bytes != 0) {\ncopy_byte_by_byte:\n      dest_byte_ptr = (undefined *)((int)destination + -1);\n      src_ptr = source;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte_ptr = dest_byte_ptr + 1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "iVar3": "iteration",
                "puVar4": "dest_byte_ptr",
                "puVar5": "src_byte_ptr",
                "uVar6": "remaining_size",
                "uVar7": "remaining_bytes",
                "LAB_08009abc": "copy_byte_by_byte"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009a18": {
                    "1": "copy_and_shift_memory",
                    "26": "copy_memory"
                },
                "param_1": {
                    "1": "src",
                    "16": "destination",
                    "10": "dest",
                    "3": "source"
                },
                "param_2": {
                    "2": "destination",
                    "16": "source",
                    "11": "src"
                },
                "param_3": {
                    "1": "num_bytes",
                    "11": "length",
                    "19": "size"
                },
                "puVar1": {
                    "2": "dest_pointer",
                    "1": "dst_ptr",
                    "22": "dest_ptr"
                },
                "puVar2": {
                    "1": "src_p",
                    "23": "src_ptr",
                    "2": "src_pointer",
                    "3": "dest_ptr"
                },
                "iVar3": {
                    "11": "iteration",
                    "1": "index",
                    "4": "i",
                    "2": "num_copies",
                    "3": "num_words"
                },
                "puVar4": {
                    "1": "dest_ptr",
                    "2": "dest_end",
                    "10": "dest_byte_ptr",
                    "5": "dest_byte"
                },
                "puVar5": {
                    "1": "src_index",
                    "5": "src_byte",
                    "2": "src_end_ptr",
                    "11": "src_byte_ptr"
                },
                "uVar6": {
                    "1": "inner_loop_counter",
                    "6": "remaining_bytes",
                    "14": "remaining_size",
                    "4": "remaining_length",
                    "2": "temp_length1"
                },
                "uVar7": {
                    "1": "remaining_length_mod16",
                    "2": "remaining_words",
                    "5": "remaining_bytes",
                    "4": "remaining_size",
                    "3": "temp_size"
                },
                "LAB_08009abc": {
                    "1": "copy_byte_by_byte"
                }
            }
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_08009adc",
            "code": "\nint * allocate_memory_08009adc(undefined4 *param_pointer,int *input_array,uint size)\n\n{\n  int *temp_ptr;\n  int temp_var1;\n  int *temp_ptr2;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int *var7;\n  uint aligned_size;\n  uint var9;\n  uint var10;\n  int var11;\n  \n  if (input_array == (int *)0x0) {\n    temp_ptr2 = (int *)FUN_08008af8(param_pointer,size);\n    return temp_ptr2;\n  }\n  FUN_080090a8();\n  temp_var4 = input_array[-1];\n  var9 = temp_var4 & 0xfffffffc;\n  temp_ptr2 = input_array + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < size) {\nLAB_08009b8e:\n    *param_pointer = 0xc;\n    return (int *)0x0;\n  }\n  var11 = (int)temp_ptr2 + var9;\n  var10 = var9;\n  if ((int)var9 < (int)aligned_size) {\n    if (DAT_20000454 == var11) {\n      var11 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + var9;\n      if ((int)(aligned_size + 0x10) <= var11) {\n        DAT_20000454 = (int)temp_ptr2 + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = var11 - aligned_size | 1;\n        input_array[-1] = aligned_size | input_array[-1] & 1U;\n        FUN_080090b4(param_pointer);\n        return input_array;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        temp_ptr = (int *)((int)temp_ptr2 - input_array[-2]);\n        temp_var4 = temp_ptr[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(var11 + temp_var4)) {\n          temp_var3 = temp_ptr[3];\n          temp_ptr2 = temp_ptr + 2;\n          temp_var1 = *temp_ptr2;\n          var9 = var9 - 4;\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          *(int *)(temp_var3 + 8) = temp_var1;\n          if (var9 < 0x25) {\n            temp_var1 = *input_array;\n            var7 = temp_ptr2;\n            if (0x13 < var9) {\n              temp_ptr[2] = temp_var1;\n              temp_ptr[3] = input_array[1];\n              temp_var1 = input_array[2];\n              if (var9 < 0x1c) {\n                input_array = input_array + 2;\n                var7 = temp_ptr + 4;\n              }\n              else {\n                temp_ptr[4] = temp_var1;\n                temp_ptr[5] = input_array[3];\n                temp_var1 = input_array[4];\n                if (var9 == 0x24) {\n                  temp_ptr[6] = temp_var1;\n                  temp_ptr[7] = input_array[5];\n                  temp_var1 = input_array[6];\n                  input_array = input_array + 6;\n                  var7 = temp_ptr + 8;\n                }\n                else {\n                  input_array = input_array + 4;\n                  var7 = temp_ptr + 6;\n                }\n              }\n            }\n            *var7 = temp_var1;\n            var7[1] = input_array[1];\n            var7[2] = input_array[2];\n          }\n          else {\n            FUN_08009a18(temp_ptr2,input_array);\n          }\n          DAT_20000454 = (int)temp_ptr + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (var11 + temp_var4) - aligned_size | 1;\n          temp_ptr[1] = aligned_size | temp_ptr[1] & 1U;\n          FUN_080090b4(param_pointer);\n          return temp_ptr2;\n        }\nLAB_08009bb0:\n        var10 = var9 + temp_var4;\n        if ((int)aligned_size <= (int)var10) {\n          temp_var3 = temp_ptr[3];\n          var7 = temp_ptr + 2;\n          temp_var1 = *var7;\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          var11 = (int)temp_ptr + var10;\n          *(int *)(temp_var3 + 8) = temp_var1;\n          temp_ptr2 = temp_ptr;\n          if (var9 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(var7,input_array);\n          input_array = var7;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(var11 + 4) & 0xfffffffe) + var11 + 4) << 0x1f) {\n        temp_var2 = *(uint *)(var11 + 4) & 0xfffffffc;\n        var10 = var9 + temp_var2;\n        if ((int)var10 < (int)aligned_size) {\n          if ((int)(temp_var4 << 0x1f) < 0) goto LAB_08009b36;\n          temp_ptr = (int *)((int)temp_ptr2 - input_array[-2]);\n          temp_var4 = temp_ptr[1] & 0xfffffffc;\n          var10 = temp_var2 + temp_var4 + var9;\n          if ((int)var10 < (int)aligned_size) goto LAB_08009bb0;\n          temp_var1 = *(int *)(var11 + 8);\n          var11 = *(int *)(var11 + 0xc);\n          *(int *)(temp_var1 + 0xc) = var11;\n          *(int *)(var11 + 8) = temp_var1;\n          var7 = temp_ptr + 2;\n          temp_var1 = *var7;\n          temp_var3 = temp_ptr[3];\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          var11 = (int)temp_ptr + var10;\n          *(int *)(temp_var3 + 8) = temp_var1;\n          temp_ptr2 = temp_ptr;\n          if (0x24 < var9 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          var9 = var9 - 4;\n          temp_var1 = *input_array;\n          temp_ptr = var7;\n          if (0x13 < var9) {\n            temp_ptr2[2] = temp_var1;\n            temp_ptr2[3] = input_array[1];\n            temp_var1 = input_array[2];\n            if (var9 < 0x1c) {\n              input_array = input_array + 2;\n              temp_ptr = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = temp_var1;\n              temp_ptr2[5] = input_array[3];\n              temp_var1 = input_array[4];\n              if (var9 == 0x24) {\n                temp_ptr2[6] = temp_var1;\n                temp_ptr2[7] = input_array[5];\n                temp_var1 = input_array[6];\n                input_array = input_array + 6;\n                temp_ptr = temp_ptr2 + 8;\n              }\n              else {\n                input_array = input_array + 4;\n                temp_ptr = temp_ptr2 + 6;\n              }\n            }\n          }\n          *temp_ptr = temp_var1;\n          temp_ptr[1] = input_array[1];\n          temp_ptr[2] = input_array[2];\n          input_array = var7;\n        }\n        else {\n          temp_var1 = *(int *)(var11 + 8);\n          temp_var3 = *(int *)(var11 + 0xc);\n          *(int *)(temp_var1 + 0xc) = temp_var3;\n          var11 = (int)temp_ptr2 + var10;\n          *(int *)(temp_var3 + 8) = temp_var1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        temp_ptr = (int *)((int)temp_ptr2 - input_array[-2]);\n        temp_var4 = temp_ptr[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    temp_ptr = (int *)FUN_08008af8(param_pointer,size);\n    if (temp_ptr != (int *)0x0) {\n      if ((int *)((input_array[-1] & 0xfffffffeU) + (int)temp_ptr2) == temp_ptr + -2) {\n        var10 = var9 + (temp_ptr[-1] & 0xfffffffcU);\n        var11 = (int)temp_ptr2 + var10;\n        goto LAB_08009c00;\n      }\n      var9 = var9 - 4;\n      if (var9 < 0x25) {\n        var11 = *input_array;\n        temp_ptr2 = input_array;\n        var7 = temp_ptr;\n        if (0x13 < var9) {\n          *temp_ptr = var11;\n          temp_ptr[1] = input_array[1];\n          if (var9 < 0x1c) {\n            var11 = input_array[2];\n            temp_ptr2 = input_array + 2;\n            var7 = temp_ptr + 2;\n          }\n          else {\n            temp_ptr[2] = input_array[2];\n            temp_ptr[3] = input_array[3];\n            if (var9 == 0x24) {\n              temp_ptr[4] = input_array[4];\n              temp_ptr[5] = input_array[5];\n              var11 = input_array[6];\n              temp_ptr2 = input_array + 6;\n              var7 = temp_ptr + 6;\n            }\n            else {\n              var11 = input_array[4];\n              temp_ptr2 = input_array + 4;\n              var7 = temp_ptr + 4;\n            }\n          }\n        }\n        *var7 = var11;\n        var7[1] = temp_ptr2[1];\n        var7[2] = temp_ptr2[2];\n      }\n      else {\n        FUN_08009a18(temp_ptr,input_array);\n      }\n      FUN_080088ec(param_pointer,input_array);\n    }\n    FUN_080090b4(param_pointer);\n    input_array = temp_ptr;\n  }\n  else {\nLAB_08009c00:\n    if (var10 - aligned_size < 0x10) {\n      temp_ptr2[1] = temp_ptr2[1] & 1U | var10;\n      *(uint *)(var11 + 4) = *(uint *)(var11 + 4) | 1;\n    }\n    else {\n      temp_ptr2[1] = temp_ptr2[1] & 1U | aligned_size;\n      *(uint *)((int)temp_ptr2 + aligned_size + 4) = var10 - aligned_size | 1;\n      *(uint *)(var11 + 4) = *(uint *)(var11 + 4) | 1;\n      FUN_080088ec(param_pointer,(int)temp_ptr2 + aligned_size + 8);\n    }\n    FUN_080090b4(param_pointer);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "param_1": "param_pointer",
                "param_2": "input_array",
                "param_3": "size",
                "piVar1": "temp_ptr",
                "iVar2": "temp_var1",
                "piVar3": "temp_ptr2",
                "uVar4": "temp_var2",
                "iVar5": "temp_var3",
                "uVar6": "temp_var4",
                "piVar7": "var7",
                "uVar8": "aligned_size",
                "uVar9": "var9",
                "uVar10": "var10",
                "iVar11": "var11",
                "FUN_08009adc": "allocate_memory_08009adc"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "4": "input_array",
                    "1": "parameter_1",
                    "2": "input_ptr"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "memory_ptr",
                    "4": "output_array"
                },
                "param_3": {
                    "3": "array_size",
                    "1": "block_size",
                    "14": "size"
                },
                "piVar1": {
                    "1": "ptr",
                    "2": "var1",
                    "3": "result",
                    "4": "temp_ptr"
                },
                "iVar2": {
                    "1": "temp2",
                    "2": "temp",
                    "4": "var2",
                    "3": "temp_var_1",
                    "5": "temp_var1"
                },
                "piVar3": {
                    "2": "ptr2",
                    "1": "temp3",
                    "3": "temp_ptr2"
                },
                "uVar4": {
                    "3": "temp_var_2",
                    "1": "uint_var4",
                    "6": "var4",
                    "9": "temp_var2"
                },
                "iVar5": {
                    "1": "temp_value2",
                    "9": "temp_var3",
                    "5": "var5",
                    "3": "temp_var_3"
                },
                "uVar6": {
                    "5": "var6",
                    "1": "var1",
                    "8": "temp_var4",
                    "2": "temp1"
                },
                "piVar7": {
                    "1": "temp_ptr_3",
                    "3": "var7",
                    "2": "ptr3"
                },
                "uVar8": {
                    "2": "temp2",
                    "1": "new_block_size",
                    "11": "aligned_size",
                    "4": "var8"
                },
                "uVar9": {
                    "1": "adjusted_size2",
                    "4": "var9",
                    "2": "temp_var6",
                    "3": "temp3"
                },
                "uVar10": {
                    "1": "temp_var_10",
                    "2": "temp_var6",
                    "5": "var10",
                    "3": "temp4"
                },
                "iVar11": {
                    "1": "block_end_addr",
                    "2": "temp_var6",
                    "3": "temp5",
                    "5": "var11"
                },
                "FUN_08009adc": {
                    "3": "allocate_memory_block",
                    "1": "resize_memory_block",
                    "9": "allocate_memory"
                },
                "FUN_080090a8": {
                    "1": "initialize_memory"
                },
                "FUN_080090b4": {
                    "1": "cleanup_memory"
                },
                "FUN_080088ec": {
                    "1": "some_function"
                },
                "FUN_08009a18": {
                    "1": "copy_data"
                },
                "FUN_08008af8": {
                    "1": "allocate_new_memory_block"
                },
                "DAT_20000454": {
                    "1": "global_data"
                }
            }
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 707496,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}