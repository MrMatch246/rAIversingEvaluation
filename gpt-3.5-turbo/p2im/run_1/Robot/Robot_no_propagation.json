{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_64bit_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_64bit_values_08000134(undefined4 value_1,undefined4 value_2)\n\n{\n  return CONCAT44(value_2,value_1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_64bit_values_08000134",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "perform_arithmetic_operation_08000158",
            "code": "\nulonglong performArithmeticOperation_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftAmount1;\n  byte carryBit1;\n  uint carry1;\n  uint result;\n  uint carryBit2;\n  uint input2_bitwise;\n  uint input1_bitwise;\n  int shiftAmount2;\n  uint input2_shifted;\n  uint input1_shifted;\n  uint subtractResult;\n  uint temp;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  input2_bitwise = input4 ^ 0x80000000;\n  input2_shifted = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ input2_bitwise) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (input2_shifted | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shiftAmount2 = (int)input2_shifted >> 0x15;\n  if (!condition2) {\n    condition2 = shiftAmount2 == -1;\n  }\n  shiftAmount1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftAmount1 == -1;\n  }\n  if (condition2) {\n    if (shiftAmount2 == -1 || shiftAmount1 == -1) {\n      input2_shifted = input2_bitwise;\n      subtractResult = input3;\n      if (shiftAmount2 == -1) {\n        input2_shifted = input2;\n        subtractResult = input1;\n      }\n      if (shiftAmount2 != -1 || shiftAmount1 != -1) {\n        input3 = subtractResult;\n        input2_bitwise = input2_shifted;\n      }\n      condition2 = (subtractResult | input2_shifted << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | input2_bitwise << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = input2_shifted == input2_bitwise;\n      }\n      if (!condition2) {\n        input2_shifted = input2_shifted | 0x80000;\n      }\n      return CONCAT44(input2_shifted,subtractResult);\n    }\n    if (((input2 ^ input2_bitwise) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((input2_shifted | input1) == 0) {\n        input1 = input3;\n        input2 = input2_bitwise;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input2_bitwise) {\n      return 0;\n    }\n    if (input2_shifted >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      input2_bitwise = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        input2_bitwise = input2_bitwise | 0x80000000;\n      }\n      return CONCAT44(input2_bitwise,input1 << 1);\n    }\n    if (input2_shifted < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  input2_shifted = input2_shifted >> 0x15;\n  input4 = input4 >> 0x15;\n  subtractResult = input4 - input2_shifted;\n  condition2 = subtractResult != 0;\n  if (input4 < input2_shifted) {\n    subtractResult = -subtractResult;\n  }\n  input1_shifted = input1;\n  input1_bitwise = input2;\n  if (condition2 && input2_shifted <= input4) {\n    input2_shifted = input2_shifted + subtractResult;\n    input1_shifted = input3;\n    input1_bitwise = input2_bitwise;\n    input3 = input1;\n    input2_bitwise = input2;\n  }\n  if (0x36 < subtractResult) {\n    return CONCAT44(input1_bitwise,input1_shifted);\n  }\n  result = input1_bitwise & 0xfffff | 0x100000;\n  if ((input1_bitwise & 0x80000000) != 0) {\n    condition2 = input1_shifted != 0;\n    input1_shifted = -input1_shifted;\n    result = -result - (uint)condition2;\n  }\n  input1_bitwise = input2_bitwise & 0xfffff | 0x100000;\n  if ((input2_bitwise & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    input1_bitwise = -input1_bitwise - (uint)condition2;\n  }\n  if (input2_shifted == subtractResult) {\n    input1_bitwise = input1_bitwise ^ 0x100000;\n    if (input2_shifted == 0) {\n      result = result ^ 0x100000;\n      input2_shifted = 1;\n    }\n    else {\n      subtractResult = subtractResult - 1;\n    }\n  }\n  input2_bitwise = -subtractResult + 0x20;\n  if ((int)subtractResult < 0x21) {\n    temp = input3 << (input2_bitwise & 0xff);\n    input3 = input3 >> (subtractResult & 0xff);\n    carry1 = input1_shifted + input3;\n    carryBit2 = input1_bitwise << (input2_bitwise & 0xff);\n    input2_bitwise = carry1 + carryBit2;\n    result = result + CARRY4(input1_shifted,input3) + ((int)input1_bitwise >> (subtractResult & 0xff)) +\n            (uint)CARRY4(carry1,carryBit2);\n  }\n  else {\n    temp = input1_bitwise << (-subtractResult + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp = temp | 2;\n    }\n    input1_bitwise = (int)input1_bitwise >> (subtractResult - 0x20 & 0xff);\n    input2_bitwise = input1_shifted + input1_bitwise;\n    result = result + ((int)input1_bitwise >> 0x1f) + (uint)CARRY4(input1_shifted,input1_bitwise);\n  }\n  input2 = result & 0x80000000;\n  subtractResult = result;\n  if ((int)result < 0) {\n    condition2 = temp == 0;\n    temp = -temp;\n    subtractResult = -input2_bitwise;\n    input2_bitwise = -(uint)!condition2 - input2_bitwise;\n    subtractResult = -(uint)(condition2 <= subtractResult) - result;\n  }\n  if (0xfffff < subtractResult) {\n    input1_shifted = input2_shifted - 1;\n    if (0x1fffff < subtractResult) {\n      input1_shifted = subtractResult & 1;\n      subtractResult = subtractResult >> 1;\n      carryBit1 = (byte)input2_bitwise;\n      input2_bitwise = (uint)(input1_shifted != 0) << 0x1f | input2_bitwise >> 1;\n      temp = (uint)(carryBit1 & 1) << 0x1f | temp >> 1;\n      input1_shifted = input2_shifted;\n      if (0xffbfffff < input2_shifted * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition2 = 0x7fffffff < temp;\n    if (temp == 0x80000000) {\n      condition2 = (input2_bitwise & 1) != 0;\n    }\n    return CONCAT44(subtractResult + input1_shifted * 0x100000 + (uint)CARRY4(input2_bitwise,(uint)condition2) | input2,\n                    input2_bitwise + condition2);\n  }\n  condition1 = (temp & 0x80000000) != 0;\n  temp = temp << 1;\n  input1_shifted = input2_bitwise * 2;\n  condition2 = CARRY4(input2_bitwise,input2_bitwise);\n  input2_bitwise = input2_bitwise * 2 + (uint)condition1;\n  subtractResult = subtractResult * 2 + (uint)(condition2 || CARRY4(input1_shifted,(uint)condition1));\n  input1_shifted = input2_shifted - 2;\n  if ((subtractResult & 0x100000) != 0) goto LAB_08000268;\n  input1_bitwise = input2_bitwise;\n  input2_shifted = subtractResult;\n  if (subtractResult == 0) {\n    input1_bitwise = 0;\n    input2_shifted = input2_bitwise;\n  }\n  shiftAmount2 = LZCOUNT(input2_shifted);\n  if (subtractResult == 0) {\n    shiftAmount2 = shiftAmount2 + 0x20;\n  }\n  subtractResult = shiftAmount2 - 0xb;\n  condition3 = SBORROW4(subtractResult,0x20);\n  input2_bitwise = shiftAmount2 - 0x2b;\n  condition2 = (int)input2_bitwise < 0;\n  condition1 = input2_bitwise == 0;\n  if ((int)subtractResult < 0x20) {\n    condition3 = SCARRY4(input2_bitwise,0xc);\n    shiftAmount2 = shiftAmount2 + -0x1f;\n    condition2 = shiftAmount2 < 0;\n    condition1 = shiftAmount2 == 0;\n    input2_bitwise = subtractResult;\n    if (!condition1 && condition2 == condition3) {\n      input1_bitwise = input2_shifted << (subtractResult & 0xff);\n      input2_shifted = input2_shifted >> (0xcU - shiftAmount2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp = 0x20 - input2_bitwise;\n  }\n  input2_shifted = input2_shifted << (input2_bitwise & 0xff);\n  if (condition1 || condition2 != condition3) {\n    input2_shifted = input2_shifted | input1_bitwise >> (temp & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    input1_bitwise = input1_bitwise << (input2_bitwise & 0xff);\n  }\nLAB_080002e0:\n  if ((int)subtractResult <= (int)input1_shifted) {\n    return CONCAT44(input2_shifted + (input1_shifted - subtractResult) * 0x100000 | input2,input1_bitwise);\n  }\n  input2_bitwise = ~(input1_shifted - subtractResult);\n  if ((int)input2_bitwise < 0x1f) {\n    shiftAmount2 = input2_bitwise - 0x13;\n    if (shiftAmount2 != 0 && shiftAmount2 < 0 == SCARRY4(input2_bitwise - 0x1f,0xc)) {\n      return CONCAT44(result,input1_bitwise >> (0x20 - (0xcU - shiftAmount2) & 0xff) | input2_shifted << (0xcU - shiftAmount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    input2_bitwise = input2_bitwise + 1;\n    return CONCAT44(input2 | input2_shifted >> (input2_bitwise & 0xff),\n                    input1_bitwise >> (input2_bitwise & 0xff) | input2_shifted << (0x20 - input2_bitwise & 0xff));\n  }\n  return CONCAT44(result,input2_shifted >> (input2_bitwise - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "perform_arithmetic_operation_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftAmount1",
                "bVar2": "carryBit1",
                "uVar3": "carry1",
                "uVar4": "result",
                "uVar5": "carryBit2",
                "uVar6": "input2_bitwise",
                "uVar7": "input1_bitwise",
                "iVar8": "shiftAmount2",
                "uVar9": "input2_shifted",
                "uVar10": "input1_shifted",
                "uVar11": "subtractResult",
                "uVar12": "temp",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_unsigned_long_long_0800015c",
            "code": "\nulonglong calculateUnsignedLongLong_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int bitShift1;\n  byte carryBit;\n  uint result1;\n  uint result2;\n  uint lhs1;\n  int lhs1BitShifted;\n  uint lhs2;\n  uint rhs1;\n  uint rhs2;\n  uint difference;\n  uint lhsResult;\n  uint rhsResult;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  lhs2 = param_2 << 1;\n  rhs2 = param_4 << 1;\n  condition1 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  condition2 = condition1 && param_1 == param_3;\n  if (!condition1 || param_1 != param_3) {\n    condition2 = (lhs2 | param_1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (rhs2 | param_3) == 0;\n  }\n  lhs1BitShifted = (int)lhs2 >> 0x15;\n  if (!condition2) {\n    condition2 = lhs1BitShifted == -1;\n  }\n  bitShift1 = (int)rhs2 >> 0x15;\n  if (!condition2) {\n    condition2 = bitShift1 == -1;\n  }\n  if (condition2) {\n    if (lhs1BitShifted == -1 || bitShift1 == -1) {\n      rhs2 = param_4;\n      lhs2 = param_3;\n      if (lhs1BitShifted == -1) {\n        rhs2 = param_2;\n        lhs2 = param_1;\n      }\n      if (lhs1BitShifted != -1 || bitShift1 != -1) {\n        param_3 = lhs2;\n        param_4 = rhs2;\n      }\n      condition2 = (lhs2 | rhs2 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = rhs2 == param_4;\n      }\n      if (!condition2) {\n        rhs2 = rhs2 | 0x80000;\n      }\n      return CONCAT44(rhs2,lhs2);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((lhs2 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (lhs2 >> 0x15 == 0) {\n      condition2 = (param_1 & 0x80000000) != 0;\n      rhs2 = param_2 * 2 + (uint)condition2;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)condition2)) {\n        rhs2 = rhs2 | 0x80000000;\n      }\n      return CONCAT44(rhs2,param_1 << 1);\n    }\n    if (lhs2 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  lhs2 = lhs2 >> 0x15;\n  rhs2 = rhs2 >> 0x15;\n  difference = rhs2 - lhs2;\n  condition2 = difference != 0;\n  if (rhs2 < lhs2) {\n    difference = -difference;\n  }\n  rhs1 = param_1;\n  lhs1 = param_2;\n  if (condition2 && lhs2 <= rhs2) {\n    lhs2 = lhs2 + difference;\n    rhs1 = param_3;\n    lhs1 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(lhs1,rhs1);\n  }\n  rhs2 = lhs1 & 0xfffff | 0x100000;\n  if ((lhs1 & 0x80000000) != 0) {\n    condition2 = rhs1 != 0;\n    rhs1 = -rhs1;\n    rhs2 = -rhs2 - (uint)condition2;\n  }\n  lhs1 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    condition2 = param_3 != 0;\n    param_3 = -param_3;\n    lhs1 = -lhs1 - (uint)condition2;\n  }\n  if (lhs2 == difference) {\n    lhs1 = lhs1 ^ 0x100000;\n    if (lhs2 == 0) {\n      rhs2 = rhs2 ^ 0x100000;\n      lhs2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  rhsResult = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    lhsResult = param_3 << (rhsResult & 0xff);\n    param_3 = param_3 >> (difference & 0xff);\n    result1 = rhs1 + param_3;\n    result2 = lhs1 << (rhsResult & 0xff);\n    rhsResult = result1 + result2;\n    rhs2 = rhs2 + CARRY4(rhs1,param_3) + ((int)lhs1 >> (difference & 0xff)) +\n            (uint)CARRY4(result1,result2);\n  }\n  else {\n    lhsResult = lhs1 << (-difference + 0x40 & 0xff);\n    if (param_3 != 0) {\n      lhsResult = lhsResult | 2;\n    }\n    lhs1 = (int)lhs1 >> (difference - 0x20 & 0xff);\n    rhsResult = rhs1 + lhs1;\n    rhs2 = rhs2 + ((int)lhs1 >> 0x1f) + (uint)CARRY4(rhs1,lhs1);\n  }\n  param_2 = rhs2 & 0x80000000;\n  difference = rhs2;\n  if ((int)rhs2 < 0) {\n    condition2 = lhsResult == 0;\n    lhsResult = -lhsResult;\n    difference = -rhsResult;\n    rhsResult = -(uint)!condition2 - rhsResult;\n    difference = -(uint)(condition2 <= difference) - rhs2;\n  }\n  if (0xfffff < difference) {\n    rhs1 = lhs2 - 1;\n    if (0x1fffff < difference) {\n      rhs2 = difference & 1;\n      difference = difference >> 1;\n      carryBit = (byte)rhsResult;\n      rhsResult = (uint)(rhs2 != 0) << 0x1f | rhsResult >> 1;\n      lhsResult = (uint)(carryBit & 1) << 0x1f | lhsResult >> 1;\n      rhs1 = lhs2;\n      if (0xffbfffff < lhs2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition2 = 0x7fffffff < lhsResult;\n    if (lhsResult == 0x80000000) {\n      condition2 = (rhsResult & 1) != 0;\n    }\n    return CONCAT44(difference + rhs1 * 0x100000 + (uint)CARRY4(rhsResult,(uint)condition2) | param_2,\n                    rhsResult + condition2);\n  }\n  condition1 = (lhsResult & 0x80000000) != 0;\n  lhsResult = lhsResult << 1;\n  rhs1 = rhsResult * 2;\n  condition2 = CARRY4(rhsResult,rhsResult);\n  rhsResult = rhsResult * 2 + (uint)condition1;\n  difference = difference * 2 + (uint)(condition2 || CARRY4(rhs1,(uint)condition1));\n  rhs1 = lhs2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  lhs1 = rhsResult;\n  lhs2 = difference;\n  if (difference == 0) {\n    lhs1 = 0;\n    lhs2 = rhsResult;\n  }\n  lhs1BitShifted = LZCOUNT(lhs2);\n  if (difference == 0) {\n    lhs1BitShifted = lhs1BitShifted + 0x20;\n  }\n  rhsResult = lhs1BitShifted - 0xb;\n  condition3 = SBORROW4(rhsResult,0x20);\n  difference = lhs1BitShifted - 0x2b;\n  condition2 = (int)difference < 0;\n  condition1 = difference == 0;\n  if ((int)rhsResult < 0x20) {\n    condition3 = SCARRY4(difference,0xc);\n    lhs1BitShifted = lhs1BitShifted + -0x1f;\n    condition2 = lhs1BitShifted < 0;\n    condition1 = lhs1BitShifted == 0;\n    difference = rhsResult;\n    if (!condition1 && condition2 == condition3) {\n      lhs1 = lhs2 << (rhsResult & 0xff);\n      lhs2 = lhs2 >> (0xcU - lhs1BitShifted & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    lhsResult = 0x20 - difference;\n  }\n  lhs2 = lhs2 << (difference & 0xff);\n  if (condition1 || condition2 != condition3) {\n    lhs2 = lhs2 | lhs1 >> (lhsResult & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    lhs1 = lhs1 << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)rhsResult <= (int)rhs1) {\n    return CONCAT44(lhs2 + (rhs1 - rhsResult) * 0x100000 | param_2,lhs1);\n  }\n  difference = ~(rhs1 - rhsResult);\n  if ((int)difference < 0x1f) {\n    lhs1BitShifted = difference - 0x13;\n    if (lhs1BitShifted != 0 && lhs1BitShifted < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(rhs2,lhs1 >> (0x20 - (0xcU - lhs1BitShifted) & 0xff) | lhs2 << (0xcU - lhs1BitShifted & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(param_2 | lhs2 >> (difference & 0xff),\n                    lhs1 >> (difference & 0xff) | lhs2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(rhs2,lhs2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_unsigned_long_long_0800015c",
                "iVar1": "bitShift1",
                "bVar2": "carryBit",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "lhs1",
                "iVar6": "lhs1BitShifted",
                "uVar7": "lhs2",
                "uVar8": "rhs1",
                "uVar9": "rhs2",
                "uVar10": "difference",
                "uVar11": "lhsResult",
                "uVar12": "rhsResult",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "shift_and_concatenate_080003d4",
            "code": "\nulonglong shift_and_concatenate_080003d4(uint input)\n\n{\n  uint upper_bits;\n  uint shift_amount;\n  int bit_count;\n  uint upper_limit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  upper_bits = 0;\n  bit_count = LZCOUNT(input);\n  upper_limit = bit_count + 0x15;\n  is_overflow = SBORROW4(upper_limit,0x20);\n  shift_amount = bit_count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (upper_limit < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = bit_count + 1 == 0;\n    shift_amount = upper_limit;\n    if (!is_zero && is_overflow == false) {\n      upper_bits = input << upper_limit;\n      input = input >> (0xcU - (bit_count + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    upper_bits = 0 << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if (upper_limit < 0x433) {\n    return CONCAT44(input + (0x432 - upper_limit) * 0x100000,upper_bits);\n  }\n  shift_amount = ~(0x432 - upper_limit);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  bit_count = shift_amount - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input >> (shift_amount & 0xff),\n                    upper_bits >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(upper_bits >> (0x20 - (0xcU - bit_count) & 0xff) | input << (0xcU - bit_count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "shift_and_concatenate_080003d4",
                "param_1": "input",
                "uVar1": "upper_bits",
                "uVar2": "shift_amount",
                "iVar3": "bit_count",
                "uVar4": "upper_limit",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "calculate_shifted_value_080003f4",
            "code": "\nulonglong calculateShiftedValue_080003f4(uint input)\n\n{\n  uint result;\n  uint absoluteValue;\n  uint shiftAmount;\n  int leadingZeros;\n  uint effectiveShift;\n  uint signBit;\n  uint remainingBits;\n  bool isPositive;\n  bool isZero;\n  bool isOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absoluteValue = input;\n  if ((int)signBit < 0) {\n    absoluteValue = -input;\n  }\n  result = 0;\n  leadingZeros = LZCOUNT(absoluteValue);\n  effectiveShift = leadingZeros + 0x15;\n  isOverflow = SBORROW4(effectiveShift,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isPositive = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (effectiveShift < 0x20) {\n    isOverflow = SCARRY4(shiftAmount,0xc);\n    isPositive = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = effectiveShift;\n    if (!isZero && isOverflow == false) {\n      result = absoluteValue << effectiveShift;\n      absoluteValue = absoluteValue >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isPositive != isOverflow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absoluteValue = absoluteValue << (shiftAmount & 0xff);\n  if (isZero || isPositive != isOverflow) {\n    absoluteValue = absoluteValue | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isPositive != isOverflow) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if (effectiveShift < 0x433) {\n    return CONCAT44(absoluteValue + (0x432 - effectiveShift) * 0x100000 | signBit,result);\n  }\n  shiftAmount = ~(0x432 - effectiveShift);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absoluteValue >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absoluteValue >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | absoluteValue << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,result >> (0x20 - (0xcU - leadingZeros) & 0xff) | absoluteValue << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "absoluteValue",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "effectiveShift",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isPositive",
                "bVar8": "isZero",
                "bVar9": "isOverflow"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "bitwise_transformation_08000418",
            "code": "\nulonglong bitwiseTransformation_08000418(uint input,undefined4 size,undefined4 reserved,uint mask)\n\n{\n  uint bitMask;\n  uint shiftedInput;\n  uint result_1;\n  uint shiftedSize;\n  uint temp;\n  int bitCount;\n  uint shift;\n  uint constant;\n  bool isNegative;\n  bool isMaskZero;\n  bool isShiftNegative;\n  \n  temp = input << 1;\n  isMaskZero = temp == 0;\n  bitMask = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedSize = (uint)((int)temp >> 3) >> 1;\n  result_1 = bitMask | shiftedSize;\n  input = input << 0x1d;\n  if (!isMaskZero) {\n    mask = temp & 0xff000000;\n    isMaskZero = mask == 0;\n  }\n  if (!isMaskZero) {\n    isMaskZero = mask == 0xff000000;\n  }\n  if (!isMaskZero) {\n    return CONCAT44(result_1,input) ^ 0x3800000000000000;\n  }\n  if ((temp & 0xffffff) == 0) {\n    return CONCAT44(result_1,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result_1,input) | 0x8000000000000;\n  }\n  shiftedInput = input;\n  temp = shiftedSize;\n  if (shiftedSize == 0) {\n    shiftedInput = 0;\n    temp = input;\n  }\n  bitCount = LZCOUNT(temp);\n  if (shiftedSize == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shift = bitCount - 0xb;\n  isShiftNegative = SBORROW4(shift,0x20);\n  shiftedSize = bitCount - 0x2b;\n  isMaskZero = (int)shiftedSize < 0;\n  isNegative = shiftedSize == 0;\n  if ((int)shift < 0x20) {\n    isShiftNegative = SCARRY4(shiftedSize,0xc);\n    bitCount = bitCount + -0x1f;\n    isMaskZero = bitCount < 0;\n    isNegative = bitCount == 0;\n    shiftedSize = shift;\n    if (!isNegative && isMaskZero == isShiftNegative) {\n      shiftedInput = temp << (shift & 0xff);\n      temp = temp >> (0xcU - bitCount & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isNegative || isMaskZero != isShiftNegative) {\n    constant = 0x20 - shiftedSize;\n  }\n  temp = temp << (shiftedSize & 0xff);\n  if (isNegative || isMaskZero != isShiftNegative) {\n    temp = temp | shiftedInput >> (constant & 0xff);\n  }\n  if (isNegative || isMaskZero != isShiftNegative) {\n    shiftedInput = shiftedInput << (shiftedSize & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift < 0x381) {\n    return CONCAT44(temp + (0x380 - shift) * 0x100000 | bitMask,shiftedInput);\n  }\n  shiftedSize = ~(0x380 - shift);\n  if (0x1e < (int)shiftedSize) {\n    return CONCAT44(result_1,temp >> (shiftedSize - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftedSize - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftedSize - 0x1f,0xc)) {\n    shiftedSize = shiftedSize + 1;\n    return CONCAT44(bitMask | temp >> (shiftedSize & 0xff),\n                    shiftedInput >> (shiftedSize & 0xff) | temp << (0x20 - shiftedSize & 0xff));\n  }\n  return CONCAT44(result_1,shiftedInput >> (0x20 - (0xcU - bitCount) & 0xff) | temp << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "bitwise_transformation_08000418",
                "param_1": "input",
                "param_2": "size",
                "param_3": "reserved",
                "param_4": "mask",
                "uVar1": "bitMask",
                "uVar2": "shiftedInput",
                "uVar3": "result_1",
                "uVar4": "shiftedSize",
                "uVar5": "temp",
                "iVar6": "bitCount",
                "uVar7": "shift",
                "in_r12": "constant",
                "bVar8": "isNegative",
                "bVar9": "isMaskZero",
                "bVar10": "isShiftNegative"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "perform_calculation_080004c8",
            "code": "\nulonglong performCalculation_080004c8(undefined4 inputValue1,uint inputValue2,uint inputValue3,uint inputValue4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int iterator;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool borrowFlag;\n  ulonglong concatenatedValue;\n  \n  concatenatedValue = CONCAT44(inputValue2,inputValue1);\n  temp5 = 0x7ff;\n  temp2 = inputValue2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp4 = inputValue4 >> 0x14 & 0x7ff;\n    flag1 = temp4 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp4 == 0x7ff;\n  }\n  if (flag1) {\n    concatenatedValue = FUN_080006a4();\n  }\n  temp1 = (uint)(concatenatedValue >> 0x20);\n  iterator = temp2 + temp4;\n  temp2 = temp1 ^ inputValue4;\n  temp1 = temp1 & ~(temp5 << 0x15);\n  inputValue4 = inputValue4 & ~(temp5 << 0x15);\n  flag1 = ((uint)concatenatedValue | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (inputValue3 | inputValue4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  inputValue4 = inputValue4 | 0x100000;\n  if (flag1) {\n    inputValue3 = (uint)concatenatedValue | inputValue3;\n    inputValue4 = (temp2 & 0x80000000 | temp1) ^ inputValue4;\n    temp2 = temp5 >> 1;\n    borrowFlag = SBORROW4(iterator,temp2);\n    temp3 = iterator - temp2;\n    flag1 = temp3 == 0;\n    temp1 = temp3;\n    if (!flag1 && (int)temp2 <= iterator) {\n      borrowFlag = SBORROW4(temp5,temp3);\n      temp1 = temp5 - temp3;\n      flag1 = temp5 == temp3;\n    }\n    if (!flag1 && (int)temp1 < 0 == borrowFlag) {\n      inputValue4 = inputValue4 | temp3 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == borrowFlag) {\n      return CONCAT44(inputValue4,inputValue3);\n    }\n    inputValue4 = inputValue4 | 0x100000;\n    temp5 = 0;\n    borrowFlag = SBORROW4(temp3,1);\n    temp3 = temp3 - 1;\n    flag1 = temp3 == 0;\n    temp2 = temp3;\n  }\n  else {\n    result1 = (concatenatedValue & 0xffffffff) * (ulonglong)inputValue3;\n    concatenatedValue = (concatenatedValue & 0xffffffff) * (ulonglong)inputValue4 +\n             (ulonglong)temp1 * (ulonglong)inputValue3 + (result1 >> 0x20);\n    temp6 = (uint)concatenatedValue;\n    result2 = (ulonglong)temp1 * (ulonglong)inputValue4 + (concatenatedValue >> 0x20);\n    temp5 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp6 = temp6 | 1;\n    }\n    temp3 = (iterator + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp6 & 0x80000000) != 0;\n      temp6 = temp6 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp5,temp5) || CARRY4(temp5 * 2,(uint)flag1)),\n                       temp5 * 2 + (uint)flag1);\n    }\n    inputValue4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    inputValue3 = (uint)result2 << 0xb | temp6 >> 0x15;\n    temp5 = temp6 * 0x800;\n    flag2 = 0xfc < temp3;\n    borrowFlag = SBORROW4(temp3,0xfd);\n    temp1 = temp3 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      borrowFlag = SBORROW4(temp1,0x700);\n      temp2 = temp3 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp5;\n      if (temp5 == 0x80000000) {\n        flag1 = (temp6 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(inputValue4 + temp3 * 0x100000 + (uint)CARRY4(inputValue3,(uint)flag1),inputValue3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == borrowFlag) {\n    return (ulonglong)(inputValue4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp3,0x36);\n  flag1 = (int)(temp3 + 0x36) < 0;\n  borrowFlag = temp3 == 0xffffffca;\n  if (borrowFlag || flag1 != flag2) {\n    inputValue3 = 0;\n  }\n  if (borrowFlag || flag1 != flag2) {\n    inputValue4 = inputValue4 & 0x80000000;\n  }\n  if (borrowFlag || flag1 != flag2) {\n    return CONCAT44(inputValue4,inputValue3);\n  }\n  temp2 = -temp3;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp3 = inputValue3 >> (temp1 & 0xff) | inputValue4 << (0x20 - temp1 & 0xff);\n    temp2 = (inputValue4 >> (temp1 & 0xff) & ~((inputValue4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp5 | inputValue3 << (0x20 - temp1 & 0xff) | temp3 << 1) == 0) {\n      temp2 = temp2 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(inputValue4,temp2) & 0x80000000ffffffff;\n  }\n  iterator = temp2 - 0x14;\n  if (iterator == 0 || iterator < 0 != SCARRY4(temp1,0xc)) {\n    temp6 = inputValue3 << (temp3 + 0x20 & 0xff);\n    temp1 = inputValue3 >> (temp2 & 0xff) | inputValue4 << (temp3 + 0x20 & 0xff);\n    temp3 = temp1 + -((int)temp6 >> 0x1f);\n    if ((temp5 | temp6 << 1) == 0) {\n      temp3 = temp3 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44((inputValue4 & 0x80000000) +\n                    ((inputValue4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp6 >> 0x1f)),temp3);\n  }\n  temp2 = 0xc - iterator;\n  temp3 = inputValue3 << (temp2 & 0xff);\n  temp2 = inputValue3 >> (0x20 - temp2 & 0xff) | inputValue4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp3 >> 0x1f);\n  if ((temp5 | temp3 << 1) == 0) {\n    temp1 = temp1 & ~(temp3 >> 0x1f);\n  }\n  return CONCAT44((inputValue4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp3 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "perform_calculation_080004c8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_4": "inputValue4",
                "param_3": "inputValue3",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "iterator",
                "uVar6": "temp3",
                "unaff_r5": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "borrowFlag",
                "uVar12": "concatenatedValue"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_shifted_result_080006a4",
            "code": "\nulonglong calculate_shifted_result_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint input1_shifted;\n  uint input2_shifted;\n  uint mask1;\n  uint mask2;\n  uint shift_amount;\n  bool is_zero;\n  \n  mask1 = shift_amount & input4 >> 0x14;\n  if (input2_shifted != shift_amount && mask1 != shift_amount) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input2_shifted == 0) {\n      mask2 = input2 & 0x80000000;\n      do {\n        input1_shifted = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(input1_shifted != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | mask2;\n      if (mask1 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      mask1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(mask1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  mask2 = input2;\n  if (((!is_zero) && ((input2_shifted != shift_amount || ((input1 | input2 << 0xc) == 0)))) &&\n     ((mask1 != shift_amount || (input1 = input3, mask2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(mask2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_shifted_result_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "input1_shifted",
                "unaff_r4": "input2_shifted",
                "uVar2": "mask1",
                "uVar3": "mask2",
                "in_r12": "shift_amount",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_number_0800071c",
            "code": "\nulonglong calculateFloatingPointNumber_0800071c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint unaff_r5;\n  uint temp10;\n  uint result_low;\n  uint subtraction;\n  uint temp13;\n  bool isZero;\n  bool isEqual;\n  bool isNegative;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp13 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  isZero = temp7 == 0;\n  if (!isZero) {\n    unaff_r5 = input4 >> 0x14 & 0x7ff;\n    isZero = unaff_r5 == 0;\n  }\n  if (!isZero) {\n    isZero = temp7 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = unaff_r5 == 0x7ff;\n  }\n  if (isZero) {\n    result = FUN_0800088a();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  result_low = (uint)result;\n  difference = temp7 - unaff_r5;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    isNegative = SCARRY4(difference,temp13 >> 1);\n    temp9 = difference + (temp13 >> 1);\n    isZero = (int)temp9 < 0;\n    isEqual = temp9 == 0;\n    if (!isEqual && isZero == isNegative) {\n      isNegative = SBORROW4(temp13,temp9);\n      isZero = (int)(temp13 - temp9) < 0;\n      isEqual = temp13 == temp9;\n    }\n    if (!isEqual && isZero == isNegative) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!isEqual && isZero == isNegative) {\n      return CONCAT44(temp7,result_low);\n    }\n    temp7 = temp7 | 0x100000;\n    temp13 = 0;\n    isEqual = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    isZero = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp13 = input3 << 8;\n    temp10 = (temp9 << 0xc) >> 4 | 0x10000000 | result_low >> 0x18;\n    result_low = result_low * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    isZero = temp3 <= temp10;\n    if (temp10 == temp3) {\n      isZero = temp13 <= result_low;\n    }\n    difference = difference + (uint)isZero;\n    temp9 = difference + 0x3fd;\n    if (isZero == false) {\n      temp3 = temp3 >> 1;\n      temp13 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp13 >> 1;\n    }\n    subtraction = result_low - temp13;\n    temp10 = (temp10 - temp3) - (uint)(result_low < temp13);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp13 >> 1;\n    result_low = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      isZero = temp1 <= subtraction;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)isZero) {\n        subtraction = subtraction - temp1;\n        result_low = result_low | temp3;\n        temp10 = (temp10 - temp4) - (uint)!isZero;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      isEqual = temp1 <= subtraction;\n      isZero = temp10 - temp5 < (uint)isEqual;\n      temp13 = temp10;\n      if (temp5 < temp10 || isZero) {\n        subtraction = subtraction - temp1;\n        temp13 = (temp10 - temp5) - (uint)!isEqual;\n      }\n      if (temp5 < temp10 || isZero) {\n        result_low = result_low | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      isEqual = temp2 <= subtraction;\n      isZero = temp13 - temp10 < (uint)isEqual;\n      temp5 = temp13;\n      if (temp10 < temp13 || isZero) {\n        subtraction = subtraction - temp2;\n        temp5 = (temp13 - temp10) - (uint)!isEqual;\n      }\n      if (temp10 < temp13 || isZero) {\n        result_low = result_low | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      isEqual = temp1 <= subtraction;\n      isZero = temp5 - temp6 < (uint)isEqual;\n      temp10 = temp5;\n      if (temp6 < temp5 || isZero) {\n        subtraction = subtraction - temp1;\n        temp10 = (temp5 - temp6) - (uint)!isEqual;\n      }\n      if (temp6 < temp5 || isZero) {\n        result_low = result_low | temp3 >> 3;\n      }\n      temp13 = temp10 | subtraction;\n      if (temp13 == 0) break;\n      temp10 = temp10 << 4 | subtraction >> 0x1c;\n      subtraction = subtraction << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | result_low;\n        result_low = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | result_low;\n      result_low = 0;\n    }\nLAB_0800083a:\n    isNegative = 0xfc < temp9;\n    isEqual = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    isZero = temp4 == 0;\n    temp3 = temp4;\n    if (isNegative && !isZero) {\n      isNegative = 0x6ff < temp4;\n      isEqual = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      isZero = temp4 == 0x700;\n    }\n    if (!isNegative || isZero) {\n      isZero = temp6 <= temp10;\n      if (temp10 == temp6) {\n        isZero = temp1 <= subtraction;\n      }\n      if (temp10 == temp6 && subtraction == temp1) {\n        isZero = (result_low & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(result_low,(uint)isZero),result_low + isZero);\n    }\n  }\n  if (!isZero && (int)temp3 < 0 == isEqual) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(temp9,0x36);\n  isZero = (int)(temp9 + 0x36) < 0;\n  isEqual = temp9 == 0xffffffca;\n  if (isEqual || isZero != isNegative) {\n    result_low = 0;\n  }\n  if (isEqual || isZero != isNegative) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (isEqual || isZero != isNegative) {\n    return CONCAT44(temp7,result_low);\n  }\n  temp3 = -temp9;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = result_low >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    temp9 = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp13 | result_low << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp10,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = result_low << (temp9 & 0xff);\n    result_low = result_low >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = result_low + -((int)temp3 >> 0x1f);\n    if ((temp13 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(result_low,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp10 = result_low << (temp9 + 0x20 & 0xff);\n  result_low = result_low >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = result_low + -((int)temp10 >> 0x1f);\n  if ((temp13 | temp10 << 1) == 0) {\n    temp9 = temp9 & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(result_low,-((int)temp10 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_number_0800071c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "difference",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "result_low",
                "uVar12": "subtraction",
                "uVar13": "temp13",
                "bVar14": "isZero",
                "bVar15": "isEqual",
                "bVar16": "isNegative",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "floating_point_to_binary_0800088a",
            "code": "\nulonglong floatingPointToBinary_0800088a(uint sign,uint exponent,uint mantissa,uint mantissa2)\n\n{\n  uint signBit;\n  uint exponent2;\n  uint exponentAndMantissa;\n  uint newExponent;\n  uint exponentMask;\n  bool isZero;\n  \n  exponentAndMantissa = exponentMask & mantissa2 >> 0x14;\n  newExponent = exponent;\n  if (exponent2 != exponentMask || exponentAndMantissa != exponentMask) {\n    if (exponent2 == exponentMask) {\n      if (((sign | exponent << 0xc) == 0) && (sign = mantissa, newExponent = mantissa2, exponentAndMantissa != exponentMask)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((exponent ^ mantissa2) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (exponentAndMantissa == exponentMask) {\n      sign = mantissa;\n      newExponent = mantissa2;\n      if ((mantissa | mantissa2 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((exponent ^ mantissa2) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (sign | exponent << 1) == 0;\n      if (!isZero) {\n        isZero = (mantissa | mantissa2 << 1) == 0;\n      }\n      if (!isZero) {\n        if (exponent2 == 0) {\n          newExponent = exponent & 0x80000000;\n          do {\n            signBit = sign & 0x80000000;\n            sign = sign << 1;\n            exponent = exponent * 2 + (uint)(signBit != 0);\n          } while ((exponent & 0x100000) == 0);\n          exponent = exponent | newExponent;\n          if (exponentAndMantissa != 0) {\n            return CONCAT44(exponent,sign);\n          }\n        }\n        do {\n          newExponent = mantissa & 0x80000000;\n          mantissa = mantissa << 1;\n          mantissa2 = mantissa2 * 2 + (uint)(newExponent != 0);\n        } while ((mantissa2 & 0x100000) == 0);\n        return CONCAT44(exponent,sign);\n      }\n      if ((sign | exponent << 1) != 0) goto LAB_080006fc;\n      if ((mantissa | mantissa2 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(newExponent,sign) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "floating_point_to_binary_0800088a",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "mantissa",
                "param_4": "mantissa2",
                "uVar1": "signBit",
                "unaff_r4": "exponent2",
                "uVar2": "exponentAndMantissa",
                "uVar3": "newExponent",
                "in_r12": "exponentMask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "compare_parameters_080008fc",
            "code": "\nuint compare_parameters_080008fc(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isLessOrEqualToZero;\n  \n  if (((int)(value_2 << 1) >> 0x15 == -1 || (int)(value_4 << 1) >> 0x15 == -1) &&\n     ((((int)(value_2 << 1) >> 0x15 == -1 && ((value_1 | value_2 << 0xc) != 0)) ||\n      (((int)(value_4 << 1) >> 0x15 == -1 && ((value_3 | value_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value_1 | value_2 << 1) == 0;\n  if (isZero) {\n    isZero = (value_3 | value_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value_2 == value_4;\n  }\n  if (isZero) {\n    isZero = value_1 == value_3;\n  }\n  if (!isZero) {\n    result = value_2 ^ value_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value_2 == value_4;\n    }\n    isLessOrEqualToZero = -1 < (int)result && value_4 <= value_2;\n    if (isZero) {\n      isLessOrEqualToZero = value_3 <= value_1;\n    }\n    value_4 = (int)value_4 >> 0x1f;\n    if (!isLessOrEqualToZero) {\n      value_4 = ~value_4;\n    }\n    return value_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "compare_parameters_080008fc",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isLessOrEqualToZero"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_function_08000978",
            "code": "\nvoid execute_function_08000978(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  FUN_08000988(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_function_08000978",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "initialize_08000988",
            "code": "\nundefined4 initialize_08000988(undefined4 input_data)\n\n{\n  FUN_080008fc();\n  return input_data;\n}\n\n",
            "renaming": {
                "FUN_08000988": "initialize_08000988",
                "param_1": "input_data"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "is_nonzero_value_present_08000998",
            "code": "\nbool is_nonzero_value_present_08000998(void)\n\n{\n  char input_value;\n  \n  FUN_08000988();\n  return input_value != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "is_nonzero_value_present_08000998",
                "in_ZR": "input_value"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_null_terminated_080009ac",
            "code": "\nbool check_if_null_terminated_080009ac(void)\n\n{\n  char input_character;\n  \n  FUN_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_null_terminated_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_zero_flag_and_carry_flag_080009c0",
            "code": "\nbool check_zero_flag_and_carry_flag_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000988();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_zero_flag_and_carry_flag_080009c0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_zero_condition_080009d4",
            "code": "\nbool check_zero_condition_080009d4(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_result;\n  \n  FUN_08000978();\n  return !(bool)is_carry_result || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_zero_condition_080009d4",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_result"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "is_null_character_080009e8",
            "code": "\nbool isNullCharacter_080009e8(void)\n\n{\n  char inputCharacter;\n  \n  FUN_08000978();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "is_null_character_080009e8",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_magnitude_080009fc",
            "code": "\nuint calculateMagnitude_080009fc(uint inputValue,uint shiftAmount)\n\n{\n  uint result;\n  uint scaledValue;\n  uint shiftedValue;\n  uint adjustedValue;\n  bool isZero;\n  bool isLessThan;\n  \n  scaledValue = shiftAmount * 2;\n  isLessThan = scaledValue < 0x70000000;\n  shiftedValue = scaledValue + 0x90000000;\n  result = shiftedValue;\n  if (!isLessThan) {\n    adjustedValue = scaledValue + 0x8fe00000;\n    result = adjustedValue;\n  }\n  isZero = result == 0;\n  if (!isLessThan && shiftedValue >= 0x200000) {\n    isZero = adjustedValue == 0x1fc00000;\n  }\n  if (((isLessThan || shiftedValue < 0x200000) || 0x1fc00000 < adjustedValue) || isZero) {\n    if ((shiftAmount & 0x40000000) != 0) {\n      if (((int)scaledValue >> 0x15 == -1) && ((inputValue | shiftAmount << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return shiftAmount & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(scaledValue + 0x92e00000) < 0 != SCARRY4(shiftedValue,0x2e00000)) {\n      return shiftAmount & 0x80000000;\n    }\n    scaledValue = 0x18 - (scaledValue + 0x92e00000 >> 0x15);\n    result = inputValue >> (scaledValue & 0xff);\n    if (inputValue << (0x20 - scaledValue & 0xff) != 0) {\n      result = result | 1;\n    }\n    shiftedValue = shiftAmount & 0x1fffff | 0x100000;\n    inputValue = result | shiftedValue << (0x20 - scaledValue & 0xff);\n    shiftedValue = (shiftedValue >> (scaledValue & 0xff)) << 1;\n  }\n  result = (shiftAmount & 0x80000000 | inputValue >> 0x1d) + shiftedValue * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_magnitude_080009fc",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "uVar1": "result",
                "uVar2": "scaledValue",
                "uVar3": "shiftedValue",
                "in_r12": "adjustedValue",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_float_value_08000aa4",
            "code": "\nuint calculateFloatValue_08000aa4(uint inputVal,uint flag,undefined4 undefinedVal,uint outputVal)\n\n{\n  int upperBits;\n  int overflowBits;\n  uint val1;\n  uint val2;\n  uint result1;\n  uint temp1;\n  uint temp2;\n  bool isEqual;\n  \n  val1 = flag ^ 0x80000000;\n  result1 = inputVal << 1;\n  isEqual = result1 == 0;\n  if (!isEqual) {\n    outputVal = flag << 1;\n    isEqual = outputVal == 0;\n  }\n  if (!isEqual) {\n    isEqual = result1 == outputVal;\n  }\n  upperBits = (int)result1 >> 0x18;\n  if (!isEqual) {\n    isEqual = upperBits == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)outputVal >> 0x18 == -1;\n  }\n  if (isEqual) {\n    overflowBits = (int)(flag << 1) >> 0x18;\n    if (upperBits == -1 || overflowBits == -1) {\n      result1 = val1;\n      if (upperBits == -1) {\n        result1 = inputVal;\n      }\n      if (upperBits != -1 || overflowBits != -1) {\n        val1 = result1;\n      }\n      isEqual = (result1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (val1 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = result1 == val1;\n      }\n      if (!isEqual) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((inputVal ^ val1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        inputVal = val1;\n      }\n      return inputVal;\n    }\n    if (inputVal != val1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      val1 = inputVal << 1;\n      if ((inputVal & 0x80000000) != 0) {\n        val1 = val1 | 0x80000000;\n      }\n      return val1;\n    }\n    if (result1 < 0xfe000000) {\n      return inputVal + 0x800000;\n    }\n    inputVal = inputVal & 0x80000000;\nLAB_08000bde:\n    return inputVal | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  outputVal = outputVal >> 0x18;\n  temp2 = outputVal - result1;\n  isEqual = temp2 != 0;\n  temp1 = result1;\n  if (isEqual && result1 <= outputVal) {\n    temp1 = result1 + temp2;\n  }\n  if (isEqual && result1 <= outputVal) {\n    val1 = val1 ^ inputVal;\n  }\n  if (isEqual && result1 <= outputVal) {\n    inputVal = inputVal ^ val1;\n  }\n  if (isEqual && result1 <= outputVal) {\n    val1 = val1 ^ inputVal;\n  }\n  if (outputVal < result1) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return inputVal;\n  }\n  result1 = inputVal & 0xffffff | 0x800000;\n  if ((inputVal & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  val2 = val1 & 0xffffff | 0x800000;\n  if ((val1 & 0x80000000) != 0) {\n    val2 = -val2;\n  }\n  if (temp1 == temp2) {\n    val2 = val2 ^ 0x800000;\n    if (temp1 == 0) {\n      result1 = result1 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result1 = result1 + ((int)val2 >> (temp2 & 0xff));\n  val2 = val2 << (0x20 - temp2 & 0xff);\n  inputVal = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    isEqual = val2 != 0;\n    val2 = -val2;\n    result1 = -result1 - (uint)isEqual;\n  }\n  if (result1 < 0x800000) {\n    val1 = val2 & 0x80000000;\n    val2 = val2 << 1;\n    result1 = result1 * 2 + (uint)(val1 != 0);\n    val1 = temp1 - 2;\n    if ((result1 & 0x800000) == 0) {\n      temp2 = LZCOUNT(result1) - 8;\n      result1 = result1 << (temp2 & 0xff);\n      if ((int)val1 < (int)temp2) {\n        result1 = result1 >> (-(val1 - temp2) & 0xff);\n      }\n      else {\n        result1 = result1 + (val1 - temp2) * 0x800000;\n      }\n      return result1 | inputVal;\n    }\n  }\n  else {\n    val1 = temp1 - 1;\n    if (0xffffff < result1) {\n      val1 = result1 & 1;\n      result1 = result1 >> 1;\n      val2 = (uint)(val1 != 0) << 0x1f | val2 >> 1;\n      val1 = temp1;\n      if (0xfd < temp1) goto LAB_08000bde;\n    }\n  }\n  result1 = result1 + val1 * 0x800000 + (uint)(0x7fffffff < val2);\n  if (val2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | inputVal;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_float_value_08000aa4",
                "param_1": "inputVal",
                "param_2": "flag",
                "param_3": "undefinedVal",
                "param_4": "outputVal",
                "iVar1": "upperBits",
                "iVar2": "overflowBits",
                "uVar3": "val1",
                "uVar4": "val2",
                "uVar5": "result1",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_08000aa8",
            "code": "\nuint calculateFloatingPoint_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint shiftedResult1;\n  uint shiftedResult2;\n  uint difference;\n  bool isZero;\n  \n  shiftedResult1 = input1 << 1;\n  isZero = shiftedResult1 == 0;\n  if (!isZero) {\n    input4 = input2 << 1;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedResult1 == input4;\n  }\n  shiftedInput1 = (int)shiftedResult1 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      shiftedResult1 = input2;\n      if (shiftedInput1 == -1) {\n        shiftedResult1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = shiftedResult1;\n      }\n      isZero = (shiftedResult1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedResult1 == input2;\n      }\n      if (!isZero) {\n        shiftedResult1 = shiftedResult1 | 0x400000;\n      }\n      return shiftedResult1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shiftedResult1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shiftedResult1 & 0xff000000) == 0) {\n      shiftedResult1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shiftedResult1 = shiftedResult1 | 0x80000000;\n      }\n      return shiftedResult1;\n    }\n    if (shiftedResult1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  shiftedResult1 = shiftedResult1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shiftedResult1;\n  isZero = difference != 0;\n  shiftedResult2 = shiftedResult1;\n  if (isZero && shiftedResult1 <= input4) {\n    shiftedResult2 = shiftedResult1 + difference;\n  }\n  if (isZero && shiftedResult1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && shiftedResult1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && shiftedResult1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shiftedResult1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedResult1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedResult1 = -shiftedResult1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shiftedResult2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shiftedResult2 == 0) {\n      shiftedResult1 = shiftedResult1 ^ 0x800000;\n      shiftedResult2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = shiftedResult1 & 0x80000000;\n  if ((int)shiftedResult1 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    shiftedResult1 = -shiftedResult1 - (uint)isZero;\n  }\n  if (shiftedResult1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    shiftedResult1 = shiftedResult1 * 2 + (uint)(difference != 0);\n    difference = shiftedResult2 - 2;\n    if ((shiftedResult1 & 0x800000) == 0) {\n      shiftedResult2 = leadingZeroCount(shiftedResult1) - 8;\n      shiftedResult1 = shiftedResult1 << (shiftedResult2 & 0xff);\n      if ((int)difference < (int)shiftedResult2) {\n        shiftedResult1 = shiftedResult1 >> (-(difference - shiftedResult2) & 0xff);\n      }\n      else {\n        shiftedResult1 = shiftedResult1 + (difference - shiftedResult2) * 0x800000;\n      }\n      return shiftedResult1 | input1;\n    }\n  }\n  else {\n    difference = shiftedResult2 - 1;\n    if (0xffffff < shiftedResult1) {\n      difference = shiftedResult1 & 1;\n      shiftedResult1 = shiftedResult1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shiftedResult2;\n      if (0xfd < shiftedResult2) goto LAB_08000bde;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    shiftedResult1 = shiftedResult1 & 0xfffffffe;\n  }\n  return shiftedResult1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "shiftedResult1",
                "uVar5": "shiftedResult2",
                "uVar6": "difference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_value_08000c08",
            "code": "\nuint calculateValue_08000c08(uint input)\n\n{\n  uint value;\n  uint shift;\n  int multiplier;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  value = LZCOUNT(input);\n  shift = value - 8;\n  multiplier = shift * -0x800000 + 0x4a800000;\n  if (7 < value) {\n    mask = 0 << (shift & 0xff);\n    value = multiplier + (input << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      value = value & 0xfffffffe;\n    }\n    return value;\n  }\n  shift = input << value + 0x18;\n  value = multiplier + ((input >> (0x20 - (value + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    value = value & ~(shift >> 0x1f);\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_value_08000c08",
                "param_1": "input",
                "uVar1": "value",
                "uVar2": "shift",
                "iVar3": "multiplier",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "calculate_unsigned_value_08000c10",
            "code": "\nuint calculateUnsignedValue_08000c10(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = inputValue & 0x80000000;\n  if ((int)signBit < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(inputValue);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  signBit = result + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "calculate_unsigned_value_08000c10",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "convert_float_to_regular_08000cb8",
            "code": "\nuint convertFloatToRegular_08000cb8(uint floatBits1,uint floatBits2,undefined4 undefined4Param,uint floatBits3)\n\n{\n  longlong longLongVar1;\n  uint resultBits;\n  uint floatBits1Extracted;\n  int sum;\n  int diff;\n  uint mulResultLow;\n  int mulResultHigh;\n  uint resultBitsMasked;\n  bool condition1;\n  bool condition2;\n  \n  floatBits1Extracted = floatBits1 >> 0x17 & 0xff;\n  condition1 = floatBits1Extracted == 0;\n  if (!condition1) {\n    floatBits3 = floatBits2 >> 0x17 & 0xff;\n    condition1 = floatBits3 == 0;\n  }\n  if (!condition1) {\n    condition1 = floatBits1Extracted == 0xff;\n  }\n  if (!condition1) {\n    condition1 = floatBits3 == 0xff;\n  }\n  if (condition1) {\n    floatBits3 = floatBits2 >> 0x17 & 0xff;\n    if (floatBits1Extracted == 0xff || floatBits3 == 0xff) {\n      condition1 = floatBits1 == 0 || floatBits1 == 0x80000000;\n      resultBits = floatBits2;\n      if (floatBits1 != 0 && floatBits1 != 0x80000000) {\n        condition1 = floatBits2 == 0;\n        resultBits = floatBits1;\n      }\n      if (!condition1) {\n        condition1 = floatBits2 == 0x80000000;\n      }\n      resultBitsMasked = resultBits;\n      if (((condition1) || ((floatBits1Extracted == 0xff && ((resultBits & 0x7fffff) != 0)))) ||\n         ((floatBits3 == 0xff && (resultBitsMasked = floatBits2, (floatBits2 & 0x7fffff) != 0)))) {\n        return resultBitsMasked | 0x7fc00000;\n      }\n      resultBits = resultBits ^ floatBits2;\n      goto LAB_08000e08;\n    }\n    condition1 = (floatBits1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (floatBits2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (floatBits1 ^ floatBits2) & 0x80000000;\n    }\n    condition1 = floatBits1Extracted == 0;\n    resultBits = floatBits1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        floatBits1 = floatBits1 << 1;\n        condition1 = (floatBits1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      floatBits1Extracted = floatBits1Extracted - 1;\n    }\n    floatBits1 = floatBits1 | resultBits;\n    condition1 = floatBits3 == 0;\n    resultBits = floatBits2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        floatBits2 = floatBits2 << 1;\n        condition1 = (floatBits2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      floatBits3 = floatBits3 - 1;\n    }\n    floatBits2 = floatBits2 | resultBits;\n  }\n  sum = floatBits1Extracted + floatBits3;\n  resultBitsMasked = floatBits1 ^ floatBits2;\n  floatBits1Extracted = floatBits1 << 9;\n  condition1 = floatBits1Extracted == 0;\n  if (!condition1) {\n    floatBits2 = floatBits2 << 9;\n    condition1 = floatBits2 == 0;\n  }\n  if (condition1) {\n    if (floatBits1Extracted == 0) {\n      floatBits2 = floatBits2 << 9;\n    }\n    resultBits = resultBitsMasked & 0x80000000 | floatBits1 & 0x7fffff | floatBits2 >> 9;\n    condition2 = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    condition1 = diff == 0;\n    mulResultHigh = diff;\n    if (!condition1 && 0x7e < sum) {\n      condition2 = SBORROW4(0xff,diff);\n      mulResultHigh = 0xff - diff;\n      condition1 = diff == 0xff;\n    }\n    if (!condition1 && mulResultHigh < 0 == condition2) {\n      resultBits = resultBits | diff * 0x800000;\n    }\n    if (!condition1 && mulResultHigh < 0 == condition2) {\n      return resultBits;\n    }\n    resultBits = resultBits | 0x800000;\n    mulResultLow = 0;\n    condition2 = SBORROW4(diff,1);\n    resultBitsMasked = sum - 0x80;\n    condition1 = resultBitsMasked == 0;\n    floatBits1Extracted = resultBitsMasked;\n  }\n  else {\n    longLongVar1 = (ulonglong)(floatBits1Extracted >> 5 | 0x8000000) * (ulonglong)(floatBits2 >> 5 | 0x8000000);\n    mulResultLow = (uint)longLongVar1;\n    resultBits = (uint)((ulonglong)longLongVar1 >> 0x20);\n    condition1 = resultBits < 0x800000;\n    if (condition1) {\n      resultBits = resultBits << 1;\n    }\n    if (condition1) {\n      resultBits = resultBits | mulResultLow >> 0x1f;\n      mulResultLow = mulResultLow << 1;\n    }\n    resultBits = resultBitsMasked & 0x80000000 | resultBits;\n    resultBitsMasked = (sum + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(resultBitsMasked,0xfd);\n    condition1 = resultBitsMasked == 0xfd;\n    floatBits1Extracted = resultBitsMasked - 0xfd;\n    if (resultBitsMasked < 0xfe) {\n      resultBits = resultBits + resultBitsMasked * 0x800000 + (uint)(0x7fffffff < mulResultLow);\n      if (mulResultLow == 0x80000000) {\n        resultBits = resultBits & 0xfffffffe;\n      }\n      return resultBits;\n    }\n  }\n  if (condition1 || (int)floatBits1Extracted < 0 != condition2) {\n    condition1 = (int)(resultBitsMasked + 0x19) < 0;\n    if (resultBitsMasked == 0xffffffe7 || condition1 != SCARRY4(resultBitsMasked,0x19)) {\n      resultBits = resultBits & 0x80000000;\n    }\n    if (resultBitsMasked != 0xffffffe7 && condition1 == SCARRY4(resultBitsMasked,0x19)) {\n      floatBits1Extracted = (resultBits << 1) >> (-resultBitsMasked & 0xff);\n      resultBitsMasked = resultBits << (resultBitsMasked + 0x20 & 0xff);\n      floatBits1Extracted = ((uint)((resultBits & 0x80000000) != 0) << 0x1f | floatBits1Extracted >> 1) + (uint)((byte)floatBits1Extracted & 1);\n      if ((mulResultLow | resultBitsMasked << 1) == 0) {\n        floatBits1Extracted = floatBits1Extracted & ~(resultBitsMasked >> 0x1f);\n      }\n      return floatBits1Extracted;\n    }\n    return resultBits;\n  }\nLAB_08000e08:\n  return resultBits & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "convert_float_to_regular_08000cb8",
                "param_1": "floatBits1",
                "param_2": "floatBits2",
                "param_3": "undefined4Param",
                "param_4": "floatBits3",
                "lVar1": "longLongVar1",
                "uVar2": "resultBits",
                "uVar3": "floatBits1Extracted",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "mulResultLow",
                "iVar7": "mulResultHigh",
                "uVar8": "resultBitsMasked",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_floating_point_value_08000e20",
            "code": "\nuint calculateFloatingPointValue_08000e20(uint inputValue1,uint inputValue2,undefined4 inputValue3,uint inputValue4)\n\n{\n  uint tempVar1;\n  uint exponent1;\n  int difference;\n  uint exponent2;\n  int tempVar2;\n  uint result;\n  bool isZero;\n  bool isOverflow;\n  bool isUnderflow;\n  \n  exponent1 = inputValue1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    inputValue4 = inputValue2 >> 0x17 & 0xff;\n    isZero = inputValue4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = inputValue4 == 0xff;\n  }\n  if (isZero) {\n    inputValue4 = inputValue2 >> 0x17 & 0xff;\n    result = inputValue1;\n    if (exponent1 == 0xff) {\n      if (((inputValue1 & 0x7fffff) != 0) || (result = inputValue2, inputValue4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (inputValue4 == 0xff) {\n        result = inputValue2;\n        if ((inputValue2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (inputValue1 ^ inputValue2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (inputValue1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (inputValue2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent1 == 0;\n        result = inputValue1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            inputValue1 = inputValue1 << 1;\n            isZero = (inputValue1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent1 = exponent1 - 1;\n        }\n        inputValue1 = inputValue1 | result;\n        isZero = inputValue4 == 0;\n        result = inputValue2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            inputValue2 = inputValue2 << 1;\n            isZero = (inputValue2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          inputValue4 = inputValue4 - 1;\n        }\n        inputValue2 = inputValue2 | result;\n        goto LAB_08000e38;\n      }\n      if ((inputValue1 & 0x7fffffff) == 0) {\n        if ((inputValue2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  else {\nLAB_08000e38:\n    difference = exponent1 - inputValue4;\n    if (inputValue2 << 9 == 0) {\n      inputValue1 = (inputValue1 ^ inputValue2) & 0x80000000 | inputValue1 & 0x7fffff;\n      isUnderflow = SCARRY4(difference,0x7f);\n      tempVar2 = difference + 0x7f;\n      isZero = tempVar2 < 0;\n      isOverflow = tempVar2 == 0;\n      if (!isOverflow && isZero == isUnderflow) {\n        isUnderflow = SBORROW4(0xff,tempVar2);\n        isZero = 0xff - tempVar2 < 0;\n        isOverflow = tempVar2 == 0xff;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        inputValue1 = inputValue1 | tempVar2 * 0x800000;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        return inputValue1;\n      }\n      inputValue1 = inputValue1 | 0x800000;\n      exponent1 = 0;\n      isOverflow = SBORROW4(tempVar2,1);\n      exponent2 = difference + 0x7e;\n      isZero = exponent2 == 0;\n      result = exponent2;\n    }\n    else {\n      tempVar1 = (inputValue2 << 9) >> 4 | 0x10000000;\n      exponent1 = (inputValue1 << 9) >> 4 | 0x10000000;\n      inputValue1 = (inputValue1 ^ inputValue2) & 0x80000000;\n      isZero = tempVar1 <= exponent1;\n      if (!isZero) {\n        exponent1 = exponent1 << 1;\n      }\n      exponent2 = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (tempVar1 <= exponent1) {\n          exponent1 = exponent1 - tempVar1;\n          inputValue1 = inputValue1 | result;\n        }\n        isZero = tempVar1 >> 1 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (tempVar1 >> 1);\n        }\n        if (isZero) {\n          inputValue1 = inputValue1 | result >> 1;\n        }\n        isZero = tempVar1 >> 2 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (tempVar1 >> 2);\n        }\n        if (isZero) {\n          inputValue1 = inputValue1 | result >> 2;\n        }\n        isZero = tempVar1 >> 3 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (tempVar1 >> 3);\n        }\n        if (isZero) {\n          inputValue1 = inputValue1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        isZero = exponent1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isOverflow = SBORROW4(exponent2,0xfd);\n      isZero = exponent2 == 0xfd;\n      result = exponent2 - 0xfd;\n      if (exponent2 < 0xfe) {\n        inputValue1 = inputValue1 + exponent2 * 0x800000 + (uint)(tempVar1 <= exponent1);\n        if (exponent1 - tempVar1 == 0) {\n          inputValue1 = inputValue1 & 0xfffffffe;\n        }\n        return inputValue1;\n      }\n    }\n    if (isZero || (int)result < 0 != isOverflow) {\n      isZero = (int)(exponent2 + 0x19) < 0;\n      if (exponent2 == 0xffffffe7 || isZero != SCARRY4(exponent2,0x19)) {\n        inputValue1 = inputValue1 & 0x80000000;\n      }\n      if (exponent2 == 0xffffffe7 || isZero != SCARRY4(exponent2,0x19)) {\n        return inputValue1;\n      }\n      result = (inputValue1 << 1) >> (-exponent2 & 0xff);\n      exponent2 = inputValue1 << (exponent2 + 0x20 & 0xff);\n      result = ((uint)((inputValue1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | exponent2 << 1) == 0) {\n        result = result & ~(exponent2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return inputValue1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_value_08000e20",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "uVar1": "tempVar1",
                "uVar2": "exponent1",
                "iVar3": "difference",
                "uVar4": "exponent2",
                "iVar5": "tempVar2",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isOverflow",
                "bVar9": "isUnderflow"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "check_overflow_08000f68",
            "code": "\nuint checkOverflow_08000f68(uint input1,uint input2)\n\n{\n  bool isCombinedNegative;\n  uint product1;\n  uint product2;\n  uint combined;\n  bool isCombinedZero;\n  \n  product1 = input1 * 2;\n  product2 = input2 * 2;\n  if (((int)product1 >> 0x18 == -1 || (int)product2 >> 0x18 == -1) &&\n     ((((int)product1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)product2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined = product1 | input2 & 0x7fffffff;\n  isCombinedZero = combined == 0;\n  if (!isCombinedZero) {\n    combined = input1 ^ input2;\n    isCombinedZero = combined == 0;\n  }\n  isCombinedNegative = -1 < (int)combined;\n  if (isCombinedNegative) {\n    input1 = product1 + input2 * -2;\n    isCombinedZero = input1 == 0;\n  }\n  if ((isCombinedNegative && product2 <= product1) && !isCombinedZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isCombinedNegative || product2 > product1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isCombinedZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "check_overflow_08000f68",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "product1",
                "uVar3": "product2",
                "uVar4": "combined",
                "bVar5": "isCombinedZero",
                "bVar1": "isCombinedNegative"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "process_data_08000fc8",
            "code": "\nvoid process_data_08000fc8(undefined4 input_data,undefined4 output_data)\n\n{\n  FUN_08000fd0(output_data,input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "process_data_08000fc8",
                "param_1": "input_data",
                "param_2": "output_data"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concat_08000fd0",
            "code": "\nundefined8 concat_08000fd0(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_08000f68();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concat_08000fd0",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "check_if_null_terminated_08000ff4",
            "code": "\nbool check_if_null_terminated_08000ff4(void)\n\n{\n  char input_char;\n  \n  FUN_08000fd0();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "check_if_null_terminated_08000ff4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_null_termination_08001030",
            "code": "\nbool check_null_termination_08001030(void)\n\n{\n  char input_character;\n  \n  FUN_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_null_termination_08001030",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "process_input_08001044",
            "code": "\nuint processInput_08001044(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  adjustedValue = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)adjustedValue) {\n    return (inputValue << 8 | 0x80000000) >> (adjustedValue & 0xff);\n  }\n  if ((adjustedValue == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "process_input_08001044",
                "param_1": "inputValue",
                "uVar1": "adjustedValue"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_data_08001084",
            "code": "\nundefined4 * copyData_08001084(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destIter;\n  undefined4 *srcIter;\n  uint remainderSize;\n  uint adjustedSize;\n  bool isRemaining;\n  \n  destIter = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      adjustedSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          srcIter = destIter;\n          isRemaining = adjustedSize != 0;\n          adjustedSize = adjustedSize - 1;\n          *(undefined *)srcIter = *(undefined *)destPtr;\n          destIter = (undefined4 *)((int)srcIter + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (isRemaining);\n        *(undefined *)(undefined4 *)((int)srcIter + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcIter + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcIter + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      adjustedSize = 4 - ((uint)dest & 3);\n      size = size - adjustedSize;\n      destPtr = dest;\n      srcIter = src;\n      if (((uint)dest & 1) != 0) {\n        srcIter = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destIter = destPtr;\n      src = srcIter;\n      if ((adjustedSize & 2) != 0) {\n        src = (undefined4 *)((int)srcIter + 2);\n        destIter = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcIter;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destIter = *src;\n    destIter[1] = src[1];\n    destIter[2] = src[2];\n    destIter[3] = src[3];\n    destIter[4] = src[4];\n    destIter[5] = src[5];\n    destIter[6] = src[6];\n    destIter[7] = src[7];\n    destIter[8] = src[8];\n    destIter[9] = src[9];\n    destIter[10] = src[10];\n    destIter[0xb] = src[0xb];\n    destIter[0xc] = src[0xc];\n    destIter[0xd] = src[0xd];\n    destIter[0xe] = src[0xe];\n    destIter[0xf] = src[0xf];\n    destIter = destIter + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainderSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destIter = *src;\n      destIter[1] = src[1];\n      destIter[2] = src[2];\n      destIter[3] = src[3];\n      destIter = destIter + 4;\n      src = src + 4;\n      isRemaining = 0xf < remainderSize;\n      remainderSize = remainderSize - 0x10;\n    } while (isRemaining);\n  }\n  adjustedSize = remainderSize + 0xc;\n  srcIter = destIter;\n  destPtr = src;\n  if (0xfffffff3 < remainderSize) {\n    do {\n      src = destPtr + 1;\n      *srcIter = *destPtr;\n      isRemaining = 3 < adjustedSize;\n      adjustedSize = adjustedSize - 4;\n      destIter = srcIter + 1;\n      srcIter = srcIter + 1;\n      destPtr = src;\n    } while (isRemaining);\n  }\nLAB_08001108:\n  if (adjustedSize + 4 != 0) {\n    destPtr = destIter;\n    srcIter = src;\n    if ((adjustedSize & 1) != 0) {\n      srcIter = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destIter + 1);\n      *(undefined *)destIter = *(undefined *)src;\n    }\n    if ((adjustedSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcIter;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_data_08001084",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destIter",
                "puVar3": "srcIter",
                "uVar4": "remainderSize",
                "uVar5": "adjustedSize",
                "bVar6": "isRemaining"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_params_08001170",
            "code": "\nundefined4 checkParams_08001170(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_params_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_result_0800119c",
            "code": "\nuint calculateResult_0800119c(uint input1,uint input2)\n\n{\n  uint result;\n  int calculation;\n  uint adjustedResult;\n  \n  calculation = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < calculation) {\n      return 0;\n    }\n    result = calculation >> 0x15;\n    adjustedResult = -result - 0x3e1;\n    if (result < 0xfffffc20 && adjustedResult != 0) {\n      result = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (adjustedResult & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_result_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "iVar2": "calculation",
                "uVar3": "adjustedResult"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "check_parameters_080011ec",
            "code": "\nundefined8 checkParameters_080011ec(int value1,int value2,int value3,int value4)\n\n{\n  undefined8 concatenatedValues;\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value2 = -1;\n      value1 = -1;\n    }\n    return CONCAT44(value2,value1);\n  }\n  concatenatedValues = FUN_0800121c();\n  return concatenatedValues;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "check_parameters_080011ec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "concatenatedValues"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_division_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculateDivision_0800121c(uint dividend,uint divisor,uint quotient1,uint quotient2,uint *remainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong tmp1;\n  uint tmp2;\n  uint tmp3;\n  uint tmp4;\n  int iVar5;\n  uint finalQuotient;\n  uint tmp5;\n  uint tmp6;\n  uint *ptrResult;\n  uint tmp7;\n  uint tmp8;\n  uint tmp9;\n  bool bVar13;\n  undefined8 result;\n  \n  if (quotient2 == 0) {\n    if (divisor < quotient1) {\n      iVar5 = LZCOUNT(quotient1);\n      tmp5 = quotient1;\n      if (iVar5 != 0) {\n        tmp5 = quotient1 << iVar5;\n        divisor = dividend >> (0x20U - iVar5 & 0xff) | divisor << iVar5;\n        dividend = dividend << iVar5;\n      }\n      tmp8 = tmp5 >> 0x10;\n      tmp6 = divisor / tmp8;\n      tmp7 = tmp6 * (tmp5 & 0xffff);\n      finalQuotient = dividend >> 0x10 | (divisor - tmp8 * tmp6) * 0x10000;\n      tmp3 = tmp6;\n      if (finalQuotient <= tmp7 && tmp7 - finalQuotient != 0) {\n        bVar13 = CARRY4(tmp5,finalQuotient);\n        finalQuotient = tmp5 + finalQuotient;\n        tmp3 = tmp6 - 1;\n        if ((bVar13 == false) && (finalQuotient <= tmp7 && tmp7 - finalQuotient != 0)) {\n          tmp3 = tmp6 - 2;\n          finalQuotient = finalQuotient + tmp5;\n        }\n      }\n      tmp2 = (finalQuotient - tmp7) / tmp8;\n      tmp4 = tmp2 * (tmp5 & 0xffff);\n      tmp6 = dividend & 0xffff | ((finalQuotient - tmp7) - tmp8 * tmp2) * 0x10000;\n      finalQuotient = tmp2;\n      if (tmp6 <= tmp4 && tmp4 - tmp6 != 0) {\n        bVar13 = CARRY4(tmp5,tmp6);\n        tmp6 = tmp5 + tmp6;\n        finalQuotient = tmp2 - 1;\n        if ((bVar13 == false) && (tmp6 <= tmp4 && tmp4 - tmp6 != 0)) {\n          finalQuotient = tmp2 - 2;\n          tmp6 = tmp6 + tmp5;\n        }\n      }\n      finalQuotient = finalQuotient | tmp3 << 0x10;\n      ptrResult = (uint *)0x0;\n      tmp6 = tmp6 - tmp4;\n    }\n    else {\n      if (quotient1 == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      iVar5 = LZCOUNT(quotient1);\n      if (iVar5 == 0) {\n        ptrResult = (uint *)0x1;\n        divisor = divisor - quotient1;\n        tmp8 = quotient1 >> 0x10;\n        tmp2 = quotient1 & 0xffff;\n        tmp5 = quotient1;\n      }\n      else {\n        tmp5 = quotient1 << iVar5;\n        finalQuotient = divisor >> (0x20U - iVar5 & 0xff);\n        tmp8 = tmp5 >> 0x10;\n        tmp7 = finalQuotient / tmp8;\n        tmp2 = tmp5 & 0xffff;\n        tmp4 = tmp7 * tmp2;\n        tmp6 = dividend >> (0x20U - iVar5 & 0xff) | divisor << iVar5;\n        tmp3 = tmp6 >> 0x10 | (finalQuotient - tmp8 * tmp7) * 0x10000;\n        dividend = dividend << iVar5;\n        finalQuotient = tmp7;\n        if (tmp3 <= tmp4 && tmp4 - tmp3 != 0) {\n          bVar13 = CARRY4(tmp5,tmp3);\n          tmp3 = tmp5 + tmp3;\n          finalQuotient = tmp7 - 1;\n          if ((bVar13 == false) && (tmp3 <= tmp4 && tmp4 - tmp3 != 0)) {\n            finalQuotient = tmp7 - 2;\n            tmp3 = tmp3 + tmp5;\n          }\n        }\n        tmp7 = (tmp3 - tmp4) / tmp8;\n        tmp9 = tmp7 * tmp2;\n        divisor = tmp6 & 0xffff | ((tmp3 - tmp4) - tmp8 * tmp7) * 0x10000;\n        tmp3 = tmp7;\n        if (divisor <= tmp9 && tmp9 - divisor != 0) {\n          bVar13 = CARRY4(tmp5,divisor);\n          divisor = tmp5 + divisor;\n          tmp3 = tmp7 - 1;\n          if ((bVar13 == false) && (divisor <= tmp9 && tmp9 - divisor != 0)) {\n            tmp3 = tmp7 - 2;\n            divisor = divisor + tmp5;\n          }\n        }\n        divisor = divisor - tmp9;\n        ptrResult = (uint *)(tmp3 | finalQuotient << 0x10);\n      }\n      tmp7 = divisor / tmp8;\n      finalQuotient = tmp2 * tmp7;\n      tmp6 = dividend >> 0x10 | (divisor - tmp8 * tmp7) * 0x10000;\n      tmp3 = tmp7;\n      if (tmp6 <= finalQuotient && finalQuotient - tmp6 != 0) {\n        bVar13 = CARRY4(tmp5,tmp6);\n        tmp6 = tmp5 + tmp6;\n        tmp3 = tmp7 - 1;\n        if ((bVar13 == false) && (tmp6 <= finalQuotient && finalQuotient - tmp6 != 0)) {\n          tmp3 = tmp7 - 2;\n          tmp6 = tmp6 + tmp5;\n        }\n      }\n      tmp7 = (tmp6 - finalQuotient) / tmp8;\n      tmp2 = tmp2 * tmp7;\n      tmp6 = dividend & 0xffff | ((tmp6 - finalQuotient) - tmp8 * tmp7) * 0x10000;\n      finalQuotient = tmp7;\n      if (tmp6 <= tmp2 && tmp2 - tmp6 != 0) {\n        bVar13 = CARRY4(tmp5,tmp6);\n        tmp6 = tmp5 + tmp6;\n        finalQuotient = tmp7 - 1;\n        if ((bVar13 == false) && (tmp6 <= tmp2 && tmp2 - tmp6 != 0)) {\n          finalQuotient = tmp7 - 2;\n          tmp6 = tmp6 + tmp5;\n        }\n      }\n      tmp6 = tmp6 - tmp2;\n      finalQuotient = finalQuotient | tmp3 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = tmp6 >> LZCOUNT(quotient1);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    ptrResult = remainder;\n    if (divisor < quotient2) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      finalQuotient = 0;\n    }\n    else {\n      iVar5 = LZCOUNT(quotient2);\n      if (iVar5 == 0) {\n        if ((quotient2 < divisor) || (quotient1 <= dividend)) {\n          bVar13 = dividend < quotient1;\n          dividend = dividend - quotient1;\n          divisor = (divisor - quotient2) - (uint)bVar13;\n          finalQuotient = 1;\n        }\n        else {\n          finalQuotient = 0;\n        }\n        ptrResult = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        tmp6 = 0x20 - iVar5;\n        tmp2 = quotient1 >> (tmp6 & 0xff) | quotient2 << iVar5;\n        tmp5 = divisor >> (tmp6 & 0xff);\n        tmp4 = tmp2 >> 0x10;\n        tmp7 = tmp5 / tmp4;\n        tmp8 = tmp7 * (tmp2 & 0xffff);\n        finalQuotient = divisor << iVar5 | dividend >> (tmp6 & 0xff);\n        tmp3 = finalQuotient >> 0x10 | (tmp5 - tmp4 * tmp7) * 0x10000;\n        dividend = dividend << iVar5;\n        tmp5 = tmp7;\n        if (tmp3 <= tmp8 && tmp8 - tmp3 != 0) {\n          bVar13 = CARRY4(tmp2,tmp3);\n          tmp3 = tmp2 + tmp3;\n          tmp5 = tmp7 - 1;\n          if ((bVar13 == false) && (tmp3 <= tmp8 && tmp8 - tmp3 != 0)) {\n            tmp5 = tmp7 - 2;\n            tmp3 = tmp3 + tmp2;\n          }\n        }\n        tmp7 = (tmp3 - tmp8) / tmp4;\n        tmp9 = tmp7 * (tmp2 & 0xffff);\n        tmp3 = finalQuotient & 0xffff | ((tmp3 - tmp8) - tmp4 * tmp7) * 0x10000;\n        finalQuotient = tmp7;\n        if (tmp3 <= tmp9 && tmp9 - tmp3 != 0) {\n          bVar13 = CARRY4(tmp2,tmp3);\n          tmp3 = tmp2 + tmp3;\n          finalQuotient = tmp7 - 1;\n          if ((bVar13 == false) && (tmp3 <= tmp9 && tmp9 - tmp3 != 0)) {\n            finalQuotient = tmp7 - 2;\n            tmp3 = tmp3 + tmp2;\n          }\n        }\n        finalQuotient = finalQuotient | tmp5 << 0x10;\n        tmp1 = (ulonglong)finalQuotient * (ulonglong)(quotient1 << iVar5);\n        if (CONCAT44(tmp3 - tmp9,dividend) < tmp1) {\n          finalQuotient = finalQuotient - 1;\n          tmp1 = tmp1 - CONCAT44(tmp2,quotient1 << iVar5);\n        }\n        if (remainder != (uint *)0x0) {\n          tmp5 = ((tmp3 - tmp9) - (int)(tmp1 >> 0x20)) - (uint)(dividend < (uint)tmp1);\n          *remainder = tmp5 << (tmp6 & 0xff) | dividend - (uint)tmp1 >> iVar5;\n          remainder[1] = tmp5 >> iVar5;\n          ptrResult = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(ptrResult,finalQuotient);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_division_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient1",
                "param_4": "quotient2",
                "param_5": "remainder",
                "uVar1": "tmp1",
                "uVar2": "tmp2",
                "uVar3": "tmp3",
                "uVar4": "tmp4",
                "uVar6": "finalQuotient",
                "uVar7": "tmp5",
                "uVar8": "tmp6",
                "uVar10": "tmp7",
                "uVar11": "tmp8",
                "uVar12": "tmp9",
                "uVar14": "result",
                "puVar9": "ptrResult"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_system_080014f0",
            "code": "\n\n\nundefined4 initializeSystem_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_system_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "check_and_update_param_0800151c",
            "code": "\nundefined4 checkAndUpdateParam_0800151c(uint param)\n\n{\n  int result;\n  undefined4 isSuccess;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (param < 0x10) {\n      FUN_0800172a(0xffffffff,param,0);\n      isSuccess = 0;\n      DAT_20000000 = param;\n    }\n    else {\n      isSuccess = 1;\n    }\n  }\n  else {\n    isSuccess = 1;\n  }\n  return isSuccess;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "check_and_update_param_0800151c",
                "param_1": "param",
                "iVar1": "result",
                "uVar2": "isSuccess"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increase_data_0800157c",
            "code": "\nvoid increaseData_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increase_data_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_080015a0",
            "code": "\nundefined4 get_data_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_080015a0"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_special_bits_080015b4",
            "code": "\n\n\nvoid setSpecialBits_080015b4(uint input)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_special_bits_080015b4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_shifted_bits_080015fc",
            "code": "\n\n\nuint getShiftedBits_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_shifted_bits_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "update_memory_08001618",
            "code": "\nvoid updateMemory_08001618(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "update_memory_08001618",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "bitwise_combination_0800166c",
            "code": "\nuint bitwiseCombination_0800166c(uint bitPosition,uint firstValue,uint secondValue)\n\n{\n  uint bitMask;\n  \n  bitPosition = bitPosition & 7;\n  bitMask = 7 - bitPosition;\n  if (3 < bitMask) {\n    bitMask = 4;\n  }\n  if (bitPosition + 4 < 7) {\n    bitPosition = 0;\n  }\n  else {\n    bitPosition = bitPosition - 3;\n  }\n  return secondValue & ~(-1 << (bitPosition & 0xff)) |\n         (~(-1 << (bitMask & 0xff)) & firstValue) << (bitPosition & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "bitwise_combination_0800166c",
                "param_1": "bitPosition",
                "param_2": "firstValue",
                "param_3": "secondValue",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "is_param_valid_080016d0",
            "code": "\n\n\nbool is_param_valid_080016d0(int input)\n\n{\n  bool is_valid;\n  \n  is_valid = input - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "is_param_valid_080016d0",
                "param_1": "input",
                "bVar1": "is_valid"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "initialize_08001714",
            "code": "\nvoid initialize_08001714(undefined4 input)\n\n{\n  FUN_080015b4(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "initialize_08001714",
                "param_1": "input"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "process_data_0800172a",
            "code": "\nvoid processData_0800172a(char input,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,arg1,arg2);\n  FUN_08001618((int)input,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "input",
                "param_2": "arg1",
                "param_3": "arg2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "process_data_08001762",
            "code": "\nundefined4 processData_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = FUN_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "process_data_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flag_value_0800177c",
            "code": "\n\n\nvoid setFlagValue_0800177c(int flag)\n\n{\n  if (flag == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flag_value_0800177c",
                "param_1": "flag"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_system_080017b4",
            "code": "\nvoid initializeSystem_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_system_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_flags_and_values_080017c4",
            "code": "\n\n\nvoid updateFlagsAndValues_080017c4(uint *flagsArray,uint *inputArray)\n\n{\n  uint bitMask;\n  uint bitValue;\n  uint typeValue;\n  uint *flagsPtr;\n  int index;\n  uint newFlagValue;\n  uint counter;\n  \n  newFlagValue = 0;\n  counter = 0;\n  do {\n    if (0xf < counter) {\n      return;\n    }\n    bitMask = 1 << (counter & 0xff);\n    bitValue = *inputArray & bitMask;\n    if (bitValue == bitMask) {\n      typeValue = inputArray[1];\n      if (typeValue == 0x12) {\n        newFlagValue = inputArray[3] + 0xc;\n      }\n      else if (typeValue < 0x13) {\n        if (typeValue == 2) {\n          newFlagValue = inputArray[3] + 8;\n        }\n        else if (typeValue < 3) {\n          if (typeValue == 0) goto LAB_08001882;\n          if (typeValue == 1) {\n            newFlagValue = inputArray[3];\n          }\n        }\n        else if (typeValue == 3) {\n          newFlagValue = 0;\n        }\n        else if (typeValue == 0x11) {\n          newFlagValue = inputArray[3] + 4;\n        }\n      }\n      else if (typeValue == 0x10210000) {\nLAB_08001882:\n        if (inputArray[2] == 0) {\n          newFlagValue = 4;\n        }\n        else if (inputArray[2] == 1) {\n          newFlagValue = 8;\n          flagsArray[4] = bitMask;\n        }\n        else {\n          newFlagValue = 8;\n          flagsArray[5] = bitMask;\n        }\n      }\n      else if (typeValue < 0x10210001) {\n        if ((typeValue == 0x10110000) || (typeValue == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((typeValue == 0x10310000) || (typeValue == 0x10320000)) || (typeValue == 0x10220000))\n      goto LAB_08001882;\n      if (bitValue < 0x100) {\n        bitMask = counter << 2;\n        flagsPtr = flagsArray;\n      }\n      else {\n        flagsPtr = flagsArray + 1;\n        bitMask = (counter - 8) * 4;\n      }\n      *flagsPtr = *flagsPtr & ~(0xf << (bitMask & 0xff)) | newFlagValue << (bitMask & 0xff);\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (flagsArray == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (flagsArray == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (flagsArray == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (flagsArray == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000) =\n             index << ((counter & 3) << 2) |\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000);\n        if ((inputArray[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitValue & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitValue | _DAT_40010400;\n        }\n        if ((inputArray[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitValue & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitValue | _DAT_40010404;\n        }\n        if ((inputArray[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitValue & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitValue | _DAT_40010408;\n        }\n        if ((inputArray[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitValue & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_flags_and_values_080017c4",
                "param_1": "flagsArray",
                "param_2": "inputArray",
                "uVar1": "bitMask",
                "uVar2": "bitValue",
                "uVar3": "typeValue",
                "puVar4": "flagsPtr",
                "iVar5": "index",
                "local_10": "newFlagValue",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "FUNC_08001a80",
            "code": "\nvoid FUNC_08001a80(int param_1,ushort param_2,char param_3)\n\n{\n  if (param_3 == '\\0') {\n    *(uint *)(param_1 + 0x10) = (uint)param_2 << 0x10;\n  }\n  else {\n    *(uint *)(param_1 + 0x10) = (uint)param_2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "FUNC_08001a80"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_parameters_08001ab0",
            "code": "\nundefined4 calculateParameters_08001ab0(uint **parameters)\n\n{\n  uint result;\n  char flag;\n  undefined4 returnValue;\n  uint temp;\n  bool isZero;\n  \n  if (parameters == (uint **)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)parameters + 0x3d) == '\\0') {\n      *(undefined *)(parameters + 0xf) = 0;\n      FUNC_08001cb8(parameters);\n    }\n    *(undefined *)((int)parameters + 0x3d) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    result = FUN_08003518();\n    if (parameters[1] < (uint *)0x186a1) {\n      temp = result;\n      if (result < 2000000) {\n        temp = 1;\n      }\n      flag = (char)temp;\n      if (1999999 < result) {\n        flag = '\\0';\n      }\n    }\n    else {\n      temp = result;\n      if (result < 4000000) {\n        temp = 1;\n      }\n      flag = (char)temp;\n      if (3999999 < result) {\n        flag = '\\0';\n      }\n    }\n    if (flag == '\\0') {\n      temp = result / 1000000;\n      (*parameters)[1] = temp;\n      if ((uint *)0x186a0 < parameters[1]) {\n        temp = (temp * 300) / 1000;\n      }\n      (*parameters)[8] = temp + 1;\n      if (parameters[1] < (uint *)0x186a1) {\n        result = (result - 1) / (uint)((int)parameters[1] << 1) + 1 & 0xfff;\n        if (result < 4) {\n          result = 4;\n        }\n      }\n      else {\n        if (parameters[2] == (uint *)0x0) {\n          temp = (result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff;\n          isZero = temp == 0;\n          if (isZero) {\n            temp = 1;\n          }\n          flag = (char)temp;\n          if (!isZero) {\n            flag = '\\0';\n          }\n        }\n        else {\n          temp = (result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff;\n          isZero = temp == 0;\n          if (isZero) {\n            temp = 1;\n          }\n          flag = (char)temp;\n          if (!isZero) {\n            flag = '\\0';\n          }\n        }\n        if (flag == '\\0') {\n          if (parameters[2] == (uint *)0x0) {\n            result = (result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            result = (result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n      (*parameters)[7] = result;\n      **parameters = (uint)parameters[8] | (uint)parameters[7];\n      (*parameters)[2] = (uint)parameters[3] | (uint)parameters[4];\n      (*parameters)[3] = (uint)parameters[6] | (uint)parameters[5];\n      **parameters = **parameters | 1;\n      parameters[0x10] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      returnValue = 0;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_parameters_08001ab0",
                "param_1": "parameters",
                "uVar1": "result",
                "cVar2": "flag",
                "uVar3": "returnValue",
                "uVar4": "temp",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_input_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocess_input_08001ccc(uint **input_params,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,undefined4 param7)\n\n{\n  int var1;\n  int var2;\n  undefined4 result;\n  uint *ptrVar4;\n  \n  var1 = FUN_080015a0();\n  if (*(char *)((int)input_params + 0x3d) == ' ') {\n    do {\n      if ((~(*input_params)[6] & 2) != 0) {\n        var2 = 0;\n        goto LAB_08001d9c;\n      }\n      var2 = FUN_080015a0();\n    } while ((uint)(var2 - var1) < 0x1a);\n    input_params[0xc] = (uint *)0x0;\n    *(undefined *)((int)input_params + 0x3d) = 0x20;\n    *(undefined *)((int)input_params + 0x3e) = 0;\n    *(undefined *)(input_params + 0xf) = 0;\n    var2 = 3;\nLAB_08001d9c:\n    if (var2 == 0) {\n      if (*(char *)(input_params + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(input_params + 0xf) = 1;\n        if ((**input_params & 1) != 1) {\n          **input_params = **input_params | 1;\n        }\n        **input_params = **input_params & 0xfffff7ff;\n        *(undefined *)((int)input_params + 0x3d) = 0x21;\n        *(undefined *)((int)input_params + 0x3e) = 0x40;\n        input_params[0x10] = (uint *)0x0;\n        input_params[9] = param5;\n        *(undefined2 *)((int)input_params + 0x2a) = param6;\n        input_params[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(input_params + 10) = *(undefined2 *)((int)input_params + 0x2a);\n        var2 = FUN_08002640(input_params,param2,param3,param4,param7,var1);\n        if (var2 == 0) {\n          while (*(short *)(input_params + 10) != 0) {\n            var2 = FUN_08002bb4(input_params,param7,var1);\n            if (var2 != 0) {\n              if (input_params[0x10] == (uint *)0x4) {\n                **input_params = **input_params | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            ptrVar4 = input_params[9];\n            input_params[9] = (uint *)((int)ptrVar4 + 1);\n            (*input_params)[4] = (uint)*(byte *)ptrVar4;\n            *(short *)(input_params + 10) = *(short *)(input_params + 10) + -1;\n            *(short *)((int)input_params + 0x2a) = *(short *)((int)input_params + 0x2a) + -1;\n            if ((((*input_params)[5] & 4) == 4) && (*(short *)(input_params + 10) != 0)) {\n              ptrVar4 = input_params[9];\n              input_params[9] = (uint *)((int)ptrVar4 + 1);\n              (*input_params)[4] = (uint)*(byte *)ptrVar4;\n              *(short *)(input_params + 10) = *(short *)(input_params + 10) + -1;\n              *(short *)((int)input_params + 0x2a) = *(short *)((int)input_params + 0x2a) + -1;\n            }\n          }\n          var1 = FUN_08002c2e(input_params,param7,var1);\n          if (var1 == 0) {\n            **input_params = **input_params | 0x200;\n            *(undefined *)((int)input_params + 0x3d) = 0x20;\n            *(undefined *)((int)input_params + 0x3e) = 0;\n            *(undefined *)(input_params + 0xf) = 0;\n            result = 0;\n          }\n          else if (input_params[0x10] == (uint *)0x4) {\n            **input_params = **input_params | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (input_params[0x10] == (uint *)0x4) {\n          *(undefined *)(input_params + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(input_params + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_input_08001ccc",
                "param_1": "input_params",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "result",
                "puVar4": "ptrVar4"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **data,undefined2 param1,undefined2 param2,undefined2 param3,uint *inputBuffer,\n            undefined2 param4,uint param5)\n\n{\n  int initialValue;\n  uint tempValue;\n  int result;\n  undefined4 returnValue;\n  uint *pointer;\n  \n  initialValue = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result = 0;\n        goto label1;\n      }\n      result = FUN_080015a0();\n    } while ((uint)(result - initialValue) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result = 3;\nlabel1:\n    if (result == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = inputBuffer;\n        *(undefined2 *)((int)data + 0x2a) = param4;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result = FUN_080027f4(data,param1,param2,param3,param5,initialValue);\n        if (result == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disableIRQinterrupts();\n            **data = **data | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disableIRQinterrupts();\n            **data = **data & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                result = FUN_08002ca8(data,param5,initialValue);\n                if (result != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                tempValue = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result = 0;\n                    goto label2;\n                  }\n                } while ((param5 == 0xffffffff) ||\n                        ((param5 != 0 && (result = FUN_080015a0(), (uint)(result - initialValue) <= param5)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result = 3;\nlabel2:\n                if (result != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **data = **data | 0x200;\n                tempValue = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableIRQinterrupts();\n                tempValue = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result = 0;\n                    goto label3;\n                  }\n                } while ((param5 == 0xffffffff) ||\n                        ((param5 != 0 && (result = FUN_080015a0(), (uint)(result - initialValue) <= param5)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result = 3;\nlabel3:\n                if (result != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disableIRQinterrupts();\n                tempValue = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result = 0;\n                    goto label4;\n                  }\n                } while ((param5 == 0xffffffff) ||\n                        ((param5 != 0 && (result = FUN_080015a0(), (uint)(result - initialValue) <= param5)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result = 3;\nlabel4:\n                if (result != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                tempValue = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enableIRQinterrupts();\n                tempValue = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              result = FUN_08002ca8(data,param5,initialValue);\n              if (result != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              tempValue = (*data)[4];\n              pointer = data[9];\n              data[9] = (uint *)((int)pointer + 1);\n              *(char *)pointer = (char)tempValue;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                tempValue = (*data)[4];\n                pointer = data[9];\n                data[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "inputBuffer",
                "param_6": "param4",
                "param_7": "param5",
                "iVar1": "initialValue",
                "uVar2": "tempValue",
                "iVar3": "result",
                "uVar4": "returnValue",
                "puVar5": "pointer",
                "LAB_08002040": "label1",
                "LAB_080022fa": "label2",
                "LAB_08002418": "label3",
                "LAB_0800250a": "label4"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "verify_permissions_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nverify_permissions_08002640(uint **permissions,byte flag,undefined2 value,short mode,uint size,int current_size)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **permissions = **permissions | 0x100;\n  do {\n    if ((~(*permissions)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((size == 0xffffffff) ||\n          ((size != 0 && (result = FUN_080015a0(), (uint)(result - current_size) <= size))));\n  permissions[0xc] = (uint *)0x0;\n  *(undefined *)((int)permissions + 0x3d) = 0x20;\n  *(undefined *)((int)permissions + 0x3e) = 0;\n  *(undefined *)(permissions + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*permissions)[4] = flag & 0xfe;\n    result = FUN_08002ad8(permissions,0x10002,size,current_size);\n    if (result == 0) {\n      result = FUN_08002bb4(permissions,size,current_size,(*permissions)[6]);\n      if (result == 0) {\n        if (mode == 1) {\n          (*permissions)[4] = (uint)(byte)value;\n        }\n        else {\n          (*permissions)[4] = (uint)(byte)((ushort)value >> 8);\n          result = FUN_08002bb4(permissions,size,current_size);\n          if (result != 0) {\n            if (permissions[0x10] == (uint *)0x4) {\n              **permissions = **permissions | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*permissions)[4] = (uint)(byte)value;\n        }\n        return_value = 0;\n      }\n      else if (permissions[0x10] == (uint *)0x4) {\n        **permissions = **permissions | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (permissions[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002640": "verify_permissions_08002640",
                "param_1": "permissions",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "mode",
                "param_5": "size",
                "param_6": "current_size",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "initialize_flags_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\ninitializeFlags_080027f4(uint **flags,byte byteVal,undefined2 ushortVal,short condition,uint limit,int comparisonVal)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **flags = **flags | 0x400;\n  **flags = **flags | 0x100;\n  do {\n    if ((~(*flags)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - comparisonVal) <= limit))));\n  flags[0xc] = (uint *)0x0;\n  *(undefined *)((int)flags + 0x3d) = 0x20;\n  *(undefined *)((int)flags + 0x3e) = 0;\n  *(undefined *)(flags + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*flags)[4] = byteVal & 0xfe;\n    result = FUN_08002ad8(flags,0x10002,limit,comparisonVal);\n    if (result == 0) {\n      result = FUN_08002bb4(flags,limit,comparisonVal,(*flags)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*flags)[4] = (uint)(byte)ushortVal;\n        }\n        else {\n          (*flags)[4] = (uint)(byte)((ushort)ushortVal >> 8);\n          result = FUN_08002bb4(flags,limit,comparisonVal);\n          if (result != 0) {\n            if (flags[0x10] == (uint *)0x4) {\n              **flags = **flags | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*flags)[4] = (uint)(byte)ushortVal;\n        }\n        result = FUN_08002bb4(flags,limit,comparisonVal);\n        if (result == 0) {\n          **flags = **flags | 0x100;\n          do {\n            if ((~(*flags)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = FUN_080015a0(), (uint)(result - comparisonVal) <= limit))));\n          flags[0xc] = (uint *)0x0;\n          *(undefined *)((int)flags + 0x3d) = 0x20;\n          *(undefined *)((int)flags + 0x3e) = 0;\n          *(undefined *)(flags + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*flags)[4] = (uint)(byteVal | 1);\n            result = FUN_08002ad8(flags,0x10002,limit,comparisonVal);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (flags[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (flags[0x10] == (uint *)0x4) {\n          **flags = **flags | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (flags[0x10] == (uint *)0x4) {\n        **flags = **flags | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (flags[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "initialize_flags_080027f4",
                "param_1": "flags",
                "param_2": "byteVal",
                "param_3": "ushortVal",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "comparisonVal",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_value_08002ad8",
            "code": "\nundefined4 checkAndUpdateValue_08002ad8(uint **paramList,uint inputValue,uint maxValue,int comparisonValue)\n\n{\n  int result;\n  char outputChar;\n  uint updatedValue;\n  bool valueChanged;\n  \n  do {\n    if ((inputValue >> 0x10 & 0xff) == 1) {\n      updatedValue = inputValue & ~(*paramList)[5] & 0xffff;\n      valueChanged = updatedValue != 0;\n      if (valueChanged) {\n        updatedValue = 1;\n      }\n      outputChar = (char)updatedValue;\n      if (!valueChanged) {\n        outputChar = '\\0';\n      }\n    }\n    else {\n      updatedValue = inputValue & ~(*paramList)[6] & 0xffff;\n      valueChanged = updatedValue != 0;\n      if (valueChanged) {\n        updatedValue = 1;\n      }\n      outputChar = (char)updatedValue;\n      if (!valueChanged) {\n        outputChar = '\\0';\n      }\n    }\n    if (outputChar == '\\0') {\n      return 0;\n    }\n    if (((*paramList)[5] & 0x400) == 0x400) {\n      **paramList = **paramList | 0x200;\n      (*paramList)[5] = 0xfffffbff;\n      paramList[0x10] = (uint *)0x4;\n      paramList[0xc] = (uint *)0x0;\n      *(undefined *)((int)paramList + 0x3d) = 0x20;\n      *(undefined *)(paramList + 0xf) = 0;\n      return 1;\n    }\n  } while ((maxValue == 0xffffffff) ||\n          ((maxValue != 0 && (result = FUN_080015a0(), (uint)(result - comparisonValue) <= maxValue))));\n  paramList[0xc] = (uint *)0x0;\n  *(undefined *)((int)paramList + 0x3d) = 0x20;\n  *(undefined *)(paramList + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_value_08002ad8",
                "param_1": "paramList",
                "param_2": "inputValue",
                "param_3": "maxValue",
                "param_4": "comparisonValue",
                "iVar1": "result",
                "cVar2": "outputChar",
                "uVar3": "updatedValue",
                "bVar4": "valueChanged"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_data_status_08002bb4",
            "code": "\nundefined4 check_data_status_08002bb4(int *data_ptr,uint size_limit,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = FUN_08002d3c(data_ptr);\n    if (result != 0) break;\n    if ((size_limit != 0xffffffff) &&\n       ((size_limit == 0 || (result = FUN_080015a0(), size_limit < (uint)(result - offset))))) {\n      data_ptr[16] = data_ptr[16] | 0x20;\n      data_ptr[12] = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_data_status_08002bb4",
                "param_1": "data_ptr",
                "param_2": "size_limit",
                "param_3": "offset",
                "iVar1": "result",
                "param_1[0x10]": "data_ptr[16]",
                "param_1[0xc]": "data_ptr[12]"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_modify_flags_08002c2e",
            "code": "\nundefined4 checkAndModifyFlags_08002c2e(int *array,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*array + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(array);\n    if (result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (result = FUN_080015a0(), size < (uint)(result - offset))))) {\n      array[0x10] = array[0x10] | 0x20;\n      array[0xc] = 0;\n      *(undefined *)((int)array + 0x3d) = 0x20;\n      *(undefined *)(array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_modify_flags_08002c2e",
                "param_1": "array",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_condition_and_set_flags_08002ca8",
            "code": "\nundefined4 checkConditionAndSetFlags_08002ca8(int *arrayPtr,uint arraySize,int difference)\n\n{\n  int returnValue;\n  \n  while( true ) {\n    if ((*(uint *)(*arrayPtr + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*arrayPtr + 0x14) & 0x10) == 0x10) break;\n    if ((arraySize == 0) || (returnValue = FUN_080015a0(), arraySize < (uint)(returnValue - difference))) {\n      arrayPtr[0x10] = arrayPtr[0x10] | 0x20;\n      *(undefined *)((int)arrayPtr + 0x3d) = 0x20;\n      *(undefined *)(arrayPtr + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*arrayPtr + 0x14) = 0xffffffef;\n  arrayPtr[0x10] = 0;\n  arrayPtr[0xc] = 0;\n  *(undefined *)((int)arrayPtr + 0x3d) = 0x20;\n  *(undefined *)(arrayPtr + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_condition_and_set_flags_08002ca8",
                "param_1": "arrayPtr",
                "param_2": "arraySize",
                "param_3": "difference",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "updated_function_08002d3c",
            "code": "\nbool updated_function_08002d3c(int *input_ptr)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*input_ptr + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*input_ptr + 0x14) = 0xfffffbff;\n    result = 4;\n    counter = 0;\n    *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n    *(undefined *)(input_ptr + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "updated_function_08002d3c",
                "param_1": "input_ptr",
                "bVar1": "isFlagSet",
                "param_1[0x10]": "result",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "process_params_08002d98",
            "code": "\n\n\nundefined4 processParams_08002d98(uint *params)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isConditionMet;\n  \n  if ((*params & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (params[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (params[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (params[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (params[1] == 0) {\n        startTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = FUN_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = FUN_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*params & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (params[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = params[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (params[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = params[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*params & 8) != 0) {\n    if (params[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*params & 4) != 0) {\n    isConditionMet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = FUN_080015a0();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (params[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (params[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (params[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (params[3] == 0) {\n      startTime = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = FUN_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = FUN_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (params[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (params[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (params[8] == 0x10000) {\n          _DAT_40021004 = params[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = params[9] | params[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        startTime = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentTime = FUN_080015a0();\n          if (2 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentTime = FUN_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentTime = FUN_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "process_params_08002d98",
                "param_1": "params",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isConditionMet"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "prepare_data_transfer_08003260",
            "code": "\n\n\nundefined4 prepareDataTransfer_08003260(uint *dataTransferParams,uint transferSize)\n\n{\n  int initialValue;\n  int currentValue;\n  uint result;\n  undefined4 success;\n  \n  if (((_DAT_40022000 & 7) < transferSize) &&\n     (_DAT_40022000 = transferSize | _DAT_40022000 & 0xfffffff8, transferSize != (transferSize & 7))) {\n    success = 1;\n  }\n  else {\n    if ((*dataTransferParams & 2) != 0) {\n      _DAT_40021004 = dataTransferParams[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*dataTransferParams & 1) == 0) {\nLAB_08003394:\n      if ((transferSize < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = transferSize | _DAT_40022000 & 0xfffffff8, transferSize != (transferSize & 7))) {\n        success = 1;\n      }\n      else {\n        if ((*dataTransferParams & 4) != 0) {\n          _DAT_40021004 = dataTransferParams[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*dataTransferParams & 8) != 0) {\n          _DAT_40021004 = dataTransferParams[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        result = FUN_08003440();\n        DAT_20000018 = result >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        success = 0;\n      }\n    }\n    else {\n      if (dataTransferParams[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((dataTransferParams[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = dataTransferParams[1] | _DAT_40021004 & 0xfffffffc;\n      initialValue = FUN_080015a0();\n      if (dataTransferParams[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        success = 3;\n      }\n      else if (dataTransferParams[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        success = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        success = 3;\n      }\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_08003260": "prepare_data_transfer_08003260",
                "param_1": "dataTransferParams",
                "param_2": "transferSize",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "success"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_delay_08003440",
            "code": "\n\n\nuint calculateDelay_08003440(void)\n\n{\n  undefined2 delayMultiplier;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  uint delayValue;\n  undefined4 temp;\n  uint local_14;\n  uint delayResult;\n  uint temp2;\n  \n  value1 = 0x5040302;\n  value2 = 0x9080706;\n  value3 = 0xd0c0b0a;\n  value4 = 0x10100f0e;\n  delayMultiplier = 0x201;\n  temp = 0;\n  temp2 = 0;\n  delayValue = 0;\n  delayResult = 0;\n  local_14 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    delayResult = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    delayValue = (uint)*(byte *)((int)&value1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp2 = delayValue * 4000000;\n    }\n    else {\n      temp2 = (delayValue * 8000000) / (uint)*(byte *)((int)&delayMultiplier + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    delayResult = temp2;\n  }\n  else {\n    delayResult = 8000000;\n  }\n  return delayResult;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_delay_08003440",
                "local_30": "delayMultiplier",
                "local_2c": "value1",
                "uStack_28": "value2",
                "uStack_24": "value3",
                "uStack_20": "value4",
                "local_1c": "delayValue",
                "local_18": "temp",
                "local_10": "delayResult",
                "local_c": "temp2"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_as_result_08003504",
            "code": "\nundefined4 get_data_as_result_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_as_result_08003504"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shifted_value_08003518",
            "code": "\n\n\nuint shiftedValue_08003518(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shifted_value_08003518",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "get_shifted_value_08003540",
            "code": "\n\n\nuint getShiftedValue_08003540(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "get_shifted_value_08003540",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "calculate_iterations_08003568",
            "code": "\nvoid calculateIterations_08003568(int inputValue)\n\n{\n  bool loopCondition;\n  int iterationCount;\n  \n  iterationCount = inputValue * (DAT_20000018 / 8000);\n  do {\n    loopCondition = iterationCount != 0;\n    iterationCount = iterationCount + -1;\n  } while (loopCondition);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "calculate_iterations_08003568",
                "param_1": "inputValue",
                "local_c": "iterationCount",
                "bVar1": "loopCondition"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "validate_and_process_data_080035a4",
            "code": "\nundefined4 validate_and_process_data_080035a4(undefined4 *data_ptr)\n\n{\n  undefined4 result;\n  \n  if (data_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      FUNC_080035fa(data_ptr);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    FUN_08003c94(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "validate_and_process_data_080035a4",
                "param_1": "data_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_bit_0800360c",
            "code": "\nundefined4 setBit_0800360c(uint **data)\n\n{\n  (*data)[3] = (*data)[3] | 1;\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_bit_0800360c",
                "param_1": "data"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "check_and_update_flag_08003640",
            "code": "\nundefined4 checkAndUpdateFlag_08003640(undefined4 *flag)\n\n{\n  undefined4 result;\n  \n  if (flag == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)flag + 0x3d) == '\\0') {\n      *(undefined *)(flag + 0xf) = 0;\n      FUNC_08003696(flag);\n    }\n    *(undefined *)((int)flag + 0x3d) = 2;\n    FUN_08003c94(*flag,flag + 1);\n    *(undefined *)((int)flag + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003640": "check_and_update_flag_08003640",
                "param_1": "flag",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_permissions_080036a8",
            "code": "\nundefined4 updatePermissions_080036a8(uint **permissionPtr,undefined4 permissionValue)\n\n{\n  FUN_080041ea(*permissionPtr,permissionValue,1);\n  if (*permissionPtr == (uint *)0x40012c00) {\n    (*permissionPtr)[0x11] = (*permissionPtr)[0x11] | 0x8000;\n  }\n  **permissionPtr = **permissionPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_permissions_080036a8",
                "param_1": "permissionPtr",
                "param_2": "permissionValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "update_flags_and_execute_080036f8",
            "code": "\nvoid updateFlagsAndExecute_080036f8(int *inputParams)\n\n{\n  if (((*(uint *)(*inputParams + 0x10) & 2) == 2) && ((*(uint *)(*inputParams + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*inputParams + 0x10) = 0xfffffffd;\n    *(undefined *)(inputParams + 7) = 1;\n    if ((*(uint *)(*inputParams + 0x18) & 3) == 0) {\n      FUNC_08003c4a(inputParams);\n      FUNC_08003c6e(inputParams);\n    }\n    else {\n      FUNC_08003c5c(inputParams);\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  if (((*(uint *)(*inputParams + 0x10) & 4) == 4) && ((*(uint *)(*inputParams + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*inputParams + 0x10) = 0xfffffffb;\n    *(undefined *)(inputParams + 7) = 2;\n    if ((*(uint *)(*inputParams + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(inputParams);\n      FUNC_08003c6e(inputParams);\n    }\n    else {\n      FUNC_08003c5c(inputParams);\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  if (((*(uint *)(*inputParams + 0x10) & 8) == 8) && ((*(uint *)(*inputParams + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*inputParams + 0x10) = 0xfffffff7;\n    *(undefined *)(inputParams + 7) = 4;\n    if ((*(uint *)(*inputParams + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(inputParams);\n      FUNC_08003c6e(inputParams);\n    }\n    else {\n      FUNC_08003c5c(inputParams);\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  if (((*(uint *)(*inputParams + 0x10) & 0x10) == 0x10) && ((*(uint *)(*inputParams + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*inputParams + 0x10) = 0xffffffef;\n    *(undefined *)(inputParams + 7) = 8;\n    if ((*(uint *)(*inputParams + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(inputParams);\n      FUNC_08003c6e(inputParams);\n    }\n    else {\n      FUNC_08003c5c(inputParams);\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  if (((*(uint *)(*inputParams + 0x10) & 1) == 1) && ((*(uint *)(*inputParams + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*inputParams + 0x10) = 0xfffffffe;\n    FUN_08004f78(inputParams);\n  }\n  if (((*(uint *)(*inputParams + 0x10) & 0x80) == 0x80) && ((*(uint *)(*inputParams + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*inputParams + 0x10) = 0xffffff7f;\n    FUNC_08004378(inputParams);\n  }\n  if (((*(uint *)(*inputParams + 0x10) & 0x40) == 0x40) && ((*(uint *)(*inputParams + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*inputParams + 0x10) = 0xffffffbf;\n    FUNC_08003c80(inputParams);\n  }\n  if (((*(uint *)(*inputParams + 0x10) & 0x20) == 0x20) && ((*(uint *)(*inputParams + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*inputParams + 0x10) = 0xffffffdf;\n    FUNC_08004366(inputParams);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "update_flags_and_execute_080036f8",
                "param_1": "inputParams"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "process_data_08003908",
            "code": "\nundefined4 processData_08003908(int *dataPointer,int size,undefined4 option)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(dataPointer + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(dataPointer + 0xf) = 1;\n    *(undefined *)((int)dataPointer + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      FUN_08003d60(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) | 8;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffffffb;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(size + 0x10) | *(uint *)(*dataPointer + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) | 0x800;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffffbff;\n      *(uint *)(*dataPointer + 0x18) = *(int *)(size + 0x10) << 8 | *(uint *)(*dataPointer + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) | 8;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffffffb;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(size + 0x10) | *(uint *)(*dataPointer + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) | 0x800;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffffbff;\n      *(uint *)(*dataPointer + 0x1c) = *(int *)(size + 0x10) << 8 | *(uint *)(*dataPointer + 0x1c);\n    }\n    *(undefined *)((int)dataPointer + 0x3d) = 1;\n    *(undefined *)(dataPointer + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "process_data_08003908",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "option",
                "uVar1": "result",
                "switch(param_3)": "switch(option)"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "update_device_settings_08003a94",
            "code": "\nundefined4 updateDeviceSettings_08003a94(int *devicePointer,uint *settingsPointer)\n\n{\n  undefined4 result;\n  uint settingValue;\n  \n  if (*(char *)(devicePointer + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(devicePointer + 0xf) = 1;\n    *(undefined *)((int)devicePointer + 0x3d) = 2;\n    *(uint *)(*devicePointer + 8) = *(uint *)(*devicePointer + 8) & 0xffff0088;\n    settingValue = *settingsPointer;\n    if (settingValue == 0x40) {\n      FUN_080040a0(*devicePointer,settingsPointer[1],settingsPointer[3]);\n      FUN_0800416a(*devicePointer,0x40);\n    }\n    else if (settingValue < 0x41) {\n      if (settingValue == 0x10) {\n        FUN_0800416a(*devicePointer,0x10);\n      }\n      else if (settingValue < 0x11) {\n        if (settingValue == 0) {\n          FUN_0800416a(*devicePointer,0);\n        }\n      }\n      else if (settingValue == 0x20) {\n        FUN_0800416a(*devicePointer,0x20);\n      }\n      else if (settingValue == 0x30) {\n        FUN_0800416a(*devicePointer,0x30);\n      }\n    }\n    else if (settingValue == 0x70) {\n      FUN_080041a8(*devicePointer,settingsPointer[2],settingsPointer[1],settingsPointer[3]);\n      *(uint *)(*devicePointer + 8) = *(uint *)(*devicePointer + 8) & 0xffffff88 | 0x77;\n    }\n    else if (settingValue < 0x71) {\n      if (settingValue == 0x50) {\n        FUN_080040a0(*devicePointer,settingsPointer[1],settingsPointer[3]);\n        FUN_0800416a(*devicePointer,0x50);\n      }\n      else if (settingValue == 0x60) {\n        FUN_08004104(*devicePointer,settingsPointer[1],settingsPointer[3]);\n        FUN_0800416a(*devicePointer,0x60);\n      }\n    }\n    else if (settingValue == 0x1000) {\n      *(uint *)(*devicePointer + 8) = *(uint *)(*devicePointer + 8) & 0xfffffff8;\n    }\n    else if (settingValue == 0x2000) {\n      FUN_080041a8(*devicePointer,settingsPointer[2],settingsPointer[1],settingsPointer[3]);\n      *(uint *)(*devicePointer + 8) = *(uint *)(*devicePointer + 8) | 0x4000;\n    }\n    *(undefined *)((int)devicePointer + 0x3d) = 1;\n    *(undefined *)(devicePointer + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "update_device_settings_08003a94",
                "param_1": "devicePointer",
                "param_2": "settingsPointer",
                "uVar1": "result",
                "uVar2": "settingValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_configuration_08003c94",
            "code": "\nvoid updateMemoryConfiguration_08003c94(uint *originalMemoryConfig,uint *newMemoryConfig)\n\n{\n  uint modifiedMemoryConfig;\n  \n  modifiedMemoryConfig = *originalMemoryConfig;\n  if ((((originalMemoryConfig == (uint *)0x40012c00) || (originalMemoryConfig == (uint *)0x40000000)) ||\n      (originalMemoryConfig == (uint *)0x40000400)) || (originalMemoryConfig == (uint *)0x40000800)) {\n    modifiedMemoryConfig = newMemoryConfig[1] | modifiedMemoryConfig & 0xffffff8f;\n  }\n  if (((originalMemoryConfig == (uint *)0x40012c00) || (originalMemoryConfig == (uint *)0x40000000)) ||\n     ((originalMemoryConfig == (uint *)0x40000400 || (originalMemoryConfig == (uint *)0x40000800)))) {\n    modifiedMemoryConfig = newMemoryConfig[3] | modifiedMemoryConfig & 0xfffffcff;\n  }\n  *originalMemoryConfig = newMemoryConfig[5] | modifiedMemoryConfig & 0xffffff7f;\n  originalMemoryConfig[0xb] = newMemoryConfig[2];\n  originalMemoryConfig[10] = *newMemoryConfig;\n  if (originalMemoryConfig == (uint *)0x40012c00) {\n    specialValue = newMemoryConfig[4];\n  }\n  originalMemoryConfig[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_configuration_08003c94",
                "param_1": "originalMemoryConfig",
                "param_2": "newMemoryConfig",
                "local_c": "modifiedMemoryConfig",
                "uRam40012c30": "specialValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_configuration_08003d60",
            "code": "\nvoid updateConfiguration_08003d60(int configAddress,uint *configValues)\n\n{\n  uint firstConfigValue;\n  uint updatedConfigValue;\n  uint originalConfigValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffffe;\n  originalConfigValue = *(uint *)(configAddress + 4);\n  firstConfigValue = *configValues;\n  updatedConfigValue = configValues[2] | *(uint *)(configAddress + 0x20) & 0xfffffffd;\n  if (configAddress == 0x40012c00) {\n    updatedConfigValue = (configValues[3] | updatedConfigValue & 0xfffffff7) & 0xfffffffb;\n    originalConfigValue = configValues[6] | configValues[5] | originalConfigValue & 0xfffffcff;\n  }\n  *(uint *)(configAddress + 4) = originalConfigValue;\n  *(uint *)(configAddress + 0x18) = firstConfigValue | *(uint *)(configAddress + 0x18) & 0xffffff8c;\n  *(uint *)(configAddress + 0x34) = configValues[1];\n  *(uint *)(configAddress + 0x20) = updatedConfigValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_configuration_08003d60",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "firstConfigValue",
                "uVar2": "updatedConfigValue",
                "local_10": "originalConfigValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_param_values_08003e38",
            "code": "\nvoid updateParamValues_08003e38(int paramAddress,int *paramArray)\n\n{\n  int intValue;\n  uint updatedValue;\n  uint localValue;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xffffffef;\n  localValue = *(uint *)(paramAddress + 4);\n  intValue = *paramArray;\n  updatedValue = paramArray[2] << 4 | *(uint *)(paramAddress + 0x20) & 0xffffffdf;\n  if (paramAddress == 0x40012c00) {\n    updatedValue = (paramArray[3] << 4 | updatedValue & 0xffffff7f) & 0xffffffbf;\n    localValue = paramArray[6] << 2 | paramArray[5] << 2 | localValue & 0xfffff3ff;\n  }\n  *(uint *)(paramAddress + 4) = localValue;\n  *(uint *)(paramAddress + 0x18) = intValue << 8 | *(uint *)(paramAddress + 0x18) & 0xffff8cff;\n  *(int *)(paramAddress + 0x38) = paramArray[1];\n  *(uint *)(paramAddress + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_param_values_08003e38",
                "param_1": "paramAddress",
                "param_2": "paramArray",
                "iVar1": "intValue",
                "uVar2": "updatedValue",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_memory_registers_08003f18",
            "code": "\nvoid updateMemoryRegisters_08003f18(int memoryAddress,uint *memoryData)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  \n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) & 0xfffffeff;\n  tempVar3 = *(uint *)(memoryAddress + 4);\n  tempVar1 = *memoryData;\n  tempVar2 = memoryData[2] << 8 | *(uint *)(memoryAddress + 0x20) & 0xfffffdff;\n  if (memoryAddress == 0x40012c00) {\n    tempVar2 = (memoryData[3] << 8 | tempVar2 & 0xfffff7ff) & 0xfffffbff;\n    tempVar3 = memoryData[6] << 4 | memoryData[5] << 4 | tempVar3 & 0xffffcfff;\n  }\n  *(uint *)(memoryAddress + 4) = tempVar3;\n  *(uint *)(memoryAddress + 0x1c) = tempVar1 | *(uint *)(memoryAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(memoryAddress + 0x3c) = memoryData[1];\n  *(uint *)(memoryAddress + 0x20) = tempVar2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_memory_registers_08003f18",
                "param_1": "memoryAddress",
                "param_2": "memoryData",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "local_10": "tempVar3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_data_08003ff8",
            "code": "\nvoid updateData_08003ff8(int baseAddress,int *data)\n\n{\n  int value1;\n  int value2;\n  uint maskedValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  maskedValue = *(uint *)(baseAddress + 4);\n  value1 = *data;\n  value2 = data[2];\n  if (baseAddress == 0x40012c00) {\n    maskedValue = data[5] << 6 | maskedValue & 0xffffbfff;\n  }\n  *(uint *)(baseAddress + 4) = maskedValue;\n  *(uint *)(baseAddress + 0x1c) = value1 << 8 | *(uint *)(baseAddress + 0x1c) & 0xffff8cff;\n  *(int *)(baseAddress + 0x40) = data[1];\n  *(uint *)(baseAddress + 0x20) = value2 << 0xc | *(uint *)(baseAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "baseAddress",
                "param_2": "data",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "maskedValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameters_080040a0",
            "code": "\nvoid updateParameters_080040a0(int functionPointer,uint flags,int value)\n\n{\n  uint originalFlags;\n  \n  originalFlags = *(uint *)(functionPointer + 0x20);\n  *(uint *)(functionPointer + 0x20) = *(uint *)(functionPointer + 0x20) & 0xfffffffe;\n  *(uint *)(functionPointer + 0x18) = value << 4 | *(uint *)(functionPointer + 0x18) & 0xffffff0f;\n  *(uint *)(functionPointer + 0x20) = flags | originalFlags & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "functionPointer",
                "param_2": "flags",
                "param_3": "value",
                "uVar1": "originalFlags"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_flags_08004104",
            "code": "\nvoid updateFlags_08004104(int dataPtr,int value1,int value2)\n\n{\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) & 0xffffffef;\n  *(uint *)(dataPtr + 0x18) = value2 << 0xc | *(uint *)(dataPtr + 0x18) & 0xffff0fff;\n  *(uint *)(dataPtr + 0x20) = value1 << 4 | *(uint *)(dataPtr + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_flags_08004104",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "set_flags_0800416a",
            "code": "\nvoid setFlags_0800416a(int ptr,ushort data)\n\n{\n  *(unsignedInt *)(ptr + 8) = *(unsignedInt *)(ptr + 8) & 0xffffff8f | (unsignedInt)(data | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "set_flags_0800416a",
                "param_1": "ptr",
                "param_2": "data",
                "uint": "unsignedInt"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_parameter_080041a8",
            "code": "\nvoid updateParameter_080041a8(int dataPointer,uint inputValue1,uint inputValue2,int inputValue3)\n\n{\n  *(uint *)(dataPointer + 8) = inputValue1 | inputValue3 << 8 | inputValue2 | *(uint *)(dataPointer + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_parameter_080041a8",
                "param_1": "dataPointer",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bit_value_080041ea",
            "code": "\nvoid updateBitValue_080041ea(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bit_value_080041ea",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_status_0800422e",
            "code": "\nundefined4 updateStatus_0800422e(int *status,uint *data)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(status + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(status + 0xf) = 1;\n    *(uint *)(*status + 0x44) =\n         data[6] |\n         (data[6] |\n         (data[5] |\n         (data[4] |\n         (*data | (data[1] | (data[2] | data[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(status + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_status_0800422e",
                "param_1": "status",
                "param_2": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_and_values_080042de",
            "code": "\nundefined4 updateFlagsAndValues_080042de(int *dataPointer,uint *inputValues)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(dataPointer + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(dataPointer + 0xf) = 1;\n    *(undefined *)((int)dataPointer + 0x3d) = 2;\n    *(uint *)(*dataPointer + 4) = *(uint *)(*dataPointer + 4) & 0xffffff8f;\n    *(uint *)(*dataPointer + 4) = *inputValues | *(uint *)(*dataPointer + 4);\n    *(uint *)(*dataPointer + 8) = *(uint *)(*dataPointer + 8) & 0xffffff7f;\n    *(uint *)(*dataPointer + 8) = inputValues[1] | *(uint *)(*dataPointer + 8);\n    *(undefined *)((int)dataPointer + 0x3d) = 1;\n    *(undefined *)(dataPointer + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_and_values_080042de",
                "param_1": "dataPointer",
                "param_2": "inputValues",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_0800438a",
            "code": "\nundefined4 initializeData_0800438a(int *dataPointer)\n\n{\n  undefined4 returnValue;\n  \n  if (dataPointer == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      FUNC_08004424(dataPointer);\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 0x24;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    FUN_080046ec(dataPointer);\n    *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x2000;\n    dataPointer[0xf] = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x20;\n    *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_0800438a",
                "param_1": "dataPointer",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **data,ushort *buffer,short bufferSize,uint timeout)\n\n{\n  int errorCode;\n  int comparison;\n  undefined4 result;\n  ushort *currentChar;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((buffer == (ushort *)0x0) || (bufferSize == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      errorCode = FUN_080015a0();\n      *(short *)(data + 9) = bufferSize;\n      *(short *)((int)data + 0x26) = bufferSize;\n      currentChar = buffer;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              comparison = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (comparison = FUN_080015a0(), (uint)(comparison - errorCode) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          comparison = 3;\nLAB_0800454c:\n          if (comparison != 0) {\n            return 3;\n          }\n          (*data)[1] = *currentChar & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            currentChar = currentChar + 1;\n          }\n          else {\n            currentChar = (ushort *)((int)currentChar + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              comparison = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (comparison = FUN_080015a0(), (uint)(comparison - errorCode) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          comparison = 3;\nLAB_08004614:\n          if (comparison != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)currentChar;\n          currentChar = (ushort *)((int)currentChar + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          errorCode = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (comparison = FUN_080015a0(), (uint)(comparison - errorCode) <= timeout))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      errorCode = 3;\nLAB_080046c6:\n      if (errorCode == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "bufferSize",
                "param_4": "timeout",
                "iVar1": "errorCode",
                "iVar2": "comparison",
                "uVar3": "result",
                "local_58": "currentChar"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_checksum_080046ec",
            "code": "\nvoid calculateChecksum_080046ec(int *checksumData)\n\n{\n  ulonglong quotient;\n  int tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  undefined8 randomValue;\n  \n  *(uint *)(*checksumData + 0x10) = checksumData[3] | *(uint *)(*checksumData + 0x10) & 0xffffcfff;\n  *(uint *)(*checksumData + 0xc) =\n       *(uint *)(*checksumData + 0xc) & 0xffffe9f3 | checksumData[5] | checksumData[2] | checksumData[4];\n  *(uint *)(*checksumData + 0x14) = checksumData[6] | *(uint *)(*checksumData + 0x14) & 0xfffffcff;\n  if (*checksumData == 0x40013800) {\n    randomValue = FUN_08003540();\n    quotient = (ulonglong)(uint)(randomValue * 0x19) / (ulonglong)(uint)(checksumData[1] << 2);\n    tempVar1 = FUN_08003540(randomValue,(int)((ulonglong)randomValue >> 0x20),(int)(quotient * 0x51eb851f));\n    tempVar2 = checksumData[1];\n    randomValue = FUN_08003540();\n    tempVar3 = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)(randomValue * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003540(randomValue,(int)((ulonglong)randomValue >> 0x20),tempVar3 * 0x51eb851f);\n    tempVar4 = checksumData[1];\n    tempVar2 = FUN_08003540();\n    *(uint *)(*checksumData + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar4 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (tempVar3 / 100 & 0xf0);\n  }\n  else {\n    randomValue = FUN_08003518();\n    quotient = (ulonglong)(uint)(randomValue * 0x19) / (ulonglong)(uint)(checksumData[1] << 2);\n    tempVar1 = FUN_08003518(randomValue,(int)((ulonglong)randomValue >> 0x20),(int)(quotient * 0x51eb851f));\n    tempVar2 = checksumData[1];\n    randomValue = FUN_08003518();\n    tempVar3 = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)(randomValue * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003518(randomValue,(int)((ulonglong)randomValue >> 0x20),tempVar3 * 0x51eb851f);\n    tempVar4 = checksumData[1];\n    tempVar2 = FUN_08003518();\n    *(uint *)(*checksumData + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar4 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(checksumData[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (tempVar3 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "checksumData",
                "uVar1": "quotient",
                "iVar2": "tempVar1",
                "iVar3": "tempVar2",
                "uVar4": "tempVar3",
                "iVar5": "tempVar4",
                "uVar6": "randomValue",
                "param_1[1]": "checksumData[1]",
                "param_1[2]": "checksumData[2]",
                "param_1[3]": "checksumData[3]",
                "param_1[4]": "checksumData[4]",
                "param_1[5]": "checksumData[5]",
                "param_1[6]": "checksumData[6]",
                "(int)uVar6": "randomValue"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_memory_0800491c",
            "code": "\nvoid initializeMemory_0800491c(undefined4 *memoryBlock)\n\n{\n  undefined byte1;\n  undefined byte2;\n  undefined byteArray [5];\n  \n  byte1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&byte1,1);\n  byte2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&byte2,1);\n  byteArray[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,byteArray,1);\n  *memoryBlock = 0;\n  memoryBlock[1] = 0;\n  memoryBlock[2] = 0;\n  memoryBlock[3] = 0;\n  memoryBlock[4] = 0;\n  memoryBlock[5] = 0;\n  memoryBlock[6] = 0;\n  memoryBlock[7] = 0;\n  memoryBlock[8] = 0;\n  memoryBlock[9] = 0;\n  memoryBlock[10] = 0;\n  FUN_080049cc(memoryBlock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_memory_0800491c",
                "param_1": "memoryBlock",
                "local_13": "byte1",
                "local_12": "byte2",
                "local_11": "byteArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_scores_080049cc",
            "code": "\nvoid calculateScores_080049cc(int input)\n\n{\n  undefined4 result;\n  undefined4 score2;\n  undefined4 score1;\n  undefined4 time;\n  int counter;\n  int index;\n  undefined4 maxScore1;\n  undefined4 maxScore2;\n  undefined4 maxTime;\n  undefined4 totalScore;\n  \n  counter = 1;\n  totalScore = 0;\n  maxTime = 0;\n  maxScore2 = 0;\n  maxScore1 = 0;\n  time = (*DAT_20000a50)();\n  index = 0;\n  while( true ) {\n    if (counter <= index) break;\n    score1 = 0;\n    score2 = 0;\n    FUN_08004ae0(input);\n    FUN_08004d78(input,&score1,&score2);\n    maxScore2 = FUN_08000aa8(maxScore2,score1);\n    maxScore1 = FUN_08000aa8(maxScore1,score2);\n    totalScore = FUN_08000aa8(totalScore,*(undefined4 *)(input + 0x10));\n    maxTime = FUN_08000aa8(maxTime,*(undefined4 *)(input + 0x14));\n    time = (*DAT_20000a50)();\n    index = index + 1;\n  }\n  result = FUN_08000c10(counter);\n  result = FUN_08000e20(totalScore,result);\n  *(undefined4 *)(input + 0x1c) = result;\n  result = FUN_08000c10(counter);\n  result = FUN_08000e20(maxTime,result);\n  *(undefined4 *)(input + 0x20) = result;\n  result = FUN_08000c10(counter);\n  result = FUN_08000e20(maxScore2,result);\n  *(undefined4 *)(input + 0x24) = result;\n  result = FUN_08000c10(counter);\n  result = FUN_08000e20(maxScore1,result);\n  *(undefined4 *)(input + 0x28) = result;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_scores_080049cc",
                "param_1": "input",
                "uVar1": "result",
                "local_2c": "score2",
                "local_28": "score1",
                "local_24": "time",
                "local_20": "counter",
                "local_1c": "index",
                "local_18": "maxScore1",
                "local_14": "maxScore2",
                "local_10": "maxTime",
                "local_c": "totalScore"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_and_assign_values_08004ae0",
            "code": "\nvoid extract_and_assign_values_08004ae0(undefined4 *result_array)\n\n{\n  undefined4 uVar1;\n  undefined buffer_1;\n  undefined buffer_2;\n  undefined buffer_3;\n  undefined buffer_4;\n  undefined buffer_5;\n  undefined buffer_6;\n  undefined buffer_7;\n  undefined buffer_8;\n  undefined buffer_9;\n  undefined buffer_10;\n  undefined buffer_11;\n  undefined buffer_12;\n  undefined buffer_13;\n  undefined buffer_14;\n  short concatenated_buffer_1;\n  short concatenated_buffer_2;\n  short concatenated_buffer_3;\n  short concatenated_buffer_4;\n  short concatenated_buffer_5;\n  short concatenated_buffer_6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&buffer_1,0xe);\n  concatenated_buffer_6 = CONCAT11(buffer_3,buffer_4);\n  concatenated_buffer_5 = CONCAT11(buffer_5,buffer_6);\n  concatenated_buffer_4 = CONCAT11(buffer_7,buffer_8);\n  concatenated_buffer_3 = CONCAT11(buffer_9,buffer_10);\n  concatenated_buffer_2 = CONCAT11(buffer_11,buffer_12);\n  concatenated_buffer_1 = CONCAT11(buffer_13,buffer_14);\n  uVar1 = FUN_08000c10((int)CONCAT11(buffer_1,buffer_2));\n  *result_array = uVar1;\n  uVar1 = FUN_08000c10((int)concatenated_buffer_6);\n  result_array[1] = uVar1;\n  uVar1 = FUN_08000c10((int)concatenated_buffer_5);\n  result_array[2] = uVar1;\n  uVar1 = FUN_08000c10((int)concatenated_buffer_4);\n  result_array[3] = uVar1;\n  uVar1 = FUN_08000c10((int)concatenated_buffer_3);\n  result_array[4] = uVar1;\n  uVar1 = FUN_08000c10((int)concatenated_buffer_2);\n  result_array[5] = uVar1;\n  uVar1 = FUN_08000c10((int)concatenated_buffer_1);\n  result_array[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_and_assign_values_08004ae0",
                "param_1": "result_array",
                "local_2c": "buffer_1",
                "local_2b": "buffer_2",
                "local_2a": "buffer_3",
                "local_29": "buffer_4",
                "local_28": "buffer_5",
                "local_27": "buffer_6",
                "local_26": "buffer_7",
                "local_25": "buffer_8",
                "local_24": "buffer_9",
                "local_23": "buffer_10",
                "local_22": "buffer_11",
                "local_21": "buffer_12",
                "local_20": "buffer_13",
                "local_1f": "buffer_14",
                "local_1e": "concatenated_buffer_1",
                "local_1c": "concatenated_buffer_2",
                "local_1a": "concatenated_buffer_3",
                "local_18": "concatenated_buffer_4",
                "local_16": "concatenated_buffer_5",
                "local_14": "concatenated_buffer_6"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculateResult_08004bd8(int inputData,undefined4 *outputData)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(inputData + 0x10),*(undefined4 *)(inputData + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(inputData + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(inputData + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(inputData + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *outputData = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "inputData",
                "param_2": "outputData",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_results_08004d78",
            "code": "\nvoid calculateResults_08004d78(undefined4 *inputValues,undefined4 *output1,undefined4 *output2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  result1 = FUN_08000e20(*inputValues,0x45800000);\n  result2 = FUN_08000e20(inputValues[1],0x45800000);\n  result3 = FUN_08000e20(inputValues[2],0x45800000);\n  temp1 = FUN_08000418(result2);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result2 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  temp1 = FUN_08000418(result1);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result1 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  *output1 = result2;\n  *output2 = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_results_08004d78",
                "param_1": "inputValues",
                "param_2": "output1",
                "param_3": "output2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "temp1",
                "uVar5": "temp2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "execute_software_interrupt_08004e6c",
            "code": "\nvoid executeSoftwareInterrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "execute_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_data_08004e74",
            "code": "\nundefined4 initializeData_08004e74(undefined4 inputData)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_200009f0 == 0) {\n    returnValue = FUN_08004e6c(1,inputData,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_data_08004e74",
                "param_1": "inputData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "execute_data_operation_08004ea4",
            "code": "\nvoid execute_data_operation_08004ea4(undefined data_buffer,undefined data_size,undefined4 operation_flag,undefined2 operation_mode)\n\n{\n  FUN_08001ccc(&DAT_20000a88,data_buffer,data_size,1,operation_flag,operation_mode,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "execute_data_operation_08004ea4",
                "param_1": "data_buffer",
                "param_2": "data_size",
                "param_3": "operation_flag",
                "param_4": "operation_mode"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "initialize_data_08004ee8",
            "code": "\nvoid initializeData_08004ee8(undefined dataPointer,undefined paramPointer,undefined4 value1,undefined2 value2)\n\n{\n  FUN_08001f6c(&DAT_20000a88,dataPointer,paramPointer,1,value1,value2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "initialize_data_08004ee8",
                "param_1": "dataPointer",
                "param_2": "paramPointer",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "initialize_application_08004f2c",
            "code": "\nundefined4 initializeApplication_08004f2c(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015a0();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "initialize_application_08004f2c",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initializeData_08004f3c(undefined4 dataPointer,undefined2 value)\n\n{\n  FUN_08004436(&DAT_20000adc,dataPointer,value,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "dataPointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_data_08004f60",
            "code": "\nvoid initializeData_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_data_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "initialize_audio_08004f78",
            "code": "\nvoid initializeAudio_08004f78(void)\n\n{\n  undefined4 result;\n  int status;\n  undefined4 value;\n  uint mask;\n  undefined8 pitch;\n  byte pitchValue;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitch = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitch,(int)((ulonglong)pitch >> 0x20));\n  result = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,result);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  result = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(result,DAT_20000b5c);\n  result = FUN_08000c10(DAT_20000010);\n  status = FUN_08000ff4(result,DAT_20000b5c);\n  if (status == 0) {\n    result = FUN_08000c10(DAT_200009f4);\n    status = FUN_08001030(result,DAT_20000b5c);\n    if (status != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  mask = DAT_20000a08 ^ 0x80000000;\n  result = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(mask,result);\n  result = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  result = FUN_08000aa8(result,DAT_20000a58);\n  value = FUN_08000c10(DAT_20000010);\n  status = FUN_08001030(result,value);\n  if (status == 0) {\n    value = FUN_08000c10(DAT_200009f4);\n    status = FUN_08000ff4(result,value);\n    if (status == 0) {\n      pitchValue = FUN_08001044(result);\n    }\n    else {\n      pitchValue = DAT_200009f4;\n    }\n  }\n  else {\n    pitchValue = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,status != 0);\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,status == 0);\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,status != 0);\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,status == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitchValue;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitchValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "initialize_audio_08004f78",
                "uVar1": "result",
                "iVar2": "status",
                "uVar3": "value",
                "uVar4": "mask",
                "uVar5": "pitch",
                "local_11": "pitchValue"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "execute_application_08005224",
            "code": "\nvoid executeApplication_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "execute_application_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_and_execute_080052a0",
            "code": "\nvoid initialize_and_execute_080052a0(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined4 num_attempts;\n  undefined4 retry_limit;\n  undefined4 buffer_size;\n  undefined4 error_code;\n  undefined4 result;\n  undefined4 flag_value;\n  undefined4 memory_size;\n  undefined4 counter_1;\n  undefined4 counter_2;\n  undefined4 initial_value;\n  undefined4 max_value;\n  undefined4 base_address;\n  \n  flag_value = 1;\n  memory_size = 0x10000;\n  counter_1 = 0;\n  counter_2 = 1;\n  initial_value = 2;\n  max_value = 0x10000;\n  base_address = 0x1c0000;\n  iVar1 = FUN_08002d98(&flag_value);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  num_attempts = 0xf;\n  retry_limit = 2;\n  buffer_size = 0x80;\n  error_code = 0;\n  result = 0;\n  iVar1 = FUN_08003260(&num_attempts,2);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  uVar2 = FUN_08003504();\n  FUN_08001762((uint)uVar2 / 1000,(int)((ulonglong)uVar2 >> 0x20),(uint)uVar2 * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_and_execute_080052a0",
                "local_44": "num_attempts",
                "local_40": "retry_limit",
                "local_3c": "buffer_size",
                "local_38": "error_code",
                "local_34": "result",
                "local_30": "flag_value",
                "local_2c": "memory_size",
                "local_28": "counter_1",
                "local_20": "counter_2",
                "local_14": "initial_value",
                "local_10": "max_value",
                "local_c": "base_address"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_application_08005348",
            "code": "\nvoid initializeApplication_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = FUN_08001ab0(&DAT_20000a88);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_application_08005348",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_program_080053b0",
            "code": "\nvoid initializeProgram_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 errorCode1;\n  undefined4 errorCode2;\n  undefined4 errorCode3;\n  undefined4 errorCode4;\n  undefined4 errorCode5;\n  undefined4 errorCode6;\n  undefined4 errorCode7;\n  undefined4 errorCode8;\n  undefined4 errorCode9;\n  undefined4 errorCode10;\n  undefined4 errorCode11;\n  undefined4 errorCode12;\n  undefined4 errorCode13;\n  undefined4 errorCode14;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 local_18 [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  local_18[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b1c,local_18);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = FUN_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  flag1 = 0;\n  flag2 = 0;\n  iVar1 = FUN_080042de(&DAT_20000b1c,&flag1);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  errorCode8 = 0x60;\n  errorCode9 = 0;\n  errorCode10 = 0;\n  errorCode11 = 0;\n  errorCode12 = 0;\n  errorCode13 = 0;\n  errorCode14 = 0;\n  iVar1 = FUN_08003908(&DAT_20000b1c,&errorCode8,0);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = FUN_08003908(&DAT_20000b1c,&errorCode8,0xc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  errorCode1 = 0;\n  errorCode2 = 0;\n  errorCode3 = 0;\n  errorCode4 = 0;\n  errorCode5 = 0;\n  errorCode6 = 0x2000;\n  errorCode7 = 0;\n  iVar1 = FUN_0800422e(&DAT_20000b1c,&errorCode1);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "local_58": "errorCode1",
                "local_54": "errorCode2",
                "local_50": "errorCode3",
                "local_4c": "errorCode4",
                "local_48": "errorCode5",
                "local_44": "errorCode6",
                "local_40": "errorCode7",
                "local_3c": "errorCode8",
                "local_38": "errorCode9",
                "local_34": "errorCode10",
                "local_30": "errorCode11",
                "local_2c": "errorCode12",
                "local_28": "errorCode13",
                "local_24": "errorCode14",
                "local_20": "flag1",
                "local_1c": "flag2"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_data_08005500",
            "code": "\nvoid initializeData_08005500(void)\n\n{\n  int iVar1;\n  undefined4 bufferSize;\n  undefined4 startIndex;\n  undefined4 data [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b60);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  data[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b60,data);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  startIndex = 0;\n  iVar1 = FUN_080042de(&DAT_20000b60,&bufferSize);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_data_08005500",
                "local_20": "bufferSize",
                "local_1c": "startIndex",
                "local_18": "data"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_08005598",
            "code": "\nvoid initializeData_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = FUN_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_data_080055f4",
            "code": "\n\n\nvoid initializeData_080055f4(void)\n\n{\n  undefined4 dataLength;\n  undefined4 value1;\n  undefined4 value2;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  dataLength = 0x1e;\n  value1 = 1;\n  value2 = 2;\n  FUN_080017c4(0x40010800,&dataLength);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_data_080055f4",
                "local_18": "dataLength",
                "local_14": "value1",
                "local_c": "value2"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_values_08005680",
            "code": "\nvoid initializeValues_08005680(int *valuePtr)\n\n{\n  undefined4 desiredValue;\n  undefined4 count;\n  undefined4 index;\n  \n  if (*valuePtr == 0x40012c00) {\n    desiredValue = 0x900;\n    count = 2;\n    index = 2;\n    FUN_080017c4(0x40010800,&desiredValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_values_08005680",
                "param_1": "valuePtr",
                "local_18": "desiredValue",
                "local_14": "count",
                "local_c": "index"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "execute_initialization_08005704",
            "code": "\nvoid execute_initialization_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "execute_initialization_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_08005714",
            "code": "\nvoid initializeData_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *ptr;\n  undefined *result;\n  undefined buffer [4];\n  int remainingSize;\n  undefined *currentPtr;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  currentPtr = DAT_20000a10;\n  if (buffer < DAT_20000a10 + size) {\n    remainingSize = size;\n    ptr = (undefined4 *)FUN_08005d14();\n    *ptr = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "ptr",
                "puVar2": "result",
                "auStack_18": "buffer",
                "local_14": "remainingSize",
                "local_c": "currentPtr"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_hardware_08005780",
            "code": "\n\n\nvoid initializeHardware_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_hardware_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  undefined4 temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  undefined8 temp_6;\n  \n  temp_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (temp_5 = input_2 & 0x7fffffff, 0x7ff00000 < (temp_5 | (-input_1 | input_1) >> 0x1f))) {\n    temp_4 = FUN_0800015c(input_3,input_4,input_1,input_2);\n    return temp_4;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    temp_4 = FUN_080059f0();\n    return temp_4;\n  }\n  temp_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((temp_5 | input_1) == 0) {\n    if (temp_3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp_3 != 3) {\n      return input_1;\n    }\n  }\n  else if ((temp_4 | input_3) != 0) {\n    if (temp_4 == 0x7ff00000) {\n      if (temp_5 == 0x7ff00000) {\n        if (temp_3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp_3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp_3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp_3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp_3 != 3) {\n        if (temp_3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp_5 != 0x7ff00000) {\n      temp_1 = (int)(temp_5 - temp_4) >> 0x14;\n      if (temp_1 < 0x3d) {\n        if (((int)input_4 < 0) && (temp_1 + 0x3c < 0 != SCARRY4(temp_1,0x3c))) {\n          temp_6 = 0;\n        }\n        else {\n          FUN_0800071c(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          temp_6 = FUN_080059f0();\n        }\n      }\n      else {\n        temp_6 = 0x3ff921fb54442d18;\n      }\n      temp_2 = (undefined4)((ulonglong)temp_6 >> 0x20);\n      temp_4 = (uint)temp_6;\n      if (temp_3 == 1) {\n        return temp_4;\n      }\n      if (temp_3 == 2) {\n        temp_6 = FUN_08000158(temp_4,temp_2,0x33145c07,0x3ca1a626);\n        temp_4 = FUN_08000158(0x54442d18,0x400921fb,(int)temp_6,(int)((ulonglong)temp_6 >> 0x20));\n        return temp_4;\n      }\n      if (temp_3 != 0) {\n        temp_6 = FUN_08000158(temp_4,temp_2,0x33145c07,0x3ca1a626);\n        temp_4 = FUN_08000158((int)temp_6,(int)((ulonglong)temp_6 >> 0x20),0x54442d18,0x400921fb);\n        return temp_4;\n      }\n      return temp_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculateResult_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result32;\n  uint condition;\n  uint maskedInput4;\n  uint maskedInput2;\n  undefined8 result64;\n  \n  maskedInput4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (maskedInput4 | (-input3 | input3) >> 0x1f)) ||\n     (maskedInput2 = input2 & 0x7fffffff, 0x7ff00000 < (maskedInput2 | (-input1 | input1) >> 0x1f))) {\n    maskedInput4 = FUN_0800015c(input3,input4,input1,input2);\n    return maskedInput4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    maskedInput4 = FUN_080059f0();\n    return maskedInput4;\n  }\n  condition = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((maskedInput2 | input1) == 0) {\n    if (condition == 2) {\n      return 0x54442d18;\n    }\n    if (condition != 3) {\n      return input1;\n    }\n  }\n  else if ((maskedInput4 | input3) != 0) {\n    if (maskedInput4 == 0x7ff00000) {\n      if (maskedInput2 == 0x7ff00000) {\n        if (condition == 2) {\n          return 0x7f3321d2;\n        }\n        if (condition == 3) {\n          return 0x7f3321d2;\n        }\n        if (condition == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (condition == 2) {\n        return 0x54442d18;\n      }\n      if (condition != 3) {\n        if (condition != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (maskedInput2 != 0x7ff00000) {\n      difference = (int)(maskedInput2 - maskedInput4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result64 = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result64 = FUN_080059f0();\n        }\n      }\n      else {\n        result64 = 0x3ff921fb54442d18;\n      }\n      result32 = (undefined4)((ulonglong)result64 >> 0x20);\n      maskedInput4 = (uint)result64;\n      if (condition == 1) {\n        return maskedInput4;\n      }\n      if (condition == 2) {\n        result64 = FUN_08000158(maskedInput4,result32,0x33145c07,0x3ca1a626);\n        maskedInput4 = FUN_08000158(0x54442d18,0x400921fb,(int)result64,(int)((ulonglong)result64 >> 0x20));\n        return maskedInput4;\n      }\n      if (condition != 0) {\n        result64 = FUN_08000158(maskedInput4,result32,0x33145c07,0x3ca1a626);\n        maskedInput4 = FUN_08000158((int)result64,(int)((ulonglong)result64 >> 0x20),0x54442d18,0x400921fb);\n        return maskedInput4;\n      }\n      return maskedInput4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "result32",
                "uVar3": "condition",
                "uVar4": "maskedInput4",
                "uVar5": "maskedInput2",
                "uVar6": "result64"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculate_result_080059f0(int input_num,uint input_uint,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint abs_value;\n  int result;\n  undefined8 temp7;\n  undefined8 temp8;\n  \n  temp8 = CONCAT44(input_uint,input_num);\n  abs_value = input_uint & 0x7fffffff;\n  if (abs_value < 0x44100000) {\n    if (abs_value < 0x3fdc0000) {\n      if (abs_value < 0x3e200000) {\n        temp7 = FUN_0800015c(input_num,input_uint,0x8800759c,0x7e37e43c,param4);\n        result = FUN_080009e8((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return CONCAT44(input_uint,input_num);\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp8 = FUNC_08005d0c();\n      temp4 = (undefined4)((ulonglong)temp8 >> 0x20);\n      temp1 = (undefined4)temp8;\n      if (abs_value < 0x3ff30000) {\n        if (abs_value < 0x3fe60000) {\n          temp8 = FUN_0800015c(temp1,temp4,temp1,temp4);\n          temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n          temp7 = FUN_0800015c(temp1,temp4,0,0x40000000);\n          temp8 = FUN_0800071c((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp8 = FUN_08000158(temp1,temp4,0,0x3ff00000);\n          temp7 = FUN_0800015c(temp1,temp4,0,0x3ff00000);\n          temp8 = FUN_0800071c((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (abs_value < 0x40038000) {\n        temp8 = FUN_08000158(temp1,temp4,0,0x3ff80000);\n        temp7 = FUN_080004c8(temp1,temp4,0,0x3ff80000);\n        temp7 = FUN_0800015c((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3ff00000);\n        temp8 = FUN_0800071c((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,\n                              (int)((ulonglong)temp7 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp8 = FUN_0800071c(0,0xbff00000,temp1,temp4);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp5 = (undefined4)temp8;\n    temp8 = FUN_080004c8(temp5,temp6,temp5,temp6);\n    temp2 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp1 = (undefined4)temp8;\n    temp8 = FUN_080004c8(temp1,temp2,temp1,temp2);\n    temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp4 = (undefined4)temp8;\n    temp8 = FUN_080004c8(temp4,temp3,0xe322da11,0x3f90ad3a);\n    temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x920083ff,0x3fc24924);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x5555550d,0x3fd55555);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp1,temp2);\n    temp7 = FUN_080004c8(temp4,temp3,0x2c6a6c2f,0xbfa2b444);\n    temp7 = FUN_08000158((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp7 = FUN_080004c8((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = FUN_08000158((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp7 = FUN_080004c8((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = FUN_08000158((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp7 = FUN_080004c8((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = FUN_08000158((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp7 = FUN_080004c8((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,\n                          (int)((ulonglong)temp7 >> 0x20));\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp5,temp6);\n    temp1 = (undefined4)((ulonglong)temp8 >> 0x20);\n    if (result == -1) {\n      temp8 = FUN_08000158(temp5,temp6,(int)temp8,temp1);\n      return temp8;\n    }\n    result = result * 8;\n    temp8 = FUN_08000158((int)temp8,temp1,*(undefined4 *)(&UNK_08009ee8 + result),\n                          *(undefined4 *)(&UNK_08009eec + result));\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp5,temp6);\n    temp8 = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + result),\n                          *(undefined4 *)(&UNK_08009ecc + result),(int)temp8,\n                          (int)((ulonglong)temp8 >> 0x20));\n    if ((int)input_uint < 0) {\n      return CONCAT44((int)((ulonglong)temp8 >> 0x20) + -0x80000000,(int)temp8);\n    }\n  }\n  else {\n    if ((abs_value < 0x7ff00001) && ((abs_value != 0x7ff00000 || (input_num == 0)))) {\n      temp1 = 0xbff921fb;\n      if (0 < (int)input_uint) {\n        temp1 = 0x3ff921fb;\n      }\n      return CONCAT44(temp1,0x54442d18);\n    }\n    temp8 = FUN_0800015c(input_num,input_uint,input_num,input_uint,param4);\n  }\n  return temp8;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "input_num",
                "param_2": "input_uint",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "abs_value",
                "iVar8": "result",
                "uVar9": "temp7",
                "uVar10": "temp8"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_return_value_08005d14",
            "code": "\nundefined4 getReturnValue_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_return_value_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionArray;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionArray = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionArray)();\n    functionArray = functionArray + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_08005d68",
            "code": "\nvoid fillMemory_08005d68(undefined4 *dest,undefined value,uint count)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  uint remainingCount;\n  undefined4 memValue;\n  bool isZero;\n  \n  if (((uint)dest & 3) != 0) {\n    remainingCount = count - 1;\n    destPtr = dest;\n    if (count == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      count = remainingCount;\n      if (((uint)dest & 3) == 0) break;\n      isZero = remainingCount == 0;\n      remainingCount = remainingCount - 1;\n      destPtr = dest;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    memValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingCount = count;\n    destPtr = dest;\n    if (0xf < count) {\n      remainingCount = count - 0x10;\n      destPtr = dest + 4;\n      do {\n        destPtr[-4] = memValue;\n        destPtr[-3] = memValue;\n        destPtr[-2] = memValue;\n        destPtr[-1] = memValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (remainingCount & 0xfffffff0) + 0x20));\n      count = count & 0xf;\n      dest = dest + ((remainingCount >> 4) + 1) * 4;\n      remainingCount = count;\n      destPtr = dest;\n      if (count < 4) goto LAB_08005de4;\n    }\n    do {\n      count = count - 4;\n      *dest = memValue;\n      dest = dest + 1;\n    } while (3 < count);\n    dest = (undefined4 *)((int)destPtr + (remainingCount - 4 & 0xfffffffc) + 4);\n    count = remainingCount & 3;\n  }\nLAB_08005de4:\n  if (count != 0) {\n    destPtr = dest;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while ((undefined4 *)(count + (int)dest) != nextDestPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "remainingCount",
                "uVar4": "memValue",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_memory_08005dfc",
            "code": "\nvoid initializeMemory_08005dfc(undefined *memoryPointer,undefined4 size,undefined4 param3,undefined4 param4)\n\n{\n  undefined *localPointers [2];\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localMemPointer;\n  undefined4 maxSize;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  maxSize = 0x7fffffff;\n  localVar1 = 0x7fffffff;\n  localVar2 = 0xffff0208;\n  localPointers[0] = memoryPointer;\n  localMemPointer = memoryPointer;\n  param3_copy = param3;\n  param4_copy = param4;\n  FUNC_08005e9c(DAT_2000001c,localPointers,size,&param3_copy);\n  *localPointers[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_memory_08005dfc",
                "param_1": "memoryPointer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "localPointers",
                "local_78": "localVar1",
                "uStack_74": "localVar2",
                "local_70": "localMemPointer",
                "local_6c": "maxSize",
                "uStack_8": "param3_copy",
                "uStack_4": "param4_copy"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "calculate_lz_count_08005e40",
            "code": "\nint calculateLZCount_08005e40(uint inputValue)\n\n{\n  int alignOffset;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(inputValue & 0xfffffffc);\n  alignOffset = -(inputValue & 3);\n  value = *ptr;\n  if ((inputValue & 3) != 0) {\n    value = value | 0xffffffffU >> ((alignOffset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    alignOffset = alignOffset + 4;\n  }\n  return alignOffset + (0x1fU - LZCOUNT(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "calculate_lz_count_08005e40",
                "param_1": "inputValue",
                "iVar1": "alignOffset",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_dividend_080078c0",
            "code": "\nuint calculateDividend_080078c0(int dividend,int divisor)\n\n{\n  uint quotient;\n  uint *ptrDividend;\n  int carry;\n  int currentDivisor;\n  int currentDividendIndex;\n  uint remainder;\n  uint *ptrDivisor;\n  uint *ptrQuotient;\n  uint *ptrQuotientEnd;\n  uint carryDividendShifted;\n  uint *ptrDivisorNext;\n  uint *ptrDivisorCurrent;\n  \n  currentDivisor = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < currentDivisor) {\n    return 0;\n  }\n  currentDividendIndex = currentDivisor + -1;\n  ptrDivisor = (uint *)(divisor + 0x14);\n  ptrQuotient = (uint *)(dividend + 0x14);\n  remainder = ptrQuotient[currentDividendIndex] / (ptrDivisor[currentDividendIndex] + 1);\n  ptrQuotientEnd = ptrDivisor + currentDividendIndex;\n  if (remainder != 0) {\n    quotient = 0;\n    carry = 0;\n    ptrDividend = ptrQuotient;\n    ptrDivisorNext = ptrDivisor;\n    do {\n      ptrDivisorCurrent = ptrDivisorNext + 1;\n      quotient = remainder * (*ptrDivisorNext & 0xffff) + quotient;\n      carryDividendShifted = remainder * (*ptrDivisorNext >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*ptrDividend & 0xffff);\n      carry = ((*ptrDividend >> 0x10) - (carryDividendShifted & 0xffff)) + ((int)quotient >> 0x10);\n      *ptrDividend = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = carryDividendShifted >> 0x10;\n      ptrDividend = ptrDividend + 1;\n      ptrDivisorNext = ptrDivisorCurrent;\n    } while (ptrDivisorCurrent <= ptrQuotientEnd);\n    if (ptrQuotient[currentDividendIndex] == 0) {\n      if ((ptrQuotient < ptrQuotient + currentDivisor + -2) && (ptrQuotient[currentDivisor + -2] == 0)) {\n        ptrDividend = ptrQuotient + currentDivisor + -3;\n        do {\n          currentDividendIndex = currentDividendIndex + -1;\n          if (ptrDividend <= ptrQuotient) break;\n          quotient = *ptrDividend;\n          ptrDividend = ptrDividend + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = currentDividendIndex;\n    }\n  }\n  currentDivisor = FUN_080094f8();\n  if (-1 < currentDivisor) {\n    currentDivisor = 0;\n    remainder = remainder + 1;\n    ptrDividend = ptrQuotient;\n    do {\n      ptrDivisorNext = ptrDivisor + 1;\n      quotient = (currentDivisor - (*ptrDivisor & 0xffff)) + (*ptrDividend & 0xffff);\n      currentDivisor = ((*ptrDividend >> 0x10) - (*ptrDivisor >> 0x10)) + ((int)quotient >> 0x10);\n      *ptrDividend = quotient & 0xffff | currentDivisor * 0x10000;\n      currentDivisor = currentDivisor >> 0x10;\n      ptrDividend = ptrDividend + 1;\n      ptrDivisor = ptrDivisorNext;\n    } while (ptrDivisorNext <= ptrQuotientEnd);\n    if (ptrQuotient[currentDividendIndex] == 0) {\n      if ((ptrQuotient < ptrQuotient + currentDividendIndex + -1) && (ptrQuotient[currentDividendIndex + -1] == 0)) {\n        ptrDivisor = ptrQuotient + currentDividendIndex + -2;\n        do {\n          currentDividendIndex = currentDividendIndex + -1;\n          if (ptrDivisor <= ptrQuotient) break;\n          quotient = *ptrDivisor;\n          ptrDivisor = ptrDivisor + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = currentDividendIndex;\n    }\n  }\n  return remainder;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_dividend_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "ptrDividend",
                "iVar3": "carry",
                "iVar4": "currentDivisor",
                "iVar5": "currentDividendIndex",
                "uVar6": "remainder",
                "puVar7": "ptrDivisor",
                "puVar8": "ptrQuotient",
                "puVar9": "ptrQuotientEnd",
                "uVar10": "carryDividendShifted",
                "puVar11": "ptrDivisorNext",
                "puVar12": "ptrDivisorCurrent"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "format_float_080079e8",
            "code": "\nchar * formatFloat_080079e8(int precision,undefined4 flags,uint sign,uint exponent,uint minWidth,\n                   uint maxWidth,int *length,uint *overflow,char **formatted)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  char *pcVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  int iVar15;\n  undefined4 uVar16;\n  uint uVar17;\n  uint uVar18;\n  int iVar19;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 uVar23;\n  int iVar24;\n  bool bVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar14 = *(int *)(precision + 0x40);\n  if (iVar14 != 0) {\n    uVar18 = *(uint *)(precision + 0x44);\n    *(uint *)(iVar14 + 4) = uVar18;\n    *(int *)(iVar14 + 8) = 1 << (uVar18 & 0xff);\n    FUN_0800910c(precision,iVar14);\n    *(undefined4 *)(precision + 0x40) = 0;\n  }\n  bVar25 = (int)exponent < 0;\n  uVar18 = exponent;\n  if (bVar25) {\n    uVar18 = exponent & 0x7fffffff;\n  }\n  *overflow = (uint)bVar25;\n  local_7c = exponent;\n  if (bVar25) {\n    local_7c = uVar18;\n  }\n  uVar17 = local_7c;\n  if ((~uVar18 & 0x7ff00000) == 0) {\n    *length = 9999;\n    if ((sign == 0) && ((uVar18 & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (formatted == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (formatted == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *formatted = pcVar21;\n    return pcVar10;\n  }\n  uVar26 = FUN_08000998(sign,local_7c,0,0);\n  if ((int)uVar26 != 0) {\n    *length = 1;\n    if (formatted != (char **)0x0) {\n      *formatted = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  uVar6 = FUN_08009630(precision,(int)((ulonglong)uVar26 >> 0x20),sign,local_7c,local_2c,&local_30)\n  ;\n  iVar14 = local_30;\n  if (uVar18 >> 0x14 == 0) {\n    iVar19 = local_2c[0] + local_30;\n    iVar15 = iVar19 + 0x432;\n    if (iVar15 < 0x21) {\n      uVar18 = sign << (0x20U - iVar15 & 0xff);\n    }\n    else {\n      uVar18 = sign >> (iVar19 + 0x412U & 0xff) | uVar18 << (0x40U - iVar15 & 0xff);\n    }\n    uVar26 = FUN_080003d4(uVar18);\n    iVar19 = iVar19 + -1;\n    bVar25 = true;\n    uVar11 = (int)((ulonglong)uVar26 >> 0x20) + 0xfe100000;\n    uVar18 = (uint)uVar26;\n  }\n  else {\n    iVar19 = (uVar18 >> 0x14) - 0x3ff;\n    uVar11 = local_7c & 0xfffff | 0x3ff00000;\n    bVar25 = false;\n    uVar18 = sign;\n  }\n  uVar26 = FUN_08000158(uVar18,uVar11,0,0x3ff80000);\n  uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x636f4361,0x3fd287a7);\n  uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  uVar27 = FUN_080003f4(iVar19);\n  uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0x509f79fb,0x3fd34413);\n  uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar27,\n                        (int)((ulonglong)uVar27 >> 0x20));\n  uVar13 = (undefined4)((ulonglong)uVar26 >> 0x20);\n  local_74 = FUN_0800119c();\n  iVar15 = FUN_080009ac((int)uVar26,uVar13,0,0);\n  if (iVar15 != 0) {\n    uVar27 = FUN_080003f4(local_74);\n    iVar15 = FUN_08000998((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar13);\n    if (iVar15 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    iVar15 = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + local_74 * 8),\n                          *(undefined4 *)(&DAT_08009fac + local_74 * 8),sign,local_7c);\n    if (iVar15 == 0) {\n      bVar2 = false;\n    }\n    else {\n      local_74 = local_74 - 1;\n      bVar2 = false;\n    }\n  }\n  else {\n    bVar2 = true;\n  }\n  iVar15 = (iVar14 - iVar19) + -1;\n  if (iVar15 < 0) {\n    local_70 = 1 - (iVar14 - iVar19);\n    iVar15 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar15 = iVar15 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < minWidth) {\n    local_38 = 0xffffffff;\n    bVar1 = true;\n    local_68 = 0xffffffff;\n    bVar3 = true;\n    minWidth = 0;\n    maxWidth = 0;\n    goto LAB_08007c24;\n  }\n  bVar1 = (int)minWidth < 6;\n  if (!bVar1) {\n    minWidth = minWidth - 4;\n  }\n  switch(minWidth) {\n  case 2:\n    bVar3 = false;\n    break;\n  case 3:\n    bVar3 = false;\n    goto LAB_08008300;\n  case 4:\n    bVar3 = true;\n    break;\n  case 5:\n    bVar3 = true;\nLAB_08008300:\n    local_38 = local_74 + maxWidth;\n    local_68 = local_38 + 1;\n    uVar18 = local_68;\n    if ((int)local_68 < 1) {\n      uVar18 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(precision + 0x44) = 0;\n    pcVar10 = (char *)FUN_080090c0(precision,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    maxWidth = 0;\n    *(char **)(precision + 0x40) = pcVar10;\n    bVar3 = true;\n    goto LAB_08007e36;\n  }\n  if ((int)maxWidth < 1) {\n    local_38 = 1;\n    maxWidth = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(precision + 0x44) = 0;\n    uVar11 = local_38;\n  }\n  else {\n    local_38 = maxWidth;\n    local_68 = maxWidth;\n    uVar18 = maxWidth;\nLAB_08008314:\n    *(undefined4 *)(precision + 0x44) = 0;\n    uVar11 = local_68;\n    if (0x17 < (int)uVar18) {\n      iVar19 = 4;\n      iVar14 = 1;\n      do {\n        iVar7 = iVar14;\n        iVar19 = iVar19 * 2;\n        iVar14 = iVar7 + 1;\n      } while (iVar19 + 0x14U <= uVar18);\n      *(int *)(precision + 0x44) = iVar7;\n    }\n  }\n  pcVar10 = (char *)FUN_080090c0(precision);\n  *(char **)(precision + 0x40) = pcVar10;\n  if ((uVar11 < 0xf) && (bVar1)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar14 = 2;\n        local_80 = sign;\n      }\n      else {\n        iVar14 = (-local_74 & 0xf) * 8;\n        uVar26 = FUN_080004c8(sign,local_7c,*(undefined4 *)(&DAT_08009fa8 + iVar14),\n                              *(undefined4 *)(&DAT_08009fac + iVar14));\n        local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n        local_80 = (uint)uVar26;\n        iVar19 = (int)-local_74 >> 4;\n        if (iVar19 == 0) {\n          iVar14 = 2;\n        }\n        else {\n          bVar1 = false;\n          iVar14 = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (iVar19 << 0x1f < 0) {\n              uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]\n                                   );\n              bVar1 = true;\n              iVar14 = iVar14 + 1;\n            }\n            iVar19 = iVar19 >> 1;\n            puVar22 = puVar22 + 2;\n          } while (iVar19 != 0);\n          if (bVar1) {\n            local_80 = (uint)uVar26;\n            local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar18 = (int)local_74 >> 4;\n      uVar27 = *(undefined8 *)(&DAT_08009fa8 + (local_74 & 0xf) * 8);\n      uVar26 = *(undefined8 *)(&DAT_08009fa8 + (local_74 & 0xf) * 8);\n      if ((int)(uVar18 << 0x1b) < 0) {\n        uVar28 = FUN_0800071c(sign,local_7c,0x7f73bf3c,0x75154fdd);\n        uStack_44 = (uint)((ulonglong)uVar28 >> 0x20);\n        local_48 = (uint)uVar28;\n        iVar14 = 3;\n        uVar18 = uVar18 & 0xf;\n      }\n      else {\n        iVar14 = 2;\n        uStack_44 = local_7c;\n        local_48 = sign;\n      }\n      if (uVar18 != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(uVar18 << 0x1f) < 0) {\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]);\n            iVar14 = iVar14 + 1;\n          }\n          uVar18 = (int)uVar18 >> 1;\n          puVar22 = puVar22 + 2;\n          uVar27 = uVar26;\n        } while (uVar18 != 0);\n      }\n      local_7c = (uint)((ulonglong)uVar27 >> 0x20);\n      local_80 = (uint)uVar27;\n      uVar26 = FUN_0800071c(local_48,uStack_44,local_80,local_7c);\n      local_80 = (uint)uVar26;\n      local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n    }\n    uVar26 = CONCAT44(local_7c,local_80);\n    if ((bVar2) && (iVar19 = FUN_080009ac(local_80,local_7c,0,0x3ff00000), iVar19 != 0)) {\n      if (local_68 == 0) {\n        uVar26 = FUN_080003f4(iVar14);\n        uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_80,local_7c);\n        uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar26;\n        iVar14 = (int)((ulonglong)uVar26 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar26 = FUN_080004c8(local_80,local_7c,0,0x40240000);\n        uVar27 = FUN_080003f4(iVar14 + 1);\n        uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                              (int)((ulonglong)uVar26 >> 0x20));\n        uVar27 = FUN_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar27;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar14 = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar27 = FUN_080003f4(iVar14);\n    uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),local_80,local_7c);\n    uVar27 = FUN_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n    uVar13 = (undefined4)uVar27;\n    iVar14 = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n      local_80 = (uint)uVar26;\n      cVar4 = FUN_0800119c(local_80,local_7c);\n      cVar4 = cVar4 + '0';\n      uVar16 = (&DAT_08009fa0)[local_48 * 2];\n      uVar12 = (&DAT_08009fa4)[local_48 * 2];\n      uVar26 = FUN_080003f4();\n      uVar26 = FUN_08000158(local_80,local_7c,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n      uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (bVar3) {\n        uVar27 = FUN_0800071c(0,0x3fe00000,uVar16,uVar12);\n        uVar27 = FUN_08000158((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,iVar14);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = cVar4;\n        iVar14 = FUN_080009e8((int)uVar27,uVar13,(int)uVar26,uVar23);\n        if (iVar14 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar28 = FUN_08000158(0,0x3ff00000,(int)uVar26,uVar23);\n        iVar14 = FUN_080009e8((int)uVar27,uVar13,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n        if (iVar14 == 0) {\n          if (local_48 != 1) {\n            pcVar20 = pcVar21;\n            do {\n              uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x40240000);\n              uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n              uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n              cVar4 = FUN_0800119c();\n              uVar28 = FUN_080003f4();\n              uVar26 = FUN_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                    (int)((ulonglong)uVar28 >> 0x20));\n              uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              cVar4 = cVar4 + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = cVar4;\n              iVar14 = FUN_080009ac((int)uVar26,uVar16,(int)uVar27,uVar13);\n              if (iVar14 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar28 = FUN_08000158(0,0x3ff00000,(int)uVar26,uVar16);\n              iVar14 = FUN_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar27,uVar13)\n              ;\n              if (iVar14 != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      else {\n        uVar27 = FUN_080004c8(uVar13,iVar14,uVar16,uVar12);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = cVar4;\n        if (local_48 != 1) {\n          pcVar20 = pcVar21;\n          do {\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            cVar4 = FUN_0800119c();\n            uVar28 = FUN_080003f4();\n            uVar26 = FUN_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                  (int)((ulonglong)uVar28 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = cVar4 + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + local_48);\n        }\n        uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        uVar28 = FUN_0800015c((int)uVar27,uVar13,0,0x3fe00000);\n        iVar14 = FUN_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar26,uVar16);\n        if (iVar14 == 0) {\n          uVar27 = FUN_08000158(0,0x3fe00000,(int)uVar27,uVar13);\n          iVar14 = FUN_080009e8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar16);\n          pcVar20 = pcVar21;\n          if (iVar14 == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar4 = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar26 = FUN_08000158(local_80,local_7c,0,0x40140000);\n    uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar19 = FUN_080009e8((int)uVar26,uVar16,uVar13,iVar14);\n    if (iVar19 == 0) {\n      iVar14 = FUN_080009ac((int)uVar26,uVar16,uVar13,iVar14 + -0x80000000);\n      if (iVar14 == 0) goto LAB_08007e36;\n      iVar19 = 0;\n      iVar14 = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    iVar15 = 0;\n    iVar7 = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    local_74 = local_74 + 1;\n    pcVar21 = pcVar10 + 1;\n    iVar19 = iVar7;\n    iVar14 = iVar15;\nLAB_08008416:\n    FUN_0800910c(precision,iVar14);\n    if (iVar19 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar13 = *(undefined4 *)(&DAT_08009fa8 + local_74 * 8);\n      uVar16 = *(undefined4 *)(&DAT_08009fac + local_74 * 8);\n      if ((-1 < (int)maxWidth) || (0 < (int)local_68)) {\n        FUN_0800071c(sign,uVar17,uVar13,uVar16);\n        bVar5 = FUN_0800119c();\n        uVar26 = FUN_080003f4();\n        uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar13,uVar16);\n        uVar26 = FUN_08000158(sign,uVar17,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        *pcVar10 = bVar5 + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (local_68 != 1) {\n          uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n          iVar14 = FUN_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          while (iVar14 == 0) {\n            uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            FUN_0800071c((int)uVar26,uVar23,uVar13,uVar16);\n            bVar5 = FUN_0800119c();\n            uVar27 = FUN_080003f4();\n            uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,uVar16);\n            uVar26 = FUN_08000158((int)uVar26,uVar23,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = bVar5 + 0x30;\n            pcVar21 = pcVar20;\n            if (local_68 == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            iVar14 = FUN_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        iVar14 = FUN_080009e8((int)uVar26,uVar23,uVar13,uVar16);\n        if ((iVar14 == 0) &&\n           ((iVar14 = FUN_08000998((int)uVar26,uVar23,uVar13,uVar16), iVar14 == 0 ||\n            ((bVar5 & 1) == 0)))) goto LAB_08008294;\n        cVar4 = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, cVar4 == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            cVar4 = pcVar21[-1];\n            local_74 = local_74 + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          cVar4 = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = cVar4 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar26 = FUN_080004c8(uVar13,uVar16,0,0x40140000);\n        iVar9 = FUN_080009d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),sign,uVar17);\n        iVar19 = 0;\n        iVar15 = 0;\n        iVar7 = 0;\n        iVar14 = 0;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        iVar19 = 0;\n        iVar14 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~maxWidth;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    iVar14 = local_5c;\n    if (bVar3) {\n      if ((int)minWidth < 2) {\n        if (bVar25) {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar15 = iVar15 + local_2c[0] + 0x433;\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar15 = iVar15 + (0x36 - local_30);\n        }\n      }\n      else {\n        iVar19 = local_68 - 1;\n        if (local_5c < iVar19) {\n          local_58 = local_58 + (iVar19 - local_5c);\n          iVar14 = 0;\n          local_5c = iVar19;\n        }\n        else {\n          iVar14 = local_5c - iVar19;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar15 = iVar15 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      iVar19 = FUN_08009244(precision,1);\n    }\n    else {\n      local_60 = local_70;\n      iVar19 = 0;\n    }\n    if ((0 < local_60) && (0 < iVar15)) {\n      iVar7 = local_60;\n      if (iVar15 <= local_60) {\n        iVar7 = iVar15;\n      }\n      iVar15 = iVar15 - iVar7;\n      local_70 = local_70 - iVar7;\n      local_60 = local_60 - iVar7;\n    }\n    if (local_5c != 0) {\n      if (bVar3) {\n        uVar13 = uVar6;\n        if (iVar14 != 0) {\n          iVar19 = FUN_080093a4(precision,iVar19,iVar14);\n          uVar13 = FUN_08009258(precision,iVar19,uVar6);\n          FUN_0800910c(precision,uVar6);\n          uVar6 = uVar13;\n          if (local_5c - iVar14 == 0) goto LAB_08008062;\n        }\n        uVar6 = FUN_080093a4(precision,uVar13,local_5c - iVar14);\n      }\n      else {\n        uVar6 = FUN_080093a4(precision,uVar6,local_5c);\n      }\n    }\nLAB_08008062:\n    iVar14 = FUN_08009244(precision,1);\n    if (local_58 == 0) {\n      if (((int)minWidth < 2) && (sign == 0)) {\nLAB_0800835a:\n        if ((uVar17 & 0xfffff) == 0) {\n          uVar17 = uVar17 & 0x7ff00000;\n          if (uVar17 != 0) {\n            iVar15 = iVar15 + 1;\n            local_70 = local_70 + 1;\n            uVar17 = 1;\n          }\n        }\n        else {\n          uVar17 = 0;\n        }\n        bVar25 = local_58 != 0;\n        uVar18 = sign;\n        local_58 = uVar17;\n        if (bVar25) goto LAB_080082d4;\n      }\n      iVar7 = 1;\n    }\n    else {\n      uVar26 = FUN_080093a4(precision,iVar14);\n      iVar14 = (int)uVar26;\n      if (((int)minWidth < 2) && (sign == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar18 = (uint)((ulonglong)uVar26 >> 0x20);\nLAB_080082d4:\n      iVar7 = FUN_080091a4(*(undefined4 *)(iVar14 + *(int *)(iVar14 + 0x10) * 4 + 0x10),uVar18);\n      iVar7 = 0x20 - iVar7;\n    }\n    uVar18 = iVar7 + iVar15 & 0x1f;\n    if (uVar18 == 0) {\n      iVar7 = 0x1c;\nLAB_08008096:\n      iVar15 = iVar15 + iVar7;\n      local_70 = local_70 + iVar7;\n      local_60 = local_60 + iVar7;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar18)) {\n        iVar7 = 0x1c - uVar18;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar18 != 4) {\n        iVar7 = 0x3c - uVar18;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar6 = FUN_08009444(precision,uVar6,local_70);\n    }\n    if (0 < iVar15) {\n      iVar14 = FUN_08009444(precision,iVar14,iVar15);\n    }\n    pcVar20 = pcVar10;\n    if ((bVar2) && (iVar15 = FUN_080094f8(uVar6,iVar14), iVar15 < 0)) {\n      local_74 = local_74 - 1;\n      uVar6 = FUN_08009120(precision,uVar6,10,0);\n      if (bVar3) {\n        iVar19 = FUN_08009120(precision,iVar19,10,0);\n        if ((0 < (int)local_38) || ((int)minWidth < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)local_38) || ((int)minWidth < 3)) {\n        local_68 = local_38;\n        goto LAB_0800820a;\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        iVar15 = FUN_08009120(precision,iVar14,5);\n        iVar9 = FUN_080094f8(uVar6,iVar15);\n        iVar7 = iVar19;\n        iVar14 = iVar15;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)minWidth)) goto LAB_080084e8;\n    if (bVar3) {\nLAB_080080de:\n      local_80 = iVar19;\n      if (0 < local_60) {\n        local_80 = FUN_08009444(precision,iVar19,local_60);\n      }\n      iVar19 = local_80;\n      if (local_58 != 0) {\n        iVar19 = FUN_080090c0(precision,*(undefined4 *)(local_80 + 4));\n        FUN_08001084(iVar19 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        iVar19 = FUN_08009444(precision,iVar19,1);\n      }\nLAB_08008108:\n      iVar15 = FUN_080078c0(uVar6,iVar14);\n      iVar7 = FUN_080094f8(uVar6,local_80);\n      iVar9 = FUN_08009530(precision,iVar14,iVar19);\n      iVar24 = iVar15 + 0x30;\n      if (*(int *)(iVar9 + 0xc) == 0) {\n        iVar8 = FUN_080094f8(uVar6);\n        FUN_0800910c(precision,iVar9);\n        if ((iVar8 != 0) || (minWidth != 0)) goto LAB_0800815a;\n        if ((sign & 1) != 0) {\n          iVar8 = 0;\n          goto LAB_0800815a;\n        }\n        if (iVar24 != 0x39) {\n          if (0 < iVar7) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        cVar4 = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(precision,iVar9);\n      iVar8 = 1;\nLAB_0800815a:\n      if ((iVar7 < 0) || (((iVar7 == 0 && (minWidth == 0)) && ((sign & 1) == 0)))) {\n        if (0 < iVar8) {\n          uVar6 = FUN_08009444(precision,uVar6,1);\n          iVar7 = FUN_080094f8(uVar6,iVar14);\n          if ((0 < iVar7) || ((iVar7 == 0 && (iVar15 << 0x1f < 0)))) {\n            if (iVar24 == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            iVar24 = iVar15 + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)iVar24;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < iVar8) {\n        if (iVar24 == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)iVar15 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)iVar24;\n      if (pcVar10 + (local_68 - 1) != pcVar20) {\n        uVar6 = FUN_08009120(precision,uVar6,10,0);\n        pcVar20 = pcVar21;\n        if (local_80 == iVar19) {\n          local_80 = FUN_08009120(precision,local_80,10,0);\n          iVar19 = local_80;\n        }\n        else {\n          local_80 = FUN_08009120(precision,local_80,10,0);\n          iVar19 = FUN_08009120(precision,iVar19,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        iVar24 = FUN_080078c0(uVar6,iVar14);\n        iVar24 = iVar24 + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)iVar24;\n        if ((int)local_68 <= (int)pcVar21 - (int)pcVar10) break;\n        uVar6 = FUN_08009120(precision,uVar6,10,0);\n        pcVar20 = pcVar21;\n      }\n      local_80 = 0;\n    }\n    uVar6 = FUN_08009444(precision,uVar6,1);\n    iVar15 = FUN_080094f8(uVar6,iVar14);\n    cVar4 = pcVar21[-1];\n    if ((0 < iVar15) || ((iVar15 == 0 && (iVar24 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (cVar4 != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar4 = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (cVar4 == '0') {\n      cVar4 = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(precision,iVar14);\n    if (iVar19 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != iVar19)) {\n      FUN_0800910c(precision);\n    }\n  }\n  FUN_0800910c(precision,iVar19);\nLAB_08008294:\n  FUN_0800910c(precision,uVar6);\n  *pcVar21 = '\\0';\n  *length = local_74 + 1;\n  if (formatted == (char **)0x0) {\n    return pcVar10;\n  }\n  *formatted = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = cVar4 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "format_float_080079e8",
                "param_1": "precision",
                "param_2": "flags",
                "param_3": "sign",
                "param_4": "exponent",
                "param_5": "minWidth",
                "param_6": "maxWidth",
                "param_7": "length",
                "param_8": "overflow",
                "param_9": "formatted"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "decrease_memory_0800884c",
            "code": "\nundefined4 decreaseMemory_0800884c(undefined4 ptr,int size)\n\n{\n  int result;\n  int alignedAddr;\n  uint oldSize;\n  \n  FUN_080090a8();\n  oldSize = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  alignedAddr = ((0xfef - size) + oldSize & 0xfffff000) - 0x1000;\n  if (0xfff < alignedAddr) {\n    result = FUN_08009744(ptr,0);\n    if (result == DAT_20000454 + oldSize) {\n      result = FUN_08009744(ptr,-alignedAddr);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - alignedAddr;\n        *(uint *)(DAT_20000454 + 4) = oldSize - alignedAddr | 1;\n        FUN_080090b4(ptr);\n        return 1;\n      }\n      alignedAddr = FUN_08009744(ptr,0);\n      if (0xf < alignedAddr - DAT_20000454) {\n        DAT_20000a14 = alignedAddr - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = alignedAddr - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(ptr);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "decrease_memory_0800884c",
                "param_1": "ptr",
                "param_2": "size",
                "iVar1": "result",
                "iVar2": "alignedAddr",
                "uVar3": "oldSize"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "allocate_memory_block_080088ec",
            "code": "\nvoid allocateMemoryBlock_080088ec(undefined4 param1,int size,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *currentBlock;\n  uint *nextBlock;\n  undefined *prevBlock;\n  uint blockSize;\n  uint nextBlockSize;\n  undefined *blockPtrA;\n  undefined *blockPtrB;\n  undefined4 *blockPtrC;\n  int numBlocks;\n  uint flag;\n  uint value;\n  \n  if (size == 0) {\n    return;\n  }\n  FUN_080090a8();\n  flag = *(uint *)(size + -4);\n  currentBlock = (uint *)(size + -8);\n  blockSize = flag & 0xfffffffe;\n  nextBlock = (uint *)((int)currentBlock + blockSize);\n  nextBlockSize = nextBlock[1] & 0xfffffffc;\n  if (DAT_20000454 == nextBlock) {\n    blockSize = blockSize + nextBlockSize;\n    if ((flag & 1) == 0) {\n      currentBlock = (uint *)((int)currentBlock - *(int *)(size + -8));\n      nextBlockSize = currentBlock[2];\n      flag = currentBlock[3];\n      blockSize = blockSize + *(int *)(size + -8);\n      *(uint *)(nextBlockSize + 0xc) = flag;\n      *(uint *)(flag + 8) = nextBlockSize;\n    }\n    nextBlockSize = DAT_20000858;\n    currentBlock[1] = blockSize | 1;\n    DAT_20000454 = currentBlock;\n    if (nextBlockSize <= blockSize) {\n      FUN_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(param1);\n    return;\n  }\n  nextBlock[1] = nextBlockSize;\n  if ((flag & 1) == 0) {\n    currentBlock = (uint *)((int)currentBlock - *(int *)(size + -8));\n    blockPtrC = (undefined4 *)currentBlock[2];\n    blockSize = blockSize + *(int *)(size + -8);\n    flag = *(uint *)((int)nextBlock + nextBlockSize + 4) & 1;\n    if ((uint **)blockPtrC == &DAT_20000454) {\n      if (flag == 0) {\n        flag = nextBlock[2];\n        value = nextBlock[3];\n        blockSize = blockSize + nextBlockSize;\n        *(uint *)(flag + 0xc) = value;\n        *(uint *)(value + 8) = flag;\n        currentBlock[1] = blockSize | 1;\n        *(uint *)((int)currentBlock + blockSize) = blockSize;\n      }\n      else {\n        currentBlock[1] = blockSize | 1;\n        *nextBlock = blockSize;\n      }\n      goto LAB_080089f0;\n    }\n    value = currentBlock[3];\n    blockPtrC[3] = value;\n    *(undefined4 **)(value + 8) = blockPtrC;\n  }\n  else {\n    flag = *(uint *)((int)nextBlock + nextBlockSize + 4) & 1;\n  }\n  if (flag == 0) {\n    blockPtrC = (undefined4 *)nextBlock[2];\n    blockSize = blockSize + nextBlockSize;\n    if ((uint **)blockPtrC == &DAT_20000454) {\n      DAT_2000045c = currentBlock;\n      DAT_20000460 = currentBlock;\n      currentBlock[2] = (uint)&DAT_20000454;\n      currentBlock[3] = (uint)&DAT_20000454;\n      currentBlock[1] = blockSize | 1;\n      *(uint *)((int)currentBlock + blockSize) = blockSize;\n      goto LAB_080089f0;\n    }\n    nextBlockSize = nextBlock[3];\n    blockPtrC[3] = nextBlockSize;\n    *(undefined4 **)(nextBlockSize + 8) = blockPtrC;\n    currentBlock[1] = blockSize | 1;\n    *(uint *)((int)currentBlock + blockSize) = blockSize;\n  }\n  else {\n    currentBlock[1] = blockSize | 1;\n    *(uint *)((int)currentBlock + blockSize) = blockSize;\n  }\n  if (blockSize < 0x200) {\n    numBlocks = (blockSize >> 3) + 1;\n    blockSize = 1 << ((int)(blockSize >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    nextBlockSize = *(uint *)(&DAT_2000044c + numBlocks * 8);\n    currentBlock[2] = nextBlockSize;\n    currentBlock[3] = (uint)(&DAT_20000444 + numBlocks * 8);\n    DAT_20000450 = (undefined *)blockSize;\n    *(uint **)(&DAT_2000044c + numBlocks * 8) = currentBlock;\n    *(uint **)(nextBlockSize + 0xc) = currentBlock;\n    FUN_080090b4(param1,currentBlock,blockSize,param4);\n    return;\n  }\n  nextBlockSize = blockSize >> 9;\n  if (nextBlockSize < 5) {\n    numBlocks = ((blockSize >> 6) + 0x39) * 8;\n    index = (blockSize >> 6) + 0x38;\n  }\n  else if (nextBlockSize < 0x15) {\n    numBlocks = (nextBlockSize + 0x5c) * 8;\n    index = nextBlockSize + 0x5b;\n  }\n  else if (nextBlockSize < 0x55) {\n    numBlocks = ((blockSize >> 0xc) + 0x6f) * 8;\n    index = (blockSize >> 0xc) + 0x6e;\n  }\n  else if (nextBlockSize < 0x155) {\n    numBlocks = ((blockSize >> 0xf) + 0x78) * 8;\n    index = (blockSize >> 0xf) + 0x77;\n  }\n  else if (nextBlockSize < 0x555) {\n    numBlocks = ((blockSize >> 0x12) + 0x7d) * 8;\n    index = (blockSize >> 0x12) + 0x7c;\n  }\n  else {\n    numBlocks = 0x3f8;\n    index = 0x7e;\n  }\n  prevBlock = *(undefined **)(&DAT_2000044c + numBlocks);\n  blockPtrA = &DAT_20000444 + numBlocks;\n  if (blockPtrA == prevBlock) {\n    prevBlock = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    blockPtrB = blockPtrA;\n    DAT_20000450 = prevBlock;\n  }\n  else {\n    do {\n      blockPtrB = prevBlock;\n      if ((*(uint *)(prevBlock + 4) & 0xfffffffc) <= blockSize) break;\n      prevBlock = *(undefined **)(prevBlock + 8);\n      blockPtrB = blockPtrA;\n    } while (blockPtrA != prevBlock);\n    blockPtrA = *(undefined **)(blockPtrB + 0xc);\n  }\n  currentBlock[2] = (uint)blockPtrB;\n  currentBlock[3] = (uint)blockPtrA;\n  *(uint **)(blockPtrA + 8) = currentBlock;\n  *(uint **)(blockPtrB + 0xc) = currentBlock;\n  FUN_080090b4(param1,currentBlock,prevBlock,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "allocate_memory_block_080088ec",
                "param_1": "param1",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "puVar2": "currentBlock",
                "puVar3": "nextBlock",
                "puVar4": "prevBlock",
                "uVar5": "blockSize",
                "uVar6": "nextBlockSize",
                "puVar7": "blockPtrA",
                "puVar8": "blockPtrB",
                "puVar9": "blockPtrC",
                "iVar10": "numBlocks",
                "uVar11": "flag",
                "uVar12": "value"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_memory_address_08008ad4",
            "code": "\nint getMemoryAddress_08008ad4(void)\n\n{\n  int memoryValue;\n  \n  memoryValue = *(int *)(DAT_2000001c + 0x34);\n  if (memoryValue == 0) {\n    memoryValue = 0x2000085c;\n  }\n  return memoryValue + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_memory_address_08008ad4",
                "iVar1": "memoryValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_block_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_08008af8(undefined4 *ptr_size,uint size)\n\n{\n  undefined *ptr_temp1;\n  uint var_temp1;\n  uint var_temp2;\n  int var_temp3;\n  undefined *ptr_temp2;\n  uint var_temp4;\n  uint var_temp5;\n  undefined4 *ptr_temp3;\n  undefined *ptr_temp4;\n  undefined *ptr_temp5;\n  int *ptr_result;\n  uint var_size_plus_0xb;\n  uint var_aligned_size;\n  int var_temp6;\n  undefined4 *ptr_temp6;\n  undefined4 *ptr_temp7;\n  \n  var_size_plus_0xb = size + 0xb;\n  if (var_size_plus_0xb < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    var_aligned_size = 0x10;\n    var_temp3 = 0x18;\n    var_size_plus_0xb = 2;\nLAB_08008b18:\n    ptr_temp5 = *(undefined **)((int)&DAT_20000450 + var_temp3);\n    if ((ptr_temp5 != &DAT_20000444 + var_temp3) ||\n       (ptr_temp5 = *(undefined **)((int)&DAT_20000458 + var_temp3), &DAT_2000044c + var_temp3 != ptr_temp5)) {\n      var_temp3 = *(int *)(ptr_temp5 + 0xc);\n      ptr_temp2 = ptr_temp5 + (*(uint *)(ptr_temp5 + 4) & 0xfffffffc);\n      var_size_plus_0xb = *(uint *)(ptr_temp2 + 4);\nLAB_08008b34:\n      var_temp6 = *(int *)(ptr_temp5 + 8);\n      *(int *)(var_temp6 + 0xc) = var_temp3;\n      *(int *)(var_temp3 + 8) = var_temp6;\n      *(uint *)(ptr_temp2 + 4) = var_size_plus_0xb | 1;\n      FUN_080090b4(ptr_size);\n      return (int *)(ptr_temp5 + 8);\n    }\n    var_size_plus_0xb = var_size_plus_0xb + 2;\n  }\n  else {\n    var_aligned_size = var_size_plus_0xb & 0xfffffff8;\n    if (((int)var_aligned_size < 0) || (var_aligned_size < size)) {\nLAB_08008c7a:\n      *ptr_size = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (var_aligned_size < 0x1f8) {\n      var_size_plus_0xb = var_size_plus_0xb >> 3;\n      var_temp3 = var_aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    var_temp1 = var_size_plus_0xb >> 9;\n    if (var_temp1 == 0) {\n      var_temp3 = 0x200;\n      var_temp4 = 0x40;\n      var_temp1 = 0x3f;\n    }\n    else if (var_temp1 < 5) {\n      var_temp4 = (var_size_plus_0xb >> 6) + 0x39;\n      var_temp1 = (var_size_plus_0xb >> 6) + 0x38;\n      var_temp3 = var_temp4 * 8;\n    }\n    else if (var_temp1 < 0x15) {\n      var_temp4 = var_temp1 + 0x5c;\n      var_temp1 = var_temp1 + 0x5b;\n      var_temp3 = var_temp4 * 8;\n    }\n    else if (var_temp1 < 0x55) {\n      var_temp4 = (var_size_plus_0xb >> 0xc) + 0x6f;\n      var_temp1 = (var_size_plus_0xb >> 0xc) + 0x6e;\n      var_temp3 = var_temp4 * 8;\n    }\n    else if (var_temp1 < 0x155) {\n      var_temp4 = (var_size_plus_0xb >> 0xf) + 0x78;\n      var_temp1 = (var_size_plus_0xb >> 0xf) + 0x77;\n      var_temp3 = var_temp4 * 8;\n    }\n    else if (var_temp1 < 0x555) {\n      var_temp4 = (var_size_plus_0xb >> 0x12) + 0x7d;\n      var_temp1 = (var_size_plus_0xb >> 0x12) + 0x7c;\n      var_temp3 = var_temp4 * 8;\n    }\n    else {\n      var_temp3 = 0x3f8;\n      var_temp4 = 0x7f;\n      var_temp1 = 0x7e;\n    }\n    for (ptr_temp5 = *(undefined **)((int)&DAT_20000450 + var_temp3); var_size_plus_0xb = var_temp4,\n        &DAT_20000444 + var_temp3 != ptr_temp5; ptr_temp5 = *(undefined **)(ptr_temp5 + 0xc)) {\n      var_temp6 = (*(uint *)(ptr_temp5 + 4) & 0xfffffffc) - var_aligned_size;\n      var_size_plus_0xb = var_temp1;\n      if (0xf < var_temp6) break;\n      if (-1 < var_temp6) {\n        ptr_temp2 = ptr_temp5 + (*(uint *)(ptr_temp5 + 4) & 0xfffffffc);\n        var_size_plus_0xb = *(uint *)(ptr_temp2 + 4);\n        var_temp3 = *(int *)(ptr_temp5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr_temp6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    var_temp4 = 1 << ((int)var_size_plus_0xb >> 2 & 0xffU);\n    var_temp1 = DAT_20000450;\n    if (var_temp4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var_temp4 = DAT_2000045c[1];\n    var_temp5 = var_temp4 & 0xfffffffc;\n    var_temp1 = var_temp5 - var_aligned_size;\n    if (0xf < (int)var_temp1) {\n      ptr_temp7 = (undefined4 *)(var_aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = var_aligned_size | 1;\n      DAT_2000045c = ptr_temp7;\n      DAT_20000460 = ptr_temp7;\n      ptr_temp7[2] = &DAT_20000454;\n      ptr_temp7[3] = &DAT_20000454;\n      ptr_temp7[1] = var_temp1 | 1;\n      *(uint *)((int)ptr_temp6 + var_temp5) = var_temp1;\n      FUN_080090b4(ptr_size);\n      return ptr_temp6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)var_temp1) {\n      *(uint *)((int)ptr_temp6 + var_temp5 + 4) = *(uint *)((int)ptr_temp6 + var_temp5 + 4) | 1;\n      FUN_080090b4(ptr_size);\n      return ptr_temp6 + 2;\n    }\n    if (var_temp5 < 0x200) {\n      var_temp3 = (var_temp4 >> 3) + 1;\n      var_temp6 = *(int *)(&DAT_2000044c + var_temp3 * 8);\n      var_temp1 = 1 << ((int)(var_temp4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr_temp6[2] = var_temp6;\n      ptr_temp6[3] = &DAT_20000444 + var_temp3 * 8;\n      DAT_20000450 = var_temp1;\n      *(undefined4 **)(&DAT_2000044c + var_temp3 * 8) = ptr_temp6;\n      *(undefined4 **)(var_temp6 + 0xc) = ptr_temp6;\n    }\n    else {\n      var_temp1 = var_temp4 >> 9;\n      if (var_temp1 < 5) {\n        var_temp3 = ((var_temp4 >> 6) + 0x39) * 8;\n        var_temp6 = (var_temp4 >> 6) + 0x38;\n      }\n      else if (var_temp1 < 0x15) {\n        var_temp3 = (var_temp1 + 0x5c) * 8;\n        var_temp6 = var_temp1 + 0x5b;\n      }\n      else if (var_temp1 < 0x55) {\n        var_temp3 = ((var_temp4 >> 0xc) + 0x6f) * 8;\n        var_temp6 = (var_temp4 >> 0xc) + 0x6e;\n      }\n      else if (var_temp1 < 0x155) {\n        var_temp3 = ((var_temp4 >> 0xf) + 0x78) * 8;\n        var_temp6 = (var_temp4 >> 0xf) + 0x77;\n      }\n      else if (var_temp1 < 0x555) {\n        var_temp3 = ((var_temp4 >> 0x12) + 0x7d) * 8;\n        var_temp6 = (var_temp4 >> 0x12) + 0x7c;\n      }\n      else {\n        var_temp3 = 0x3f8;\n        var_temp6 = 0x7e;\n      }\n      ptr_temp5 = *(undefined **)(&DAT_2000044c + var_temp3);\n      ptr_temp2 = &DAT_20000444 + var_temp3;\n      if (ptr_temp2 == ptr_temp5) {\n        DAT_20000450 = 1 << (var_temp6 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr_temp5 + 4) & 0xfffffffc) <= var_temp5) break;\n          ptr_temp5 = *(undefined **)(ptr_temp5 + 8);\n        } while (ptr_temp2 != ptr_temp5);\n        ptr_temp2 = *(undefined **)(ptr_temp5 + 0xc);\n      }\n      var_temp1 = DAT_20000450;\n      ptr_temp6[2] = ptr_temp5;\n      ptr_temp6[3] = ptr_temp2;\n      *(undefined4 **)(ptr_temp2 + 8) = ptr_temp6;\n      *(undefined4 **)(ptr_temp5 + 0xc) = ptr_temp6;\n    }\n    var_temp4 = 1 << ((int)var_size_plus_0xb >> 2 & 0xffU);\n    if (var_temp4 <= var_temp1) {\nLAB_08008c06:\n      if ((var_temp4 & var_temp1) == 0) {\n        var_size_plus_0xb = var_size_plus_0xb & 0xfffffffc;\n        do {\n          var_temp4 = var_temp4 << 1;\n          var_size_plus_0xb = var_size_plus_0xb + 4;\n        } while ((var_temp4 & var_temp1) == 0);\n      }\n      do {\n        ptr_temp7 = (undefined4 *)(&DAT_2000044c + var_size_plus_0xb * 8);\n        var_temp1 = var_size_plus_0xb;\n        ptr_temp6 = ptr_temp7;\n        do {\n          for (ptr_temp3 = (undefined4 *)ptr_temp6[3]; ptr_temp6 != ptr_temp3;\n              ptr_temp3 = (undefined4 *)ptr_temp3[3]) {\n            var_temp5 = ptr_temp3[1] & 0xfffffffc;\n            var_temp2 = var_temp5 - var_aligned_size;\n            if (0xf < (int)var_temp2) {\n              var_temp6 = ptr_temp3[2];\n              var_temp3 = ptr_temp3[3];\n              ptr_temp6 = (undefined4 *)(var_aligned_size + (int)ptr_temp3);\n              ptr_temp3[1] = var_aligned_size | 1;\n              *(int *)(var_temp6 + 0xc) = var_temp3;\n              *(int *)(var_temp3 + 8) = var_temp6;\n              DAT_2000045c = ptr_temp6;\n              DAT_20000460 = ptr_temp6;\n              ptr_temp6[2] = &DAT_20000454;\n              ptr_temp6[3] = &DAT_20000454;\n              ptr_temp6[1] = var_temp2 | 1;\n              *(uint *)((int)ptr_temp3 + var_temp5) = var_temp2;\n              FUN_080090b4(ptr_size);\n              return ptr_temp3 + 2;\n            }\n            if (-1 < (int)var_temp2) {\n              var_temp3 = ptr_temp3[3];\n              var_temp6 = ptr_temp3[2];\n              *(uint *)((int)ptr_temp3 + var_temp5 + 4) = *(uint *)((int)ptr_temp3 + var_temp5 + 4) | 1;\n              *(int *)(var_temp6 + 0xc) = var_temp3;\n              *(int *)(var_temp3 + 8) = var_temp6;\n              FUN_080090b4(ptr_size);\n              return ptr_temp3 + 2;\n            }\n          }\n          var_temp1 = var_temp1 + 1;\n          ptr_temp6 = ptr_temp6 + 2;\n        } while ((var_temp1 & 3) != 0);\n        do {\n          var_temp5 = var_size_plus_0xb & 3;\n          ptr_temp6 = ptr_temp7 + -2;\n          var_size_plus_0xb = var_size_plus_0xb - 1;\n          if (var_temp5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var_temp4;\n            break;\n          }\n          ptr_temp7 = (undefined4 *)*ptr_temp7;\n        } while (ptr_temp7 == ptr_temp6);\n        var_temp4 = var_temp4 * 2;\n        if ((DAT_20000450 <= var_temp4 && var_temp4 - DAT_20000450 != 0) || (var_size_plus_0xb = var_temp1, var_temp4 == 0))\n        break;\n        for (; (var_temp4 & DAT_20000450) == 0; var_temp4 = var_temp4 << 1) {\n          var_size_plus_0xb = var_size_plus_0xb + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr_temp5 = DAT_20000454;\n  var_size_plus_0xb = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((var_aligned_size <= var_size_plus_0xb) && (var_temp1 = var_size_plus_0xb - var_aligned_size, 0xf < (int)var_temp1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    var_temp1 = var_aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    var_temp1 = var_aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr_temp2 = (undefined *)FUN_08009744(ptr_size,var_temp1);\n  if (ptr_temp2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    var_size_plus_0xb = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr_temp1 = ptr_temp5 + var_size_plus_0xb;\n    if (ptr_temp1 < ptr_temp2 || ptr_temp1 == ptr_temp2) {\n      ptr_temp4 = DAT_20000a14 + var_temp1;\n      if ((ptr_temp1 != ptr_temp2) || (((uint)ptr_temp1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr_temp4;\n      *(uint *)(DAT_20000454 + 4) = var_size_plus_0xb + var_temp1 | 1;\n    }\n    else {\n      if (ptr_temp5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + var_temp1;\n      ptr_temp4 = ptr_temp2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr_temp2 - (int)ptr_temp1);\n        ptr_temp4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr_temp4;\n      var_temp4 = (uint)ptr_temp2 & 7;\n      if (var_temp4 == 0) {\n        var_temp3 = 0x1000;\n      }\n      else {\n        ptr_temp2 = ptr_temp2 + (8 - var_temp4);\n        var_temp3 = 0x1008 - var_temp4;\n      }\n      var_temp3 = var_temp3 - ((uint)(ptr_temp2 + var_temp1) & 0xfff);\n      var_temp6 = FUN_08009744(ptr_size,var_temp3);\n      if (var_temp6 == -1) {\n        var_temp1 = 1;\n        var_temp3 = 0;\n      }\n      else {\n        var_temp1 = (var_temp6 - (int)ptr_temp2) + var_temp3 | 1;\n      }\n      ptr_temp4 = DAT_20000a14 + var_temp3;\n      DAT_20000454 = ptr_temp2;\n      DAT_20000a14 = ptr_temp4;\n      *(uint *)(ptr_temp2 + 4) = var_temp1;\n      if (ptr_temp5 != &DAT_2000044c) {\n        if (var_size_plus_0xb < 0x10) {\n          *(undefined4 *)(ptr_temp2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        var_size_plus_0xb = var_size_plus_0xb - 0xc & 0xfffffff8;\n        *(uint *)(ptr_temp5 + 4) = *(uint *)(ptr_temp5 + 4) & 1 | var_size_plus_0xb;\n        *(undefined4 *)(ptr_temp5 + var_size_plus_0xb + 4) = 5;\n        *(undefined4 *)(ptr_temp5 + var_size_plus_0xb + 8) = 5;\n        if (0xf < var_size_plus_0xb) {\n          FUN_080088ec(ptr_size,ptr_temp5 + 8);\n          ptr_temp4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr_temp4) {\n      DAT_20000a3c = ptr_temp4;\n    }\n    var_size_plus_0xb = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr_temp4) {\n      DAT_20000a40 = ptr_temp4;\n    }\n  }\n  var_temp1 = (var_size_plus_0xb & 0xfffffffc) - var_aligned_size;\n  if ((var_aligned_size <= (var_size_plus_0xb & 0xfffffffc)) && (0xf < (int)var_temp1)) {\nLAB_08008dac:\n    ptr_temp5 = DAT_20000454 + var_aligned_size;\n    *(uint *)(DAT_20000454 + 4) = var_aligned_size | 1;\n    ptr_result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr_temp5;\n    *(uint *)(ptr_temp5 + 4) = var_temp1 | 1;\n    FUN_080090b4(ptr_size);\n    return ptr_result;\n  }\nLAB_08008eee:\n  FUN_080090b4(ptr_size);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_block_08008af8",
                "param_1": "ptr_size",
                "param_2": "size",
                "puVar1": "ptr_temp1",
                "uVar2": "var_temp1",
                "uVar3": "var_temp2",
                "iVar4": "var_temp3",
                "puVar5": "ptr_temp2",
                "uVar6": "var_temp4",
                "uVar7": "var_temp5",
                "puVar8": "ptr_temp3",
                "puVar9": "ptr_temp4",
                "puVar10": "ptr_temp5",
                "piVar11": "ptr_result",
                "uVar12": "var_size_plus_0xb",
                "uVar13": "var_aligned_size",
                "iVar14": "var_temp6",
                "puVar15": "ptr_temp6",
                "puVar16": "ptr_temp7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_first_byte_occurrence_0800901c",
            "code": "\nuint * find_first_byte_occurrence_0800901c(uint *byte_array,uint byte_value,uint array_length)\n\n{\n  uint xor_value;\n  uint combined_value;\n  uint *current_byte;\n  uint filtered_value;\n  bool is_last_iteration;\n  \n  filtered_value = byte_value & 0xff;\n  if (((uint)byte_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      combined_value = (byte_value & 0xff) << 8 | filtered_value;\n      current_byte = byte_array;\n      do {\n        xor_value = *current_byte ^ (combined_value | combined_value << 0x10);\n        byte_array = current_byte + 1;\n        if ((xor_value + 0xfefefeff & ~xor_value & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        current_byte = byte_array;\n      } while (3 < array_length);\n    }\n    current_byte = byte_array;\n    if (array_length == 0) {\n      byte_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      byte_array = current_byte;\n      if (*(byte *)byte_array != filtered_value) {\n        current_byte = (uint *)(array_length + (int)byte_array);\n        do {\n          byte_array = (uint *)((int)byte_array + 1);\n          if (current_byte == byte_array) goto LAB_0800906c;\n        } while (*(byte *)byte_array != filtered_value);\n      }\n    }\n  }\n  else {\n    combined_value = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      byte_array = (uint *)0x0;\n    }\n    else if (*(byte *)byte_array != filtered_value) {\n      current_byte = (uint *)((int)byte_array + 1);\n      do {\n        byte_array = current_byte;\n        array_length = combined_value;\n        if (((uint)byte_array & 3) == 0) goto LAB_0800904a;\n        is_last_iteration = combined_value == 0;\n        combined_value = combined_value - 1;\n        if (is_last_iteration) goto LAB_0800906c;\n        current_byte = (uint *)((int)byte_array + 1);\n      } while (*(byte *)byte_array != filtered_value);\n    }\n  }\n  return byte_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_first_byte_occurrence_0800901c",
                "param_1": "byte_array",
                "param_2": "byte_value",
                "param_3": "array_length",
                "uVar1": "xor_value",
                "uVar2": "combined_value",
                "puVar3": "current_byte",
                "uVar4": "filtered_value",
                "bVar5": "is_last_iteration"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initialize_data_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "get_or_create_value_080090c0",
            "code": "\nundefined4 * getOrCreateValue_080090c0(int inputParam,uint index)\n\n{\n  undefined4 *valuePtr;\n  int tempVar;\n  \n  tempVar = *(int *)(inputParam + 0x4c);\n  if (tempVar == 0) {\n    tempVar = FUN_08009980(inputParam,4,0x21);\n    *(int *)(inputParam + 0x4c) = tempVar;\n    if (tempVar == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  valuePtr = *(undefined4 **)(tempVar + index * 4);\n  if (valuePtr == (undefined4 *)0x0) {\n    tempVar = 1 << (index & 0xff);\n    valuePtr = (undefined4 *)FUN_08009980(inputParam,1,(tempVar + 5) * 4);\n    if (valuePtr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    valuePtr[1] = index;\n    valuePtr[2] = tempVar;\n  }\n  else {\n    *(undefined4 *)(tempVar + index * 4) = *valuePtr;\n  }\n  valuePtr[3] = 0;\n  valuePtr[4] = 0;\n  return valuePtr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "get_or_create_value_080090c0",
                "param_1": "inputParam",
                "param_2": "index",
                "puVar1": "valuePtr",
                "iVar2": "tempVar"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "copy_value_and_reference_0800910c",
            "code": "\nvoid copyValueAndReference_0800910c(int sourceAddress,undefined4 *targetAddress)\n\n{\n  int dataPointer;\n  \n  if (targetAddress != (undefined4 *)0x0) {\n    dataPointer = *(int *)(sourceAddress + 0x4c);\n    *targetAddress = *(undefined4 *)(dataPointer + targetAddress[1] * 4);\n    *(undefined4 **)(dataPointer + targetAddress[1] * 4) = targetAddress;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "copy_value_and_reference_0800910c",
                "param_1": "sourceAddress",
                "param_2": "targetAddress",
                "iVar1": "dataPointer"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_checksum_08009120",
            "code": "\nundefined4 * calculateChecksum_08009120(int input_param,undefined4 *ptr_array,int multiplier,uint checksum)\n\n{\n  undefined4 *result_ptr;\n  uint temp_var;\n  int array_size;\n  uint *array_ptr;\n  int counter;\n  \n  counter = 0;\n  array_size = ptr_array[4];\n  array_ptr = ptr_array + 5;\n  do {\n    counter = counter + 1;\n    checksum = multiplier * (*array_ptr & 0xffff) + checksum;\n    temp_var = multiplier * (*array_ptr >> 0x10) + (checksum >> 0x10);\n    *array_ptr = (checksum & 0xffff) + temp_var * 0x10000;\n    checksum = temp_var >> 0x10;\n    array_ptr = array_ptr + 1;\n  } while (counter < array_size);\n  result_ptr = ptr_array;\n  if (checksum != 0) {\n    if ((int)ptr_array[2] <= array_size) {\n      result_ptr = (undefined4 *)FUN_080090c0(input_param,ptr_array[1] + 1);\n      FUN_08001084(result_ptr + 3,ptr_array + 3,(ptr_array[4] + 2) * 4);\n      counter = *(int *)(input_param + 0x4c);\n      *ptr_array = *(undefined4 *)(counter + ptr_array[1] * 4);\n      *(undefined4 **)(counter + ptr_array[1] * 4) = ptr_array;\n    }\n    result_ptr[array_size + 5] = checksum;\n    result_ptr[4] = array_size + 1;\n  }\n  return result_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "param_1": "input_param",
                "param_2": "ptr_array",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "result_ptr",
                "uVar2": "temp_var",
                "iVar3": "array_size",
                "puVar4": "array_ptr",
                "iVar5": "counter"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZeros = 0x10;\n  }\n  else {\n    leadingZeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZeros = leadingZeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZeros = leadingZeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZeros = leadingZeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZeros + 1;\n    }\n    leadingZeros = 0x20;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZeros"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint countLeadingZeros_080091e4(uint *numPtr)\n\n{\n  int leadingZeros;\n  uint num;\n  \n  num = *numPtr;\n  if ((num & 7) == 0) {\n    if ((num & 0xffff) == 0) {\n      num = num >> 0x10;\n      leadingZeros = 0x10;\n    }\n    else {\n      leadingZeros = 0;\n    }\n    if ((num & 0xff) == 0) {\n      num = num >> 8;\n      leadingZeros = leadingZeros + 8;\n    }\n    if ((num & 0xf) == 0) {\n      num = num >> 4;\n      leadingZeros = leadingZeros + 4;\n    }\n    if ((num & 3) == 0) {\n      num = num >> 2;\n      leadingZeros = leadingZeros + 2;\n    }\n    if (-1 < (int)(num << 0x1f)) {\n      num = num >> 1;\n      if (num == 0) {\n        return 0x20;\n      }\n      leadingZeros = leadingZeros + 1;\n    }\n    *numPtr = num;\n    return leadingZeros;\n  }\n  if ((int)(num << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(num << 0x1e)) {\n    *numPtr = num >> 2;\n    return 2;\n  }\n  *numPtr = num >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "numPtr",
                "iVar1": "leadingZeros",
                "uVar2": "num"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_data_08009244",
            "code": "\nvoid initializeData_08009244(undefined4 data,undefined4 value)\n\n{\n  int dataPointer;\n  \n  dataPointer = FUN_080090c0(data,1);\n  *(undefined4 *)(dataPointer + 0x10) = 1;\n  *(undefined4 *)(dataPointer + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "dataPointer"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "calculate_checksum_08009258",
            "code": "\nvoid calculateChecksum_08009258(undefined4 param1,int data1,int data2)\n\n{\n  uint *pointer1;\n  uint *pointer2;\n  int length;\n  uint temp1;\n  uint *dataPointer;\n  uint dataOffset;\n  uint *tempPointer;\n  uint temp2;\n  int data1Length;\n  int data2Length;\n  uint temp3;\n  int tempLength1;\n  int tempLength2;\n  uint *tempPointer1;\n  uint *tempPointer2;\n  uint *tempPointer3;\n  uint *checksumPointer1;\n  uint *checksumPointer2;\n  \n  tempLength1 = *(int *)(data1 + 0x10);\n  data1Length = *(int *)(data2 + 0x10);\n  data2Length = data1Length;\n  tempLength2 = data1;\n  if (tempLength1 < data1Length) {\n    data2Length = tempLength1;\n    tempLength1 = data1Length;\n    tempLength2 = data2;\n    data2 = data1;\n  }\n  data1Length = tempLength1 + data2Length;\n  length = *(int *)(tempLength2 + 4);\n  if (*(int *)(tempLength2 + 8) < data1Length) {\n    length = length + 1;\n  }\n  length = FUN_080090c0(param1,length);\n  checksumPointer2 = (uint *)(length + 0x14);\n  checksumPointer1 = checksumPointer2 + data1Length;\n  for (dataPointer = checksumPointer2; dataPointer < checksumPointer1; dataPointer = dataPointer + 1) {\n    *dataPointer = 0;\n  }\n  dataOffset = data2 + 0x14;\n  temp3 = dataOffset + data2Length * 4;\n  dataPointer = (uint *)(tempLength2 + 0x14);\n  if (dataOffset < temp3) {\n    tempPointer = (uint *)(dataOffset + ((temp3 - data2) - 0x15 & 0xfffffffc));\n    tempPointer3 = (uint *)(data2 + 0x10);\n    do {\n      while( true ) {\n        tempPointer3 = tempPointer3 + 1;\n        dataOffset = *tempPointer3 & 0xffff;\n        if (dataOffset != 0) break;\n        dataOffset = *tempPointer3 >> 0x10;\n        if (dataOffset == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *checksumPointer2;\n        temp1 = 0;\n        pointer1 = dataPointer;\n        tempPointer1 = checksumPointer2;\n        temp3 = temp2;\n        do {\n          tempPointer2 = tempPointer1;\n          temp1 = temp1 + dataOffset * *(ushort *)pointer1 + (temp3 >> 0x10);\n          *tempPointer2 = temp2 & 0xffff | temp1 * 0x10000;\n          pointer2 = pointer1 + 1;\n          temp3 = tempPointer2[1];\n          temp2 = dataOffset * (*pointer1 >> 0x10) + (temp3 & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp2 >> 0x10;\n          pointer1 = pointer2;\n          tempPointer1 = tempPointer2 + 1;\n        } while (pointer2 < dataPointer + tempLength1);\n        tempPointer2[1] = temp2;\n        checksumPointer2 = checksumPointer2 + 1;\n        if (tempPointer == tempPointer3) goto LAB_0800937a;\n      }\n      temp3 = 0;\n      pointer1 = checksumPointer2;\n      tempPointer1 = dataPointer;\n      do {\n        pointer2 = pointer1;\n        tempPointer2 = tempPointer1 + 1;\n        temp2 = dataOffset * (*tempPointer1 & 0xffff) + (*pointer2 & 0xffff) + temp3;\n        temp1 = dataOffset * (*tempPointer1 >> 0x10) + (*pointer2 >> 0x10) + (temp2 >> 0x10);\n        temp3 = temp1 >> 0x10;\n        *pointer2 = temp2 & 0xffff | temp1 * 0x10000;\n        pointer1 = pointer2 + 1;\n        tempPointer1 = tempPointer2;\n      } while (tempPointer2 < dataPointer + tempLength1);\n      pointer2[1] = temp3;\n      dataOffset = *tempPointer3 >> 0x10;\n      if (dataOffset != 0) goto LAB_0800932c;\nLAB_080092d2:\n      checksumPointer2 = checksumPointer2 + 1;\n    } while (tempPointer != tempPointer3);\n  }\nLAB_0800937a:\n  if (0 < data1Length) {\n    dataOffset = checksumPointer1[-1];\n    checksumPointer1 = checksumPointer1 + -1;\n    while ((dataOffset == 0 && (data1Length = data1Length + -1, data1Length != 0))) {\n      checksumPointer1 = checksumPointer1 + -1;\n      dataOffset = *checksumPointer1;\n    }\n  }\n  *(int *)(length + 0x10) = data1Length;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "calculate_checksum_08009258",
                "param_1": "param1",
                "param_2": "data1",
                "param_3": "data2",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "iVar3": "length",
                "uVar4": "temp1",
                "puVar5": "dataPointer",
                "uVar6": "dataOffset",
                "puVar7": "tempPointer",
                "uVar8": "temp2",
                "iVar9": "data1Length",
                "iVar10": "data2Length",
                "uVar11": "temp3",
                "iVar12": "tempLength1",
                "iVar13": "tempLength2",
                "puVar14": "tempPointer1",
                "puVar15": "tempPointer2",
                "puVar16": "tempPointer3",
                "puVar17": "checksumPointer1",
                "puVar18": "checksumPointer2"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "extract_bit_fields_080093a4",
            "code": "\nundefined4 * extractBitFields_080093a4(int dataBuffer,undefined4 *resultBuffer,uint bufferSize)\n\n{\n  int tempVar1;\n  int numWords;\n  undefined4 *currentWord;\n  undefined4 *bufferHead;\n  \n  if ((bufferSize & 3) != 0) {\n    resultBuffer = (undefined4 *)\n              FUN_08009120(dataBuffer,resultBuffer,*(undefined4 *)(&DAT_0800a070 + ((bufferSize & 3) - 1) * 4),\n                           0);\n  }\n  numWords = (int)bufferSize >> 2;\n  if (numWords != 0) {\n    bufferHead = *(undefined4 **)(dataBuffer + 0x48);\n    if (bufferHead == (undefined4 *)0x0) {\n      bufferHead = (undefined4 *)FUN_080090c0(dataBuffer,1);\n      bufferHead[4] = 1;\n      bufferHead[5] = 0x271;\n      *(undefined4 **)(dataBuffer + 0x48) = bufferHead;\n      *bufferHead = 0;\n    }\n    currentWord = resultBuffer;\n    if (numWords << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    numWords = numWords >> 1;\n    currentWord = bufferHead;\n    if (numWords != 0) {\n      while( true ) {\n        bufferHead = (undefined4 *)*currentWord;\n        if (bufferHead == (undefined4 *)0x0) {\n          bufferHead = (undefined4 *)FUN_08009258(dataBuffer,currentWord,currentWord);\n          *currentWord = bufferHead;\n          *bufferHead = 0;\n        }\n        currentWord = resultBuffer;\n        if (-1 < numWords << 0x1f) break;\nLAB_080093d2:\n        resultBuffer = (undefined4 *)FUN_08009258(dataBuffer,currentWord,bufferHead);\n        if (currentWord == (undefined4 *)0x0) break;\n        tempVar1 = *(int *)(dataBuffer + 0x4c);\n        numWords = numWords >> 1;\n        *currentWord = *(undefined4 *)(tempVar1 + currentWord[1] * 4);\n        *(undefined4 **)(tempVar1 + currentWord[1] * 4) = currentWord;\n        currentWord = bufferHead;\n        if (numWords == 0) {\n          return resultBuffer;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return resultBuffer;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "extract_bit_fields_080093a4",
                "param_1": "dataBuffer",
                "param_2": "resultBuffer",
                "param_3": "bufferSize",
                "iVar1": "tempVar1",
                "iVar2": "numWords",
                "puVar3": "currentWord",
                "puVar4": "bufferHead"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "reverse_bits_08009444",
            "code": "\nvoid reverseBits_08009444(int address,undefined4 *params,uint bitCount)\n\n{\n  int increment;\n  int multiplier;\n  int counter;\n  undefined4 value;\n  int offset;\n  int doubleMultiplier;\n  uint *currentPtr;\n  uint *loopEndPtr;\n  uint *nextPtr;\n  uint *startPtr;\n  int offsetDividedBy32;\n  int length;\n  uint remainder;\n  uint *tempPtr;\n  \n  offset = params[4];\n  offsetDividedBy32 = (int)bitCount >> 5;\n  length = offsetDividedBy32 + offset + 1;\n  counter = params[1];\n  multiplier = params[2];\n  if ((int)params[2] < length) {\n    do {\n      doubleMultiplier = multiplier * 2;\n      increment = multiplier * -2;\n      counter = counter + 1;\n      multiplier = doubleMultiplier;\n    } while (length != doubleMultiplier && length + increment < 0 == SBORROW4(length,doubleMultiplier));\n  }\n  multiplier = FUN_080090c0(address,counter);\n  currentPtr = (uint *)(multiplier + 0x14);\n  if (0 < offsetDividedBy32) {\n    startPtr = currentPtr + offsetDividedBy32;\n    loopEndPtr = currentPtr;\n    do {\n      tempPtr = loopEndPtr + 1;\n      *loopEndPtr = 0;\n      currentPtr = startPtr;\n      loopEndPtr = tempPtr;\n    } while (tempPtr != startPtr);\n  }\n  counter = params[4];\n  loopEndPtr = params + 5;\n  bitCount = bitCount & 0x1f;\n  if (bitCount == 0) {\n    currentPtr = currentPtr + -1;\n    startPtr = loopEndPtr;\n    do {\n      tempPtr = startPtr + 1;\n      currentPtr = currentPtr + 1;\n      *currentPtr = *startPtr;\n      startPtr = tempPtr;\n    } while (tempPtr < loopEndPtr + counter);\n  }\n  else {\n    remainder = 0;\n    startPtr = loopEndPtr;\n    do {\n      tempPtr = currentPtr;\n      *tempPtr = *startPtr << bitCount | remainder;\n      nextPtr = startPtr + 1;\n      remainder = *startPtr >> (0x20 - bitCount & 0xff);\n      currentPtr = tempPtr + 1;\n      startPtr = nextPtr;\n    } while (nextPtr < loopEndPtr + counter);\n    tempPtr[1] = remainder;\n    if (remainder != 0) {\n      length = offsetDividedBy32 + offset + 2;\n    }\n  }\n  offset = *(int *)(address + 0x4c);\n  counter = params[1];\n  value = *(undefined4 *)(offset + counter * 4);\n  *(int *)(multiplier + 0x10) = length + -1;\n  *params = value;\n  *(undefined4 **)(offset + counter * 4) = params;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "reverse_bits_08009444",
                "param_1": "address",
                "param_2": "params",
                "param_3": "bitCount",
                "iVar1": "increment",
                "iVar2": "multiplier",
                "iVar3": "counter",
                "uVar4": "value",
                "iVar5": "offset",
                "iVar6": "doubleMultiplier",
                "puVar7": "currentPtr",
                "puVar8": "loopEndPtr",
                "puVar9": "tempPtr",
                "puVar10": "nextPtr",
                "puVar11": "startPtr",
                "iVar12": "offsetDividedBy32",
                "iVar13": "length",
                "uVar14": "remainder"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_and_get_difference_080094f8",
            "code": "\nint compare_arrays_and_get_difference_080094f8(int array1_address,int array2_address)\n\n{\n  int array_difference;\n  uint *array2_element;\n  int array2_offset;\n  uint *array1_element;\n  \n  array2_offset = *(int *)(array2_address + 0x10);\n  array_difference = *(int *)(array1_address + 0x10) - array2_offset;\n  if (array_difference == 0) {\n    array2_element = (uint *)(array2_address + 0x14 + array2_offset * 4);\n    array1_element = (uint *)(array1_address + 0x14) + array2_offset;\n    do {\n      array1_element = array1_element + -1;\n      array2_element = array2_element + -1;\n      if (*array1_element != *array2_element) {\n        if (*array2_element <= *array1_element) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1_address + 0x14) < array1_element);\n  }\n  return array_difference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_and_get_difference_080094f8",
                "param_1": "array1_address",
                "param_2": "array2_address",
                "iVar1": "array_difference",
                "puVar2": "array2_element",
                "iVar3": "array2_offset",
                "puVar4": "array1_element"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "compare_arrays_08009530",
            "code": "\nvoid compareArrays_08009530(undefined4 param1,uint *array1,uint *array2,undefined4 param4)\n\n{\n  int result;\n  uint *array1LengthPtr;\n  uint array1Length;\n  uint tempResult;\n  undefined4 isGreaterThan;\n  uint *resultPtr;\n  uint *currentArray1Ptr;\n  uint *currentArray2Ptr;\n  uint *currentArray2;\n  uint *array1Data;\n  int carry;\n  uint *array2EndingPointer;\n  uint resultLength;\n  uint *currentArray1;\n  \n  array1LengthPtr = (uint *)array2[4];\n  array1Data = array1 + 5;\n  array2EndingPointer = array2 + 5;\n  currentArray1Ptr = array1Data;\n  currentArray2Ptr = array1;\n  if ((uint *)array1[4] == array1LengthPtr) {\n    resultPtr = array1Data + (int)array1LengthPtr;\n    array1LengthPtr = array2EndingPointer + (int)array1LengthPtr;\n    while( true ) {\n      resultPtr = resultPtr + -1;\n      array1LengthPtr = array1LengthPtr + -1;\n      if (*resultPtr != *array1LengthPtr) break;\n      if (resultPtr <= array1Data) {\n        carry = FUN_080090c0(param1,0,resultPtr,array1LengthPtr,param4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    isGreaterThan = 0;\n    if (*array1LengthPtr <= *resultPtr) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)array1LengthPtr) {\n    isGreaterThan = 0;\n    resultPtr = array2;\n    goto LAB_08009578;\n  }\n  isGreaterThan = 1;\n  resultPtr = array1Data;\n  array1LengthPtr = array1;\n  currentArray1Ptr = array2EndingPointer;\n  currentArray2Ptr = array2;\n  array2 = array1;\n  array2EndingPointer = array1Data;\nLAB_08009578:\n  result = FUN_080090c0(param1,currentArray2Ptr[1],resultPtr,array1LengthPtr,param4);\n  carry = 0;\n  resultLength = currentArray2Ptr[4];\n  array1Length = array2[4];\n  *(undefined4 *)(result + 0xc) = isGreaterThan;\n  array1Data = currentArray1Ptr + resultLength;\n  array1LengthPtr = (uint *)(result + 0x14);\n  currentArray2Ptr = array2EndingPointer;\n  do {\n    currentArray1 = currentArray1Ptr + 1;\n    currentArray2 = currentArray2Ptr + 1;\n    tempResult = ((*currentArray1Ptr & 0xffff) + carry) - (*currentArray2Ptr & 0xffff);\n    carry = ((*currentArray1Ptr >> 0x10) - (*currentArray2Ptr >> 0x10)) + ((int)tempResult >> 0x10);\n    tempResult = tempResult & 0xffff | carry * 0x10000;\n    resultPtr = array1LengthPtr + 1;\n    *array1LengthPtr = tempResult;\n    carry = carry >> 0x10;\n    array1LengthPtr = resultPtr;\n    currentArray1Ptr = currentArray1;\n    currentArray2Ptr = currentArray2;\n  } while (currentArray2 < array2EndingPointer + array1Length);\n  array1LengthPtr = currentArray1;\n  currentArray1Ptr = resultPtr;\n  if (currentArray1 < array1Data) {\n    do {\n      currentArray2Ptr = array1LengthPtr + 1;\n      array1Length = (*array1LengthPtr & 0xffff) + carry;\n      carry = ((int)array1Length >> 0x10) + (*array1LengthPtr >> 0x10);\n      tempResult = array1Length & 0xffff | carry * 0x10000;\n      *currentArray1Ptr = tempResult;\n      carry = carry >> 0x10;\n      array1LengthPtr = currentArray2Ptr;\n      currentArray1Ptr = currentArray1Ptr + 1;\n    } while (currentArray2Ptr < array1Data);\n    resultPtr = (uint *)((int)resultPtr + ((int)array1Data + ~(uint)currentArray1 & 0xfffffffc) + 4);\n  }\n  resultPtr = resultPtr + -1;\n  while (tempResult == 0) {\n    resultPtr = resultPtr + -1;\n    resultLength = resultLength - 1;\n    tempResult = *resultPtr;\n  }\n  *(uint *)(result + 0x10) = resultLength;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "compare_arrays_08009530",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "param4",
                "iVar1": "result",
                "puVar2": "array1LengthPtr",
                "puVar11": "array1Data",
                "puVar13": "array2EndingPointer",
                "puVar7": "currentArray1Ptr",
                "puVar9": "currentArray2Ptr",
                "iVar12": "carry",
                "uVar3": "array1Length",
                "uVar4": "tempResult",
                "uVar5": "isGreaterThan",
                "uVar14": "resultLength",
                "puVar8": "currentArray1",
                "puVar10": "currentArray2",
                "puVar6": "resultPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "calculate_shifted_values_08009630",
            "code": "\nint calculateShiftedValues_08009630(undefined4 param1,undefined4 param2,uint param3,uint param4,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint shiftedValue;\n  int tempVar1;\n  int tempVar2;\n  uint shiftedTemp;\n  uint bitShift;\n  undefined8 computedValue;\n  uint localParam3;\n  uint localParam4;\n  \n  result = FUN_080090c0(param1,1);\n  bitShift = (param4 << 1) >> 0x15;\n  localParam4 = param4 & 0xfffff;\n  if (bitShift != 0) {\n    localParam4 = localParam4 | 0x100000;\n  }\n  if (param3 == 0) {\n    tempVar1 = FUN_080091e4(&localParam4);\n    tempVar2 = 1;\n    shiftedValue = tempVar1 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = localParam4;\n  }\n  else {\n    localParam3 = param3;\n    shiftedValue = FUN_080091e4(&localParam3);\n    if (shiftedValue == 0) {\n      *(uint *)(result + 0x14) = localParam3;\n    }\n    else {\n      shiftedTemp = localParam4 << (0x20 - shiftedValue & 0xff);\n      localParam4 = localParam4 >> (shiftedValue & 0xff);\n      *(uint *)(result + 0x14) = shiftedTemp | localParam3;\n    }\n    if (localParam4 == 0) {\n      tempVar2 = 1;\n    }\n    else {\n      tempVar2 = 2;\n    }\n    *(uint *)(result + 0x18) = localParam4;\n    *(int *)(result + 0x10) = tempVar2;\n  }\n  if (bitShift == 0) {\n    *output1 = shiftedValue - 0x432;\n    computedValue = FUN_080091a4(*(undefined4 *)(result + tempVar2 * 4 + 0x10));\n    *output2 = (int)((ulonglong)computedValue >> 0x20) * 0x20 - (int)computedValue;\n    return result;\n  }\n  *output1 = (bitShift - 0x433) + shiftedValue;\n  *output2 = 0x35 - shiftedValue;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009630": "calculate_shifted_values_08009630",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "result",
                "uVar2": "shiftedValue",
                "iVar3": "tempVar1",
                "iVar4": "tempVar2",
                "uVar5": "shiftedTemp",
                "uVar6": "bitShift",
                "uVar7": "computedValue",
                "local_20": "localParam3",
                "local_1c": "localParam4"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_floating_point_080096e0",
            "code": "\nundefined8 calculateFloatingPoint_080096e0(uint input1,uint input2,int *output,undefined4 constant)\n\n{\n  int counter;\n  uint normalizedInput2;\n  undefined8 concatenatedInputs;\n  \n  concatenatedInputs = CONCAT44(input2,input1);\n  counter = 0;\n  normalizedInput2 = input2 & 0x7fffffff;\n  *output = 0;\n  if ((normalizedInput2 < 0x7ff00000) && ((normalizedInput2 | input1) != 0)) {\n    if (normalizedInput2 < 0x100000) {\n      concatenatedInputs = FUN_080004c8(input1,input2,0,0x43500000,constant);\n      counter = -0x36;\n      normalizedInput2 = (uint)((ulonglong)concatenatedInputs >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)concatenatedInputs;\n    input2 = (uint)((ulonglong)concatenatedInputs >> 0x20) & 0x800fffff | 0x3fe00000;\n    *output = ((int)normalizedInput2 >> 0x14) + -0x3fe + counter;\n  }\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_floating_point_080096e0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "param_4": "constant",
                "iVar1": "counter",
                "uVar2": "normalizedInput2",
                "uVar3": "concatenatedInputs"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "find_and_store_error_08009744",
            "code": "\nvoid find_and_store_error_08009744(int *output,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_20000c10 = 0;\n  result = FUN_08005728(input_value);\n  if ((result == -1) && (DAT_20000c10 != 0)) {\n    *output = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "find_and_store_error_08009744",
                "param_1": "output",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_and_pad_string_08009768",
            "code": "\nvoid copy_and_pad_string_08009768(uint *destination,uint *source,uint length)\n\n{\n  char current_char;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_value;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) &&\n     (destination_ptr = destination, source_ptr = source, 3 < length)) {\n    do {\n      source = source_ptr + 1;\n      current_value = *source_ptr;\n      destination = destination_ptr;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      destination = destination_ptr + 1;\n      *destination_ptr = current_value;\n      destination_ptr = destination;\n      source_ptr = source;\n    } while (3 < length);\n  }\n  source_ptr = source;\n  if (length != 0) {\nLAB_0800979c:\n    current_char = *(char *)source_ptr;\n    *(char *)destination = current_char;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_char = *(char *)source_ptr;\n      *(char *)destination = current_char;\n    }\n    if (length != 0) {\n      source_ptr = destination;\n      do {\n        destination_ptr = (uint *)((int)source_ptr + 1);\n        *(char *)source_ptr = '\\0';\n        source_ptr = destination_ptr;\n      } while (destination_ptr != (uint *)(length + (int)destination));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_and_pad_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "uVar4": "current_value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 processData_080097cc(undefined4 *output,int *input1,int *input2)\n\n{\n  int sum;\n  uint temp;\n  int result;\n  int offset;\n  uint maxSize;\n  uint size;\n  undefined4 *ptr;\n  undefined4 *ptr2;\n  undefined4 value;\n  \n  if (input2[2] != 0) {\n    sum = *input1;\n    maxSize = input1[2];\n    ptr2 = (undefined4 *)*input2;\n    do {\n      do {\n        ptr = ptr2 + 2;\n        value = *ptr2;\n        size = ptr2[1];\n        ptr2 = ptr;\n      } while (size == 0);\n      temp = size;\n      if ((maxSize <= size) && (temp = maxSize, (*(ushort *)(input1 + 3) & 0x480) != 0)) {\n        offset = sum - input1[4];\n        maxSize = (input1[5] * 3) / 2;\n        temp = size + 1 + offset;\n        if (maxSize < temp) {\n          maxSize = temp;\n        }\n        if ((int)((uint)*(ushort *)(input1 + 3) << 0x15) < 0) {\n          result = FUN_08008af8(output,maxSize);\n          if (result == 0) {\nLAB_08009896:\n            *output = 0xc;\n            *(ushort *)(input1 + 3) = *(ushort *)(input1 + 3) | 0x40;\n            input2[1] = 0;\n            input2[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(result,input1[4],offset);\n          *(ushort *)(input1 + 3) = *(ushort *)(input1 + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          result = FUN_08009adc(output);\n          if (result == 0) {\n            FUN_080088ec(output,input1[4]);\n            goto LAB_08009896;\n          }\n        }\n        sum = result + offset;\n        input1[5] = maxSize;\n        input1[4] = result;\n        *input1 = sum;\n        input1[2] = maxSize - offset;\n        temp = size;\n      }\n      FUN_08009a18(sum,value,temp);\n      offset = input2[2];\n      maxSize = input1[2] - temp;\n      sum = *input1 + temp;\n      input1[2] = maxSize;\n      *input1 = sum;\n      input2[2] = offset - size;\n    } while (offset - size != 0);\n  }\n  input2[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "iVar1": "sum",
                "uVar2": "temp",
                "iVar3": "result",
                "iVar4": "offset",
                "uVar5": "maxSize",
                "uVar6": "size",
                "puVar7": "ptr",
                "puVar8": "ptr2",
                "uVar9": "value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_record_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateDataRecord_080098c0(int option,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataRecord;\n  undefined4 returnValue;\n  uint bitMask;\n  uint recordIndex;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataRecord = DAT_20000168;\n  recordIndex = *(uint *)(DAT_20000168 + 4);\n  if ((int)recordIndex < 0x20) {\n    if (option != 0) {\n      *(undefined4 *)(DAT_20000168 + recordIndex * 4 + 0x88) = value1;\n      bitMask = 1 << (recordIndex & 0xff);\n      *(uint *)(dataRecord + 0x188) = *(uint *)(dataRecord + 0x188) | bitMask;\n      *(undefined4 *)(dataRecord + recordIndex * 4 + 0x108) = value2;\n      if (option == 2) {\n        *(uint *)(dataRecord + 0x18c) = bitMask | *(uint *)(dataRecord + 0x18c);\n      }\n    }\n    *(uint *)(dataRecord + 4) = recordIndex + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(dataRecord + (recordIndex + 2) * 4) = data;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_record_080098c0",
                "param_1": "option",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataRecord",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "recordIndex"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 ptr,int size,int count)\n\n{\n  undefined4 *allocatedMemory;\n  uint adjustedSize;\n  undefined4 *initializedMemory;\n  \n  allocatedMemory = (undefined4 *)FUN_08008af8(ptr,count * size);\n  if (allocatedMemory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjustedSize = (allocatedMemory[-1] & 0xfffffffc) - 4;\n  if (adjustedSize < 0x25) {\n    initializedMemory = allocatedMemory;\n    if (0x13 < adjustedSize) {\n      *allocatedMemory = 0;\n      allocatedMemory[1] = 0;\n      if (0x1b < adjustedSize) {\n        allocatedMemory[2] = 0;\n        allocatedMemory[3] = 0;\n        if (adjustedSize == 0x24) {\n          allocatedMemory[4] = 0;\n          allocatedMemory[5] = 0;\n          initializedMemory = allocatedMemory + 6;\n        }\n        else {\n          initializedMemory = allocatedMemory + 4;\n        }\n        *initializedMemory = 0;\n        initializedMemory[1] = 0;\n        initializedMemory[2] = 0;\n        return allocatedMemory;\n      }\n      initializedMemory = allocatedMemory + 2;\n    }\n    *initializedMemory = 0;\n    initializedMemory[1] = 0;\n    initializedMemory[2] = 0;\n    return allocatedMemory;\n  }\n  FUN_08005d68(allocatedMemory,0);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "count",
                "puVar1": "allocatedMemory",
                "uVar2": "adjustedSize",
                "puVar3": "initializedMemory"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_byte_ptr;\n  undefined4 *src_byte_ptr;\n  uint remainder_size;\n  uint remaining_size;\n  \n  if ((src < dest) && (src_ptr = (undefined4 *)((int)src + size), dest < src_ptr)) {\n    dest_byte_ptr = (undefined *)((int)dest + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte_ptr = dest_byte_ptr + -1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n      } while (src != src_ptr);\n    }\n  }\n  else {\n    remaining_size = size;\n    if (0xf < size) {\n      if ((((uint)dest | (uint)src) & 3) != 0) goto LAB_08009abc;\n      src_ptr = src + 4;\n      dest_ptr = dest + 4;\n      do {\n        src_byte_ptr = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_byte_ptr;\n        dest_ptr = dest_ptr + 4;\n      } while (src_byte_ptr != (undefined4 *)((int)src + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      remaining_size = size & 0xf;\n      src = src + iteration * 4;\n      dest = dest + iteration * 4;\n      if (3 < remaining_size) {\n        src_ptr = dest + -1;\n        remainder_size = remaining_size;\n        dest_ptr = src;\n        do {\n          remainder_size = remainder_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remainder_size);\n        iteration = (remaining_size - 4 & 0xfffffffc) + 4;\n        dest = (undefined4 *)((int)dest + iteration);\n        src = (undefined4 *)((int)src + iteration);\n        remaining_size = size & 3;\n      }\n    }\n    size = remaining_size;\n    if (remaining_size != 0) {\nLAB_08009abc:\n      dest_byte_ptr = (undefined *)((int)dest + -1);\n      src_ptr = src;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte_ptr = dest_byte_ptr + 1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)src));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "iVar3": "iteration",
                "puVar4": "dest_byte_ptr",
                "puVar5": "src_byte_ptr",
                "uVar6": "remainder_size",
                "uVar7": "remaining_size"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_08009adc",
            "code": "\nint * allocate_memory_08009adc(undefined4 *param1,int *param2,uint param3)\n\n{\n  int *ptr1;\n  int var1;\n  int *ptr2;\n  uint var2;\n  int var3;\n  uint var4;\n  int *ptr3;\n  uint var5;\n  uint var6;\n  uint var7;\n  int var8;\n  \n  if (param2 == (int *)0x0) {\n    ptr2 = (int *)FUN_08008af8(param1,param3);\n    return ptr2;\n  }\n  FUN_080090a8();\n  var4 = param2[-1];\n  var6 = var4 & 0xfffffffc;\n  ptr2 = param2 + -2;\n  if (param3 + 0xb < 0x17) {\n    var5 = 0x10;\n  }\n  else {\n    var5 = param3 + 0xb & 0xfffffff8;\n    if ((int)var5 < 0) goto LAB_08009b8e;\n  }\n  if (var5 < param3) {\nLAB_08009b8e:\n    *param1 = 0xc;\n    return (int *)0x0;\n  }\n  var8 = (int)ptr2 + var6;\n  var7 = var6;\n  if ((int)var6 < (int)var5) {\n    if (DAT_20000454 == var8) {\n      var8 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + var6;\n      if ((int)(var5 + 0x10) <= var8) {\n        DAT_20000454 = (int)ptr2 + var5;\n        *(uint *)(DAT_20000454 + 4) = var8 - var5 | 1;\n        param2[-1] = var5 | param2[-1] & 1U;\n        FUN_080090b4(param1);\n        return param2;\n      }\n      if (-1 < (int)(var4 << 0x1f)) {\n        ptr1 = (int *)((int)ptr2 - param2[-2]);\n        var4 = ptr1[1] & 0xfffffffc;\n        if ((int)(var5 + 0x10) <= (int)(var8 + var4)) {\n          var3 = ptr1[3];\n          ptr2 = ptr1 + 2;\n          var1 = *ptr2;\n          var6 = var6 - 4;\n          *(int *)(var1 + 0xc) = var3;\n          *(int *)(var3 + 8) = var1;\n          if (var6 < 0x25) {\n            var1 = *param2;\n            ptr3 = ptr2;\n            if (0x13 < var6) {\n              ptr1[2] = var1;\n              ptr1[3] = param2[1];\n              var1 = param2[2];\n              if (var6 < 0x1c) {\n                param2 = param2 + 2;\n                ptr3 = ptr1 + 4;\n              }\n              else {\n                ptr1[4] = var1;\n                ptr1[5] = param2[3];\n                var1 = param2[4];\n                if (var6 == 0x24) {\n                  ptr1[6] = var1;\n                  ptr1[7] = param2[5];\n                  var1 = param2[6];\n                  param2 = param2 + 6;\n                  ptr3 = ptr1 + 8;\n                }\n                else {\n                  param2 = param2 + 4;\n                  ptr3 = ptr1 + 6;\n                }\n              }\n            }\n            *ptr3 = var1;\n            ptr3[1] = param2[1];\n            ptr3[2] = param2[2];\n          }\n          else {\n            FUN_08009a18(ptr2,param2);\n          }\n          DAT_20000454 = (int)ptr1 + var5;\n          *(uint *)(DAT_20000454 + 4) = (var8 + var4) - var5 | 1;\n          ptr1[1] = var5 | ptr1[1] & 1U;\n          FUN_080090b4(param1);\n          return ptr2;\n        }\nLAB_08009bb0:\n        var7 = var6 + var4;\n        if ((int)var5 <= (int)var7) {\n          var3 = ptr1[3];\n          ptr3 = ptr1 + 2;\n          var1 = *ptr3;\n          *(int *)(var1 + 0xc) = var3;\n          var8 = (int)ptr1 + var7;\n          *(int *)(var3 + 8) = var1;\n          ptr2 = ptr1;\n          if (var6 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(ptr3,param2);\n          param2 = ptr3;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(var8 + 4) & 0xfffffffe) + var8 + 4) << 0x1f) {\n        var2 = *(uint *)(var8 + 4) & 0xfffffffc;\n        var7 = var6 + var2;\n        if ((int)var7 < (int)var5) {\n          if ((int)(var4 << 0x1f) < 0) goto LAB_08009b36;\n          ptr1 = (int *)((int)ptr2 - param2[-2]);\n          var4 = ptr1[1] & 0xfffffffc;\n          var7 = var2 + var4 + var6;\n          if ((int)var7 < (int)var5) goto LAB_08009bb0;\n          var1 = *(int *)(var8 + 8);\n          var8 = *(int *)(var8 + 0xc);\n          *(int *)(var1 + 0xc) = var8;\n          *(int *)(var8 + 8) = var1;\n          ptr3 = ptr1 + 2;\n          var1 = *ptr3;\n          var3 = ptr1[3];\n          *(int *)(var1 + 0xc) = var3;\n          var8 = (int)ptr1 + var7;\n          *(int *)(var3 + 8) = var1;\n          ptr2 = ptr1;\n          if (0x24 < var6 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          var6 = var6 - 4;\n          var1 = *param2;\n          ptr1 = ptr3;\n          if (0x13 < var6) {\n            ptr2[2] = var1;\n            ptr2[3] = param2[1];\n            var1 = param2[2];\n            if (var6 < 0x1c) {\n              param2 = param2 + 2;\n              ptr1 = ptr2 + 4;\n            }\n            else {\n              ptr2[4] = var1;\n              ptr2[5] = param2[3];\n              var1 = param2[4];\n              if (var6 == 0x24) {\n                ptr2[6] = var1;\n                ptr2[7] = param2[5];\n                var1 = param2[6];\n                param2 = param2 + 6;\n                ptr1 = ptr2 + 8;\n              }\n              else {\n                param2 = param2 + 4;\n                ptr1 = ptr2 + 6;\n              }\n            }\n          }\n          *ptr1 = var1;\n          ptr1[1] = param2[1];\n          ptr1[2] = param2[2];\n          param2 = ptr3;\n        }\n        else {\n          var1 = *(int *)(var8 + 8);\n          var3 = *(int *)(var8 + 0xc);\n          *(int *)(var1 + 0xc) = var3;\n          var8 = (int)ptr2 + var7;\n          *(int *)(var3 + 8) = var1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(var4 << 0x1f)) {\n        ptr1 = (int *)((int)ptr2 - param2[-2]);\n        var4 = ptr1[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    ptr1 = (int *)FUN_08008af8(param1,param3);\n    if (ptr1 != (int *)0x0) {\n      if ((int *)((param2[-1] & 0xfffffffeU) + (int)ptr2) == ptr1 + -2) {\n        var7 = var6 + (ptr1[-1] & 0xfffffffcU);\n        var8 = (int)ptr2 + var7;\n        goto LAB_08009c00;\n      }\n      var6 = var6 - 4;\n      if (var6 < 0x25) {\n        var8 = *param2;\n        ptr2 = param2;\n        ptr3 = ptr1;\n        if (0x13 < var6) {\n          *ptr1 = var8;\n          ptr1[1] = param2[1];\n          if (var6 < 0x1c) {\n            var8 = param2[2];\n            ptr2 = param2 + 2;\n            ptr3 = ptr1 + 2;\n          }\n          else {\n            ptr1[2] = param2[2];\n            ptr1[3] = param2[3];\n            if (var6 == 0x24) {\n              ptr1[4] = param2[4];\n              ptr1[5] = param2[5];\n              var8 = param2[6];\n              ptr2 = param2 + 6;\n              ptr3 = ptr1 + 6;\n            }\n            else {\n              var8 = param2[4];\n              ptr2 = param2 + 4;\n              ptr3 = ptr1 + 4;\n            }\n          }\n        }\n        *ptr3 = var8;\n        ptr3[1] = ptr2[1];\n        ptr3[2] = ptr2[2];\n      }\n      else {\n        FUN_08009a18(ptr1,param2);\n      }\n      FUN_080088ec(param1,param2);\n    }\n    FUN_080090b4(param1);\n    param2 = ptr1;\n  }\n  else {\nLAB_08009c00:\n    if (var7 - var5 < 0x10) {\n      ptr2[1] = ptr2[1] & 1U | var7;\n      *(uint *)(var8 + 4) = *(uint *)(var8 + 4) | 1;\n    }\n    else {\n      ptr2[1] = ptr2[1] & 1U | var5;\n      *(uint *)((int)ptr2 + var5 + 4) = var7 - var5 | 1;\n      *(uint *)(var8 + 4) = *(uint *)(var8 + 4) | 1;\n      FUN_080088ec(param1,(int)ptr2 + var5 + 8);\n    }\n    FUN_080090b4(param1);\n  }\n  return param2;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "piVar3": "ptr2",
                "uVar4": "var2",
                "iVar5": "var3",
                "uVar6": "var4",
                "piVar7": "ptr3",
                "uVar8": "var5",
                "uVar9": "var6",
                "uVar10": "var7",
                "iVar11": "var8"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 152882,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}