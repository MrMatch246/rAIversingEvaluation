{
    "functions": {
        "FUN_08000110": {
            "additional_data": {
                "DAT_200009c8": {
                    "1": "status",
                    "17": "flag",
                    "3": "flag_variable"
                },
                "FUNC_08009e68": {
                    "1": "initialize_status"
                },
                "FUN_08000110": {
                    "1": "initialize_data",
                    "2": "set_flag_if_not_set",
                    "23": "initialize_flag"
                },
                "param_1": {
                    "1": "data",
                    "12": "input_value",
                    "3": "input_param"
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_08000110(undefined4 input_value)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_08000110",
            "entrypoint": "0x08000110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000134": {
            "additional_data": {
                "FUN_08000134": {
                    "1": "concatenate_integers",
                    "3": "concatenate_parameters",
                    "7": "concatenate_values",
                    "8": "concatenate_params"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "parameter1",
                    "3": "value1",
                    "5": "first_param"
                },
                "param_2": {
                    "1": "second_u_int",
                    "2": "parameter2",
                    "3": "value2",
                    "5": "second_param"
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_params_08000134(undefined4 first_param,undefined4 second_param)\n\n{\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_08000134",
            "entrypoint": "0x08000134",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000134": "concatenate_params_08000134",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000158": {
            "additional_data": {
                "FUN_08000158": {
                    "1": "perform_bitwise_operations",
                    "2": "perform_calculation",
                    "4": "reverse_bits",
                    "5": "calculate"
                },
                "bVar13": {
                    "1": "is_equal",
                    "2": "check1",
                    "3": "is_zero1",
                    "5": "flag1",
                    "7": "is_zero"
                },
                "bVar14": {
                    "1": "is_result_zero",
                    "2": "check2",
                    "3": "is_zero2",
                    "4": "condition2",
                    "5": "flag2"
                },
                "bVar15": {
                    "1": "is_greater_than32",
                    "2": "check3",
                    "4": "condition3",
                    "5": "flag3"
                },
                "bVar2": {
                    "1": "temp_2",
                    "2": "carry_bit",
                    "4": "carry",
                    "5": "carry_flag"
                },
                "iVar1": {
                    "1": "temp_int1",
                    "2": "shift_amount1",
                    "4": "shift1"
                },
                "iVar8": {
                    "1": "shifted_input2_high_bits",
                    "2": "shift_amount2",
                    "3": "shift_amount",
                    "4": "shift2"
                },
                "param_1": {
                    "1": "num1",
                    "23": "input1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "23": "input2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "23": "input3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "value4",
                    "23": "input4",
                    "4": "input_4"
                },
                "uVar1": {
                    "1": "temp"
                },
                "uVar10": {
                    "1": "temp4",
                    "2": "temp7",
                    "4": "result2"
                },
                "uVar11": {
                    "1": "result",
                    "2": "temp9",
                    "3": "temp3",
                    "4": "result3"
                },
                "uVar12": {
                    "1": "temp3",
                    "2": "temp10",
                    "3": "temp4",
                    "4": "result4"
                },
                "uVar13": {
                    "1": "twos_complement"
                },
                "uVar14": {
                    "1": "shifted_twos_complement"
                },
                "uVar3": {
                    "1": "calculation1",
                    "2": "temp_var1",
                    "5": "result1",
                    "8": "temp1"
                },
                "uVar4": {
                    "1": "shifted_temp1",
                    "2": "temp1",
                    "5": "result2",
                    "8": "temp2"
                },
                "uVar5": {
                    "1": "temp_var6",
                    "2": "temp2",
                    "5": "result3",
                    "8": "temp3"
                },
                "uVar6": {
                    "1": "result4",
                    "2": "result1",
                    "3": "temp1",
                    "6": "temp4"
                },
                "uVar7": {
                    "1": "result_2",
                    "2": "temp2",
                    "3": "temp4",
                    "7": "temp5"
                },
                "uVar8": {
                    "1": "calculation5"
                },
                "uVar9": {
                    "1": "temp3",
                    "2": "modified_input2",
                    "4": "result1",
                    "5": "shifted_input2"
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong calculate_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry_flag;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift2;\n  uint shifted_input2;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  shifted_input2 = input2 << 1;\n  input4 = input4 << 1;\n  is_zero = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = is_zero && input1 == input3;\n  if (!is_zero || input1 != input3) {\n    flag2 = (shifted_input2 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input2 = temp4;\n      result3 = input3;\n      if (shift2 == -1) {\n        shifted_input2 = input2;\n        result3 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = result3;\n        temp4 = shifted_input2;\n      }\n      flag2 = (result3 | shifted_input2 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = shifted_input2 == temp4;\n      }\n      if (!flag2) {\n        shifted_input2 = shifted_input2 | 0x80000;\n      }\n      return CONCAT44(shifted_input2,result3);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - shifted_input2;\n  flag2 = result3 != 0;\n  if (input4 < shifted_input2) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (flag2 && shifted_input2 <= input4) {\n    shifted_input2 = shifted_input2 + result3;\n    result2 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (shifted_input2 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    result3 = -(uint)(flag2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = shifted_input2 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry_flag = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      result4 = (uint)(carry_flag & 1) << 0x1f | result4 >> 1;\n      result2 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  is_zero = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)is_zero;\n  result3 = result3 * 2 + (uint)(flag2 || CARRY4(result2,(uint)is_zero));\n  result2 = shifted_input2 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000268;\n  temp5 = temp4;\n  shifted_input2 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    shifted_input2 = temp4;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  flag3 = SBORROW4(result3,0x20);\n  temp4 = shift2 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  is_zero = temp4 == 0;\n  if ((int)result3 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    is_zero = shift2 == 0;\n    temp4 = result3;\n    if (!is_zero && flag2 == flag3) {\n      temp5 = shifted_input2 << (result3 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || flag2 != flag3) {\n    result4 = 0x20 - temp4;\n  }\n  shifted_input2 = shifted_input2 << (temp4 & 0xff);\n  if (is_zero || flag2 != flag3) {\n    shifted_input2 = shifted_input2 | temp5 >> (result4 & 0xff);\n  }\n  if (is_zero || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(shifted_input2 + (result2 - result3) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result2 - result3);\n  if ((int)temp4 < 0x1f) {\n    shift2 = temp4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | shifted_input2 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | shifted_input2 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,shifted_input2 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_08000158",
            "entrypoint": "0x08000158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000158": "calculate_08000158",
                "bVar13": "is_zero",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "bVar2": "carry_flag",
                "iVar1": "shift1",
                "iVar8": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar9": "shifted_input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800015c": {
            "additional_data": {
                "FUN_0800015c": {
                    "1": "calculate_unsigned_difference",
                    "3": "calculate_result"
                },
                "bVar13": {
                    "1": "is_same_sign",
                    "4": "condition1",
                    "5": "is_equal"
                },
                "bVar14": {
                    "1": "is_result_zero",
                    "4": "condition2",
                    "5": "is_zero"
                },
                "bVar15": {
                    "1": "variable15",
                    "2": "condition3",
                    "4": "is_negative"
                },
                "bVar2": {
                    "1": "byte_value",
                    "2": "variable2",
                    "7": "carry"
                },
                "iVar1": {
                    "1": "shifted_input2bits",
                    "2": "variable1",
                    "5": "shift1"
                },
                "iVar6": {
                    "1": "input2_msb",
                    "2": "temp4",
                    "5": "shift2"
                },
                "param_1": {
                    "1": "first_param",
                    "14": "input1",
                    "2": "a",
                    "3": "input_1",
                    "4": "num1"
                },
                "param_2": {
                    "1": "second_param",
                    "14": "input2",
                    "2": "b",
                    "3": "input_2",
                    "4": "num2"
                },
                "param_3": {
                    "1": "third_param",
                    "14": "input3",
                    "2": "c",
                    "3": "input_3",
                    "4": "num3"
                },
                "param_4": {
                    "1": "fourth_param",
                    "14": "input4",
                    "2": "d",
                    "3": "input_4",
                    "4": "num4"
                },
                "uParam_1": {
                    "1": "input1"
                },
                "uParam_2": {
                    "1": "input2"
                },
                "uParam_3": {
                    "1": "input3"
                },
                "uParam_4": {
                    "1": "input4"
                },
                "uVar10": {
                    "1": "temp10",
                    "2": "variable10",
                    "4": "result2",
                    "5": "difference"
                },
                "uVar11": {
                    "1": "temp_result_shifted",
                    "2": "temp6",
                    "3": "temp4",
                    "4": "result3"
                },
                "uVar12": {
                    "1": "result",
                    "2": "temp7",
                    "3": "result4"
                },
                "uVar13": {
                    "1": "temp6"
                },
                "uVar3": {
                    "1": "add1",
                    "12": "temp1",
                    "2": "temp_var1",
                    "3": "result1"
                },
                "uVar4": {
                    "1": "temp4",
                    "13": "temp2",
                    "2": "variable4"
                },
                "uVar5": {
                    "1": "bits3",
                    "11": "temp3",
                    "2": "temp1"
                },
                "uVar7": {
                    "1": "shifted_input2_divided",
                    "2": "temp4",
                    "7": "shifted_input2"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "variable8",
                    "3": "shifted_input4"
                },
                "uVar9": {
                    "1": "result3_adjusted",
                    "2": "temp4",
                    "4": "result1"
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_08004bd8"
            ],
            "code": "\nulonglong calculate_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint result1;\n  uint difference;\n  uint result3;\n  uint result4;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  result1 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (result1 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)result1 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        result1 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = result1;\n      }\n      is_zero = (shifted_input2 | result1 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = result1 == input4;\n      }\n      if (!is_zero) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      result1 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  result1 = result1 >> 0x15;\n  difference = result1 - shifted_input2;\n  is_zero = difference != 0;\n  if (result1 < shifted_input2) {\n    difference = -difference;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= result1) {\n    shifted_input2 = shifted_input2 + difference;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  result1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    result1 = -result1 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      result1 = result1 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result4 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    result3 = input3 << (result4 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (result4 & 0xff);\n    result4 = temp1 + temp2;\n    result1 = result1 + CARRY4(shifted_input4,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    result3 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      result3 = result3 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    result4 = shifted_input4 + temp3;\n    result1 = result1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_input4,temp3);\n  }\n  input2 = result1 & 0x80000000;\n  difference = result1;\n  if ((int)result1 < 0) {\n    is_zero = result3 == 0;\n    result3 = -result3;\n    difference = -result4;\n    result4 = -(uint)!is_zero - result4;\n    difference = -(uint)(is_zero <= difference) - result1;\n  }\n  if (0xfffff < difference) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      result1 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)result4;\n      result4 = (uint)(result1 != 0) << 0x1f | result4 >> 1;\n      result3 = (uint)(carry & 1) << 0x1f | result3 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    is_zero = 0x7fffffff < result3;\n    if (result3 == 0x80000000) {\n      is_zero = (result4 & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input4 * 0x100000 + (uint)CARRY4(result4,(uint)is_zero) | input2,\n                    result4 + is_zero);\n  }\n  is_equal = (result3 & 0x80000000) != 0;\n  result3 = result3 << 1;\n  shifted_input4 = result4 * 2;\n  is_zero = CARRY4(result4,result4);\n  result4 = result4 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  temp3 = result4;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = result4;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result4 = shift2 - 0xb;\n  is_negative = SBORROW4(result4,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)result4 < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = result4;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (result4 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    result3 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (result3 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result4 <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - result4) * 0x100000 | input2,temp3);\n  }\n  difference = ~(shifted_input4 - result4);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(result1,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(result1,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_0800015c",
            "entrypoint": "0x0800015c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800015c": "calculate_0800015c",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "result3",
                "uVar12": "result4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "result1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003d4": {
            "additional_data": {
                "0": {
                    "2": "zero"
                },
                "0U": {
                    "1": "zero"
                },
                "0x13": {
                    "1": "constant7"
                },
                "0x15": {
                    "1": "offset"
                },
                "0x1e": {
                    "1": "constant30"
                },
                "0x1f": {
                    "1": "constant31"
                },
                "0x20": {
                    "1": "bit_length",
                    "2": "bit_width"
                },
                "0x432": {
                    "1": "threshold2"
                },
                "0x433": {
                    "1": "constant5"
                },
                "0xb": {
                    "1": "constant2"
                },
                "0xc": {
                    "1": "constant2"
                },
                "0xcU": {
                    "1": "constant8"
                },
                "CONCAT44": {
                    "1": "combine",
                    "2": "combine_result"
                },
                "FUN_080003d4": {
                    "1": "shift_and_rotate_bits",
                    "2": "bitwise_shift",
                    "3": "shift_and_concat",
                    "4": "shift_and_concatenate",
                    "8": "reverse_bits"
                },
                "LAB_080002e0": {
                    "1": "shift_and_concatenate_label",
                    "2": "end_label",
                    "3": "shift_result"
                },
                "SBORROW4": {
                    "1": "subtract_borrow4"
                },
                "SCARRY4": {
                    "1": "is_subtraction_carry"
                },
                "ULONG_LONG_MAX": {
                    "1": "ulonglong_max"
                },
                "bVar5": {
                    "1": "is_negative_shift_amount",
                    "2": "is_negative_offset",
                    "20": "is_negative",
                    "4": "is_negative_shift"
                },
                "bVar6": {
                    "1": "is_zero1",
                    "2": "is_zero_offset",
                    "21": "is_zero",
                    "4": "is_zero_shift"
                },
                "bVar7": {
                    "1": "is_borrowed",
                    "2": "carry",
                    "5": "is_carry",
                    "6": "is_overflow",
                    "7": "is_borrow"
                },
                "iVar3": {
                    "1": "num_of_bits",
                    "10": "leading_zeros",
                    "7": "bit_count"
                },
                "in_r12": {
                    "1": "bit_difference",
                    "14": "remaining_bits",
                    "2": "remaining_shift",
                    "3": "temp",
                    "4": "remainder"
                },
                "param_1": {
                    "1": "input_val",
                    "2": "input_number",
                    "23": "input",
                    "3": "input_value"
                },
                "ptr_LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "uVar1": {
                    "1": "concatenated",
                    "2": "shifted_value",
                    "4": "upper_bits",
                    "6": "result",
                    "8": "result1"
                },
                "uVar2": {
                    "1": "shift_amount1",
                    "15": "shift_amount",
                    "2": "shifted_value",
                    "6": "result2"
                },
                "uVar4": {
                    "1": "shift_amount_adjusted",
                    "2": "final_shift_amount",
                    "3": "shift",
                    "9": "shift_amount"
                },
                "~": {
                    "1": "bitwise_not"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nulonglong reverse_bits_080003d4(uint input)\n\n{\n  uint result1;\n  uint shift_amount;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_borrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  count = LZCOUNT(input);\n  shift_amount = count + 0x15;\n  is_borrow = subtract_borrow4(shift_amount,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_borrow = subtract_carry4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_borrow == false) {\n      result1 = input << shift_amount;\n      input = input >> (constant8 - (count + 1) & 0xff);\n      goto shift_result;\n    }\n  }\n  if (is_zero || is_negative != is_borrow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_borrow) {\n    input = input | zeros >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_borrow) {\n    result1 = 0 << (shift_amount & 0xff);\n  }\nshift_result:\n  if (shift_amount < 0x433) {\n    return combine_result(input + (0x432 - shift_amount) * 0x100000,result1);\n  }\n  shift_amount = bitwise_not(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != subtract_carry4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_result(input >> (shift_amount & 0xff),\n                    result1 >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (constant8 - count) & 0xff) | input << (constant8 - count & 0xff));\n}\n\n",
            "current_name": "reverse_bits_080003d4",
            "entrypoint": "0x080003d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zeros",
                "0xcU": "constant8",
                "CONCAT44": "combine_result",
                "FUN_080003d4": "reverse_bits_080003d4",
                "LAB_080002e0": "shift_result",
                "SBORROW4": "subtract_borrow4",
                "SCARRY4": "subtract_carry4",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_borrow",
                "iVar3": "count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount",
                "~": "bitwise_not"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003f4": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concat64"
                },
                "FUN_080003f4": {
                    "1": "unpack_bits",
                    "16": "reverse_bits",
                    "2": "bitwise_shift",
                    "3": "reverse_and_shift_bits"
                },
                "LAB_080002e0": {
                    "1": "bit_shift_loop"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "SBORROW4": {
                    "1": "signed_borrow"
                },
                "SCARRY4": {
                    "1": "subtraction_overflow"
                },
                "bVar7": {
                    "1": "need_to_shift",
                    "2": "positive_shift",
                    "20": "is_negative"
                },
                "bVar8": {
                    "1": "no_shift",
                    "2": "is_zero_shift",
                    "21": "is_zero"
                },
                "bVar9": {
                    "1": "need_to_compute_shift_amount",
                    "4": "overflow",
                    "5": "carry",
                    "6": "carry_flag",
                    "8": "is_carry"
                },
                "iVar4": {
                    "1": "leading_zeros_count",
                    "19": "leading_zeros",
                    "3": "count",
                    "6": "leading_zeroes"
                },
                "in_r12": {
                    "1": "ones_mask",
                    "17": "remaining_bits",
                    "2": "temp"
                },
                "new_variable_name_1": {
                    "1": "<new_variable_name_1>"
                },
                "new_variable_name_2": {
                    "1": "<new_variable_name_2>"
                },
                "param_1": {
                    "2": "number",
                    "25": "input",
                    "4": "input_value"
                },
                "uVar1": {
                    "1": "output_lower_bits",
                    "2": "bit_count",
                    "3": "shift_amount",
                    "4": "shift_count",
                    "5": "result"
                },
                "uVar2": {
                    "1": "absolute_input",
                    "16": "abs_input",
                    "2": "absolute_value",
                    "3": "abs_value"
                },
                "uVar3": {
                    "1": "shifted_input",
                    "17": "shift_amount",
                    "2": "shift_count",
                    "3": "shift"
                },
                "uVar5": {
                    "1": "num_bits",
                    "2": "shift_amount",
                    "6": "total_bits"
                },
                "uVar6": {
                    "2": "sign_mask",
                    "26": "sign_bit",
                    "3": "is_negative"
                },
                "uVar7": {
                    "1": "shifted_and_offset"
                },
                "uVar8": {
                    "1": "right_shifted"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong reverse_bits_080003f4(uint input)\n\n{\n  uint result;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  result = 0;\n  leading_zeros = leading_zeros_count(abs_input);\n  total_bits = leading_zeros + 0x15;\n  is_carry = subtraction_borrow(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_carry = subtraction_overflow(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_carry == false) {\n      result = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto end_shift;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nend_shift:\n  if (total_bits < 0x433) {\n    return concat64(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return concat64(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtraction_overflow(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concat64(sign_bit | abs_input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concat64(input,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_080003f4",
            "entrypoint": "0x080003f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concat64",
                "FUN_080003f4": "reverse_bits_080003f4",
                "LAB_080002e0": "end_shift",
                "LZCOUNT": "leading_zeros_count",
                "SBORROW4": "subtraction_borrow",
                "SCARRY4": "subtraction_overflow",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000418": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "FUN_08000418": {
                    "1": "extract_bits",
                    "14": "reverse_bits",
                    "2": "decode_and_transform"
                },
                "LZCOUNT": {
                    "1": "leading_zeroes_count"
                },
                "bVar10": {
                    "1": "is_borrow",
                    "2": "is_shift_negative",
                    "3": "is_negative"
                },
                "bVar8": {
                    "1": "use_shift",
                    "3": "is_negative_shift",
                    "4": "is_zero",
                    "6": "is_negative"
                },
                "bVar9": {
                    "1": "is_zero1",
                    "2": "is_masked",
                    "9": "is_zero"
                },
                "iVar6": {
                    "1": "shift_result_subtracted",
                    "10": "bit_count",
                    "2": "num_bits",
                    "3": "leading_zeros",
                    "4": "shift_amount",
                    "7": "count"
                },
                "in_r12": {
                    "1": "byte_mask",
                    "11": "remaining_bits",
                    "2": "shift_amount"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param",
                    "21": "input",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "unused_param1",
                    "3": "unused_param_1",
                    "4": "unused_param"
                },
                "param_3": {
                    "1": "input_value3",
                    "2": "unused2",
                    "3": "unused_param2"
                },
                "param_4": {
                    "1": "input_value4",
                    "2": "unused3",
                    "3": "unused_param_3",
                    "9": "mask"
                },
                "uVar1": {
                    "1": "highest_bit",
                    "2": "upper_bit",
                    "4": "sign_bit"
                },
                "uVar2": {
                    "1": "tmp",
                    "2": "shifted_input",
                    "3": "temp",
                    "5": "temp1"
                },
                "uVar3": {
                    "1": "result_flag",
                    "12": "result",
                    "3": "result_upper"
                },
                "uVar4": {
                    "1": "var2",
                    "10": "shift_amount",
                    "2": "shifted",
                    "9": "shifted_input"
                },
                "uVar5": {
                    "1": "modified_value",
                    "2": "temp_value2",
                    "4": "temp2",
                    "5": "shifted_input"
                },
                "uVar7": {
                    "1": "difference",
                    "2": "shift",
                    "3": "shifted_amount",
                    "4": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nulonglong reverse_bits_08000418(uint input,undefined4 unused_param,undefined4 unused_param_2,uint mask)\n\n{\n  uint sign_bit;\n  uint temp1;\n  uint result;\n  uint shift_amount;\n  uint shifted_input;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input = input << 1;\n  is_zero = shifted_input == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shift_amount = (uint)((int)shifted_input >> 3) >> 1;\n  result = sign_bit | shift_amount;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = shifted_input & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  shifted_input = shift_amount;\n  if (shift_amount == 0) {\n    temp1 = 0;\n    shifted_input = input;\n  }\n  bit_count = leading_zeroes_count(shifted_input);\n  if (shift_amount == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = SBORROW4(shift_amount,0x20);\n  shift_amount = bit_count - 0x2b;\n  is_zero = (int)shift_amount < 0;\n  is_negative = shift_amount == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = SCARRY4(shift_amount,0xc);\n    bit_count = bit_count + -0x1f;\n    is_zero = bit_count < 0;\n    is_negative = bit_count == 0;\n    shift_amount = shift_amount;\n    if (!is_negative && is_zero == is_negative) {\n      temp1 = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - bit_count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_negative || is_zero != is_negative) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  shifted_input = shifted_input << (shift_amount & 0xff);\n  if (is_negative || is_zero != is_negative) {\n    shifted_input = shifted_input | temp1 >> (remaining_bits & 0xff);\n  }\n  if (is_negative || is_zero != is_negative) {\n    temp1 = temp1 << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - shift_amount) * 0x100000 | sign_bit,temp1);\n  }\n  shift_amount = ~(0x380 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(result,shifted_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shift_amount - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | shifted_input >> (shift_amount & 0xff),\n                    temp1 >> (shift_amount & 0xff) | shifted_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(result,temp1 >> (0x20 - (0xcU - bit_count) & 0xff) | shifted_input << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08000418",
            "entrypoint": "0x08000418",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000418": "reverse_bits_08000418",
                "LZCOUNT": "leading_zeroes_count",
                "bVar10": "is_negative",
                "bVar8": "is_negative",
                "bVar9": "is_zero",
                "iVar6": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "mask",
                "uVar1": "sign_bit",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shift_amount",
                "uVar5": "shifted_input",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004c8": {
            "additional_data": {
                "FUN_080004c8": {
                    "1": "calculate_multiply_add",
                    "17": "calculate_result",
                    "2": "calculate_value",
                    "7": "calculate_product"
                },
                "bVar10": {
                    "1": "carry_flag",
                    "14": "flag2",
                    "3": "is_negative",
                    "6": "condition2"
                },
                "bVar11": {
                    "1": "bool_var3",
                    "14": "flag3",
                    "6": "condition3"
                },
                "bVar9": {
                    "1": "boolean1",
                    "14": "flag1",
                    "5": "is_zero",
                    "6": "condition1"
                },
                "iVar5": {
                    "1": "tmp3",
                    "2": "var2",
                    "3": "temp_var3",
                    "4": "temp5",
                    "7": "temp3"
                },
                "lVar2": {
                    "1": "temp_var1",
                    "2": "temp_result",
                    "4": "temp2",
                    "7": "result2",
                    "8": "temp"
                },
                "param_1": {
                    "1": "first_param",
                    "20": "input1",
                    "3": "value1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "second_param",
                    "20": "input2",
                    "3": "value2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "20": "input3",
                    "3": "value3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "fourth_param",
                    "20": "input4",
                    "3": "value4",
                    "4": "input_4"
                },
                "reverse_bits_080006a4": {
                    "6": "reverse_bits"
                },
                "uVar1": {
                    "1": "product",
                    "15": "result",
                    "4": "temp1",
                    "7": "result1"
                },
                "uVar12": {
                    "1": "concatenated",
                    "2": "combined_params",
                    "3": "combined_inputs",
                    "9": "combined_input"
                },
                "uVar3": {
                    "1": "var13",
                    "2": "mask1",
                    "3": "temp_var1",
                    "4": "temp3",
                    "7": "temp1"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "u_var4",
                    "3": "var2",
                    "4": "temp4",
                    "7": "temp2"
                },
                "uVar6": {
                    "1": "temp_variable4",
                    "2": "u_var6",
                    "3": "temp_var4",
                    "4": "temp6",
                    "7": "temp4"
                },
                "uVar7": {
                    "1": "temp_var4",
                    "2": "u_var7",
                    "3": "temp2",
                    "4": "temp8"
                },
                "uVar8": {
                    "1": "temp_var8",
                    "2": "temp_var7",
                    "3": "temp3",
                    "4": "temp9"
                },
                "unaff_r5": {
                    "1": "unaff_r5",
                    "2": "temp_var5",
                    "4": "temp7"
                }
            },
            "called": [
                "FUN_080006a4"
            ],
            "calling": [
                "FUN_080096e0",
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08004d78"
            ],
            "code": "\nulonglong calculate_result_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = reverse_bits();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result >> 0x20);\n    temp7 = (uint)combined_input;\n    temp = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)temp;\n    temp1 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      temp = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input3 = (uint)temp << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_080004c8",
            "entrypoint": "0x080004c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "temp",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_080006a4": "reverse_bits",
                "uVar1": "result",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006a4": {
            "additional_data": {
                "FUN_080006a4": {
                    "1": "calculate_bitwise_xor",
                    "2": "calculate_result",
                    "7": "reverse_bits"
                },
                "bVar4": {
                    "1": "is_flag_set",
                    "2": "flag_1",
                    "21": "is_zero"
                },
                "in_r12": {
                    "1": "bit_mask",
                    "2": "temp2",
                    "4": "temp5",
                    "5": "temp_2"
                },
                "param_1": {
                    "1": "first_parameter",
                    "13": "input1",
                    "14": "input_1",
                    "2": "num1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "13": "input2",
                    "14": "input_2",
                    "2": "num2"
                },
                "param_3": {
                    "1": "value_3",
                    "13": "input3",
                    "14": "input_3",
                    "2": "num3"
                },
                "param_4": {
                    "1": "fourth_parameter",
                    "13": "input4",
                    "14": "input_4",
                    "2": "num4"
                },
                "return": {
                    "2": "result"
                },
                "uVar1": {
                    "1": "flag2",
                    "2": "temp2",
                    "4": "bit1",
                    "5": "temp_3"
                },
                "uVar2": {
                    "1": "temp4",
                    "2": "bit2",
                    "3": "bit_2",
                    "5": "temp_4",
                    "6": "temp3"
                },
                "uVar3": {
                    "1": "result_num",
                    "2": "bit_3",
                    "5": "temp4"
                },
                "unaff_r4": {
                    "1": "bit_check_2",
                    "2": "bit_2",
                    "3": "temp2",
                    "4": "temp1",
                    "7": "temp_1"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004c8"
            ],
            "code": "\nulonglong reverse_bits_080006a4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_3;\n  uint temp_1;\n  uint temp3;\n  uint temp_5;\n  uint temp_2;\n  bool is_zero;\n  \n  temp3 = temp_2 & input_4 >> 0x14;\n  if (temp_1 != temp_2 && temp3 != temp_2) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_1 == 0) {\n      temp_5 = input_2 & 0x80000000;\n      do {\n        temp_3 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_3 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_5;\n      if (temp3 != 0) {\n        result CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    result CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_5 = input_2;\n  if (((!is_zero) && ((temp_1 != temp_2 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp3 != temp_2 || (input_1 = input_3, temp_5 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    result (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result CONCAT44(temp_5,input_1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_080006a4",
            "entrypoint": "0x080006a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080006a4": "reverse_bits_080006a4",
                "bVar4": "is_zero",
                "in_r12": "temp_2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "return": "result",
                "uVar1": "temp_3",
                "uVar2": "temp3",
                "uVar3": "temp_5",
                "unaff_r4": "temp_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800071c": {
            "additional_data": {
                "FUN_0800071c": {
                    "1": "calculate_floating_point_value",
                    "15": "calculate_floating_point",
                    "2": "calculate_float"
                },
                "F_FUN_0800071c": {
                    "1": "calculate_value"
                },
                "bVar14": {
                    "1": "is_zero_bit",
                    "3": "is_zero1",
                    "4": "condition1",
                    "7": "is_zero",
                    "9": "flag1"
                },
                "bVar15": {
                    "1": "is_cond2_met",
                    "3": "is_zero2",
                    "4": "condition2",
                    "6": "is_equal",
                    "9": "flag2"
                },
                "bVar16": {
                    "1": "overflow1",
                    "2": "overflow",
                    "3": "condition3",
                    "9": "flag3"
                },
                "bVar17": {
                    "1": "is_cond4_met"
                },
                "iVar8": {
                    "1": "shift",
                    "11": "difference",
                    "14": "temp8"
                },
                "param_1": {
                    "1": "input_param",
                    "15": "input1",
                    "2": "num1",
                    "5": "sign"
                },
                "param_2": {
                    "1": "input1",
                    "15": "input2",
                    "2": "num2",
                    "5": "exponent"
                },
                "param_3": {
                    "1": "third_input_param",
                    "15": "input3",
                    "2": "num3"
                },
                "param_4": {
                    "1": "significand2",
                    "15": "input4",
                    "2": "num4"
                },
                "reverse_bits_0800088a": {
                    "3": "reverse_bits"
                },
                "uVar1": {
                    "1": "bit0",
                    "14": "temp1",
                    "2": "bit_mask"
                },
                "uVar10": {
                    "1": "temp10",
                    "13": "temp11",
                    "2": "temp3"
                },
                "uVar11": {
                    "1": "value2",
                    "13": "temp12",
                    "2": "result"
                },
                "uVar12": {
                    "1": "difference2",
                    "13": "temp13",
                    "2": "temp4"
                },
                "uVar13": {
                    "1": "temp13",
                    "13": "temp14",
                    "2": "temp4"
                },
                "uVar17": {
                    "1": "combined",
                    "11": "result",
                    "2": "concatenated_value",
                    "4": "reversed_bits"
                },
                "uVar18": {
                    "1": "result1"
                },
                "uVar19": {
                    "1": "result2"
                },
                "uVar2": {
                    "1": "sign_bits",
                    "14": "temp2",
                    "2": "bit_mask"
                },
                "uVar20": {
                    "1": "result3"
                },
                "uVar21": {
                    "1": "result4"
                },
                "uVar3": {
                    "1": "bit_mask3",
                    "14": "temp3",
                    "3": "bit_mask"
                },
                "uVar4": {
                    "1": "bits4",
                    "14": "temp4",
                    "2": "bit_mask"
                },
                "uVar5": {
                    "1": "bit4",
                    "15": "temp5",
                    "2": "bit_mask"
                },
                "uVar6": {
                    "1": "bit",
                    "15": "temp6",
                    "2": "bit_mask"
                },
                "uVar7": {
                    "1": "temporary7",
                    "15": "temp7",
                    "2": "bit_mask"
                },
                "uVar9": {
                    "1": "calculation1",
                    "14": "temp9",
                    "3": "exponent"
                },
                "unaff_r5": {
                    "1": "unaff_r5",
                    "13": "temp10",
                    "2": "temp2"
                }
            },
            "called": [
                "FUN_0800088a"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nulonglong calculate_floating_point_0800071c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = reverse_bits();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_0800071c",
            "entrypoint": "0x0800071c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "temp8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_0800088a": "reverse_bits",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800088a": {
            "additional_data": {
                "FUN_0800088a": {
                    "1": "parse_floating_point",
                    "2": "calculate_float",
                    "3": "reverse_binary_operation",
                    "4": "convert_to_double",
                    "7": "reverse_bits"
                },
                "bVar4": {
                    "1": "temp_b_var4",
                    "2": "flag",
                    "23": "is_zero"
                },
                "in_r12": {
                    "1": "constant_val",
                    "2": "temp4",
                    "5": "bit5"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input1",
                    "2": "input_a",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "significand_part",
                    "13": "input2",
                    "2": "value2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "13": "input3",
                    "2": "value3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "bits4",
                    "13": "input4",
                    "2": "value4",
                    "4": "input_4"
                },
                "uVar1": {
                    "1": "bit1_result",
                    "13": "bit1",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "1": "masked1",
                    "2": "temp3",
                    "3": "temp2",
                    "4": "bit3",
                    "6": "bit2"
                },
                "uVar3": {
                    "1": "temp1",
                    "2": "temp4",
                    "3": "temp3",
                    "4": "bit4"
                },
                "unaff_r4": {
                    "1": "bit_2",
                    "2": "temp_var2",
                    "6": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800071c"
            ],
            "code": "\nulonglong reverse_bits_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit2;\n  uint bit4;\n  uint mask;\n  bool is_zero;\n  \n  bit2 = mask & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != mask || bit2 != mask) {\n    if (bit2 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit2 != mask)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == mask) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_0800088a",
            "entrypoint": "0x0800088a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800088a": "reverse_bits_0800088a",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit4",
                "unaff_r4": "bit2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008fc": {
            "additional_data": {
                "<<": {
                    "1": "left_shift"
                },
                ">>": {
                    "1": "right_shift"
                },
                "FUN_080008fc": {
                    "1": "check_values",
                    "2": "check_params_equality",
                    "3": "check_conditions",
                    "4": "compare_parameters",
                    "6": "check_equality",
                    "8": "check_parameters"
                },
                "bVar2": {
                    "1": "is_zero1",
                    "17": "is_zero",
                    "2": "is_equal"
                },
                "bVar3": {
                    "1": "is_result_zero",
                    "2": "comparison_result",
                    "3": "is_less_or_equal",
                    "9": "is_negative"
                },
                "int": {
                    "1": "signed_int"
                },
                "param_1": {
                    "1": "num1",
                    "12": "value1",
                    "2": "a",
                    "3": "input1",
                    "4": "value_1",
                    "6": "first_param"
                },
                "param_2": {
                    "1": "input_value_2",
                    "12": "value2",
                    "2": "input_2",
                    "3": "input2",
                    "4": "value_2",
                    "6": "second_param"
                },
                "param_3": {
                    "1": "num3",
                    "12": "value3",
                    "2": "c",
                    "3": "input3",
                    "4": "value_3",
                    "6": "third_param"
                },
                "param_4": {
                    "1": "num4",
                    "12": "value4",
                    "2": "d",
                    "3": "input4",
                    "4": "value_4",
                    "6": "fourth_param"
                },
                "uVar1": {
                    "1": "temp1",
                    "19": "result",
                    "3": "temp",
                    "8": "xor_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000988"
            ],
            "code": "\nusigned_int check_parameters_080008fc(usigned_int value1,usigned_int value2,usigned_int value3,usigned_int value4)\n\n{\n  usigned_int result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((signed_int)(value2 << 1) >> 0x15 == -1 || (signed_int)(value4 << 1) >> 0x15 == -1) &&\n     ((((signed_int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((signed_int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (signed_int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (signed_int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (signed_int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_parameters_080008fc",
            "entrypoint": "0x080008fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "int": "signed_int",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000978": {
            "additional_data": {
                "FUN_08000978": {
                    "1": "perform_comparison",
                    "15": "compare_floats",
                    "2": "compare_and_return",
                    "4": "compare_floating_point_values",
                    "6": "compare_floating_point_numbers"
                },
                "FUN_08000988": {
                    "1": "get_next_value"
                },
                "__aeabi_cdcmpeq": {
                    "1": "floating_point_numbers_equal"
                },
                "param_1": {
                    "1": "result1",
                    "15": "result",
                    "2": "comparison_result",
                    "3": "arg1",
                    "5": "value1"
                },
                "param_2": {
                    "1": "length",
                    "2": "comparison_result",
                    "3": "arg2",
                    "4": "status",
                    "5": "value2"
                },
                "param_3": {
                    "1": "input_a",
                    "2": "float_1",
                    "8": "value1"
                },
                "param_4": {
                    "1": "value_2",
                    "2": "value4",
                    "8": "value2"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "code": "\nvoid compare_floats_08000978(undefined4 result,undefined4 value2,undefined4 float1,undefined4 float2)\n\n{\n  floating_point_numbers_equal(float1,float2,result,value2);\n  return;\n}\n\n",
            "current_name": "compare_floats_08000978",
            "entrypoint": "0x08000978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000978": "compare_floats_08000978",
                "__aeabi_cdcmpeq": "floating_point_numbers_equal",
                "param_1": "result",
                "param_2": "value2",
                "param_3": "float1",
                "param_4": "float2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000988": {
            "additional_data": {
                "FUN_080008fc": {
                    "1": "perform_arithmetic_operation",
                    "2": "perform_operation",
                    "7": "perform_calculation"
                },
                "FUN_08000988": {
                    "1": "perform_nedf2",
                    "2": "calculate_result",
                    "3": "process_input",
                    "4": "convert_float_to_undefined",
                    "9": "convert_to_float"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_param",
                    "3": "param1",
                    "7": "value1",
                    "9": "input_value"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "value1",
                    "3": "operand2",
                    "7": "value2"
                },
                "param_3": {
                    "1": "num3",
                    "2": "value2",
                    "3": "operand3",
                    "7": "value3"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "value3",
                    "3": "operand4",
                    "7": "value4"
                }
            },
            "called": [
                "FUN_080008fc"
            ],
            "calling": [
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_080009ac",
                "FUN_08000978"
            ],
            "code": "\nundefined4 convert_to_float_08000988(undefined4 input_value)\n\n{\n  __nedf2();\n  return input_value;\n}\n\n",
            "current_name": "convert_to_float_08000988",
            "entrypoint": "0x08000988",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000988": "convert_to_float_08000988",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000998": {
            "additional_data": {
                "FUN_08000998": {
                    "1": "is_comparison_result_true",
                    "3": "check_equality",
                    "5": "check_condition",
                    "6": "check_if_not_zero"
                },
                "in_ZR": {
                    "1": "input_character",
                    "16": "result",
                    "3": "input_char",
                    "4": "is_not_zero"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_not_zero_08000998(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_not_zero_08000998",
            "entrypoint": "0x08000998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000998": "check_if_not_zero_08000998",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009ac": {
            "additional_data": {
                "FUN_08000988": {
                    "1": "reverse_bytes"
                },
                "FUN_080009ac": {
                    "1": "is_equal_to_null",
                    "2": "check_if_cy_is_null",
                    "3": "check_if_zero",
                    "5": "check_if_null"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_cy",
                    "2": "compare_floats"
                },
                "in_CY": {
                    "1": "input_cy",
                    "10": "input_char",
                    "12": "input_character",
                    "2": "carry_flag"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_null_080009ac(void)\n\n{\n  char input_character;\n  \n  compare_floats();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_null_080009ac",
            "entrypoint": "0x080009ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009ac": "check_if_null_080009ac",
                "__aeabi_cdcmpeq": "compare_floats",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c0": {
            "additional_data": {
                "FUN_08000988": {
                    "1": "subtract"
                },
                "FUN_080009c0": {
                    "1": "check_zero_or_equal",
                    "11": "check_equality",
                    "2": "check_equality_condition"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_floats"
                },
                "in_CY": {
                    "1": "is_equal",
                    "15": "carry_flag",
                    "2": "carry",
                    "6": "is_carry_set"
                },
                "in_ZR": {
                    "1": "is_zero_set",
                    "3": "is_zero",
                    "5": "zero_result",
                    "7": "is_zero_result",
                    "9": "zero_flag"
                },
                "param_1": {
                    "1": "input",
                    "2": "input_value"
                },
                "undefined in_CY": {
                    "1": "is_carry_set"
                },
                "undefined in_ZR": {
                    "1": "is_zero_result"
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nbool check_equality_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  compare_floats();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_equality_080009c0",
            "entrypoint": "0x080009c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c0": "check_equality_080009c0",
                "__aeabi_cdcmpeq": "compare_floats",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009d4": {
            "additional_data": {
                "FUN_08000978": {
                    "1": "perform_operation",
                    "2": "process_data"
                },
                "FUN_080009d4": {
                    "1": "check_if_less_than_or_equal_to_zero",
                    "3": "check_comparison_result",
                    "4": "check_conditions",
                    "6": "check_condition"
                },
                "in_CY": {
                    "1": "is_carry_return",
                    "12": "is_carry",
                    "2": "is_less_than_or_equal",
                    "4": "is_carry_set"
                },
                "in_ZR": {
                    "1": "is_zero_return",
                    "12": "is_zero",
                    "2": "zero_flag",
                    "8": "is_zero_result"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "arg1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "arg2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "arg4"
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nbool check_condition_080009d4(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "current_name": "check_condition_080009d4",
            "entrypoint": "0x080009d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009d4": "check_condition_080009d4",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009e8": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "check_if_null_character"
                },
                "FUN_08000978": {
                    "1": "sub_function",
                    "2": "process_data"
                },
                "FUN_080009e8": {
                    "1": "is_null",
                    "2": "is_cy_null",
                    "3": "check_if_null_character",
                    "4": "is_null_terminated"
                },
                "NULL": {
                    "1": "in_cy"
                },
                "__aeabi_cdrcmple": {
                    "1": "compare"
                },
                "in_CY": {
                    "1": "is_null",
                    "13": "input_char",
                    "2": "cy_value",
                    "4": "character",
                    "8": "input_character"
                },
                "param_1": {
                    "1": "arg1"
                },
                "param_2": {
                    "1": "arg2"
                },
                "param_3": {
                    "1": "arg3"
                },
                "param_4": {
                    "1": "arg4"
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool is_null_terminated_080009e8(void)\n\n{\n  char input_char;\n  \n  compare_float();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "is_null_terminated_080009e8",
            "entrypoint": "0x080009e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009e8": "is_null_terminated_080009e8",
                "__aeabi_cdrcmple": "compare_float",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009fc": {
            "additional_data": {
                "FUN_080009fc": {
                    "1": "calculate_modified_value",
                    "2": "compute_floating_point",
                    "4": "calculate_floating_point_value",
                    "5": "calculate_float",
                    "8": "calculate_floating_point"
                },
                "SCARRY4": {
                    "1": "check_carry",
                    "2": "is_overflow"
                },
                "bVar4": {
                    "1": "is_result_zero",
                    "27": "is_zero"
                },
                "bVar5": {
                    "1": "flag2",
                    "2": "is_valid",
                    "5": "is_less_than_threshold",
                    "7": "is_less_than"
                },
                "in_r12": {
                    "1": "limit",
                    "2": "temp_value",
                    "7": "temp3"
                },
                "param_1": {
                    "1": "value1",
                    "2": "input_float",
                    "3": "value",
                    "8": "input1"
                },
                "param_2": {
                    "1": "shift_amount",
                    "2": "input_flag",
                    "5": "multiplier",
                    "8": "input2"
                },
                "uVar1": {
                    "1": "result1",
                    "30": "result"
                },
                "uVar2": {
                    "1": "double_multiplier",
                    "10": "temp1",
                    "2": "shifted_value"
                },
                "uVar3": {
                    "1": "adjusted_float",
                    "10": "temp2",
                    "2": "sum",
                    "4": "adjusted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_floating_point_080009fc(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = input2 * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != is_overflow(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_floating_point_080009fc",
            "entrypoint": "0x080009fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_080009fc",
                "SCARRY4": "is_overflow",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "in_r12": "temp3",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "additional_data": {
                "FUN_08000aa4": {
                    "1": "compute_approximation",
                    "2": "reverse_bits",
                    "5": "calculate_floating_point",
                    "7": "calculate_float"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "bVar8": {
                    "1": "is_shifted",
                    "10": "is_equal",
                    "2": "is_zero",
                    "4": "is_condition_met",
                    "5": "is_true"
                },
                "iVar1": {
                    "1": "left_bits",
                    "2": "shifted_a",
                    "3": "shifted_input",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "upper_bits_shifted",
                    "2": "shifted_b",
                    "4": "shifted_input2"
                },
                "param_1": {
                    "1": "value1",
                    "2": "input_a",
                    "3": "input_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "divisor",
                    "3": "input_2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "constant_param",
                    "2": "constant_value",
                    "3": "param_3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "divisor_sign",
                    "2": "shift",
                    "4": "result",
                    "7": "input4"
                },
                "uVar10": {
                    "1": "modified_masked_input2"
                },
                "uVar3": {
                    "1": "bitwise_xor_result1",
                    "2": "temp1"
                },
                "uVar4": {
                    "1": "result",
                    "2": "temp2"
                },
                "uVar5": {
                    "1": "shifted_input1_times2",
                    "2": "shifted_input1",
                    "3": "shifted_input_1",
                    "4": "result"
                },
                "uVar6": {
                    "1": "adjusted_shift_amount",
                    "2": "adjusted_shifted_input1"
                },
                "uVar7": {
                    "1": "temp_var4",
                    "2": "exponent_difference",
                    "22": "difference"
                },
                "uVar9": {
                    "1": "modified_masked_input1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_float_08000aa4(uint input_value,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint xor_result;\n  uint result1;\n  uint result;\n  uint count;\n  uint difference;\n  bool is_equal;\n  \n  xor_result = input2 ^ 0x80000000;\n  result = input_value << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == input4;\n  }\n  shifted_input1 = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result = xor_result;\n      if (shifted_input1 == -1) {\n        result = input_value;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        xor_result = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (xor_result & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == xor_result;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input_value ^ xor_result) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input_value = xor_result;\n      }\n      return input_value;\n    }\n    if (input_value != xor_result) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      xor_result = input_value << 1;\n      if ((input_value & 0x80000000) != 0) {\n        xor_result = xor_result | 0x80000000;\n      }\n      return xor_result;\n    }\n    if (result < 0xfe000000) {\n      return input_value + 0x800000;\n    }\n    input_value = input_value & 0x80000000;\nLAB_08000bde:\n    return input_value | 0x7f800000;\n  }\n  result = result >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result;\n  is_equal = difference != 0;\n  count = result;\n  if (is_equal && result <= input4) {\n    count = result + difference;\n  }\n  if (is_equal && result <= input4) {\n    xor_result = xor_result ^ input_value;\n  }\n  if (is_equal && result <= input4) {\n    input_value = input_value ^ xor_result;\n  }\n  if (is_equal && result <= input4) {\n    xor_result = xor_result ^ input_value;\n  }\n  if (input4 < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_value;\n  }\n  result = input_value & 0xffffff | 0x800000;\n  if ((input_value & 0x80000000) != 0) {\n    result = -result;\n  }\n  result1 = xor_result & 0xffffff | 0x800000;\n  if ((xor_result & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (count == difference) {\n    result1 = result1 ^ 0x800000;\n    if (count == 0) {\n      result = result ^ 0x800000;\n      count = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input_value = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = result1 != 0;\n    result1 = -result1;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    xor_result = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result = result * 2 + (uint)(xor_result != 0);\n    xor_result = count - 2;\n    if ((result & 0x800000) == 0) {\n      difference = leading_zero_count(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)xor_result < (int)difference) {\n        result = result >> (-(xor_result - difference) & 0xff);\n      }\n      else {\n        result = result + (xor_result - difference) * 0x800000;\n      }\n      return result | input_value;\n    }\n  }\n  else {\n    xor_result = count - 1;\n    if (0xffffff < result) {\n      xor_result = result & 1;\n      result = result >> 1;\n      result1 = (uint)(xor_result != 0) << 0x1f | result1 >> 1;\n      xor_result = count;\n      if (0xfd < count) goto LAB_08000bde;\n    }\n  }\n  result = result + xor_result * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input_value;\n}\n\n",
            "current_name": "calculate_float_08000aa4",
            "entrypoint": "0x08000aa4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa4": "calculate_float_08000aa4",
                "LZCOUNT": "leading_zero_count",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input_value",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "xor_result",
                "uVar4": "result1",
                "uVar5": "result",
                "uVar6": "count",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "additional_data": {
                "FUN_08000aa8": {
                    "1": "calculate_result",
                    "11": "calculate_float",
                    "9": "calculate_floating_point"
                },
                "LZCOUNT": {
                    "1": "leading_zeros",
                    "3": "leading_zero_count"
                },
                "bVar7": {
                    "1": "is_shifted_zero",
                    "11": "is_equal",
                    "2": "is_condition_met",
                    "8": "is_zero"
                },
                "calculate_float": {
                    "1": "calculate_float"
                },
                "difference": {
                    "1": "difference"
                },
                "iVar1": {
                    "1": "exponent_x",
                    "6": "shifted_input1"
                },
                "iVar2": {
                    "1": "sign_shifted_input2",
                    "2": "shift2",
                    "6": "shifted_input2"
                },
                "input_value1": {
                    "1": "input_value1"
                },
                "input_value2": {
                    "1": "input_value2"
                },
                "is_condition_met": {
                    "1": "is_condition_met"
                },
                "param1": {
                    "1": "input1"
                },
                "param2": {
                    "1": "input2"
                },
                "param3": {
                    "1": "input3"
                },
                "param4": {
                    "1": "input4"
                },
                "param_1": {
                    "1": "input_value1",
                    "10": "input1",
                    "2": "num1",
                    "3": "input_1"
                },
                "param_2": {
                    "1": "end",
                    "10": "input2",
                    "2": "value2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "input_value1",
                    "2": "param_3",
                    "3": "param3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "input_result",
                    "2": "exponent",
                    "3": "w",
                    "9": "input4"
                },
                "shifted_input1": {
                    "1": "shifted_input1"
                },
                "shifted_input1_copy": {
                    "1": "shifted_input1_copy"
                },
                "shifted_input2": {
                    "1": "shifted_input2"
                },
                "sign_input1": {
                    "1": "sign_input1"
                },
                "sign_input2": {
                    "1": "sign_input2"
                },
                "uVar3": {
                    "1": "mantissa_num1",
                    "3": "result_1",
                    "4": "result1"
                },
                "uVar4": {
                    "1": "float1_shifted",
                    "3": "result_2",
                    "4": "shifted_input1"
                },
                "uVar5": {
                    "1": "updated_shifted_input1",
                    "2": "temp1",
                    "3": "temp2"
                },
                "uVar6": {
                    "1": "zero_bits_num2",
                    "2": "temp2",
                    "3": "temp3",
                    "9": "difference"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nuint calculate_float_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint shifted_input1;\n  uint iteration_count;\n  uint difference;\n  bool is_equal;\n  \n  shifted_input1 = input1 << 1;\n  is_equal = shifted_input1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input1 == input4;\n  }\n  shifted_input1 = (int)shifted_input1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      shifted_input1 = input2;\n      if (shifted_input1 == -1) {\n        shifted_input1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = shifted_input1;\n      }\n      is_equal = (shifted_input1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input2 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input1 == input2;\n      }\n      if (!is_equal) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      shifted_input1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shifted_input1 = shifted_input1 | 0x80000000;\n      }\n      return shifted_input1;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input1;\n  is_equal = difference != 0;\n  iteration_count = shifted_input1;\n  if (is_equal && shifted_input1 <= input4) {\n    iteration_count = shifted_input1 + difference;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shifted_input1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (iteration_count == difference) {\n    result1 = result1 ^ 0x800000;\n    if (iteration_count == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      iteration_count = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    is_equal = result1 != 0;\n    result1 = -result1;\n    shifted_input1 = -shifted_input1 - (uint)is_equal;\n  }\n  if (shifted_input1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(difference != 0);\n    difference = iteration_count - 2;\n    if ((shifted_input1 & 0x800000) == 0) {\n      iteration_count = leading_zero_count(shifted_input1) - 8;\n      shifted_input1 = shifted_input1 << (iteration_count & 0xff);\n      if ((int)difference < (int)iteration_count) {\n        shifted_input1 = shifted_input1 >> (-(difference - iteration_count) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (difference - iteration_count) * 0x800000;\n      }\n      return shifted_input1 | input1;\n    }\n  }\n  else {\n    difference = iteration_count - 1;\n    if (0xffffff < shifted_input1) {\n      difference = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = iteration_count;\n      if (0xfd < iteration_count) goto LAB_08000bde;\n    }\n  }\n  shifted_input1 = shifted_input1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input1;\n}\n\n",
            "current_name": "calculate_float_08000aa8",
            "entrypoint": "0x08000aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "shifted_input1",
                "uVar5": "iteration_count",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c08": {
            "additional_data": {
                "((int)uVar2 >> 0x1f)": {
                    "1": "is_negative"
                },
                "(0x20 - (uVar1 + 0x18) & 0xff)": {
                    "1": "bit_shift"
                },
                "(param_1 << (uVar2 & 0xff)) + (0U >> (0x20 - uVar2 & 0xff)) + (uint)(0x7fffffff < uVar4)": {
                    "1": "calculation2"
                },
                "(param_1 >> (0x20 - (uVar1 + 0x18) & 0xff))": {
                    "1": "shifted_value"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_zero_check"
                },
                "(uint)(0x7fffffff < uVar4)": {
                    "1": "is_overflow"
                },
                "FUN_08000c08": {
                    "1": "decode_value",
                    "2": "calculate_new_value",
                    "3": "reverse_bits"
                },
                "iVar3": {
                    "1": "result",
                    "7": "constant_value",
                    "9": "constant"
                },
                "param_1": {
                    "1": "value",
                    "11": "input_value",
                    "13": "input",
                    "2": "number"
                },
                "param_1 << (uVar2 & 0xff)": {
                    "1": "shifted_input"
                },
                "uVar1": {
                    "1": "output",
                    "13": "leading_zeros",
                    "2": "leading_zeroes",
                    "9": "result"
                },
                "uVar1 & 0xff": {
                    "1": "shift_mask"
                },
                "uVar1 & 0xfffffffe": {
                    "1": "adjusted_value"
                },
                "uVar1 & ~(uVar2 >> 0x1f)": {
                    "2": "result"
                },
                "uVar1 + 0x18": {
                    "1": "shift_value"
                },
                "uVar1 > 7": {
                    "2": "is_greater_than7"
                },
                "uVar1_combined": {
                    "1": "leading_zeros_combined"
                },
                "uVar1_complement": {
                    "1": "leading_zeros_complement"
                },
                "uVar1_condition": {
                    "1": "leading_zeros_condition"
                },
                "uVar1_final": {
                    "1": "leading_zeros_final"
                },
                "uVar1_final_result": {
                    "1": "leading_zeros_final_result"
                },
                "uVar1_final_result_cleared": {
                    "1": "leading_zeros_final_result_cleared"
                },
                "uVar1_final_result_final": {
                    "1": "leading_zeros_final_result_final"
                },
                "uVar1_initial": {
                    "1": "leading_zeros_initial"
                },
                "uVar1_masked": {
                    "1": "leading_zeros_masked"
                },
                "uVar1_masked_result": {
                    "1": "leading_zeros_masked_result"
                },
                "uVar1_masked_shifted": {
                    "1": "leading_zeros_masked_shifted"
                },
                "uVar1_minus_8": {
                    "1": "difference"
                },
                "uVar1_offset": {
                    "1": "leading_zeros_offset"
                },
                "uVar1_plus_0x18": {
                    "1": "shift_count"
                },
                "uVar1_plus_0x18_minus_shiftCount": {
                    "1": "shift_difference"
                },
                "uVar1_shifted": {
                    "1": "leading_zeros_shifted"
                },
                "uVar1_signed_result": {
                    "1": "leading_zeros_signed_result"
                },
                "uVar1_signed_result_final": {
                    "1": "leading_zeros_signed_result_final"
                },
                "uVar1_truncated": {
                    "1": "leading_zeros_truncated"
                },
                "uVar1_updated": {
                    "1": "leading_zeros_updated"
                },
                "uVar2": {
                    "1": "shift_count",
                    "17": "shift_amount",
                    "2": "shifted_input",
                    "3": "shifted_value"
                },
                "uVar2 & 0x7fffffff": {
                    "1": "positive_mask"
                },
                "uVar2 & 0xff": {
                    "1": "shift_mask"
                },
                "uVar2 * -0x800000 + 0x4a800000": {
                    "1": "calculation1"
                },
                "uVar2 + 0x18": {
                    "1": "shift_amount"
                },
                "uVar2 << (uVar1 + 0x18)": {
                    "1": "shifted_value"
                },
                "uVar2 >> 0x1f": {
                    "1": "sign_extension2"
                },
                "uVar2_and_0x7fffffff": {
                    "1": "mask"
                },
                "uVar2_and_0x7fffffff_equal_to_0": {
                    "1": "is_neg_overflow_check"
                },
                "uVar2_complement": {
                    "1": "shift_amount_complement"
                },
                "uVar2_condition": {
                    "1": "shift_amount_condition"
                },
                "uVar2_final": {
                    "1": "final_shift_amount"
                },
                "uVar2_get_bit_31": {
                    "1": "sign_bit"
                },
                "uVar2_initial": {
                    "1": "shift_amount_initial"
                },
                "uVar2_masked": {
                    "1": "shift_amount_masked"
                },
                "uVar2_normalized": {
                    "1": "shift_amount_normalized"
                },
                "uVar2_offset": {
                    "1": "shift_amount_offset"
                },
                "uVar2_shifted": {
                    "1": "shift_amount_shifted"
                },
                "uVar2_shifted_right_by_31": {
                    "1": "sign_extension"
                },
                "uVar2_sign_bit": {
                    "1": "shift_amount_sign_bit"
                },
                "uVar2_sign_bit_cleared": {
                    "1": "shift_amount_sign_bit_cleared"
                },
                "uVar2_signed_result": {
                    "1": "shift_amount_signed_result"
                },
                "uVar2_signed_result_final": {
                    "1": "shift_amount_signed_result_final"
                },
                "uVar2_signed_truncated": {
                    "1": "shift_amount_signed_truncated"
                },
                "uVar2_temp": {
                    "1": "shift_amount_temp"
                },
                "uVar2_unsigned": {
                    "1": "shift_amount_unsigned"
                },
                "uVar2_updated": {
                    "1": "shift_amount_updated"
                },
                "uVar4": {
                    "1": "comparison_result",
                    "2": "bit_mask",
                    "3": "mask_value",
                    "9": "mask"
                },
                "uVar4 == 0": {
                    "1": "is_zero"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_temp_equal"
                },
                "uVar4_check": {
                    "1": "mask_check"
                },
                "uVar4_equal_to_0x80000000": {
                    "1": "is_neg_overflow"
                },
                "uVar5": {
                    "1": "shifted_input",
                    "2": "temp"
                },
                "uVar6": {
                    "1": "result"
                },
                "uVar7": {
                    "1": "final_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint reverse_bits_08000c08(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  leading_zeros = constant + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "reverse_bits_08000c08",
            "entrypoint": "0x08000c08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c08": "reverse_bits_08000c08",
                "iVar3": "constant",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c10": {
            "additional_data": {
                "FUN_08000c10": {
                    "1": "count_bits_shift",
                    "2": "reverse_bitwise_operation",
                    "5": "count_bits",
                    "6": "count_leading_zeros"
                },
                "FUn_08000c10": {
                    "1": "decode_unsigned_integer"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "iVar4": {
                    "1": "shifted_result",
                    "22": "result",
                    "3": "adjusted_value"
                },
                "param_1": {
                    "1": "num",
                    "17": "input",
                    "3": "input_number",
                    "4": "number"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "18": "leading_zeros",
                    "3": "count",
                    "5": "leading_zeroes"
                },
                "uVar1_1": {
                    "1": "zero_check"
                },
                "uVar2": {
                    "1": "shift_count",
                    "21": "shift_amount",
                    "4": "shift"
                },
                "uVar3": {
                    "1": "sign_mask",
                    "2": "result",
                    "20": "sign_bit",
                    "3": "sign"
                },
                "uVar3_1": {
                    "1": "temp"
                },
                "uVar3_2": {
                    "1": "temp2"
                },
                "uVar4": {
                    "1": "temp_1"
                },
                "uVar5": {
                    "1": "temp_2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "code": "\nuint count_leading_zeros_08000c10(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = leading_zero_count(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_leading_zeros_08000c10",
            "entrypoint": "0x08000c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c10": "count_leading_zeros_08000c10",
                "LZCOUNT": "leading_zero_count",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "additional_data": {
                "FUN_08000cb8": {
                    "1": "floating_point_addition",
                    "2": "calculate_floating_point_value",
                    "7": "calculate_floating_point",
                    "8": "calculate_float"
                },
                "bVar10": {
                    "1": "is_borrow",
                    "2": "is_carry_set",
                    "3": "condition2",
                    "6": "is_negative"
                },
                "bVar9": {
                    "1": "is_zero_byte1_input1",
                    "13": "is_zero",
                    "3": "is_zero1"
                },
                "iVar4": {
                    "1": "sum_of_exponents",
                    "11": "sum",
                    "2": "sum_of_shifted_inputs"
                },
                "iVar5": {
                    "1": "normalized_shift_val",
                    "2": "adjusted_sum",
                    "4": "difference"
                },
                "iVar7": {
                    "1": "normalized_shift_val2",
                    "2": "temp"
                },
                "iVar9": {
                    "1": "loop_counter"
                },
                "lVar1": {
                    "1": "result_long",
                    "3": "product"
                },
                "param_1": {
                    "1": "float_value1",
                    "15": "input1",
                    "2": "number1",
                    "5": "input_1",
                    "6": "value1"
                },
                "param_2": {
                    "1": "second_operand",
                    "14": "input2",
                    "2": "number2",
                    "5": "input_2",
                    "6": "value2"
                },
                "param_2_shifted": {
                    "1": "input2_shifted"
                },
                "param_3": {
                    "1": "size",
                    "11": "input3",
                    "2": "param_3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "value2",
                    "2": "param_4",
                    "4": "input_4",
                    "9": "input4"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "27": "result"
                },
                "uVar3": {
                    "1": "shift_val1",
                    "2": "shifted_bits"
                },
                "uVar6": {
                    "1": "number1_mantissa",
                    "2": "temp1",
                    "3": "mul_result",
                    "5": "product_low",
                    "8": "product"
                },
                "uVar8": {
                    "1": "result4",
                    "2": "final_result",
                    "3": "temp_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_float_08000cb8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint shifted_bits;\n  int sum;\n  int diff;\n  uint product;\n  int temp;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_bits = input1 >> 0x17 & 0xff;\n  is_zero = shifted_bits == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_bits == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shifted_bits == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((shifted_bits == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = shifted_bits == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      shifted_bits = shifted_bits - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shifted_bits + input4;\n  temp_result = input1 ^ input2;\n  shifted_bits = input1 << 9;\n  is_zero = shifted_bits == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (shifted_bits == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    is_zero = diff == 0;\n    temp = diff;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,diff);\n      temp = 0xff - diff;\n      is_zero = diff == 0xff;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      result = result | diff * 0x800000;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(diff,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    shifted_bits = temp_result;\n  }\n  else {\n    product = (ulonglong)(shifted_bits >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    shifted_bits = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)shifted_bits < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == SCARRY4(temp_result,0x19)) {\n      shifted_bits = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      shifted_bits = ((uint)((result & 0x80000000) != 0) << 0x1f | shifted_bits >> 1) + (uint)((byte)shifted_bits & 1);\n      if ((product | temp_result << 1) == 0) {\n        shifted_bits = shifted_bits & ~(temp_result >> 0x1f);\n      }\n      return shifted_bits;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_08000cb8",
            "entrypoint": "0x08000cb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cb8": "calculate_float_08000cb8",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "temp",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "shifted_bits",
                "uVar6": "product",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e20": {
            "additional_data": {
                ".iVar3: ": {
                    "1": "difference"
                },
                "FUN_08000e20": {
                    "1": "improved_floating_point_operation",
                    "11": "calculate_floating_point",
                    "5": "reverse_float",
                    "9": "calculate_float"
                },
                "bVar7": {
                    "1": "is_zero_a",
                    "3": "condition",
                    "6": "is_zero",
                    "8": "condition1",
                    "9": "flag1"
                },
                "bVar8": {
                    "1": "zero_or_equal2",
                    "2": "overflow_condition",
                    "9": "flag2"
                },
                "bVar9": {
                    "1": "is_borrow",
                    "2": "carry_condition",
                    "3": "carry",
                    "9": "condition3"
                },
                "iVar3": {
                    "1": "bit_difference",
                    "11": "difference",
                    "2": "exponent_difference",
                    "3": "diff",
                    "4": "exponent_diff",
                    "7": "temp3"
                },
                "iVar5": {
                    "1": "normalized_exponent",
                    "2": "adjusted_exponent",
                    "6": "sum",
                    "7": "temp5"
                },
                "param_1": {
                    "1": "input_a",
                    "12": "input1",
                    "2": "number1",
                    "3": "num1"
                },
                "param_2": {
                    "1": "value2",
                    "12": "input2",
                    "2": "number2",
                    "3": "num2"
                },
                "param_3": {
                    "1": "exponent_sign1",
                    "3": "unused_param",
                    "6": "input3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "shift_amount",
                    "2": "float3",
                    "5": "param4",
                    "6": "input4"
                },
                "uVar1": {
                    "1": "residual1",
                    "2": "quotient",
                    "9": "temp1"
                },
                "uVar2": {
                    "1": "shifted_num_b",
                    "2": "normalized_mantissa2",
                    "5": "exponent1",
                    "9": "temp2"
                },
                "uVar4": {
                    "1": "exponent_diff2",
                    "2": "temp3",
                    "3": "exponent2",
                    "7": "temp4"
                },
                "uVar6": {
                    "1": "result_shifted",
                    "2": "output",
                    "24": "result",
                    "4": "temp6"
                }
            },
            "called": [],
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_floating_point_08000e20(uint input1,uint input2,undefined4 param3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool flag1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    flag1 = input4 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = input4 == 0xff;\n  }\n  if (flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      flag1 = (input1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input1 = input1 << 1;\n            flag1 = (input1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        flag1 = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input2 = input2 << 1;\n            flag1 = (input2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = temp2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      temp5 = difference + 0x7f;\n      flag1 = temp5 < 0;\n      condition2 = temp5 == 0;\n      if (!condition2 && flag1 == condition3) {\n        condition3 = SBORROW4(0xff,temp5);\n        flag1 = 0xff - temp5 < 0;\n        condition2 = temp5 == 0xff;\n      }\n      if (!condition2 && flag1 == condition3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!condition2 && flag1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = SBORROW4(temp5,1);\n      temp4 = difference + 0x7e;\n      flag1 = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      flag1 = temp1 <= temp2;\n      if (!flag1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)flag1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        flag1 = temp1 >> 1 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (flag1) {\n          input1 = input1 | result >> 1;\n        }\n        flag1 = temp1 >> 2 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (flag1) {\n          input1 = input1 | result >> 2;\n        }\n        flag1 = temp1 >> 3 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (flag1) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        flag1 = temp2 == 0;\n        if (!flag1) {\n          result = result >> 4;\n          flag1 = result == 0;\n        }\n      } while (!flag1);\n      condition2 = SBORROW4(temp4,0xfd);\n      flag1 = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (flag1 || (int)result < 0 != condition2) {\n      flag1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_08000e20",
            "entrypoint": "0x08000e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_08000e20",
                "bVar7": "flag1",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "iVar3": "difference",
                "iVar5": "temp5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f68": {
            "additional_data": {
                "FUN_08000f68": {
                    "1": "validate_input",
                    "2": "check_integer_overflow",
                    "3": "calculate_result",
                    "8": "check_overflow"
                },
                "bVar1": {
                    "1": "is_positive",
                    "18": "is_negative",
                    "3": "is_overflow"
                },
                "bVar5": {
                    "1": "is_result_zero",
                    "2": "is_combined_value_zero",
                    "22": "is_zero",
                    "4": "is_zero_result"
                },
                "param_1": {
                    "1": "multiplier",
                    "12": "input_1",
                    "2": "input_value1",
                    "3": "result",
                    "4": "input1"
                },
                "param_1_doubled": {
                    "1": "input_1_doubled"
                },
                "param_2": {
                    "1": "result",
                    "12": "input_2",
                    "2": "output",
                    "3": "num2",
                    "4": "input2"
                },
                "param_2_doubled": {
                    "1": "input_2_doubled"
                },
                "return": {
                    "1": "result"
                },
                "uVar2": {
                    "1": "twice_input_param_1",
                    "2": "input_1_times_2",
                    "3": "input_1_doubled",
                    "4": "num1_doubled",
                    "5": "doubled_input_1"
                },
                "uVar3": {
                    "1": "second_input_times_two",
                    "2": "doubled_input_value2",
                    "3": "input_2_doubled",
                    "4": "num2_doubled",
                    "5": "doubled_input_2"
                },
                "uVar4": {
                    "1": "combined_num",
                    "2": "combined",
                    "3": "result",
                    "4": "combined_input",
                    "8": "combined_inputs"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000fd0"
            ],
            "code": "\nuint check_overflow_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_overflow_08000f68",
            "entrypoint": "0x08000f68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f68": "check_overflow_08000f68",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "additional_data": {
                "FUN_08000fc8": {
                    "1": "compare_params",
                    "16": "compare_floats",
                    "2": "compare_arguments",
                    "3": "compare_parameters"
                },
                "__aeabi_cfcmpeq": {
                    "1": "floating_point_equal"
                },
                "param_1": {
                    "1": "first_param",
                    "13": "value1",
                    "2": "first_parameter",
                    "3": "first_float",
                    "7": "float1"
                },
                "param_2": {
                    "1": "second_param",
                    "13": "value2",
                    "2": "arg2",
                    "3": "second_float",
                    "7": "float2"
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08001030"
            ],
            "code": "\nvoid compare_floats_08000fc8(undefined4 value1,undefined4 value2)\n\n{\n  compare_floats_08000fc8_helper(value2,value1);\n  return;\n}\n\n",
            "current_name": "compare_floats_08000fc8",
            "entrypoint": "0x08000fc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fc8": "compare_floats_08000fc8",
                "__aeabi_cfcmpeq": "compare_floats_helper",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "called": [
                "FUN_08000f68"
            ],
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "code": "\nundefined8 FUNC_08000fd0(undefined4 param_1,undefined4 param_2)\n\n{\n  __cmpsf2();\n  return CONCAT44(param_2,param_1);\n}\n\n",
            "current_name": "FUNC_08000fd0",
            "entrypoint": "0x08000fd0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08000fd0": "FUNC_08000fd0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08000ff4": {
            "additional_data": {
                "FUN_08000fd0": {
                    "1": "perform_operation"
                },
                "FUN_08000ff4": {
                    "1": "check_if_null_character",
                    "2": "check_if_in_cy_is_null",
                    "3": "check_if_cy_is_zero",
                    "4": "check_if_zero"
                },
                "__aeabi_cfcmpeq": {
                    "3": "compare_floats"
                },
                "in_CY": {
                    "1": "cy_char",
                    "2": "carry_flag",
                    "9": "input_character"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "arg1",
                    "3": "input_param_1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "arg2",
                    "3": "input_param_2"
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool check_if_zero_08000ff4(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_zero_08000ff4",
            "entrypoint": "0x08000ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ff4": "check_if_zero_08000ff4",
                "__aeabi_cfcmpeq": "compare_floats",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001030": {
            "additional_data": {
                "FUN_08000fc8": {
                    "1": "perform_operation"
                },
                "FUN_08001030": {
                    "1": "check_if_null_terminated",
                    "2": "check_if_null_character",
                    "3": "is_null_terminated",
                    "6": "check_if_null"
                },
                "__aeabi_cfrcmple": {
                    "1": "compare_floats"
                },
                "in_CY": {
                    "1": "cy_value",
                    "11": "input_character",
                    "14": "input_char",
                    "2": "character"
                }
            },
            "called": [
                "FUN_08000fc8"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool is_cy_null_08001030(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "is_cy_null_08001030",
            "entrypoint": "0x08001030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001030": "is_cy_null_08001030",
                "__aeabi_cfrcmple": "compare_floats",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001044": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "0x7f000000": {
                    "1": "threshold"
                },
                "0x7fffff": {
                    "1": "mask"
                },
                "0x80000000": {
                    "1": "msb"
                },
                "0x9e": {
                    "1": "shift_constant"
                },
                "0xffffff9f": {
                    "1": "special_case_value"
                },
                "<<": {
                    "1": "left_shift"
                },
                "==": {
                    "1": "equal_to"
                },
                ">>": {
                    "1": "right_shift"
                },
                "FUN_08001044": {
                    "1": "unsigned_int_to_shifted",
                    "2": "decode_integer",
                    "3": "calculate_shifted_value",
                    "4": "extract_bits",
                    "5": "reverse_bits"
                },
                "param_1": {
                    "1": "number",
                    "10": "input",
                    "18": "input_value"
                },
                "uVar1": {
                    "1": "result",
                    "17": "shift_amount",
                    "2": "shifted_value",
                    "4": "shift_count"
                },
                "|": {
                    "1": "bitwise_or"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint reverse_bits_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value bitwise_and 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount bitwise_and 0xff);\n  }\n  if ((shift_amount equal_to 0xffffff9f) bitwise_andbitwise_and ((input_value bitwise_and 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_bits_08001044",
            "entrypoint": "0x08001044",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "==": "equal_to",
                "FUN_08001044": "reverse_bits_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001084": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_3>": {
                    "1": "<new_parameter_name_3>"
                },
                "FUN_08001084": {
                    "1": "memcpy",
                    "2": "copy_data",
                    "25": "copy_memory",
                    "3": "copy_memory_block"
                },
                "LAB_08001108": {
                    "1": "copy_remaining_bytes"
                },
                "bVar6": {
                    "1": "is_count_positive",
                    "4": "loop_condition",
                    "6": "is_looping",
                    "7": "is_remaining"
                },
                "param_1": {
                    "24": "destination",
                    "7": "dest"
                },
                "param_2": {
                    "24": "source",
                    "7": "src"
                },
                "param_3": {
                    "1": "num_bytes",
                    "11": "length",
                    "19": "size"
                },
                "puVar1": {
                    "1": "dest_pointer",
                    "21": "dest_ptr",
                    "7": "dst_ptr"
                },
                "puVar2": {
                    "1": "dest_byte_ptr",
                    "2": "dst_end_ptr",
                    "4": "dest_ptr",
                    "5": "dest"
                },
                "puVar3": {
                    "1": "dest_ptr",
                    "14": "src_ptr",
                    "2": "temp_ptr",
                    "5": "src"
                },
                "uVar4": {
                    "1": "bytes_remaining",
                    "14": "remaining_size",
                    "2": "remaining",
                    "8": "remaining_length"
                },
                "uVar5": {
                    "1": "temp_length",
                    "2": "copy_length",
                    "3": "copy_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080097cc",
                "FUN_08009120"
            ],
            "code": "\nundefined4 * copy_memory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint copy_size;\n  bool is_remaining;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copy_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          is_remaining = copy_size != 0;\n          copy_size = copy_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (is_remaining);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto start_loop;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copy_size = 4 - ((uint)destination & 3);\n      size = size - copy_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((copy_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      is_remaining = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_remaining);\n  }\n  copy_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      is_remaining = 3 < copy_size;\n      copy_size = copy_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (is_remaining);\n  }\nstart_loop:\n  if (copy_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((copy_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((copy_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_08001084",
            "entrypoint": "0x08001084",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "LAB_08001108": "start_loop",
                "bVar6": "is_remaining",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001170": {
            "additional_data": {
                "FUN_08001170": {
                    "1": "is_valid_parameters",
                    "2": "validate_parameters",
                    "6": "check_params",
                    "9": "check_parameters"
                },
                "param_1": {
                    "1": "num1",
                    "10": "value1",
                    "4": "input1",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "flag2",
                    "2": "value_2",
                    "4": "input2",
                    "7": "input_2",
                    "9": "value2"
                },
                "param_3": {
                    "1": "num3",
                    "3": "value_3",
                    "4": "input3",
                    "7": "input_3",
                    "9": "value3"
                },
                "param_4": {
                    "1": "value2",
                    "2": "value_4",
                    "4": "input4",
                    "7": "input_4",
                    "9": "value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 check_parameters_08001170(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08001170",
            "entrypoint": "0x08001170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001170": "check_parameters_08001170",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800119c": {
            "additional_data": {
                "FUN_0800119c": {
                    "1": "convert_to_float",
                    "2": "convert_to_unsigned",
                    "3": "perform_calculation",
                    "4": "calculate_result"
                },
                "iVar2": {
                    "1": "shifted_double",
                    "2": "shifted_multiplier",
                    "3": "shifted_value"
                },
                "param_1": {
                    "1": "input_a",
                    "11": "input_value1",
                    "2": "dividend",
                    "6": "input1"
                },
                "param_2": {
                    "1": "clamped_value",
                    "10": "input_value2",
                    "2": "divisor",
                    "4": "multiplier",
                    "6": "input2"
                },
                "param_2 & 0x80000000": {
                    "1": "is_param2_negative"
                },
                "param_2_flag": {
                    "1": "negative_flag"
                },
                "param_2_modified": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "10": "result",
                    "2": "quotient",
                    "3": "final_result",
                    "4": "shifted_value"
                },
                "uVar1 & 0x80000000": {
                    "1": "is_negative"
                },
                "uVar1 & 0xff": {
                    "1": "mask"
                },
                "uVar1_shifted": {
                    "1": "processed_integer"
                },
                "uVar3": {
                    "1": "limit",
                    "2": "temp3",
                    "3": "difference"
                },
                "uVar4": {
                    "1": "shift_count"
                },
                "uVar5": {
                    "1": "result"
                },
                "uVar6": {
                    "1": "is_negative_dividend"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nuint calculate_result_0800119c(uint input_value1,uint input_value2)\n\n{\n  uint result;\n  int shifted_value;\n  uint difference;\n  \n  shifted_value = input_value2 * 2 + 0x200000;\n  if (input_value2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    result = shifted_value >> 0x15;\n    difference = -result - 0x3e1;\n    if (result < 0xfffffc20 && difference != 0) {\n      result = (input_value2 << 0xb | 0x80000000 | input_value1 >> 0x15) >> (difference & 0xff);\n      if ((input_value2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_value1 | input_value2 << 0xc) != 0) {\n    return 0;\n  }\n  input_value2 = input_value2 & 0x80000000;\n  if (input_value2 == 0) {\n    input_value2 = 0x7fffffff;\n  }\n  return input_value2;\n}\n\n",
            "current_name": "calculate_result_0800119c",
            "entrypoint": "0x0800119c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800119c": "calculate_result_0800119c",
                "iVar2": "shifted_value",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "uVar1": "result",
                "uVar3": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011ec": {
            "additional_data": {
                "FUN_080011ec": {
                    "1": "divide_and_concatenate",
                    "22": "calculate_result"
                },
                "__udivmoddi4": {
                    "1": "division_function",
                    "2": "perform_division"
                },
                "__udivmoddi4()": {
                    "1": "unsigned_division_modulo"
                },
                "param_1": {
                    "1": "input_value1",
                    "10": "input1",
                    "2": "first_param"
                },
                "param_2": {
                    "1": "value2",
                    "10": "input_2",
                    "2": "second_param"
                },
                "param_3": {
                    "1": "value_3",
                    "10": "input3",
                    "2": "third_param",
                    "8": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "10": "input4",
                    "2": "fourth_param",
                    "8": "input_4"
                },
                "uVar1": {
                    "28": "result"
                }
            },
            "called": [
                "FUN_0800121c"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_result_080011ec(int input_1,int input_2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return CONCAT44(input_2,input_1);\n  }\n  result = unsigned_division_modulo;\n  return result;\n}\n\n",
            "current_name": "calculate_result_080011ec",
            "entrypoint": "0x080011ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "__udivmoddi4": "divide_and_modulo",
                "__udivmoddi4()": "unsigned_division_modulo",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800121c": {
            "additional_data": {
                "CARRY4": {
                    "1": "check_for_carry"
                },
                "FUN_0800121c": {
                    "1": "divide_with_remainder",
                    "2": "divide_and_remainder",
                    "3": "calculate_remainder",
                    "4": "calculate_division_remainder",
                    "7": "perform_division"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "udf_function",
                    "2": "jump_table"
                },
                "bVar13": {
                    "1": "check_result",
                    "10": "carry",
                    "13": "carry_flag"
                },
                "bVar14": {
                    "2": "carry_flag"
                },
                "bVar15": {
                    "1": "carry_flag2"
                },
                "bVar16": {
                    "1": "carry_flag3"
                },
                "bVar17": {
                    "1": "carry_flag4"
                },
                "iVar15": {
                    "1": "shift_count"
                },
                "iVar5": {
                    "1": "shift_num",
                    "5": "shift_count",
                    "6": "shift"
                },
                "param_1": {
                    "1": "numerator",
                    "2": "input1",
                    "26": "dividend"
                },
                "param_2": {
                    "1": "input_num_2",
                    "2": "dividend_high",
                    "3": "dividend_lower",
                    "7": "dividend_low",
                    "9": "divisor"
                },
                "param_3": {
                    "1": "rate_divisor",
                    "20": "divisor",
                    "4": "quotient"
                },
                "param_4": {
                    "1": "rate_dividend",
                    "2": "divisor_high",
                    "3": "divisor_lower",
                    "5": "divisor_low",
                    "6": "remainder"
                },
                "param_5": {
                    "1": "quotient",
                    "12": "remainder",
                    "2": "output",
                    "5": "result",
                    "7": "remainder_ptr"
                },
                "puVar15": {
                    "1": "remainder_ptr"
                },
                "puVar16": {
                    "1": "is_null"
                },
                "puVar17": {
                    "1": "divisor_shifted"
                },
                "puVar9": {
                    "1": "result_pointer",
                    "2": "quotient"
                },
                "uVar1": {
                    "1": "quotient_product",
                    "2": "result",
                    "3": "product",
                    "5": "quotient"
                },
                "uVar10": {
                    "1": "partial_quotient_low",
                    "2": "quotient3",
                    "3": "temp5"
                },
                "uVar11": {
                    "1": "divisor_part",
                    "2": "temp5",
                    "3": "temp6"
                },
                "uVar12": {
                    "1": "temp9",
                    "2": "temp6",
                    "3": "temp7"
                },
                "uVar13": {
                    "1": "temp10"
                },
                "uVar14": {
                    "1": "output",
                    "12": "result",
                    "2": "return_val",
                    "8": "return_value"
                },
                "uVar18": {
                    "1": "shifted_divisor"
                },
                "uVar19": {
                    "1": "dividend_shifted"
                },
                "uVar2": {
                    "1": "temp_quotient",
                    "2": "quotient_upper",
                    "3": "quotient_low",
                    "4": "quotient1"
                },
                "uVar20": {
                    "1": "divisor_shifted"
                },
                "uVar21": {
                    "1": "divisor_div"
                },
                "uVar22": {
                    "1": "divisor_mult"
                },
                "uVar23": {
                    "1": "temp11"
                },
                "uVar24": {
                    "1": "temp12"
                },
                "uVar25": {
                    "1": "temp13"
                },
                "uVar26": {
                    "1": "temp14"
                },
                "uVar3": {
                    "1": "temp_quotient",
                    "2": "temp3",
                    "4": "quotient2",
                    "5": "temp1"
                },
                "uVar4": {
                    "1": "temp3",
                    "2": "temp4",
                    "4": "temp1"
                },
                "uVar5": {
                    "1": "shift_count",
                    "3": "temp2"
                },
                "uVar6": {
                    "1": "combined_quotient",
                    "11": "quotient",
                    "2": "result"
                },
                "uVar7": {
                    "1": "temp4",
                    "3": "temp1",
                    "4": "temp3"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "dividend_high",
                    "4": "temp4"
                },
                "uVar9": {
                    "1": "product3"
                }
            },
            "called": [],
            "calling": [
                "FUN_080011ec"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 perform_division_0800121c(uint dividend,uint divisor,uint divisor,uint remainder,uint *remainder)\n\n{\n  code *jump_table;\n  ulonglong quotient;\n  uint quotient1;\n  uint temp1;\n  uint temp1;\n  int shift;\n  uint quotient;\n  uint temp3;\n  uint temp4;\n  uint *quotient;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (remainder == 0) {\n    if (divisor < divisor) {\n      shift = leading_zero_count(divisor);\n      temp3 = divisor;\n      if (shift != 0) {\n        temp3 = divisor << shift;\n        divisor = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        dividend = dividend << shift;\n      }\n      temp6 = temp3 >> 0x10;\n      temp4 = divisor / temp6;\n      temp5 = temp4 * (temp3 & 0xffff);\n      quotient = dividend >> 0x10 | (divisor - temp6 * temp4) * 0x10000;\n      temp1 = temp4;\n      if (quotient <= temp5 && temp5 - quotient != 0) {\n        carry_flag = check_for_carry(temp3,quotient);\n        quotient = temp3 + quotient;\n        temp1 = temp4 - 1;\n        if ((carry_flag == false) && (quotient <= temp5 && temp5 - quotient != 0)) {\n          temp1 = temp4 - 2;\n          quotient = quotient + temp3;\n        }\n      }\n      quotient1 = (quotient - temp5) / temp6;\n      temp1 = quotient1 * (temp3 & 0xffff);\n      temp4 = dividend & 0xffff | ((quotient - temp5) - temp6 * quotient1) * 0x10000;\n      quotient = quotient1;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carry_flag = check_for_carry(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient = quotient1 - 1;\n        if ((carry_flag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient = quotient1 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n      quotient = (uint *)0x0;\n      temp4 = temp4 - temp1;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x8001302);\n        result = (*jump_table)();\n        return result;\n      }\n      shift = leading_zero_count(divisor);\n      if (shift == 0) {\n        quotient = (uint *)0x1;\n        divisor = divisor - divisor;\n        temp6 = divisor >> 0x10;\n        quotient1 = divisor & 0xffff;\n        temp3 = divisor;\n      }\n      else {\n        temp3 = divisor << shift;\n        quotient = divisor >> (0x20U - shift & 0xff);\n        temp6 = temp3 >> 0x10;\n        temp5 = quotient / temp6;\n        quotient1 = temp3 & 0xffff;\n        temp1 = temp5 * quotient1;\n        temp4 = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        temp1 = temp4 >> 0x10 | (quotient - temp6 * temp5) * 0x10000;\n        dividend = dividend << shift;\n        quotient = temp5;\n        if (temp1 <= temp1 && temp1 - temp1 != 0) {\n          carry_flag = check_for_carry(temp3,temp1);\n          temp1 = temp3 + temp1;\n          quotient = temp5 - 1;\n          if ((carry_flag == false) && (temp1 <= temp1 && temp1 - temp1 != 0)) {\n            quotient = temp5 - 2;\n            temp1 = temp1 + temp3;\n          }\n        }\n        temp5 = (temp1 - temp1) / temp6;\n        temp7 = temp5 * quotient1;\n        divisor = temp4 & 0xffff | ((temp1 - temp1) - temp6 * temp5) * 0x10000;\n        temp1 = temp5;\n        if (divisor <= temp7 && temp7 - divisor != 0) {\n          carry_flag = check_for_carry(temp3,divisor);\n          divisor = temp3 + divisor;\n          temp1 = temp5 - 1;\n          if ((carry_flag == false) && (divisor <= temp7 && temp7 - divisor != 0)) {\n            temp1 = temp5 - 2;\n            divisor = divisor + temp3;\n          }\n        }\n        divisor = divisor - temp7;\n        quotient = (uint *)(temp1 | quotient << 0x10);\n      }\n      temp5 = divisor / temp6;\n      quotient = quotient1 * temp5;\n      temp4 = dividend >> 0x10 | (divisor - temp6 * temp5) * 0x10000;\n      temp1 = temp5;\n      if (temp4 <= quotient && quotient - temp4 != 0) {\n        carry_flag = check_for_carry(temp3,temp4);\n        temp4 = temp3 + temp4;\n        temp1 = temp5 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient && quotient - temp4 != 0)) {\n          temp1 = temp5 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp5 = (temp4 - quotient) / temp6;\n      quotient1 = quotient1 * temp5;\n      temp4 = dividend & 0xffff | ((temp4 - quotient) - temp6 * temp5) * 0x10000;\n      quotient = temp5;\n      if (temp4 <= quotient1 && quotient1 - temp4 != 0) {\n        carry_flag = check_for_carry(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient = temp5 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient1 && quotient1 - temp4 != 0)) {\n          quotient = temp5 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - quotient1;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> leading_zero_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    quotient = remainder;\n    if (divisor < remainder) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      shift = leading_zero_count(remainder);\n      if (shift == 0) {\n        if ((remainder < divisor) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          divisor = (divisor - remainder) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        quotient = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        temp4 = 0x20 - shift;\n        quotient1 = divisor >> (temp4 & 0xff) | remainder << shift;\n        temp3 = divisor >> (temp4 & 0xff);\n        temp1 = quotient1 >> 0x10;\n        temp5 = temp3 / temp1;\n        temp6 = temp5 * (quotient1 & 0xffff);\n        quotient = divisor << shift | dividend >> (temp4 & 0xff);\n        temp1 = quotient >> 0x10 | (temp3 - temp1 * temp5) * 0x10000;\n        dividend = dividend << shift;\n        temp3 = temp5;\n        if (temp1 <= temp6 && temp6 - temp1 != 0) {\n          carry_flag = check_for_carry(quotient1,temp1);\n          temp1 = quotient1 + temp1;\n          temp3 = temp5 - 1;\n          if ((carry_flag == false) && (temp1 <= temp6 && temp6 - temp1 != 0)) {\n            temp3 = temp5 - 2;\n            temp1 = temp1 + quotient1;\n          }\n        }\n        temp5 = (temp1 - temp6) / temp1;\n        temp7 = temp5 * (quotient1 & 0xffff);\n        temp1 = quotient & 0xffff | ((temp1 - temp6) - temp1 * temp5) * 0x10000;\n        quotient = temp5;\n        if (temp1 <= temp7 && temp7 - temp1 != 0) {\n          carry_flag = check_for_carry(quotient1,temp1);\n          temp1 = quotient1 + temp1;\n          quotient = temp5 - 1;\n          if ((carry_flag == false) && (temp1 <= temp7 && temp7 - temp1 != 0)) {\n            quotient = temp5 - 2;\n            temp1 = temp1 + quotient1;\n          }\n        }\n        quotient = quotient | temp3 << 0x10;\n        quotient = (ulonglong)quotient * (ulonglong)(divisor << shift);\n        if (CONCAT44(temp1 - temp7,dividend) < quotient) {\n          quotient = quotient - 1;\n          quotient = quotient - CONCAT44(quotient1,divisor << shift);\n        }\n        if (remainder != (uint *)0x0) {\n          temp3 = ((temp1 - temp7) - (int)(quotient >> 0x20)) - (uint)(dividend < (uint)quotient);\n          *remainder = temp3 << (temp4 & 0xff) | dividend - (uint)quotient >> shift;\n          remainder[1] = temp3 >> shift;\n          quotient = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(quotient,quotient);\n}\n\n",
            "current_name": "perform_division_0800121c",
            "entrypoint": "0x0800121c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_for_carry",
                "FUN_0800121c": "perform_division_0800121c",
                "LZCOUNT": "leading_zero_count",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bVar13": "carry_flag",
                "iVar5": "shift",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "remainder",
                "puVar9": "quotient",
                "uVar1": "quotient",
                "uVar10": "temp5",
                "uVar11": "temp6",
                "uVar12": "temp7",
                "uVar14": "result",
                "uVar2": "quotient1",
                "uVar3": "temp1",
                "uVar4": "temp1",
                "uVar6": "quotient",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014f0": {
            "additional_data": {
                "DAT_40022000": {
                    "1": "hardware_config"
                },
                "FUNC_08002d8a": {
                    "1": "perform_custom_initialization",
                    "2": "reverse_something",
                    "3": "perform_initialization",
                    "4": "initialize_tick"
                },
                "FUN_080014f0": {
                    "1": "initialize_hal_libraries",
                    "19": "initialize_hardware",
                    "2": "initialize_hal",
                    "7": "initialize_system"
                },
                "FUN_0800151c": {
                    "1": "initialize_hal",
                    "2": "set_tick_frequency"
                },
                "FUN_08001714": {
                    "1": "set_param_1",
                    "4": "configure_interrupts",
                    "5": "set_priority"
                },
                "HAL_InitTick": {
                    "1": "initialize_system_tick",
                    "14": "initialize_tick"
                },
                "HAL_MspInit": {
                    "1": "initialize_peripherals",
                    "4": "initialize_periph",
                    "6": "initialize_msp"
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "1": "configure_interrupt_priority",
                    "2": "set_interrupt_priority_grouping",
                    "5": "set_interrupt_priority_group",
                    "8": "set_priority_grouping"
                },
                "_DAT_40022000": {
                    "1": "status_register",
                    "2": "device_register"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "priority_group",
                    "3": "value",
                    "5": "param"
                }
            },
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nundefined4 initialize_hardware_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_priority_grouping(3);\n  initialize_tick(0xf);\n  initialize_msp();\n  return 0;\n}\n\n",
            "current_name": "initialize_hardware_080014f0",
            "entrypoint": "0x080014f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014f0": "initialize_hardware_080014f0",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_msp",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800151c": {
            "additional_data": {
                "0xffffffff": {
                    "1": "<unmodified>"
                },
                "DAT_20000000": {
                    "1": "saved_priority",
                    "3": "current_priority_level",
                    "6": "current_priority"
                },
                "DAT_20000004": {
                    "1": "delay_in_milliseconds",
                    "2": "systick_frequency",
                    "3": "desired_tick_rate"
                },
                "DAT_20000018": {
                    "1": "clock_frequency",
                    "2": "systick_reload_value",
                    "5": "sys_tick_frequency"
                },
                "FUN_0800151c": {
                    "1": "initialize_sys_tick",
                    "10": "configure_systick",
                    "19": "configure_sys_tick"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_priority_level",
                    "2": "set_nvic_priority",
                    "3": "set_priority",
                    "6": "set_interrupt_priority"
                },
                "HAL_SYSTICK_Config": {
                    "1": "configure_system_tick_timing",
                    "2": "configure_sys_tick",
                    "5": "configure_sys_tick_timer"
                },
                "HAl_SYSTICK_Config": {
                    "1": "configure_sys_tick"
                },
                "iVar1": {
                    "1": "config_status",
                    "12": "systick_config_result",
                    "2": "result",
                    "4": "systick_config_status",
                    "9": "config_result"
                },
                "param_1": {
                    "2": "priority",
                    "29": "priority_level"
                },
                "param_1 < 0x10": {
                    "1": "priority_valid"
                },
                "uVar2": {
                    "1": "return_code",
                    "17": "return_value",
                    "2": "success",
                    "3": "status",
                    "4": "result"
                }
            },
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "code": "\nundefined4 configure_sys_tick_0800151c(uint priority_level)\n\n{\n  int systick_config_result;\n  undefined4 return_value;\n  \n  systick_config_result = configure_sys_tick_0800151c_timer((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (systick_config_result == 0) {\n    if (priority_level < 0x10) {\n      set_interrupt_priority(0xffffffff,priority_level,0);\n      return_value = 0;\n      DAT_20000000 = priority_level;\n    }\n    else {\n      return_value = 1;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "configure_sys_tick_0800151c",
            "entrypoint": "0x0800151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800151c": "configure_sys_tick_0800151c",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_SYSTICK_Config": "configure_sys_tick_timer",
                "iVar1": "systick_config_result",
                "param_1": "priority_level",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800157c": {
            "additional_data": {
                "DAT_20000004": {
                    "1": "constant",
                    "2": "value",
                    "5": "value_to_add",
                    "6": "increment",
                    "9": "increment_value"
                },
                "DAT_20000a48": {
                    "1": "total",
                    "2": "result",
                    "3": "data_value",
                    "4": "current_value"
                },
                "FUN_0800157c": {
                    "1": "add_constant_to_global_variable",
                    "2": "increment_variable",
                    "3": "increment_data_value",
                    "6": "update_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid update_data_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "current_name": "update_data_0800157c",
            "entrypoint": "0x0800157c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800157c": "update_data_0800157c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015a0": {
            "additional_data": {
                "DAT_20000a48": {
                    "1": "global_variable_value",
                    "2": "data_value",
                    "3": "global_variable",
                    "4": "global_value",
                    "8": "data"
                },
                "FUN_080015a0": {
                    "1": "get_dat_value",
                    "2": "get_return_value",
                    "3": "get_global_variable",
                    "5": "get_global_value",
                    "7": "get_data_value",
                    "8": "get_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f2c",
                "FUN_08001f6c",
                "FUN_08002bb4",
                "FUN_08001ccc",
                "FUN_08003260",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002c2e",
                "FUN_08002ad8",
                "FUN_08004436",
                "FUN_08002d98",
                "FUN_08002640"
            ],
            "code": "\nundefined4 get_data_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "current_name": "get_data_080015a0",
            "entrypoint": "0x080015a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015a0": "get_data_080015a0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b4": {
            "additional_data": {
                "0x5fa0000": {
                    "1": "constant_value"
                },
                "0xf8ff": {
                    "1": "mask"
                },
                "7": {
                    "1": "bit_count"
                },
                "FUN_080015b4": {
                    "1": "update_parameter_bitmask",
                    "2": "set_control_bits",
                    "3": "update_configuration",
                    "5": "update_control_register"
                },
                "_DAT_e000ed0c": {
                    "1": "register_a",
                    "3": "register_value",
                    "6": "configuration_register",
                    "9": "control_register"
                },
                "param_1": {
                    "1": "configuration_flag",
                    "2": "configuration_value",
                    "4": "configuration",
                    "6": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001714"
            ],
            "code": "\n\n\nvoid update_control_register_080015b4(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_control_register_080015b4",
            "entrypoint": "0x080015b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015b4": "update_control_register_080015b4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015fc": {
            "additional_data": {
                "DAT_e000ed0c": {
                    "1": "shifted_value"
                },
                "FUN_080015fc": {
                    "1": "get_last_three_bits",
                    "2": "extract_bits_from_register",
                    "6": "get_shifted_bits",
                    "8": "get_bits_from_register"
                },
                "_080015fc": {
                    "1": "get_shifted_value"
                },
                "_DAT_e000ed0c": {
                    "1": "shift_value",
                    "11": "register_value",
                    "2": "input_data",
                    "7": "data_register"
                },
                "found_bits": {
                    "1": "bits"
                },
                "return": {
                    "1": "masked_value"
                },
                "shifted_register": {
                    "1": "shifted_reg"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\n\n\nuint get_bits_from_register_080015fc(void)\n\n{\n  masked_value _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_bits_from_register_080015fc",
            "entrypoint": "0x080015fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc",
                "_080015fc": "get_shifted_value",
                "return": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001618": {
            "additional_data": {
                "(char)char_value < '\\0'": {
                    "1": "is_negative"
                },
                "(char)param_1": {
                    "1": "is_negative"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "1": "memory_location2"
                },
                "(param_1 & 0xf)": {
                    "1": "offset1"
                },
                "(param_2 & 0xff) << 4": {
                    "1": "modified_data"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "store_value2"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "memory1"
                },
                "0x1fff1c00": {
                    "1": "output_address2"
                },
                "0xe000ed14": {
                    "1": "memory_address_1"
                },
                "FUN_08001618": {
                    "1": "update_data",
                    "2": "store_byte",
                    "4": "store_data"
                },
                "byteValue": {
                    "1": "byte_value"
                },
                "char": {
                    "1": "byte_value"
                },
                "char_value": {
                    "1": "char_value"
                },
                "char_value + -0x1fff1c00": {
                    "1": "address2"
                },
                "inputByte": {
                    "1": "input_byte"
                },
                "local_1": {
                    "1": "offset"
                },
                "local_2": {
                    "1": "adjusted_address"
                },
                "local_3": {
                    "1": "shifted_value"
                },
                "mask": {
                    "1": "mask_value"
                },
                "masked_value + 0xe000ed14": {
                    "1": "address1"
                },
                "memoryAddress": {
                    "1": "address"
                },
                "newByteValue": {
                    "1": "new_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "source_byte",
                    "4": "address",
                    "6": "byte_value",
                    "8": "input_byte"
                },
                "param_1 & 0xf": {
                    "1": "offset"
                },
                "param_1 & 0xf + 0xe000ed14": {
                    "1": "target_address1"
                },
                "param_1 + -0x1fff1c00": {
                    "1": "base_address2"
                },
                "param_2": {
                    "1": "parameter_value",
                    "13": "value",
                    "3": "data_value",
                    "6": "data"
                },
                "param_2 & 0xff": {
                    "1": "lower_byte"
                },
                "param_3": {
                    "1": "mapped_address",
                    "2": "address"
                },
                "param_4": {
                    "1": "constant"
                },
                "param_5": {
                    "1": "bit_shift"
                },
                "result": {
                    "1": "new_value"
                },
                "value": {
                    "1": "value"
                },
                "var_1": {
                    "1": "memory_address"
                },
                "var_2": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "code": "\nvoid store_data_08001618(byte input_byte,uint value)\n\n{\n  if (is_negative < '\\0') {\n    *(character *)((input_byte & 0xf) + 0xe000ed14) = (character)((value & 0xff) << 4);\n  }\n  else {\n    *(character *)(is_negative + -0x1fff1c00) = (character)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "store_data_08001618",
            "entrypoint": "0x08001618",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_1": "is_negative",
                "FUN_08001618": "store_data_08001618",
                "char": "character",
                "param_1": "input_byte",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800166c": {
            "additional_data": {
                "(-1 << (param_1 & 0xff))": {
                    "1": "lower_mask"
                },
                "(-1 << (uVar1 & 0xff))": {
                    "1": "upper_mask"
                },
                "(param_3 & ~(-1 << (param_1 & 0xff)))": {
                    "1": "cleared_bit_mask"
                },
                "(param_3 & ~lower_mask)": {
                    "1": "input3_and_mask"
                },
                "(~(-1 << (uVar1 & 0xff)) & param_2)": {
                    "1": "masked_value"
                },
                "(~(-1 << (uVar1 & 0xff)) & param_2) << (param_1 & 0xff)": {
                    "1": "shifted_value"
                },
                "(~upper_mask & input2) << (param_1 & 0xff)": {
                    "1": "input2_and_shifted"
                },
                "0": {
                    "1": "mask_result"
                },
                "FUN_0800166c": {
                    "1": "bitwise_concatenation",
                    "2": "bitwise_operations",
                    "3": "apply_bitmask",
                    "5": "apply_bitwise_operations",
                    "7": "bitwise_operation"
                },
                "new_variable_name_1": {
                    "1": "shift_mask"
                },
                "new_variable_name_2": {
                    "1": "bit_pattern1_result"
                },
                "new_variable_name_3": {
                    "1": "bit_pattern2_result"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_bits",
                    "4": "input_value",
                    "7": "bit_offset",
                    "8": "bit_position"
                },
                "param_1 & 0xff": {
                    "2": "shift_value1"
                },
                "param_1 & 7": {
                    "1": "masked_lower"
                },
                "param_1 + 4": {
                    "1": "adjusted_masked"
                },
                "param_1 - 3": {
                    "1": "adjusted_masked"
                },
                "param_1_temp": {
                    "1": "adjusted_bit_position"
                },
                "param_2": {
                    "1": "input_value1",
                    "2": "value1",
                    "4": "bit_value"
                },
                "param_3": {
                    "1": "updated_value",
                    "2": "output_bits",
                    "6": "result"
                },
                "return": {
                    "1": "result"
                },
                "temp_var1": {
                    "1": "mask1"
                },
                "temp_var2": {
                    "1": "mask2"
                },
                "uVar1": {
                    "1": "masked_upper",
                    "2": "num_bits",
                    "3": "mask_size",
                    "5": "remaining_bits",
                    "9": "shift_amount"
                },
                "uVar1 & 0xff": {
                    "1": "shift_value2"
                },
                "uVar2": {
                    "1": "temp1"
                },
                "uVar3": {
                    "1": "temp2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\nuint bitwise_operation_0800166c(uint bit_position,uint bit_value,uint result)\n\n{\n  uint shift_amount;\n  \n  bit_position = bit_position & 7;\n  shift_amount = 7 - bit_position;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_position + 4 < 7) {\n    bit_position = 0;\n  }\n  else {\n    bit_position = bit_position - 3;\n  }\n  result result & ~(-1 << (bit_position & 0xff)) |\n         (~(-1 << (shift_amount & 0xff)) & bit_value) << (bit_position & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_0800166c",
            "entrypoint": "0x0800166c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "bit_position",
                "param_2": "bit_value",
                "param_3": "result",
                "return": "result",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016d0": {
            "additional_data": {
                "FUN_08001618": {
                    "1": "process_data"
                },
                "FUN_080016d0": {
                    "1": "initialize_peripheral_interrupt",
                    "10": "check_and_set_priority",
                    "3": "initialize_priority"
                },
                "NVIC_SetPriority": {
                    "1": "set_interrupt_priority",
                    "3": "set_priority"
                },
                "_DAT_e000e010": {
                    "1": "another_variable",
                    "2": "interrupt_priority"
                },
                "_DAT_e000e014": {
                    "1": "updated_priority"
                },
                "_DAT_e000e018": {
                    "1": "memory_value1",
                    "2": "interrupt_flag"
                },
                "bVar1": {
                    "1": "is_valid_address",
                    "2": "is_valid_interrupt",
                    "4": "is_in_range",
                    "5": "is_value_valid"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "input_value",
                    "2": "priority",
                    "3": "priority_level",
                    "4": "value"
                },
                "param_2": {
                    "1": "unused_param"
                }
            },
            "called": [
                "FUN_08001618"
            ],
            "calling": [
                "FUN_08001762"
            ],
            "code": "\n\n\nbool check_and_set_priority_080016d0(int input_value)\n\n{\n  bool is_value_valid;\n  \n  is_value_valid = input_value - 1U < 0x1000000;\n  if (is_value_valid) {\n    _DAT_e000e014 = input_value + -1;\n    set_priority(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_value_valid;\n}\n\n",
            "current_name": "check_and_set_priority_080016d0",
            "entrypoint": "0x080016d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016d0": "check_and_set_priority_080016d0",
                "NVIC_SetPriority": "set_priority",
                "bVar1": "is_value_valid",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001714": {
            "additional_data": {
                "FUN_080015b4": {
                    "1": "update_priority",
                    "2": "execute_function",
                    "6": "configure_interrupt",
                    "9": "set_priority"
                },
                "FUN_08001714": {
                    "1": "set_interrupt_priority_grouping",
                    "19": "set_priority_grouping",
                    "4": "set_interrupt_priority_group",
                    "6": "set_nvic_priority_grouping"
                },
                "param_1": {
                    "1": "input_param",
                    "19": "priority_group",
                    "3": "priority_grouping"
                }
            },
            "called": [
                "FUN_080015b4"
            ],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid set_priority_grouping_08001714(undefined4 priority_group)\n\n{\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}\n\n",
            "current_name": "set_priority_grouping_08001714",
            "entrypoint": "0x08001714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001714": "set_priority_grouping_08001714",
                "param_1": "priority_group"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800172a": {
            "additional_data": {
                "(int)param_1": {
                    "1": "peripheral"
                },
                "FUN_080015fc": {
                    "1": "get_preemption_priority",
                    "20": "get_priority_grouping"
                },
                "FUN_08001618": {
                    "1": "configure_irq",
                    "2": "configure_priority",
                    "4": "configure_interrupt",
                    "6": "encode_priority"
                },
                "FUN_0800166c": {
                    "1": "decode_priority",
                    "12": "encode_priority",
                    "2": "encode_interrupt_priority"
                },
                "FUN_0800172a": {
                    "1": "set_priority_level",
                    "15": "set_interrupt_priority",
                    "9": "set_priority"
                },
                "NVIC_EncodePriority": {
                    "1": "encode_priority"
                },
                "NVIC_GetPriorityGrouping": {
                    "1": "get_priority_grouping"
                },
                "NVIC_SetPriority": {
                    "1": "set_interrupt_priority"
                },
                "param_1": {
                    "1": "preempt_priority",
                    "2": "interrupt_handler",
                    "3": "priority_group",
                    "4": "irq_number",
                    "6": "priority_grouping"
                },
                "param_1 (FUN_08001618)": {
                    "1": "interrupt_type"
                },
                "param_1 (FUN_0800166c)": {
                    "1": "priority_grouping"
                },
                "param_1(byte)": {
                    "1": "irq_index"
                },
                "param_1(uint)": {
                    "1": "priority_group"
                },
                "param_2": {
                    "1": "param_2",
                    "11": "preempt_priority",
                    "3": "sub_priority",
                    "9": "priority_group"
                },
                "param_2 (FUN_08001618)": {
                    "1": "priority"
                },
                "param_2 (FUN_0800166c)": {
                    "1": "priority_level"
                },
                "param_2(uint)": {
                    "1": "preempt_priority"
                },
                "param_3": {
                    "1": "preempt_priority",
                    "2": "priority_group",
                    "22": "sub_priority"
                },
                "param_3 (FUN_0800166c)": {
                    "1": "sub_priority"
                },
                "param_3(uint)": {
                    "1": "sub_priority"
                },
                "uVar1": {
                    "1": "priority_group_bits",
                    "12": "priority_grouping",
                    "4": "priority_encoding",
                    "5": "priority_group"
                }
            },
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "code": "\nvoid set_interrupt_priority_0800172a(char interrupt_id,undefined4 preempt_priority,undefined4 sub_priority)\n\n{\n  undefined4 priority_grouping;\n  \n  priority_grouping = get_priority_grouping();\n  priority_grouping = encode_priority(priority_grouping,preempt_priority,sub_priority);\n  set_interrupt_priority_0800172a(peripheral,priority_grouping);\n  return;\n}\n\n",
            "current_name": "set_interrupt_priority_0800172a",
            "entrypoint": "0x0800172a",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "peripheral",
                "FUN_0800172a": "set_interrupt_priority_0800172a",
                "NVIC_EncodePriority": "encode_priority",
                "NVIC_GetPriorityGrouping": "get_priority_grouping",
                "NVIC_SetPriority": "set_interrupt_priority",
                "param_1": "interrupt_id",
                "param_2": "preempt_priority",
                "param_3": "sub_priority",
                "uVar1": "priority_grouping"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001762": {
            "additional_data": {
                "FUN_08001762": {
                    "13": "configure_sys_tick",
                    "18": "initialize_sys_tick"
                },
                "param_1": {
                    "1": "tick_frequency",
                    "2": "tick_interval",
                    "27": "config_value"
                },
                "uVar1": {
                    "1": "sys_tick_config_status",
                    "4": "config_status",
                    "6": "result",
                    "7": "config_result"
                }
            },
            "called": [
                "FUN_080016d0"
            ],
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "code": "\nundefined4 initialize_sys_tick_08001762(undefined4 config_value)\n\n{\n  undefined4 config_result;\n  \n  config_result = SysTick_Config(config_value);\n  return config_result;\n}\n\n",
            "current_name": "initialize_sys_tick_08001762",
            "entrypoint": "0x08001762",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001762": "initialize_sys_tick_08001762",
                "param_1": "config_value",
                "uVar1": "config_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800177c": {
            "additional_data": {
                "FUN_0800177c": {
                    "1": "set_flag_bit",
                    "2": "set_flag_if_param_is_four",
                    "6": "set_flag"
                },
                "_DAT_e000e010": {
                    "1": "status_flags",
                    "2": "register_value",
                    "3": "data_register",
                    "4": "control_register",
                    "9": "flag_register"
                },
                "param_1": {
                    "1": "control_flag",
                    "13": "value",
                    "2": "param",
                    "3": "status",
                    "4": "flag_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nvoid set_flag_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "set_flag_0800177c",
            "entrypoint": "0x0800177c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800177c": "set_flag_0800177c",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017b4": {
            "additional_data": {
                "FUN_080017b4": {
                    "1": "handle_timer_event",
                    "2": "handle_tim_period_elapsed_callback",
                    "3": "handle_timer_period_elapsed",
                    "4": "handle_timer_callback",
                    "5": "update_timer_callback",
                    "6": "handle_period_elapsed",
                    "7": "handle_tim_period_elapsed"
                },
                "FUN_08004f78": {
                    "1": "perform_initialization",
                    "2": "perform_additional_action",
                    "4": "perform_additional_task"
                },
                "HAL_TIM_PeriodElapsedCallback": {
                    "1": "handle_tim_callback",
                    "2": "handle_timer_elapsed",
                    "4": "timer_period_elapsed_callback"
                },
                "void FUN_08004f78(void)": {
                    "1": "handle_period_elapsed"
                }
            },
            "called": [
                "FUN_08004f78"
            ],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid handle_tim_period_elapsed_080017b4(void)\n\n{\n  timer_period_elapsed_callback(0);\n  return;\n}\n\n",
            "current_name": "handle_tim_period_elapsed_080017b4",
            "entrypoint": "0x080017b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017b4": "handle_tim_period_elapsed_080017b4",
                "HAL_TIM_PeriodElapsedCallback": "timer_period_elapsed_callback"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017c4": {
            "additional_data": {
                "FUN_080017c4": {
                    "1": "update_parameters",
                    "2": "update_settings",
                    "3": "update_flags_and_values",
                    "5": "update_bits",
                    "7": "update_bitmask"
                },
                "iVar5": {
                    "1": "memory_offset",
                    "19": "index",
                    "2": "array_index"
                },
                "local_10": {
                    "1": "new_bit_value",
                    "13": "new_value",
                    "3": "offset",
                    "4": "updated_value"
                },
                "local_c": {
                    "1": "current_index",
                    "16": "bit_index",
                    "3": "bit_position",
                    "6": "counter"
                },
                "param_1": {
                    "1": "memory1",
                    "2": "output_values"
                },
                "param_2": {
                    "1": "memory2",
                    "2": "input_values",
                    "3": "input"
                },
                "puVar4": {
                    "1": "result",
                    "2": "register_ptr",
                    "3": "output_ptr"
                },
                "uVar1": {
                    "1": "bit_flag",
                    "22": "bit_mask",
                    "3": "bit",
                    "5": "mask"
                },
                "uVar2": {
                    "1": "bit",
                    "2": "input_bit",
                    "8": "bit_value",
                    "9": "bit_check"
                },
                "uVar3": {
                    "1": "option_value",
                    "2": "config_value",
                    "7": "opcode",
                    "8": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080055f4",
                "FUN_08005680"
            ],
            "code": "\n\n\nvoid update_bitmask_080017c4(uint *output_array,uint *input)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  uint value;\n  uint *output_ptr;\n  int index;\n  uint new_value;\n  uint bit_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input & bit_mask;\n    if (bit_check == bit_mask) {\n      value = input[1];\n      if (value == 0x12) {\n        new_value = input[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          new_value = input[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_08001882;\n          if (value == 1) {\n            new_value = input[3];\n          }\n        }\n        else if (value == 3) {\n          new_value = 0;\n        }\n        else if (value == 0x11) {\n          new_value = input[3] + 4;\n        }\n      }\n      else if (value == 0x10210000) {\nLAB_08001882:\n        if (input[2] == 0) {\n          new_value = 4;\n        }\n        else if (input[2] == 1) {\n          new_value = 8;\n          output_array[4] = bit_mask;\n        }\n        else {\n          new_value = 8;\n          output_array[5] = bit_mask;\n        }\n      }\n      else if (value < 0x10210001) {\n        if ((value == 0x10110000) || (value == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((value == 0x10310000) || (value == 0x10320000)) || (value == 0x10220000))\n      goto LAB_08001882;\n      if (bit_check < 0x100) {\n        bit_mask = bit_index << 2;\n        output_ptr = output_array;\n      }\n      else {\n        output_ptr = output_array + 1;\n        bit_mask = (bit_index - 8) * 4;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask & 0xff)) | new_value << (bit_mask & 0xff);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (output_array == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output_array == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output_array == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output_array == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bit_index & 3) << 2) |\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000);\n        if ((input[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bit_check & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bit_check | _DAT_40010400;\n        }\n        if ((input[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bit_check & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bit_check | _DAT_40010404;\n        }\n        if ((input[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bit_check & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bit_check | _DAT_40010408;\n        }\n        if ((input[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bit_check & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_bitmask_080017c4",
            "entrypoint": "0x080017c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017c4": "update_bitmask_080017c4",
                "iVar5": "index",
                "local_10": "new_value",
                "local_c": "bit_index",
                "param_1": "output_array",
                "param_2": "input",
                "puVar4": "output_ptr",
                "uVar1": "bit_mask",
                "uVar2": "bit_check",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a80": {
            "additional_data": {
                "(uint)param_2": {
                    "1": "value",
                    "3": "converted_value"
                },
                "(uint)param_2 << 0x10": {
                    "1": "shifted_value"
                },
                "*(uint *)(param_1 + 0x10)": {
                    "1": "obj_value",
                    "2": "memory_value",
                    "3": "target_address"
                },
                "0x10": {
                    "1": "offset"
                },
                "FUN_08001a80": {
                    "1": "convert_param_to_value",
                    "11": "set_param_value",
                    "2": "set_memory_value",
                    "5": "set_param"
                },
                "char": {
                    "1": "bool"
                },
                "condition": {
                    "1": "is_zero"
                },
                "dataAddr": {
                    "1": "data_address"
                },
                "isShifted": {
                    "1": "should_shift"
                },
                "param_1": {
                    "1": "converted_param",
                    "12": "base_address",
                    "2": "data_pointer",
                    "3": "memory_address",
                    "6": "object_address"
                },
                "param_1 + 0x10": {
                    "1": "obj_value_address",
                    "2": "target_address"
                },
                "param_2": {
                    "1": "new_parameter_value",
                    "2": "data",
                    "23": "value",
                    "3": "param_value"
                },
                "param_2 << 0x10": {
                    "1": "shifted_value"
                },
                "param_3": {
                    "1": "is_high_bits",
                    "22": "is_shifted",
                    "4": "flag"
                },
                "param_4": {
                    "1": "new_value"
                },
                "uint": {
                    "1": "unsigned_integer",
                    "2": "unsigned_int"
                },
                "value": {
                    "1": "converted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "code": "\nvoid set_param_value_08001a80(int base_address,ushort value,bool is_shifted)\n\n{\n  if (is_shifted == '\\0') {\n    *(unsigned_int *)(base_address + 0x10) = converted_value << 0x10;\n  }\n  else {\n    *(unsigned_int *)(base_address + 0x10) = converted_value;\n  }\n  return;\n}\n\n",
            "current_name": "set_param_value_08001a80",
            "entrypoint": "0x08001a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "(uint)param_2": "converted_value",
                "FUN_08001a80": "set_param_value_08001a80",
                "char": "bool",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "(*param_1) & 0xfffffffe": {
                    "1": "i2c_value_and_mask"
                },
                "(*param_1)[1]": {
                    "1": "i2c_result"
                },
                "(*param_1)[2]": {
                    "1": "i2c_param2_result"
                },
                "(*param_1)[3]": {
                    "1": "i2c_param3_result"
                },
                "(*param_1)[4]": {
                    "1": "i2c_param4_result"
                },
                "(*param_1)[5]": {
                    "1": "i2c_param5_result"
                },
                "(*param_1)[6]": {
                    "1": "i2c_param6_result"
                },
                "(*param_1)[7]": {
                    "1": "i2c_param7_result"
                },
                "(*param_1)[8]": {
                    "1": "i2c_param8_result"
                },
                "(*param_1)[8] | (*param_1)[7]": {
                    "1": "i2c_param8_result_or_result"
                },
                "(uVar1 - 1) / (uint)((int)param_1[1] << 1) + 1 & 0xfff": {
                    "1": "calculated_value_in_range"
                },
                "(uint *)((int)param_1 + 0x3d)": {
                    "1": "flag_ptr"
                },
                "(uint)((int)param_1[1] * 0x19)": {
                    "1": "param1_1_uint_times19_result"
                },
                "(uint)((int)param_1[1] * 3)": {
                    "1": "param1_1_uint_times3_result"
                },
                "(uint)((int)param_1[1] << 1)": {
                    "1": "param1_1_shifted_uint"
                },
                "(uint)param_1[2]": {
                    "1": "param1_2_uint_result"
                },
                "(uint)param_1[3]": {
                    "1": "i2c_param3_uint_result"
                },
                "(uint)param_1[4]": {
                    "1": "i2c_param4_uint_result"
                },
                "(uint)param_1[5]": {
                    "1": "i2c_param5_uint_result"
                },
                "(uint)param_1[6]": {
                    "1": "i2c_param6_uint_result"
                },
                "(uint)param_1[7]": {
                    "1": "param1_7_uint_result"
                },
                "(uint)param_1[8]": {
                    "1": "param1_8_uint_result"
                },
                "(uint)param_1[8] | (uint)param_1[7]": {
                    "1": "param1_8_uint_or_uint"
                },
                "*param_1": {
                    "1": "i2c_value"
                },
                "FUNC_08001cb8": {
                    "1": "reverse_something",
                    "3": "reverse_bits",
                    "4": "some_function"
                },
                "FUNC_08003518": {
                    "1": "func2"
                },
                "FUN_08001ab0": {
                    "1": "configure_i2_c",
                    "19": "initialize_i2_c",
                    "2": "initialize_device",
                    "4": "initialize_i2_c_device"
                },
                "FUN_08001cb8": {
                    "1": "initialize_i2_c_periph"
                },
                "FUN_08003518": {
                    "1": "get_system_frequency",
                    "13": "get_pclk1_freq"
                },
                "HAL_I2C_MspInit": {
                    "1": "initialize_i2_cio_pins",
                    "3": "initialize_i2_c_hardware",
                    "4": "initialize_i2_c",
                    "5": "initialize_i2_c_periph"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "1": "get_pclk1_frequency"
                },
                "bVar5": {
                    "1": "is_adjusted_pclk1_freq_valid",
                    "17": "is_zero",
                    "2": "is_divisor_zero"
                },
                "cVar2": {
                    "1": "is_pclk_freq_valid",
                    "2": "is_valid_frequency",
                    "3": "is_freq_valid",
                    "5": "is_pclk1_freq_valid"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "parameters",
                    "6": "i2c_config",
                    "8": "i2c_params"
                },
                "param_1 + 0x3d": {
                    "1": "flag_var"
                },
                "param_1 + 0x3e": {
                    "1": "undefined_var4"
                },
                "param_1 + 0xf": {
                    "1": "i2c_instance_val"
                },
                "param_1[10]": {
                    "1": "undefined_var2"
                },
                "param_1[12]": {
                    "1": "undefined_var3"
                },
                "param_1[1]": {
                    "1": "param1_1_value"
                },
                "param_1[1] * 0x19": {
                    "1": "param1_1_times19"
                },
                "param_1[1] * 3": {
                    "1": "param1_1_times3"
                },
                "param_1[1] << 1": {
                    "1": "param1_1_shifted"
                },
                "param_1[2]": {
                    "1": "param1_2_value"
                },
                "param_1[3]": {
                    "1": "value5"
                },
                "param_1[4]": {
                    "1": "value6"
                },
                "param_1[5]": {
                    "1": "value8"
                },
                "param_1[6]": {
                    "1": "param1_6_value"
                },
                "param_1[7]": {
                    "1": "value4"
                },
                "param_1[8]": {
                    "1": "param1_8_value"
                },
                "param_1[8] | param_1[7]": {
                    "1": "i2c_value_or_result"
                },
                "uVar1": {
                    "19": "pclk1_freq",
                    "2": "frequency",
                    "3": "pclk_frequency",
                    "5": "pclk_freq"
                },
                "uVar1 - 1) / (uint)((int)param_1[1] * 0x19) + 1 & 0xfff | 0xc000": {
                    "1": "calculated_value_divided_by_param1_1_times19_or_shifted"
                },
                "uVar1 - 1) / (uint)((int)param_1[1] * 3) + 1 & 0xfff | 0x8000": {
                    "1": "calculated_value_divided_by_param1_1_times3_or_shifted"
                },
                "uVar1 / (uint)((int)param_1[1] * 0x19) + 1 & 0xfff": {
                    "1": "calculated_value_divided_by_param1_1_times19"
                },
                "uVar1 / (uint)((int)param_1[1] * 3) + 1 & 0xfff": {
                    "1": "calculated_value_divided_by_param1_1_times3"
                },
                "uVar1 / 1000000": {
                    "1": "pclk1_freq_divided"
                },
                "uVar3": {
                    "1": "success",
                    "2": "status",
                    "21": "result",
                    "6": "return_value"
                },
                "uVar4": {
                    "1": "adjusted_pclk1_freq",
                    "2": "u_var4",
                    "4": "calculated_value",
                    "5": "divisor",
                    "7": "temp_var"
                }
            },
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_08005348"
            ],
            "code": "\nundefined4 initialize_i2_c_08001ab0(uint **i2c_params)\n\n{\n  uint pclk1_freq;\n  char is_pclk1_freq_valid;\n  undefined4 result;\n  uint temp_var;\n  bool is_zero;\n  \n  if (i2c_params == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)i2c_params + 0x3d) == '\\0') {\n      *(undefined *)(i2c_params + 0xf) = 0;\n      initialize_i2_c_08001ab0_periph(i2c_params);\n    }\n    *(undefined *)((int)i2c_params + 0x3d) = 0x24;\n    **i2c_params = **i2c_params & 0xfffffffe;\n    pclk1_freq = get_pclk1_frequency();\n    if (param1_1_value < (uint *)0x186a1) {\n      temp_var = pclk1_freq;\n      if (pclk1_freq < 2000000) {\n        temp_var = 1;\n      }\n      is_pclk1_freq_valid = (char)temp_var;\n      if (1999999 < pclk1_freq) {\n        is_pclk1_freq_valid = '\\0';\n      }\n    }\n    else {\n      temp_var = pclk1_freq;\n      if (pclk1_freq < 4000000) {\n        temp_var = 1;\n      }\n      is_pclk1_freq_valid = (char)temp_var;\n      if (3999999 < pclk1_freq) {\n        is_pclk1_freq_valid = '\\0';\n      }\n    }\n    if (is_pclk1_freq_valid == '\\0') {\n      temp_var = pclk1_freq / 1000000;\n      (*i2c_params)[1] = temp_var;\n      if ((uint *)0x186a0 < param1_1_value) {\n        temp_var = (temp_var * 300) / 1000;\n      }\n      (*i2c_params)[8] = temp_var + 1;\n      if (param1_1_value < (uint *)0x186a1) {\n        pclk1_freq = (pclk1_freq - 1) / (uint)((int)param1_1_value << 1) + 1 & 0xfff;\n        if (pclk1_freq < 4) {\n          pclk1_freq = 4;\n        }\n      }\n      else {\n        if (param1_2_value == (uint *)0x0) {\n          temp_var = (pclk1_freq - 1) / (uint)((int)param1_1_value * 3) + 1 & 0xfff;\n          is_zero = temp_var == 0;\n          if (is_zero) {\n            temp_var = 1;\n          }\n          is_pclk1_freq_valid = (char)temp_var;\n          if (!is_zero) {\n            is_pclk1_freq_valid = '\\0';\n          }\n        }\n        else {\n          temp_var = (pclk1_freq - 1) / (uint)((int)param1_1_value * 0x19) + 1 & 0xfff;\n          is_zero = temp_var == 0;\n          if (is_zero) {\n            temp_var = 1;\n          }\n          is_pclk1_freq_valid = (char)temp_var;\n          if (!is_zero) {\n            is_pclk1_freq_valid = '\\0';\n          }\n        }\n        if (is_pclk1_freq_valid == '\\0') {\n          if (param1_2_value == (uint *)0x0) {\n            pclk1_freq = (pclk1_freq - 1) / (uint)((int)param1_1_value * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            pclk1_freq = (pclk1_freq - 1) / (uint)((int)param1_1_value * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          pclk1_freq = 1;\n        }\n      }\n      (*i2c_params)[7] = pclk1_freq;\n      **i2c_params = param1_8_uint_result | param1_7_uint_result;\n      (*i2c_params)[2] = i2c_param3_uint_result | i2c_param4_uint_result;\n      (*i2c_params)[3] = i2c_param6_uint_result | i2c_param5_uint_result;\n      **i2c_params = **i2c_params | 1;\n      i2c_params[0x10] = (uint *)0x0;\n      *(undefined *)((int)i2c_params + 0x3d) = 0x20;\n      i2c_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)i2c_params + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_i2_c_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(uint)param_1[3]": "i2c_param3_uint_result",
                "(uint)param_1[4]": "i2c_param4_uint_result",
                "(uint)param_1[5]": "i2c_param5_uint_result",
                "(uint)param_1[6]": "i2c_param6_uint_result",
                "(uint)param_1[7]": "param1_7_uint_result",
                "(uint)param_1[8]": "param1_8_uint_result",
                "FUN_08001ab0": "initialize_i2_c_08001ab0",
                "HAL_I2C_MspInit": "initialize_i2_c_periph",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "bVar5": "is_zero",
                "cVar2": "is_pclk1_freq_valid",
                "param_1": "i2c_params",
                "param_1[1]": "param1_1_value",
                "param_1[2]": "param1_2_value",
                "param_1[3]": "param1_3_value",
                "param_1[4]": "param1_4_value",
                "param_1[5]": "param1_5_value",
                "param_1[6]": "param1_6_value",
                "param_1[7]": "param1_7_value",
                "param_1[8]": "param1_8_value",
                "uVar1": "pclk1_freq",
                "uVar3": "result",
                "uVar4": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "called": [],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001cb8",
            "entrypoint": "0x08001cb8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001ccc": {
            "additional_data": {
                "FUN_08001ccc": {
                    "1": "write_data_to_memory",
                    "2": "process_data",
                    "3": "send_i2_c_data",
                    "5": "perform_i2_c_write"
                },
                "I2C_RequestMemoryWrite": {
                    "7": "request_memory_write"
                },
                "I2C_WaitOnBTFFlagUntilTimeout": {
                    "1": "wait_on_btf_flag",
                    "5": "wait_on_btf_flag_until_timeout"
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "1": "wait_on_txe_flag",
                    "5": "wait_on_txe_flag_until_timeout"
                },
                "iVar1": {
                    "1": "tick_end",
                    "12": "start_tick",
                    "15": "start_time"
                },
                "iVar2": {
                    "1": "tick2",
                    "13": "current_tick",
                    "15": "current_time"
                },
                "param_1": {
                    "1": "i2c_handle",
                    "2": "i2c_params",
                    "6": "i2c_data",
                    "8": "data"
                },
                "param_2": {
                    "1": "length",
                    "11": "address",
                    "2": "address1",
                    "6": "device_address"
                },
                "param_3": {
                    "1": "reg_count",
                    "2": "param2",
                    "3": "param_3",
                    "4": "register_address"
                },
                "param_4": {
                    "1": "param_value3",
                    "2": "mem_add_size",
                    "4": "param_4"
                },
                "param_5": {
                    "1": "param5",
                    "13": "data",
                    "2": "data_buffer",
                    "3": "data_ptr",
                    "9": "buffer"
                },
                "param_6": {
                    "1": "memory_address",
                    "2": "size",
                    "3": "param6",
                    "4": "data_size"
                },
                "param_7": {
                    "1": "result",
                    "16": "timeout",
                    "2": "param6",
                    "3": "param7",
                    "4": "param_7"
                },
                "puVar4": {
                    "1": "temp_pointer",
                    "2": "current_byte",
                    "4": "byte_data"
                },
                "uVar3": {
                    "2": "return_val",
                    "25": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "calling": [
                "FUN_08004ea4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nperform_i2_c_write_08001ccc(uint **data,undefined2 address,undefined2 register_address,undefined2 param_4,uint *data,\n            undefined2 data_size,undefined4 timeout)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint *byte_ptr;\n  \n  start_time = HAL_GetTick();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        current_time = 0;\n        goto LAB_08001d9c;\n      }\n      current_time = HAL_GetTick();\n    } while ((uint)(current_time - start_time) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    current_time = 3;\nLAB_08001d9c:\n    if (current_time == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = data;\n        *(undefined2 *)((int)data + 0x2a) = data_size;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        current_time = request_memory_write(data,address,register_address,param_4,timeout,start_time);\n        if (current_time == 0) {\n          while (*(short *)(data + 10) != 0) {\n            current_time = wait_on_txe_flag_until_timeout(data,timeout,start_time);\n            if (current_time != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_ptr = data[9];\n            data[9] = (uint *)((int)byte_ptr + 1);\n            (*data)[4] = (uint)*(byte *)byte_ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              byte_ptr = data[9];\n              data[9] = (uint *)((int)byte_ptr + 1);\n              (*data)[4] = (uint)*(byte *)byte_ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          start_time = wait_on_btf_flag_until_timeout(data,timeout,start_time);\n          if (start_time == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            result = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "perform_i2_c_write_08001ccc",
            "entrypoint": "0x08001ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ccc": "perform_i2_c_write_08001ccc",
                "I2C_RequestMemoryWrite": "request_memory_write",
                "I2C_WaitOnBTFFlagUntilTimeout": "wait_on_btf_flag_until_timeout",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_on_txe_flag_until_timeout",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "data",
                "param_2": "address",
                "param_3": "register_address",
                "param_5": "data",
                "param_6": "data_size",
                "param_7": "timeout",
                "puVar4": "byte_ptr",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "additional_data": {
                "FUN_08001f6c": {
                    "1": "i2c_communication",
                    "2": "perform_i2_c_read",
                    "3": "perform_i2_c_request",
                    "4": "perform_i2_c_communication",
                    "5": "perform_i2_c_operation"
                },
                "HAL_GetTick": {
                    "1": "get_tick_count",
                    "2": "get_current_tick"
                },
                "I2C_RequestMemoryRead": {
                    "1": "make_memory_read_request",
                    "4": "request_memory_read"
                },
                "I2C_WaitOnRXNEFlagUntilTimeout": {
                    "1": "wait_on_rxne_flag",
                    "3": "wait_on_rxne_flag_until_timeout"
                },
                "disableIRQinterrupts": {
                    "1": "disable_irq",
                    "2": "disable_irq_interrupts"
                },
                "enableIRQinterrupts": {
                    "1": "enable_irq",
                    "2": "enable_interrupts"
                },
                "iVar1": {
                    "1": "start_time_stamp",
                    "12": "start_time"
                },
                "iVar3": {
                    "1": "temp_counter",
                    "2": "tick",
                    "4": "result",
                    "5": "current_time",
                    "7": "elapsed_time"
                },
                "param_1": {
                    "1": "i2c_operation",
                    "5": "i2c_params",
                    "7": "i2c_data"
                },
                "param_2": {
                    "1": "param_2",
                    "3": "param2",
                    "4": "slave_address",
                    "6": "memory_address"
                },
                "param_3": {
                    "1": "memory_address_1",
                    "2": "memory_address_extension",
                    "3": "param3",
                    "5": "memory_address"
                },
                "param_4": {
                    "1": "memory_address",
                    "2": "register_address_size",
                    "3": "param4",
                    "4": "register_address"
                },
                "param_5": {
                    "1": "param5",
                    "12": "data_buffer",
                    "2": "buffer",
                    "7": "data"
                },
                "param_6": {
                    "1": "mem_read_param_6",
                    "2": "buffer_size",
                    "3": "param6",
                    "4": "data_size",
                    "5": "data_buffer_size",
                    "9": "timeout"
                },
                "param_7": {
                    "1": "param7",
                    "18": "timeout",
                    "2": "start_tick",
                    "4": "tick_start"
                },
                "ptr_FUN_080015a0": {
                    "1": "enable_ir_qinterrupts"
                },
                "ptr_FUN_080027f4": {
                    "1": "i2c_read_write"
                },
                "ptr_FUN_08002ca8": {
                    "1": "check_i2_c_status"
                },
                "puVar5": {
                    "1": "temp_u_int_ptr",
                    "2": "ptr_data",
                    "4": "data_pointer",
                    "5": "buffer_ptr",
                    "9": "data_ptr"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "2": "data_value",
                    "3": "temp",
                    "6": "temp_var"
                },
                "uVar4": {
                    "1": "status",
                    "11": "return_value",
                    "18": "result"
                }
            },
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004ee8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nperform_i2_c_operation_08001f6c(uint **i2c_data,undefined2 memory_address,undefined2 memory_address,undefined2 register_address,uint *data_buffer,\n            undefined2 timeout,uint timeout)\n\n{\n  int start_tick;\n  uint temp_var;\n  int elapsed_time;\n  undefined4 result;\n  uint *data_ptr;\n  \n  start_tick = get_current_tick();\n  if (*(char *)((int)i2c_data + 0x3d) == ' ') {\n    do {\n      if ((~(*i2c_data)[6] & 2) != 0) {\n        elapsed_time = 0;\n        goto LAB_08002040;\n      }\n      elapsed_time = get_current_tick();\n    } while ((uint)(elapsed_time - start_tick) < 0x1a);\n    i2c_data[0xc] = (uint *)0x0;\n    *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n    *(undefined *)((int)i2c_data + 0x3e) = 0;\n    *(undefined *)(i2c_data + 0xf) = 0;\n    elapsed_time = 3;\nLAB_08002040:\n    if (elapsed_time == 0) {\n      if (*(char *)(i2c_data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(i2c_data + 0xf) = 1;\n        if ((**i2c_data & 1) != 1) {\n          **i2c_data = **i2c_data | 1;\n        }\n        **i2c_data = **i2c_data & 0xfffff7ff;\n        *(undefined *)((int)i2c_data + 0x3d) = 0x22;\n        *(undefined *)((int)i2c_data + 0x3e) = 0x40;\n        i2c_data[0x10] = (uint *)0x0;\n        i2c_data[9] = data_buffer;\n        *(undefined2 *)((int)i2c_data + 0x2a) = timeout;\n        i2c_data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(i2c_data + 10) = *(undefined2 *)((int)i2c_data + 0x2a);\n        elapsed_time = request_memory_read(i2c_data,memory_address,memory_address,register_address,timeout,start_tick);\n        if (elapsed_time == 0) {\n          if (*(short *)(i2c_data + 10) == 0) {\n            **i2c_data = **i2c_data | 0x200;\n          }\n          else if (*(short *)(i2c_data + 10) == 1) {\n            **i2c_data = **i2c_data & 0xfffffbff;\n            disable_irq_interrupts();\n            **i2c_data = **i2c_data | 0x200;\n            enable_irq_interrupts();\n          }\n          else if (*(short *)(i2c_data + 10) == 2) {\n            **i2c_data = **i2c_data | 0x800;\n            disable_irq_interrupts();\n            **i2c_data = **i2c_data & 0xfffffbff;\n            enable_irq_interrupts();\n          }\n          else {\n            **i2c_data = **i2c_data | 0x400;\n          }\n          while (*(short *)(i2c_data + 10) != 0) {\n            if (*(ushort *)(i2c_data + 10) < 4) {\n              if (*(short *)(i2c_data + 10) == 1) {\n                elapsed_time = wait_on_rxne_flag_until_timeout(i2c_data,timeout,start_tick);\n                if (elapsed_time != 0) {\n                  if (i2c_data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                temp_var = (*i2c_data)[4];\n                data_ptr = i2c_data[9];\n                i2c_data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n                *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n              }\n              else if (*(short *)(i2c_data + 10) == 2) {\n                do {\n                  if ((~(*i2c_data)[5] & 4) == 0) {\n                    elapsed_time = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (elapsed_time = get_current_tick(), (uint)(elapsed_time - start_tick) <= timeout))\n                        ));\n                i2c_data[0xc] = (uint *)0x0;\n                *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n                *(undefined *)((int)i2c_data + 0x3e) = 0;\n                *(undefined *)(i2c_data + 0xf) = 0;\n                elapsed_time = 3;\nLAB_080022fa:\n                if (elapsed_time != 0) {\n                  return 3;\n                }\n                disable_irq_interrupts();\n                **i2c_data = **i2c_data | 0x200;\n                temp_var = (*i2c_data)[4];\n                data_ptr = i2c_data[9];\n                i2c_data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n                *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n                enable_irq_interrupts();\n                temp_var = (*i2c_data)[4];\n                data_ptr = i2c_data[9];\n                i2c_data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n                *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*i2c_data)[5] & 4) == 0) {\n                    elapsed_time = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (elapsed_time = get_current_tick(), (uint)(elapsed_time - start_tick) <= timeout))\n                        ));\n                i2c_data[0xc] = (uint *)0x0;\n                *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n                *(undefined *)((int)i2c_data + 0x3e) = 0;\n                *(undefined *)(i2c_data + 0xf) = 0;\n                elapsed_time = 3;\nLAB_08002418:\n                if (elapsed_time != 0) {\n                  return 3;\n                }\n                **i2c_data = **i2c_data & 0xfffffbff;\n                disable_irq_interrupts();\n                temp_var = (*i2c_data)[4];\n                data_ptr = i2c_data[9];\n                i2c_data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n                *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n                do {\n                  if ((~(*i2c_data)[5] & 4) == 0) {\n                    elapsed_time = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (elapsed_time = get_current_tick(), (uint)(elapsed_time - start_tick) <= timeout))\n                        ));\n                i2c_data[0xc] = (uint *)0x0;\n                *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n                *(undefined *)((int)i2c_data + 0x3e) = 0;\n                *(undefined *)(i2c_data + 0xf) = 0;\n                elapsed_time = 3;\nLAB_0800250a:\n                if (elapsed_time != 0) {\n                  return 3;\n                }\n                **i2c_data = **i2c_data | 0x200;\n                temp_var = (*i2c_data)[4];\n                data_ptr = i2c_data[9];\n                i2c_data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n                *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n                enable_irq_interrupts();\n                temp_var = (*i2c_data)[4];\n                data_ptr = i2c_data[9];\n                i2c_data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n                *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n              }\n            }\n            else {\n              elapsed_time = wait_on_rxne_flag_until_timeout(i2c_data,timeout,start_tick);\n              if (elapsed_time != 0) {\n                if (i2c_data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              temp_var = (*i2c_data)[4];\n              data_ptr = i2c_data[9];\n              i2c_data[9] = (uint *)((int)data_ptr + 1);\n              *(char *)data_ptr = (char)temp_var;\n              *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n              *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n              if (((*i2c_data)[5] & 4) == 4) {\n                temp_var = (*i2c_data)[4];\n                data_ptr = i2c_data[9];\n                i2c_data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(i2c_data + 10) = *(short *)(i2c_data + 10) + -1;\n                *(short *)((int)i2c_data + 0x2a) = *(short *)((int)i2c_data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n          *(undefined *)((int)i2c_data + 0x3e) = 0;\n          *(undefined *)(i2c_data + 0xf) = 0;\n          result = 0;\n        }\n        else if (i2c_data[0x10] == (uint *)0x4) {\n          *(undefined *)(i2c_data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(i2c_data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "perform_i2_c_operation_08001f6c",
            "entrypoint": "0x08001f6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f6c": "perform_i2_c_operation_08001f6c",
                "HAL_GetTick": "get_current_tick",
                "I2C_RequestMemoryRead": "request_memory_read",
                "I2C_WaitOnRXNEFlagUntilTimeout": "wait_on_rxne_flag_until_timeout",
                "disableIRQinterrupts": "disable_irq_interrupts",
                "enableIRQinterrupts": "enable_irq_interrupts",
                "iVar1": "start_tick",
                "iVar3": "elapsed_time",
                "param_1": "i2c_data",
                "param_2": "memory_address",
                "param_3": "memory_address",
                "param_4": "register_address",
                "param_5": "data_buffer",
                "param_6": "timeout",
                "param_7": "timeout",
                "puVar5": "data_ptr",
                "uVar2": "temp_var",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002640": {
            "additional_data": {
                "FUN_080015a0": {
                    "1": "hal_get_tick"
                },
                "FUN_08002640": {
                    "1": "perform_i2_c_transmission",
                    "2": "execute_i2_c_transaction",
                    "4": "process_data",
                    "5": "perform_i2_c_transfer",
                    "6": "send_data"
                },
                "FUN_08002ad8": {
                    "1": "i2_c_wait_on_txe_flag_until_timeout"
                },
                "FUN_08002bb4": {
                    "1": "i2_c_wait_on_master_address_flag_until_timeout"
                },
                "HAL_GetTick": {
                    "1": "get_current_tick"
                },
                "I2C_WaitOnMasterAddressFlagUntilTimeout": {
                    "1": "wait_on_master_address_flag"
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "1": "wait_on_txe_flag"
                },
                "iVar1": {
                    "1": "count",
                    "2": "error_code",
                    "23": "result",
                    "4": "status"
                },
                "param_1": {
                    "1": "i2c_slave",
                    "3": "i2c_params",
                    "5": "i2c_data",
                    "9": "data"
                },
                "param_2": {
                    "1": "byte_data",
                    "2": "command",
                    "3": "byte_value",
                    "5": "address",
                    "7": "slave_address"
                },
                "param_3": {
                    "1": "parameter",
                    "2": "short_value",
                    "3": "address",
                    "4": "value",
                    "5": "data_byte",
                    "8": "register_address"
                },
                "param_4": {
                    "1": "data_format",
                    "2": "size",
                    "4": "register_address_size",
                    "6": "data_size"
                },
                "param_5": {
                    "1": "timeout_ms",
                    "30": "timeout"
                },
                "param_6": {
                    "26": "start_time",
                    "5": "start_tick"
                },
                "uVar2": {
                    "1": "return_val",
                    "19": "return_value",
                    "3": "return_code",
                    "7": "result"
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002ad8"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nsend_data_08002640(uint **data,byte control_byte,undefined2 register_address,short data_size,uint timeout,int start_time)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (result = get_current_tick(), (uint)(result - start_time) <= timeout))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = control_byte & 0xfe;\n    result = wait_on_master_address_flag(data,0x10002,timeout,start_time);\n    if (result == 0) {\n      result = wait_on_txe_flag(data,timeout,start_time,(*data)[6]);\n      if (result == 0) {\n        if (data_size == 1) {\n          (*data)[4] = (uint)(byte)register_address;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)register_address >> 8);\n          result = wait_on_txe_flag(data,timeout,start_time);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)register_address;\n        }\n        return_value = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "send_data_08002640",
            "entrypoint": "0x08002640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002640": "send_data_08002640",
                "HAL_GetTick": "get_current_tick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout": "wait_on_master_address_flag",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_on_txe_flag",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "control_byte",
                "param_3": "register_address",
                "param_4": "data_size",
                "param_5": "timeout",
                "param_6": "start_time",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080027f4": {
            "additional_data": {
                "FUN_080027f4": {
                    "1": "i2c_transfer_and_wait",
                    "10": "perform_i2_c_transaction",
                    "2": "send_data_over_i2_c",
                    "3": "send_i2_c_data",
                    "4": "send_data"
                },
                "HAL_GetTick": {
                    "1": "get_current_time"
                },
                "I2C_WaitOnMasterAddressFlagUntilTimeout": {
                    "1": "wait_for_master_address"
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "1": "wait_for_txe"
                },
                "iVar1": {
                    "13": "status",
                    "17": "result"
                },
                "param_1": {
                    "1": "pp_i2c_data",
                    "3": "i2c_handle",
                    "5": "i2c_device",
                    "8": "i2c_data"
                },
                "param_2": {
                    "1": "dev_addr",
                    "2": "address",
                    "3": "byte_value",
                    "6": "device_address",
                    "9": "slave_address"
                },
                "param_3": {
                    "1": "reg_addr",
                    "10": "register_address",
                    "2": "data",
                    "3": "reg_address",
                    "5": "address"
                },
                "param_4": {
                    "1": "data_offset",
                    "2": "data_size",
                    "3": "register_address_size",
                    "4": "data_length",
                    "6": "data"
                },
                "param_5": {
                    "1": "timeout_ms",
                    "29": "timeout"
                },
                "param_6": {
                    "23": "start_time",
                    "8": "start_tick"
                },
                "uVar2": {
                    "1": "status_code",
                    "13": "result",
                    "2": "return_val",
                    "4": "return_code",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002ad8"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nperform_i2_c_transaction_080027f4(uint **i2c_data,byte slave_address,undefined2 register_address,short data,uint timeout,int start_time)\n\n{\n  int result;\n  undefined4 result;\n  \n  **i2c_data = **i2c_data | 0x400;\n  **i2c_data = **i2c_data | 0x100;\n  do {\n    if ((~(*i2c_data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (result = get_current_tick(), (uint)(result - start_time) <= timeout))));\n  i2c_data[0xc] = (uint *)0x0;\n  *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n  *(undefined *)((int)i2c_data + 0x3e) = 0;\n  *(undefined *)(i2c_data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*i2c_data)[4] = slave_address & 0xfe;\n    result = wait_on_master_address_flag_until_timeout(i2c_data,0x10002,timeout,start_time);\n    if (result == 0) {\n      result = wait_on_txe_flag_until_timeout(i2c_data,timeout,start_time,(*i2c_data)[6]);\n      if (result == 0) {\n        if (data == 1) {\n          (*i2c_data)[4] = (uint)(byte)register_address;\n        }\n        else {\n          (*i2c_data)[4] = (uint)(byte)((ushort)register_address >> 8);\n          result = wait_on_txe_flag_until_timeout(i2c_data,timeout,start_time);\n          if (result != 0) {\n            if (i2c_data[0x10] == (uint *)0x4) {\n              **i2c_data = **i2c_data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*i2c_data)[4] = (uint)(byte)register_address;\n        }\n        result = wait_on_txe_flag_until_timeout(i2c_data,timeout,start_time);\n        if (result == 0) {\n          **i2c_data = **i2c_data | 0x100;\n          do {\n            if ((~(*i2c_data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (result = get_current_tick(), (uint)(result - start_time) <= timeout))));\n          i2c_data[0xc] = (uint *)0x0;\n          *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n          *(undefined *)((int)i2c_data + 0x3e) = 0;\n          *(undefined *)(i2c_data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*i2c_data)[4] = (uint)(slave_address | 1);\n            result = wait_on_master_address_flag_until_timeout(i2c_data,0x10002,timeout,start_time);\n            if (result == 0) {\n              result = 0;\n            }\n            else if (i2c_data[0x10] == (uint *)0x4) {\n              result = 1;\n            }\n            else {\n              result = 3;\n            }\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (i2c_data[0x10] == (uint *)0x4) {\n          **i2c_data = **i2c_data | 0x200;\n          result = 1;\n        }\n        else {\n          result = 3;\n        }\n      }\n      else if (i2c_data[0x10] == (uint *)0x4) {\n        **i2c_data = **i2c_data | 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (i2c_data[0x10] == (uint *)0x4) {\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else {\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "perform_i2_c_transaction_080027f4",
            "entrypoint": "0x080027f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080027f4": "perform_i2_c_transaction_080027f4",
                "HAL_GetTick": "get_current_tick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout": "wait_on_master_address_flag_until_timeout",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_on_txe_flag_until_timeout",
                "iVar1": "result",
                "param_1": "i2c_data",
                "param_2": "slave_address",
                "param_3": "register_address",
                "param_4": "data",
                "param_5": "timeout",
                "param_6": "start_time",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "additional_data": {
                "(**param_1)[5]": {
                    "1": "param1_element5"
                },
                "(**param_1)[6]": {
                    "1": "param1_element6"
                },
                "(*param_1)[5]": {
                    "1": "mask1"
                },
                "(*param_1)[6]": {
                    "1": "mask2"
                },
                "**param_1": {
                    "1": "data_value"
                },
                "0x10": {
                    "1": "index10"
                },
                "0xc": {
                    "1": "index_c"
                },
                "FUN_08002ad8": {
                    "1": "check_parameter_validity",
                    "2": "check_flag_validity",
                    "3": "check_and_modify_params"
                },
                "HAL_GetTick": {
                    "2": "get_current_time"
                },
                "HAL_GetTick()": {
                    "1": "get_tick_count"
                },
                "Hal_GetTick": {
                    "1": "get_current_tick"
                },
                "bVar4": {
                    "1": "is_permission_updated",
                    "2": "is_not_zero",
                    "3": "is_nonzero",
                    "4": "is_updated",
                    "5": "is_modified",
                    "7": "is_non_zero"
                },
                "cVar2": {
                    "1": "is_param_set",
                    "17": "result",
                    "2": "is_valid",
                    "3": "result_char"
                },
                "iVar1": {
                    "1": "tick_diff",
                    "10": "current_tick",
                    "14": "current_time",
                    "2": "tick_difference"
                },
                "param_1": {
                    "1": "ptr_to_param1",
                    "2": "flags",
                    "3": "data",
                    "7": "param_array"
                },
                "param_1[5]": {
                    "1": "permission_bitmask1"
                },
                "param_1[6]": {
                    "1": "permission_bitmask2"
                },
                "param_2": {
                    "1": "status",
                    "10": "value",
                    "2": "flag_value",
                    "3": "flags",
                    "5": "flag"
                },
                "param_3": {
                    "1": "time_limit",
                    "2": "value2",
                    "26": "timeout"
                },
                "param_4": {
                    "1": "start_timestamp",
                    "10": "start_tick",
                    "16": "start_time",
                    "2": "value3"
                },
                "uVar3": {
                    "1": "flag_result",
                    "2": "temp",
                    "4": "updated_value",
                    "5": "modified_value",
                    "6": "masked_value"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "code": "\nundefined4 check_and_modify_params_08002ad8(uint **param_array,uint value,uint timeout,int start_time)\n\n{\n  int current_time;\n  char result;\n  uint masked_value;\n  bool is_non_zero;\n  \n  do {\n    if ((value >> 0x10 & 0xff) == 1) {\n      masked_value = value & ~(*param_array)[5] & 0xffff;\n      is_non_zero = masked_value != 0;\n      if (is_non_zero) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_non_zero) {\n        result = '\\0';\n      }\n    }\n    else {\n      masked_value = value & ~(*param_array)[6] & 0xffff;\n      is_non_zero = masked_value != 0;\n      if (is_non_zero) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_non_zero) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*param_array)[5] & 0x400) == 0x400) {\n      **param_array = **param_array | 0x200;\n      (*param_array)[5] = 0xfffffbff;\n      param_array[0x10] = (uint *)0x4;\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)(param_array + 0xf) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = get_tick_count, (uint)(current_time - start_time) <= timeout))));\n  param_array[0xc] = (uint *)0x0;\n  *(undefined *)((int)param_array + 0x3d) = 0x20;\n  *(undefined *)(param_array + 0xf) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_and_modify_params_08002ad8",
            "entrypoint": "0x08002ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad8": "check_and_modify_params_08002ad8",
                "HAL_GetTick": "get_current_time",
                "HAL_GetTick()": "get_tick_count",
                "bVar4": "is_non_zero",
                "cVar2": "result",
                "iVar1": "current_time",
                "param_1": "param_array",
                "param_2": "value",
                "param_3": "timeout",
                "param_4": "start_time",
                "uVar3": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "additional_data": {
                "(int)param_1 + 0x3d": {
                    "1": "control_register"
                },
                "(param_2 != 0xffffffff)": {
                    "1": "has_timeout"
                },
                "(param_2 < (uint)(iVar1 - param_3))": {
                    "1": "is_timeout_elapsed"
                },
                "(param_2 == 0)": {
                    "1": "is_timeout_zero"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "error_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "reset_flag"
                },
                "0x20": {
                    "1": "reset_flag_bit"
                },
                "1": {
                    "1": "i2_c_ok"
                },
                "3": {
                    "1": "timeout_occurred"
                },
                "Dptr": {
                    "1": "data_ptr"
                },
                "FPtr": {
                    "1": "finish_status"
                },
                "FUN_080015a0": {
                    "1": "get_system_tick",
                    "13": "hal_get_tick",
                    "2": "get_tick_count",
                    "3": "get_tick"
                },
                "FUN_08002bb4": {
                    "1": "check_communication",
                    "2": "check_i2c_status",
                    "6": "check_i2_c_status",
                    "9": "check_i2_c_acknowledge"
                },
                "FUN_08002d3c": {
                    "1": "check_acknowledge_failed",
                    "13": "i2_c_is_acknowledge_failed",
                    "8": "is_acknowledge_failed"
                },
                "F_080015a0": {
                    "1": "get_tick"
                },
                "F_08002d3c": {
                    "1": "is_acknowledge_failed"
                },
                "HAL_GetTick": {
                    "3": "get_current_time",
                    "4": "get_current_tick"
                },
                "I2C_IsAcknowledgeFailed": {
                    "1": "is_acknowledgment_failed",
                    "3": "is_acknowledge_failed"
                },
                "false": {
                    "1": "acknowledge_ok"
                },
                "iVar1": {
                    "1": "is_ack_failed",
                    "11": "acknowledge_failed",
                    "13": "is_acknowledge_failed",
                    "3": "ack_failed"
                },
                "param_1": {
                    "1": "i2c_reg",
                    "2": "i2c_params",
                    "3": "i2c_registers",
                    "8": "i2c_data"
                },
                "param_1 + 0xf": {
                    "1": "status_ptr"
                },
                "param_1+0xf": {
                    "1": "flag"
                },
                "param_1[0x10]": {
                    "1": "i2c_status_bit_mask"
                },
                "param_1[0x14]": {
                    "1": "status_register"
                },
                "param_1[0xc]": {
                    "1": "reset_flag"
                },
                "param_2": {
                    "1": "desired_tick",
                    "2": "elapsed_time",
                    "24": "timeout",
                    "3": "time_limit"
                },
                "param_3": {
                    "1": "start_ticks",
                    "14": "start_time"
                },
                "true": {
                    "1": "acknowledge_failed"
                }
            },
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "code": "\nundefined4 check_i2_c_acknowledge_08002bb4(int *i2c_data,uint timeout,int start_time)\n\n{\n  int is_acknowledge_failed;\n  \n  while( acknowledge_failed ) {\n    if ((*(uint *)(*i2c_data + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    is_acknowledge_failed = is_acknowledge_failed(i2c_data);\n    if (is_acknowledge_failed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (is_acknowledge_failed = get_current_tick(), timeout < (uint)(is_acknowledge_failed - start_time))))) {\n      data[16] = data[16] | 0x20;\n      data[12] = 0;\n      *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n      *(undefined *)(i2c_data + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_i2_c_acknowledge_08002bb4",
            "entrypoint": "0x08002bb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002bb4": "check_i2_c_acknowledge_08002bb4",
                "HAL_GetTick": "get_current_tick",
                "I2C_IsAcknowledgeFailed": "is_acknowledge_failed",
                "iVar1": "is_acknowledge_failed",
                "param_1": "i2c_data",
                "param_1[0x10]": "data[16]",
                "param_1[0xc]": "data[12]",
                "param_2": "timeout",
                "param_3": "start_time",
                "true": "acknowledge_failed"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "i2c_status"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "reg3"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "reg4"
                },
                "0": {
                    "2": "zero"
                },
                "0x10": {
                    "1": "register1"
                },
                "0x14": {
                    "1": "control_register"
                },
                "0x20": {
                    "1": "busy_flag"
                },
                "0x3d": {
                    "1": "flag_address"
                },
                "0xc": {
                    "1": "register2"
                },
                "0xf": {
                    "1": "pointer"
                },
                "0xffffffff": {
                    "2": "invalid_timeout"
                },
                "1": {
                    "1": "success"
                },
                "3": {
                    "1": "timeout_expired"
                },
                "4": {
                    "1": "acknowledge_flag"
                },
                "FUN_080015a0": {
                    "1": "get_tick_count",
                    "13": "hal_get_tick",
                    "2": "get_tick"
                },
                "FUN_08002c2e": {
                    "1": "check_i2c_acknowledge",
                    "11": "check_i2_c_status",
                    "5": "check_i2_c_acknowledgement",
                    "6": "check_i2_c_acknowledge"
                },
                "FUN_08002d3c": {
                    "1": "is_i2c_acknowledge_failed",
                    "14": "i2_c_is_acknowledge_failed",
                    "4": "is_acknowledge_failed"
                },
                "HAL_GetTick": {
                    "1": "get_system_tick",
                    "3": "get_current_tick",
                    "9": "get_current_time"
                },
                "I2C_IsAcknowledgeFailed": {
                    "1": "check_for_acknowledge_failed",
                    "2": "check_acknowledge_failed",
                    "5": "is_acknowledge_failed"
                },
                "iVar1": {
                    "1": "failure",
                    "11": "acknowledge_failed",
                    "2": "ack_failed",
                    "3": "is_ack_failed"
                },
                "param_1": {
                    "1": "transmission_data",
                    "2": "i2c_device",
                    "3": "i2c_registers",
                    "7": "i2c_data",
                    "8": "i2c_params"
                },
                "param_1 + 0x3d": {
                    "1": "flag"
                },
                "param_1 + 0xf": {
                    "1": "pointer1"
                },
                "param_1[0x10]": {
                    "1": "i2c_registers[16]",
                    "2": "i2c_params[16]"
                },
                "param_1[0x14]": {
                    "1": "i2c_status",
                    "2": "i2c_params[20]"
                },
                "param_1[0xc]": {
                    "1": "count",
                    "2": "i2c_params[12]"
                },
                "param_2": {
                    "1": "time_limit",
                    "28": "timeout"
                },
                "param_3": {
                    "1": "initial_time",
                    "24": "start_time",
                    "6": "start_tick"
                },
                "return 0": {
                    "1": "success"
                },
                "return 1": {
                    "1": "failure"
                },
                "return 3": {
                    "1": "timeout"
                }
            },
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\nundefined4 check_i2_c_status_08002c2e(int *i2c_params,uint timeout,int start_time)\n\n{\n  int acknowledge_failed;\n  \n  while( true ) {\n    if ((*(uint *)(*i2c_params + 0x14) & 4) == 4) {\n      return 0;\n    }\n    acknowledge_failed = is_acknowledge_failed(i2c_params);\n    if (acknowledge_failed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (acknowledge_failed = get_current_time(), timeout < (uint)(acknowledge_failed - start_time))))) {\n      i2c_params[16] = i2c_params[16] | 0x20;\n      i2c_params[12] = 0;\n      *(undefined *)((int)i2c_params + 0x3d) = 0x20;\n      *(undefined *)(i2c_params + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_i2_c_status_08002c2e",
            "entrypoint": "0x08002c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c2e": "check_i2_c_status_08002c2e",
                "HAL_GetTick": "get_current_time",
                "I2C_IsAcknowledgeFailed": "is_acknowledge_failed",
                "iVar1": "acknowledge_failed",
                "param_1": "i2c_params",
                "param_1[0x10]": "i2c_params[16]",
                "param_1[0xc]": "i2c_params[12]",
                "param_2": "timeout",
                "param_3": "start_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "additional_data": {
                "(int)param_1 + 0x3d": {
                    "1": "special_flag"
                },
                "FUN_080015a0": {
                    "1": "helper_function"
                },
                "FUN_08002ca8": {
                    "1": "check_timeout_and_update_status",
                    "12": "check_timeout",
                    "2": "check_status_and_time"
                },
                "HAL_GetTick": {
                    "1": "get_tick",
                    "4": "get_current_tick"
                },
                "PTR_DAT_080015a0": {
                    "1": "sub_function"
                },
                "iVar1": {
                    "1": "elapsed_time",
                    "14": "current_tick",
                    "15": "current_time"
                },
                "param_1": {
                    "1": "input_array",
                    "13": "data",
                    "2": "status",
                    "4": "data_pointer"
                },
                "param_1 + 0xf": {
                    "1": "additional_flags"
                },
                "param_1[0x10]": {
                    "1": "data_flag_byte"
                },
                "param_2": {
                    "1": "timeout_limit",
                    "27": "timeout"
                },
                "param_3": {
                    "1": "startup_time",
                    "2": "previous_time",
                    "22": "start_time",
                    "4": "previous_tick"
                },
                "pointerMagic": {
                    "1": "pointer_magic"
                },
                "ptr_1": {
                    "1": "data_flag"
                },
                "ptr_2": {
                    "1": "data_status_flag"
                },
                "ptr_3": {
                    "1": "data_byte"
                },
                "ptr_4": {
                    "1": "status_byte"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\nundefined4 check_timeout_08002ca8(int *data,uint timeout,int start_time)\n\n{\n  int current_time;\n  \n  while( true ) {\n    if ((*(uint *)(*data + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*data + 0x14) & 0x10) == 0x10) break;\n    if ((timeout == 0) || (current_time = get_current_tick(), timeout < (uint)(current_time - start_time))) {\n      status_flag = status_flag | 0x20;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*data + 0x14) = 0xffffffef;\n  status_flag = 0;\n  data[0xc] = 0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 1;\n}\n\n",
            "current_name": "check_timeout_08002ca8",
            "entrypoint": "0x08002ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ca8": "check_timeout_08002ca8",
                "HAL_GetTick": "get_current_tick",
                "iVar1": "current_time",
                "param_1": "data",
                "param_1[0x10]": "status_flag",
                "param_2": "timeout",
                "param_3": "start_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "additional_data": {
                "(int)param_1 + 0x3d": {
                    "1": "status"
                },
                "(param_1 + 0xf)": {
                    "1": "data_address"
                },
                "(uint *)(*param_1 + 0x14)": {
                    "1": "flag_ptr"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "permission_flags",
                    "5": "flag_value"
                },
                "*(uint *)(*param_1 + 0x14) & 0x400": {
                    "1": "flag_check"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_character"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "data_value",
                    "2": "status"
                },
                "*(undefined4 *)(*param_1 + 0x14)": {
                    "1": "modified_flag_value"
                },
                "*param_1": {
                    "1": "parameter_value"
                },
                "*param_1 + 0x14": {
                    "1": "flag_address"
                },
                "0": {
                    "1": "zero"
                },
                "0x10": {
                    "1": "array_element_10"
                },
                "0x14": {
                    "2": "offset"
                },
                "0x20": {
                    "1": "char_constant"
                },
                "0x3d": {
                    "1": "offset_3d"
                },
                "0x400": {
                    "1": "flag_constant",
                    "2": "flag_mask"
                },
                "0xc": {
                    "1": "array_element_c"
                },
                "0xfffffbff": {
                    "1": "flag_clear_mask",
                    "3": "new_flag_value"
                },
                "4": {
                    "1": "some_constant"
                },
                "FUN_08002d3c": {
                    "1": "update_flags_and_values",
                    "11": "check_flag_status",
                    "7": "check_flag"
                },
                "bVar1": {
                    "1": "is_set",
                    "24": "is_flag_set",
                    "3": "has_flag"
                },
                "param_1": {
                    "1": "permissions",
                    "2": "flag",
                    "3": "flag_ptr"
                },
                "param_1 + 0xf": {
                    "1": "value_ptr"
                },
                "param_1[0x10]": {
                    "1": "status_value",
                    "6": "error_code"
                },
                "param_1[0xc]": {
                    "1": "offset",
                    "7": "counter"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "undefined4": {
                    "1": "four_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "code": "\nbool check_flag_status_08002d3c(int *flag_status)\n\n{\n  bool is_flag_set;\n  \n  is_flag_set = (*(unsigned_int *)(*flag_status + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(four_byte *)(*flag_status + 0x14) = 0xfffffbff;\n    error_code = 4;\n    counter = 0;\n    *(undefined *)((int)flag_status + 0x3d) = 0x20;\n    *(undefined *)(flag_status + 0xf) = 0;\n  }\n  return is_flag_set;\n}\n\n",
            "current_name": "check_flag_status_08002d3c",
            "entrypoint": "0x08002d3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "bVar1": "is_flag_set",
                "param_1": "flag_status",
                "param_1[0x10]": "error_code",
                "param_1[0xc]": "counter",
                "uint": "unsigned_int",
                "undefined4": "four_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "called": [],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002d8a",
            "entrypoint": "0x08002d8a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002d98": {
            "additional_data": {
                "0": {
                    "1": "failure"
                },
                "1": {
                    "1": "success"
                },
                "2": {
                    "1": "option"
                },
                "3": {
                    "1": "timeout"
                },
                "5": {
                    "1": "other_option"
                },
                "FUN_080015a0": {
                    "1": "helper_function_1"
                },
                "FUN_08002d98": {
                    "1": "control_function",
                    "3": "process_flags"
                },
                "FUN_08003568": {
                    "1": "process_data"
                },
                "HAL_GetTick": {
                    "1": "get_elapsed_ticks",
                    "3": "get_tick_count",
                    "4": "get_tick",
                    "7": "get_current_time"
                },
                "HAL_GetTick()": {
                    "1": "get_current_time()"
                },
                "PTR_FUN_080015a0": {
                    "1": "initialize_system"
                },
                "PTR_FUN_08003568": {
                    "1": "delay_execution"
                },
                "RCC_Delay": {
                    "5": "delay"
                },
                "_DAT_40007000": {
                    "1": "register_value5",
                    "2": "register5",
                    "3": "register4"
                },
                "_DAT_40007000 & 0x100": {
                    "1": "register6_flag"
                },
                "_DAT_40021000": {
                    "1": "control_register2",
                    "2": "control_register",
                    "7": "register2"
                },
                "_DAT_40021000 & 0x2000000": {
                    "1": "register2_flag2"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "2": "register_value",
                    "4": "register1"
                },
                "_DAT_40021004 & 0x10000": {
                    "1": "register1_sub_condition"
                },
                "_DAT_40021004 & 0xc": {
                    "1": "register1_condition"
                },
                "_DAT_40021004 & 0xffc2ffff": {
                    "1": "updated_register2"
                },
                "_DAT_40021004 & 0xfffdffff": {
                    "1": "updated_register1"
                },
                "_DAT_40021004 | _DAT_40021004 & 0xffc2ffff": {
                    "1": "updated_control_register1"
                },
                "_DAT_40021004 | param_1[9] | param_1[8] | _DAT_40021004 & 0xffc2ffff": {
                    "1": "updated_control_register2"
                },
                "_DAT_4002101c": {
                    "1": "another_control_reg",
                    "2": "register4",
                    "4": "register5"
                },
                "_DAT_4002101c & 0x10000000": {
                    "1": "register5_condition"
                },
                "_DAT_40021020": {
                    "1": "another_status_reg",
                    "2": "register4",
                    "4": "register6"
                },
                "_DAT_40021024": {
                    "1": "register_4",
                    "2": "register7",
                    "4": "register3"
                },
                "_DAT_42420000": {
                    "1": "register_block7",
                    "2": "register3",
                    "3": "flag1"
                },
                "_DAT_42420060": {
                    "1": "data7",
                    "2": "flag2"
                },
                "_DAT_42420480": {
                    "1": "flag2",
                    "2": "register8"
                },
                "bVar4": {
                    "1": "is_set",
                    "2": "flag_set",
                    "3": "is_condition_met",
                    "7": "flag",
                    "9": "is_flag_set"
                },
                "controlRegister2 & 0x10000": {
                    "1": "is_another_condition_met"
                },
                "controlRegister2 & 0x2": {
                    "1": "is_different_condition_met"
                },
                "controlRegister2 & 0x20000": {
                    "1": "is_condition_met"
                },
                "iVar1": {
                    "1": "init_time",
                    "2": "tick_start",
                    "23": "start_time",
                    "3": "start_tick"
                },
                "iVar2": {
                    "1": "previous_time",
                    "2": "tick_current",
                    "23": "current_time",
                    "3": "current_tick"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_data",
                    "3": "parameter",
                    "4": "parameters",
                    "9": "flags"
                },
                "param_1[1]": {
                    "1": "param1_value"
                },
                "param_1[2]": {
                    "1": "parameter1_index2"
                },
                "param_1[3]": {
                    "1": "parameter1_index3"
                },
                "param_1[4]": {
                    "1": "param4_value"
                },
                "param_1[5]": {
                    "1": "parameter1_index5"
                },
                "param_1[6]": {
                    "1": "param6_value"
                },
                "param_1[7]": {
                    "1": "param7_value"
                },
                "param_1[8]": {
                    "1": "param8_value"
                },
                "param_1[9]": {
                    "1": "parameter1_index9"
                },
                "parameter[3]": {
                    "1": "parameter3"
                },
                "register1": {
                    "1": "register4"
                },
                "register1 & 0x10000": {
                    "1": "register1_flag"
                },
                "register1 & 0xc": {
                    "1": "register1_value"
                },
                "register2": {
                    "1": "register2"
                },
                "register2 & 0x100": {
                    "1": "register2_flag"
                },
                "register2 & 0x20000": {
                    "1": "register2_flag"
                },
                "register2 & 2": {
                    "1": "register2_flag"
                },
                "register4 & 2": {
                    "1": "register4_flag"
                },
                "register_1": {
                    "1": "some_value_1"
                },
                "register_2": {
                    "1": "some_value_2"
                },
                "return": {
                    "1": "result"
                },
                "uVar3": {
                    "19": "result",
                    "2": "return_value"
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 process_flags_08002d98(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool is_flag_set;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (param1_value == 0)) {\n        result 1;\n      }\n    }\n    else {\n      if (param1_value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (param1_value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (param1_value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (param1_value == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            result 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            result 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (param4_value != 1)) {\n        result 1;\n      }\n      _DAT_40021000 = parameter1_index5 << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (param4_value == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          result 3;\n        }\n      }\n      _DAT_40021000 = parameter1_index5 << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (param6_value == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          result 3;\n        }\n      }\n      delay(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    if (parameter1_index3 == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (parameter1_index3 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (parameter1_index3 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (parameter1_index3 == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (param7_value == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (param7_value == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (parameter1_index8 == 0x10000) {\n          _DAT_40021004 = parameter1_index2 | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = parameter1_index9 | parameter1_index8 | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          current_time = get_current_time();\n          if (2 < (uint)(current_time - start_time)) {\n            result 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  result result;\n}\n\n",
            "current_name": "process_flags_08002d98",
            "entrypoint": "0x08002d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d98": "process_flags_08002d98",
                "HAL_GetTick": "get_current_time",
                "HAL_GetTick()": "get_current_time()",
                "RCC_Delay": "delay",
                "bVar4": "is_flag_set",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "flags",
                "param_1[1]": "param1_value",
                "param_1[2]": "parameter1_index2",
                "param_1[3]": "parameter1_index3",
                "param_1[4]": "param4_value",
                "param_1[5]": "parameter1_index5",
                "param_1[6]": "param6_value",
                "param_1[7]": "param7_value",
                "param_1[8]": "parameter1_index8",
                "param_1[9]": "parameter1_index9",
                "return": "result",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003260": {
            "additional_data": {
                "DAT_08009eb0": {
                    "1": "frequency_table"
                },
                "DAT_20000018": {
                    "1": "system_divisor"
                },
                "FUN_0800151c": {
                    "1": "function_b"
                },
                "FUN_080015a0": {
                    "1": "function_c"
                },
                "FUN_08003260": {
                    "1": "initialize_and_configure",
                    "15": "initialize_system",
                    "3": "configure_clock",
                    "6": "configure_system_clock"
                },
                "FUN_08003440": {
                    "1": "get_gpio_config"
                },
                "HAL_GetTick": {
                    "1": "get_sys_tick",
                    "3": "get_tick_count",
                    "4": "get_tick"
                },
                "HAL_InitTick": {
                    "1": "init_tick",
                    "2": "initialize_sys_tick",
                    "9": "initialize_tick"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "1": "get_system_clock_freq",
                    "2": "get_sys_clock_freq",
                    "3": "get_system_clock_frequency",
                    "6": "get_sys_clock_frequency"
                },
                "_DAT_40021000": {
                    "1": "register_value"
                },
                "_DAT_40021004": {
                    "1": "system_config_register",
                    "2": "clock_config"
                },
                "_DAT_40022000": {
                    "1": "reg_var1",
                    "2": "hardware_config"
                },
                "iVar1": {
                    "1": "start_ticks",
                    "18": "start_time",
                    "7": "start_tick"
                },
                "iVar2": {
                    "1": "current_ticks",
                    "18": "current_time",
                    "8": "current_tick"
                },
                "param_1": {
                    "1": "configuration",
                    "15": "config_params",
                    "3": "config_data"
                },
                "param_1[2]": {
                    "1": "config_value2"
                },
                "param_1[3]": {
                    "1": "config_flag3"
                },
                "param_1[4]": {
                    "1": "config_value4"
                },
                "param_2": {
                    "1": "config_flags",
                    "2": "clock_freq",
                    "7": "config_size",
                    "9": "clock_source"
                },
                "uVar3": {
                    "1": "system_clock",
                    "26": "sys_clock_freq"
                },
                "uVar4": {
                    "1": "success",
                    "19": "result",
                    "2": "return_val",
                    "4": "status"
                }
            },
            "called": [
                "FUN_08003440",
                "FUN_0800151c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 initialize_system_08003260(uint *config_params,uint clock_source)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < clock_source) &&\n     (_DAT_40022000 = clock_source | _DAT_40022000 & 0xfffffff8, clock_source != (clock_source & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*config_params & 2) != 0) {\n      _DAT_40021004 = config_flag2 | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*config_params & 1) == 0) {\nLAB_08003394:\n      if ((clock_source < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = clock_source | _DAT_40022000 & 0xfffffff8, clock_source != (clock_source & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*config_params & 4) != 0) {\n          _DAT_40021004 = config_flag3 | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*config_params & 8) != 0) {\n          _DAT_40021004 = config_flag4 << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        sys_clock_freq = get_sys_clock_frequency();\n        DAT_20000018 = sys_clock_freq >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        initialize_tick(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (config_params[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((config_params[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = config_params[1] | _DAT_40021004 & 0xfffffffc;\n      start_time = get_tick();\n      if (config_params[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_time = get_tick();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n      else if (config_params[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_time = get_tick();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_time = get_tick();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_system_08003260",
            "entrypoint": "0x08003260",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003260": "initialize_system_08003260",
                "HAL_GetTick": "get_tick",
                "HAL_InitTick": "initialize_tick",
                "HAL_RCC_GetSysClockFreq": "get_sys_clock_frequency",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "config_params",
                "param_1[2]": "config_flag2",
                "param_1[3]": "config_flag3",
                "param_1[4]": "config_flag4",
                "param_2": "clock_source",
                "uVar3": "sys_clock_freq",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003440": {
            "additional_data": {
                "DAT_40021004": {
                    "1": "register_value"
                },
                "FUN_08003440": {
                    "1": "calculate_wait_time",
                    "17": "calculate_execution_time",
                    "4": "calculate_delay"
                },
                "_DAT_40021004": {
                    "1": "input_value"
                },
                "local_10": {
                    "1": "clock_speed",
                    "2": "final_execution_time",
                    "5": "result",
                    "8": "execution_time"
                },
                "local_14": {
                    "1": "unused_var2",
                    "2": "status",
                    "4": "data_value",
                    "5": "dat_40021004"
                },
                "local_18": {
                    "1": "temp_variable",
                    "2": "value_2",
                    "5": "temp"
                },
                "local_1c": {
                    "1": "input_value1",
                    "2": "value_1",
                    "8": "result"
                },
                "local_2c": {
                    "1": "field_1",
                    "10": "value1",
                    "2": "constant_1",
                    "7": "constant1"
                },
                "local_30": {
                    "1": "value1",
                    "2": "config_value",
                    "4": "counter",
                    "5": "execution_time"
                },
                "local_c": {
                    "1": "calculation1",
                    "2": "temp1",
                    "3": "result"
                },
                "uStack_20": {
                    "1": "value_d",
                    "10": "value4",
                    "2": "constant_4",
                    "7": "constant4"
                },
                "uStack_24": {
                    "1": "constant2",
                    "10": "value3",
                    "2": "constant_c",
                    "7": "constant3"
                },
                "uStack_28": {
                    "1": "value_register_3",
                    "10": "value2",
                    "2": "constant_2",
                    "7": "constant2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003260"
            ],
            "code": "\n\n\nuint calculate_execution_time_08003440(void)\n\n{\n  undefined2 execution_time;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  uint result;\n  undefined4 temp;\n  uint data;\n  uint execution_time;\n  uint result;\n  \n  value1 = 0x5040302;\n  value2 = 0x9080706;\n  value3 = 0xd0c0b0a;\n  value4 = 0x10100f0e;\n  execution_time = 0x201;\n  temp = 0;\n  result = 0;\n  result = 0;\n  execution_time = 0;\n  data = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    execution_time = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&value1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      result = result * 4000000;\n    }\n    else {\n      result = (result * 8000000) / (uint)*(byte *)((int)&execution_time + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    execution_time = result;\n  }\n  else {\n    execution_time = 8000000;\n  }\n  return execution_time;\n}\n\n",
            "current_name": "calculate_execution_time_08003440",
            "entrypoint": "0x08003440",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_10": "execution_time",
                "local_14": "data",
                "local_18": "temp",
                "local_1c": "result",
                "local_2c": "value1",
                "local_30": "execution_time",
                "local_c": "result",
                "uStack_20": "value4",
                "uStack_24": "value3",
                "uStack_28": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003504": {
            "additional_data": {
                "DAT_20000018": {
                    "1": "data_offset",
                    "12": "data",
                    "2": "global_variable",
                    "3": "data_value"
                },
                "FUN_08003504": {
                    "1": "get_data_variable",
                    "14": "get_data",
                    "2": "get_data_constant",
                    "3": "get_global_variable",
                    "9": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003540",
                "FUN_08003518",
                "FUN_080052a0"
            ],
            "code": "\nundefined4 get_data_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_08003504",
            "entrypoint": "0x08003504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003504": "get_data_08003504"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003518": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "&DAT_08009ec0": {
                    "1": "byte_array",
                    "2": "data_address"
                },
                "(int)&DAT_08009ec0": {
                    "1": "constant_data_address"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_08009ec0": {
                    "1": "base_data",
                    "2": "constant"
                },
                "FUN_08003504": {
                    "1": "get_hclk_freq_divisor",
                    "3": "get_hclk_frequency",
                    "5": "get_hclk_freq"
                },
                "FUN_08003518": {
                    "1": "get_hclk_frequency_shifted",
                    "2": "calculate_adjusted_frequency",
                    "3": "get_adjusted_clock_frequency",
                    "4": "get_hclk_frequency",
                    "7": "get_adjusted_hclk_freq"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_current_hclk_frequency",
                    "3": "get_hclk_freq",
                    "4": "get_hclk_frequency"
                },
                "_DAT_40021004": {
                    "1": "param",
                    "2": "shift_amount",
                    "3": "input_data"
                },
                "_DAT_40021004 >> 8 & 7": {
                    "1": "shifted_input_data"
                },
                "getShiftedClockFrequency": {
                    "1": "get_shifted_clock_frequency"
                },
                "sbyte": {
                    "1": "byte",
                    "3": "shift_amount",
                    "5": "shift_value"
                },
                "sbyte *": {
                    "1": "byte_pointer"
                },
                "sbyte *((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7))": {
                    "1": "shift_value"
                },
                "sbyte_08009ec0": {
                    "1": "offset"
                },
                "sbyte_1": {
                    "2": "shift_value"
                },
                "uVar1": {
                    "1": "clk_freq",
                    "11": "hclk_freq",
                    "2": "clock_frequency",
                    "3": "hclk_frequency"
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "code": "\n\n\nuint get_adjusted_hclk_freq_08003518(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_frequency();\n  return hclk_freq >> *(shift_value *)((int)bitwise_andDAT_08009ec0 + (_DAT_40021004 >> 8 bitwise_and 7));\n}\n\n",
            "current_name": "get_adjusted_hclk_freq_08003518",
            "entrypoint": "0x08003518",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_08003518": "get_adjusted_hclk_freq_08003518",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency",
                "sbyte": "shift_value",
                "uVar1": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003540": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "&DAT_08009ec0": {
                    "1": "data_array",
                    "2": "data_address"
                },
                "*": {
                    "1": "result"
                },
                "*((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7))": {
                    "1": "bit_offset"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_08009ec0": {
                    "1": "data_address",
                    "2": "data"
                },
                "FUN_08003504": {
                    "1": "retrieve_function"
                },
                "FUN_08003540": {
                    "1": "calculate_updated_hclk_freq",
                    "10": "get_adjusted_hclk_freq",
                    "2": "get_adjusted_frequency",
                    "5": "get_hclk_frequency"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_current_frequency",
                    "2": "get_current_hclk_freq",
                    "4": "get_hclk_frequency",
                    "8": "get_hclk_freq"
                },
                "_DAT_40021004": {
                    "1": "hclk_freq_divisor",
                    "2": "input_value",
                    "3": "value"
                },
                "sbyte": {
                    "1": "byte_value",
                    "2": "shift_amount",
                    "3": "offset"
                },
                "sbyte *": {
                    "1": "shift_value"
                },
                "sbyte * ((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7))": {
                    "1": "shift_amount"
                },
                "sbyte *((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7))": {
                    "1": "shift_value",
                    "2": "shift_amount"
                },
                "sbyte_08009ec0": {
                    "1": "freq_offset",
                    "2": "shift_value"
                },
                "sbyte_var": {
                    "1": "shift_amount"
                },
                "sbyte_variable": {
                    "1": "shift_amount"
                },
                "uVar1": {
                    "1": "original_hclk_freq",
                    "11": "hclk_freq",
                    "2": "adjusted_hclk_freq",
                    "3": "clock_frequency",
                    "5": "hclk_frequency"
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_080046ec"
            ],
            "code": "\n\n\nuint get_adjusted_hclk_freq_08003540(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_freq();\n  return hclk_freq >> *(signed_byte *)((int)bitwise_andDAT_08009ec0 + (_DAT_40021004 >> 0xb bitwise_and 7));\n}\n\n",
            "current_name": "get_adjusted_hclk_freq_08003540",
            "entrypoint": "0x08003540",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_08003540": "get_adjusted_hclk_freq_08003540",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "sbyte": "signed_byte",
                "uVar1": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003568": {
            "additional_data": {
                "DAT_20000018": {
                    "1": "constant_value"
                },
                "FUN_08003568": {
                    "1": "update_values",
                    "11": "calculate_delay",
                    "12": "calculate_iterations",
                    "3": "delay_function"
                },
                "bVar1": {
                    "1": "is_positive",
                    "2": "is_not_zero"
                },
                "local_c": {
                    "1": "result",
                    "2": "calculated_delay",
                    "4": "iteration_count",
                    "7": "delay_count"
                },
                "param_1": {
                    "1": "milliseconds",
                    "11": "input",
                    "18": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d98"
            ],
            "code": "\nvoid calculate_iterations_08003568(int input_value)\n\n{\n  bool is_not_zero;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000018 / 8000);\n  do {\n    is_not_zero = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (is_not_zero);\n  return;\n}\n\n",
            "current_name": "calculate_iterations_08003568",
            "entrypoint": "0x08003568",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003568": "calculate_iterations_08003568",
                "bVar1": "is_not_zero",
                "local_c": "delay_count",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035a4": {
            "additional_data": {
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "timer_status"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "timer_config"
                },
                "FUNC_080035fa": {
                    "1": "additional_function",
                    "3": "do_something"
                },
                "FUN_080035a4": {
                    "1": "initialize_tim_base",
                    "2": "init_timer",
                    "26": "initialize_timer"
                },
                "FUN_08003c94": {
                    "1": "perform_operation",
                    "2": "update_config",
                    "3": "set_timer_config"
                },
                "HAL_TIM_Base_MspInit": {
                    "1": "initialize_timer",
                    "2": "initialize_timer_peripheral",
                    "3": "initialize_timer_base",
                    "7": "initialize_timer_hardware"
                },
                "TIM_Base_SetConfig": {
                    "1": "set_timer_config"
                },
                "param_1": {
                    "1": "timer_ptr",
                    "12": "timer_config",
                    "2": "timer_struct",
                    "8": "timer"
                },
                "param_2": {
                    "1": "data_buffer"
                },
                "uVar1": {
                    "10": "status",
                    "5": "error_code",
                    "7": "return_value",
                    "9": "result"
                }
            },
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 initialize_timer_080035a4(undefined4 *timer_config)\n\n{\n  undefined4 status;\n  \n  if (timer_config == (undefined4 *)0x0) {\n    status = 1;\n  }\n  else {\n    if (*(char *)((int)timer_config + 0x3d) == '\\0') {\n      *(undefined *)(timer_config + 0xf) = 0;\n      initialize_timer_080035a4_hardware(timer_config);\n    }\n    *(undefined *)((int)timer_config + 0x3d) = 2;\n    set_timer_config(*timer_config,timer_config + 1);\n    *(undefined *)((int)timer_config + 0x3d) = 1;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "current_name": "initialize_timer_080035a4",
            "entrypoint": "0x080035a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035a4": "initialize_timer_080035a4",
                "HAL_TIM_Base_MspInit": "initialize_timer_hardware",
                "TIM_Base_SetConfig": "set_timer_config",
                "param_1": "timer_config",
                "uVar1": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035fa": {
            "called": [],
            "calling": [
                "FUN_080035a4"
            ],
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080035fa",
            "entrypoint": "0x080035fa",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800360c": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "p_param[3]",
                    "2": "flags[3]"
                },
                "(*param_1)[3] | 1": {
                    "1": "updated_third_element"
                },
                "*(*param_1)": {
                    "1": "value"
                },
                "**param_1": {
                    "1": "value_ptr",
                    "2": "flags[0]",
                    "5": "value"
                },
                "**param_1 | 1": {
                    "1": "value_ptr_with_bitwise_or"
                },
                "*param_1": {
                    "1": "value_ptr"
                },
                "FUN_0800360c": {
                    "1": "apply_flag_to_elements",
                    "2": "set_bit_flags",
                    "4": "set_flags_and_values",
                    "8": "set_flags"
                },
                "arrayPointer": {
                    "1": "data"
                },
                "param_1": {
                    "1": "array_of_pointers",
                    "2": "ptr_array",
                    "3": "input_array",
                    "4": "flags",
                    "5": "array_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 set_flags_0800360c(uint **array_pointer)\n\n{\n  (*array_pointer)[3] = (*array_pointer)[3] | 1;\n  **array_pointer = **array_pointer | 1;\n  return 0;\n}\n\n",
            "current_name": "set_flags_0800360c",
            "entrypoint": "0x0800360c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "array_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003640": {
            "additional_data": {
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "is_pwm_initialized"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "set_pwm_initialized"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "enable_flag"
                },
                "*param_1": {
                    "1": "timer_instance"
                },
                "FUNC_08003696": {
                    "1": "some_function",
                    "2": "initialize_something"
                },
                "FUN_08003640": {
                    "1": "configure_pwm",
                    "18": "initialize_pwm",
                    "2": "initialize_timers",
                    "3": "initialize_pwm_timer",
                    "5": "initialize_timer"
                },
                "FUN_08003c94": {
                    "1": "set_timer_config",
                    "2": "calculate_values"
                },
                "HAL_TIM_PWM_MspInit": {
                    "1": "configure_pwm_pins",
                    "2": "initialize_tim_pwm",
                    "3": "initialize_pwm_peripheral",
                    "4": "initialize_pwm_gpio"
                },
                "TIM_Base_SetConfig": {
                    "1": "set_timer_configuration",
                    "3": "set_pwm_config"
                },
                "param_1": {
                    "1": "timer_ptr",
                    "2": "timer_struct",
                    "4": "config",
                    "6": "timer_config",
                    "7": "config_ptr"
                },
                "param_1 + 1": {
                    "1": "config_data"
                },
                "param_2": {
                    "1": "destination_ptr"
                },
                "uVar1": {
                    "1": "status_code",
                    "13": "result",
                    "5": "return_value",
                    "9": "status"
                }
            },
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 initialize_pwm_08003640(undefined4 *config_ptr)\n\n{\n  undefined4 result;\n  \n  if (config_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)config_ptr + 0x3d) == '\\0') {\n      *(undefined *)(config_ptr + 0xf) = 0;\n      initialize_pwm_08003640_gpio(config_ptr);\n    }\n    *(undefined *)((int)config_ptr + 0x3d) = 2;\n    set_pwm_config(*config_ptr,config_ptr + 1);\n    *(undefined *)((int)config_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_pwm_08003640",
            "entrypoint": "0x08003640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003640": "initialize_pwm_08003640",
                "HAL_TIM_PWM_MspInit": "initialize_pwm_gpio",
                "TIM_Base_SetConfig": "set_pwm_config",
                "param_1": "config_ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003696": {
            "called": [],
            "calling": [
                "FUN_08003640"
            ],
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003696",
            "entrypoint": "0x08003696",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080036a8": {
            "additional_data": {
                "(**param_1)": {
                    "1": "channel_data_value2"
                },
                "(*param_1)": {
                    "1": "channel_data_value"
                },
                "(*param_1)[0x11]": {
                    "1": "timer_registers"
                },
                "(uint *)0x40012c00": {
                    "1": "timer_address"
                },
                "**param_1": {
                    "1": "channel_val",
                    "2": "channel_value",
                    "3": "timer_value"
                },
                "**param_1 | 1": {
                    "1": "set_timer_value_flag"
                },
                "*param_1": {
                    "1": "timer",
                    "2": "tim_channel"
                },
                "*param_1[0x11]": {
                    "1": "tim_channel_config"
                },
                "0x11": {
                    "1": "channel_register_index",
                    "2": "register_offset",
                    "3": "register_index"
                },
                "0x40012c00": {
                    "1": "tim_address",
                    "3": "timer_address"
                },
                "0x8000": {
                    "1": "gpi_ox_pin_17_enable_bit"
                },
                "1": {
                    "1": "enable"
                },
                "<original_function_name>": {
                    "1": "initialize_and_enable_timer"
                },
                "<original_parameter_name_1>": {
                    "1": "timer_pointer"
                },
                "<original_parameter_name_2>": {
                    "1": "channel"
                },
                "<original_variable_name_1>": {
                    "1": "timer_base_address"
                },
                "DAT_080041ea": {
                    "1": "data"
                },
                "FUN_080036a8": {
                    "1": "set_timer_channel",
                    "2": "configure_timer_channel",
                    "3": "initialize_timers",
                    "4": "configure_tim_c_cx_channel",
                    "6": "initialize_timer"
                },
                "FUN_080041ea": {
                    "1": "set_timer_channel",
                    "2": "configure_channel",
                    "3": "configure_timer"
                },
                "PTR_080041f6": {
                    "1": "pointer"
                },
                "TIM_CCxChannelCmd": {
                    "1": "turn_on_channel",
                    "2": "configure_tim_c_cx_channel"
                },
                "int": {
                    "1": "param_1"
                },
                "param_1": {
                    "1": "timer_ptr",
                    "2": "timer_channel",
                    "3": "channel",
                    "4": "timer"
                },
                "param_1[0x11]": {
                    "1": "timer_config[17]"
                },
                "param_2": {
                    "1": "timer_config1",
                    "2": "value",
                    "4": "command",
                    "6": "channel"
                },
                "param_3": {
                    "1": "unused_param",
                    "2": "unknown_param",
                    "3": "param_3"
                },
                "ptr_": {
                    "1": "timer_registers"
                },
                "uint": {
                    "1": "uint32_t",
                    "2": "unsigned_int"
                },
                "uint *": {
                    "1": "timer_reg_address"
                },
                "undefined4": {
                    "1": "return_type"
                },
                "void FUN_080041ea(int param_1,uint param_2,int param_3)": {
                    "1": "apply_timer_setting"
                }
            },
            "called": [
                "FUN_080041ea"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nreturn_type initialize_timer_080036a8(unsigned_int **timer,return_type channel)\n\n{\n  configure_channel(*timer,channel,1);\n  if (*timer == (unsigned_int *)0x40012c00) {\n    (*timer)[0x11] = (*timer)[0x11] | 0x8000;\n  }\n  **timer = **timer | 1;\n  return 0;\n}\n\n",
            "current_name": "initialize_timer_080036a8",
            "entrypoint": "0x080036a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036a8": "initialize_timer_080036a8",
                "TIM_CCxChannelCmd": "configure_channel",
                "int": "param_1",
                "param_1": "timer",
                "param_2": "channel",
                "uint": "unsigned_int",
                "undefined4": "return_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f8": {
            "additional_data": {
                "(param_1 + 7)": {
                    "1": "timer_callback_status"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "timer_param_value1",
                    "2": "timer_status"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "timer_type",
                    "3": "timer_config1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "mode_reg_val",
                    "3": "timer_config2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "status"
                },
                "*(undefined *)(param_1 + 7)": {
                    "1": "error_code",
                    "2": "callback_type"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "timer_param1"
                },
                "*(undefined4 *)(*param_1 + 0x18)": {
                    "1": "parameter3"
                },
                "*(undefined4 *)(*param_1 + 0x1c)": {
                    "1": "parameter4"
                },
                "*param_1": {
                    "1": "timer_data"
                },
                "FUN_080036f8": {
                    "1": "process_timers",
                    "15": "handle_timers",
                    "2": "handle_tim_callback",
                    "3": "handle_callback"
                },
                "HAL_TIMEx_BreakCallback": {
                    "1": "handle_timer_break",
                    "3": "handle_tim_ex_break",
                    "7": "handle_break",
                    "8": "handle_break_callback"
                },
                "HAL_TIMEx_CommutationCallback": {
                    "1": "handle_tim_commutation",
                    "3": "handle_tim_ex_commutation",
                    "7": "handle_commutation",
                    "8": "handle_commutation_callback"
                },
                "HAL_TIM_IC_CaptureCallback": {
                    "1": "handle_timer_ic",
                    "11": "handle_ic_capture_callback",
                    "2": "handle_tim_ic_capture",
                    "3": "handle_capture",
                    "6": "handle_ic_capture"
                },
                "HAL_TIM_OC_DelayElapsedCallback": {
                    "1": "handle_timer_oc",
                    "11": "handle_oc_delay_elapsed_callback",
                    "2": "handle_tim_oc_delay_elapsed",
                    "3": "handle_delay_elapsed",
                    "6": "handle_oc_delay_elapsed"
                },
                "HAL_TIM_PWM_PulseFinishedCallback": {
                    "1": "handle_timer_pwm",
                    "11": "handle_pwm_pulse_finished_callback",
                    "2": "handle_tim_pwm_pulse_finished",
                    "3": "handle_pulse_finished",
                    "6": "handle_pwm_pulse_finished"
                },
                "HAL_TIM_PeriodElapsedCallback": {
                    "1": "handle_timer_period",
                    "11": "handle_period_elapsed_callback",
                    "2": "handle_tim_period_elapsed",
                    "9": "handle_period_elapsed"
                },
                "HAL_TIM_TriggerCallback": {
                    "1": "handle_timer_trigger",
                    "11": "handle_trigger_callback",
                    "4": "handle_tim_trigger",
                    "7": "handle_trigger"
                },
                "PTR_08003c4a": {
                    "1": "handle_pulse_finished"
                },
                "PTR_08003c5c": {
                    "1": "handle_trigger"
                },
                "PTR_08003c6e": {
                    "1": "handle_commutation"
                },
                "PTR_08003c80": {
                    "1": "handle_break"
                },
                "PTR_08004366": {
                    "1": "process_timer_state"
                },
                "PTR_08004378": {
                    "1": "handle_capture"
                },
                "PTR_08004f78": {
                    "1": "handle_interrupts"
                },
                "TIMEx_BreakCallback": {
                    "1": "handle_break"
                },
                "TIMEx_CommutationCallback": {
                    "1": "handle_commutation"
                },
                "TIM_IC_CaptureCallback": {
                    "1": "handle_ic_capture"
                },
                "TIM_OC_DelayElapsedCallback": {
                    "1": "handle_oc_delay_elapsed"
                },
                "TIM_PWM_PulseFinishedCallback": {
                    "1": "handle_pwm_pulse_finished"
                },
                "TIM_PeriodElapsedCallback": {
                    "1": "handle_period_elapsed"
                },
                "TIM_TriggerCallback": {
                    "1": "handle_trigger"
                },
                "param_1": {
                    "1": "param",
                    "2": "tim_handle",
                    "5": "timer_data"
                },
                "param_1+7": {
                    "1": "callback_data[7]"
                },
                "uint": {
                    "1": "uint32"
                },
                "undefined": {
                    "1": "uint8"
                },
                "undefined4": {
                    "1": "uint32"
                }
            },
            "called": [
                "FUN_08004366",
                "FUN_08004f78",
                "FUN_08003c4a",
                "FUN_08004378",
                "FUN_08003c80",
                "FUN_08003c5c",
                "FUN_08003c6e"
            ],
            "calling": [
                "FUN_08005714"
            ],
            "code": "\nvoid handle_timers_080036f8(int *callback_data)\n\n{\n  if (((*(uint32 *)(*callback_data + 0x10) & 2) == 2) && ((*(uint32 *)(*callback_data + 0xc) & 2) == 2)) {\n    *(uint32 *)(*callback_data + 0x10) = 0xfffffffd;\n    *(uint8 *)(callback_data + 7) = 1;\n    if ((*(uint32 *)(*callback_data + 0x18) & 3) == 0) {\n      handle_oc_delay_elapsed_callback(callback_data);\n      handle_pwm_pulse_finished_callback(callback_data);\n    }\n    else {\n      handle_ic_capture_callback(callback_data);\n    }\n    *(uint8 *)(callback_data + 7) = 0;\n  }\n  if (((*(uint32 *)(*callback_data + 0x10) & 4) == 4) && ((*(uint32 *)(*callback_data + 0xc) & 4) == 4)) {\n    *(uint32 *)(*callback_data + 0x10) = 0xfffffffb;\n    *(uint8 *)(callback_data + 7) = 2;\n    if ((*(uint32 *)(*callback_data + 0x18) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(callback_data);\n      handle_pwm_pulse_finished_callback(callback_data);\n    }\n    else {\n      handle_ic_capture_callback(callback_data);\n    }\n    *(uint8 *)(callback_data + 7) = 0;\n  }\n  if (((*(uint32 *)(*callback_data + 0x10) & 8) == 8) && ((*(uint32 *)(*callback_data + 0xc) & 8) == 8)) {\n    *(uint32 *)(*callback_data + 0x10) = 0xfffffff7;\n    *(uint8 *)(callback_data + 7) = 4;\n    if ((*(uint32 *)(*callback_data + 0x1c) & 3) == 0) {\n      handle_oc_delay_elapsed_callback(callback_data);\n      handle_pwm_pulse_finished_callback(callback_data);\n    }\n    else {\n      handle_ic_capture_callback(callback_data);\n    }\n    *(uint8 *)(callback_data + 7) = 0;\n  }\n  if (((*(uint32 *)(*callback_data + 0x10) & 0x10) == 0x10) && ((*(uint32 *)(*callback_data + 0xc) & 0x10) == 0x10))\n  {\n    *(uint32 *)(*callback_data + 0x10) = 0xffffffef;\n    *(uint8 *)(callback_data + 7) = 8;\n    if ((*(uint32 *)(*callback_data + 0x1c) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(callback_data);\n      handle_pwm_pulse_finished_callback(callback_data);\n    }\n    else {\n      handle_ic_capture_callback(callback_data);\n    }\n    *(uint8 *)(callback_data + 7) = 0;\n  }\n  if (((*(uint32 *)(*callback_data + 0x10) & 1) == 1) && ((*(uint32 *)(*callback_data + 0xc) & 1) == 1)) {\n    *(uint32 *)(*callback_data + 0x10) = 0xfffffffe;\n    handle_period_elapsed_callback(callback_data);\n  }\n  if (((*(uint32 *)(*callback_data + 0x10) & 0x80) == 0x80) && ((*(uint32 *)(*callback_data + 0xc) & 0x80) == 0x80))\n  {\n    *(uint32 *)(*callback_data + 0x10) = 0xffffff7f;\n    handle_break_callback(callback_data);\n  }\n  if (((*(uint32 *)(*callback_data + 0x10) & 0x40) == 0x40) && ((*(uint32 *)(*callback_data + 0xc) & 0x40) == 0x40))\n  {\n    *(uint32 *)(*callback_data + 0x10) = 0xffffffbf;\n    handle_trigger_callback(callback_data);\n  }\n  if (((*(uint32 *)(*callback_data + 0x10) & 0x20) == 0x20) && ((*(uint32 *)(*callback_data + 0xc) & 0x20) == 0x20))\n  {\n    *(uint32 *)(*callback_data + 0x10) = 0xffffffdf;\n    handle_commutation_callback(callback_data);\n  }\n  return;\n}\n\n",
            "current_name": "handle_timers_080036f8",
            "entrypoint": "0x080036f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f8": "handle_timers_080036f8",
                "HAL_TIMEx_BreakCallback": "handle_break_callback",
                "HAL_TIMEx_CommutationCallback": "handle_commutation_callback",
                "HAL_TIM_IC_CaptureCallback": "handle_ic_capture_callback",
                "HAL_TIM_OC_DelayElapsedCallback": "handle_oc_delay_elapsed_callback",
                "HAL_TIM_PWM_PulseFinishedCallback": "handle_pwm_pulse_finished_callback",
                "HAL_TIM_PeriodElapsedCallback": "handle_period_elapsed_callback",
                "HAL_TIM_TriggerCallback": "handle_trigger_callback",
                "TIMEx_BreakCallback": "handle_break",
                "TIMEx_CommutationCallback": "handle_commutation",
                "TIM_IC_CaptureCallback": "handle_ic_capture",
                "TIM_OC_DelayElapsedCallback": "handle_oc_delay_elapsed",
                "TIM_PWM_PulseFinishedCallback": "handle_pwm_pulse_finished",
                "TIM_PeriodElapsedCallback": "handle_period_elapsed",
                "TIM_TriggerCallback": "handle_trigger",
                "param_1": "callback_data",
                "uint": "uint32",
                "undefined": "uint8",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003908": {
            "additional_data": {
                "*(char *)(param_1 + 0xf)": {
                    "1": "channel_enabled"
                },
                "*(int *)(param_2 + 0x10)": {
                    "1": "param_value[4]"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "oc1_register"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "oc2_register"
                },
                "*(uint *)(param_2 + 0x10)": {
                    "1": "channel_config"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "config_ptr[61]"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "channel_status"
                },
                "<char>(param_1 + 0xf)": {
                    "1": "channel_status"
                },
                "<original_function_name>": {
                    "1": "configure_timer"
                },
                "<param_1>": {
                    "1": "timer_array"
                },
                "<param_2>": {
                    "1": "config_value"
                },
                "<param_3>": {
                    "1": "channel"
                },
                "<uVar1>": {
                    "1": "return_value"
                },
                "<undefined>((int)param_1 + 0x3d)": {
                    "1": "temporary_value"
                },
                "<undefined>(param_1 + 0xf)": {
                    "1": "channel_status"
                },
                "FUN_08003908": {
                    "1": "set_config_and_enable_output",
                    "2": "configure_tim",
                    "7": "configure_timer_output"
                },
                "PTR_FUN_08003d60": {
                    "1": "set_timer_register_config"
                },
                "PTR_FUN_08003e38": {
                    "1": "set_timer_oc1_config"
                },
                "PTR_FUN_08003f18": {
                    "1": "set_timer_register_config"
                },
                "PTR_FUN_08003ff8": {
                    "1": "set_timer_oc2_config"
                },
                "PTR_TIM_OC1_SetConfig": {
                    "1": "tim1_set_config"
                },
                "PTR_TIM_OC2_SetConfig": {
                    "1": "tim2_set_config"
                },
                "PTR_TIM_OC3_SetConfig": {
                    "1": "tim3_set_config"
                },
                "PTR_TIM_OC4_SetConfig": {
                    "1": "tim4_set_config"
                },
                "TIM_OC1_SetConfig": {
                    "1": "set_tim_output_capture_config1",
                    "2": "configure_tim_oc1"
                },
                "TIM_OC2_SetConfig": {
                    "1": "configure_channel2",
                    "2": "configure_tim_oc2"
                },
                "TIM_OC3_SetConfig": {
                    "1": "configure_channel3",
                    "2": "configure_oc3"
                },
                "TIM_OC4_SetConfig": {
                    "1": "set_timer_output_config4",
                    "2": "configure_oc4"
                },
                "param_1": {
                    "1": "timer_object",
                    "13": "timer_config",
                    "2": "config_ptr",
                    "3": "timer"
                },
                "param_2": {
                    "1": "parameter",
                    "2": "config_data",
                    "3": "value",
                    "5": "output_config",
                    "7": "config_value"
                },
                "param_3": {
                    "1": "mode",
                    "19": "channel",
                    "4": "channel_number",
                    "6": "output_channel"
                },
                "switch(param_3)": {
                    "1": "switch(channel)"
                },
                "uVar1": {
                    "1": "status",
                    "10": "return_value",
                    "19": "result"
                }
            },
            "called": [
                "FUN_08003e38",
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 configure_timer_output_08003908(int *timer_config,int config_value,undefined4 channel)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(timer_config + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(timer_config + 0xf) = 1;\n    *(undefined *)((int)timer_config + 0x3d) = 2;\n    switch(channel) {\n    case 0:\n      configure_oc1(*timer_config,config_value);\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) | 8;\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) & 0xfffffffb;\n      *(uint *)(*timer_config + 0x18) = *(uint *)(config_value + 0x10) | *(uint *)(*timer_config + 0x18);\n      break;\n    case 4:\n      configure_oc2(*timer_config,config_value);\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) | 0x800;\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) & 0xfffffbff;\n      *(uint *)(*timer_config + 0x18) = *(int *)(config_value + 0x10) << 8 | *(uint *)(*timer_config + 0x18);\n      break;\n    case 8:\n      configure_oc3(*timer_config,config_value);\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) | 8;\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) & 0xfffffffb;\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(config_value + 0x10) | *(uint *)(*timer_config + 0x1c);\n      break;\n    case 0xc:\n      configure_oc4(*timer_config,config_value);\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) | 0x800;\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) & 0xfffffbff;\n      *(uint *)(*timer_config + 0x1c) = *(int *)(config_value + 0x10) << 8 | *(uint *)(*timer_config + 0x1c);\n    }\n    *(undefined *)((int)timer_config + 0x3d) = 1;\n    *(undefined *)(timer_config + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "configure_timer_output_08003908",
            "entrypoint": "0x08003908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003908": "configure_timer_output_08003908",
                "TIM_OC1_SetConfig": "configure_oc1",
                "TIM_OC2_SetConfig": "configure_oc2",
                "TIM_OC3_SetConfig": "configure_oc3",
                "TIM_OC4_SetConfig": "configure_oc4",
                "param_1": "timer_config",
                "param_2": "config_value",
                "param_3": "channel",
                "switch(param_3)": "switch(channel)",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a94": {
            "additional_data": {
                "*(char *)(param_1 + 0x0f)": {
                    "1": "param1_value"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "timer_config"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "param2"
                },
                "*(undefined *)(param_1 + 0x0f)": {
                    "1": "param1"
                },
                "FUN_08003a94": {
                    "1": "configure_input_timers",
                    "18": "configure_timer",
                    "2": "configure_tim",
                    "6": "configure_timers"
                },
                "FUN_080040a0": {
                    "1": "config_input_stage_with_params",
                    "2": "set_it_rx_config"
                },
                "FUN_08004104": {
                    "1": "configure_tim_it_rx_set_config"
                },
                "FUN_0800416a": {
                    "1": "config_input_stage_with_param",
                    "2": "configure_input_stage"
                },
                "FUN_080041a8": {
                    "1": "set_config_with_params",
                    "3": "set_etr_config"
                },
                "TIM_ETR_SetConfig": {
                    "1": "set_etr_configuration",
                    "2": "set_external_trigger_config",
                    "3": "set_etr_config"
                },
                "TIM_ITRx_SetConfig": {
                    "1": "configure_tim_it_rx_set_config",
                    "2": "set_timer_config"
                },
                "TIM_TI1_ConfigInputStage": {
                    "1": "configure_input_stage_for_ti1",
                    "3": "configure_ti1_input_stage"
                },
                "TIM_TI2_ConfigInputStage": {
                    "1": "configure_input_stage_for_channel2",
                    "2": "configure_ti2_input_stage"
                },
                "param_1": {
                    "1": "timer_peripheral",
                    "18": "timer_config",
                    "2": "config_ptr",
                    "5": "config"
                },
                "param_2": {
                    "1": "configuration",
                    "2": "timer_values",
                    "3": "values",
                    "6": "config_values"
                },
                "param_2[1]": {
                    "1": "value1"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "param_2[3]": {
                    "1": "value3"
                },
                "param_3": {
                    "1": "config1"
                },
                "param_4": {
                    "1": "config2"
                },
                "uVar1": {
                    "1": "status",
                    "19": "result",
                    "2": "return_status",
                    "8": "return_value"
                },
                "uVar2": {
                    "1": "value",
                    "11": "config_value",
                    "2": "option",
                    "4": "timer_value"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "ushort": {
                    "1": "unsigned_short"
                }
            },
            "called": [
                "FUN_0800416a",
                "FUN_080040a0",
                "FUN_08004104",
                "FUN_080041a8"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 configure_timer_08003a94(int *timer_config,unsigned_int *input_config)\n\n{\n  undefined4 result;\n  unsigned_int config_value;\n  \n  if (*(char *)(timer_config + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(timer_config + 0xf) = 1;\n    *(undefined *)((int)timer_config + 0x3d) = 2;\n    *(unsigned_int *)(*timer_config + 8) = *(unsigned_int *)(*timer_config + 8) & 0xffff0088;\n    config_value = *input_config;\n    if (config_value == 0x40) {\n      configure_ti1_input_stage(*timer_config,value1,value3);\n      set_it_rx_config(*timer_config,0x40);\n    }\n    else if (config_value < 0x41) {\n      if (config_value == 0x10) {\n        set_it_rx_config(*timer_config,0x10);\n      }\n      else if (config_value < 0x11) {\n        if (config_value == 0) {\n          set_it_rx_config(*timer_config,0);\n        }\n      }\n      else if (config_value == 0x20) {\n        set_it_rx_config(*timer_config,0x20);\n      }\n      else if (config_value == 0x30) {\n        set_it_rx_config(*timer_config,0x30);\n      }\n    }\n    else if (config_value == 0x70) {\n      set_etr_config(*timer_config,value2,value1,value3);\n      *(unsigned_int *)(*timer_config + 8) = *(unsigned_int *)(*timer_config + 8) & 0xffffff88 | 0x77;\n    }\n    else if (config_value < 0x71) {\n      if (config_value == 0x50) {\n        configure_ti1_input_stage(*timer_config,value1,value3);\n        set_it_rx_config(*timer_config,0x50);\n      }\n      else if (config_value == 0x60) {\n        configure_ti2_input_stage(*timer_config,value1,value3);\n        set_it_rx_config(*timer_config,0x60);\n      }\n    }\n    else if (config_value == 0x1000) {\n      *(unsigned_int *)(*timer_config + 8) = *(unsigned_int *)(*timer_config + 8) & 0xfffffff8;\n    }\n    else if (config_value == 0x2000) {\n      set_etr_config(*timer_config,value2,value1,value3);\n      *(unsigned_int *)(*timer_config + 8) = *(unsigned_int *)(*timer_config + 8) | 0x4000;\n    }\n    *(undefined *)((int)timer_config + 0x3d) = 1;\n    *(undefined *)(timer_config + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "configure_timer_08003a94",
            "entrypoint": "0x08003a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a94": "configure_timer_08003a94",
                "TIM_ETR_SetConfig": "set_etr_config",
                "TIM_ITRx_SetConfig": "set_it_rx_config",
                "TIM_TI1_ConfigInputStage": "configure_ti1_input_stage",
                "TIM_TI2_ConfigInputStage": "configure_ti2_input_stage",
                "param_1": "timer_config",
                "param_2": "input_config",
                "param_2[1]": "value1",
                "param_2[2]": "value2",
                "param_2[3]": "value3",
                "uVar1": "result",
                "uVar2": "config_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c4a",
            "entrypoint": "0x08003c4a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c5c": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c5c",
            "entrypoint": "0x08003c5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c6e": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c6e",
            "entrypoint": "0x08003c6e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c80": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c80",
            "entrypoint": "0x08003c80",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c94": {
            "additional_data": {
                "FUN_08003c94": {
                    "1": "update_parameters",
                    "10": "update_memory",
                    "2": "update_registers",
                    "3": "update_config",
                    "5": "update_memory_values"
                },
                "local_c": {
                    "1": "previous_value",
                    "2": "old_value",
                    "3": "temp",
                    "4": "original_value",
                    "5": "current_value"
                },
                "param_1": {
                    "1": "original_config",
                    "2": "register1",
                    "3": "config",
                    "4": "memory_pointer",
                    "7": "memory_address"
                },
                "param_2": {
                    "1": "register_2",
                    "2": "new_data",
                    "3": "new_config",
                    "5": "new_values"
                },
                "uRam40012c30": {
                    "1": "data_at40012c30",
                    "5": "special_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "code": "\nvoid update_memory_08003c94(uint *memory_address,uint *new_values)\n\n{\n  uint current_value;\n  \n  current_value = *memory_address;\n  if ((((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n      (memory_address == (uint *)0x40000400)) || (memory_address == (uint *)0x40000800)) {\n    current_value = new_values[1] | current_value & 0xffffff8f;\n  }\n  if (((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n     ((memory_address == (uint *)0x40000400 || (memory_address == (uint *)0x40000800)))) {\n    current_value = new_values[3] | current_value & 0xfffffcff;\n  }\n  *memory_address = new_values[5] | current_value & 0xffffff7f;\n  memory_address[0xb] = new_values[2];\n  memory_address[10] = *new_values;\n  if (memory_address == (uint *)0x40012c00) {\n    special_value = new_values[4];\n  }\n  memory_address[5] = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_08003c94",
            "entrypoint": "0x08003c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "local_c": "current_value",
                "param_1": "memory_address",
                "param_2": "new_values",
                "uRam40012c30": "special_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003d60": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "config_register"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flag1"
                },
                "*(uint *)(param_1 + 0x34)": {
                    "1": "new_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "flag2"
                },
                "*param_2": {
                    "1": "config_data0"
                },
                "0x18": {
                    "1": "offset4"
                },
                "0x20": {
                    "1": "offset2"
                },
                "0x34": {
                    "1": "offset5"
                },
                "0x4": {
                    "1": "offset3"
                },
                "0x40012c00": {
                    "1": "constant1"
                },
                "0xfffffcff": {
                    "1": "mask5"
                },
                "0xffffff8c": {
                    "1": "mask2"
                },
                "0xfffffff7": {
                    "1": "mask3"
                },
                "0xfffffffb": {
                    "1": "mask4"
                },
                "0xfffffffe": {
                    "1": "mask1"
                },
                "3": {
                    "1": "offset6"
                },
                "4": {
                    "1": "offset1"
                },
                "5": {
                    "1": "offset8"
                },
                "6": {
                    "1": "offset7"
                },
                "FUN_08003d60": {
                    "1": "set_flags_and_values",
                    "2": "update_registers",
                    "3": "update_flags_and_values",
                    "4": "update_configuration",
                    "6": "update_data",
                    "7": "update_parameters"
                },
                "local_10": {
                    "1": "temporary_value",
                    "2": "current_value",
                    "3": "local_variable",
                    "5": "temp_value",
                    "6": "local_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_address",
                    "3": "param_address",
                    "4": "address",
                    "7": "base_address"
                },
                "param_1 + 0x20": {
                    "1": "flag_address"
                },
                "param_1 + 4": {
                    "1": "previous_value"
                },
                "param_2": {
                    "1": "new_values",
                    "2": "input_data",
                    "3": "config_data",
                    "4": "parameters"
                },
                "param_2[1]": {
                    "1": "config_data1"
                },
                "param_2[2]": {
                    "1": "config_data2"
                },
                "param_2[2] | *(uint *)(param_1 + 0x20) & 0xfffffffd": {
                    "1": "combined_flags_value"
                },
                "param_2[3] | uVar2 & 0xfffffff7": {
                    "1": "flag3"
                },
                "param_2[6] | param_2[5] | local_10 & 0xfffffcff": {
                    "1": "combined_local_value"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "2": "first_param_value",
                    "3": "new_value1",
                    "8": "value1"
                },
                "uVar1 | *(uint *)(param_1 + 0x18) & 0xffffff8c": {
                    "1": "updated_value"
                },
                "uVar2": {
                    "1": "flag2",
                    "2": "modified_value",
                    "3": "new_value2",
                    "8": "value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_parameters_08003d60(int base_address,uint *param_array)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  local_value = *(uint *)(base_address + 4);\n  value1 = *param_array;\n  value2 = config_data2 | *(uint *)(base_address + 0x20) & 0xfffffffd;\n  if (base_address == 0x40012c00) {\n    value2 = (param_array[3] | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = param_array[6] | param_array[5] | local_value & 0xfffffcff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x18) = value1 | *(uint *)(base_address + 0x18) & 0xffffff8c;\n  *(uint *)(base_address + 0x34) = value3;\n  *(uint *)(base_address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_parameters_08003d60",
            "entrypoint": "0x08003d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003d60": "update_parameters_08003d60",
                "local_10": "local_value",
                "param_1": "base_address",
                "param_2": "param_array",
                "param_2[1]": "value3",
                "param_2[2]": "config_data2",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e38": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "data_at_offset18"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "data_masked"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "local_value"
                },
                "*param_2": {
                    "1": "data_array_element1"
                },
                "*param_2[1]": {
                    "1": "data_array_element2"
                },
                "FUN_08003e38": {
                    "1": "update_flags_and_values",
                    "11": "update_data",
                    "2": "update_parameter",
                    "4": "update_parameters"
                },
                "iVar1": {
                    "1": "data_value",
                    "2": "param2_value",
                    "5": "value1",
                    "6": "value",
                    "7": "temp_var1"
                },
                "local_10": {
                    "1": "current_value",
                    "2": "new_value",
                    "3": "temp_value",
                    "4": "value3",
                    "6": "local_value"
                },
                "param_1": {
                    "1": "param_addr",
                    "3": "config_address",
                    "6": "base_address",
                    "8": "data_address"
                },
                "param_2": {
                    "1": "data_array_ptr",
                    "2": "config_values",
                    "3": "data_array"
                },
                "param_2[2] << 4 | *(uint *)(param_1 + 0x20) & 0xffffffdf": {
                    "1": "updated_var2_expression"
                },
                "param_2[3] << 4 | uVar2 & 0xffffff7f) & 0xffffffbf": {
                    "1": "updated_var2_expression_if_param1_matches"
                },
                "param_2[6] << 2 | param_2[5] << 2 | local_10 & 0xfffff3ff": {
                    "1": "local_var_expression_if_param1_matches"
                },
                "uVar2": {
                    "1": "modified_var1",
                    "12": "updated_value",
                    "4": "modified_value",
                    "5": "value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003e38(int data_address,int *parameters)\n\n{\n  int temp_var1;\n  uint updated_value;\n  uint local_value;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffffef;\n  local_value = *(uint *)(data_address + 4);\n  temp_var1 = *parameters;\n  updated_value = parameters[2] << 4 | *(uint *)(data_address + 0x20) & 0xffffffdf;\n  if (data_address == 0x40012c00) {\n    updated_value = (parameters[3] << 4 | updated_value & 0xffffff7f) & 0xffffffbf;\n    local_value = parameters[6] << 2 | parameters[5] << 2 | local_value & 0xfffff3ff;\n  }\n  *(uint *)(data_address + 4) = local_value;\n  *(uint *)(data_address + 0x18) = temp_var1 << 8 | *(uint *)(data_address + 0x18) & 0xffff8cff;\n  *(int *)(data_address + 0x38) = parameters[1];\n  *(uint *)(data_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_data_08003e38",
            "entrypoint": "0x08003e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "iVar1": "temp_var1",
                "local_10": "local_value",
                "param_1": "data_address",
                "param_2": "parameters",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f18": {
            "additional_data": {
                "(param_2[3] << 8 | uVar2 & 0xfffff7ff) & 0xfffffbff": {
                    "1": "updated_param_value2_if"
                },
                "*(param_1 + 0x1c)": {
                    "1": "parameter1_other_value"
                },
                "*(param_1 + 0x20)": {
                    "1": "parameter1_value"
                },
                "*(param_1 + 0x20) & 0xfffffdff": {
                    "1": "parameter1_modified_value"
                },
                "*(param_1 + 0x3c)": {
                    "1": "parameter1_additional_value"
                },
                "*(param_1 + 4)": {
                    "1": "parameter1_offset_value"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "data_param3"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "data_param1"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffdff": {
                    "1": "updated_param_value2"
                },
                "*(uint *)(param_1 + 0x3c)": {
                    "1": "data_param4"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "data_param2"
                },
                "0x1c": {
                    "1": "flag"
                },
                "0x20": {
                    "1": "mask"
                },
                "0x3c": {
                    "1": "value3"
                },
                "0x40012c00": {
                    "1": "constant_address"
                },
                "FUN_08003f18": {
                    "1": "update_memory_registers",
                    "2": "update_param_values",
                    "3": "update_registers",
                    "4": "update_parameters",
                    "9": "update_data"
                },
                "PTR_param_2": {
                    "1": "ptr_input_array"
                },
                "local_10": {
                    "1": "existing_value",
                    "11": "local_value",
                    "2": "current_value",
                    "4": "temp_value"
                },
                "local_10 & 0xffffcfff": {
                    "1": "local_modified_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_ptr",
                    "4": "base_address",
                    "6": "data_address",
                    "7": "address"
                },
                "param_1 + 0x1c": {
                    "1": "existing_data"
                },
                "param_1 + 0x20": {
                    "1": "config_mask_address"
                },
                "param_1 + 0x3c": {
                    "1": "new_data"
                },
                "param_1 + 4": {
                    "1": "config_data_address"
                },
                "param_2": {
                    "1": "input_array",
                    "2": "param_array",
                    "3": "input_data",
                    "5": "parameters"
                },
                "param_2[2]": {
                    "1": "parameter2_value"
                },
                "param_2[3]": {
                    "1": "parameter3_value"
                },
                "param_2[5]": {
                    "1": "data_array_element5"
                },
                "param_2[6]": {
                    "1": "data_array_element6"
                },
                "param_2[6] << 4 | param_2[5] << 4 | local_10 & 0xffffcfff": {
                    "1": "updated_local_variable_if"
                },
                "uVar1": {
                    "1": "input_value1",
                    "2": "param_value1",
                    "7": "value1"
                },
                "uVar1 | *(uint *)(param_1 + 0x1c) & 0xffffff8c": {
                    "1": "updated_data_param3"
                },
                "uVar2": {
                    "1": "value_2",
                    "2": "modified_value",
                    "3": "updated_value",
                    "7": "value2"
                },
                "uVar2 & 0xfffff7ff": {
                    "1": "modified_value2_additional"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003f18(int address,uint *data)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(address + 4);\n  value1 = *data;\n  value2 = data_array_element2 << 8 | *(uint *)(address + 0x20) & 0xfffffdff;\n  if (address == 0x40012c00) {\n    value2 = (data_array_element3 << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    local_value = data_array_element6 << 4 | data_array_element5 << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(address + 4) = local_value;\n  *(uint *)(address + 0x1c) = value1 | *(uint *)(address + 0x1c) & 0xffffff8c;\n  *(uint *)(address + 0x3c) = data[1];\n  *(uint *)(address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_data_08003f18",
            "entrypoint": "0x08003f18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "local_10": "local_value",
                "param_1": "address",
                "param_2": "data",
                "param_2[2]": "data_array_element2",
                "param_2[3]": "data_array_element3",
                "param_2[5]": "data_array_element5",
                "param_2[6]": "data_array_element6",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "additional_data": {
                "*(int *)(param_1 + 0x40)": {
                    "1": "config_value4"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "config_value3"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "config_value1"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "config_value2"
                },
                "FUN_08003ff8": {
                    "1": "update_register_values",
                    "12": "update_data",
                    "2": "update_settings",
                    "4": "update_parameters"
                },
                "iVar1": {
                    "1": "first_param",
                    "15": "value1",
                    "2": "param1_value",
                    "5": "var1"
                },
                "iVar2": {
                    "1": "value3",
                    "15": "value2",
                    "2": "param2_value",
                    "5": "var2"
                },
                "local_c": {
                    "1": "current_value",
                    "2": "value",
                    "3": "flags",
                    "7": "temp_value"
                },
                "param_1": {
                    "1": "param_addr",
                    "12": "base_address",
                    "2": "register_address",
                    "6": "data_address"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "config_data",
                    "4": "param_array",
                    "6": "parameters"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003ff8(int base_address,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint temp_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  temp_value = *(uint *)(base_address + 4);\n  value1 = *parameters;\n  value2 = parameters[2];\n  if (base_address == 0x40012c00) {\n    temp_value = parameters[5] << 6 | temp_value & 0xffffbfff;\n  }\n  *(uint *)(base_address + 4) = temp_value;\n  *(uint *)(base_address + 0x1c) = value1 << 8 | *(uint *)(base_address + 0x1c) & 0xffff8cff;\n  *(int *)(base_address + 0x40) = parameters[1];\n  *(uint *)(base_address + 0x20) = value2 << 0xc | *(uint *)(base_address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "current_name": "update_data_08003ff8",
            "entrypoint": "0x08003ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "temp_value",
                "param_1": "base_address",
                "param_2": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040a0": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "third_temp_var"
                },
                "*(uint *)(param_1 + 0x18) & 0xffffff0f": {
                    "1": "updated_param2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "variable1"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffff5": {
                    "1": "updated_param1_with_param2"
                },
                "*(uint *)(param_1 + 0x20) & 0xfffffffe": {
                    "1": "updated_param1"
                },
                "FUN_080040a0": {
                    "1": "update_values",
                    "2": "update_param_values",
                    "3": "update_flags_and_values",
                    "4": "update_parameter",
                    "6": "update_parameters"
                },
                "param_1": {
                    "1": "param",
                    "14": "base_address",
                    "2": "memory_address"
                },
                "param_2": {
                    "1": "new_configuration_value",
                    "11": "new_value",
                    "2": "flag_value",
                    "3": "new_bits"
                },
                "param_3": {
                    "1": "value_to_be_shifted",
                    "11": "shift_value",
                    "2": "value2",
                    "6": "shift_amount"
                },
                "uVar1": {
                    "1": "existing_param",
                    "2": "current_value",
                    "3": "old_value",
                    "4": "previous_value",
                    "5": "temp_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameters_080040a0(int base_address,uint new_value,int shift_value)\n\n{\n  uint temp_value;\n  \n  temp_value = *(uint *)(base_address + 0x20);\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  *(uint *)(base_address + 0x18) = shift_value << 4 | *(uint *)(base_address + 0x18) & 0xffffff0f;\n  *(uint *)(base_address + 0x20) = new_value | temp_value & 0xfffffff5;\n  return;\n}\n\n",
            "current_name": "update_parameters_080040a0",
            "entrypoint": "0x080040a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "shift_value",
                "uVar1": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004104": {
            "additional_data": {
                "(param_1 + 0x18)": {
                    "1": "register1_flagged"
                },
                "(param_1 + 0x20)": {
                    "1": "register2_flagged"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "settings_flags"
                },
                "*(uint *)(param_1 + 0x18) & 0xffff0fff": {
                    "1": "updated_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "register2_value"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffff5f": {
                    "1": "updated_value"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffffef": {
                    "1": "updated_flag_value"
                },
                "FUN_08004104": {
                    "1": "update_memory_values",
                    "2": "set_flags_and_values",
                    "3": "update_parameters",
                    "7": "update_flags_and_values"
                },
                "param_1": {
                    "1": "param",
                    "12": "base_address",
                    "2": "object",
                    "3": "memory_address"
                },
                "param_1 + 0x18": {
                    "1": "object_address_plus18"
                },
                "param_1 + 0x20": {
                    "1": "target_address_plus20"
                },
                "param_2": {
                    "1": "register2",
                    "11": "value1",
                    "2": "flag_value",
                    "3": "param2_value",
                    "4": "value"
                },
                "param_2 << 4": {
                    "1": "shifted_flag_value"
                },
                "param_2 << 4 | *(uint *)(param_1 + 0x20) & 0xffffff5f": {
                    "1": "data_with_shift"
                },
                "param_3": {
                    "1": "flag2",
                    "11": "value2",
                    "2": "shift_value",
                    "3": "param3_value"
                },
                "param_3 << 0xc": {
                    "1": "shifted_data_value"
                },
                "param_3 << 0xc | *(uint *)(param_1 + 0x18) & 0xffff0fff": {
                    "1": "flag_with_shift"
                },
                "register3 << 0xc | *(uint *)(param_1 + 0x18) & 0xffff0fff": {
                    "1": "flagged_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_flags_and_values_08004104(int base_address,int value1,int value2)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  *(uint *)(base_address + 0x18) = value2 << 0xc | *(uint *)(base_address + 0x18) & 0xffff0fff;\n  *(uint *)(base_address + 0x20) = value1 << 4 | *(uint *)(base_address + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_08004104",
            "entrypoint": "0x08004104",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800416a": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "(": {
                    "1": ""
                },
                "(uint)(param_2 | 7)": {
                    "1": "bits_to_set_masked"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "address_value"
                },
                "*(uint *)(param_1 + 8) & 0xffffff8f | (uint)(param_2 | 7)": {
                    "1": "result"
                },
                "+": {
                    "1": "add"
                },
                "0xffffff8f": {
                    "1": "flag_mask",
                    "4": "mask"
                },
                "7": {
                    "1": "flag_value"
                },
                "8": {
                    "1": "offset"
                },
                "FUN_0800416a": {
                    "1": "update_parameter_value",
                    "2": "update_memory_value",
                    "3": "update_memory"
                },
                "PTR_ffffffffff600000_2b": {
                    "1": "mask"
                },
                "param_1": {
                    "1": "data_pointer",
                    "17": "base_address",
                    "3": "memory_address"
                },
                "param_1 + 8": {
                    "1": "target_address"
                },
                "param_2": {
                    "1": "value_to_set",
                    "2": "new_data",
                    "3": "new_bits",
                    "7": "value",
                    "8": "new_value"
                },
                "param_2 | 7": {
                    "1": "bits_to_set_with_mask",
                    "2": "updated_bits"
                },
                "param_3": {
                    "1": "updated_value"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "|": {
                    "1": "bitwise_or"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_register_value_0800416a(int base_address,ushort new_value)\n\n{\n  *(unsigned_int *)(base_address + 8) = *(unsigned_int *)(base_address + 8) & 0xffffff8f | (unsigned_int)(new_value | 7);\n  return;\n}\n\n",
            "current_name": "update_register_value_0800416a",
            "entrypoint": "0x0800416a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800416a": "update_register_value_0800416a",
                "param_1": "base_address",
                "param_2": "new_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a8": {
            "additional_data": {
                "*(uint *)(param_1 + 8)": {
                    "1": "current_value"
                },
                "0xffff00ff": {
                    "1": "bitmask"
                },
                "DAT_": {
                    "1": "data_"
                },
                "FUN_080041a8": {
                    "1": "update_parameter_with_mask",
                    "2": "update_flags",
                    "3": "update_parameter",
                    "4": "update_parameters",
                    "5": "update_data"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "param_1": {
                    "1": "param_ptr",
                    "12": "base_address",
                    "2": "address",
                    "3": "object_address",
                    "4": "data_ptr",
                    "5": "data_address"
                },
                "param_1 + 8": {
                    "1": "dst_address_plus_eight"
                },
                "param_2": {
                    "1": "new_data",
                    "18": "value1",
                    "2": "new_param_value1"
                },
                "param_2 | param_4 << 8 | param_3 | *(uint *)(param_1 + 8) & 0xffff00ff": {
                    "1": "new_value",
                    "2": "updated_value"
                },
                "param_3": {
                    "1": "value_2",
                    "18": "value2",
                    "2": "new_value2"
                },
                "param_4": {
                    "1": "value_3",
                    "17": "value3",
                    "2": "shift",
                    "3": "shift_value"
                },
                "param_5": {
                    "1": "current_parameter_value"
                },
                "temp_1": {
                    "1": "updated_param_value"
                },
                "temp_2": {
                    "1": "mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_data_080041a8(int base_address,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(base_address + 8) = value1 | value3 << 8 | value2 | *(uint *)(base_address + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "current_name": "update_data_080041a8",
            "entrypoint": "0x080041a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a8": "update_data_080041a8",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041ea": {
            "additional_data": {
                "(1 << (param_2 & 0xff))": {
                    "2": "bit_mask"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "register"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "FUN_080041ea": {
                    "1": "update_data",
                    "10": "update_bit",
                    "3": "update_bits",
                    "4": "update_bit_value"
                },
                "param_1": {
                    "1": "data_address",
                    "24": "base_address",
                    "3": "data"
                },
                "param_1 + 0x20": {
                    "1": "data_with_bit_field"
                },
                "param_2": {
                    "25": "bit_position",
                    "6": "bit_index"
                },
                "param_2 & 0xff": {
                    "1": "bit_index_mask"
                },
                "param_3": {
                    "1": "flag_value",
                    "18": "new_value",
                    "3": "value",
                    "8": "bit_value"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "value_to_set"
                }
            },
            "called": [],
            "calling": [
                "FUN_080036a8"
            ],
            "code": "\nvoid update_bit_080041ea(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bit_080041ea",
            "entrypoint": "0x080041ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041ea": "update_bit_080041ea",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800422e": {
            "additional_data": {
                "*(char *)(param_1 + 0xf)": {
                    "1": "is_flag_set",
                    "2": "condition"
                },
                "*(uint *)(*param_1 + 0x44)": {
                    "1": "result"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_value",
                    "2": "flag"
                },
                "*param_1": {
                    "1": "array_first_elem"
                },
                "*param_2": {
                    "1": "val0"
                },
                "<*(param_1 + 0xf)>": {
                    "1": "new_status"
                },
                "<*(uint *)(*param_1 + 0x44)>": {
                    "1": "new_value"
                },
                "<original_function_name>": {
                    "1": "check_status_and_set_values"
                },
                "<param_1>": {
                    "1": "status_array"
                },
                "<param_2>": {
                    "1": "data_array"
                },
                "FUN_0800422e": {
                    "1": "set_flag_if_true",
                    "2": "update_flag_and_assign_value",
                    "3": "update_flag_and_value"
                },
                "param_1": {
                    "1": "status_data",
                    "2": "array1",
                    "3": "flag_array",
                    "5": "array"
                },
                "param_1 + 0xf": {
                    "1": "flag_value"
                },
                "param_2": {
                    "1": "value_pointer",
                    "2": "input_data",
                    "3": "data",
                    "8": "values"
                },
                "param_2[1]": {
                    "1": "val1"
                },
                "param_2[2]": {
                    "1": "val2"
                },
                "param_2[3]": {
                    "1": "val3"
                },
                "param_2[4]": {
                    "1": "data4"
                },
                "param_2[5]": {
                    "1": "val5"
                },
                "param_2[6]": {
                    "1": "val6"
                },
                "uVar1": {
                    "1": "return_val",
                    "12": "result",
                    "13": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 update_flag_and_value_0800422e(int *array,uint *values)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(uint *)(*array + 0x44) =\n         val6 |\n         (val6 |\n         (val5 |\n         (val4 |\n         (*values | (val1 | (val2 | val3 & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_flag_and_value_0800422e",
            "entrypoint": "0x0800422e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800422e": "update_flag_and_value_0800422e",
                "param_1": "array",
                "param_2": "values",
                "param_2[1]": "val1",
                "param_2[2]": "val2",
                "param_2[3]": "val3",
                "param_2[4]": "val4",
                "param_2[5]": "val5",
                "param_2[6]": "val6",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042de": {
            "additional_data": {
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag_status",
                    "2": "flag_value"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "value_1_ptr"
                },
                "*(uint *)(*param_1 + 4) & 0xffffff8f": {
                    "1": "updated_value1"
                },
                "*(uint *)(*param_1 + 4) | *(uint *)(*param_1 + 4)": {
                    "1": "combined_value1"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "value2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "temp_var"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "*param_2": {
                    "1": "flags_value1"
                },
                "FUN_080042de": {
                    "1": "check_and_update_flag",
                    "2": "update_flag_and_bits",
                    "3": "update_permissions",
                    "4": "update_flags_and_values",
                    "7": "update_flags"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "permissions",
                    "3": "data_ptr",
                    "6": "array"
                },
                "param_2": {
                    "1": "new_value_array",
                    "2": "value_pointer",
                    "3": "mask",
                    "4": "values",
                    "7": "flags"
                },
                "param_2[1]": {
                    "1": "mask_value_2"
                },
                "param_2[1] | *(uint *)(*param_1 + 8)": {
                    "1": "combined_value2"
                },
                "uVar1": {
                    "1": "return_status",
                    "19": "result",
                    "7": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 update_flags_080042de(int *array,uint *flags)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xffffff8f;\n    *(uint *)(*array + 4) = *flags | *(uint *)(*array + 4);\n    *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xffffff7f;\n    *(uint *)(*array + 8) = mask_value_2 | *(uint *)(*array + 8);\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_flags_080042de",
            "entrypoint": "0x080042de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042de": "update_flags_080042de",
                "param_1": "array",
                "param_2": "flags",
                "param_2[1]": "mask_value_2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004366": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004366",
            "entrypoint": "0x08004366",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004378": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004378",
            "entrypoint": "0x08004378",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800438a": {
            "additional_data": {
                "*((int)param_1 + 0x39)": {
                    "1": "uart_param->flag"
                },
                "*((int)param_1 + 0x3a)": {
                    "1": "uart_param->other_flag"
                },
                "*((uint *)(*param_1 + 0x10))": {
                    "1": "uart_param->baud_rate"
                },
                "*((uint *)(*param_1 + 0x14))": {
                    "1": "uart_param->mode"
                },
                "*((uint *)(*param_1 + 0xc))": {
                    "1": "uart_param->control_reg"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "initialized_flag",
                    "2": "uart_initialized"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "uart_config2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "uart_config3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uart_config1"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "uart_flag1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "uart_flag2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "interrupts_enabled"
                },
                "*param_1": {
                    "1": "uart_config"
                },
                "FUNC_08004424": {
                    "1": "restore_default_settings",
                    "2": "some_function"
                },
                "FUN_0800438a": {
                    "1": "configure_uart",
                    "26": "initialize_uart"
                },
                "FUN_080046ec": {
                    "1": "process_uart",
                    "2": "reset_uart_handle"
                },
                "HAL_UART_MspInit": {
                    "1": "configure_uart_pins",
                    "2": "initialize_uart",
                    "4": "initialize_uart_peripherals",
                    "7": "initialize_uart_peripheral"
                },
                "UART_SetConfig": {
                    "12": "set_uart_config",
                    "4": "configure_uart",
                    "6": "set_uart_configuration"
                },
                "param_1": {
                    "1": "uart_param",
                    "10": "uart_instance",
                    "7": "uart_handle"
                },
                "param_1[0xf]": {
                    "1": "param1f"
                },
                "uVar1": {
                    "1": "return_val",
                    "10": "status",
                    "14": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "calling": [
                "FUN_08005598"
            ],
            "code": "\nundefined4 initialize_uart_0800438a(int *uart_config)\n\n{\n  undefined4 result;\n  \n  if (uart_config == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)uart_config + 0x39) == '\\0') {\n      *(undefined *)(uart_config + 0xe) = 0;\n      initialize_uart_0800438a_peripheral(uart_config);\n    }\n    *(undefined *)((int)uart_config + 0x39) = 0x24;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) & 0xffffdfff;\n    set_uart_config(uart_config);\n    *(uint *)(*uart_config + 0x10) = *(uint *)(*uart_config + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_config + 0x14) = *(uint *)(*uart_config + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) | 0x2000;\n    uart_config[0xf] = 0;\n    *(undefined *)((int)uart_config + 0x39) = 0x20;\n    *(undefined *)((int)uart_config + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_uart_0800438a",
            "entrypoint": "0x0800438a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800438a": "initialize_uart_0800438a",
                "HAL_UART_MspInit": "initialize_uart_peripheral",
                "UART_SetConfig": "set_uart_config",
                "param_1": "uart_config",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004424": {
            "called": [],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004424",
            "entrypoint": "0x08004424",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004436": {
            "additional_data": {
                "FUN_080015a0": {
                    "1": "initialize"
                },
                "FUN_08004436": {
                    "1": "parse_data",
                    "2": "process_input",
                    "26": "process_data"
                },
                "HAL_GetTick": {
                    "2": "get_current_time"
                },
                "LAB_0800454c": {
                    "1": "check_flag1"
                },
                "LAB_08004614": {
                    "1": "check_flag2"
                },
                "LAB_080046c6": {
                    "1": "check_flag3"
                },
                "iVar1": {
                    "1": "time_start",
                    "11": "start_time",
                    "2": "current_time"
                },
                "iVar2": {
                    "1": "tick2",
                    "10": "current_time",
                    "2": "elapsed_time"
                },
                "local_58": {
                    "1": "current_value",
                    "12": "current_input",
                    "2": "current_element",
                    "4": "current_buffer",
                    "6": "current_data"
                },
                "param_1": {
                    "1": "packet",
                    "2": "data_buffer",
                    "21": "data",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "data_buffer",
                    "10": "input",
                    "2": "input_data",
                    "3": "data",
                    "4": "input_array",
                    "7": "buffer"
                },
                "param_3": {
                    "1": "input_array_length",
                    "2": "array_size",
                    "3": "buffer_length",
                    "4": "input_size",
                    "5": "data_length",
                    "9": "input_length"
                },
                "param_4": {
                    "31": "timeout"
                },
                "uVar3": {
                    "1": "return_value",
                    "25": "result"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004f3c"
            ],
            "code": "\nundefined4 process_data_08004436(uint **data,ushort *input,short input_length,uint timeout)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  ushort *current_input;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input == (ushort *)0x0) || (input_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      start_time = get_current_time();\n      *(short *)(data + 9) = input_length;\n      *(short *)((int)data + 0x26) = input_length;\n      current_input = input;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              current_time = 0;\n              goto check_flag1;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          current_time = 3;\ncheck_flag1:\n          if (current_time != 0) {\n            return 3;\n          }\n          (*data)[1] = *current_input & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            current_input = current_input + 1;\n          }\n          else {\n            current_input = (ushort *)((int)current_input + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              current_time = 0;\n              goto check_flag2;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          current_time = 3;\ncheck_flag2:\n          if (current_time != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)current_input;\n          current_input = (ushort *)((int)current_input + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          start_time = 0;\n          goto check_flag3;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      start_time = 3;\ncheck_flag3:\n      if (start_time == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08004436",
            "entrypoint": "0x08004436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "HAL_GetTick": "get_current_time",
                "LAB_0800454c": "check_flag1",
                "LAB_08004614": "check_flag2",
                "LAB_080046c6": "check_flag3",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "local_58": "current_input",
                "param_1": "data",
                "param_2": "input",
                "param_3": "input_length",
                "param_4": "timeout",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046ec": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "reg_value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "reg_value3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "reg_value2"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "reg_value4"
                },
                "*param_1": {
                    "1": "base_address"
                },
                "0x10": {
                    "1": "offset1"
                },
                "0x19": {
                    "1": "multiplier1"
                },
                "0x32": {
                    "1": "offset2"
                },
                "0x40013800": {
                    "1": "expected_value1"
                },
                "0x51eb851f": {
                    "1": "multiplier2"
                },
                "100": {
                    "1": "divider2"
                },
                "DAT_080046f8": {
                    "1": "pclk1"
                },
                "FUN_08003518": {
                    "2": "hal_rcc_get_pclk1_freq"
                },
                "FUN_08003540": {
                    "2": "hal_rcc_get_pclk2_freq"
                },
                "FUN_080046ec": {
                    "1": "calculate_pclk_value",
                    "2": "calculate_clock_config",
                    "3": "update_clock_configuration",
                    "8": "calculate_clock_frequency"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "1": "get_pclk1_filtered_frequency",
                    "13": "get_pclk1_frequency",
                    "2": "get_pclk1_freq"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "1": "get_pclk2_filtered_frequency",
                    "13": "get_pclk2_frequency",
                    "2": "get_pclk2_freq"
                },
                "_HAL_RCC_GetPCLK2Freq": {
                    "1": "get_pclk2_frequency"
                },
                "iVar2": {
                    "1": "pclk2_freq_per_tick_muliplier",
                    "2": "pclk2freq",
                    "3": "pclk2",
                    "4": "pclk2_freq"
                },
                "iVar3": {
                    "1": "pclk1_divisor",
                    "2": "pclk3"
                },
                "iVar5": {
                    "1": "temp4",
                    "2": "param2"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "clock_config",
                    "3": "parameters",
                    "5": "config_params",
                    "6": "clock_params"
                },
                "param_1[1]": {
                    "1": "divider"
                },
                "param_1[2]": {
                    "1": "value3"
                },
                "param_1[3]": {
                    "1": "value1"
                },
                "param_1[4]": {
                    "1": "value4"
                },
                "param_1[5]": {
                    "1": "value2"
                },
                "param_1[6]": {
                    "1": "value5"
                },
                "uVar1": {
                    "1": "pclk_multiplier",
                    "2": "pclk2div",
                    "3": "frequency_ratio"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "temp1"
                },
                "uVar6": {
                    "1": "pclk1_multiplier",
                    "14": "pclk_freq",
                    "2": "pclk_freq2"
                }
            },
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid calculate_clock_frequency_080046ec(int *clock_params)\n\n{\n  ulonglong frequency_ratio;\n  int pclk2_freq;\n  int param1;\n  uint temp;\n  int param2;\n  undefined8 pclk_freq;\n  \n  *(uint *)(*clock_params + 0x10) = value1 | *(uint *)(*clock_params + 0x10) & 0xffffcfff;\n  *(uint *)(*clock_params + 0xc) =\n       *(uint *)(*clock_params + 0xc) & 0xffffe9f3 | value2 | value3 | value4;\n  *(uint *)(*clock_params + 0x14) = value5 | *(uint *)(*clock_params + 0x14) & 0xfffffcff;\n  if (*clock_params == 0x40013800) {\n    pclk_freq = get_pclk2_frequency();\n    frequency_ratio = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 2);\n    pclk2_freq = get_pclk2_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(frequency_ratio * 0x51eb851f));\n    param1 = divider;\n    pclk_freq = get_pclk2_frequency();\n    temp = ((uint)(pclk2_freq * 0x19) / (uint)(param1 << 2) +\n            (int)(((ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    pclk2_freq = get_pclk2_frequency((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),temp * 0x51eb851f);\n    param2 = divider;\n    param1 = get_pclk2_frequency();\n    *(uint *)(*clock_params + 8) =\n         ((((uint)(pclk2_freq * 0x19) / (uint)(param2 << 2) +\n           (int)(((ulonglong)(uint)(param1 * 0x19) / (ulonglong)(uint)(divider << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(frequency_ratio / 100) * 0x10 + (temp / 100 & 0xf0);\n  }\n  else {\n    pclk_freq = get_pclk1_frequency();\n    frequency_ratio = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 2);\n    pclk2_freq = get_pclk1_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(frequency_ratio * 0x51eb851f));\n    param1 = divider;\n    pclk_freq = get_pclk1_frequency();\n    temp = ((uint)(pclk2_freq * 0x19) / (uint)(param1 << 2) +\n            (int)(((ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    pclk2_freq = get_pclk1_frequency((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),temp * 0x51eb851f);\n    param2 = divider;\n    param1 = get_pclk1_frequency();\n    *(uint *)(*clock_params + 8) =\n         ((((uint)(pclk2_freq * 0x19) / (uint)(param2 << 2) +\n           (int)(((ulonglong)(uint)(param1 * 0x19) / (ulonglong)(uint)(divider << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(frequency_ratio / 100) * 0x10 + (temp / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "current_name": "calculate_clock_frequency_080046ec",
            "entrypoint": "0x080046ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046ec": "calculate_clock_frequency_080046ec",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency",
                "iVar2": "pclk2_freq",
                "iVar3": "param1",
                "iVar5": "param2",
                "param_1": "clock_params",
                "param_1[1]": "divider",
                "param_1[2]": "value3",
                "param_1[3]": "value1",
                "param_1[4]": "value4",
                "param_1[5]": "value2",
                "param_1[6]": "value5",
                "uVar1": "frequency_ratio",
                "uVar4": "temp",
                "uVar6": "pclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800491c": {
            "additional_data": {
                "*DAT_20000a54": {
                    "1": "write_to_memory"
                },
                "FUN_0800491c": {
                    "1": "initialize_and_calibrate_mpu6050",
                    "15": "initialize_mpu6050",
                    "4": "initialize_mpu",
                    "8": "initialize_sensor"
                },
                "local_11": {
                    "1": "buf_3",
                    "2": "local_array",
                    "3": "buffer",
                    "4": "byte_array"
                },
                "local_12": {
                    "1": "buf_2",
                    "2": "value"
                },
                "local_13": {
                    "1": "value1",
                    "2": "sensor_value_1",
                    "3": "zero_byte",
                    "5": "zero"
                },
                "mpu6050_calibrate": {
                    "1": "calibrate_sensor",
                    "5": "calibrate_mpu6050"
                },
                "param_1": {
                    "1": "device_data",
                    "2": "data_buffer",
                    "3": "output",
                    "5": "output_buffer",
                    "6": "sensor_data"
                },
                "param_1[0]": {
                    "1": "sensor_data.x"
                },
                "param_1[10]": {
                    "1": "sensor_data.var_2_c"
                },
                "param_1[1]": {
                    "1": "sensor_data.y"
                },
                "param_1[2]": {
                    "1": "sensor_data.z"
                },
                "param_1[3]": {
                    "1": "sensor_data.var_10"
                },
                "param_1[4]": {
                    "1": "sensor_data.var_14"
                },
                "param_1[5]": {
                    "1": "sensor_data.var_18"
                },
                "param_1[6]": {
                    "1": "sensor_data.var_1_c"
                },
                "param_1[7]": {
                    "1": "sensor_data.var_20"
                },
                "param_1[8]": {
                    "1": "sensor_data.var_24"
                },
                "param_1[9]": {
                    "1": "sensor_data.var_28"
                }
            },
            "called": [
                "FUN_080049cc"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_mpu6050_0800491c(undefined4 *sensor_data)\n\n{\n  undefined zero;\n  undefined byte_value;\n  undefined byte_array [5];\n  \n  zero = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&zero,1);\n  byte_value = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&byte_value,1);\n  byte_array[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,byte_array,1);\n  *sensor_data = 0;\n  sensor_data.y = 0;\n  sensor_data.z = 0;\n  sensor_data.var_10 = 0;\n  sensor_data.var_14 = 0;\n  sensor_data.var_18 = 0;\n  sensor_data.var_1_c = 0;\n  sensor_data.var_20 = 0;\n  sensor_data.var_24 = 0;\n  sensor_data.var_28 = 0;\n  sensor_data.var_2_c = 0;\n  calibrate_mpu6050(sensor_data);\n  return;\n}\n\n",
            "current_name": "initialize_mpu6050_0800491c",
            "entrypoint": "0x0800491c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800491c": "initialize_mpu6050_0800491c",
                "local_11": "byte_array",
                "local_12": "byte_value",
                "local_13": "zero",
                "mpu6050_calibrate": "calibrate_mpu6050",
                "param_1": "sensor_data",
                "param_1[10]": "sensor_data.var_2_c",
                "param_1[1]": "sensor_data.y",
                "param_1[2]": "sensor_data.z",
                "param_1[3]": "sensor_data.var_10",
                "param_1[4]": "sensor_data.var_14",
                "param_1[5]": "sensor_data.var_18",
                "param_1[6]": "sensor_data.var_1_c",
                "param_1[7]": "sensor_data.var_20",
                "param_1[8]": "sensor_data.var_24",
                "param_1[9]": "sensor_data.var_28"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049cc": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "get_acceleration_x"
                },
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "get_acceleration_y"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "average_acceleration_x"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "average_acceleration_y"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "average_pitch"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "average_roll"
                },
                "FUN_080049cc": {
                    "1": "calculate_average_acc_and_roll",
                    "12": "calculate_average_sensor_values",
                    "2": "calculate_average_acc_pitch_roll",
                    "4": "calculate_average_acceleration",
                    "7": "calculate_average_sensor_data"
                },
                "__addsf3": {
                    "1": "sum_floats",
                    "5": "add_floats"
                },
                "__aeabi_fdiv": {
                    "1": "float_divide",
                    "4": "divide_floats"
                },
                "__floatsisf": {
                    "2": "convert_int_to_float",
                    "4": "int_to_float"
                },
                "local_10": {
                    "1": "y_accumulated",
                    "2": "sum_acc_x",
                    "3": "total_acc_y"
                },
                "local_14": {
                    "1": "total_acc_pitch",
                    "2": "total_roll",
                    "3": "total_pitch",
                    "5": "sum_pitch"
                },
                "local_18": {
                    "1": "pitch_sum",
                    "2": "acc_roll_sum",
                    "3": "total_roll",
                    "5": "sum_roll"
                },
                "local_1c": {
                    "1": "iteration_index",
                    "2": "current_iteration",
                    "3": "iteration_count",
                    "4": "count",
                    "5": "reading_count",
                    "7": "sample_count"
                },
                "local_20": {
                    "1": "data_array_size",
                    "2": "number_of_samples",
                    "3": "iteration_count",
                    "4": "num_iterations",
                    "6": "num_readings"
                },
                "local_24": {
                    "1": "timestamp",
                    "10": "current_time",
                    "2": "get_time_func",
                    "8": "get_current_time"
                },
                "local_28": {
                    "1": "acc_sum",
                    "2": "total_roll",
                    "3": "pitch_sum",
                    "4": "pitch",
                    "5": "acc_pitch"
                },
                "local_2c": {
                    "1": "pitch_roll_sum",
                    "2": "acc_roll_sum",
                    "3": "pitch_sum",
                    "4": "roll",
                    "5": "acc_roll"
                },
                "local_c": {
                    "1": "sum_acc_x",
                    "2": "acceleration_sum",
                    "3": "total_acc_x"
                },
                "mpu6050_calc_acc_pitch_roll": {
                    "3": "calculate_pitch_and_roll"
                },
                "mpu6050_update": {
                    "6": "update_sensor_data"
                },
                "param_1": {
                    "1": "accelerometer_data_array",
                    "2": "accelerometer_data",
                    "20": "sensor_data",
                    "3": "sensor_data_array"
                },
                "param_1 + 0x10": {
                    "1": "acc_x"
                },
                "param_1 + 0x14": {
                    "1": "acc_y"
                },
                "param_1 + 0x1c": {
                    "1": "avg_acc_y"
                },
                "param_1 + 0x20": {
                    "1": "average_acc_y"
                },
                "param_1 + 0x24": {
                    "1": "avg_pitch"
                },
                "param_1 + 0x28": {
                    "1": "avg_roll"
                },
                "uVar1": {
                    "1": "result",
                    "2": "average"
                },
                "uVar2": {
                    "1": "average_acc_y"
                },
                "uVar3": {
                    "1": "avg_pitch"
                },
                "uVar4": {
                    "1": "avg_roll"
                }
            },
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_0800491c"
            ],
            "code": "\nvoid calculate_average_sensor_values_080049cc(int sensor_data)\n\n{\n  undefined4 average;\n  undefined4 acc_roll;\n  undefined4 acc_pitch;\n  undefined4 current_time;\n  int num_readings;\n  int sample_count;\n  undefined4 sum_roll;\n  undefined4 sum_pitch;\n  undefined4 total_acc_y;\n  undefined4 total_acc_x;\n  \n  num_readings = 1;\n  total_acc_x = 0;\n  total_acc_y = 0;\n  sum_pitch = 0;\n  sum_roll = 0;\n  current_time = (*DAT_20000a50)();\n  sample_count = 0;\n  while( true ) {\n    if (num_readings <= sample_count) break;\n    acc_pitch = 0;\n    acc_roll = 0;\n    update_sensor_data(sensor_data);\n    calculate_pitch_and_roll(sensor_data,&acc_pitch,&acc_roll);\n    sum_pitch = add_floats(sum_pitch,acc_pitch);\n    sum_roll = add_floats(sum_roll,acc_roll);\n    total_acc_x = add_floats(total_acc_x,*(undefined4 *)(sensor_data + 0x10));\n    total_acc_y = add_floats(total_acc_y,*(undefined4 *)(sensor_data + 0x14));\n    current_time = (*DAT_20000a50)();\n    sample_count = sample_count + 1;\n  }\n  average = int_to_float(num_readings);\n  average = divide_floats(total_acc_x,average);\n  *(undefined4 *)(sensor_data + 0x1c) = average;\n  average = int_to_float(num_readings);\n  average = divide_floats(total_acc_y,average);\n  *(undefined4 *)(sensor_data + 0x20) = average;\n  average = int_to_float(num_readings);\n  average = divide_floats(sum_pitch,average);\n  *(undefined4 *)(sensor_data + 0x24) = average;\n  average = int_to_float(num_readings);\n  average = divide_floats(sum_roll,average);\n  *(undefined4 *)(sensor_data + 0x28) = average;\n  return;\n}\n\n",
            "current_name": "calculate_average_sensor_values_080049cc",
            "entrypoint": "0x080049cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049cc": "calculate_average_sensor_values_080049cc",
                "__addsf3": "add_floats",
                "__aeabi_fdiv": "divide_floats",
                "__floatsisf": "int_to_float",
                "local_10": "total_acc_y",
                "local_14": "sum_pitch",
                "local_18": "sum_roll",
                "local_1c": "sample_count",
                "local_20": "num_readings",
                "local_24": "current_time",
                "local_28": "acc_pitch",
                "local_2c": "acc_roll",
                "local_c": "total_acc_x",
                "mpu6050_calc_acc_pitch_roll": "calculate_pitch_and_roll",
                "mpu6050_update": "update_sensor_data",
                "param_1": "sensor_data",
                "uVar1": "average"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "additional_data": {
                "CONCAT11": {
                    "1": "concatenate_bytes"
                },
                "DAT_20000a4c": {
                    "1": "function_pointer"
                },
                "FUN_08000c10": {
                    "1": "perform_conversion"
                },
                "FUN_08004ae0": {
                    "1": "convert_to_floats",
                    "2": "convert_floats_to_ints",
                    "4": "extract_floats",
                    "5": "convert_integers_to_floats"
                },
                "__floatsisf": {
                    "1": "convert_integer_to_float",
                    "2": "convert_to_float"
                },
                "local_14": {
                    "1": "input_6",
                    "11": "short6",
                    "2": "var_20"
                },
                "local_16": {
                    "1": "temp_variable18",
                    "11": "short5",
                    "2": "var_19"
                },
                "local_18": {
                    "1": "value18",
                    "11": "short4",
                    "2": "var_18"
                },
                "local_1a": {
                    "1": "seventeenth_byte",
                    "11": "short3",
                    "2": "var_17"
                },
                "local_1c": {
                    "1": "converted_value2",
                    "11": "short2",
                    "2": "var_16"
                },
                "local_1e": {
                    "1": "converted_float1",
                    "11": "short1",
                    "2": "var_15"
                },
                "local_1f": {
                    "1": "int14",
                    "2": "var_14",
                    "3": "temp_14",
                    "4": "temp_var14",
                    "8": "byte14"
                },
                "local_20": {
                    "1": "temp13",
                    "2": "temp_var_13",
                    "3": "temp_13",
                    "4": "temp_var13",
                    "8": "byte13"
                },
                "local_21": {
                    "1": "temp_byte12",
                    "2": "temp_var_12",
                    "3": "temp_12",
                    "4": "temp_var12",
                    "8": "byte12"
                },
                "local_22": {
                    "1": "temp_variable11",
                    "2": "var_11",
                    "3": "temp_11",
                    "4": "temp_var11",
                    "8": "byte11"
                },
                "local_23": {
                    "1": "temp10",
                    "2": "temp_var_10",
                    "3": "temp_10",
                    "4": "temp_var10",
                    "8": "byte10"
                },
                "local_24": {
                    "1": "out_byte7",
                    "2": "temp_var_9",
                    "3": "temp_9",
                    "4": "temp_var9",
                    "8": "byte9"
                },
                "local_25": {
                    "1": "int8",
                    "2": "var_8",
                    "3": "temp_8",
                    "4": "temp_var8",
                    "8": "byte8"
                },
                "local_26": {
                    "1": "value7",
                    "2": "var_7",
                    "3": "temp_7",
                    "4": "temp_var7",
                    "8": "byte7"
                },
                "local_27": {
                    "1": "sixth_byte",
                    "2": "var_6",
                    "3": "temp_6",
                    "4": "temp_var6",
                    "8": "byte6"
                },
                "local_28": {
                    "1": "temp5",
                    "2": "var_5",
                    "3": "temp_5",
                    "4": "temp_var5",
                    "8": "byte5"
                },
                "local_29": {
                    "1": "temp_byte4",
                    "2": "var_4",
                    "3": "temp_4",
                    "4": "temp_var4",
                    "8": "byte4"
                },
                "local_2a": {
                    "1": "out_byte1",
                    "2": "var_3",
                    "3": "temp_3",
                    "4": "temp_var3",
                    "8": "byte3"
                },
                "local_2b": {
                    "1": "conversion_buffer2",
                    "2": "var_2",
                    "3": "temp_2",
                    "4": "temp_var2",
                    "8": "byte2"
                },
                "local_2c": {
                    "1": "first_byte",
                    "2": "temp_var_1",
                    "3": "temp_var1",
                    "8": "byte1"
                },
                "param_1": {
                    "1": "converted_floats",
                    "17": "output_array",
                    "5": "float_array"
                },
                "uVar1": {
                    "1": "float_value",
                    "3": "converted_float"
                }
            },
            "called": [
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nvoid convert_integers_to_floats_08004ae0(undefined4 *output_array)\n\n{\n  undefined4 converted_float;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  undefined byte5;\n  undefined byte6;\n  undefined byte7;\n  undefined byte8;\n  undefined byte9;\n  undefined byte10;\n  undefined byte11;\n  undefined byte12;\n  undefined byte13;\n  undefined byte14;\n  short short1;\n  short short2;\n  short short3;\n  short short4;\n  short short5;\n  short short6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&byte1,0xe);\n  short6 = concatenate_bytes(byte3,byte4);\n  short5 = concatenate_bytes(byte5,byte6);\n  short4 = concatenate_bytes(byte7,byte8);\n  short3 = concatenate_bytes(byte9,byte10);\n  short2 = concatenate_bytes(byte11,byte12);\n  short1 = concatenate_bytes(byte13,byte14);\n  converted_float = convert_to_float((int)concatenate_bytes(byte1,byte2));\n  *output_array = converted_float;\n  converted_float = convert_to_float((int)short6);\n  output_array[1] = converted_float;\n  converted_float = convert_to_float((int)short5);\n  output_array[2] = converted_float;\n  converted_float = convert_to_float((int)short4);\n  output_array[3] = converted_float;\n  converted_float = convert_to_float((int)short3);\n  output_array[4] = converted_float;\n  converted_float = convert_to_float((int)short2);\n  output_array[5] = converted_float;\n  converted_float = convert_to_float((int)short1);\n  output_array[6] = converted_float;\n  return;\n}\n\n",
            "current_name": "convert_integers_to_floats_08004ae0",
            "entrypoint": "0x08004ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT11": "concatenate_bytes",
                "FUN_08004ae0": "convert_integers_to_floats_08004ae0",
                "__floatsisf": "convert_to_float",
                "local_14": "short6",
                "local_16": "short5",
                "local_18": "short4",
                "local_1a": "short3",
                "local_1c": "short2",
                "local_1e": "short1",
                "local_1f": "byte14",
                "local_20": "byte13",
                "local_21": "byte12",
                "local_22": "byte11",
                "local_23": "byte10",
                "local_24": "byte9",
                "local_25": "byte8",
                "local_26": "byte7",
                "local_27": "byte6",
                "local_28": "byte5",
                "local_29": "byte4",
                "local_2a": "byte3",
                "local_2b": "byte2",
                "local_2c": "byte1",
                "param_1": "output_array",
                "uVar1": "converted_float"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "additional_data": {
                "0x3fc99999": {
                    "1": "double_constant3"
                },
                "0x3fe99999": {
                    "1": "double_constant2"
                },
                "0x9999999a": {
                    "1": "double_constant1"
                },
                "DAT_20000005": {
                    "1": "flag"
                },
                "DAT_200009e4": {
                    "1": "float_constant1"
                },
                "FUN_08004bd8": {
                    "1": "calculate_position",
                    "2": "calculate_angle",
                    "27": "calculate_result"
                },
                "__aeabi_dadd": {
                    "1": "add_double"
                },
                "__aeabi_f2d": {
                    "1": "float_to_double2"
                },
                "__aeabi_fsub": {
                    "1": "subtract_float"
                },
                "__divdf3": {
                    "1": "divide_double"
                },
                "__muldf3": {
                    "1": "multiply_double"
                },
                "__truncdfsf2": {
                    "1": "double_to_float"
                },
                "atan2": {
                    "1": "calculate_arctan"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_parameter",
                    "3": "input_address",
                    "5": "input_param",
                    "6": "input",
                    "9": "input_data"
                },
                "param_2": {
                    "1": "output_result",
                    "2": "result",
                    "4": "output_param",
                    "5": "output_data",
                    "6": "output_value",
                    "7": "output"
                },
                "uVar1": {
                    "12": "subtraction_result",
                    "16": "difference",
                    "2": "result1"
                },
                "uVar2": {
                    "1": "temp_var_1",
                    "10": "temp1",
                    "2": "intermediate_value_1",
                    "3": "temp_1",
                    "6": "temp_var1"
                },
                "uVar3": {
                    "1": "temp_variable2",
                    "10": "temp2",
                    "2": "intermediate_value_2",
                    "3": "temp_2",
                    "6": "temp_var2"
                }
            },
            "called": [
                "FUN_08000aa4",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_080009fc",
                "FUN_08005834",
                "FUN_08000158",
                "FUN_08000418"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid calculate_result_08004bd8(int input_data,undefined4 *output)\n\n{\n  undefined4 difference;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  difference = subtract_float(*(undefined4 *)(input_data + 0x10),*(undefined4 *)(input_data + 0x1c));\n  temp1 = float_to_double2(DAT_200009e4);\n  temp2 = float_to_double2(difference);\n  temp2 = multiply_double((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x83f5c366,0x3f340215);\n  temp1 = add_double((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                       (int)((ulonglong)temp2 >> 0x20));\n  DAT_200009e4 = double_to_float((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  temp1 = float_to_double2(*(undefined4 *)(input_data + 4));\n  temp1 = divide_double((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40b00000);\n  temp2 = float_to_double2(*(undefined4 *)(input_data + 8));\n  temp2 = divide_double((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x40b00000);\n  temp1 = calculate_arctan((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                (int)((ulonglong)temp2 >> 0x20));\n  temp1 = multiply_double((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = divide_double((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  temp2 = float_to_double2(*(undefined4 *)(input_data + 0x24));\n  temp1 = __subdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                   (int)((ulonglong)temp2 >> 0x20));\n  temp1 = add_double((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40568000);\n  difference = double_to_float((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    temp1 = float_to_double2(DAT_200009e4);\n    temp1 = multiply_double((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x9999999a,0x3fe99999);\n    temp2 = float_to_double2(difference);\n    temp2 = multiply_double((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x9999999a,0x3fc99999);\n    temp1 = add_double((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                         (int)((ulonglong)temp2 >> 0x20));\n    DAT_200009e4 = double_to_float((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = difference;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "current_name": "calculate_result_08004bd8",
            "entrypoint": "0x08004bd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "__aeabi_dadd": "add_double",
                "__aeabi_f2d": "float_to_double2",
                "__aeabi_fsub": "subtract_float",
                "__divdf3": "divide_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "double_to_float",
                "atan2": "calculate_arctan",
                "param_1": "input_data",
                "param_2": "output",
                "uVar1": "difference",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d78": {
            "additional_data": {
                "0x400921fb": {
                    "1": "division_factor_3"
                },
                "0x40668000": {
                    "1": "multiplication_factor_1"
                },
                "0x45800000": {
                    "1": "division_factor_1"
                },
                "0x54442d18": {
                    "1": "division_factor_2"
                },
                "FUN_08004d78": {
                    "1": "calculate_direction_vector",
                    "25": "calculate_angles",
                    "3": "calculate_angle"
                },
                "__aeabi_f2d": {
                    "1": "floating_point_conversion"
                },
                "__aeabi_fdiv": {
                    "2": "floating_point_division"
                },
                "__divdf3": {
                    "1": "division"
                },
                "__muldf3": {
                    "1": "floating_point_double_multiplication"
                },
                "__truncdfsf2": {
                    "1": "truncate_float_to_int"
                },
                "atan2": {
                    "1": "arctangent_2"
                },
                "param_1": {
                    "1": "input_data",
                    "16": "input_values",
                    "2": "input_vector",
                    "6": "input_array"
                },
                "param_2": {
                    "1": "angle2",
                    "2": "output_var1",
                    "3": "result1",
                    "4": "output_angle1",
                    "6": "output_value1"
                },
                "param_3": {
                    "1": "angle1",
                    "2": "output_vector_2",
                    "3": "result_2",
                    "4": "angle2",
                    "6": "output_value2"
                },
                "uVal2": {
                    "1": "div_result2"
                },
                "uVal3": {
                    "1": "div_result3"
                },
                "uVar1": {
                    "1": "result_1",
                    "2": "div_result_1",
                    "3": "value1",
                    "5": "dividend1",
                    "6": "div_result1"
                },
                "uVar2": {
                    "1": "result_2",
                    "2": "temp2",
                    "3": "value2",
                    "5": "dividend2"
                },
                "uVar3": {
                    "1": "normalized_coord3",
                    "2": "temp3",
                    "3": "value3",
                    "5": "dividend3"
                },
                "uVar4": {
                    "1": "temp_4",
                    "2": "angle1",
                    "3": "result1",
                    "9": "atan_result"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp_result_2",
                    "3": "result2",
                    "6": "atan_result2"
                }
            },
            "called": [
                "FUN_08000e20",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009fc",
                "FUN_08005834",
                "FUN_08000418"
            ],
            "calling": [
                "FUN_080049cc"
            ],
            "code": "\nvoid calculate_angles_08004d78(undefined4 *input_values,undefined4 *output_value1,undefined4 *output_value2)\n\n{\n  undefined4 div_result1;\n  undefined4 dividend2;\n  undefined4 dividend3;\n  undefined8 atan_result;\n  undefined8 atan_result2;\n  \n  div_result1 = floating_point_division(*input_values,0x45800000);\n  dividend2 = floating_point_division(input_values[1],0x45800000);\n  dividend3 = floating_point_division(input_values[2],0x45800000);\n  atan_result = floating_point_conversion(dividend2);\n  atan_result2 = floating_point_conversion(dividend3);\n  atan_result = calculate_arctangent((int)atan_result,(int)((ulonglong)atan_result >> 0x20),(int)atan_result2,\n                (int)((ulonglong)atan_result2 >> 0x20));\n  atan_result = multiplication((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0,0x40668000);\n  atan_result = division((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0x54442d18,0x400921fb);\n  dividend2 = truncate_float_to_int((int)atan_result,(int)((ulonglong)atan_result >> 0x20));\n  atan_result = floating_point_conversion(div_result1);\n  atan_result2 = floating_point_conversion(dividend3);\n  atan_result = calculate_arctangent((int)atan_result,(int)((ulonglong)atan_result >> 0x20),(int)atan_result2,\n                (int)((ulonglong)atan_result2 >> 0x20));\n  atan_result = multiplication((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0,0x40668000);\n  atan_result = division((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0x54442d18,0x400921fb);\n  div_result1 = truncate_float_to_int((int)atan_result,(int)((ulonglong)atan_result >> 0x20));\n  *output_value1 = dividend2;\n  *output_value2 = div_result1;\n  return;\n}\n\n",
            "current_name": "calculate_angles_08004d78",
            "entrypoint": "0x08004d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d78": "calculate_angles_08004d78",
                "__aeabi_f2d": "floating_point_conversion",
                "__aeabi_fdiv": "floating_point_division",
                "__divdf3": "division",
                "__muldf3": "multiplication",
                "__truncdfsf2": "truncate_float_to_int",
                "atan2": "calculate_arctangent",
                "param_1": "input_values",
                "param_2": "output_value1",
                "param_3": "output_value2",
                "uVar1": "div_result1",
                "uVar2": "dividend2",
                "uVar3": "dividend3",
                "uVar4": "atan_result",
                "uVar5": "atan_result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "additional_data": {
                "0x3f": {
                    "1": "interrupt_code"
                },
                "<no_parameters>": {
                    "1": "<no_parameters>"
                },
                "<original_parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "FUN_08004e6c": {
                    "1": "interrupt_call",
                    "2": "call_software_interrupt",
                    "4": "execute_system_call",
                    "5": "execute_system_interrupt",
                    "6": "execute_software_interrupt"
                },
                "software_interrupt": {
                    "1": "trigger_system_call",
                    "2": "execute_interrupt",
                    "3": "perform_interrupt",
                    "9": "trigger_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nvoid execute_software_interrupt_08004e6c(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_software_interrupt_08004e6c",
            "entrypoint": "0x08004e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e6c": "execute_software_interrupt_08004e6c",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e74": {
            "additional_data": {
                "FUN_08004e74": {
                    "1": "execute_or_skip_afl_call",
                    "10": "execute_afl_call",
                    "2": "afl_call_wrapper",
                    "3": "call_afl_function"
                },
                "param_1": {
                    "1": "input_parameter",
                    "14": "input",
                    "4": "input_param",
                    "8": "input_value"
                },
                "uVar1": {
                    "1": "output",
                    "21": "result",
                    "9": "return_value"
                }
            },
            "called": [
                "FUN_08004e6c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 execute_afl_call_08004e74(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = aflCall(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "execute_afl_call_08004e74",
            "entrypoint": "0x08004e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e74": "execute_afl_call_08004e74",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "additional_data": {
                "DAT_20000008": {
                    "2": "timeout"
                },
                "DAT_20000a88": {
                    "1": "i2c_handle",
                    "3": "i2c_device"
                },
                "FUN_08001ccc": {
                    "1": "prepare_i2_c_data",
                    "2": "process_data"
                },
                "FUN_08004ea4": {
                    "1": "write_i2c_mem_data",
                    "2": "write_to_i2_c",
                    "3": "write_i2c_memory",
                    "5": "write_data_to_i2_c_device",
                    "8": "write_data_to_i2_c"
                },
                "HAL_I2C_Mem_Write": {
                    "1": "perform_i2_c_write",
                    "2": "write_to_i2c_memory",
                    "3": "write_i2_c_memory",
                    "6": "write_to_i2_c_memory"
                },
                "param_1": {
                    "1": "i2c_address",
                    "18": "device_address",
                    "2": "i2c_device",
                    "3": "data_buffer"
                },
                "param_2": {
                    "1": "param_2",
                    "12": "register_address",
                    "2": "start_address",
                    "3": "memory_address"
                },
                "param_3": {
                    "1": "end_index",
                    "11": "data",
                    "2": "register_value",
                    "4": "register_address"
                },
                "param_4": {
                    "1": "command",
                    "2": "step_size",
                    "3": "length",
                    "5": "data_size"
                },
                "param_5": {
                    "1": "input_data",
                    "2": "param_5",
                    "3": "result"
                }
            },
            "called": [
                "FUN_08001ccc"
            ],
            "calling": [],
            "code": "\nvoid write_data_to_i2_c_08004ea4(undefined device_address,undefined register_address,undefined4 data,undefined2 data_size)\n\n{\n  write_to_i2_c_memory(&DAT_20000a88,device_address,register_address,1,data,data_size,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "write_data_to_i2_c_08004ea4",
            "entrypoint": "0x08004ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ea4": "write_data_to_i2_c_08004ea4",
                "HAL_I2C_Mem_Write": "write_to_i2_c_memory",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "data_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "additional_data": {
                "DAT_20000008": {
                    "1": "slave_address"
                },
                "DAT_20000a88": {
                    "2": "i2_c_controller"
                },
                "FUN_08001f6c": {
                    "1": "copy_and_convert_data",
                    "3": "process_data"
                },
                "FUN_08004ee8": {
                    "1": "read_from_i2_c",
                    "10": "read_i2_c_memory",
                    "2": "read_from_i2_c_memory",
                    "3": "read_data_from_i2_c",
                    "5": "read_i2c_memory",
                    "7": "read_i2_c_data"
                },
                "HAL_I2C_Mem_Read": {
                    "1": "read_from_i2_c",
                    "2": "read_i2c_memory",
                    "9": "read_i2_c_memory"
                },
                "param_1": {
                    "1": "data_buffer",
                    "2": "buffer",
                    "25": "device_address"
                },
                "param_2": {
                    "1": "start_address",
                    "11": "memory_address",
                    "3": "data_buffer",
                    "9": "register_address"
                },
                "param_3": {
                    "1": "register_len",
                    "2": "read_size",
                    "5": "data_length"
                },
                "param_4": {
                    "1": "memory_address",
                    "2": "read_buffer",
                    "4": "buffer"
                },
                "param_5": {
                    "1": "end_address",
                    "2": "result"
                },
                "param_6": {
                    "1": "destination_data"
                }
            },
            "called": [
                "FUN_08001f6c"
            ],
            "calling": [],
            "code": "\nvoid read_i2_c_memory_08004ee8(undefined device_address,undefined memory_address,undefined4 data_length,undefined2 data_buffer)\n\n{\n  read_i2_c_memory_08004ee8(&DAT_20000a88,device_address,memory_address,1,data_length,data_buffer,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "read_i2_c_memory_08004ee8",
            "entrypoint": "0x08004ee8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ee8": "read_i2_c_memory_08004ee8",
                "HAL_I2C_Mem_Read": "read_i2_c_memory",
                "param_1": "device_address",
                "param_2": "memory_address",
                "param_3": "data_length",
                "param_4": "data_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "additional_data": {
                "FUN_08004f2c": {
                    "1": "get_system_tick_count",
                    "10": "get_current_tick",
                    "2": "get_tick_count",
                    "3": "get_system_time",
                    "6": "get_current_time",
                    "7": "get_system_tick"
                },
                "HAL_GetTick": {
                    "1": "get_tick",
                    "2": "get_tick_count"
                },
                "original_return_variable": {
                    "1": "current_time"
                },
                "uVar1": {
                    "1": "system_time",
                    "10": "current_tick",
                    "2": "tick_count",
                    "4": "current_time",
                    "5": "system_tick"
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [],
            "code": "\nundefined4 get_current_tick_08004f2c(void)\n\n{\n  undefined4 current_tick;\n  \n  current_tick = get_tick_count();\n  return current_tick;\n}\n\n",
            "current_name": "get_current_tick_08004f2c",
            "entrypoint": "0x08004f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f2c": "get_current_tick_08004f2c",
                "HAL_GetTick": "get_tick_count",
                "uVar1": "current_tick"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "additional_data": {
                "0x32": {
                    "1": "timeout"
                },
                "FUN_08004436": {
                    "1": "handle_data",
                    "15": "process_data"
                },
                "FUN_08004f3c": {
                    "1": "transmit_serial_data",
                    "28": "transmit_data"
                },
                "HAL_UART_Transmit": {
                    "1": "send_data_over_uart",
                    "2": "transmit_data",
                    "4": "transmit_uart_data",
                    "7": "transmit_uart",
                    "8": "send_data"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "data",
                    "17": "data_buffer"
                },
                "param_2": {
                    "1": "input_length",
                    "11": "length",
                    "12": "data_length",
                    "2": "size",
                    "5": "data_size"
                },
                "param_3": {
                    "1": "length",
                    "2": "data_offset"
                },
                "param_4": {
                    "1": "flags",
                    "2": "value"
                }
            },
            "called": [
                "FUN_08004436"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid transmit_data_08004f3c(undefined4 data_buffer,undefined2 data_length)\n\n{\n  send_data(&DAT_20000adc,data_buffer,data_length,0x32);\n  return;\n}\n\n",
            "current_name": "transmit_data_08004f3c",
            "entrypoint": "0x08004f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f3c": "transmit_data_08004f3c",
                "HAL_UART_Transmit": "send_data",
                "param_1": "data_buffer",
                "param_2": "data_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f60": {
            "additional_data": {
                "DAT_20000ba8": {
                    "1": "data_memory"
                },
                "FUN_08004f60": {
                    "1": "clear_data_structure",
                    "10": "initialize_memory",
                    "12": "initialize_data",
                    "2": "clear_memory"
                },
                "FUN_08005d68": {
                    "1": "copy_data",
                    "5": "process_data"
                },
                "memset": {
                    "1": "initialize"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "data_ptr",
                    "3": "array_pointer",
                    "5": "buffer",
                    "6": "pointer"
                },
                "param_2": {
                    "1": "input_data",
                    "11": "value",
                    "2": "byte_value"
                },
                "param_3": {
                    "1": "array_size",
                    "19": "size",
                    "2": "count",
                    "5": "length"
                }
            },
            "called": [
                "FUN_08005d68"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid initialize_data_08004f60(void)\n\n{\n  initialize(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_data_08004f60",
            "entrypoint": "0x08004f60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f60": "initialize_data_08004f60",
                "memset": "initialize"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f78": {
            "additional_data": {
                "*(uint *)(DAT_20000b1c + 0x34)": {
                    "1": "register_value1"
                },
                "*(uint *)(DAT_20000b1c + 0x40)": {
                    "1": "register_value2"
                },
                "DAT_20000010": {
                    "1": "min_pitch_value"
                },
                "DAT_20000014": {
                    "1": "initial_pitch_value"
                },
                "DAT_200009f4": {
                    "1": "max_pitch_value"
                },
                "DAT_200009f8": {
                    "1": "previous_pitch_value"
                },
                "DAT_200009fc": {
                    "1": "previous_adjusted_pitch_value"
                },
                "DAT_20000a00": {
                    "1": "multiplication_factor1"
                },
                "DAT_20000a04": {
                    "1": "multiplication_factor2"
                },
                "DAT_20000a08": {
                    "1": "xor_value"
                },
                "DAT_20000a58": {
                    "1": "final_value"
                },
                "DAT_20000a5c": {
                    "1": "sensor_data"
                },
                "DAT_20000b1c": {
                    "1": "gpio_pin"
                },
                "DAT_20000b5c": {
                    "1": "adjusted_pitch_value"
                },
                "DAT_20000ba0": {
                    "1": "pitch_value"
                },
                "DAT_20000ba8": {
                    "1": "output_string"
                },
                "DAT_20000be8": {
                    "1": "temp_value"
                },
                "FUN_08000418": {
                    "1": "calculate_something"
                },
                "FUN_08000aa4": {
                    "1": "calculate_value1"
                },
                "FUN_08000aa8": {
                    "1": "calculate_value6"
                },
                "FUN_08000c08": {
                    "1": "perform_operation",
                    "3": "calculate_value"
                },
                "FUN_08000c10": {
                    "1": "calculate_yet_another_value",
                    "2": "calculate_value3"
                },
                "FUN_08000cb8": {
                    "1": "calculate_gpio_value2"
                },
                "FUN_08000f94": {
                    "1": "convert_two_floats_to_double"
                },
                "FUN_08000ff4": {
                    "1": "is_initialized",
                    "3": "check_condition"
                },
                "FUN_08001030": {
                    "1": "evaluate_result",
                    "2": "check_value",
                    "5": "check_condition"
                },
                "FUN_08001044": {
                    "1": "rename_me9"
                },
                "FUN_08001a80": {
                    "1": "rename_me3",
                    "3": "perform_action"
                },
                "FUN_08004ae0": {
                    "1": "initialize_variable",
                    "2": "initialize"
                },
                "FUN_08004bd8": {
                    "1": "assign_value"
                },
                "FUN_08004f3c": {
                    "1": "print_pitch2",
                    "3": "print_pitch"
                },
                "FUN_08004f60": {
                    "1": "rename_me6",
                    "3": "update_mpu6050"
                },
                "FUN_08004f78": {
                    "1": "update_pitch_information",
                    "14": "update_and_print_pitch",
                    "2": "calculate_pitch_and_update",
                    "4": "update_pitch_and_print"
                },
                "FUN_08005dfc": {
                    "1": "update_gpio2",
                    "2": "initialize_parameters"
                },
                "FUN_08005e40": {
                    "1": "perform_operation"
                },
                "HAL_GPIO_WritePin": {
                    "1": "write_to_gpio",
                    "3": "write_pin",
                    "5": "set_gpio_pin"
                },
                "__addsf3": {
                    "1": "float_add",
                    "3": "add_floats",
                    "6": "add_float"
                },
                "__aeabi_f2d": {
                    "1": "convert_single_to_double",
                    "2": "convert_to_double",
                    "3": "float_to_double",
                    "4": "convert_float_to_double"
                },
                "__aeabi_fadd": {
                    "1": "float_addition"
                },
                "__aeabi_fcmpgt": {
                    "1": "float_compare_greater",
                    "2": "compare_float_greater_than",
                    "3": "compare_greater_than"
                },
                "__aeabi_fcmplt": {
                    "1": "float_less_than_comparison",
                    "2": "float_compare_less_than",
                    "4": "compare_less_than"
                },
                "__aeabi_fmul": {
                    "2": "float_multiply",
                    "3": "multiply_floats",
                    "6": "multiply_float"
                },
                "__aeabi_fsub": {
                    "2": "float_subtract",
                    "3": "subtract_floats",
                    "6": "subtract_float"
                },
                "__fixunssfsi": {
                    "1": "float_to_unsigned_integer_conversion_2",
                    "2": "float_to_unsigned_int",
                    "3": "convert_float_to_unsigned_int"
                },
                "__floatsisf": {
                    "1": "int_to_float_conversion",
                    "2": "integer_to_float_conversion",
                    "4": "convert_int_to_float"
                },
                "__floatunsisf": {
                    "1": "unsigned_integer_to_float",
                    "2": "unsigned_int_to_float",
                    "4": "convert_unsigned_int_to_float"
                },
                "flush_strbuf": {
                    "1": "flush_buffer",
                    "13": "flush_string_buffer"
                },
                "iVar2": {
                    "1": "is_pitch_less_than",
                    "15": "comparison_result",
                    "3": "comparison"
                },
                "local_11": {
                    "1": "byte_value",
                    "3": "pitch_integer",
                    "5": "pitch",
                    "6": "pitch_value"
                },
                "mpu6050_calc_pitch": {
                    "1": "calculate_mpu6050_pitch",
                    "11": "calculate_pitch"
                },
                "mpu6050_update": {
                    "4": "update_mpu6050_data",
                    "6": "update_mpu6050"
                },
                "sprintf": {
                    "1": "print_formatted",
                    "9": "format_string"
                },
                "strlen": {
                    "1": "calculate_string_length",
                    "2": "string_length",
                    "8": "get_string_length"
                },
                "uVar1": {
                    "1": "return_value1",
                    "2": "result1",
                    "7": "result",
                    "9": "length"
                },
                "uVar3": {
                    "1": "compare_value",
                    "2": "temp",
                    "3": "result"
                },
                "uVar4": {
                    "1": "masked_a08",
                    "2": "temp_var"
                },
                "uVar5": {
                    "1": "converted_pitch",
                    "4": "pitch",
                    "5": "pitch_value",
                    "7": "converted_value"
                },
                "uart_print": {
                    "1": "print_to_uart",
                    "2": "print_uart_data",
                    "4": "print_string",
                    "6": "print_uart"
                }
            },
            "called": [
                "FUN_08000aa4",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08001030",
                "FUN_08000c08",
                "FUN_08004f60",
                "FUN_08004bd8",
                "FUN_08000418",
                "FUN_08001044",
                "FUN_08000ff4",
                "FUN_08005dfc",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08005e40",
                "FUN_08004f3c",
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "code": "\nvoid update_and_print_pitch_08004f78(void)\n\n{\n  undefined4 length;\n  int comparison_result;\n  undefined4 result;\n  uint mask;\n  undefined8 converted_value;\n  byte pitch_value;\n  \n  update_mpu6050(&DAT_20000a5c);\n  calculate_pitch(&DAT_20000a5c,&DAT_20000ba0);\n  flush_string_buffer();\n  converted_value = convert_float_to_double(DAT_20000ba0);\n  format_string(&DAT_20000ba8,\"Pitch: %f\\n\",(int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  length = get_string_length(&DAT_20000ba8);\n  print_uart(&DAT_20000ba8,length);\n  DAT_200009f8 = subtract_float(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = multiply_float(DAT_20000a00,DAT_200009f8);\n  length = multiply_float(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = add_float(length,DAT_20000b5c);\n  length = convert_int_to_float(DAT_20000010);\n  comparison_result = compare_less_than(length,DAT_20000b5c);\n  if (comparison_result == 0) {\n    length = convert_int_to_float(DAT_200009f4);\n    comparison_result = compare_greater_than(length,DAT_20000b5c);\n    if (comparison_result != 0) {\n      DAT_20000b5c = convert_unsigned_int_to_float(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = convert_unsigned_int_to_float(DAT_20000010);\n  }\n  mask = DAT_20000a08 ^ 0x80000000;\n  length = subtract_float(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = multiply_float(mask,length);\n  length = add_float(DAT_20000be8,DAT_20000b5c);\n  length = add_float(length,DAT_20000a58);\n  result = convert_int_to_float(DAT_20000010);\n  comparison_result = compare_greater_than(length,result);\n  if (comparison_result == 0) {\n    result = convert_int_to_float(DAT_200009f4);\n    comparison_result = compare_less_than(length,result);\n    if (comparison_result == 0) {\n      pitch_value = convert_float_to_unsigned_int(length);\n    }\n    else {\n      pitch_value = DAT_200009f4;\n    }\n  }\n  else {\n    pitch_value = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  comparison_result = compare_greater_than(DAT_200009f8,0);\n  set_gpio_pin(0x40010800,2,comparison_result != 0);\n  comparison_result = compare_greater_than(DAT_200009f8,0);\n  set_gpio_pin(0x40010800,4,comparison_result == 0);\n  comparison_result = compare_greater_than(DAT_200009f8,0);\n  set_gpio_pin(0x40010800,8,comparison_result != 0);\n  comparison_result = compare_greater_than(DAT_200009f8,0);\n  set_gpio_pin(0x40010800,0x10,comparison_result == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitch_value;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitch_value;\n  return;\n}\n\n",
            "current_name": "update_and_print_pitch_08004f78",
            "entrypoint": "0x08004f78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f78": "update_and_print_pitch_08004f78",
                "HAL_GPIO_WritePin": "set_gpio_pin",
                "__addsf3": "add_float",
                "__aeabi_f2d": "convert_float_to_double",
                "__aeabi_fcmpgt": "compare_greater_than",
                "__aeabi_fcmplt": "compare_less_than",
                "__aeabi_fmul": "multiply_float",
                "__aeabi_fsub": "subtract_float",
                "__fixunssfsi": "convert_float_to_unsigned_int",
                "__floatsisf": "convert_int_to_float",
                "__floatunsisf": "convert_unsigned_int_to_float",
                "flush_strbuf": "flush_string_buffer",
                "iVar2": "comparison_result",
                "local_11": "pitch_value",
                "mpu6050_calc_pitch": "calculate_pitch",
                "mpu6050_update": "update_mpu6050",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "length",
                "uVar3": "result",
                "uVar4": "mask",
                "uVar5": "converted_value",
                "uart_print": "print_uart"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005224": {
            "additional_data": {
                "DAT_20000a4c": {
                    "1": "variable2",
                    "2": "constant2"
                },
                "DAT_20000a50": {
                    "1": "variable3",
                    "2": "constant3"
                },
                "DAT_20000a54": {
                    "1": "variable1",
                    "2": "constant1"
                },
                "FUN_080014f0": {
                    "1": "unknown_function4",
                    "2": "sub_function8",
                    "3": "function8",
                    "8": "initialize_mpu6050"
                },
                "FUN_0800360c": {
                    "1": "unknown_0800360c",
                    "2": "initialize_timers",
                    "3": "unknown_function6",
                    "6": "initialize_tim2"
                },
                "FUN_080036a8": {
                    "1": "function_9",
                    "2": "start_base_timer",
                    "3": "function9"
                },
                "FUN_0800491c": {
                    "1": "unknown_function2",
                    "2": "sub_function5",
                    "3": "unknown_function5",
                    "9": "initialize_uart"
                },
                "FUN_08004e74": {
                    "1": "some_function1",
                    "10": "initialize_hal",
                    "2": "sub_function1",
                    "3": "function1",
                    "4": "unknown_function1"
                },
                "FUN_08005224": {
                    "1": "start_application",
                    "21": "initialize_system",
                    "7": "initialize_hardware"
                },
                "FUN_080052a0": {
                    "1": "configure_something",
                    "2": "infinite_loop",
                    "3": "unknown_function11"
                },
                "FUN_08005348": {
                    "1": "configure_pwm",
                    "2": "sub_function7",
                    "3": "unknown_function7",
                    "6": "initialize_tim1"
                },
                "FUN_080053b0": {
                    "1": "unknown_080053b0",
                    "10": "initialize_gpio",
                    "2": "sub_function3",
                    "3": "function3"
                },
                "FUN_08005500": {
                    "1": "start_pwm",
                    "2": "sub_function10",
                    "3": "unknown_function10",
                    "6": "start_forkserver"
                },
                "FUN_08005598": {
                    "1": "some_function2",
                    "2": "initialize_system_clock",
                    "3": "unknown_function2",
                    "8": "configure_system_clock"
                },
                "FUN_080055f4": {
                    "1": "one_more_function",
                    "2": "sub_function4",
                    "3": "unknown_function4",
                    "9": "initialize_i2_c"
                },
                "HAL_Init": {
                    "1": "initialize_hardware_abstraction_layer",
                    "11": "initialize_hal",
                    "2": "initialize_hardware_abstract_layer",
                    "3": "initialize_hardware"
                },
                "HAL_TIM_Base_Start_IT": {
                    "1": "start_it",
                    "2": "start_timer_interrupt",
                    "3": "start_tim_base_it"
                },
                "HAL_TIM_PWM_Start": {
                    "1": "start_timp_pwm",
                    "2": "start_pwmtim",
                    "3": "start_tim_pwm",
                    "7": "start_pwm"
                },
                "MX_GPIO_Init": {
                    "1": "initialize_hardware_gpio",
                    "19": "initialize_gpio"
                },
                "MX_I2C1_Init": {
                    "1": "initialize_hardware_i2_c",
                    "17": "initialize_i2_c1",
                    "2": "initialize_i2_c"
                },
                "MX_TIM1_Init": {
                    "1": "initialize_hardware_tim1",
                    "18": "initialize_tim1"
                },
                "MX_TIM2_Init": {
                    "1": "initialize_hardware_tim2",
                    "18": "initialize_tim2"
                },
                "MX_USART1_UART_Init": {
                    "1": "initialize_hardware_uart",
                    "13": "initialize_usart1_uart",
                    "2": "initialize_uart1",
                    "4": "initialize_uart"
                },
                "SystemClock_Config": {
                    "1": "initialize_system_clock",
                    "17": "configure_system_clock"
                },
                "mpu6050_init": {
                    "1": "initialize_accelerometer",
                    "20": "initialize_mpu6050"
                },
                "startForkserver": {
                    "1": "initialize_forkserver",
                    "16": "start_fork_server",
                    "3": "start_forkserver"
                }
            },
            "called": [
                "FUN_08004e74",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_0800360c",
                "FUN_08005348",
                "FUN_080014f0",
                "FUN_080036a8",
                "FUN_08005500",
                "FUN_080052a0"
            ],
            "calling": [
                "FUN_080057e8"
            ],
            "code": "\nvoid initialize_system_08005224(void)\n\n{\n  initialize_hal();\n  configure_system_clock();\n  initialize_gpio();\n  initialize_i2_c1();\n  initialize_usart1_uart();\n  initialize_tim2();\n  initialize_tim1();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  start_pwm(&DAT_20000b1c,0);\n  start_pwm(&DAT_20000b1c,0xc);\n  initialize_mpu6050(&DAT_20000a5c);\n  start_tim_base_it(&DAT_20000b60);\n  start_fork_server(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_08005224",
            "entrypoint": "0x08005224",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "HAL_Init": "initialize_hal",
                "HAL_TIM_Base_Start_IT": "start_tim_base_it",
                "HAL_TIM_PWM_Start": "start_pwm",
                "MX_GPIO_Init": "initialize_gpio",
                "MX_I2C1_Init": "initialize_i2_c1",
                "MX_TIM1_Init": "initialize_tim1",
                "MX_TIM2_Init": "initialize_tim2",
                "MX_USART1_UART_Init": "initialize_usart1_uart",
                "SystemClock_Config": "configure_system_clock",
                "mpu6050_init": "initialize_mpu6050",
                "startForkserver": "start_fork_server"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052a0": {
            "additional_data": {
                "FUN_0800172a": {
                    "1": "configure_oscillator"
                },
                "FUN_08001762": {
                    "1": "set_sys_tick_clock_source"
                },
                "FUN_0800177c": {
                    "1": "set_priority"
                },
                "FUN_08002d98": {
                    "1": "configure_systick"
                },
                "FUN_08003260": {
                    "2": "configure_clock"
                },
                "FUN_08003504": {
                    "1": "configure_oscillator"
                },
                "FUN_080052a0": {
                    "1": "configure_system",
                    "17": "initialize_system",
                    "2": "initialize_clock",
                    "3": "configure_clock"
                },
                "FUN_08005674": {
                    "2": "handle_error"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_nvic_priority",
                    "2": "set_priority"
                },
                "HAL_RCC_ClockConfig": {
                    "3": "configure_clock"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "3": "get_hclk_frequency"
                },
                "HAL_RCC_OscConfig": {
                    "1": "configure_oscillation",
                    "2": "configure_oscillator"
                },
                "HAL_SYSTICK_CLKSourceConfig": {
                    "3": "configure_sys_tick_clock_source"
                },
                "HAL_SYSTICK_Config": {
                    "3": "configure_sys_tick"
                },
                "_Error_Handler": {
                    "1": "handle_error"
                },
                "iVar1": {
                    "1": "status",
                    "18": "result",
                    "3": "return_value"
                },
                "local_10": {
                    "1": "rcc_hclk_prescaler"
                },
                "local_14": {
                    "1": "pllp",
                    "2": "clock_divider"
                },
                "local_20": {
                    "1": "sysclk",
                    "2": "sys_clock_config"
                },
                "local_28": {
                    "1": "msi_state",
                    "2": "osc_config_result",
                    "3": "clock_source"
                },
                "local_2c": {
                    "1": "oscillator_hse_bypass",
                    "2": "oscillator_range",
                    "4": "oscillator_state"
                },
                "local_30": {
                    "1": "rcc_oscillator_state",
                    "14": "oscillator_type",
                    "2": "oscillator_config"
                },
                "local_34": {
                    "1": "apb2_clock_divider"
                },
                "local_38": {
                    "1": "priority_group"
                },
                "local_3c": {
                    "1": "pll_mul",
                    "2": "ahb_clock_divider"
                },
                "local_40": {
                    "1": "clocksrc",
                    "3": "clock_config"
                },
                "local_44": {
                    "1": "rcc_oscillator_init_struct",
                    "2": "oscillator_type",
                    "6": "oscillator_config"
                },
                "local_c": {
                    "1": "ahb_clock_divider",
                    "2": "flash_latency"
                },
                "param_1": {
                    "1": "config_params",
                    "2": "param_1"
                },
                "param_2": {
                    "1": "sys_tick_freq",
                    "2": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "uVar2": {
                    "12": "hclk_freq",
                    "2": "sys_tick_freq",
                    "8": "hclk_frequency"
                }
            },
            "called": [
                "FUN_08003504",
                "FUN_08005674",
                "FUN_0800172a",
                "FUN_08003260",
                "FUN_0800177c",
                "FUN_08001762",
                "FUN_08002d98"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_system_080052a0(void)\n\n{\n  int result;\n  undefined8 hclk_freq;\n  undefined4 oscillator_config;\n  undefined4 clock_source;\n  undefined4 ahb_clock_divider;\n  undefined4 oscillator_parameter4;\n  undefined4 oscillator_parameter5;\n  undefined4 oscillator_type;\n  undefined4 oscillator_state;\n  undefined4 clock_source;\n  undefined4 sys_clock_config;\n  undefined4 clock_divider;\n  undefined4 oscillator_parameter11;\n  undefined4 flash_latency;\n  \n  oscillator_type = 1;\n  oscillator_state = 0x10000;\n  clock_source = 0;\n  sys_clock_config = 1;\n  clock_divider = 2;\n  oscillator_parameter11 = 0x10000;\n  flash_latency = 0x1c0000;\n  result = configure_oscillator(&oscillator_type);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x151);\n  }\n  oscillator_config = 0xf;\n  clock_source = 2;\n  ahb_clock_divider = 0x80;\n  oscillator_parameter4 = 0;\n  oscillator_parameter5 = 0;\n  result = configure_clock(&oscillator_config,2);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x15e);\n  }\n  hclk_freq = get_hclk_frequency();\n  configure_sys_tick((uint)hclk_freq / 1000,(int)((ulonglong)hclk_freq >> 0x20),(uint)hclk_freq * 0x10624dd3);\n  configure_sys_tick_clock_source(4);\n  set_priority(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_system_080052a0",
            "entrypoint": "0x080052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052a0": "initialize_system_080052a0",
                "HAL_NVIC_SetPriority": "set_priority",
                "HAL_RCC_ClockConfig": "configure_clock",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency",
                "HAL_RCC_OscConfig": "configure_oscillator",
                "HAL_SYSTICK_CLKSourceConfig": "configure_sys_tick_clock_source",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "_Error_Handler": "handle_error",
                "iVar1": "result",
                "local_10": "oscillator_parameter11",
                "local_14": "clock_divider",
                "local_20": "sys_clock_config",
                "local_28": "clock_source",
                "local_2c": "oscillator_state",
                "local_30": "oscillator_type",
                "local_34": "oscillator_parameter5",
                "local_38": "oscillator_parameter4",
                "local_3c": "ahb_clock_divider",
                "local_40": "clock_source",
                "local_44": "oscillator_config",
                "local_c": "flash_latency",
                "uVar2": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005348": {
            "additional_data": {
                "FUN_08005348": {
                    "31": "initialize_i2_c"
                },
                "HAL_I2C_Init": {
                    "1": "initialize_i2_c_periph",
                    "2": "initialize_i2_c_device",
                    "3": "initialize_i2_c"
                },
                "_Error_Handler": {
                    "9": "handle_error"
                },
                "iVar1": {
                    "1": "init_status",
                    "18": "init_result",
                    "2": "result"
                }
            },
            "called": [
                "FUN_08005674",
                "FUN_08001ab0"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_i2_c_08005348(void)\n\n{\n  int init_result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  init_result = initialize_i2_c_08005348(&DAT_20000a88);\n  if (init_result != 0) {\n    handle_error(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_i2_c_08005348",
            "entrypoint": "0x08005348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005348": "initialize_i2_c_08005348",
                "HAL_I2C_Init": "initialize_i2_c",
                "_Error_Handler": "handle_error",
                "iVar1": "init_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053b0": {
            "additional_data": {
                "../src/main.c": {
                    "2": "source_file"
                },
                "0x194": {
                    "1": "error_line"
                },
                "0x198": {
                    "1": "error_line"
                },
                "0x19f": {
                    "1": "error_line"
                },
                "0x1ab": {
                    "1": "error_line"
                },
                "0x1b0": {
                    "1": "error_line"
                },
                "0x1bc": {
                    "1": "error_line"
                },
                "399": {
                    "1": "error_line"
                },
                "D400028C": {
                    "1": "tim_base_instance"
                },
                "D4000290": {
                    "1": "tim_prescaler"
                },
                "D4000294": {
                    "1": "tim_repetition_counter"
                },
                "D4000298": {
                    "1": "tim_auto_reload_reg"
                },
                "D400029C": {
                    "1": "tim_clock_divisor"
                },
                "D40002A0": {
                    "1": "tim_capture_compare_mode[0]"
                },
                "D40002A4": {
                    "1": "tim_capture_compare_enable[0]"
                },
                "D40002A8": {
                    "1": "tim_capture_compare_preload[0]"
                },
                "D40002AC": {
                    "1": "tim_capture_compare_polarity[0]"
                },
                "D40002B0": {
                    "1": "tim_capture_compare_mode[1]"
                },
                "D40002B4": {
                    "1": "tim_capture_compare_enable[1]"
                },
                "D40002B8": {
                    "1": "tim_capture_compare_preload[1]"
                },
                "D40002BC": {
                    "1": "tim_capture_compare_polarity[1]"
                },
                "D40002C0": {
                    "1": "tim_break_dead_time_high"
                },
                "D40002C4": {
                    "1": "tim_break_dead_time_low"
                },
                "D40002C8": {
                    "1": "tim_break_dead_time_polarity"
                },
                "D40002CC": {
                    "1": "tim_break_dead_time_prescaler"
                },
                "D40002D0": {
                    "1": "tim_break_dead_time_filter"
                },
                "D40002D4": {
                    "1": "tim_break_dead_time_idle_state"
                },
                "DAT_20000b1c": {
                    "1": "timer",
                    "4": "timer_instance"
                },
                "DAT_20000b20": {
                    "1": "auto_reload_value",
                    "2": "clock_source"
                },
                "DAT_20000b24": {
                    "1": "counter_mode"
                },
                "DAT_20000b28": {
                    "1": "unused2"
                },
                "DAT_20000b2c": {
                    "1": "ignore18",
                    "2": "repetition_counter"
                },
                "DAT_20000b30": {
                    "1": "active_channel"
                },
                "DAT_20000b34": {
                    "1": "ignore20"
                },
                "FUN_080053b0": {
                    "1": "initialize_tim_pwm",
                    "13": "initialize_timer",
                    "15": "initialize_timers"
                },
                "HAL_TIMEx_ConfigBreakDeadTime": {
                    "1": "config_break_dead_time",
                    "4": "configure_break_dead_time"
                },
                "HAL_TIMEx_MasterConfigSynchronization": {
                    "1": "configure_tim_synchronization",
                    "3": "configure_master_sync"
                },
                "HAL_TIM_Base_Init": {
                    "1": "timer_base_init",
                    "4": "initialize_base_timer"
                },
                "HAL_TIM_ConfigClockSource": {
                    "1": "config_timer_clock_source",
                    "4": "configure_clock_source"
                },
                "HAL_TIM_MspPostInit": {
                    "1": "initialize_timer_peripheral"
                },
                "HAL_TIM_PWM_ConfigChannel": {
                    "1": "config_pwm_channel",
                    "4": "configure_pwm_channel"
                },
                "HAL_TIM_PWM_Init": {
                    "1": "initialize_tim_pwm",
                    "2": "initialize_pwm",
                    "3": "initialize_pwm_timer"
                },
                "_Error_Handler": {
                    "1": "error_handler",
                    "4": "handle_error"
                },
                "iVar1": {
                    "1": "error_code",
                    "3": "return_value"
                },
                "local_18": {
                    "1": "prescaler_value",
                    "2": "array_param",
                    "4": "prescaler",
                    "5": "clock_source"
                },
                "local_18 [4]": {
                    "1": "local_array"
                },
                "local_18[4]": {
                    "1": "clock_config_structure"
                },
                "local_1c": {
                    "1": "param8",
                    "2": "local_var14",
                    "3": "synchronization"
                },
                "local_20": {
                    "1": "local_value7",
                    "2": "counter_mode",
                    "6": "master_config"
                },
                "local_24": {
                    "1": "temp9",
                    "2": "local_var12"
                },
                "local_28": {
                    "1": "pwm_config_channel_param6",
                    "2": "local_variable28"
                },
                "local_2c": {
                    "1": "param8",
                    "2": "local_var10"
                },
                "local_30": {
                    "1": "param7",
                    "2": "local_var9"
                },
                "local_34": {
                    "1": "wave_prescaler",
                    "2": "local_variable34"
                },
                "local_38": {
                    "1": "temp4",
                    "2": "local_variable38"
                },
                "local_3c": {
                    "1": "pulse_value",
                    "2": "channel_config",
                    "4": "pwm_config"
                },
                "local_40": {
                    "1": "tim_latch",
                    "2": "local_var6"
                },
                "local_44": {
                    "1": "local_dead_time",
                    "10": "dead_time",
                    "2": "local_var5",
                    "3": "break_dead_time"
                },
                "local_48": {
                    "1": "temp3",
                    "2": "break_dead_time"
                },
                "local_4c": {
                    "1": "local_variable4c",
                    "2": "break_dead_time"
                },
                "local_50": {
                    "1": "local_variable_50",
                    "2": "break_dead_time"
                },
                "local_54": {
                    "1": "unused_var1",
                    "2": "local_variable54"
                },
                "local_58": {
                    "1": "dead_time",
                    "18": "break_dead_time",
                    "2": "break_time",
                    "3": "break_dead_time_config"
                },
                "param_1": {
                    "1": "timer_config"
                },
                "param_2": {
                    "1": "clock_source"
                }
            },
            "called": [
                "FUN_08003640",
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_0800422e",
                "FUN_08003908",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_timers_080053b0(void)\n\n{\n  int return_value;\n  undefined4 break_dead_time;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 dead_time;\n  undefined4 local_var6;\n  undefined4 pwm_channel;\n  undefined4 local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 local_var10;\n  undefined4 local_var11;\n  undefined4 local_var12;\n  undefined4 master_config;\n  undefined4 synchronization;\n  undefined4 clock_source [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  return_value = initialize_base_timer(&DAT_20000b1c);\n  if (return_value != 0) {\n    handle_error(\"../src/main.c\",399);\n  }\n  clock_source[0] = 0x1000;\n  return_value = configure_clock_source(&DAT_20000b1c,clock_source);\n  if (return_value != 0) {\n    handle_error(\"../src/main.c\",0x194);\n  }\n  return_value = initialize_pwm_timer(&DAT_20000b1c);\n  if (return_value != 0) {\n    handle_error(\"../src/main.c\",0x198);\n  }\n  master_config = 0;\n  synchronization = 0;\n  return_value = configure_master_sync(&DAT_20000b1c,&master_config);\n  if (return_value != 0) {\n    handle_error(\"../src/main.c\",0x19f);\n  }\n  pwm_channel = 0x60;\n  local_var7 = 0;\n  local_var8 = 0;\n  local_var9 = 0;\n  local_var10 = 0;\n  local_var11 = 0;\n  local_var12 = 0;\n  return_value = configure_pwm_channel(&DAT_20000b1c,&pwm_channel,0);\n  if (return_value != 0) {\n    handle_error(\"../src/main.c\",0x1ab);\n  }\n  return_value = configure_pwm_channel(&DAT_20000b1c,&pwm_channel,0xc);\n  if (return_value != 0) {\n    handle_error(\"../src/main.c\",0x1b0);\n  }\n  break_dead_time = 0;\n  local_var1 = 0;\n  local_var2 = 0;\n  local_var3 = 0;\n  local_var4 = 0;\n  dead_time = 0x2000;\n  local_var6 = 0;\n  return_value = configure_break_dead_time(&DAT_20000b1c,&break_dead_time);\n  if (return_value != 0) {\n    handle_error(\"../src/main.c\",0x1bc);\n  }\n  initialize_timer_peripheral(&DAT_20000b1c);\n  return;\n}\n\n",
            "current_name": "initialize_timers_080053b0",
            "entrypoint": "0x080053b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053b0": "initialize_timers_080053b0",
                "HAL_TIMEx_ConfigBreakDeadTime": "configure_break_dead_time",
                "HAL_TIMEx_MasterConfigSynchronization": "configure_master_sync",
                "HAL_TIM_Base_Init": "initialize_base_timer",
                "HAL_TIM_ConfigClockSource": "configure_clock_source",
                "HAL_TIM_MspPostInit": "initialize_timer_peripheral",
                "HAL_TIM_PWM_ConfigChannel": "configure_pwm_channel",
                "HAL_TIM_PWM_Init": "initialize_pwm_timer",
                "_Error_Handler": "handle_error",
                "iVar1": "return_value",
                "local_18": "clock_source",
                "local_1c": "synchronization",
                "local_20": "master_config",
                "local_24": "local_var12",
                "local_28": "local_var11",
                "local_2c": "local_var10",
                "local_30": "local_var9",
                "local_34": "local_var8",
                "local_38": "local_var7",
                "local_3c": "pwm_channel",
                "local_40": "local_var6",
                "local_44": "dead_time",
                "local_48": "local_var4",
                "local_4c": "local_var3",
                "local_50": "local_var2",
                "local_54": "local_var1",
                "local_58": "break_dead_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005500": {
            "additional_data": {
                "../src/main.c": {
                    "1": "error_file"
                },
                "DAT_20000b60": {
                    "2": "timer_handle"
                },
                "DAT_20000b64": {
                    "1": "period"
                },
                "DAT_20000b68": {
                    "1": "pulse"
                },
                "DAT_20000b6c": {
                    "2": "counter_mode"
                },
                "DAT_20000b70": {
                    "1": "callback_id"
                },
                "DAT_20000b78": {
                    "1": "error_flag"
                },
                "FUN_080035a4": {
                    "1": "config_clock_source",
                    "2": "configure_clock_source"
                },
                "FUN_08003a94": {
                    "1": "configure_base"
                },
                "FUN_080042de": {
                    "1": "master_config_synchronization"
                },
                "FUN_08005500": {
                    "1": "initialize_timer_function",
                    "29": "initialize_timer"
                },
                "FUN_08005674": {
                    "1": "error_handler",
                    "2": "handle_error"
                },
                "HAL_TIMEx_MasterConfigSynchronization": {
                    "1": "configure_master_synchronization",
                    "2": "master_config_sync",
                    "3": "configure_master_sync"
                },
                "HAL_TIM_Base_Init": {
                    "1": "timer_base_init",
                    "10": "initialize_timer_base",
                    "2": "initialize_base_timer"
                },
                "HAL_TIM_ConfigClockSource": {
                    "1": "timer_config_clock_source",
                    "6": "configure_clock_source"
                },
                "_Error_Handler": {
                    "1": "error_handler",
                    "8": "handle_error"
                },
                "iVar1": {
                    "1": "status",
                    "3": "result",
                    "9": "init_result"
                },
                "local_18": {
                    "1": "clock_config_arr",
                    "2": "timer_clock_source",
                    "4": "timer_config",
                    "7": "clock_config",
                    "9": "clock_source"
                },
                "local_18[4]": {
                    "1": "clock_source"
                },
                "local_1c": {
                    "1": "sync_source",
                    "2": "repetition_counter",
                    "4": "synchronization",
                    "7": "counter_mode"
                },
                "local_20": {
                    "1": "master_clock_config",
                    "10": "prescaler",
                    "2": "timer_prescaler",
                    "3": "prescaler_value",
                    "5": "clock_source"
                }
            },
            "called": [
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_timer_08005500(void)\n\n{\n  int init_result;\n  undefined4 prescaler;\n  undefined4 counter_mode;\n  undefined4 clock_source [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  init_result = initialize_timer_08005500_base(&DAT_20000b60);\n  if (init_result != 0) {\n    handle_error(\"../src/main.c\",0x1d0);\n  }\n  clock_source[0] = 0x1000;\n  init_result = configure_clock_source(&DAT_20000b60,clock_source);\n  if (init_result != 0) {\n    handle_error(\"../src/main.c\",0x1d5);\n  }\n  prescaler = 0x20;\n  counter_mode = 0;\n  init_result = configure_master_sync(&DAT_20000b60,&prescaler);\n  if (init_result != 0) {\n    handle_error(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_timer_08005500",
            "entrypoint": "0x08005500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005500": "initialize_timer_08005500",
                "HAL_TIMEx_MasterConfigSynchronization": "configure_master_sync",
                "HAL_TIM_Base_Init": "initialize_timer_base",
                "HAL_TIM_ConfigClockSource": "configure_clock_source",
                "_Error_Handler": "handle_error",
                "iVar1": "init_result",
                "local_18": "clock_source",
                "local_1c": "counter_mode",
                "local_20": "prescaler"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005598": {
            "additional_data": {
                "*param_1": {
                    "1": "pointer_to_result"
                },
                "../src/main.c": {
                    "1": "source_file"
                },
                "FUN_0800438a": {
                    "1": "calculate"
                },
                "FUN_08005598": {
                    "31": "initialize_uart"
                },
                "FUN_08005674": {
                    "1": "perform_operation"
                },
                "HAL_UART_Init": {
                    "1": "initialize_uart_port",
                    "2": "uart_init",
                    "3": "initialize_uart_driver",
                    "4": "initialize_uart_device"
                },
                "VAR_20000adc": {
                    "1": "uart_config"
                },
                "VAR_20000ae0": {
                    "2": "baud_rate"
                },
                "VAR_20000af0": {
                    "1": "data_bits"
                },
                "_Error_Handler": {
                    "1": "error_handler",
                    "13": "handle_error"
                },
                "iVar1": {
                    "2": "result",
                    "3": "init_status",
                    "8": "init_result"
                },
                "param_1": {
                    "1": "numbers"
                }
            },
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_uart_08005598(void)\n\n{\n  int init_result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  init_result = initialize_uart_08005598_device(&DAT_20000adc);\n  if (init_result != 0) {\n    handle_error(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_uart_08005598",
            "entrypoint": "0x08005598",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005598": "initialize_uart_08005598",
                "HAL_UART_Init": "initialize_uart_device",
                "_Error_Handler": "handle_error",
                "iVar1": "init_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055f4": {
            "additional_data": {
                "FUN_080017c4": {
                    "1": "copy_data"
                },
                "FUN_08001a80": {
                    "1": "configure_gpio"
                },
                "FUN_080055f4": {
                    "1": "configure_gpio_pin",
                    "2": "configure_gpio",
                    "26": "initialize_gpio"
                },
                "HAL_GPIO_Init": {
                    "1": "configure_pin",
                    "2": "configure_gpio"
                },
                "HAL_GPIO_WritePin": {
                    "1": "set_gpio_pin_state"
                },
                "_DAT_40021018": {
                    "1": "gpio_port_register",
                    "2": "gpio_register"
                },
                "local_14": {
                    "1": "pin",
                    "10": "pin_state",
                    "3": "mode",
                    "8": "state"
                },
                "local_18": {
                    "1": "pin_mode",
                    "16": "pin_number",
                    "3": "pin_config",
                    "6": "pin"
                },
                "local_c": {
                    "1": "pin_mode_param",
                    "11": "pin_mode",
                    "2": "pull",
                    "3": "value",
                    "7": "mode"
                },
                "param_1": {
                    "1": "input_data"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                }
            },
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nvoid initialize_gpio_080055f4(void)\n\n{\n  undefined4 pin_number;\n  undefined4 pin_state;\n  undefined4 pin_mode;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  set_gpio_pin_state(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  pin_number = 0x1e;\n  pin_state = 1;\n  pin_mode = 2;\n  configure_gpio(0x40010800,&pin_number);\n  return;\n}\n\n",
            "current_name": "initialize_gpio_080055f4",
            "entrypoint": "0x080055f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055f4": "initialize_gpio_080055f4",
                "HAL_GPIO_Init": "configure_gpio",
                "HAL_GPIO_WritePin": "set_gpio_pin_state",
                "local_14": "pin_state",
                "local_18": "pin_number",
                "local_c": "pin_mode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005674": {
            "additional_data": {
                "<no_changes>": {
                    "1": "<no_changes>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08005674": {
                    "1": "infinite_loop_function",
                    "2": "loop_forever",
                    "22": "infinite_loop",
                    "3": "run_infinite_loop"
                },
                "PTR_": {
                    "1": ""
                },
                "_original_variable_name_1": {
                    "1": "infinite_loop_counter"
                },
                "_original_variable_name_2": {
                    "1": "infinite_loop_condition"
                },
                "do": {
                    "1": "forever",
                    "3": "do",
                    "4": "loop"
                },
                "doNothing": {
                    "1": "infinite_loop"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_variable_name_1": {
                    "1": "counter"
                },
                "true": {
                    "1": "continue",
                    "3": "true"
                },
                "while": {
                    "1": "true"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005500"
            ],
            "code": "\nvoid infinite_loop_08005674(void)\n\n{\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } true( true );\n}\n\n",
            "current_name": "infinite_loop_08005674",
            "entrypoint": "0x08005674",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674",
                "do": "loop",
                "while": "true"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005680": {
            "additional_data": {
                "*param_1": {
                    "1": "input_param"
                },
                "0x40010800": {
                    "1": "gpio_port_address"
                },
                "FUN_08005680": {
                    "1": "initialize_gpio_pins",
                    "2": "initialize_gpio_pin",
                    "26": "initialize_gpio"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio_pin",
                    "3": "configure_gpio"
                },
                "local_14": {
                    "1": "pin_mode1",
                    "2": "gpio_config_mode",
                    "3": "gpio_mode",
                    "7": "pin_mode"
                },
                "local_18": {
                    "1": "output_type",
                    "2": "gpio_configuration",
                    "5": "pin_config",
                    "7": "gpio_config_value"
                },
                "local_c": {
                    "1": "gpio_config_pull",
                    "2": "gpio_config3",
                    "3": "output_type"
                },
                "param_1": {
                    "1": "param",
                    "2": "pin_address",
                    "7": "gpio_address"
                }
            },
            "called": [
                "FUN_080017c4"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nvoid initialize_gpio_08005680(int *gpio_address)\n\n{\n  undefined4 gpio_config_value;\n  undefined4 pin_mode;\n  undefined4 pin_speed;\n  \n  if (*gpio_address == 0x40012c00) {\n    gpio_config_value = 0x900;\n    pin_mode = 2;\n    pin_speed = 2;\n    configure_gpio(0x40010800,&gpio_config_value);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_gpio_08005680",
            "entrypoint": "0x08005680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005680": "initialize_gpio_08005680",
                "HAL_GPIO_Init": "configure_gpio",
                "local_14": "pin_mode",
                "local_18": "gpio_config_value",
                "local_c": "pin_speed",
                "param_1": "gpio_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005704": {
            "additional_data": {
                "FUN_0800157c": {
                    "1": "handle_sys_tick_interrupt",
                    "2": "function2"
                },
                "FUN_080017b4": {
                    "1": "first_subfunction",
                    "2": "function_a",
                    "3": "increment_tick"
                },
                "FUN_08005704": {
                    "1": "update_tick_and_irq_handler",
                    "2": "update_sys_tick",
                    "3": "handle_system_tick",
                    "6": "update_system_tick"
                },
                "HAL_IncTick": {
                    "1": "increment_tick_count",
                    "14": "increment_tick",
                    "3": "increment_tick_counter"
                },
                "HAL_SYSTICK_IRQHandler": {
                    "1": "process_sys_tick",
                    "12": "handle_sys_tick_interrupt",
                    "2": "handle_systick_interrupt",
                    "5": "handle_sys_tick_irq"
                }
            },
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "calling": [],
            "code": "\nvoid update_system_tick_08005704(void)\n\n{\n  increment_tick();\n  handle_sys_tick_interrupt();\n  return;\n}\n\n",
            "current_name": "update_system_tick_08005704",
            "entrypoint": "0x08005704",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005704": "update_system_tick_08005704",
                "HAL_IncTick": "increment_tick",
                "HAL_SYSTICK_IRQHandler": "handle_sys_tick_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "*param_1": {
                    "1": "data_ptr"
                },
                "DAT_20000b60": {
                    "1": "data_variable"
                },
                "FUN_080036f8": {
                    "1": "update_values",
                    "2": "process_param",
                    "5": "process_parameter",
                    "8": "process_data"
                },
                "FUN_08005714": {
                    "1": "handle_tim_irq_handler",
                    "22": "handle_tim_interrupt",
                    "3": "handle_tim_irq",
                    "5": "handle_timer_interrupt"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "parameter"
                }
            },
            "called": [
                "FUN_080036f8"
            ],
            "calling": [],
            "code": "\nvoid handle_tim_interrupt_08005714(void)\n\n{\n  HAL_TIM_IRQHandler(&DAT_20000b60);\n  return;\n}\n\n",
            "current_name": "handle_tim_interrupt_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "handle_tim_interrupt_08005714"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005728": {
            "additional_data": {
                "&DAT_20000c18": {
                    "1": "default_memory_ptr"
                },
                "*puVar1": {
                    "1": "error_code"
                },
                "DAT_20000a10": {
                    "1": "current_memory"
                },
                "FUN_08005728": {
                    "1": "allocate_memory_block",
                    "29": "allocate_memory"
                },
                "auStack_18": {
                    "1": "stack_variable",
                    "11": "stack_buffer",
                    "2": "temporary_buffer",
                    "3": "stack_memory",
                    "5": "buffer"
                },
                "local_14": {
                    "1": "available_memory",
                    "17": "remaining_size",
                    "2": "requested_size",
                    "5": "required_size"
                },
                "local_c": {
                    "1": "memory_pool",
                    "2": "current_pointer",
                    "4": "current_ptr",
                    "7": "current_memory"
                },
                "param_1": {
                    "1": "block_size",
                    "29": "size"
                },
                "puVar1": {
                    "1": "error_pointer",
                    "14": "errno_ptr",
                    "2": "errno_pointer",
                    "5": "error_code"
                },
                "puVar2": {
                    "1": "result_pointer",
                    "17": "allocated_memory",
                    "2": "memory_ptr"
                }
            },
            "called": [
                "FUN_08005d14"
            ],
            "calling": [
                "FUN_08009744"
            ],
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *errno_ptr;\n  undefined *allocated_memory;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *current_memory;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_memory = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    errno_ptr = (undefined4 *)__errno();\n    *errno_ptr = 0xc;\n    allocated_memory = (undefined *)0xffffffff;\n  }\n  else {\n    allocated_memory = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_memory_08005728",
            "entrypoint": "0x08005728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "current_memory",
                "param_1": "size",
                "puVar1": "errno_ptr",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005780": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_08005780": {
                    "1": "configure_peripheral",
                    "16": "initialize_registers",
                    "6": "initialize_memory"
                },
                "_DAT_40021000": {
                    "1": "system_config_flags",
                    "2": "reg1",
                    "4": "control_register",
                    "8": "control_register1"
                },
                "_DAT_40021004": {
                    "1": "peripheral_register2",
                    "2": "reg2",
                    "3": "status_register",
                    "8": "register2"
                },
                "_DAT_40021008": {
                    "1": "memory_address",
                    "2": "reg3",
                    "4": "data_register",
                    "8": "register3"
                },
                "_DAT_e000ed08": {
                    "1": "register_4",
                    "2": "reg4",
                    "3": "system_control_register",
                    "7": "register4"
                },
                "register4": {
                    "1": "0x9f0000"
                },
                "register5": {
                    "1": "0x8000000"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057e8"
            ],
            "code": "\n\n\nvoid initialize_registers_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_registers_08005780",
            "entrypoint": "0x08005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005780": "initialize_registers_08005780"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057e8": {
            "additional_data": {
                "FUN_08005224": {
                    "1": "system_init"
                },
                "FUN_08005780": {
                    "1": "copy_data_from_flash",
                    "2": "clear_memory"
                },
                "FUN_080057e8": {
                    "1": "initialize_memory_and_jump",
                    "10": "initialize_system",
                    "2": "initialize_data",
                    "3": "initialize_program",
                    "5": "initialize_memory"
                },
                "FUN_08005d20": {
                    "1": "initialize_memory"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jmp_table",
                    "22": "jump_table",
                    "4": "jumptable"
                },
                "iVar1": {
                    "1": "i",
                    "22": "index",
                    "3": "iterator"
                },
                "puVar2": {
                    "1": "ptr_array",
                    "15": "ptr",
                    "3": "data_pointer",
                    "6": "pointer"
                }
            },
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "calling": [],
            "code": "\nvoid initialize_system_080057e8(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_200009c8; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800a1a4);\n  }\n  for (ptr = &DAT_200009c8; ptr < &DAT_20000c14; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x800581a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "initialize_system_080057e8",
            "entrypoint": "0x080057e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057e8": "initialize_system_080057e8",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "iVar1": "index",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005834": {
            "called": [
                "FUN_08005838"
            ],
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nuint __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  \n  uVar4 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar4 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar5 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar5 | (-param_1 | param_1) >> 0x1f))) {\n    uVar4 = __aeabi_dadd(param_3,param_4,param_1,param_2);\n    return uVar4;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar4 = atan();\n    return uVar4;\n  }\n  uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((uVar5 | param_1) == 0) {\n    if (uVar3 == 2) {\n      return 0x54442d18;\n    }\n    if (uVar3 != 3) {\n      return param_1;\n    }\n  }\n  else if ((uVar4 | param_3) != 0) {\n    if (uVar4 == 0x7ff00000) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (uVar3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (uVar3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (uVar3 == 2) {\n        return 0x54442d18;\n      }\n      if (uVar3 != 3) {\n        if (uVar3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (uVar5 != 0x7ff00000) {\n      iVar1 = (int)(uVar5 - uVar4) >> 0x14;\n      if (iVar1 < 0x3d) {\n        if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c))) {\n          uVar6 = 0;\n        }\n        else {\n          __divdf3(param_1,param_2,param_3,param_4,param_4);\n          fabs();\n          uVar6 = atan();\n        }\n      }\n      else {\n        uVar6 = 0x3ff921fb54442d18;\n      }\n      uVar2 = (undefined4)((ulonglong)uVar6 >> 0x20);\n      uVar4 = (uint)uVar6;\n      if (uVar3 == 1) {\n        return uVar4;\n      }\n      if (uVar3 == 2) {\n        uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n        uVar4 = __subdf3(0x54442d18,0x400921fb,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n        return uVar4;\n      }\n      if (uVar3 != 0) {\n        uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n        uVar4 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),0x54442d18,0x400921fb);\n        return uVar4;\n      }\n      return uVar4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "FUN_08005834",
            "entrypoint": "0x08005834",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_08005838": {
            "additional_data": {
                "0x33145c07": {
                    "1": "constant6"
                },
                "0x3ca1a626": {
                    "1": "constant7"
                },
                "0x3ff921fb54442d18": {
                    "1": "constant5"
                },
                "0x54442d18": {
                    "1": "constant1"
                },
                "0x7f3321d2": {
                    "1": "constant4"
                },
                "0x7ff00000": {
                    "1": "constant2"
                },
                "0xc0100000": {
                    "1": "constant3"
                },
                "FABS": {
                    "1": "absolute_value"
                },
                "FUNC_08005d0c": {
                    "1": "helper_func"
                },
                "FUN_08000158": {
                    "1": "add_sub"
                },
                "FUN_0800015c": {
                    "1": "calculate_sub"
                },
                "FUN_0800071c": {
                    "1": "fabs_sub"
                },
                "FUN_08005838": {
                    "1": "calculate_trig_value",
                    "2": "calculate_arc_tan",
                    "7": "calculate_atan",
                    "9": "calculate_result"
                },
                "FUN_080059f0": {
                    "1": "atan_sub"
                },
                "SCARRY4": {
                    "1": "is_signed_overflow"
                },
                "__aeabi_dadd": {
                    "1": "d_add",
                    "2": "add_double"
                },
                "__aeabi_dadd()": {
                    "1": "add_double()"
                },
                "__divdf3": {
                    "1": "d_divide",
                    "2": "divide_double"
                },
                "__divdf3()": {
                    "1": "divide_double()"
                },
                "__subdf3": {
                    "1": "d_subtract",
                    "2": "subtract_double"
                },
                "__subdf3()": {
                    "1": "subtract_double()"
                },
                "atan": {
                    "1": "calculate_atan"
                },
                "atan()": {
                    "1": "calculate_arctan()"
                },
                "fabs": {
                    "3": "absolute_value"
                },
                "fabs()": {
                    "1": "calculate_absolute()"
                },
                "iVar1": {
                    "1": "abs_difference",
                    "16": "difference",
                    "2": "temp_var",
                    "3": "temp_var1"
                },
                "param_1": {
                    "1": "input_param_1",
                    "12": "input1",
                    "2": "value1",
                    "3": "num1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "b",
                    "12": "input2",
                    "2": "value2",
                    "3": "num2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "quotient",
                    "12": "input3",
                    "2": "value3",
                    "3": "num3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "12": "input4",
                    "2": "value4",
                    "3": "num4",
                    "4": "input_4"
                },
                "uVar2": {
                    "1": "quotient_high",
                    "2": "upper_bits",
                    "3": "result_upper",
                    "4": "result_high",
                    "6": "result1"
                },
                "uVar3": {
                    "1": "result2",
                    "2": "temp_var3",
                    "3": "shifted_bits",
                    "4": "flag"
                },
                "uVar4": {
                    "1": "normalized_c",
                    "2": "result",
                    "3": "result2"
                },
                "uVar5": {
                    "1": "param_2_abs",
                    "2": "temp_var5",
                    "3": "param2_masked"
                },
                "uVar6": {
                    "1": "angle_result",
                    "15": "result",
                    "2": "atan_result",
                    "3": "result4"
                },
                "uVar7": {
                    "1": "constant1"
                },
                "uVar8": {
                    "1": "constant2"
                }
            },
            "called": [
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_08000158"
            ],
            "calling": [
                "FUN_08005834"
            ],
            "code": "\nuint calculate_result_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result1;\n  uint flag;\n  uint result2;\n  uint param2_masked;\n  undefined8 result;\n  \n  result2 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result2 | (-input3 | input3) >> 0x1f)) ||\n     (param2_masked = input2 & 0x7fffffff, 0x7ff00000 < (param2_masked | (-input1 | input1) >> 0x1f))) {\n    result2 = add_double(input3,input4,input1,input2);\n    return result2;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result2 = calculate_arctan();\n    return result2;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((param2_masked | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((result2 | input3) != 0) {\n    if (result2 == 0x7ff00000) {\n      if (param2_masked == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (param2_masked != 0x7ff00000) {\n      difference = (int)(param2_masked - result2) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != subtract_carry4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          divide_double(input1,input2,input3,input4,input4);\n          calculate_absolute();\n          result = calculate_arctan();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result1 = (undefined4)((ulonglong)result >> 0x20);\n      result2 = (uint)result;\n      if (flag == 1) {\n        return result2;\n      }\n      if (flag == 2) {\n        result = subtract_double(result2,result1,0x33145c07,0x3ca1a626);\n        result2 = subtract_double(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return result2;\n      }\n      if (flag != 0) {\n        result = subtract_double(result2,result1,0x33145c07,0x3ca1a626);\n        result2 = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return result2;\n      }\n      return result2;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "calculate_result_08005838",
            "entrypoint": "0x08005838",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "SCARRY4": "subtract_carry4",
                "__aeabi_dadd": "add_double",
                "__divdf3": "divide_double",
                "__subdf3": "subtract_double",
                "atan": "calculate_arc_tangent",
                "atan()": "calculate_arctan()",
                "fabs": "absolute_value",
                "fabs()": "calculate_absolute()",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result1",
                "uVar3": "flag",
                "uVar4": "result2",
                "uVar5": "param2_masked",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f0": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "calculate_result"
                },
                "<original_parameter_name_1>": {
                    "1": "input_param1"
                },
                "<original_parameter_name_2>": {
                    "1": "input_param2"
                },
                "<original_parameter_name_3>": {
                    "1": "input_param3"
                },
                "<original_parameter_name_4>": {
                    "1": "input_param4"
                },
                "<original_variable_name_10>": {
                    "1": "temp_var10"
                },
                "<original_variable_name_11>": {
                    "1": "temp_var11"
                },
                "<original_variable_name_12>": {
                    "1": "temp_var12"
                },
                "<original_variable_name_13>": {
                    "1": "temp_var13"
                },
                "<original_variable_name_14>": {
                    "1": "temp_var14"
                },
                "<original_variable_name_15>": {
                    "1": "temp_var15"
                },
                "<original_variable_name_16>": {
                    "1": "temp_var16"
                },
                "<original_variable_name_17>": {
                    "1": "temp_var17"
                },
                "<original_variable_name_18>": {
                    "1": "temp_var18"
                },
                "<original_variable_name_19>": {
                    "1": "temp_var19"
                },
                "<original_variable_name_1>": {
                    "1": "temp_var1"
                },
                "<original_variable_name_20>": {
                    "1": "temp_var20"
                },
                "<original_variable_name_21>": {
                    "1": "temp_var21"
                },
                "<original_variable_name_22>": {
                    "1": "temp_var22"
                },
                "<original_variable_name_23>": {
                    "1": "temp_var23"
                },
                "<original_variable_name_24>": {
                    "1": "temp_var24"
                },
                "<original_variable_name_25>": {
                    "1": "temp_var25"
                },
                "<original_variable_name_26>": {
                    "1": "temp_var26"
                },
                "<original_variable_name_27>": {
                    "1": "temp_var27"
                },
                "<original_variable_name_28>": {
                    "1": "temp_var28"
                },
                "<original_variable_name_29>": {
                    "1": "temp_var29"
                },
                "<original_variable_name_2>": {
                    "1": "temp_var2"
                },
                "<original_variable_name_30>": {
                    "1": "temp_var30"
                },
                "<original_variable_name_31>": {
                    "1": "temp_var31"
                },
                "<original_variable_name_32>": {
                    "1": "temp_var32"
                },
                "<original_variable_name_33>": {
                    "1": "temp_var33"
                },
                "<original_variable_name_34>": {
                    "1": "temp_var34"
                },
                "<original_variable_name_35>": {
                    "1": "temp_var35"
                },
                "<original_variable_name_36>": {
                    "1": "temp_var36"
                },
                "<original_variable_name_37>": {
                    "1": "temp_var37"
                },
                "<original_variable_name_38>": {
                    "1": "temp_var38"
                },
                "<original_variable_name_39>": {
                    "1": "temp_var39"
                },
                "<original_variable_name_3>": {
                    "1": "temp_var3"
                },
                "<original_variable_name_40>": {
                    "1": "temp_var40"
                },
                "<original_variable_name_41>": {
                    "1": "temp_var41"
                },
                "<original_variable_name_42>": {
                    "1": "temp_var42"
                },
                "<original_variable_name_43>": {
                    "1": "temp_var43"
                },
                "<original_variable_name_44>": {
                    "1": "temp_var44"
                },
                "<original_variable_name_45>": {
                    "1": "temp_var45"
                },
                "<original_variable_name_46>": {
                    "1": "temp_var46"
                },
                "<original_variable_name_47>": {
                    "1": "temp_var47"
                },
                "<original_variable_name_48>": {
                    "1": "temp_var48"
                },
                "<original_variable_name_49>": {
                    "1": "temp_var49"
                },
                "<original_variable_name_4>": {
                    "1": "temp_var4"
                },
                "<original_variable_name_50>": {
                    "1": "temp_var50"
                },
                "<original_variable_name_51>": {
                    "1": "temp_var51"
                },
                "<original_variable_name_52>": {
                    "1": "temp_var52"
                },
                "<original_variable_name_53>": {
                    "1": "temp_var53"
                },
                "<original_variable_name_54>": {
                    "1": "temp_var54"
                },
                "<original_variable_name_55>": {
                    "1": "temp_var55"
                },
                "<original_variable_name_56>": {
                    "1": "temp_var56"
                },
                "<original_variable_name_57>": {
                    "1": "temp_var57"
                },
                "<original_variable_name_58>": {
                    "1": "temp_var58"
                },
                "<original_variable_name_59>": {
                    "1": "temp_var59"
                },
                "<original_variable_name_5>": {
                    "1": "temp_var5"
                },
                "<original_variable_name_60>": {
                    "1": "temp_var60"
                },
                "<original_variable_name_61>": {
                    "1": "temp_var61"
                },
                "<original_variable_name_62>": {
                    "1": "temp_var62"
                },
                "<original_variable_name_63>": {
                    "1": "temp_var63"
                },
                "<original_variable_name_64>": {
                    "1": "temp_var64"
                },
                "<original_variable_name_65>": {
                    "1": "temp_var65"
                },
                "<original_variable_name_66>": {
                    "1": "temp_var66"
                },
                "<original_variable_name_67>": {
                    "1": "temp_var67"
                },
                "<original_variable_name_68>": {
                    "1": "temp_var68"
                },
                "<original_variable_name_69>": {
                    "1": "temp_var69"
                },
                "<original_variable_name_6>": {
                    "1": "temp_var6"
                },
                "<original_variable_name_70>": {
                    "1": "temp_var70"
                },
                "<original_variable_name_71>": {
                    "1": "temp_var71"
                },
                "<original_variable_name_72>": {
                    "1": "temp_var72"
                },
                "<original_variable_name_7>": {
                    "1": "temp_var7"
                },
                "<original_variable_name_8>": {
                    "1": "temp_var8"
                },
                "<original_variable_name_9>": {
                    "1": "temp_var9"
                },
                "CONCAT44": {
                    "1": "concatenate_integers"
                },
                "FUNC_08005d0c": {
                    "1": "function4"
                },
                "FUN_08000158": {
                    "1": "function5"
                },
                "FUN_0800015c": {
                    "1": "function2"
                },
                "FUN_080004c8": {
                    "1": "function1"
                },
                "FUN_0800071c": {
                    "1": "function3"
                },
                "FUN_080009e8": {
                    "1": "function6"
                },
                "FUN_080059f0": {
                    "1": "calculate_bessel_function",
                    "2": "calculate",
                    "5": "calculate_value",
                    "7": "calculate_square_root",
                    "8": "calculate_result"
                },
                "__aeabi_dadd": {
                    "1": "add"
                },
                "__aeabi_dcmpgt": {
                    "1": "compare_greater"
                },
                "__aesldiv0": {
                    "1": "subtract"
                },
                "__divdf3": {
                    "1": "divide_double"
                },
                "__muldf3": {
                    "1": "multiply_double"
                },
                "__subdf3": {
                    "1": "subtract"
                },
                "fabs": {
                    "1": "absolute"
                },
                "iVar8": {
                    "1": "result",
                    "2": "temp2",
                    "8": "comparison_result"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input1",
                    "2": "input_param_1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "13": "input2",
                    "2": "value2",
                    "3": "y",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "input_value3",
                    "10": "input3",
                    "2": "param_3",
                    "3": "constant1",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "b",
                    "10": "input4",
                    "2": "input_param_4",
                    "3": "constant2",
                    "4": "input_4"
                },
                "uVar1": {
                    "1": "abs_value1",
                    "13": "result1",
                    "3": "result_1",
                    "5": "temp1"
                },
                "uVar10": {
                    "1": "temp_variable4",
                    "2": "result",
                    "9": "final_result"
                },
                "uVar11": {
                    "1": "temp3"
                },
                "uVar2": {
                    "1": "variable2",
                    "13": "result2",
                    "3": "result_2",
                    "5": "temp2"
                },
                "uVar3": {
                    "1": "variable3",
                    "13": "result3",
                    "3": "result_3",
                    "5": "temp3"
                },
                "uVar4": {
                    "1": "u_var4",
                    "13": "result4",
                    "3": "result_4",
                    "5": "temp4"
                },
                "uVar5": {
                    "1": "u_var5",
                    "13": "result5",
                    "3": "result_5",
                    "5": "temp5"
                },
                "uVar6": {
                    "1": "value6",
                    "13": "result6",
                    "3": "result_6",
                    "5": "temp6"
                },
                "uVar7": {
                    "1": "unsigned_result",
                    "2": "temp1",
                    "3": "abs_y",
                    "5": "abs_input2"
                },
                "uVar9": {
                    "1": "result",
                    "2": "temp1",
                    "3": "intermediate_result",
                    "6": "temp_result"
                }
            },
            "called": [
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_08000158",
                "FUN_080009e8"
            ],
            "calling": [
                "FUN_08005838"
            ],
            "code": "\nundefined8 calculate_result_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint abs_input2;\n  int comparison_result;\n  undefined8 temp_result;\n  undefined8 final_result;\n  \n  final_result = concatenate44(input2,input1);\n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x44100000) {\n    if (abs_input2 < 0x3fdc0000) {\n      if (abs_input2 < 0x3e200000) {\n        temp_result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,input4);\n        comparison_result = compare_greater((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (comparison_result != 0) {\n          return concatenate44(input2,input1);\n        }\n      }\n      comparison_result = -1;\n    }\n    else {\n      final_result = absolute();\n      result4 = (undefined4)((ulonglong)final_result >> 0x20);\n      result1 = (undefined4)final_result;\n      if (abs_input2 < 0x3ff30000) {\n        if (abs_input2 < 0x3fe60000) {\n          final_result = __aeabi_dadd(result1,result4,result1,result4);\n          final_result = subtract((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          temp_result = __aeabi_dadd(result1,result4,0,0x40000000);\n          final_result = divide((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                            (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 0;\n        }\n        else {\n          final_result = subtract(result1,result4,0,0x3ff00000);\n          temp_result = __aeabi_dadd(result1,result4,0,0x3ff00000);\n          final_result = divide((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                            (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 1;\n        }\n      }\n      else if (abs_input2 < 0x40038000) {\n        final_result = subtract(result1,result4,0,0x3ff80000);\n        temp_result = multiply(result1,result4,0,0x3ff80000);\n        temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        final_result = divide((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n        comparison_result = 2;\n      }\n      else {\n        final_result = divide(0,0xbff00000,result1,result4);\n        comparison_result = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)final_result >> 0x20);\n    result5 = (undefined4)final_result;\n    final_result = multiply(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)final_result >> 0x20);\n    result1 = (undefined4)final_result;\n    final_result = multiply(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)final_result >> 0x20);\n    result4 = (undefined4)final_result;\n    final_result = multiply(result4,result3,0xe322da11,0x3f90ad3a);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = multiply((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = multiply((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = multiply((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = multiply((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = multiply((int)final_result,(int)((ulonglong)final_result >> 0x20),result1,result2);\n    temp_result = multiply(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp_result = subtract((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = multiply((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = subtract((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = multiply((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = subtract((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = multiply((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = subtract((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = multiply((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n    final_result = multiply((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)final_result >> 0x20);\n    if (comparison_result == -1) {\n      final_result = subtract(result5,result6,(int)final_result,result1);\n      return final_result;\n    }\n    comparison_result = comparison_result * 8;\n    final_result = subtract((int)final_result,result1,*(undefined4 *)(&UNK_08009ee8 + comparison_result),\n                      *(undefined4 *)(&UNK_08009eec + comparison_result));\n    final_result = subtract((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    final_result = subtract(*(undefined4 *)(&UNK_08009ec8 + comparison_result),*(undefined4 *)(&UNK_08009ecc + comparison_result),\n                      (int)final_result,(int)((ulonglong)final_result >> 0x20));\n    if ((int)input2 < 0) {\n      return concatenate44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n    }\n  }\n  else {\n    if ((abs_input2 < 0x7ff00001) && ((abs_input2 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return concatenate44(result1,0x54442d18);\n    }\n    final_result = __aeabi_dadd(input1,input2,input1,input2,input4);\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_result_080059f0",
            "entrypoint": "0x080059f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate44",
                "FUN_080059f0": "calculate_result_080059f0",
                "__aeabi_dcmpgt": "compare_greater",
                "__divdf3": "divide",
                "__muldf3": "multiply",
                "__subdf3": "subtract",
                "fabs": "absolute",
                "iVar8": "comparison_result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar10": "final_result",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "abs_input2",
                "uVar9": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005d0c",
            "entrypoint": "0x08005d0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005d14": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "get_constant_value"
                },
                "DAT_2000001c": {
                    "1": "data_address",
                    "12": "data",
                    "6": "data_value"
                },
                "FUN_08005d14": {
                    "1": "get_global_constant",
                    "11": "get_data_value",
                    "13": "get_data",
                    "3": "get_dat_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005728"
            ],
            "code": "\nundefined4 get_data_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "current_name": "get_data_08005d14",
            "entrypoint": "0x08005d14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d14": "get_data_08005d14"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d20": {
            "additional_data": {
                "FUNC_080078a0": {
                    "1": "subfunction_1",
                    "2": "sub_function1"
                },
                "FUNC_08009e68": {
                    "1": "subfunction_c",
                    "2": "cleanup"
                },
                "FUN_08000134": {
                    "1": "execute_action",
                    "2": "sub_function2"
                },
                "FUN_08005d20": {
                    "1": "initialize_function",
                    "2": "initialize_and_execute_sub_functions",
                    "3": "initialize_and_call_subfunctions",
                    "5": "initialize_and_execute_subfunctions",
                    "6": "initialize_and_execute_functions"
                },
                "_init": {
                    "1": "initialize"
                },
                "iVar1": {
                    "1": "iteration_counter",
                    "11": "counter",
                    "15": "iteration_count"
                },
                "ppcVar2": {
                    "1": "function_list",
                    "14": "function_pointers",
                    "3": "function_pointer_array",
                    "5": "function_array",
                    "6": "function_pointer"
                }
            },
            "called": [
                "FUN_080078a0",
                "FUN_08000134",
                "FUN_08009e68"
            ],
            "calling": [
                "FUN_080057e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid initialize_and_execute_functions_08005d20(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  initialize();\n  iteration_count = 0;\n  function_pointers = (code **)&DAT_0800a198;\n  do {\n    iteration_count = iteration_count + 1;\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "current_name": "initialize_and_execute_functions_08005d20",
            "entrypoint": "0x08005d20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d20": "initialize_and_execute_functions_08005d20",
                "_init": "initialize",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d68": {
            "additional_data": {
                "FUN_08005d68": {
                    "1": "fill_memory_with_byte",
                    "10": "fill_memory",
                    "2": "fill_with_byte",
                    "3": "fill_buffer_with_byte"
                },
                "LAB_08005de4": {
                    "1": "end_loop"
                },
                "bVar5": {
                    "1": "is_zero_length",
                    "2": "is_remaining_zero",
                    "5": "is_size_zero",
                    "7": "is_zero"
                },
                "param_1": {
                    "1": "output_buffer",
                    "13": "dest",
                    "2": "memory",
                    "6": "destination",
                    "7": "buffer"
                },
                "param_2": {
                    "1": "byte_val",
                    "2": "byte_to_fill",
                    "23": "value",
                    "4": "byte"
                },
                "param_3": {
                    "1": "num_bytes",
                    "22": "size",
                    "4": "length"
                },
                "puVar1": {
                    "1": "pointer1",
                    "15": "dest_ptr",
                    "2": "dst_ptr"
                },
                "puVar2": {
                    "1": "dst_next",
                    "10": "next_ptr",
                    "2": "ptr2",
                    "7": "next_dest_ptr"
                },
                "uVar3": {
                    "1": "size_count",
                    "16": "remaining_size",
                    "2": "remaining",
                    "3": "remaining_count",
                    "4": "remaining_length"
                },
                "uVar4": {
                    "1": "u_int_byte",
                    "2": "fill_value",
                    "3": "value32"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "code": "\nvoid fill_memory_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_ptr;\n  uint remaining_size;\n  undefined4 value32;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value32;\n        dest_ptr[-3] = value32;\n        dest_ptr[-2] = value32;\n        dest_ptr[-1] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_ptr;\n    } while ((undefined4 *)(size + (int)dest) != next_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_08005d68",
            "entrypoint": "0x08005d68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d68": "fill_memory_08005d68",
                "LAB_08005de4": "end_loop",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_ptr",
                "uVar3": "remaining_size",
                "uVar4": "value32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "additional_data": {
                "FUN_08005dfc": {
                    "1": "print_to_console",
                    "3": "print_and_clear_buffer",
                    "5": "print_formatted_output",
                    "6": "print_message",
                    "9": "print_formatted_string"
                },
                "_svfprintf_r": {
                    "1": "write_formatted_data_to_file"
                },
                "local_6c": {
                    "1": "max_output_length_copy",
                    "2": "max_value",
                    "3": "max_length"
                },
                "local_70": {
                    "1": "local_variable3",
                    "2": "local_var3"
                },
                "local_78": {
                    "1": "maximum_length",
                    "2": "max_output_length",
                    "3": "max_width",
                    "5": "local_var1"
                },
                "local_80": {
                    "1": "output_buffer",
                    "2": "local_message_buffer",
                    "5": "buffer"
                },
                "local_80[0]": {
                    "1": "formatted_output"
                },
                "param_1": {
                    "1": "message_pointer",
                    "2": "output_buffer",
                    "3": "buffer",
                    "4": "format_string",
                    "5": "output_string"
                },
                "param_2": {
                    "1": "message_length",
                    "3": "buffer_size",
                    "4": "length",
                    "8": "format_string"
                },
                "param_3": {
                    "1": "format_string",
                    "16": "arg1",
                    "2": "arg3",
                    "3": "format"
                },
                "param_4": {
                    "1": "precision",
                    "16": "arg2",
                    "2": "arguments",
                    "4": "args"
                },
                "uStack_4": {
                    "1": "ptr_arg2",
                    "2": "param_4_copy",
                    "5": "arg2_copy"
                },
                "uStack_74": {
                    "1": "unknown_value1",
                    "2": "constant_value",
                    "5": "local_var2"
                },
                "uStack_8": {
                    "1": "max_val2",
                    "2": "param_3_copy",
                    "5": "arg1_copy"
                }
            },
            "called": [
                "FUN_08005e9c"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid print_formatted_string_08005dfc(undefined *output_string,undefined4 format_string,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined *buffer [2];\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined *current_string;\n  undefined4 max_length;\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  \n  max_length = 0x7fffffff;\n  local_var1 = 0x7fffffff;\n  local_var2 = 0xffff0208;\n  formatted_output = output_string;\n  current_string = output_string;\n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  write_formatted_data_to_file(DAT_2000001c,buffer,format_string,&arg1_copy);\n  *formatted_output = 0;\n  return;\n}\n\n",
            "current_name": "print_formatted_string_08005dfc",
            "entrypoint": "0x08005dfc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005dfc": "print_formatted_string_08005dfc",
                "_svfprintf_r": "write_formatted_data_to_file",
                "local_6c": "max_length",
                "local_70": "current_string",
                "local_78": "local_var1",
                "local_80": "buffer",
                "local_80[0]": "formatted_output",
                "param_1": "output_string",
                "param_2": "format_string",
                "param_3": "arg1",
                "param_4": "arg2",
                "uStack_4": "arg2_copy",
                "uStack_74": "local_var2",
                "uStack_8": "arg1_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e40": {
            "additional_data": {
                "FUN_08005e40": {
                    "1": "find_last_nonzero_byte_index",
                    "2": "find_last_set_bit_index",
                    "3": "find_last_set_bit",
                    "7": "count_leading_zeros"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeroes",
                    "2": "leading_zeros_count",
                    "4": "count_leading_zeros"
                },
                "iVar1": {
                    "1": "leading_zeros_count",
                    "2": "index",
                    "4": "bit_offset",
                    "6": "offset",
                    "7": "leading_zeros"
                },
                "param_1": {
                    "1": "input_data",
                    "17": "input",
                    "2": "input_num",
                    "3": "value",
                    "6": "input_value"
                },
                "puVar2": {
                    "1": "word_ptr",
                    "14": "ptr",
                    "2": "pointer",
                    "4": "data_ptr"
                },
                "uVar3": {
                    "1": "word",
                    "16": "value",
                    "4": "data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "code": "\nint count_leading_zeros_08005e40(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    leading_zeros = leading_zeros + 4;\n  }\n  return leading_zeros + (0x1fU - count_leading_zeros_08005e40(value & -value) >> 3);\n}\n\n",
            "current_name": "count_leading_zeros_08005e40",
            "entrypoint": "0x08005e40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005e40": "count_leading_zeros_08005e40",
                "LZCOUNT": "count_leading_zeros",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "called": [
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_0800901c",
                "FUN_080004c8",
                "FUN_080096e0",
                "FUN_080079e8",
                "FUN_080003f4",
                "FUN_08008af8",
                "FUN_080011ec",
                "FUN_0800119c",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_08005e40",
                "FUN_080088ec",
                "FUN_08008ad4"
            ],
            "calling": [
                "FUN_08005dfc"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)_localeconv_r();\n  local_114 = *ppiVar2;\n  local_118 = (int *)strlen(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = _malloc_r(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = _localeconv_r(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)strlen(local_110);\n      local_104 = piVar24;\n      iVar3 = _localeconv_r(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = __unorddf2(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) &&\n         (iVar3 = __aeabi_dcmple(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)) {\n        iVar3 = __aeabi_dcmplt(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = __unorddf2(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)_malloc_r(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = frexp(local_128,uVar19,&local_f0);\n          local_150 = __muldf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = __aeabi_dcmpeq((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                                 local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = frexp(local_128,uVar19,&local_f0);\n          local_150 = __muldf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = __aeabi_dcmpeq((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                                 local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)_dtoa_r(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = __aeabi_dcmpeq(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)_dtoa_r(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)_dtoa_r(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = __aeabi_dcmpeq(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)strlen(piVar23);\n        }\n        else {\n          iVar3 = memchr(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        __aeabi_uldivmod(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          strncpy(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = __aeabi_uldivmod(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    __ssprint_r(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = __aeabi_dcmpeq((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = __muldf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = __aeabi_d2iz();\n    uVar34 = __aeabi_i2d();\n    uVar33 = __subdf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                      (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = __aeabi_dcmpgt((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = __aeabi_dcmpeq((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = __ssprint_r(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = __ssprint_r(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = __ssprint_r(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = __aeabi_dcmpeq(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = __ssprint_r(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = __aeabi_dcmpeq(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = __ssprint_r(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = __ssprint_r(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = __ssprint_r(local_16c,local_160,&local_d8), iVar3 == 0)) {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      _free_r(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "current_name": "FUNC_08005e9c",
            "entrypoint": "0x08005e9c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078a0": {
            "called": [
                "FUN_080098c0"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080078a0",
            "entrypoint": "0x080078a0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078c0": {
            "additional_data": {
                "FUN_080078c0": {
                    "1": "dividing_function",
                    "2": "reverse_division",
                    "3": "calculate_quotient",
                    "8": "calculate_division"
                },
                "__mcmp()": {
                    "1": "compare"
                },
                "iVar3": {
                    "1": "temp2",
                    "17": "carry",
                    "2": "carry2"
                },
                "iVar4": {
                    "1": "counter",
                    "2": "array2_length",
                    "8": "divisor_length"
                },
                "iVar5": {
                    "1": "denominator_len",
                    "15": "index",
                    "2": "dividend_length",
                    "7": "last_index"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "dividend",
                    "2": "array1",
                    "3": "numerator",
                    "7": "input_array"
                },
                "param_2": {
                    "1": "division_array",
                    "13": "divisor",
                    "2": "input_2",
                    "3": "denominator",
                    "4": "output_array"
                },
                "puVar11": {
                    "1": "ptr_divisor2",
                    "2": "ptr_5",
                    "3": "divisor_ptr"
                },
                "puVar12": {
                    "1": "next_divisor_pointer",
                    "2": "ptr_6",
                    "3": "next_divisor_ptr"
                },
                "puVar2": {
                    "1": "source_elem_ptr",
                    "2": "input_ptr",
                    "4": "dividend_ptr"
                },
                "puVar7": {
                    "1": "input_ptr",
                    "2": "array2_ptr",
                    "7": "divisor_ptr"
                },
                "puVar8": {
                    "1": "array1",
                    "2": "ptr_3",
                    "6": "dividend_ptr"
                },
                "puVar9": {
                    "1": "ptr_9",
                    "2": "ptr_4"
                },
                "uVar1": {
                    "1": "result",
                    "2": "carry",
                    "3": "temp_var1",
                    "4": "temp1",
                    "9": "quotient"
                },
                "uVar10": {
                    "1": "temp_4",
                    "2": "temp_var10",
                    "4": "temp2"
                },
                "uVar6": {
                    "1": "division_value",
                    "10": "result",
                    "13": "quotient",
                    "2": "quotient_increment"
                }
            },
            "called": [
                "FUN_080094f8"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nuint calculate_division_080078c0(int dividend,int divisor)\n\n{\n  uint quotient;\n  uint *dividend_ptr;\n  int carry;\n  int divisor_length;\n  int index;\n  uint quotient;\n  uint *divisor_ptr;\n  uint *dividend_ptr;\n  uint *last_ptr;\n  uint temp2;\n  uint *divisor_ptr;\n  uint *next_divisor_ptr;\n  \n  divisor_length = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < divisor_length) {\n    return 0;\n  }\n  index = divisor_length + -1;\n  divisor_ptr = (uint *)(divisor + 0x14);\n  dividend_ptr = (uint *)(dividend + 0x14);\n  quotient = dividend_ptr[index] / (divisor_ptr[index] + 1);\n  last_ptr = divisor_ptr + index;\n  if (quotient != 0) {\n    quotient = 0;\n    carry = 0;\n    dividend_ptr = dividend_ptr;\n    divisor_ptr = divisor_ptr;\n    do {\n      next_divisor_ptr = divisor_ptr + 1;\n      quotient = quotient * (*divisor_ptr & 0xffff) + quotient;\n      temp2 = quotient * (*divisor_ptr >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*dividend_ptr & 0xffff);\n      carry = ((*dividend_ptr >> 0x10) - (temp2 & 0xffff)) + ((int)quotient >> 0x10);\n      *dividend_ptr = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp2 >> 0x10;\n      dividend_ptr = dividend_ptr + 1;\n      divisor_ptr = next_divisor_ptr;\n    } while (next_divisor_ptr <= last_ptr);\n    if (dividend_ptr[index] == 0) {\n      if ((dividend_ptr < dividend_ptr + divisor_length + -2) && (dividend_ptr[divisor_length + -2] == 0)) {\n        dividend_ptr = dividend_ptr + divisor_length + -3;\n        do {\n          index = index + -1;\n          if (dividend_ptr <= dividend_ptr) break;\n          quotient = *dividend_ptr;\n          dividend_ptr = dividend_ptr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  divisor_length = compare;\n  if (-1 < divisor_length) {\n    divisor_length = 0;\n    quotient = quotient + 1;\n    dividend_ptr = dividend_ptr;\n    do {\n      divisor_ptr = divisor_ptr + 1;\n      quotient = (divisor_length - (*divisor_ptr & 0xffff)) + (*dividend_ptr & 0xffff);\n      divisor_length = ((*dividend_ptr >> 0x10) - (*divisor_ptr >> 0x10)) + ((int)quotient >> 0x10);\n      *dividend_ptr = quotient & 0xffff | divisor_length * 0x10000;\n      divisor_length = divisor_length >> 0x10;\n      dividend_ptr = dividend_ptr + 1;\n      divisor_ptr = divisor_ptr;\n    } while (divisor_ptr <= last_ptr);\n    if (dividend_ptr[index] == 0) {\n      if ((dividend_ptr < dividend_ptr + index + -1) && (dividend_ptr[index + -1] == 0)) {\n        divisor_ptr = dividend_ptr + index + -2;\n        do {\n          index = index + -1;\n          if (divisor_ptr <= dividend_ptr) break;\n          quotient = *divisor_ptr;\n          divisor_ptr = divisor_ptr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  return quotient;\n}\n\n",
            "current_name": "calculate_division_080078c0",
            "entrypoint": "0x080078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "__mcmp()": "compare",
                "iVar3": "carry",
                "iVar4": "divisor_length",
                "iVar5": "index",
                "param_1": "dividend",
                "param_2": "divisor",
                "puVar11": "divisor_ptr",
                "puVar12": "next_divisor_ptr",
                "puVar2": "dividend_ptr",
                "puVar7": "divisor_ptr",
                "puVar8": "dividend_ptr",
                "puVar9": "last_ptr",
                "uVar1": "quotient",
                "uVar10": "temp2",
                "uVar6": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e8": {
            "additional_data": {
                "FUN_080009ac": {
                    "1": "is_even"
                },
                "FUN_080009d4": {
                    "1": "is_odd"
                },
                "FUN_080009e8": {
                    "1": "is_zero"
                },
                "FUN_080079e8": {
                    "1": "process_number",
                    "2": "convert_floating_point_to_string",
                    "5": "convert_double_to_string",
                    "7": "convert_float_to_string"
                },
                "FUN_080090c0": {
                    "1": "int_to_binary_string"
                },
                "FUN_0800910c": {
                    "1": "alloc_block"
                },
                "FUN_08009120": {
                    "1": "generate_digits"
                },
                "FUN_080091a4": {
                    "1": "find_first_bit_set"
                },
                "FUN_08009244": {
                    "1": "add_double"
                },
                "FUN_08009258": {
                    "1": "subtract_double"
                },
                "FUN_080093a4": {
                    "1": "multiply_double"
                },
                "FUN_08009444": {
                    "1": "shift_left"
                },
                "FUN_080094f8": {
                    "1": "round"
                },
                "FUN_08009530": {
                    "1": "compare_double"
                },
                "FUN_08009630": {
                    "1": "convert_double_to_hex_string"
                },
                "bVar1": {
                    "1": "has_infinity",
                    "10": "is_infinity",
                    "2": "has_decimals",
                    "4": "is_less_than_six"
                },
                "bVar2": {
                    "1": "is_variable_less_than17",
                    "2": "is_greater_than_seventeen",
                    "3": "is_rounded_up",
                    "5": "decrement_exponent"
                },
                "bVar25": {
                    "1": "temp_bool1"
                },
                "bVar3": {
                    "1": "is_func1",
                    "2": "is_scientific_notation",
                    "3": "round_up"
                },
                "bVar5": {
                    "1": "some_flag",
                    "2": "carry",
                    "5": "byte_var"
                },
                "cVar4": {
                    "1": "char_temp",
                    "2": "digit_char",
                    "4": "char_var",
                    "9": "digit"
                },
                "iVar100": {
                    "1": "temp_value2"
                },
                "iVar14": {
                    "1": "temp_integer4",
                    "2": "index"
                },
                "iVar15": {
                    "1": "tmp2",
                    "2": "counter3",
                    "3": "shift_amount"
                },
                "iVar19": {
                    "1": "var19",
                    "2": "exp"
                },
                "iVar24": {
                    "1": "temp_integer7",
                    "2": "digit_value",
                    "4": "char_code"
                },
                "iVar25": {
                    "1": "digit"
                },
                "iVar26": {
                    "1": "temp_variable3"
                },
                "iVar27": {
                    "1": "rounded_digit"
                },
                "iVar28": {
                    "1": "decimal_parts"
                },
                "iVar69": {
                    "1": "decimal_point_pos_offset"
                },
                "iVar7": {
                    "1": "digits",
                    "2": "counter1"
                },
                "iVar78": {
                    "1": "power_of_ten_table"
                },
                "iVar8": {
                    "1": "comparision_result",
                    "2": "comparison",
                    "3": "compare_result",
                    "8": "comparison_result"
                },
                "iVar9": {
                    "1": "temp_value3",
                    "2": "div_result"
                },
                "iVar99": {
                    "1": "digit"
                },
                "local_10": {
                    "1": "local_var17"
                },
                "local_14": {
                    "1": "local_var16"
                },
                "local_18": {
                    "1": "local_var15"
                },
                "local_1c": {
                    "1": "local_var14"
                },
                "local_20": {
                    "1": "local_var13"
                },
                "local_24": {
                    "1": "local_var12"
                },
                "local_2c": {
                    "1": "num",
                    "2": "local_array1",
                    "3": "temp_array"
                },
                "local_30": {
                    "1": "power_of_five_round"
                },
                "local_34": {
                    "1": "temp14"
                },
                "local_38": {
                    "1": "var13"
                },
                "local_4": {
                    "1": "local_var20"
                },
                "local_44": {
                    "1": "u_stack_44"
                },
                "local_48": {
                    "1": "local_var6",
                    "2": "local_variable9"
                },
                "local_58": {
                    "1": "temporary_value",
                    "2": "local_variable8"
                },
                "local_5c": {
                    "1": "local_value7",
                    "2": "local_variable7"
                },
                "local_60": {
                    "1": "decimal_place",
                    "2": "shift_amount"
                },
                "local_68": {
                    "1": "integer_part",
                    "2": "local_variable5"
                },
                "local_70": {
                    "1": "significant_digits",
                    "2": "local_variable4"
                },
                "local_74": {
                    "1": "temp_variable3",
                    "2": "local_variable3",
                    "4": "exponent",
                    "5": "num_digits"
                },
                "local_7c": {
                    "1": "input_value_lower32_bits",
                    "2": "local_variable2"
                },
                "local_8": {
                    "1": "local_var19"
                },
                "local_80": {
                    "1": "temporary_value",
                    "2": "local_variable1"
                },
                "local_c": {
                    "1": "local_var18"
                },
                "numDigits": {
                    "1": "max_digits"
                },
                "param_1": {
                    "1": "function_param1",
                    "14": "value",
                    "2": "input1",
                    "3": "number"
                },
                "param_10": {
                    "1": "param9"
                },
                "param_2": {
                    "1": "other_parameter",
                    "2": "sign",
                    "3": "param1",
                    "4": "precision",
                    "7": "flags"
                },
                "param_3": {
                    "1": "integer_part",
                    "2": "input3",
                    "3": "mantissa",
                    "4": "high_bits",
                    "5": "sign"
                },
                "param_4": {
                    "1": "mant_low",
                    "2": "input4",
                    "3": "param3",
                    "4": "low_bits",
                    "8": "exponent"
                },
                "param_5": {
                    "1": "nan",
                    "2": "param5",
                    "3": "min_width",
                    "8": "precision"
                },
                "param_6": {
                    "1": "digits",
                    "2": "param6",
                    "3": "mode"
                },
                "param_7": {
                    "1": "p_dec_digits",
                    "2": "param7",
                    "3": "param6",
                    "6": "length"
                },
                "param_8": {
                    "1": "out_sign",
                    "12": "is_negative",
                    "2": "param8",
                    "3": "param7"
                },
                "param_9": {
                    "1": "param7",
                    "2": "output_string",
                    "3": "param8"
                },
                "pcVar10": {
                    "1": "output_string",
                    "3": "result",
                    "4": "result_string"
                },
                "pcVar20": {
                    "1": "str_ptr1"
                },
                "pcVar21": {
                    "1": "next_digit"
                },
                "pcVar99": {
                    "1": "next_digit_pointer"
                },
                "puVar22": {
                    "1": "pu_var22"
                },
                "uStack_44": {
                    "1": "is_rounded_down"
                },
                "uVar11": {
                    "1": "rounded_value",
                    "2": "result2"
                },
                "uVar12": {
                    "1": "temp_value3",
                    "2": "temp1"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "temp2"
                },
                "uVar16": {
                    "1": "integer_part"
                },
                "uVar17": {
                    "1": "u_var17"
                },
                "uVar18": {
                    "1": "adjusted_exponent",
                    "2": "abs_exponent"
                },
                "uVar19": {
                    "1": "decimal_fraction"
                },
                "uVar20": {
                    "1": "a_hi"
                },
                "uVar21": {
                    "1": "a_lo"
                },
                "uVar22": {
                    "1": "b_hi"
                },
                "uVar23": {
                    "1": "temp_variable18"
                },
                "uVar26": {
                    "1": "temp_value7"
                },
                "uVar27": {
                    "1": "result4",
                    "2": "temp_double"
                },
                "uVar28": {
                    "1": "temp4",
                    "2": "temp_double"
                },
                "uVar36": {
                    "1": "trailing_decimal_digit"
                },
                "uVar6": {
                    "1": "mantissa_copy",
                    "2": "temp_value",
                    "3": "result1"
                }
            },
            "called": [
                "FUN_0800910c",
                "FUN_080003d4",
                "FUN_08001084",
                "FUN_080078c0",
                "FUN_080009ac",
                "FUN_08009258",
                "FUN_080009d4",
                "FUN_080009e8",
                "FUN_080090c0",
                "FUN_080093a4",
                "FUN_08009244",
                "FUN_080094f8",
                "FUN_080091a4",
                "FUN_08000998",
                "FUN_08009630",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_08000158",
                "FUN_08009530",
                "FUN_08009120",
                "FUN_08009444"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nchar * convert_float_to_string_080079e8(int value,undefined4 flags,uint sign,uint exponent,uint precision,\n                   uint param5,int *length,uint *is_negative,char **result)\n\n{\n  bool is_infinity;\n  bool decrement_exponent;\n  bool round_up;\n  char digit;\n  byte byte_var;\n  undefined4 result1;\n  int counter1;\n  int comparison_result;\n  int div_result;\n  char *result_string;\n  uint result2;\n  undefined4 temp1;\n  undefined4 temp2;\n  int index;\n  int shift_amount;\n  undefined4 encoded_exponent_upper32_bits;\n  uint encoded_exponent_lower32_bits;\n  uint abs_exponent;\n  int exp;\n  char *temp_result;\n  char *current_digit_pointer;\n  undefined4 *pow5;\n  undefined4 temp;\n  int char_code;\n  bool is_negative;\n  undefined8 temp;\n  undefined8 temp_double;\n  undefined8 temp_double;\n  uint temp_result;\n  uint local_variable2;\n  uint num_digits;\n  int local_variable4;\n  uint local_var5;\n  int shift_amount;\n  int local_variable7;\n  uint local_variable8;\n  uint local_variable9;\n  uint long_divisor_upper32_bits;\n  uint precision;\n  uint remaining_digits;\n  int num_trailing_zeros;\n  int temp_array [2];\n  \n  index = *(int *)(value + 0x40);\n  if (index != 0) {\n    abs_exponent = *(uint *)(value + 0x44);\n    *(uint *)(index + 4) = abs_exponent;\n    *(int *)(index + 8) = 1 << (abs_exponent & 0xff);\n    _Bfree(value,index);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  is_negative = (int)exponent < 0;\n  abs_exponent = exponent;\n  if (is_negative) {\n    abs_exponent = exponent & 0x7fffffff;\n  }\n  *is_negative = (uint)is_negative;\n  local_variable2 = exponent;\n  if (is_negative) {\n    local_variable2 = abs_exponent;\n  }\n  encoded_exponent_lower32_bits = local_variable2;\n  if ((~abs_exponent & 0x7ff00000) == 0) {\n    *length = 9999;\n    if ((sign == 0) && ((abs_exponent & 0xfffff) == 0)) {\n      result_string = \"Infinity\";\n      if (result == (char **)0x0) {\n        return result_string;\n      }\n      current_digit_pointer = \"\";\n    }\n    else {\n      result_string = \"NaN\";\n      if (result == (char **)0x0) {\n        return result_string;\n      }\n      current_digit_pointer = \"\";\n    }\n    *result = current_digit_pointer;\n    return result_string;\n  }\n  temp = __aeabi_dcmpeq(sign,local_variable2,0,0);\n  if ((int)temp != 0) {\n    *length = 1;\n    if (result != (char **)0x0) {\n      *result = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  result1 = __d2b(value,(int)((ulonglong)temp >> 0x20),sign,local_variable2,temp_array,&num_trailing_zeros);\n  index = num_trailing_zeros;\n  if (abs_exponent >> 0x14 == 0) {\n    exp = temp_array[0] + num_trailing_zeros;\n    shift_amount = exp + 0x432;\n    if (shift_amount < 0x21) {\n      abs_exponent = sign << (0x20U - shift_amount & 0xff);\n    }\n    else {\n      abs_exponent = sign >> (exp + 0x412U & 0xff) | abs_exponent << (0x40U - shift_amount & 0xff);\n    }\n    temp = __floatunsidf(abs_exponent);\n    exp = exp + -1;\n    is_negative = true;\n    result2 = (int)((ulonglong)temp >> 0x20) + 0xfe100000;\n    abs_exponent = (uint)temp;\n  }\n  else {\n    exp = (abs_exponent >> 0x14) - 0x3ff;\n    result2 = local_variable2 & 0xfffff | 0x3ff00000;\n    is_negative = false;\n    abs_exponent = sign;\n  }\n  temp = __subdf3(abs_exponent,result2,0,0x3ff80000);\n  temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),0x636f4361,0x3fd287a7);\n  temp = __aeabi_dadd((int)temp,(int)((ulonglong)temp >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp_double = __aeabi_i2d(exp);\n  temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0x509f79fb,0x3fd34413);\n  temp = __aeabi_dadd((int)temp,(int)((ulonglong)temp >> 0x20),(int)temp_double,\n                        (int)((ulonglong)temp_double >> 0x20));\n  temp2 = (undefined4)((ulonglong)temp >> 0x20);\n  num_digits = __aeabi_d2iz();\n  shift_amount = __aeabi_dcmplt((int)temp,temp2,0,0);\n  if (shift_amount != 0) {\n    temp_double = __aeabi_i2d(num_digits);\n    shift_amount = __aeabi_dcmpeq((int)temp_double,(int)((ulonglong)temp_double >> 0x20),(int)temp,temp2);\n    if (shift_amount == 0) {\n      num_digits = num_digits - 1;\n    }\n  }\n  if (num_digits < 0x17) {\n    shift_amount = __aeabi_dcmpgt(*(undefined4 *)(&DAT_08009fa8 + num_digits * 8),\n                            *(undefined4 *)(&DAT_08009fac + num_digits * 8),sign,local_variable2);\n    if (shift_amount == 0) {\n      decrement_exponent = false;\n    }\n    else {\n      num_digits = num_digits - 1;\n      decrement_exponent = false;\n    }\n  }\n  else {\n    decrement_exponent = true;\n  }\n  shift_amount = (index - exp) + -1;\n  if (shift_amount < 0) {\n    local_variable4 = 1 - (index - exp);\n    shift_amount = 0;\n  }\n  else {\n    local_variable4 = 0;\n  }\n  if ((int)num_digits < 0) {\n    local_variable8 = 0;\n    local_variable4 = local_variable4 - num_digits;\n    local_variable7 = -num_digits;\n  }\n  else {\n    shift_amount = shift_amount + num_digits;\n    local_variable8 = num_digits;\n    local_variable7 = 0;\n  }\n  if (9 < precision) {\n    precision = 0xffffffff;\n    is_infinity = true;\n    local_var5 = 0xffffffff;\n    round_up = true;\n    precision = 0;\n    param5 = 0;\n    goto LAB_08007c24;\n  }\n  is_infinity = (int)precision < 6;\n  if (!is_infinity) {\n    precision = precision - 4;\n  }\n  switch(precision) {\n  case 2:\n    round_up = false;\n    break;\n  case 3:\n    round_up = false;\n    goto LAB_08008300;\n  case 4:\n    round_up = true;\n    break;\n  case 5:\n    round_up = true;\nLAB_08008300:\n    precision = num_digits + param5;\n    local_var5 = precision + 1;\n    abs_exponent = local_var5;\n    if ((int)local_var5 < 1) {\n      abs_exponent = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    result_string = (char *)_Balloc(value,0);\n    precision = 0xffffffff;\n    local_var5 = 0xffffffff;\n    param5 = 0;\n    *(char **)(value + 0x40) = result_string;\n    round_up = true;\n    goto LAB_08007e36;\n  }\n  if ((int)param5 < 1) {\n    precision = 1;\n    param5 = 1;\n    local_var5 = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    result2 = precision;\n  }\n  else {\n    precision = param5;\n    local_var5 = param5;\n    abs_exponent = param5;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    result2 = local_var5;\n    if (0x17 < (int)abs_exponent) {\n      exp = 4;\n      index = 1;\n      do {\n        counter1 = index;\n        exp = exp * 2;\n        index = counter1 + 1;\n      } while (exp + 0x14U <= abs_exponent);\n      *(int *)(value + 0x44) = counter1;\n    }\n  }\n  result_string = (char *)_Balloc(value);\n  *(char **)(value + 0x40) = result_string;\n  if ((result2 < 0xf) && (is_infinity)) {\n    if ((int)num_digits < 1) {\n      if (num_digits == 0) {\n        index = 2;\n        temp_result = sign;\n      }\n      else {\n        index = (-num_digits & 0xf) * 8;\n        temp = __muldf3(sign,local_variable2,*(undefined4 *)(&DAT_08009fa8 + index),\n                          *(undefined4 *)(&DAT_08009fac + index));\n        local_variable2 = (uint)((ulonglong)temp >> 0x20);\n        temp_result = (uint)temp;\n        exp = (int)-num_digits >> 4;\n        if (exp == 0) {\n          index = 2;\n        }\n        else {\n          is_infinity = false;\n          index = 2;\n          pow5 = &DAT_08009f80;\n          do {\n            if (exp << 0x1f < 0) {\n              temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),*pow5,pow5[1]);\n              is_infinity = true;\n              index = index + 1;\n            }\n            exp = exp >> 1;\n            pow5 = pow5 + 2;\n          } while (exp != 0);\n          if (is_infinity) {\n            temp_result = (uint)temp;\n            local_variable2 = (uint)((ulonglong)temp >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      abs_exponent = (int)num_digits >> 4;\n      temp_double = *(undefined8 *)(&DAT_08009fa8 + (num_digits & 0xf) * 8);\n      temp = *(undefined8 *)(&DAT_08009fa8 + (num_digits & 0xf) * 8);\n      if ((int)(abs_exponent << 0x1b) < 0) {\n        temp_double = __divdf3(sign,local_variable2,0x7f73bf3c,0x75154fdd);\n        long_divisor_upper32_bits = (uint)((ulonglong)temp_double >> 0x20);\n        local_variable9 = (uint)temp_double;\n        index = 3;\n        abs_exponent = abs_exponent & 0xf;\n      }\n      else {\n        index = 2;\n        long_divisor_upper32_bits = local_variable2;\n        local_variable9 = sign;\n      }\n      if (abs_exponent != 0) {\n        pow5 = &DAT_08009f80;\n        do {\n          if ((int)(abs_exponent << 0x1f) < 0) {\n            temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),*pow5,pow5[1]);\n            index = index + 1;\n          }\n          abs_exponent = (int)abs_exponent >> 1;\n          pow5 = pow5 + 2;\n          temp_double = temp;\n        } while (abs_exponent != 0);\n      }\n      local_variable2 = (uint)((ulonglong)temp_double >> 0x20);\n      temp_result = (uint)temp_double;\n      temp = __divdf3(local_variable9,long_divisor_upper32_bits,temp_result,local_variable2);\n      temp_result = (uint)temp;\n      local_variable2 = (uint)((ulonglong)temp >> 0x20);\n    }\n    temp = CONCAT44(local_variable2,temp_result);\n    if ((decrement_exponent) && (exp = __aeabi_dcmplt(temp_result,local_variable2,0,0x3ff00000), exp != 0)) {\n      if (local_var5 == 0) {\n        temp = __aeabi_i2d(index);\n        temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),temp_result,local_variable2);\n        temp = __aeabi_dadd((int)temp,(int)((ulonglong)temp >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)temp;\n        index = (int)((ulonglong)temp >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)precision) {\n        temp = __muldf3(temp_result,local_variable2,0,0x40240000);\n        temp_double = __aeabi_i2d(index + 1);\n        temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),(int)temp,\n                          (int)((ulonglong)temp >> 0x20));\n        temp_double = __aeabi_dadd((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)temp_double;\n        local_variable9 = precision;\n        remaining_digits = num_digits - 1;\n        index = (int)((ulonglong)temp_double >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp_double = __aeabi_i2d(index);\n    temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),temp_result,local_variable2);\n    temp_double = __aeabi_dadd((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0,0x401c0000);\n    temp2 = (undefined4)temp_double;\n    index = (int)((ulonglong)temp_double >> 0x20) + -0x3400000;\n    if (local_var5 != 0) {\n      remaining_digits = num_digits;\n      local_variable9 = local_var5;\nLAB_08007cfa:\n      local_variable2 = (uint)((ulonglong)temp >> 0x20);\n      temp_result = (uint)temp;\n      digit = __aeabi_d2iz(temp_result,local_variable2);\n      digit = digit + '0';\n      encoded_exponent_upper32_bits = (&DAT_08009fa0)[local_variable9 * 2];\n      temp1 = (&DAT_08009fa4)[local_variable9 * 2];\n      temp = __aeabi_i2d();\n      temp = __subdf3(temp_result,local_variable2,(int)temp,(int)((ulonglong)temp >> 0x20));\n      temp = (undefined4)((ulonglong)temp >> 0x20);\n      current_digit_pointer = result_string + 1;\n      if (round_up) {\n        temp_double = __divdf3(0,0x3fe00000,encoded_exponent_upper32_bits,temp1);\n        temp_double = __subdf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),temp2,index);\n        temp2 = (undefined4)((ulonglong)temp_double >> 0x20);\n        *result_string = digit;\n        index = __aeabi_dcmpgt((int)temp_double,temp2,(int)temp,temp);\n        if (index != 0) {\nLAB_08008784:\n          num_digits = remaining_digits;\n          goto LAB_08008294;\n        }\n        temp_double = __subdf3(0,0x3ff00000,(int)temp,temp);\n        index = __aeabi_dcmpgt((int)temp_double,temp2,(int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n        if (index == 0) {\n          if (local_variable9 != 1) {\n            temp_result = current_digit_pointer;\n            do {\n              temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0,0x40240000);\n              temp2 = (undefined4)((ulonglong)temp_double >> 0x20);\n              temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),0,0x40240000);\n              digit = __aeabi_d2iz();\n              temp_double = __aeabi_i2d();\n              temp = __subdf3((int)temp,(int)((ulonglong)temp >> 0x20),(int)temp_double,\n                                (int)((ulonglong)temp_double >> 0x20));\n              encoded_exponent_upper32_bits = (undefined4)((ulonglong)temp >> 0x20);\n              digit = digit + '0';\n              current_digit_pointer = temp_result + 1;\n              *temp_result = digit;\n              index = __aeabi_dcmplt((int)temp,encoded_exponent_upper32_bits,(int)temp_double,temp2);\n              if (index != 0) {\n                num_digits = remaining_digits;\n                goto LAB_08008294;\n              }\n              temp_double = __subdf3(0,0x3ff00000,(int)temp,encoded_exponent_upper32_bits);\n              index = __aeabi_dcmplt((int)temp_double,(int)((ulonglong)temp_double >> 0x20),(int)temp_double,\n                                      temp2);\n              if (index != 0) goto LAB_08008798;\n              temp_result = current_digit_pointer;\n            } while (current_digit_pointer != result_string + local_variable9);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        num_digits = remaining_digits;\n      }\n      else {\n        temp_double = __muldf3(temp2,index,encoded_exponent_upper32_bits,temp1);\n        temp2 = (undefined4)((ulonglong)temp_double >> 0x20);\n        *result_string = digit;\n        if (local_variable9 != 1) {\n          temp_result = current_digit_pointer;\n          do {\n            temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),0,0x40240000);\n            digit = __aeabi_d2iz();\n            temp_double = __aeabi_i2d();\n            temp = __subdf3((int)temp,(int)((ulonglong)temp >> 0x20),(int)temp_double,\n                              (int)((ulonglong)temp_double >> 0x20));\n            current_digit_pointer = temp_result + 1;\n            *temp_result = digit + '0';\n            temp_result = current_digit_pointer;\n          } while (current_digit_pointer != result_string + local_variable9);\n        }\n        encoded_exponent_upper32_bits = (undefined4)((ulonglong)temp >> 0x20);\n        temp_double = __aeabi_dadd((int)temp_double,temp2,0,0x3fe00000);\n        index = __aeabi_dcmplt((int)temp_double,(int)((ulonglong)temp_double >> 0x20),(int)temp,encoded_exponent_upper32_bits);\n        if (index == 0) {\n          temp_double = __subdf3(0,0x3fe00000,(int)temp_double,temp2);\n          index = __aeabi_dcmpgt((int)temp_double,(int)((ulonglong)temp_double >> 0x20),(int)temp,encoded_exponent_upper32_bits);\n          temp_result = current_digit_pointer;\n          if (index == 0) goto LAB_08007e36;\n          do {\n            current_digit_pointer = temp_result;\n            temp_result = current_digit_pointer + -1;\n          } while (current_digit_pointer[-1] == '0');\n          goto LAB_08008784;\n        }\n        num_digits = remaining_digits;\n        digit = current_digit_pointer[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    temp = __subdf3(temp_result,local_variable2,0,0x40140000);\n    encoded_exponent_upper32_bits = (undefined4)((ulonglong)temp >> 0x20);\n    exp = __aeabi_dcmpgt((int)temp,encoded_exponent_upper32_bits,temp2,index);\n    if (exp == 0) {\n      index = __aeabi_dcmplt((int)temp,encoded_exponent_upper32_bits,temp2,index + -0x80000000);\n      if (index == 0) goto LAB_08007e36;\n      exp = 0;\n      index = 0;\n      current_digit_pointer = result_string;\n      goto LAB_080084f0;\n    }\n    shift_amount = 0;\n    counter1 = 0;\nLAB_08008406:\n    *result_string = '1';\n    num_digits = num_digits + 1;\n    current_digit_pointer = result_string + 1;\n    exp = counter1;\n    index = shift_amount;\nLAB_08008416:\n    _Bfree(value,index);\n    if (exp == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    current_digit_pointer = result_string;\n    if ((-1 < temp_array[0]) && ((int)num_digits < 0xf)) {\n      temp2 = *(undefined4 *)(&DAT_08009fa8 + num_digits * 8);\n      encoded_exponent_upper32_bits = *(undefined4 *)(&DAT_08009fac + num_digits * 8);\n      if ((-1 < (int)param5) || (0 < (int)local_var5)) {\n        __divdf3(sign,encoded_exponent_lower32_bits,temp2,encoded_exponent_upper32_bits);\n        byte_var = __aeabi_d2iz();\n        temp = __aeabi_i2d();\n        temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),temp2,encoded_exponent_upper32_bits);\n        temp = __subdf3(sign,encoded_exponent_lower32_bits,(int)temp,(int)((ulonglong)temp >> 0x20));\n        *result_string = byte_var + 0x30;\n        current_digit_pointer = result_string + 1;\n        if (local_var5 != 1) {\n          temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),0,0x40240000);\n          index = __aeabi_dcmpeq((int)temp,(int)((ulonglong)temp >> 0x20),0,0);\n          while (index == 0) {\n            temp = (undefined4)((ulonglong)temp >> 0x20);\n            __divdf3((int)temp,temp,temp2,encoded_exponent_upper32_bits);\n            byte_var = __aeabi_d2iz();\n            temp_double = __aeabi_i2d();\n            temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),temp2,encoded_exponent_upper32_bits);\n            temp = __subdf3((int)temp,temp,(int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n            temp_result = current_digit_pointer + 1;\n            *current_digit_pointer = byte_var + 0x30;\n            current_digit_pointer = temp_result;\n            if (local_var5 == (int)temp_result - (int)result_string) goto LAB_08007f3a;\n            temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),0,0x40240000);\n            index = __aeabi_dcmpeq((int)temp,(int)((ulonglong)temp >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        temp = __aeabi_dadd((int)temp,(int)((ulonglong)temp >> 0x20));\n        temp = (undefined4)((ulonglong)temp >> 0x20);\n        index = __aeabi_dcmpgt((int)temp,temp,temp2,encoded_exponent_upper32_bits);\n        if ((index == 0) &&\n           ((index = __aeabi_dcmpeq((int)temp,temp,temp2,encoded_exponent_upper32_bits), index == 0 ||\n            ((byte_var & 1) == 0)))) goto LAB_08008294;\n        digit = current_digit_pointer[-1];\nLAB_08007f7c:\n        while (temp_result = current_digit_pointer + -1, digit == '9') {\n          if (result_string == temp_result) {\n            *result_string = '0';\n            digit = current_digit_pointer[-1];\n            num_digits = num_digits + 1;\n            temp_result = result_string;\n            break;\n          }\n          digit = current_digit_pointer[-2];\n          current_digit_pointer = temp_result;\n        }\n        *temp_result = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_var5 == 0) {\n        temp = __muldf3(temp2,encoded_exponent_upper32_bits,0,0x40140000);\n        div_result = __aeabi_dcmpge((int)temp,(int)((ulonglong)temp >> 0x20),sign,encoded_exponent_lower32_bits);\n        exp = 0;\n        shift_amount = 0;\n        counter1 = 0;\n        index = 0;\n        if (div_result == 0) goto LAB_08008406;\n      }\n      else {\n        exp = 0;\n        index = 0;\n      }\nLAB_080084f0:\n      num_digits = ~param5;\n      result_string = current_digit_pointer;\n      goto LAB_08008416;\n    }\n    index = local_variable7;\n    if (round_up) {\n      if ((int)precision < 2) {\n        if (is_negative) {\n          shift_amount = local_variable4;\n          local_variable4 = local_variable4 + temp_array[0] + 0x433;\n          shift_amount = shift_amount + temp_array[0] + 0x433;\n        }\n        else {\n          shift_amount = local_variable4;\n          local_variable4 = local_variable4 + (0x36 - num_trailing_zeros);\n          shift_amount = shift_amount + (0x36 - num_trailing_zeros);\n        }\n      }\n      else {\n        exp = local_var5 - 1;\n        if (local_variable7 < exp) {\n          local_variable8 = local_variable8 + (exp - local_variable7);\n          index = 0;\n          local_variable7 = exp;\n        }\n        else {\n          index = local_variable7 - exp;\n        }\n        if ((int)local_var5 < 0) {\n          shift_amount = local_variable4 - local_var5;\n        }\n        else {\n          shift_amount = shift_amount + local_var5;\n          shift_amount = local_variable4;\n          local_variable4 = local_variable4 + local_var5;\n        }\n      }\n      exp = __i2b(value,1);\n    }\n    else {\n      shift_amount = local_variable4;\n      exp = 0;\n    }\n    if ((0 < shift_amount) && (0 < shift_amount)) {\n      counter1 = shift_amount;\n      if (shift_amount <= shift_amount) {\n        counter1 = shift_amount;\n      }\n      shift_amount = shift_amount - counter1;\n      local_variable4 = local_variable4 - counter1;\n      shift_amount = shift_amount - counter1;\n    }\n    if (local_variable7 != 0) {\n      if (round_up) {\n        temp2 = result1;\n        if (index != 0) {\n          exp = __pow5mult(value,exp,index);\n          temp2 = __multiply(value,exp,result1);\n          _Bfree(value,result1);\n          result1 = temp2;\n          if (local_variable7 - index == 0) goto LAB_08008062;\n        }\n        result1 = __pow5mult(value,temp2,local_variable7 - index);\n      }\n      else {\n        result1 = __pow5mult(value,result1,local_variable7);\n      }\n    }\nLAB_08008062:\n    index = __i2b(value,1);\n    if (local_variable8 == 0) {\n      if (((int)precision < 2) && (sign == 0)) {\nLAB_0800835a:\n        if ((encoded_exponent_lower32_bits & 0xfffff) == 0) {\n          encoded_exponent_lower32_bits = encoded_exponent_lower32_bits & 0x7ff00000;\n          if (encoded_exponent_lower32_bits != 0) {\n            shift_amount = shift_amount + 1;\n            local_variable4 = local_variable4 + 1;\n            encoded_exponent_lower32_bits = 1;\n          }\n        }\n        else {\n          encoded_exponent_lower32_bits = 0;\n        }\n        is_negative = local_variable8 != 0;\n        abs_exponent = sign;\n        local_variable8 = encoded_exponent_lower32_bits;\n        if (is_negative) goto LAB_080082d4;\n      }\n      counter1 = 1;\n    }\n    else {\n      temp = __pow5mult(value,index);\n      index = (int)temp;\n      if (((int)precision < 2) && (sign == 0)) goto LAB_0800835a;\n      local_variable8 = 0;\n      abs_exponent = (uint)((ulonglong)temp >> 0x20);\nLAB_080082d4:\n      counter1 = __hi0bits(*(undefined4 *)(index + *(int *)(index + 0x10) * 4 + 0x10),abs_exponent);\n      counter1 = 0x20 - counter1;\n    }\n    abs_exponent = counter1 + shift_amount & 0x1f;\n    if (abs_exponent == 0) {\n      counter1 = 0x1c;\nLAB_08008096:\n      shift_amount = shift_amount + counter1;\n      local_variable4 = local_variable4 + counter1;\n      shift_amount = shift_amount + counter1;\n    }\n    else {\n      if (4 < (int)(0x20 - abs_exponent)) {\n        counter1 = 0x1c - abs_exponent;\n        goto LAB_08008096;\n      }\n      if (0x20 - abs_exponent != 4) {\n        counter1 = 0x3c - abs_exponent;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_variable4) {\n      result1 = __lshift(value,result1,local_variable4);\n    }\n    if (0 < shift_amount) {\n      index = __lshift(value,index,shift_amount);\n    }\n    temp_result = result_string;\n    if ((decrement_exponent) && (shift_amount = __mcmp(result1,index), shift_amount < 0)) {\n      num_digits = num_digits - 1;\n      result1 = __multadd(value,result1,10,0);\n      if (round_up) {\n        exp = __multadd(value,exp,10,0);\n        if ((0 < (int)precision) || ((int)precision < 3)) {\n          local_var5 = precision;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)precision) || ((int)precision < 3)) {\n        local_var5 = precision;\n        goto LAB_0800820a;\n      }\n      local_var5 = precision;\nLAB_080084e8:\n      if (local_var5 == 0) {\n        shift_amount = __multadd(value,index,5);\n        div_result = __mcmp(result1,shift_amount);\n        counter1 = exp;\n        index = shift_amount;\n        if (0 < div_result) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_var5 < 1) && (2 < (int)precision)) goto LAB_080084e8;\n    if (round_up) {\nLAB_080080de:\n      temp_result = exp;\n      if (0 < shift_amount) {\n        temp_result = __lshift(value,exp,shift_amount);\n      }\n      exp = temp_result;\n      if (local_variable8 != 0) {\n        exp = _Balloc(value,*(undefined4 *)(temp_result + 4));\n        memcpy(exp + 0xc,temp_result + 0xc,(*(int *)(temp_result + 0x10) + 2) * 4);\n        exp = __lshift(value,exp,1);\n      }\nLAB_08008108:\n      shift_amount = quorem(result1,index);\n      counter1 = __mcmp(result1,temp_result);\n      div_result = __mdiff(value,index,exp);\n      char_code = shift_amount + 0x30;\n      if (*(int *)(div_result + 0xc) == 0) {\n        comparison_result = __mcmp(result1);\n        _Bfree(value,div_result);\n        if ((comparison_result != 0) || (precision != 0)) goto LAB_0800815a;\n        if ((sign & 1) != 0) {\n          comparison_result = 0;\n          goto LAB_0800815a;\n        }\n        if (char_code != 0x39) {\n          if (0 < counter1) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        current_digit_pointer = temp_result + 1;\n        digit = '9';\n        *temp_result = '9';\n        goto LAB_08008268;\n      }\n      _Bfree(value,div_result);\n      comparison_result = 1;\nLAB_0800815a:\n      if ((counter1 < 0) || (((counter1 == 0 && (precision == 0)) && ((sign & 1) == 0)))) {\n        if (0 < comparison_result) {\n          result1 = __lshift(value,result1,1);\n          counter1 = __mcmp(result1,index);\n          if ((0 < counter1) || ((counter1 == 0 && (shift_amount << 0x1f < 0)))) {\n            if (char_code == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            char_code = shift_amount + 0x31;\n          }\n        }\nLAB_080085a4:\n        current_digit_pointer = temp_result + 1;\n        *temp_result = (char)char_code;\n        goto LAB_08008274;\n      }\n      current_digit_pointer = temp_result + 1;\n      if (0 < comparison_result) {\n        if (char_code == 0x39) goto LAB_08008752;\n        *temp_result = (char)shift_amount + '1';\n        goto LAB_08008274;\n      }\n      *temp_result = (char)char_code;\n      if (result_string + (local_var5 - 1) != temp_result) {\n        result1 = __multadd(value,result1,10,0);\n        temp_result = current_digit_pointer;\n        if (temp_result == exp) {\n          temp_result = __multadd(value,temp_result,10,0);\n          exp = temp_result;\n        }\n        else {\n          temp_result = __multadd(value,temp_result,10,0);\n          exp = __multadd(value,exp,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        char_code = quorem(result1,index);\n        char_code = char_code + 0x30;\n        current_digit_pointer = temp_result + 1;\n        *temp_result = (char)char_code;\n        if ((int)local_var5 <= (int)current_digit_pointer - (int)result_string) break;\n        result1 = __multadd(value,result1,10,0);\n        temp_result = current_digit_pointer;\n      }\n      temp_result = 0;\n    }\n    result1 = __lshift(value,result1,1);\n    shift_amount = __mcmp(result1,index);\n    digit = current_digit_pointer[-1];\n    if ((0 < shift_amount) || ((shift_amount == 0 && (char_code << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        temp_result = current_digit_pointer + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (result_string == temp_result) {\n          *result_string = '1';\n          num_digits = num_digits + 1;\n          goto LAB_08008274;\n        }\n        digit = current_digit_pointer[-2];\n        current_digit_pointer = temp_result;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = current_digit_pointer[-2];\n      current_digit_pointer = current_digit_pointer + -1;\n    }\nLAB_08008274:\n    _Bfree(value,index);\n    if (exp == 0) goto LAB_08008294;\n    if ((temp_result != 0) && (temp_result != exp)) {\n      _Bfree(value);\n    }\n  }\n  _Bfree(value,exp);\nLAB_08008294:\n  _Bfree(value,result1);\n  *current_digit_pointer = '\\0';\n  *length = num_digits + 1;\n  if (result == (char **)0x0) {\n    return result_string;\n  }\n  *result = current_digit_pointer;\n  return result_string;\ncode_r0x08008270:\n  *temp_result = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "current_name": "convert_float_to_string_080079e8",
            "entrypoint": "0x080079e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "bVar1": "is_infinity",
                "bVar2": "decrement_exponent",
                "bVar25": "is_negative",
                "bVar3": "round_up",
                "bVar5": "byte_var",
                "cVar4": "digit",
                "iVar14": "index",
                "iVar15": "shift_amount",
                "iVar19": "exp",
                "iVar24": "char_code",
                "iVar7": "counter1",
                "iVar8": "comparison_result",
                "iVar9": "div_result",
                "local_2c": "temp_array",
                "local_30": "num_trailing_zeros",
                "local_34": "remaining_digits",
                "local_38": "precision",
                "local_4": "local_var20",
                "local_48": "local_variable9",
                "local_58": "local_variable8",
                "local_5c": "local_variable7",
                "local_60": "shift_amount",
                "local_68": "local_var5",
                "local_70": "local_variable4",
                "local_74": "num_digits",
                "local_7c": "local_variable2",
                "local_8": "local_var19",
                "local_80": "temp_result",
                "param_1": "value",
                "param_2": "flags",
                "param_3": "sign",
                "param_4": "exponent",
                "param_5": "precision",
                "param_6": "param5",
                "param_7": "length",
                "param_8": "is_negative",
                "param_9": "result",
                "pcVar10": "result_string",
                "pcVar20": "temp_result",
                "pcVar21": "current_digit_pointer",
                "puVar22": "pow5",
                "uStack_44": "long_divisor_upper32_bits",
                "uVar11": "result2",
                "uVar12": "temp1",
                "uVar13": "temp2",
                "uVar16": "encoded_exponent_upper32_bits",
                "uVar17": "encoded_exponent_lower32_bits",
                "uVar18": "abs_exponent",
                "uVar22": "b_hi",
                "uVar23": "temp",
                "uVar26": "temp",
                "uVar27": "temp_double",
                "uVar28": "temp_double",
                "uVar6": "result1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800884c": {
            "additional_data": {
                "0xf": {
                    "1": "magic_number_3"
                },
                "0xfef": {
                    "1": "magic_number_1"
                },
                "0xfff": {
                    "1": "magic_number_2"
                },
                "0xfffff000": {
                    "1": "alignment_mask_1"
                },
                "DAT_20000454": {
                    "1": "base_pointer",
                    "2": "heap_start_address",
                    "5": "base_address",
                    "6": "heap_start"
                },
                "DAT_20000854": {
                    "1": "heap_offset"
                },
                "DAT_20000a14": {
                    "1": "previous_allocated",
                    "2": "total_allocated_size",
                    "4": "total_allocated"
                },
                "FUN_0800884c": {
                    "1": "resize_memory",
                    "2": "allocate_memory_chunk",
                    "21": "allocate_memory",
                    "7": "allocate_memory_block"
                },
                "FUN_080090a8": {
                    "1": "initialize_func2"
                },
                "FUN_080090b4": {
                    "1": "decrement_free_count"
                },
                "FUN_08009744": {
                    "1": "reverse_param"
                },
                "__malloc_lock": {
                    "1": "acquire_memory_lock",
                    "2": "acquire_lock",
                    "3": "lock_memory"
                },
                "__malloc_unlock": {
                    "1": "unlock_heap",
                    "2": "release_lock",
                    "3": "unlock_memory"
                },
                "_malloc_lock": {
                    "1": "lock_memory_allocation"
                },
                "_malloc_unlock": {
                    "1": "unlock_memory_allocation"
                },
                "_sbrk_r": {
                    "1": "decrement_heap",
                    "2": "sbrk_wrapper",
                    "5": "increase_heap_size"
                },
                "iVar1": {
                    "1": "mem_alloc",
                    "11": "result",
                    "2": "allocation_result",
                    "5": "brk_result",
                    "8": "sbrk_result"
                },
                "iVar2": {
                    "1": "result_2",
                    "2": "allocated_size",
                    "5": "aligned_address"
                },
                "int param_2": {
                    "1": "alignment"
                },
                "malloc_lock": {
                    "1": "lock_memory"
                },
                "malloc_unlock": {
                    "1": "unlock_memory"
                },
                "memset": {
                    "1": "initialize_memory_zero"
                },
                "param_1": {
                    "1": "mutex",
                    "11": "lock",
                    "2": "lock_flag",
                    "7": "size"
                },
                "param_2": {
                    "1": "size_param",
                    "12": "size",
                    "6": "requested_size",
                    "7": "alignment"
                },
                "uVar3": {
                    "1": "size_copy",
                    "2": "page_mask",
                    "3": "header",
                    "4": "allocated_size"
                },
                "undefined4 param_1": {
                    "1": "mem_size"
                }
            },
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_080088ec"
            ],
            "code": "\nundefined4 allocate_memory_0800884c(undefined4 lock,int size)\n\n{\n  int result;\n  int adjusted_address;\n  uint allocated_size;\n  \n  lock_memory();\n  allocated_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_address = ((0xfef - size) + allocated_size & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_address) {\n    result = increase_heap_size(lock,0);\n    if (result == DAT_20000454 + allocated_size) {\n      result = increase_heap_size(lock,-adjusted_address);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_address;\n        *(uint *)(DAT_20000454 + 4) = allocated_size - adjusted_address | 1;\n        unlock_memory(lock);\n        return 1;\n      }\n      adjusted_address = increase_heap_size(lock,0);\n      if (0xf < adjusted_address - DAT_20000454) {\n        DAT_20000a14 = adjusted_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  unlock_memory(lock);\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_0800884c",
            "entrypoint": "0x0800884c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_malloc_lock": "lock_memory",
                "_malloc_unlock": "unlock_memory",
                "_sbrk_r": "increase_heap_size",
                "iVar1": "result",
                "iVar2": "adjusted_address",
                "malloc_lock": "lock_memory",
                "malloc_unlock": "unlock_memory",
                "param_1": "lock",
                "param_2": "size",
                "uVar3": "allocated_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080088ec": {
            "additional_data": {
                "DAT_20000444": {
                    "1": "last_small_bin_entry"
                },
                "DAT_2000044c": {
                    "1": "small_bins"
                },
                "DAT_20000450": {
                    "1": "small_bin_mask"
                },
                "DAT_20000454": {
                    "1": "first_mem_block"
                },
                "DAT_2000045c": {
                    "1": "bins"
                },
                "DAT_20000460": {
                    "1": "small_bin_tail"
                },
                "DAT_20000858": {
                    "2": "trim_threshold"
                },
                "DAT_20000a44": {
                    "1": "top_pad"
                },
                "FUN_0800884c": {
                    "1": "realloc_memory"
                },
                "FUN_080088ec": {
                    "1": "improved_memory_management",
                    "11": "deallocate_memory",
                    "3": "reallocate_memory",
                    "4": "deallocate_memory_block"
                },
                "FUN_080090a8": {
                    "1": "function2"
                },
                "FUN_080090b4": {
                    "1": "function1"
                },
                "__malloc_lock": {
                    "1": "lock_memory"
                },
                "__malloc_unlock": {
                    "1": "unlock_memory"
                },
                "_malloc_trim_r": {
                    "1": "trim_memory"
                },
                "iVar1": {
                    "1": "previous_block_size",
                    "2": "size_index",
                    "22": "index"
                },
                "iVar10": {
                    "1": "i_var",
                    "2": "size_index",
                    "3": "bin_index",
                    "4": "count",
                    "6": "block_index"
                },
                "int param_2": {
                    "1": "ptr"
                },
                "param_1": {
                    "1": "mutex",
                    "2": "memory_lock",
                    "3": "param_1",
                    "5": "param1",
                    "7": "lock"
                },
                "param_2": {
                    "1": "old_block_address",
                    "2": "block",
                    "3": "arg2",
                    "4": "param2",
                    "6": "memory_block",
                    "8": "ptr"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "unknown_param",
                    "3": "arg3",
                    "7": "param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "info",
                    "3": "arg4",
                    "7": "param4",
                    "8": "param_4"
                },
                "puVar2": {
                    "1": "block_ptr",
                    "2": "chunk",
                    "4": "current_block",
                    "7": "ptr1"
                },
                "puVar3": {
                    "1": "next_mem_block_ptr",
                    "3": "next_chunk",
                    "4": "current_block",
                    "6": "next_block",
                    "7": "ptr2"
                },
                "puVar4": {
                    "1": "temp_pointer",
                    "2": "block",
                    "3": "temp_ptr",
                    "7": "ptr3"
                },
                "puVar7": {
                    "1": "pointer_4",
                    "2": "prev_ptr",
                    "3": "next_block",
                    "7": "ptr4"
                },
                "puVar8": {
                    "1": "pointer_3",
                    "2": "prev_block",
                    "3": "next",
                    "7": "ptr5"
                },
                "puVar9": {
                    "1": "meta_ptr",
                    "7": "ptr6"
                },
                "uVar11": {
                    "1": "header_flag",
                    "2": "current_size",
                    "5": "flag1",
                    "6": "flag"
                },
                "uVar12": {
                    "1": "coalesced_block",
                    "4": "temp",
                    "6": "flag2"
                },
                "uVar5": {
                    "1": "length",
                    "13": "block_size",
                    "4": "size1",
                    "8": "size"
                },
                "uVar6": {
                    "1": "offset",
                    "2": "block_size",
                    "3": "next_size",
                    "4": "size2",
                    "7": "next_block_size"
                },
                "undefined4 param_1": {
                    "1": "mem_lock"
                },
                "undefined4 param_3": {
                    "1": "mem_unlock"
                },
                "undefined4 param_4": {
                    "1": "unused_param"
                }
            },
            "called": [
                "FUN_0800884c",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_08008af8",
                "FUN_080097cc",
                "FUN_08005e9c",
                "FUN_08009adc"
            ],
            "code": "\nvoid deallocate_memory_080088ec(undefined4 lock,int ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint *ptr1;\n  uint *ptr2;\n  undefined *ptr3;\n  uint block_size;\n  uint next_block_size;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined4 *ptr6;\n  int block_index;\n  uint flag;\n  uint flag2;\n  \n  if (ptr == 0) {\n    return;\n  }\n  lock_memory();\n  flag = *(uint *)(ptr + -4);\n  ptr1 = (uint *)(ptr + -8);\n  block_size = flag & 0xfffffffe;\n  ptr2 = (uint *)((int)ptr1 + block_size);\n  next_block_size = ptr2[1] & 0xfffffffc;\n  if (DAT_20000454 == ptr2) {\n    block_size = block_size + next_block_size;\n    if ((flag & 1) == 0) {\n      ptr1 = (uint *)((int)ptr1 - *(int *)(ptr + -8));\n      next_block_size = ptr1[2];\n      flag = ptr1[3];\n      block_size = block_size + *(int *)(ptr + -8);\n      *(uint *)(next_block_size + 0xc) = flag;\n      *(uint *)(flag + 8) = next_block_size;\n    }\n    next_block_size = DAT_20000858;\n    ptr1[1] = block_size | 1;\n    DAT_20000454 = ptr1;\n    if (next_block_size <= block_size) {\n      trim_memory(lock,DAT_20000a44);\n    }\nLAB_080089f0:\n    unlock_memory(lock);\n    return;\n  }\n  ptr2[1] = next_block_size;\n  if ((flag & 1) == 0) {\n    ptr1 = (uint *)((int)ptr1 - *(int *)(ptr + -8));\n    ptr6 = (undefined4 *)ptr1[2];\n    block_size = block_size + *(int *)(ptr + -8);\n    flag = *(uint *)((int)ptr2 + next_block_size + 4) & 1;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      if (flag == 0) {\n        flag = ptr2[2];\n        flag2 = ptr2[3];\n        block_size = block_size + next_block_size;\n        *(uint *)(flag + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag;\n        ptr1[1] = block_size | 1;\n        *(uint *)((int)ptr1 + block_size) = block_size;\n      }\n      else {\n        ptr1[1] = block_size | 1;\n        *ptr2 = block_size;\n      }\n      goto LAB_080089f0;\n    }\n    flag2 = ptr1[3];\n    ptr6[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = ptr6;\n  }\n  else {\n    flag = *(uint *)((int)ptr2 + next_block_size + 4) & 1;\n  }\n  if (flag == 0) {\n    ptr6 = (undefined4 *)ptr2[2];\n    block_size = block_size + next_block_size;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      DAT_2000045c = ptr1;\n      DAT_20000460 = ptr1;\n      ptr1[2] = (uint)&DAT_20000454;\n      ptr1[3] = (uint)&DAT_20000454;\n      ptr1[1] = block_size | 1;\n      *(uint *)((int)ptr1 + block_size) = block_size;\n      goto LAB_080089f0;\n    }\n    next_block_size = ptr2[3];\n    ptr6[3] = next_block_size;\n    *(undefined4 **)(next_block_size + 8) = ptr6;\n    ptr1[1] = block_size | 1;\n    *(uint *)((int)ptr1 + block_size) = block_size;\n  }\n  else {\n    ptr1[1] = block_size | 1;\n    *(uint *)((int)ptr1 + block_size) = block_size;\n  }\n  if (block_size < 0x200) {\n    block_index = (block_size >> 3) + 1;\n    block_size = 1 << ((int)(block_size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    next_block_size = *(uint *)(&DAT_2000044c + block_index * 8);\n    ptr1[2] = next_block_size;\n    ptr1[3] = (uint)(&DAT_20000444 + block_index * 8);\n    DAT_20000450 = (undefined *)block_size;\n    *(uint **)(&DAT_2000044c + block_index * 8) = ptr1;\n    *(uint **)(next_block_size + 0xc) = ptr1;\n    unlock_memory(lock,ptr1,block_size,param_4);\n    return;\n  }\n  next_block_size = block_size >> 9;\n  if (next_block_size < 5) {\n    block_index = ((block_size >> 6) + 0x39) * 8;\n    index = (block_size >> 6) + 0x38;\n  }\n  else if (next_block_size < 0x15) {\n    block_index = (next_block_size + 0x5c) * 8;\n    index = next_block_size + 0x5b;\n  }\n  else if (next_block_size < 0x55) {\n    block_index = ((block_size >> 0xc) + 0x6f) * 8;\n    index = (block_size >> 0xc) + 0x6e;\n  }\n  else if (next_block_size < 0x155) {\n    block_index = ((block_size >> 0xf) + 0x78) * 8;\n    index = (block_size >> 0xf) + 0x77;\n  }\n  else if (next_block_size < 0x555) {\n    block_index = ((block_size >> 0x12) + 0x7d) * 8;\n    index = (block_size >> 0x12) + 0x7c;\n  }\n  else {\n    block_index = 0x3f8;\n    index = 0x7e;\n  }\n  ptr3 = *(undefined **)(&DAT_2000044c + block_index);\n  ptr4 = &DAT_20000444 + block_index;\n  if (ptr4 == ptr3) {\n    ptr3 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    ptr5 = ptr4;\n    DAT_20000450 = ptr3;\n  }\n  else {\n    do {\n      ptr5 = ptr3;\n      if ((*(uint *)(ptr3 + 4) & 0xfffffffc) <= block_size) break;\n      ptr3 = *(undefined **)(ptr3 + 8);\n      ptr5 = ptr4;\n    } while (ptr4 != ptr3);\n    ptr4 = *(undefined **)(ptr5 + 0xc);\n  }\n  ptr1[2] = (uint)ptr5;\n  ptr1[3] = (uint)ptr4;\n  *(uint **)(ptr4 + 8) = ptr1;\n  *(uint **)(ptr5 + 0xc) = ptr1;\n  unlock_memory(lock,ptr1,ptr3,param_4);\n  return;\n}\n\n",
            "current_name": "deallocate_memory_080088ec",
            "entrypoint": "0x080088ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080088ec": "deallocate_memory_080088ec",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_malloc_trim_r": "trim_memory",
                "iVar1": "index",
                "iVar10": "block_index",
                "param_1": "lock",
                "param_2": "ptr",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "puVar7": "ptr4",
                "puVar8": "ptr5",
                "puVar9": "ptr6",
                "uVar11": "flag",
                "uVar12": "flag2",
                "uVar5": "block_size",
                "uVar6": "next_block_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "additional_data": {
                "0": {
                    "1": "base_address"
                },
                "0x2000001c": {
                    "1": "base_address"
                },
                "0x2000085c": {
                    "1": "default_address_offset",
                    "3": "default_address",
                    "8": "default_value"
                },
                "0x34": {
                    "1": "offset_address",
                    "5": "offset"
                },
                "0xf0": {
                    "1": "offset",
                    "2": "additional_offset"
                },
                "DAT_2000001c": {
                    "1": "data_address",
                    "3": "data"
                },
                "FUN_08008ad4": {
                    "1": "get_adjusted_value",
                    "2": "calculate_updated_value",
                    "3": "get_updated_value",
                    "8": "calculate_adjusted_value"
                },
                "F_08008ad4": {
                    "1": "get_updated_value"
                },
                "iVar1": {
                    "1": "result",
                    "14": "value",
                    "2": "current_address",
                    "6": "current_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nint calculate_adjusted_value_08008ad4(void)\n\n{\n  int value;\n  \n  value = *(int *)(DAT_2000001c + 0x34);\n  if (value == 0) {\n    value = 0x2000085c;\n  }\n  return value + 0xf0;\n}\n\n",
            "current_name": "calculate_adjusted_value_08008ad4",
            "entrypoint": "0x08008ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ad4": "calculate_adjusted_value_08008ad4",
                "iVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "called": [],
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af4": {
            "called": [],
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af4",
            "entrypoint": "0x08008af4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af8": {
            "additional_data": {
                "DAT_20000450": {
                    "1": "max_alloc_size"
                },
                "DAT_20000454": {
                    "1": "heap_ptr"
                },
                "DAT_20000458": {
                    "1": "merge_chunk_ptr"
                },
                "DAT_2000045c": {
                    "1": "split_chunk_ptr"
                },
                "DAT_20000460": {
                    "1": "split_chunk_ptr"
                },
                "DAT_200006a0": {
                    "1": "realloc_ptr"
                },
                "DAT_20000854": {
                    "1": "sbrk_ptr"
                },
                "DAT_20000a14": {
                    "1": "break_ptr"
                },
                "DAT_20000a40": {
                    "1": "max_break_ptr"
                },
                "DAT_20000a44": {
                    "1": "page_size"
                },
                "FUN_080088ec": {
                    "1": "unlock_heap"
                },
                "FUN_08008af8": {
                    "1": "malloc_and_lock",
                    "30": "allocate_memory"
                },
                "FUN_080090a8": {
                    "1": "extend_heap"
                },
                "FUN_080090b4": {
                    "1": "lock_heap"
                },
                "FUN_08009744": {
                    "1": "coalesce_blocks"
                },
                "iVar14": {
                    "1": "brk_status",
                    "2": "prev_index"
                },
                "iVar4": {
                    "1": "block_size",
                    "2": "temp3",
                    "3": "offset",
                    "8": "index"
                },
                "int *piVar11": {
                    "1": "block_ptr_result"
                },
                "int iVar14": {
                    "1": "block_next_ptr"
                },
                "int iVar4": {
                    "1": "block_size"
                },
                "param_1": {
                    "1": "param_1",
                    "2": "result",
                    "3": "lock_ptr",
                    "6": "lock"
                },
                "param_2": {
                    "1": "block_size",
                    "27": "size"
                },
                "piVar11": {
                    "1": "result_pointer",
                    "13": "result",
                    "2": "result_ptr",
                    "4": "allocated_block"
                },
                "puVar1": {
                    "1": "brk_result",
                    "3": "current_block",
                    "6": "ptr"
                },
                "puVar10": {
                    "1": "temp_ptr_2",
                    "2": "ptr",
                    "3": "block_ptr",
                    "4": "block",
                    "5": "ptr5"
                },
                "puVar15": {
                    "1": "header",
                    "2": "block_ptr",
                    "3": "new_block",
                    "4": "ptr6"
                },
                "puVar16": {
                    "1": "tmp_ptr3",
                    "2": "prev_block",
                    "4": "ptr7"
                },
                "puVar5": {
                    "1": "free_pointer2",
                    "2": "current_block",
                    "6": "ptr2"
                },
                "puVar8": {
                    "1": "pointer_3",
                    "2": "prev_block",
                    "5": "ptr3"
                },
                "puVar9": {
                    "1": "brk",
                    "2": "next_block",
                    "3": "new_block",
                    "5": "ptr4"
                },
                "uVar12": {
                    "1": "block_size",
                    "15": "adjusted_size"
                },
                "uVar13": {
                    "1": "block_size",
                    "11": "aligned_size",
                    "2": "adjusted_size_aligned"
                },
                "uVar2": {
                    "1": "brk_difference",
                    "2": "temp1",
                    "3": "var1"
                },
                "uVar3": {
                    "1": "block_size",
                    "2": "difference",
                    "3": "var2"
                },
                "uVar6": {
                    "1": "temp_val_3",
                    "2": "temp4",
                    "3": "var4"
                },
                "uVar7": {
                    "1": "variable_5",
                    "2": "prev_block_size",
                    "3": "var5"
                },
                "uart_val": {
                    "1": "brk_val"
                },
                "uint param_2": {
                    "1": "unaligned_size"
                },
                "uint uVar12": {
                    "1": "aligned_remaining_size"
                },
                "uint uVar13": {
                    "1": "aligned_remaining_size_tmp"
                },
                "uint uVar2": {
                    "1": "aligned_size"
                },
                "uint uVar3": {
                    "1": "aligned_size_tmp"
                },
                "uint uVar6": {
                    "1": "block_size_tmp"
                },
                "uint uVar7": {
                    "1": "block_size_tmp2"
                },
                "undefined *puVar1": {
                    "1": "aligned_heap_ptr"
                },
                "undefined *puVar10": {
                    "1": "block_ptr"
                },
                "undefined *puVar5": {
                    "1": "current_block_ptr"
                },
                "undefined *puVar9": {
                    "1": "sbrk_result"
                },
                "undefined4 *param_1": {
                    "1": "size"
                },
                "undefined4 *puVar15": {
                    "1": "aligned_next_block_ptr"
                },
                "undefined4 *puVar16": {
                    "1": "aligned_prev_block_ptr"
                },
                "undefined4 *puVar8": {
                    "1": "aligned_block_ptr"
                }
            },
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_08009980",
                "FUN_080097cc",
                "FUN_08005e9c",
                "FUN_08009adc"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *lock,uint size)\n\n{\n  undefined *ptr;\n  uint index;\n  uint var2;\n  int index;\n  undefined *ptr2;\n  uint block_size;\n  uint var5;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result;\n  uint adjusted_size;\n  uint aligned_size;\n  int prev_index;\n  undefined4 *ptr6;\n  undefined4 *ptr7;\n  \n  adjusted_size = size + 0xb;\n  if (adjusted_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    __malloc_lock();\n    aligned_size = 0x10;\n    index = 0x18;\n    adjusted_size = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index);\n    if ((ptr5 != &DAT_20000444 + index) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index), &DAT_2000044c + index != ptr5)) {\n      index = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      adjusted_size = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      prev_index = *(int *)(ptr5 + 8);\n      *(int *)(prev_index + 0xc) = index;\n      *(int *)(index + 8) = prev_index;\n      *(uint *)(ptr2 + 4) = adjusted_size | 1;\n      __malloc_unlock(lock);\n      return (int *)(ptr5 + 8);\n    }\n    adjusted_size = adjusted_size + 2;\n  }\n  else {\n    aligned_size = adjusted_size & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_08008c7a:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (aligned_size < 0x1f8) {\n      adjusted_size = adjusted_size >> 3;\n      index = aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    index = adjusted_size >> 9;\n    if (index == 0) {\n      index = 0x200;\n      block_size = 0x40;\n      index = 0x3f;\n    }\n    else if (index < 5) {\n      block_size = (adjusted_size >> 6) + 0x39;\n      index = (adjusted_size >> 6) + 0x38;\n      index = block_size * 8;\n    }\n    else if (index < 0x15) {\n      block_size = index + 0x5c;\n      index = index + 0x5b;\n      index = block_size * 8;\n    }\n    else if (index < 0x55) {\n      block_size = (adjusted_size >> 0xc) + 0x6f;\n      index = (adjusted_size >> 0xc) + 0x6e;\n      index = block_size * 8;\n    }\n    else if (index < 0x155) {\n      block_size = (adjusted_size >> 0xf) + 0x78;\n      index = (adjusted_size >> 0xf) + 0x77;\n      index = block_size * 8;\n    }\n    else if (index < 0x555) {\n      block_size = (adjusted_size >> 0x12) + 0x7d;\n      index = (adjusted_size >> 0x12) + 0x7c;\n      index = block_size * 8;\n    }\n    else {\n      index = 0x3f8;\n      block_size = 0x7f;\n      index = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index); adjusted_size = block_size,\n        &DAT_20000444 + index != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      prev_index = (*(uint *)(ptr5 + 4) & 0xfffffffc) - aligned_size;\n      adjusted_size = index;\n      if (0xf < prev_index) break;\n      if (-1 < prev_index) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        adjusted_size = *(uint *)(ptr2 + 4);\n        index = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    block_size = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    index = DAT_20000450;\n    if (block_size <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    block_size = DAT_2000045c[1];\n    var5 = block_size & 0xfffffffc;\n    index = var5 - aligned_size;\n    if (0xf < (int)index) {\n      ptr7 = (undefined4 *)(aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = aligned_size | 1;\n      DAT_2000045c = ptr7;\n      DAT_20000460 = ptr7;\n      ptr7[2] = &DAT_20000454;\n      ptr7[3] = &DAT_20000454;\n      ptr7[1] = index | 1;\n      *(uint *)((int)ptr6 + var5) = index;\n      __malloc_unlock(lock);\n      return ptr6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)index) {\n      *(uint *)((int)ptr6 + var5 + 4) = *(uint *)((int)ptr6 + var5 + 4) | 1;\n      __malloc_unlock(lock);\n      return ptr6 + 2;\n    }\n    if (var5 < 0x200) {\n      index = (block_size >> 3) + 1;\n      prev_index = *(int *)(&DAT_2000044c + index * 8);\n      index = 1 << ((int)(block_size >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr6[2] = prev_index;\n      ptr6[3] = &DAT_20000444 + index * 8;\n      DAT_20000450 = index;\n      *(undefined4 **)(&DAT_2000044c + index * 8) = ptr6;\n      *(undefined4 **)(prev_index + 0xc) = ptr6;\n    }\n    else {\n      index = block_size >> 9;\n      if (index < 5) {\n        index = ((block_size >> 6) + 0x39) * 8;\n        prev_index = (block_size >> 6) + 0x38;\n      }\n      else if (index < 0x15) {\n        index = (index + 0x5c) * 8;\n        prev_index = index + 0x5b;\n      }\n      else if (index < 0x55) {\n        index = ((block_size >> 0xc) + 0x6f) * 8;\n        prev_index = (block_size >> 0xc) + 0x6e;\n      }\n      else if (index < 0x155) {\n        index = ((block_size >> 0xf) + 0x78) * 8;\n        prev_index = (block_size >> 0xf) + 0x77;\n      }\n      else if (index < 0x555) {\n        index = ((block_size >> 0x12) + 0x7d) * 8;\n        prev_index = (block_size >> 0x12) + 0x7c;\n      }\n      else {\n        index = 0x3f8;\n        prev_index = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index);\n      ptr2 = &DAT_20000444 + index;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (prev_index >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= var5) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      index = DAT_20000450;\n      ptr6[2] = ptr5;\n      ptr6[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = ptr6;\n      *(undefined4 **)(ptr5 + 0xc) = ptr6;\n    }\n    block_size = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    if (block_size <= index) {\nLAB_08008c06:\n      if ((block_size & index) == 0) {\n        adjusted_size = adjusted_size & 0xfffffffc;\n        do {\n          block_size = block_size << 1;\n          adjusted_size = adjusted_size + 4;\n        } while ((block_size & index) == 0);\n      }\n      do {\n        ptr7 = (undefined4 *)(&DAT_2000044c + adjusted_size * 8);\n        index = adjusted_size;\n        ptr6 = ptr7;\n        do {\n          for (ptr3 = (undefined4 *)ptr6[3]; ptr6 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            var5 = ptr3[1] & 0xfffffffc;\n            var2 = var5 - aligned_size;\n            if (0xf < (int)var2) {\n              prev_index = ptr3[2];\n              index = ptr3[3];\n              ptr6 = (undefined4 *)(aligned_size + (int)ptr3);\n              ptr3[1] = aligned_size | 1;\n              *(int *)(prev_index + 0xc) = index;\n              *(int *)(index + 8) = prev_index;\n              DAT_2000045c = ptr6;\n              DAT_20000460 = ptr6;\n              ptr6[2] = &DAT_20000454;\n              ptr6[3] = &DAT_20000454;\n              ptr6[1] = var2 | 1;\n              *(uint *)((int)ptr3 + var5) = var2;\n              __malloc_unlock(lock);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)var2) {\n              index = ptr3[3];\n              prev_index = ptr3[2];\n              *(uint *)((int)ptr3 + var5 + 4) = *(uint *)((int)ptr3 + var5 + 4) | 1;\n              *(int *)(prev_index + 0xc) = index;\n              *(int *)(index + 8) = prev_index;\n              __malloc_unlock(lock);\n              return ptr3 + 2;\n            }\n          }\n          index = index + 1;\n          ptr6 = ptr6 + 2;\n        } while ((index & 3) != 0);\n        do {\n          var5 = adjusted_size & 3;\n          ptr6 = ptr7 + -2;\n          adjusted_size = adjusted_size - 1;\n          if (var5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~block_size;\n            break;\n          }\n          ptr7 = (undefined4 *)*ptr7;\n        } while (ptr7 == ptr6);\n        block_size = block_size * 2;\n        if ((DAT_20000450 <= block_size && block_size - DAT_20000450 != 0) || (adjusted_size = index, block_size == 0))\n        break;\n        for (; (block_size & DAT_20000450) == 0; block_size = block_size << 1) {\n          adjusted_size = adjusted_size + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  adjusted_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((aligned_size <= adjusted_size) && (index = adjusted_size - aligned_size, 0xf < (int)index)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    index = aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    index = aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)_sbrk_r(lock,index);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr = ptr5 + adjusted_size;\n    if (ptr < ptr2 || ptr == ptr2) {\n      ptr4 = DAT_20000a14 + index;\n      if ((ptr != ptr2) || (((uint)ptr & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = adjusted_size + index | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + index;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      block_size = (uint)ptr2 & 7;\n      if (block_size == 0) {\n        index = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - block_size);\n        index = 0x1008 - block_size;\n      }\n      index = index - ((uint)(ptr2 + index) & 0xfff);\n      prev_index = _sbrk_r(lock,index);\n      if (prev_index == -1) {\n        index = 1;\n        index = 0;\n      }\n      else {\n        index = (prev_index - (int)ptr2) + index | 1;\n      }\n      ptr4 = DAT_20000a14 + index;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = index;\n      if (ptr5 != &DAT_2000044c) {\n        if (adjusted_size < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        adjusted_size = adjusted_size - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | adjusted_size;\n        *(undefined4 *)(ptr5 + adjusted_size + 4) = 5;\n        *(undefined4 *)(ptr5 + adjusted_size + 8) = 5;\n        if (0xf < adjusted_size) {\n          _free_r(lock,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  index = (adjusted_size & 0xfffffffc) - aligned_size;\n  if ((aligned_size <= (adjusted_size & 0xfffffffc)) && (0xf < (int)index)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + aligned_size;\n    *(uint *)(DAT_20000454 + 4) = aligned_size | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = index | 1;\n    __malloc_unlock(lock);\n    return result;\n  }\nLAB_08008eee:\n  __malloc_unlock(lock);\n  return (int *)0x0;\n}\n\n",
            "current_name": "allocate_memory_08008af8",
            "entrypoint": "0x08008af8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "iVar14": "prev_index",
                "iVar4": "index",
                "param_1": "lock",
                "param_2": "size",
                "piVar11": "result",
                "puVar1": "ptr",
                "puVar10": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar5": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar12": "adjusted_size",
                "uVar13": "aligned_size",
                "uVar2": "index",
                "uVar3": "var2",
                "uVar6": "block_size",
                "uVar7": "var5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800901c": {
            "additional_data": {
                "FUN_0800901c": {
                    "1": "find_target_value",
                    "11": "find_byte_sequence",
                    "2": "find_byte_in_array",
                    "4": "find_first_occurrence"
                },
                "LAB_0800904a": {
                    "1": "continue_loop"
                },
                "LAB_08009050": {
                    "1": "element_found"
                },
                "LAB_0800906c": {
                    "1": "no_occurrence"
                },
                "bVar5": {
                    "1": "is_array_empty",
                    "2": "is_end_of_search",
                    "3": "is_empty",
                    "4": "is_end"
                },
                "inputArray": {
                    "1": "output_array"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "byte_array",
                    "3": "input_array",
                    "4": "buffer",
                    "8": "data",
                    "9": "array"
                },
                "param_2": {
                    "1": "pattern",
                    "2": "length",
                    "3": "byte",
                    "4": "search_byte",
                    "7": "byte_to_find"
                },
                "param_3": {
                    "1": "input_size",
                    "2": "array_size",
                    "3": "size",
                    "4": "buffer_size",
                    "7": "length",
                    "8": "array_length"
                },
                "puVar3": {
                    "1": "ptr_data",
                    "3": "ptr",
                    "6": "current_element",
                    "7": "current_byte"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "10": "xor_result",
                    "2": "temp1",
                    "5": "result"
                },
                "uVar2": {
                    "1": "byte_sequence",
                    "2": "temp2",
                    "3": "temp",
                    "5": "combined_value"
                },
                "uVar4": {
                    "1": "first_byte",
                    "12": "masked_byte",
                    "2": "masked_search_byte",
                    "5": "search_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nuint * find_byte_sequence_0800901c(uint *array,uint byte_to_find,uint array_length)\n\n{\n  uint xor_result;\n  uint combined_byte;\n  uint *current_byte;\n  uint masked_byte;\n  bool is_end;\n  \n  masked_byte = byte_to_find & 0xff;\n  if (((uint)array & 3) == 0) {\nstart_loop:\n    if (3 < array_length) {\n      combined_byte = (byte_to_find & 0xff) << 8 | masked_byte;\n      current_byte = array;\n      do {\n        xor_result = *current_byte ^ (combined_byte | combined_byte << 0x10);\n        array = current_byte + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto element_found;\n        array_length = array_length - 4;\n        current_byte = array;\n      } while (3 < array_length);\n    }\n    current_byte = array;\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else {\nelement_found:\n      array = current_byte;\n      if (*(byte *)array != masked_byte) {\n        current_byte = (uint *)(array_length + (int)array);\n        do {\n          array = (uint *)((int)array + 1);\n          if (current_byte == array) goto not_found;\n        } while (*(byte *)array != masked_byte);\n      }\n    }\n  }\n  else {\n    combined_byte = array_length - 1;\n    if (array_length == 0) {\nnot_found:\n      array = (uint *)0x0;\n    }\n    else if (*(byte *)array != masked_byte) {\n      current_byte = (uint *)((int)array + 1);\n      do {\n        array = current_byte;\n        array_length = combined_byte;\n        if (((uint)array & 3) == 0) goto start_loop;\n        is_end = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_end) goto not_found;\n        current_byte = (uint *)((int)array + 1);\n      } while (*(byte *)array != masked_byte);\n    }\n  }\n  return array;\n}\n\n",
            "current_name": "find_byte_sequence_0800901c",
            "entrypoint": "0x0800901c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "LAB_0800904a": "start_loop",
                "LAB_08009050": "element_found",
                "LAB_0800906c": "not_found",
                "bVar5": "is_end",
                "param_1": "array",
                "param_2": "byte_to_find",
                "param_3": "array_length",
                "puVar3": "current_byte",
                "uVar1": "xor_result",
                "uVar2": "combined_byte",
                "uVar4": "masked_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090a8": {
            "additional_data": {
                "FUNC_08008af0": {
                    "1": "refresh_function",
                    "2": "initialize",
                    "4": "initialize_function",
                    "6": "do_something"
                },
                "FUN_080090a8": {
                    "2": "acquire_lock_recursive",
                    "26": "acquire_recursive_lock",
                    "3": "acquire_recursive_retarget_lock"
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8",
                "FUN_080088ec",
                "FUN_08009adc"
            ],
            "code": "\nvoid acquire_recursive_lock_080090a8(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "acquire_recursive_lock_080090a8",
            "entrypoint": "0x080090a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090a8": "acquire_recursive_lock_080090a8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090b4": {
            "additional_data": {
                "FUNC_08008af4": {
                    "1": "reset_lock",
                    "2": "reset_target",
                    "3": "initialize",
                    "4": "do_something"
                },
                "FUN_080090b4": {
                    "2": "release_lock_recursive",
                    "23": "release_recursive_lock",
                    "6": "release_lock"
                },
                "__retarget_lock_release_recursive": {
                    "1": "release_recursive_lock"
                },
                "retarget_lock_release_recursive": {
                    "1": "release_recursive_lock"
                }
            },
            "called": [
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8",
                "FUN_08009adc",
                "FUN_080088ec"
            ],
            "code": "\nvoid release_recursive_lock_080090b4(void)\n\n{\n  release_recursive_lock_080090b4(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "release_recursive_lock_080090b4",
            "entrypoint": "0x080090b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090b4": "release_recursive_lock_080090b4",
                "__retarget_lock_release_recursive": "release_recursive_lock",
                "retarget_lock_release_recursive": "release_recursive_lock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090c0": {
            "additional_data": {
                "(undefined4 *)0x0": {
                    "1": "null"
                },
                "FUN_080090c0": {
                    "1": "allocate_or_get_ptr",
                    "2": "allocate_or_get_value",
                    "3": "allocate_or_get_pointer",
                    "4": "allocate_or_get_data",
                    "5": "allocate_or_get_entry"
                },
                "FUN_08009980": {
                    "1": "allocate_calloc"
                },
                "_calloc_r": {
                    "1": "calloc_wrapper",
                    "6": "allocate_memory"
                },
                "iVar2": {
                    "1": "entry",
                    "2": "array_pointer",
                    "4": "data_ptr"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "context",
                    "3": "data",
                    "4": "size"
                },
                "param_2": {
                    "1": "calloc_arg2",
                    "2": "entry_index",
                    "27": "index"
                },
                "param_2 & 0xff": {
                    "1": "index_mask"
                },
                "param_3": {
                    "1": "bit_shift"
                },
                "puVar1": {
                    "1": "existing_entry",
                    "2": "entry",
                    "6": "ptr"
                },
                "puVar1[1]": {
                    "2": "entry_index"
                },
                "puVar1[2]": {
                    "1": "entry_mask"
                },
                "puVar1[3]": {
                    "1": "entry_counter"
                },
                "puVar1[4]": {
                    "1": "unused_2"
                }
            },
            "called": [
                "FUN_08009980"
            ],
            "calling": [
                "FUN_08009630",
                "FUN_080079e8",
                "FUN_08009258",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009444"
            ],
            "code": "\nundefined4 * allocate_or_get_entry_080090c0(int size,uint index)\n\n{\n  undefined4 *ptr;\n  int data_ptr;\n  \n  data_ptr = *(int *)(size + 0x4c);\n  if (data_ptr == 0) {\n    data_ptr = allocate_memory(size,4,0x21);\n    *(int *)(size + 0x4c) = data_ptr;\n    if (data_ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  ptr = *(undefined4 **)(data_ptr + index * 4);\n  if (ptr == (undefined4 *)0x0) {\n    data_ptr = 1 << (index & 0xff);\n    ptr = (undefined4 *)allocate_memory(size,1,(data_ptr + 5) * 4);\n    if (ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    entry_index = index;\n    entry_bitmask = data_ptr;\n  }\n  else {\n    *(undefined4 *)(data_ptr + index * 4) = *ptr;\n  }\n  entry_counter = 0;\n  entry_flag = 0;\n  return ptr;\n}\n\n",
            "current_name": "allocate_or_get_entry_080090c0",
            "entrypoint": "0x080090c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090c0": "allocate_or_get_entry_080090c0",
                "_calloc_r": "allocate_memory",
                "iVar2": "data_ptr",
                "param_1": "size",
                "param_2": "index",
                "puVar1": "ptr",
                "puVar1[1]": "entry_index",
                "puVar1[2]": "entry_bitmask",
                "puVar1[3]": "entry_counter",
                "puVar1[4]": "entry_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800910c": {
            "additional_data": {
                "*(int *)(param_1 + 0x4c)": {
                    "1": "data_offset"
                },
                "*(undefined4 *)(iVar1 + outputPointer[1] * 4)": {
                    "1": "extracted_value"
                },
                "*(undefined4 *)(iVar1 + param_2[1] * 4)": {
                    "1": "new_value"
                },
                "*(undefined4 **)(iVar1 + param_2[1] * 4)": {
                    "1": "array_element_address"
                },
                "*param_2": {
                    "1": "output_value"
                },
                "FUN_0800910c": {
                    "1": "extract_and_assign_value",
                    "5": "extract_data",
                    "6": "extract_value_and_swap"
                },
                "iVar1": {
                    "1": "array_offset",
                    "2": "data_address",
                    "4": "base_address",
                    "8": "data_offset"
                },
                "param_1": {
                    "1": "pointer_offset",
                    "2": "source_address",
                    "3": "data_offset",
                    "5": "input_offset",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "value_ptr",
                    "2": "extracted_data",
                    "3": "output_data",
                    "4": "output_ptr",
                    "9": "output_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid extract_value_and_swap_0800910c(int base_address,undefined4 *output_pointer)\n\n{\n  int data_offset;\n  \n  if (output_pointer != (undefined4 *)0x0) {\n    data_offset = *(int *)(base_address + 0x4c);\n    *output_pointer = *(undefined4 *)(data_offset + output_pointer[1] * 4);\n    *(undefined4 **)(data_offset + output_pointer[1] * 4) = output_pointer;\n  }\n  return;\n}\n\n",
            "current_name": "extract_value_and_swap_0800910c",
            "entrypoint": "0x0800910c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800910c": "extract_value_and_swap_0800910c",
                "iVar1": "data_offset",
                "param_1": "base_address",
                "param_2": "output_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009120": {
            "additional_data": {
                "FUND_08009120": {
                    "1": "calculate_checksum"
                },
                "FUN_08009120": {
                    "1": "reverse_and_update_array",
                    "17": "calculate_checksum",
                    "2": "multiply_and_add"
                },
                "_Balloc": {
                    "3": "allocate_memory"
                },
                "iVar3": {
                    "1": "array_element_count",
                    "2": "length",
                    "3": "num_elements",
                    "4": "array_size",
                    "8": "array_length"
                },
                "iVar5": {
                    "1": "current_index",
                    "11": "index",
                    "14": "counter",
                    "2": "iteration_count",
                    "3": "i"
                },
                "memcpy": {
                    "2": "copy_memory"
                },
                "param_1": {
                    "1": "param1",
                    "17": "size",
                    "2": "array_size",
                    "4": "input_size"
                },
                "param_2": {
                    "1": "input_data",
                    "11": "data",
                    "2": "params",
                    "7": "input_array"
                },
                "param_3": {
                    "31": "multiplier"
                },
                "param_4": {
                    "1": "sum",
                    "14": "checksum",
                    "5": "accumulator",
                    "8": "carry"
                },
                "puVar1": {
                    "10": "result",
                    "2": "updated_data",
                    "3": "updated_array",
                    "4": "new_data",
                    "7": "result_array"
                },
                "puVar4": {
                    "1": "ptr_data",
                    "2": "param_ptr",
                    "3": "data_ptr",
                    "4": "ptr",
                    "5": "array_pointer",
                    "9": "current_element"
                },
                "uVar2": {
                    "1": "upper_checksum",
                    "10": "temp",
                    "2": "carry_overflow",
                    "3": "temp_checksum",
                    "4": "carry"
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "code": "\nundefined4 * calculate_checksum_08009120(int size,undefined4 *data,int multiplier,uint checksum)\n\n{\n  undefined4 *result;\n  uint temp;\n  int array_length;\n  uint *current_element;\n  int counter;\n  \n  counter = 0;\n  array_length = data[4];\n  current_element = data + 5;\n  do {\n    counter = counter + 1;\n    checksum = multiplier * (*current_element & 0xffff) + checksum;\n    temp = multiplier * (*current_element >> 0x10) + (checksum >> 0x10);\n    *current_element = (checksum & 0xffff) + temp * 0x10000;\n    checksum = temp >> 0x10;\n    current_element = current_element + 1;\n  } while (counter < array_length);\n  result = data;\n  if (checksum != 0) {\n    if ((int)data[2] <= array_length) {\n      result = (undefined4 *)allocate_memory(size,data[1] + 1);\n      copy_memory(result + 3,data + 3,(data[4] + 2) * 4);\n      counter = *(int *)(size + 0x4c);\n      *data = *(undefined4 *)(counter + data[1] * 4);\n      *(undefined4 **)(counter + data[1] * 4) = data;\n    }\n    result[array_length + 5] = checksum;\n    result[4] = array_length + 1;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_checksum_08009120",
            "entrypoint": "0x08009120",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "_Balloc": "allocate_memory",
                "iVar3": "array_length",
                "iVar5": "counter",
                "memcpy": "copy_memory",
                "param_1": "size",
                "param_2": "data",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "result",
                "puVar4": "current_element",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091a4": {
            "additional_data": {
                "0xc0000000": {
                    "1": "hex_mask_2"
                },
                "0xf0000000": {
                    "1": "hex_mask_4"
                },
                "0xff000000": {
                    "1": "hex_mask_8"
                },
                "0xffff0000": {
                    "1": "hex_mask_16"
                },
                "FUN_080091a4": {
                    "1": "find_leading_zeroes_count",
                    "2": "count_leading_zeroes",
                    "22": "count_leading_zeros"
                },
                "iVar1": {
                    "1": "result",
                    "18": "leading_zeros",
                    "2": "bit_position",
                    "5": "leading_zeros_count"
                },
                "param_1": {
                    "1": "num",
                    "16": "input",
                    "4": "number",
                    "8": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "code": "\nint count_leading_zeros_080091a4(uint input)\n\n{\n  int leading_zeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leading_zeros = 0x10;\n  }\n  else {\n    leading_zeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leading_zeros = leading_zeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leading_zeros = leading_zeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leading_zeros = leading_zeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leading_zeros + 1;\n    }\n    leading_zeros = 0x20;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_080091a4",
            "entrypoint": "0x080091a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "iVar1": "leading_zeros",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091e4": {
            "additional_data": {
                "FUN_080091e4": {
                    "1": "count_leading_zeroes",
                    "13": "count_trailing_zeros",
                    "7": "count_leading_zeros"
                },
                "iVar1": {
                    "1": "num_bits",
                    "2": "bit_count",
                    "3": "leading_zeros_count",
                    "5": "leading_zeros",
                    "6": "count"
                },
                "iVar2": {
                    "1": "shift_amount"
                },
                "param_1": {
                    "1": "ptr_number",
                    "2": "num_ptr",
                    "4": "value",
                    "7": "number",
                    "8": "num"
                },
                "uVar2": {
                    "1": "temp_number",
                    "11": "temp",
                    "2": "num",
                    "4": "temp_value",
                    "7": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630"
            ],
            "code": "\nint count_trailing_zeros_080091e4(uint *num)\n\n{\n  int count;\n  uint temp;\n  \n  temp = *num;\n  if ((temp & 7) == 0) {\n    if ((temp & 0xffff) == 0) {\n      temp = temp >> 0x10;\n      count = 0x10;\n    }\n    else {\n      count = 0;\n    }\n    if ((temp & 0xff) == 0) {\n      temp = temp >> 8;\n      count = count + 8;\n    }\n    if ((temp & 0xf) == 0) {\n      temp = temp >> 4;\n      count = count + 4;\n    }\n    if ((temp & 3) == 0) {\n      temp = temp >> 2;\n      count = count + 2;\n    }\n    if (-1 < (int)(temp << 0x1f)) {\n      temp = temp >> 1;\n      if (temp == 0) {\n        return 0x20;\n      }\n      count = count + 1;\n    }\n    *num = temp;\n    return count;\n  }\n  if ((int)(temp << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(temp << 0x1e)) {\n    *num = temp >> 2;\n    return 2;\n  }\n  *num = temp >> 1;\n  return 1;\n}\n\n",
            "current_name": "count_trailing_zeros_080091e4",
            "entrypoint": "0x080091e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "iVar1": "count",
                "param_1": "num",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009244": {
            "additional_data": {
                "FUN_080090c0": {
                    "1": "allocate_memory"
                },
                "FUN_08009244": {
                    "1": "allocate_and_initialize",
                    "10": "initialize_data",
                    "3": "initialize_object",
                    "4": "initialize_buffer"
                },
                "_Balloc": {
                    "1": "allocate_buffer"
                },
                "iVar1": {
                    "1": "buffer_index",
                    "3": "buffer",
                    "4": "allocated_memory",
                    "6": "allocated_block"
                },
                "param_1": {
                    "1": "length",
                    "2": "buffer_size",
                    "27": "size"
                },
                "param_2": {
                    "2": "data_value",
                    "23": "value",
                    "6": "data"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid initialize_data_08009244(undefined4 size,undefined4 value)\n\n{\n  int allocated_block;\n  \n  allocated_block = allocate_buffer(size,1);\n  *(undefined4 *)(allocated_block + 0x10) = 1;\n  *(undefined4 *)(allocated_block + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "initialize_data_08009244",
            "entrypoint": "0x08009244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "_Balloc": "allocate_buffer",
                "iVar1": "allocated_block",
                "param_1": "size",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009258": {
            "additional_data": {
                "FUN_08009258": {
                    "1": "calculate_result",
                    "2": "calculate_polynomial_product",
                    "3": "calculate_checksum",
                    "6": "calculate_product"
                },
                "iVar1": {
                    "1": "temp3"
                },
                "iVar10": {
                    "1": "iter_count_b",
                    "10": "min_length",
                    "2": "length2"
                },
                "iVar12": {
                    "1": "vector1_length",
                    "2": "var8",
                    "3": "size1",
                    "4": "array1_length",
                    "7": "length1"
                },
                "iVar13": {
                    "1": "input_buffer1",
                    "2": "shorter_array"
                },
                "iVar3": {
                    "1": "new_array_length",
                    "2": "var1",
                    "3": "result_length",
                    "4": "num_elements"
                },
                "iVar5": {
                    "1": "i"
                },
                "iVar7": {
                    "1": "temp"
                },
                "iVar9": {
                    "1": "max_val2",
                    "2": "max_size",
                    "4": "array2_length",
                    "5": "length2"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "result_array",
                    "3": "param1",
                    "4": "output_buffer",
                    "9": "output_array"
                },
                "param_2": {
                    "1": "input_buffer_1",
                    "2": "input_buffer1",
                    "4": "input1",
                    "6": "input_array1",
                    "7": "array1"
                },
                "param_3": {
                    "1": "array2_address",
                    "2": "source2",
                    "4": "input2",
                    "6": "input_array2",
                    "7": "array2"
                },
                "puVar1": {
                    "1": "array2_ptr",
                    "2": "temp_ptr1",
                    "3": "src_ptr",
                    "7": "ptr1"
                },
                "puVar10": {
                    "1": "temp_iterator"
                },
                "puVar11": {
                    "1": "end_aligned_iter"
                },
                "puVar13": {
                    "1": "result_ptr_last_element"
                },
                "puVar14": {
                    "1": "var_5",
                    "4": "ptr5"
                },
                "puVar15": {
                    "1": "ptr2_2",
                    "3": "temp_ptr",
                    "4": "ptr6"
                },
                "puVar16": {
                    "1": "input_ptr1_temp",
                    "4": "ptr7"
                },
                "puVar17": {
                    "1": "result_end",
                    "4": "result_end_ptr"
                },
                "puVar18": {
                    "1": "result_array",
                    "2": "result_ptr",
                    "4": "ptr9"
                },
                "puVar2": {
                    "1": "temp_pointer",
                    "2": "array2_ptr",
                    "3": "dest_ptr",
                    "7": "ptr2"
                },
                "puVar3": {
                    "1": "output"
                },
                "puVar4": {
                    "1": "output_end"
                },
                "puVar5": {
                    "1": "array2_ptr",
                    "2": "ptr1",
                    "3": "result_ptr",
                    "4": "ptr3"
                },
                "puVar6": {
                    "1": "iterator2"
                },
                "puVar7": {
                    "1": "array2_ptr",
                    "2": "ptr2",
                    "3": "end_ptr",
                    "4": "ptr4"
                },
                "puVar8": {
                    "1": "inner_iterator"
                },
                "puVar9": {
                    "1": "output_iterator"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "end_address",
                    "6": "end_offset"
                },
                "uVar4": {
                    "1": "result_higher",
                    "14": "carry",
                    "2": "var2",
                    "3": "temp2"
                },
                "uVar5": {
                    "1": "temp4"
                },
                "uVar6": {
                    "1": "current_value",
                    "2": "start",
                    "7": "start_offset"
                },
                "uVar8": {
                    "1": "temp_var1",
                    "2": "result",
                    "3": "temp",
                    "4": "temp1"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "code": "\nvoid calculate_product_08009258(undefined4 output_array,int array1,int array2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int num_elements;\n  uint carry;\n  uint *ptr3;\n  uint start_offset;\n  uint *ptr4;\n  uint temp1;\n  int length2;\n  int min_length;\n  uint end_offset;\n  int length1;\n  int shorter_array;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  length1 = *(int *)(array1 + 0x10);\n  length2 = *(int *)(array2 + 0x10);\n  min_length = length2;\n  shorter_array = array1;\n  if (length1 < length2) {\n    min_length = length1;\n    length1 = length2;\n    shorter_array = array2;\n    array2 = array1;\n  }\n  length2 = length1 + min_length;\n  num_elements = *(int *)(shorter_array + 4);\n  if (*(int *)(shorter_array + 8) < length2) {\n    num_elements = num_elements + 1;\n  }\n  num_elements = _Balloc(output_array,num_elements);\n  ptr9 = (uint *)(num_elements + 0x14);\n  ptr8 = ptr9 + length2;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start_offset = array2 + 0x14;\n  end_offset = start_offset + min_length * 4;\n  ptr3 = (uint *)(shorter_array + 0x14);\n  if (start_offset < end_offset) {\n    ptr4 = (uint *)(start_offset + ((end_offset - array2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(array2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        start_offset = *ptr7 & 0xffff;\n        if (start_offset != 0) break;\n        start_offset = *ptr7 >> 0x10;\n        if (start_offset == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp1 = *ptr9;\n        carry = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        end_offset = temp1;\n        do {\n          ptr6 = ptr5;\n          carry = carry + start_offset * *(ushort *)ptr1 + (end_offset >> 0x10);\n          *ptr6 = temp1 & 0xffff | carry * 0x10000;\n          ptr2 = ptr1 + 1;\n          end_offset = ptr6[1];\n          temp1 = start_offset * (*ptr1 >> 0x10) + (end_offset & 0xffff) + (carry >> 0x10);\n          carry = temp1 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + length1);\n        ptr6[1] = temp1;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      end_offset = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp1 = start_offset * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + end_offset;\n        carry = start_offset * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp1 >> 0x10);\n        end_offset = carry >> 0x10;\n        *ptr2 = temp1 & 0xffff | carry * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + length1);\n      ptr2[1] = end_offset;\n      start_offset = *ptr7 >> 0x10;\n      if (start_offset != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < length2) {\n    start_offset = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start_offset == 0 && (length2 = length2 + -1, length2 != 0))) {\n      ptr8 = ptr8 + -1;\n      start_offset = *ptr8;\n    }\n  }\n  *(int *)(num_elements + 0x10) = length2;\n  return;\n}\n\n",
            "current_name": "calculate_product_08009258",
            "entrypoint": "0x08009258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009258": "calculate_product_08009258",
                "iVar1": "temp3",
                "iVar10": "min_length",
                "iVar12": "length1",
                "iVar13": "shorter_array",
                "iVar3": "num_elements",
                "iVar9": "length2",
                "param_1": "output_array",
                "param_2": "array1",
                "param_3": "array2",
                "puVar1": "ptr1",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9",
                "puVar2": "ptr2",
                "puVar5": "ptr3",
                "puVar7": "ptr4",
                "uVar11": "end_offset",
                "uVar4": "carry",
                "uVar5": "temp4",
                "uVar6": "start_offset",
                "uVar8": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080093a4": {
            "additional_data": {
                "&DAT_0800a070": {
                    "1": "constant",
                    "2": "constant_data",
                    "4": "constant_array"
                },
                "(int)param_3 >> 2": {
                    "1": "length_in_words"
                },
                "*(int *)(param_1 + 0x4c)": {
                    "1": "mem_index",
                    "2": "array_index"
                },
                "*(undefined4 *)(&DAT_0800a070 + ((param_3 & 3) - 1) * 4)": {
                    "1": "last_element"
                },
                "*(undefined4 *)(array_index + puVar3[1] * 4)": {
                    "1": "array_index_value_data"
                },
                "*(undefined4 *)(iVar1 + puVar3[1] * 4)": {
                    "1": "temp"
                },
                "*(undefined4 *)(param_1 + 0x4c)": {
                    "1": "temp"
                },
                "*(undefined4 **)(iVar1 + puVar3[1] * 4)": {
                    "1": "value_pointer"
                },
                "*(undefined4 **)(param_1 + 0x48)": {
                    "1": "multiplier",
                    "2": "allocated_array"
                },
                "*puVar3": {
                    "1": "p_result_ptr"
                },
                "*puVar3 = 0": {
                    "1": "reset_memory"
                },
                "*puVar4": {
                    "1": "array_data"
                },
                "*puVar4 = 0": {
                    "1": "reset_memory2"
                },
                "-1": {
                    "1": "negative_constant"
                },
                "-1 < iVar2 << 0x1f": {
                    "1": "is_negative"
                },
                "0x271": {
                    "1": "constant3"
                },
                "1": {
                    "1": "constant2"
                },
                "DAT_0800a070": {
                    "1": "constant"
                },
                "FUN_080090c0": {
                    "1": "create_array"
                },
                "FUN_08009120": {
                    "1": "multiply_arrays"
                },
                "FUN_08009258": {
                    "1": "update_values"
                },
                "FUN_080093a4": {
                    "1": "calculate_multiplier",
                    "2": "calculate_result",
                    "6": "calculate_product"
                },
                "LAB_080093d2": {
                    "1": "loop_label"
                },
                "_Balloc": {
                    "1": "allocate_buffer",
                    "2": "allocate",
                    "8": "allocate_memory"
                },
                "__multadd": {
                    "11": "multiply_and_add",
                    "2": "calculate_sum"
                },
                "__multiply": {
                    "1": "calculate_product",
                    "10": "multiply"
                },
                "iVar1": {
                    "1": "index_1",
                    "11": "index",
                    "2": "offset",
                    "3": "temp_var_1",
                    "4": "index1",
                    "8": "temp_var1"
                },
                "iVar2": {
                    "1": "quotient",
                    "2": "temp2",
                    "3": "temp_var_2",
                    "4": "num_iterations",
                    "8": "temp_var2"
                },
                "label LAB_080093d2": {
                    "1": "loop_label"
                },
                "output": {
                    "1": "result"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "3": "input_param",
                    "9": "input"
                },
                "param_1 + 0x48": {
                    "1": "ptr"
                },
                "param_1 + 0x4c": {
                    "1": "mem_location2"
                },
                "param_2": {
                    "1": "output_data",
                    "2": "result_array",
                    "3": "input_array",
                    "5": "result",
                    "8": "output"
                },
                "param_2 = param_2 + (param_3 & 3) - 1) * 4": {
                    "1": "calculate_offset"
                },
                "param_2[1]": {
                    "1": "parameter_value"
                },
                "param_3": {
                    "1": "array_size",
                    "19": "size",
                    "2": "input_size",
                    "3": "array_length",
                    "4": "length"
                },
                "puVar3": {
                    "1": "factor",
                    "2": "result_array",
                    "3": "result",
                    "4": "temp1"
                },
                "puVar3[1]": {
                    "1": "array_index_value"
                },
                "puVar3[1] * 4": {
                    "1": "mem_offset"
                },
                "puVar4": {
                    "1": "temp4",
                    "2": "temp_ptr_2",
                    "3": "temp_pointer2",
                    "4": "temp2"
                },
                "puVar4[1]": {
                    "1": "ptr_value2"
                },
                "puVar4[4]": {
                    "1": "flag1"
                },
                "puVar4[5]": {
                    "1": "flag2"
                },
                "size": {
                    "1": "num_elements"
                }
            },
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * calculate_product_080093a4(int input,undefined4 *output,uint size)\n\n{\n  int index;\n  int temp_var2;\n  undefined4 *temp1;\n  undefined4 *temp2;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              multiply_and_add(input,output,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),0);\n  }\n  temp_var2 = (int)size >> 2;\n  if (temp_var2 != 0) {\n    temp2 = *(undefined4 **)(input + 0x48);\n    if (temp2 == (undefined4 *)0x0) {\n      temp2 = (undefined4 *)allocate_memory(input,1);\n      flag1 = 1;\n      flag2 = 0x271;\n      *(undefined4 **)(input + 0x48) = temp2;\n      *temp2 = 0;\n    }\n    temp1 = output;\n    if (temp_var2 << 0x1f < 0) goto loop_label;\nLAB_080093c4:\n    temp_var2 = temp_var2 >> 1;\n    temp1 = temp2;\n    if (temp_var2 != 0) {\n      while( true ) {\n        temp2 = (undefined4 *)*temp1;\n        if (temp2 == (undefined4 *)0x0) {\n          temp2 = (undefined4 *)multiply(input,temp1,temp1);\n          *temp1 = temp2;\n          *temp2 = 0;\n        }\n        temp1 = output;\n        if (-1 < temp_var2 << 0x1f) break;\nloop_label:\n        output = (undefined4 *)multiply(input,temp1,temp2);\n        if (temp1 == (undefined4 *)0x0) break;\n        index = *(int *)(input + 0x4c);\n        temp_var2 = temp_var2 >> 1;\n        *temp1 = *(undefined4 *)(index + array_index_value * 4);\n        *(undefined4 **)(index + array_index_value * 4) = temp1;\n        temp1 = temp2;\n        if (temp_var2 == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "current_name": "calculate_product_080093a4",
            "entrypoint": "0x080093a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080093a4": "calculate_product_080093a4",
                "LAB_080093d2": "loop_label",
                "_Balloc": "allocate_memory",
                "__multadd": "multiply_and_add",
                "__multiply": "multiply",
                "iVar1": "index",
                "iVar2": "temp_var2",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "puVar3": "temp1",
                "puVar3[1]": "array_index_value",
                "puVar4": "temp2",
                "puVar4[4]": "flag1",
                "puVar4[5]": "flag2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009444": {
            "additional_data": {
                "*(undefined4 *)(iVar5 + iVar3 * 4)": {
                    "1": "ptr_value"
                },
                "FUB_08009444": {
                    "1": "reverse_and_load_bits"
                },
                "FUN_080090c0": {
                    "1": "create_data_array"
                },
                "FUN_08009444": {
                    "1": "reverse_bits_and_store",
                    "8": "reverse_bits"
                },
                "_Balloc": {
                    "4": "allocate_memory"
                },
                "iVar1": {
                    "1": "multiplier",
                    "11": "temp_var1",
                    "2": "i",
                    "3": "temp_1",
                    "7": "temp1"
                },
                "iVar12": {
                    "1": "shift_amount",
                    "2": "num_words",
                    "3": "shifted_size"
                },
                "iVar13": {
                    "1": "new_index",
                    "5": "new_size"
                },
                "iVar2": {
                    "1": "current_index",
                    "11": "temp_var2",
                    "3": "temp_2",
                    "7": "temp2"
                },
                "iVar3": {
                    "1": "end_value",
                    "11": "temp_var3",
                    "3": "temp_3",
                    "7": "temp3"
                },
                "iVar4": {
                    "1": "some_value"
                },
                "iVar5": {
                    "1": "memory_offset",
                    "2": "i_var5",
                    "4": "temp_var5",
                    "9": "offset"
                },
                "iVar5 + iVar3 * 4": {
                    "1": "ptr_index"
                },
                "iVar6": {
                    "1": "temp_var",
                    "2": "i_var6",
                    "3": "temp6",
                    "6": "temp_var6"
                },
                "iVar7": {
                    "1": "temp_data"
                },
                "param_1": {
                    "1": "param",
                    "14": "input_size",
                    "2": "data_size"
                },
                "param_2": {
                    "1": "output_buffer",
                    "2": "parameters",
                    "3": "input_data",
                    "4": "params",
                    "8": "input_array"
                },
                "param_3": {
                    "1": "bits_count",
                    "14": "shift_amount",
                    "2": "size",
                    "3": "num_bits",
                    "4": "bit_count"
                },
                "puVar10": {
                    "1": "temp_array3",
                    "2": "input_ptr",
                    "3": "ptr3"
                },
                "puVar11": {
                    "1": "temp_array4",
                    "2": "temp_array_ptr3",
                    "3": "ptr4"
                },
                "puVar7": {
                    "1": "dst_ptr",
                    "2": "output",
                    "3": "result_array",
                    "6": "output_array"
                },
                "puVar8": {
                    "1": "temp_array_ptr",
                    "2": "input_data_ptr",
                    "3": "source_array",
                    "5": "input_ptr"
                },
                "puVar9": {
                    "1": "output_data_ptr",
                    "2": "temp_ptr1",
                    "3": "output_ptr"
                },
                "uVar14": {
                    "1": "temp_data_value",
                    "12": "carry",
                    "2": "temp_var14",
                    "4": "shifted_value"
                },
                "uVar4": {
                    "1": "first_element",
                    "11": "temp_var4",
                    "3": "temp_4",
                    "4": "temp_value",
                    "7": "temp4"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid reverse_bits_08009444(int input_size,undefined4 *input_array,uint shift_amount)\n\n{\n  int temp_var1;\n  int temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int offset;\n  int temp_var6;\n  uint *output_array;\n  uint *input_ptr;\n  uint *ptr3;\n  uint *ptr4;\n  int shifted_size;\n  int new_size;\n  uint carry;\n  uint *output_ptr;\n  \n  offset = input_array[4];\n  shifted_size = (int)shift_amount >> 5;\n  new_size = shifted_size + offset + 1;\n  temp_var3 = input_array[1];\n  temp_var2 = input_array[2];\n  if ((int)input_array[2] < new_size) {\n    do {\n      temp_var6 = temp_var2 * 2;\n      temp_var1 = temp_var2 * -2;\n      temp_var3 = temp_var3 + 1;\n      temp_var2 = temp_var6;\n    } while (new_size != temp_var6 && new_size + temp_var1 < 0 == SBORROW4(new_size,temp_var6));\n  }\n  temp_var2 = allocate_memory(input_size,temp_var3);\n  output_array = (uint *)(temp_var2 + 0x14);\n  if (0 < shifted_size) {\n    ptr4 = output_array + shifted_size;\n    input_ptr = output_array;\n    do {\n      output_ptr = input_ptr + 1;\n      *input_ptr = 0;\n      output_array = ptr4;\n      input_ptr = output_ptr;\n    } while (output_ptr != ptr4);\n  }\n  temp_var3 = input_array[4];\n  input_ptr = input_array + 5;\n  shift_amount = shift_amount & 0x1f;\n  if (shift_amount == 0) {\n    output_array = output_array + -1;\n    ptr4 = input_ptr;\n    do {\n      output_ptr = ptr4 + 1;\n      output_array = output_array + 1;\n      *output_array = *ptr4;\n      ptr4 = output_ptr;\n    } while (output_ptr < input_ptr + temp_var3);\n  }\n  else {\n    carry = 0;\n    ptr4 = input_ptr;\n    do {\n      output_ptr = output_array;\n      *output_ptr = *ptr4 << shift_amount | carry;\n      ptr3 = ptr4 + 1;\n      carry = *ptr4 >> (0x20 - shift_amount & 0xff);\n      output_array = output_ptr + 1;\n      ptr4 = ptr3;\n    } while (ptr3 < input_ptr + temp_var3);\n    output_ptr[1] = carry;\n    if (carry != 0) {\n      new_size = shifted_size + offset + 2;\n    }\n  }\n  offset = *(int *)(input_size + 0x4c);\n  temp_var3 = input_array[1];\n  temp_var4 = *(undefined4 *)(offset + temp_var3 * 4);\n  *(int *)(temp_var2 + 0x10) = new_size + -1;\n  *input_array = temp_var4;\n  *(undefined4 **)(offset + temp_var3 * 4) = input_array;\n  return;\n}\n\n",
            "current_name": "reverse_bits_08009444",
            "entrypoint": "0x08009444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009444": "reverse_bits_08009444",
                "_Balloc": "allocate_memory",
                "iVar1": "temp_var1",
                "iVar12": "shifted_size",
                "iVar13": "new_size",
                "iVar2": "temp_var2",
                "iVar3": "temp_var3",
                "iVar5": "offset",
                "iVar6": "temp_var6",
                "param_1": "input_size",
                "param_2": "input_array",
                "param_3": "shift_amount",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "puVar7": "output_array",
                "puVar8": "input_ptr",
                "puVar9": "output_ptr",
                "uVar14": "carry",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094f8": {
            "additional_data": {
                "*puVar2": {
                    "1": "curr_element2"
                },
                "*puVar4": {
                    "1": "element_array1"
                },
                "FUN_080094f8": {
                    "1": "compare_array_elements",
                    "27": "compare_arrays"
                },
                "iVar1": {
                    "1": "array1_length",
                    "16": "difference",
                    "2": "length_diff",
                    "4": "array_difference"
                },
                "iVar3": {
                    "1": "array2_start_index",
                    "11": "array2_length",
                    "2": "array2_size",
                    "4": "offset",
                    "6": "array2_offset"
                },
                "param_1": {
                    "1": "array1_offset",
                    "25": "array1",
                    "3": "array1_start"
                },
                "param_2": {
                    "1": "array2_address",
                    "25": "array2",
                    "3": "array2_start"
                },
                "puVar2": {
                    "1": "ptr_array2_value",
                    "14": "ptr2",
                    "2": "ptr1",
                    "5": "ptr_array2",
                    "8": "array2_ptr"
                },
                "puVar4": {
                    "1": "ptr_array1_value",
                    "14": "ptr1",
                    "2": "ptr2",
                    "5": "ptr_array1",
                    "8": "array1_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *ptr2;\n  int array2_length;\n  uint *ptr1;\n  \n  array2_length = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array2_length;\n  if (difference == 0) {\n    ptr2 = (uint *)(array2 + 0x14 + array2_length * 4);\n    ptr1 = (uint *)(array1 + 0x14) + array2_length;\n    do {\n      ptr1 = ptr1 + -1;\n      ptr2 = ptr2 + -1;\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr1);\n  }\n  return difference;\n}\n\n",
            "current_name": "compare_arrays_080094f8",
            "entrypoint": "0x080094f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "iVar1": "difference",
                "iVar3": "array2_length",
                "param_1": "array1",
                "param_2": "array2",
                "puVar2": "ptr2",
                "puVar4": "ptr1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009530": {
            "additional_data": {
                "FUN_08009530": {
                    "1": "check_arrays"
                },
                "LAB_08009578": {
                    "1": "check_condition"
                },
                "_Balloc": {
                    "1": "allocate_memory"
                },
                "iVar1": {
                    "1": "result_ptr",
                    "17": "result",
                    "2": "allocated_memory",
                    "6": "allocation_result"
                },
                "iVar12": {
                    "1": "accumulator",
                    "13": "carry",
                    "2": "temp_var"
                },
                "param_1": {
                    "1": "original_param",
                    "2": "input_data",
                    "3": "input_param",
                    "4": "input1"
                },
                "param_2": {
                    "1": "input1",
                    "2": "source",
                    "6": "input_array1",
                    "8": "array1"
                },
                "param_3": {
                    "1": "source2",
                    "2": "target_data",
                    "6": "input_array2",
                    "8": "array2"
                },
                "param_4": {
                    "1": "input4",
                    "2": "param",
                    "5": "additional_param",
                    "8": "param4"
                },
                "puVar10": {
                    "1": "temp_array4",
                    "2": "target_ptr",
                    "3": "ptr5"
                },
                "puVar11": {
                    "1": "end_of_result",
                    "2": "ptr6"
                },
                "puVar13": {
                    "1": "array2_ptr",
                    "2": "ptr7"
                },
                "puVar14": {
                    "1": "target_data_ptr5"
                },
                "puVar15": {
                    "1": "pu_var15"
                },
                "puVar2": {
                    "1": "temp_pointer",
                    "2": "ptr_array1",
                    "6": "ptr1"
                },
                "puVar3": {
                    "1": "temp1"
                },
                "puVar4": {
                    "1": "temp2"
                },
                "puVar6": {
                    "1": "temp_array6",
                    "2": "ptr1",
                    "4": "ptr2"
                },
                "puVar7": {
                    "1": "pointer3",
                    "2": "ptr4",
                    "3": "source_ptr"
                },
                "puVar8": {
                    "1": "temp_element",
                    "2": "array2_ptr",
                    "3": "ptr8",
                    "4": "temp_ptr"
                },
                "puVar9": {
                    "1": "array2_ptr",
                    "2": "ptr5",
                    "3": "ptr4"
                },
                "uVar14": {
                    "1": "var_five",
                    "2": "array1_length"
                },
                "uVar3": {
                    "1": "array_size1",
                    "2": "value1",
                    "3": "array1_size"
                },
                "uVar4": {
                    "1": "result",
                    "2": "carry",
                    "3": "temp_var"
                },
                "uVar5": {
                    "1": "is_equal",
                    "14": "flag",
                    "2": "var5"
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid find_difference_08009530(undefined4 input1,uint *array1,uint *array2,undefined4 param4)\n\n{\n  int result;\n  uint *ptr1;\n  uint array1_size;\n  uint temp_var;\n  undefined4 flag;\n  uint *ptr2;\n  uint *source_ptr;\n  uint *ptr4;\n  uint *ptr5;\n  uint *ptr6;\n  int carry;\n  uint *ptr7;\n  uint array2_length;\n  uint *temp_ptr;\n  \n  ptr1 = (uint *)array2[4];\n  ptr6 = array1 + 5;\n  ptr7 = array2 + 5;\n  source_ptr = ptr6;\n  ptr4 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = ptr6 + (int)ptr1;\n    ptr1 = ptr7 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= ptr6) {\n        carry = allocate_memory(input1,0,ptr2,ptr1,param4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*ptr1 <= *ptr2) goto check_condition;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    flag = 0;\n    ptr2 = array2;\n    goto check_condition;\n  }\n  flag = 1;\n  ptr2 = ptr6;\n  ptr1 = array1;\n  source_ptr = ptr7;\n  ptr4 = array2;\n  array2 = array1;\n  ptr7 = ptr6;\ncheck_condition:\n  result = allocate_memory(input1,ptr4[1],ptr2,ptr1,param4);\n  carry = 0;\n  array2_length = ptr4[4];\n  array1_size = array2[4];\n  *(undefined4 *)(result + 0xc) = flag;\n  ptr6 = source_ptr + array2_length;\n  ptr1 = (uint *)(result + 0x14);\n  ptr4 = ptr7;\n  do {\n    temp_ptr = source_ptr + 1;\n    ptr5 = ptr4 + 1;\n    temp_var = ((*source_ptr & 0xffff) + carry) - (*ptr4 & 0xffff);\n    carry = ((*source_ptr >> 0x10) - (*ptr4 >> 0x10)) + ((int)temp_var >> 0x10);\n    temp_var = temp_var & 0xffff | carry * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = temp_var;\n    carry = carry >> 0x10;\n    ptr1 = ptr2;\n    source_ptr = temp_ptr;\n    ptr4 = ptr5;\n  } while (ptr5 < ptr7 + array1_size);\n  ptr1 = temp_ptr;\n  source_ptr = ptr2;\n  if (temp_ptr < ptr6) {\n    do {\n      ptr4 = ptr1 + 1;\n      array1_size = (*ptr1 & 0xffff) + carry;\n      carry = ((int)array1_size >> 0x10) + (*ptr1 >> 0x10);\n      temp_var = array1_size & 0xffff | carry * 0x10000;\n      *source_ptr = temp_var;\n      carry = carry >> 0x10;\n      ptr1 = ptr4;\n      source_ptr = source_ptr + 1;\n    } while (ptr4 < ptr6);\n    ptr2 = (uint *)((int)ptr2 + ((int)ptr6 + ~(uint)temp_ptr & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (temp_var == 0) {\n    ptr2 = ptr2 + -1;\n    array2_length = array2_length - 1;\n    temp_var = *ptr2;\n  }\n  *(uint *)(result + 0x10) = array2_length;\n  return;\n}\n\n",
            "current_name": "find_difference_08009530",
            "entrypoint": "0x08009530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009530": "find_difference_08009530",
                "LAB_08009578": "check_condition",
                "_Balloc": "allocate_memory",
                "iVar1": "result",
                "iVar12": "carry",
                "param_1": "input1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "param4",
                "puVar10": "ptr5",
                "puVar11": "ptr6",
                "puVar13": "ptr7",
                "puVar2": "ptr1",
                "puVar6": "ptr2",
                "puVar7": "source_ptr",
                "puVar8": "temp_ptr",
                "puVar9": "ptr4",
                "uVar14": "array2_length",
                "uVar3": "array1_size",
                "uVar4": "temp_var",
                "uVar5": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009630": {
            "additional_data": {
                "FUN_08009630": {
                    "1": "decode_bits",
                    "2": "decode_data",
                    "3": "extract_bits",
                    "8": "reverse_bits"
                },
                "F_08009630": {
                    "1": "integer_manipulation"
                },
                "_Balloc": {
                    "2": "allocate_memory"
                },
                "__hi0bits": {
                    "1": "find_most_zero_bits"
                },
                "__lo0bits": {
                    "1": "find_least_zero_bits"
                },
                "iVar1": {
                    "1": "result_ptr",
                    "16": "result",
                    "2": "allocation",
                    "5": "allocated_memory"
                },
                "iVar3": {
                    "1": "result",
                    "2": "bits_count",
                    "3": "temp1"
                },
                "iVar4": {
                    "1": "loop_count2",
                    "2": "mode",
                    "3": "temp_var_2",
                    "5": "flag"
                },
                "local_1c": {
                    "1": "data_value",
                    "2": "masked_param"
                },
                "local_20": {
                    "1": "local_input_value",
                    "2": "temp_value1",
                    "3": "temp1",
                    "4": "temp"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param_a",
                    "5": "input1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "11": "param2",
                    "2": "param_2",
                    "5": "input2"
                },
                "param_3": {
                    "1": "input_a",
                    "2": "input3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "arg4",
                    "2": "input4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "num_bits",
                    "11": "output1",
                    "2": "output_1",
                    "4": "output_param1",
                    "6": "result1"
                },
                "param_6": {
                    "1": "output_value2",
                    "11": "output2",
                    "2": "output_param_2",
                    "4": "output_param2",
                    "6": "result2"
                },
                "uVar2": {
                    "1": "bits_shifted",
                    "2": "bit_count",
                    "4": "shift_count"
                },
                "uVar5": {
                    "1": "shifted_bits2",
                    "11": "shifted_value",
                    "2": "shifted",
                    "4": "shifted_bits"
                },
                "uVar6": {
                    "1": "num_bits",
                    "2": "shifted_value",
                    "3": "shift_count",
                    "4": "shift_amount"
                },
                "uVar7": {
                    "1": "bits64",
                    "2": "bit_mask",
                    "4": "bits_count",
                    "8": "high_bits"
                }
            },
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nint reverse_bits_08009630(undefined4 param1,undefined4 param2,uint param3,uint param4,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint bits;\n  int index;\n  int flag;\n  uint shifted_value;\n  uint shift_amount;\n  undefined8 high_bits;\n  uint temp;\n  uint var2;\n  \n  result = allocate_memory(param1,1);\n  shift_amount = (param4 << 1) >> 0x15;\n  var2 = param4 & 0xfffff;\n  if (shift_amount != 0) {\n    var2 = var2 | 0x100000;\n  }\n  if (param3 == 0) {\n    index = find_leading_zero_bits(&var2);\n    flag = 1;\n    bits = index + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = var2;\n  }\n  else {\n    temp = param3;\n    bits = find_leading_zero_bits(&temp);\n    if (bits == 0) {\n      *(uint *)(result + 0x14) = temp;\n    }\n    else {\n      shifted_value = var2 << (0x20 - bits & 0xff);\n      var2 = var2 >> (bits & 0xff);\n      *(uint *)(result + 0x14) = shifted_value | temp;\n    }\n    if (var2 == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 2;\n    }\n    *(uint *)(result + 0x18) = var2;\n    *(int *)(result + 0x10) = flag;\n  }\n  if (shift_amount == 0) {\n    *output1 = bits - 0x432;\n    high_bits = find_highest_bit_position(*(undefined4 *)(result + flag * 4 + 0x10));\n    *output2 = (int)((ulonglong)high_bits >> 0x20) * 0x20 - (int)high_bits;\n    return result;\n  }\n  *output1 = (shift_amount - 0x433) + bits;\n  *output2 = 0x35 - bits;\n  return result;\n}\n\n",
            "current_name": "reverse_bits_08009630",
            "entrypoint": "0x08009630",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009630": "reverse_bits_08009630",
                "_Balloc": "allocate_memory",
                "__hi0bits": "find_highest_bit_position",
                "__lo0bits": "find_leading_zero_bits",
                "iVar1": "result",
                "iVar3": "index",
                "iVar4": "flag",
                "local_1c": "var2",
                "local_20": "temp",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output1",
                "param_6": "output2",
                "uVar2": "bits",
                "uVar5": "shifted_value",
                "uVar6": "shift_amount",
                "uVar7": "high_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e0": {
            "additional_data": {
                "*param_3": {
                    "1": "store_result"
                },
                "0x100000": {
                    "1": "lower_bound"
                },
                "0x3fe00000": {
                    "1": "float_constant2"
                },
                "0x43500000": {
                    "1": "float_constant"
                },
                "0x7ff00000": {
                    "1": "max_float"
                },
                "0x7fffffff": {
                    "1": "max_int"
                },
                "0x800fffff": {
                    "1": "mask"
                },
                "DAT_08043500": {
                    "1": "constant_value"
                },
                "FUN_080096e0": {
                    "1": "compute_floating_point",
                    "16": "calculate_floating_point",
                    "4": "calculate_float_exponent"
                },
                "__muldf3": {
                    "1": "multiply_floats",
                    "2": "multiply_floating_point",
                    "3": "multiply_double_float"
                },
                "iVar1": {
                    "1": "additional_offset",
                    "10": "counter",
                    "2": "iteration_count"
                },
                "param1": {
                    "1": "param1"
                },
                "param_1": {
                    "1": "input_a",
                    "12": "input1",
                    "2": "input_value1",
                    "3": "mantissa"
                },
                "param_2": {
                    "1": "output_param_2",
                    "12": "input2",
                    "2": "number2",
                    "3": "exponent"
                },
                "param_3": {
                    "1": "output_integer_value",
                    "14": "result",
                    "2": "exponent",
                    "9": "output"
                },
                "param_4": {
                    "1": "constant_value",
                    "10": "param4",
                    "12": "constant",
                    "2": "round_mode"
                },
                "uVar2": {
                    "1": "unsigned_decimal_part",
                    "2": "abs_exponent",
                    "3": "masked_input2",
                    "4": "modified_input2"
                },
                "uVar3": {
                    "1": "combined_fp_value",
                    "2": "result",
                    "3": "combined_inputs",
                    "4": "combined_input"
                }
            },
            "called": [
                "FUN_080004c8"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_floating_point_080096e0(uint input1,uint input2,int *result,undefined4 constant)\n\n{\n  int counter;\n  uint modified_input2;\n  undefined8 combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  counter = 0;\n  modified_input2 = input2 & 0x7fffffff;\n  *result = 0;\n  if ((modified_input2 < 0x7ff00000) && ((modified_input2 | input1) != 0)) {\n    if (modified_input2 < 0x100000) {\n      combined_input = multiply_double_float(input1,input2,0,0x43500000,constant);\n      counter = -0x36;\n      modified_input2 = (uint)((ulonglong)combined_input >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)combined_input;\n    input2 = (uint)((ulonglong)combined_input >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)modified_input2 >> 0x14) + -0x3fe + counter;\n  }\n  return CONCAT44(input2,input1);\n}\n\n",
            "current_name": "calculate_floating_point_080096e0",
            "entrypoint": "0x080096e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e0": "calculate_floating_point_080096e0",
                "__muldf3": "multiply_double_float",
                "iVar1": "counter",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "result",
                "param_4": "constant",
                "uVar2": "modified_input2",
                "uVar3": "combined_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009744": {
            "additional_data": {
                "FUN_08005728": {
                    "1": "get_pointer"
                },
                "FUN_08009744": {
                    "1": "allocate_and_check_memory",
                    "26": "allocate_memory",
                    "3": "allocate_memory_block"
                },
                "_sbrk": {
                    "1": "increase_memory_brk"
                },
                "iVar1": {
                    "1": "brk_status",
                    "10": "allocation_result",
                    "2": "sbrk_result",
                    "4": "allocated_address",
                    "5": "allocated_memory"
                },
                "param_1": {
                    "1": "output",
                    "13": "result",
                    "2": "result_pointer",
                    "3": "output_ptr",
                    "4": "result_ptr"
                },
                "param_2": {
                    "1": "allocation_size",
                    "2": "requested_size",
                    "25": "size"
                }
            },
            "called": [
                "FUN_08005728"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "code": "\nvoid allocate_memory_08009744(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000c10 = 0;\n  allocation_result = increase_memory_brk(size);\n  if ((allocation_result == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_08009744",
            "entrypoint": "0x08009744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009744": "allocate_memory_08009744",
                "_sbrk": "increase_memory_brk",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009768": {
            "additional_data": {
                "FUN_08009768": {
                    "1": "copy_and_filter_data",
                    "15": "copy_string",
                    "2": "copy_and_pad_string"
                },
                "cVar1": {
                    "1": "current_character",
                    "15": "current_char",
                    "3": "character",
                    "5": "current_byte"
                },
                "param_1": {
                    "1": "dest_str",
                    "15": "dest",
                    "6": "source",
                    "8": "destination"
                },
                "param_2": {
                    "1": "source_string",
                    "15": "src",
                    "6": "destination",
                    "8": "source"
                },
                "param_3": {
                    "1": "string_length",
                    "19": "length",
                    "2": "num_chars",
                    "8": "size"
                },
                "puVar2": {
                    "1": "dst_ptr",
                    "2": "dest_ptr",
                    "25": "src_ptr"
                },
                "puVar3": {
                    "1": "source_ptr",
                    "2": "dst_ptr",
                    "23": "dest_ptr",
                    "3": "src_ptr"
                },
                "uVar4": {
                    "1": "current_byte",
                    "2": "word",
                    "3": "current_value",
                    "6": "value",
                    "7": "current_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nvoid copy_string_08009768(uint *dest,uint *src,uint length)\n\n{\n  char current_char;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_word;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (dest_ptr = dest, src_ptr = src, 3 < length)) {\n    do {\n      src = src_ptr + 1;\n      current_word = *src_ptr;\n      dest = dest_ptr;\n      if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      dest = dest_ptr + 1;\n      *dest_ptr = current_word;\n      dest_ptr = dest;\n      src_ptr = src;\n    } while (3 < length);\n  }\n  src_ptr = src;\n  if (length != 0) {\nLAB_0800979c:\n    current_char = *(char *)src_ptr;\n    *(char *)dest = current_char;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)dest = current_char;\n    }\n    if (length != 0) {\n      src_ptr = dest;\n      do {\n        dest_ptr = (uint *)((int)src_ptr + 1);\n        *(char *)src_ptr = '\\0';\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (uint *)(length + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_08009768",
            "entrypoint": "0x08009768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_word"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080097cc": {
            "additional_data": {
                "FUM_08001084": {
                    "1": "copy_data"
                },
                "FUM_080088ec": {
                    "1": "realloc_data"
                },
                "FUM_08008af8": {
                    "1": "allocate_data"
                },
                "FUM_08009a18": {
                    "1": "memcopy_data"
                },
                "FUM_08009adc": {
                    "1": "free_data"
                },
                "FUN_08001084": {
                    "1": "get_data_value"
                },
                "FUN_080088ec": {
                    "1": "move_data"
                },
                "FUN_08008af8": {
                    "1": "get_info_buffer",
                    "2": "allocate_memory"
                },
                "FUN_080097cc": {
                    "1": "reverse_and_copy_data",
                    "2": "copy_and_resize_buffer",
                    "3": "extract_data",
                    "5": "extract_and_copy_data"
                },
                "FUN_08009a18": {
                    "1": "copy_data_from_buffer"
                },
                "FUN_08009adc": {
                    "1": "reallocate_memory",
                    "2": "resize_memory"
                },
                "_free_r": {
                    "4": "free_memory"
                },
                "_malloc_r": {
                    "4": "allocate_memory"
                },
                "_realloc_r": {
                    "1": "realocate_memory",
                    "3": "reallocate_memory"
                },
                "iVar1": {
                    "1": "dest_idx",
                    "2": "source_offset",
                    "8": "source_index"
                },
                "iVar3": {
                    "1": "new_destination_data",
                    "2": "realloc_result",
                    "3": "new_buffer"
                },
                "iVar4": {
                    "1": "temp_length",
                    "2": "source_offset",
                    "7": "offset"
                },
                "memcpy": {
                    "6": "copy_memory"
                },
                "memmove": {
                    "6": "move_memory"
                },
                "param_1": {
                    "1": "destination_buffer",
                    "10": "error_code",
                    "11": "result",
                    "2": "output",
                    "3": "output_buffer"
                },
                "param_2": {
                    "1": "input_data",
                    "4": "source_buffer",
                    "8": "source_data",
                    "9": "source"
                },
                "param_3": {
                    "1": "output_buffer",
                    "3": "target_data",
                    "4": "destination_data",
                    "6": "destination"
                },
                "puVar7": {
                    "1": "next_src_pointer",
                    "2": "temp_pointer"
                },
                "puVar8": {
                    "1": "src_pointer",
                    "2": "next_source"
                },
                "uVar2": {
                    "1": "new_source_length",
                    "2": "copy_size",
                    "3": "data_length"
                },
                "uVar5": {
                    "1": "dst_capacity",
                    "13": "new_size"
                },
                "uVar6": {
                    "1": "current_src_length",
                    "2": "copy_length",
                    "3": "copy_size"
                },
                "uVar9": {
                    "1": "current_length",
                    "2": "current_source_data",
                    "3": "current_value",
                    "4": "temp_value",
                    "5": "data_value"
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_08008af8",
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_08009adc"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 extract_and_copy_data_080097cc(undefined4 *result,int *source,int *destination)\n\n{\n  int source_index;\n  uint data_length;\n  int new_buffer;\n  int offset;\n  uint new_size;\n  uint chunk_size;\n  undefined4 *ptr;\n  undefined4 *next_data_ptr;\n  undefined4 data_value;\n  \n  if (destination[2] != 0) {\n    source_index = *source;\n    new_size = source[2];\n    next_data_ptr = (undefined4 *)*destination;\n    do {\n      do {\n        ptr = next_data_ptr + 2;\n        data_value = *next_data_ptr;\n        chunk_size = next_data_ptr[1];\n        next_data_ptr = ptr;\n      } while (chunk_size == 0);\n      data_length = chunk_size;\n      if ((new_size <= chunk_size) && (data_length = new_size, (*(ushort *)(source + 3) & 0x480) != 0)) {\n        offset = source_index - source[4];\n        new_size = (source[5] * 3) / 2;\n        data_length = chunk_size + 1 + offset;\n        if (new_size < data_length) {\n          new_size = data_length;\n        }\n        if ((int)((uint)*(ushort *)(source + 3) << 0x15) < 0) {\n          new_buffer = allocate_memory(result,new_size);\n          if (new_buffer == 0) {\nLAB_08009896:\n            *result = 0xc;\n            *(ushort *)(source + 3) = *(ushort *)(source + 3) | 0x40;\n            destination[1] = 0;\n            destination[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory(new_buffer,source[4],offset);\n          *(ushort *)(source + 3) = *(ushort *)(source + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          new_buffer = reallocate_memory(result);\n          if (new_buffer == 0) {\n            free_memory(result,source[4]);\n            goto LAB_08009896;\n          }\n        }\n        source_index = new_buffer + offset;\n        source[5] = new_size;\n        source[4] = new_buffer;\n        *source = source_index;\n        source[2] = new_size - offset;\n        data_length = chunk_size;\n      }\n      move_memory(source_index,data_value,data_length);\n      offset = destination[2];\n      new_size = source[2] - data_length;\n      source_index = *source + data_length;\n      source[2] = new_size;\n      *source = source_index;\n      destination[2] = offset - chunk_size;\n    } while (offset - chunk_size != 0);\n  }\n  destination[1] = 0;\n  return 0;\n}\n\n",
            "current_name": "extract_and_copy_data_080097cc",
            "entrypoint": "0x080097cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080097cc": "extract_and_copy_data_080097cc",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "iVar1": "source_index",
                "iVar3": "new_buffer",
                "iVar4": "offset",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "result",
                "param_2": "source",
                "param_3": "destination",
                "puVar7": "ptr",
                "puVar8": "next_data_ptr",
                "uVar2": "data_length",
                "uVar5": "new_size",
                "uVar6": "chunk_size",
                "uVar9": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098c0": {
            "additional_data": {
                "&DAT_2000016c": {
                    "1": "initial_value"
                },
                "&DAT_20000448": {
                    "1": "initial_lock_value"
                },
                "DAT_20000168": {
                    "1": "buffer"
                },
                "DAT_20000448": {
                    "2": "lock"
                },
                "FUNC_08008af0": {
                    "1": "acquire_lock",
                    "2": "function_a"
                },
                "FUNC_08008af4": {
                    "1": "release_lock",
                    "2": "function_b"
                },
                "FUN_080098c0": {
                    "1": "update_data_structure",
                    "2": "add_param_to_data_structure",
                    "24": "update_data"
                },
                "__retarget_lock_acquire_recursive": {
                    "2": "acquire_lock"
                },
                "__retarget_lock_release_recursive": {
                    "2": "release_lock"
                },
                "param_1": {
                    "1": "mode",
                    "10": "type",
                    "2": "action",
                    "3": "status",
                    "4": "input_type"
                },
                "param_2": {
                    "1": "value1",
                    "2": "data_value",
                    "5": "new_value",
                    "8": "value",
                    "9": "data"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "data_1",
                    "6": "param3",
                    "7": "data1",
                    "8": "value1"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "data_2",
                    "6": "param4",
                    "7": "data2",
                    "8": "value2"
                },
                "puVar1": {
                    "1": "data_structure_pointer",
                    "18": "data_ptr",
                    "4": "data_pointer"
                },
                "uVar2": {
                    "1": "return_val",
                    "22": "return_value",
                    "8": "result"
                },
                "uVar3": {
                    "1": "bitwise_flag",
                    "2": "bit_shift",
                    "24": "bit_mask"
                },
                "uVar4": {
                    "1": "current_index",
                    "2": "data_count",
                    "4": "index",
                    "5": "data_index",
                    "8": "count"
                }
            },
            "called": [
                "FUN_08008af0",
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_080078a0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 update_data_080098c0(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  acquire_lock(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    *(uint *)(data_ptr + 4) = count + 1;\n    return_value = DAT_20000448;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = data;\n    release_lock(return_value);\n    return_value = 0;\n  }\n  else {\n    release_lock(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_080098c0",
            "entrypoint": "0x080098c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "__retarget_lock_acquire_recursive": "acquire_lock",
                "__retarget_lock_release_recursive": "release_lock",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009980": {
            "additional_data": {
                "FUN_08005d68": {
                    "1": "set_array_values"
                },
                "FUN_08008af8": {
                    "1": "initialize_memory"
                },
                "FUN_08009980": {
                    "1": "allocate_initialized_memory",
                    "18": "allocate_memory",
                    "2": "allocate_array",
                    "3": "allocate_and_initialize_array",
                    "4": "allocate_and_initialize_memory"
                },
                "_malloc_r": {
                    "1": "allocate_memory"
                },
                "memset": {
                    "1": "clear_memory"
                },
                "param_1": {
                    "1": "array_ptr",
                    "19": "size",
                    "3": "element_size",
                    "6": "size_of_element"
                },
                "param_2": {
                    "1": "num_columns",
                    "10": "num_elements",
                    "2": "width",
                    "3": "count",
                    "4": "element_size"
                },
                "param_3": {
                    "1": "number_of_rows",
                    "11": "element_size",
                    "2": "height",
                    "3": "size_of_array",
                    "4": "num_elements"
                },
                "puVar1": {
                    "1": "memory_ptr",
                    "13": "allocated_memory",
                    "2": "memory_block",
                    "4": "array_ptr",
                    "8": "ptr"
                },
                "puVar3": {
                    "1": "updated_memory",
                    "2": "ptr",
                    "3": "result"
                },
                "uVar2": {
                    "1": "allocated_size",
                    "21": "adjusted_size",
                    "3": "header_size"
                }
            },
            "called": [
                "FUN_08008af8",
                "FUN_08005d68"
            ],
            "calling": [
                "FUN_080090c0"
            ],
            "code": "\nundefined4 * allocate_memory_08009980(undefined4 size,int num_elements,int element_size)\n\n{\n  undefined4 *allocated_memory;\n  uint adjusted_size;\n  undefined4 *result;\n  \n  allocated_memory = (undefined4 *)allocate_memory_08009980(size,element_size * num_elements);\n  if (allocated_memory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjusted_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (adjusted_size < 0x25) {\n    result = allocated_memory;\n    if (0x13 < adjusted_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < adjusted_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (adjusted_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          result = allocated_memory + 6;\n        }\n        else {\n          result = allocated_memory + 4;\n        }\n        *result = 0;\n        result[1] = 0;\n        result[2] = 0;\n        return allocated_memory;\n      }\n      result = allocated_memory + 2;\n    }\n    *result = 0;\n    result[1] = 0;\n    result[2] = 0;\n    return allocated_memory;\n  }\n  clear_memory(allocated_memory,0);\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_memory_08009980",
            "entrypoint": "0x08009980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009980": "allocate_memory_08009980",
                "_malloc_r": "allocate_memory",
                "memset": "clear_memory",
                "param_1": "size",
                "param_2": "num_elements",
                "param_3": "element_size",
                "puVar1": "allocated_memory",
                "puVar3": "result",
                "uVar2": "adjusted_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009a18": {
            "additional_data": {
                "FUN_08009a18": {
                    "1": "reverse_copy",
                    "26": "copy_memory"
                },
                "LAB_08009abc": {
                    "1": "copy_single_byte"
                },
                "iVar3": {
                    "1": "copy_count",
                    "10": "iteration",
                    "2": "i",
                    "3": "index",
                    "4": "iteration_count"
                },
                "param_1": {
                    "11": "destination",
                    "15": "dest",
                    "5": "source"
                },
                "param_2": {
                    "11": "source",
                    "15": "src",
                    "5": "destination"
                },
                "param_3": {
                    "1": "count",
                    "12": "length",
                    "18": "size"
                },
                "puVar1": {
                    "1": "aligned_src",
                    "2": "dest_pointer",
                    "23": "dest_ptr",
                    "3": "source_ptr"
                },
                "puVar2": {
                    "1": "dest_ptr",
                    "23": "src_ptr",
                    "3": "destination_ptr"
                },
                "puVar4": {
                    "1": "dest_byte_pointer",
                    "11": "dest_byte_ptr",
                    "2": "dest_end_ptr",
                    "4": "dest_end",
                    "7": "dest_byte"
                },
                "puVar5": {
                    "1": "aligned_dest",
                    "11": "src_byte_ptr",
                    "2": "src_end_ptr",
                    "4": "src_end",
                    "7": "src_byte"
                },
                "uVar6": {
                    "1": "count",
                    "10": "remaining_size",
                    "2": "temp_length",
                    "3": "temp_size",
                    "7": "remaining_length"
                },
                "uVar7": {
                    "1": "copy_length",
                    "2": "temp_length",
                    "3": "remaining_length",
                    "4": "remaining_size"
                },
                "uVar8": {
                    "1": "temp_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "code": "\nvoid copy_memory_08009a18(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_byte_ptr;\n  undefined4 *src_byte_ptr;\n  uint remaining_size;\n  uint remaining_size;\n  \n  if ((src < dest) && (src_ptr = (undefined4 *)((int)src + size), dest < src_ptr)) {\n    dest_byte_ptr = (undefined *)((int)dest + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte_ptr = dest_byte_ptr + -1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n      } while (src != src_ptr);\n    }\n  }\n  else {\n    remaining_size = size;\n    if (0xf < size) {\n      if ((((uint)dest | (uint)src) & 3) != 0) goto copy_single_byte;\n      src_ptr = src + 4;\n      dest_ptr = dest + 4;\n      do {\n        src_byte_ptr = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_byte_ptr;\n        dest_ptr = dest_ptr + 4;\n      } while (src_byte_ptr != (undefined4 *)((int)src + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      remaining_size = size & 0xf;\n      src = src + iteration * 4;\n      dest = dest + iteration * 4;\n      if (3 < remaining_size) {\n        src_ptr = dest + -1;\n        remaining_size = remaining_size;\n        dest_ptr = src;\n        do {\n          remaining_size = remaining_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_size);\n        iteration = (remaining_size - 4 & 0xfffffffc) + 4;\n        dest = (undefined4 *)((int)dest + iteration);\n        src = (undefined4 *)((int)src + iteration);\n        remaining_size = size & 3;\n      }\n    }\n    size = remaining_size;\n    if (remaining_size != 0) {\ncopy_single_byte:\n      dest_byte_ptr = (undefined *)((int)dest + -1);\n      src_ptr = src;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte_ptr = dest_byte_ptr + 1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)src));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_memory_08009a18",
            "entrypoint": "0x08009a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "LAB_08009abc": "copy_single_byte",
                "iVar3": "iteration",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar4": "dest_byte_ptr",
                "puVar5": "src_byte_ptr",
                "uVar6": "remaining_size",
                "uVar7": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009adc": {
            "additional_data": {
                "DAT_20000454": {
                    "1": "heap_end_address",
                    "2": "global_variable"
                },
                "FUN_080088ec": {
                    "1": "unlock_memory"
                },
                "FUN_08008af8": {
                    "1": "allocate_memory"
                },
                "FUN_080090a8": {
                    "1": "free_memory"
                },
                "FUN_080090b4": {
                    "1": "lock_memory"
                },
                "FUN_08009a18": {
                    "1": "realloc_memory"
                },
                "FUN_08009adc": {
                    "1": "improved_malloc",
                    "2": "allocate_or_resize_memory",
                    "22": "allocate_memory"
                },
                "__malloc_lock": {
                    "1": "lock_memory"
                },
                "__malloc_unlock": {
                    "1": "unlock_memory"
                },
                "_free_r": {
                    "1": "free_memory_r"
                },
                "_malloc_r": {
                    "1": "allocate_memory_r"
                },
                "iVar11": {
                    "1": "mem_end",
                    "2": "aligned_ptr"
                },
                "iVar2": {
                    "1": "size_difference",
                    "10": "temp_var",
                    "2": "offset"
                },
                "iVar5": {
                    "1": "size_prev",
                    "2": "temp_var_3",
                    "3": "temp_var2",
                    "6": "temp_var3"
                },
                "memmove": {
                    "1": "move_memory"
                },
                "param_1": {
                    "1": "context",
                    "3": "lock",
                    "4": "lock_ptr",
                    "5": "allocator"
                },
                "param_2": {
                    "1": "param_2",
                    "14": "ptr",
                    "4": "old_memory",
                    "6": "existing_memory"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "requested_size",
                    "22": "size",
                    "5": "new_size"
                },
                "piVar1": {
                    "1": "temp_ptr1",
                    "2": "temp_ptr",
                    "3": "ptr1",
                    "7": "new_ptr",
                    "9": "new_memory"
                },
                "piVar3": {
                    "1": "result",
                    "2": "prev_ptr",
                    "4": "new_ptr",
                    "5": "temp_ptr"
                },
                "piVar7": {
                    "1": "temp_memory2",
                    "2": "temp_ptr"
                },
                "uVar10": {
                    "1": "temp_var_10",
                    "2": "var10",
                    "7": "total_size"
                },
                "uVar4": {
                    "1": "header_size",
                    "2": "temp_var_2",
                    "6": "temp_var2"
                },
                "uVar6": {
                    "1": "temp3",
                    "2": "prev_size",
                    "4": "temp_var4"
                },
                "uVar8": {
                    "1": "flag2",
                    "17": "aligned_size",
                    "2": "var8"
                },
                "uVar9": {
                    "1": "temp4",
                    "2": "temp_var6",
                    "3": "remaining_size"
                }
            },
            "called": [
                "FUN_08008af8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_080097cc"
            ],
            "code": "\nint * allocate_memory_08009adc(undefined4 *allocator,int *ptr,uint size)\n\n{\n  int *new_memory;\n  int temp_var;\n  int *temp_ptr;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int *ptr3;\n  uint aligned_size;\n  uint remaining_size;\n  uint total_size;\n  int end_pointer;\n  \n  if (ptr == (int *)0x0) {\n    temp_ptr = (int *)allocate_memory_08009adc_r(allocator,size);\n    return temp_ptr;\n  }\n  lock_memory();\n  temp_var4 = ptr[-1];\n  remaining_size = temp_var4 & 0xfffffffc;\n  temp_ptr = ptr + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < size) {\nLAB_08009b8e:\n    *allocator = 0xc;\n    return (int *)0x0;\n  }\n  end_pointer = (int)temp_ptr + remaining_size;\n  total_size = remaining_size;\n  if ((int)remaining_size < (int)aligned_size) {\n    if (DAT_20000454 == end_pointer) {\n      end_pointer = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + remaining_size;\n      if ((int)(aligned_size + 0x10) <= end_pointer) {\n        DAT_20000454 = (int)temp_ptr + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = end_pointer - aligned_size | 1;\n        ptr[-1] = aligned_size | ptr[-1] & 1U;\n        unlock_memory(allocator);\n        return ptr;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        new_memory = (int *)((int)temp_ptr - ptr[-2]);\n        temp_var4 = new_memory[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(end_pointer + temp_var4)) {\n          temp_var3 = new_memory[3];\n          temp_ptr = new_memory + 2;\n          temp_var = *temp_ptr;\n          remaining_size = remaining_size - 4;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          *(int *)(temp_var3 + 8) = temp_var;\n          if (remaining_size < 0x25) {\n            temp_var = *ptr;\n            ptr3 = temp_ptr;\n            if (0x13 < remaining_size) {\n              new_memory[2] = temp_var;\n              new_memory[3] = ptr[1];\n              temp_var = ptr[2];\n              if (remaining_size < 0x1c) {\n                ptr = ptr + 2;\n                ptr3 = new_memory + 4;\n              }\n              else {\n                new_memory[4] = temp_var;\n                new_memory[5] = ptr[3];\n                temp_var = ptr[4];\n                if (remaining_size == 0x24) {\n                  new_memory[6] = temp_var;\n                  new_memory[7] = ptr[5];\n                  temp_var = ptr[6];\n                  ptr = ptr + 6;\n                  ptr3 = new_memory + 8;\n                }\n                else {\n                  ptr = ptr + 4;\n                  ptr3 = new_memory + 6;\n                }\n              }\n            }\n            *ptr3 = temp_var;\n            ptr3[1] = ptr[1];\n            ptr3[2] = ptr[2];\n          }\n          else {\n            move_memory(temp_ptr,ptr);\n          }\n          DAT_20000454 = (int)new_memory + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (end_pointer + temp_var4) - aligned_size | 1;\n          new_memory[1] = aligned_size | new_memory[1] & 1U;\n          unlock_memory(allocator);\n          return temp_ptr;\n        }\nLAB_08009bb0:\n        total_size = remaining_size + temp_var4;\n        if ((int)aligned_size <= (int)total_size) {\n          temp_var3 = new_memory[3];\n          ptr3 = new_memory + 2;\n          temp_var = *ptr3;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          end_pointer = (int)new_memory + total_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n          temp_ptr = new_memory;\n          if (remaining_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          move_memory(ptr3,ptr);\n          ptr = ptr3;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(end_pointer + 4) & 0xfffffffe) + end_pointer + 4) << 0x1f) {\n        temp_var2 = *(uint *)(end_pointer + 4) & 0xfffffffc;\n        total_size = remaining_size + temp_var2;\n        if ((int)total_size < (int)aligned_size) {\n          if ((int)(temp_var4 << 0x1f) < 0) goto LAB_08009b36;\n          new_memory = (int *)((int)temp_ptr - ptr[-2]);\n          temp_var4 = new_memory[1] & 0xfffffffc;\n          total_size = temp_var2 + temp_var4 + remaining_size;\n          if ((int)total_size < (int)aligned_size) goto LAB_08009bb0;\n          temp_var = *(int *)(end_pointer + 8);\n          end_pointer = *(int *)(end_pointer + 0xc);\n          *(int *)(temp_var + 0xc) = end_pointer;\n          *(int *)(end_pointer + 8) = temp_var;\n          ptr3 = new_memory + 2;\n          temp_var = *ptr3;\n          temp_var3 = new_memory[3];\n          *(int *)(temp_var + 0xc) = temp_var3;\n          end_pointer = (int)new_memory + total_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n          temp_ptr = new_memory;\n          if (0x24 < remaining_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          remaining_size = remaining_size - 4;\n          temp_var = *ptr;\n          new_memory = ptr3;\n          if (0x13 < remaining_size) {\n            temp_ptr[2] = temp_var;\n            temp_ptr[3] = ptr[1];\n            temp_var = ptr[2];\n            if (remaining_size < 0x1c) {\n              ptr = ptr + 2;\n              new_memory = temp_ptr + 4;\n            }\n            else {\n              temp_ptr[4] = temp_var;\n              temp_ptr[5] = ptr[3];\n              temp_var = ptr[4];\n              if (remaining_size == 0x24) {\n                temp_ptr[6] = temp_var;\n                temp_ptr[7] = ptr[5];\n                temp_var = ptr[6];\n                ptr = ptr + 6;\n                new_memory = temp_ptr + 8;\n              }\n              else {\n                ptr = ptr + 4;\n                new_memory = temp_ptr + 6;\n              }\n            }\n          }\n          *new_memory = temp_var;\n          new_memory[1] = ptr[1];\n          new_memory[2] = ptr[2];\n          ptr = ptr3;\n        }\n        else {\n          temp_var = *(int *)(end_pointer + 8);\n          temp_var3 = *(int *)(end_pointer + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var3;\n          end_pointer = (int)temp_ptr + total_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var4 << 0x1f)) {\n        new_memory = (int *)((int)temp_ptr - ptr[-2]);\n        temp_var4 = new_memory[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory = (int *)allocate_memory_08009adc_r(allocator,size);\n    if (new_memory != (int *)0x0) {\n      if ((int *)((ptr[-1] & 0xfffffffeU) + (int)temp_ptr) == new_memory + -2) {\n        total_size = remaining_size + (new_memory[-1] & 0xfffffffcU);\n        end_pointer = (int)temp_ptr + total_size;\n        goto LAB_08009c00;\n      }\n      remaining_size = remaining_size - 4;\n      if (remaining_size < 0x25) {\n        end_pointer = *ptr;\n        temp_ptr = ptr;\n        ptr3 = new_memory;\n        if (0x13 < remaining_size) {\n          *new_memory = end_pointer;\n          new_memory[1] = ptr[1];\n          if (remaining_size < 0x1c) {\n            end_pointer = ptr[2];\n            temp_ptr = ptr + 2;\n            ptr3 = new_memory + 2;\n          }\n          else {\n            new_memory[2] = ptr[2];\n            new_memory[3] = ptr[3];\n            if (remaining_size == 0x24) {\n              new_memory[4] = ptr[4];\n              new_memory[5] = ptr[5];\n              end_pointer = ptr[6];\n              temp_ptr = ptr + 6;\n              ptr3 = new_memory + 6;\n            }\n            else {\n              end_pointer = ptr[4];\n              temp_ptr = ptr + 4;\n              ptr3 = new_memory + 4;\n            }\n          }\n        }\n        *ptr3 = end_pointer;\n        ptr3[1] = temp_ptr[1];\n        ptr3[2] = temp_ptr[2];\n      }\n      else {\n        move_memory(new_memory,ptr);\n      }\n      free_memory_r(allocator,ptr);\n    }\n    unlock_memory(allocator);\n    ptr = new_memory;\n  }\n  else {\nLAB_08009c00:\n    if (total_size - aligned_size < 0x10) {\n      temp_ptr[1] = temp_ptr[1] & 1U | total_size;\n      *(uint *)(end_pointer + 4) = *(uint *)(end_pointer + 4) | 1;\n    }\n    else {\n      temp_ptr[1] = temp_ptr[1] & 1U | aligned_size;\n      *(uint *)((int)temp_ptr + aligned_size + 4) = total_size - aligned_size | 1;\n      *(uint *)(end_pointer + 4) = *(uint *)(end_pointer + 4) | 1;\n      free_memory_r(allocator,(int)temp_ptr + aligned_size + 8);\n    }\n    unlock_memory(allocator);\n  }\n  return ptr;\n}\n\n",
            "current_name": "allocate_memory_08009adc",
            "entrypoint": "0x08009adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_free_r": "free_memory_r",
                "_malloc_r": "allocate_memory_r",
                "iVar11": "end_pointer",
                "iVar2": "temp_var",
                "iVar5": "temp_var3",
                "memmove": "move_memory",
                "param_1": "allocator",
                "param_2": "ptr",
                "param_3": "size",
                "piVar1": "new_memory",
                "piVar3": "temp_ptr",
                "piVar7": "ptr3",
                "uVar10": "total_size",
                "uVar4": "temp_var2",
                "uVar6": "temp_var4",
                "uVar8": "aligned_size",
                "uVar9": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009e68": {
            "called": [],
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e68",
            "entrypoint": "0x08009e68",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08009e74": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e74",
            "entrypoint": "0x08009e74",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "FUN_080057e8",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 686945
}