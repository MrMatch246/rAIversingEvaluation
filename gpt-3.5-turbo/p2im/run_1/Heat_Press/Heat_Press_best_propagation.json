{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_2007089c": {
                    "18": "flag"
                },
                "FUN_000800F4": {
                    "1": "initialize_flag"
                },
                "FUN_000800f4": {
                    "1": "toggle_state",
                    "20": "initialize_flag",
                    "4": "set_flag_if_not_set"
                },
                "param_1": {
                    "1": "state",
                    "10": "input_value",
                    "15": "input",
                    "2": "input_parameter",
                    "3": "input_param"
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "(**param_1 + 0xc)": {
                    "1": "inner_function"
                },
                "(int)param_1 + 0x49": {
                    "1": "value1_location"
                },
                "(int)param_1 + 0x4a": {
                    "1": "value2_location"
                },
                "(int)param_1 + 0x52": {
                    "1": "value3_location"
                },
                "(int)param_1 + 6": {
                    "1": "pin_location"
                },
                "*(byte *)((int)param_1 + 6)": {
                    "1": "pin_number"
                },
                "*(code **)(DAT_20070b60 + 0x18)": {
                    "1": "initialize_data_function"
                },
                "*(undefined *)((int)param_1 + 6)": {
                    "1": "pin_mode_value"
                },
                "*(undefined2 *)(param_1 + 0x14)": {
                    "1": "value5_location"
                },
                "*(undefined2 *)(param_1 + 0x15)": {
                    "1": "value4_location"
                },
                "FUN_00080164": {
                    "1": "initialize_components",
                    "18": "initialize_device",
                    "4": "initialize_peripheral"
                },
                "FUN_00081210": {
                    "1": "perform_operation",
                    "2": "do_something",
                    "4": "check_status"
                },
                "FUN_00081318": {
                    "1": "configure_peripheral",
                    "2": "send_data"
                },
                "byte": {
                    "2": "uint8"
                },
                "byte_1": {
                    "1": "config_value"
                },
                "byte_2": {
                    "1": "pin_value"
                },
                "digitalWrite": {
                    "1": "write_digital",
                    "2": "write_digital_pin",
                    "3": "write_to_pin"
                },
                "iVar1": {
                    "20": "result",
                    "3": "status",
                    "8": "return_value"
                },
                "param_1": {
                    "1": "value1",
                    "2": "device",
                    "3": "device_ptr",
                    "6": "device_data"
                },
                "param_1 + 0x14": {
                    "1": "variable5"
                },
                "param_1 + 0x15": {
                    "1": "variable3"
                },
                "param_1 + 0x49": {
                    "1": "variable1"
                },
                "param_1 + 0x4a": {
                    "1": "variable2"
                },
                "param_1 + 0x52": {
                    "1": "variable4"
                },
                "param_1 + 6": {
                    "1": "pin_number"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "mode"
                },
                "param_3": {
                    "1": "mode_value",
                    "2": "param"
                },
                "pinMode": {
                    "7": "set_pin_mode"
                }
            },
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000804a8"
            ],
            "code": "\nvoid initialize_device_00080164(int **device_data)\n\n{\n  int result;\n  \n  *device_data = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(uint8 *)((int)device_data + 6)) {\n    set_pin_mode(*(uint8 *)((int)device_data + 6),1);\n    write_to_pin(*(undefined *)((int)device_data + 6),0);\n  }\n  do {\n    result = (**(code **)(**device_data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)device_data + 0x49) = 0;\n  *(undefined *)((int)device_data + 0x4a) = 0;\n  *(undefined2 *)(device_data + 0x15) = 0;\n  *(undefined2 *)((int)device_data + 0x52) = 0;\n  *(undefined2 *)(device_data + 0x14) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_device_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "initialize_device_00080164",
                "byte": "uint8",
                "digitalWrite": "write_to_pin",
                "iVar1": "result",
                "param_1": "device_data",
                "pinMode": "set_pin_mode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801b0": {
            "additional_data": {
                "*(byte *)(data + 5)": {
                    "1": "size"
                },
                "*(byte *)(data + 6)": {
                    "1": "pin"
                },
                "*(undefined *)(data + 0x49)": {
                    "1": "buffer"
                },
                "FUN_000801b0": {
                    "1": "update_sensor_data",
                    "27": "process_data"
                },
                "FUN_00081318": {
                    "1": "perform_operation",
                    "2": "sub_function"
                },
                "bVar1": {
                    "1": "exceed_limit",
                    "2": "is_over_threshold",
                    "3": "flag",
                    "4": "exceeded_limit",
                    "5": "is_full",
                    "8": "is_overflow"
                },
                "bVar5": {
                    "1": "current_index",
                    "11": "temp",
                    "2": "counter",
                    "3": "temp_byte",
                    "5": "byte_value"
                },
                "byte": {
                    "1": "byte"
                },
                "cVar3": {
                    "1": "current_value",
                    "14": "counter"
                },
                "char": {
                    "1": "byte"
                },
                "code": {
                    "1": "func_ptr",
                    "2": "function_pointer"
                },
                "code **": {
                    "1": "function_ptr"
                },
                "code **(functionPtr + 0xc)": {
                    "1": "get_value"
                },
                "code **(functionPtr + 8)": {
                    "1": "process_code"
                },
                "digitalWrite": {
                    "1": "toggle_pin_state",
                    "2": "set_pin"
                },
                "iVar4": {
                    "10": "result",
                    "17": "return_value",
                    "4": "status"
                },
                "int": {
                    "1": "byte"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_data",
                    "24": "data"
                },
                "param_1 + 0x49": {
                    "1": "data_index"
                },
                "param_2": {
                    "2": "param2"
                },
                "param_3": {
                    "2": "param3"
                },
                "result": {
                    "1": "function_result"
                },
                "short": {
                    "1": "int"
                },
                "uVar2": {
                    "1": "current_value",
                    "20": "result",
                    "3": "temp_value",
                    "6": "value"
                },
                "undefined": {
                    "1": "byte"
                }
            },
            "called": [
                "FUN_00081318"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nbyte process_data_000801b0(byte **data)\n\n{\n  bool is_overflow;\n  byte result;\n  byte counter;\n  byte return_value;\n  byte temp;\n  \n  if (1 < *(byte *)((byte)data + 6)) {\n    set_pin(*(byte *)((byte)data + 6),0);\n  }\n  is_overflow = false;\n  *(byte *)((byte)data + 0x49) = 0;\n  if (*(byte *)((byte)data + 5) < 4) {\n    while (return_value = (**(function_pointer **)(**data + 8))(), return_value != 0) {\n      temp = *(byte *)((byte)data + 0x49);\n      result = (**(function_pointer **)(**data + 0xc))();\n      counter = *(byte *)((byte)data + 0x49);\n      *(byte *)((byte)data + temp + 9) = result;\n      temp = counter + 1;\n      *(byte *)((byte)data + 0x49) = temp;\n      if (0x3f < temp) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(int *)(data + 0x14) = *(int *)(data + 0x14) + 1;\n  if (is_overflow) {\n    counter = -3;\n    *(int *)(data + 0x15) = *(int *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(byte *)((byte)data + 0x49);\n  }\n  return (byte)counter;\n}\n\n",
            "current_name": "process_data_000801b0",
            "entrypoint": "0x000801b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "bVar1": "is_overflow",
                "bVar5": "temp",
                "cVar3": "counter",
                "char": "byte",
                "code": "function_pointer",
                "digitalWrite": "set_pin",
                "iVar4": "return_value",
                "int": "byte",
                "param_1": "data",
                "short": "int",
                "uVar2": "result",
                "undefined": "byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008021c": {
            "additional_data": {
                "(iVar1 - param_1 & 0xffU) < param_2": {
                    "1": "is_within_data_range"
                },
                "(uVar2 & 0xff) << 8 | uVar2 >> 8": {
                    "1": "reversed_crc"
                },
                "0xa001": {
                    "1": "polynomial"
                },
                "0xffff": {
                    "1": "initial_value"
                },
                "FUN_0008021c": {
                    "1": "crc16_checksum",
                    "2": "calculate_crc",
                    "25": "calculate_checksum"
                },
                "cVar3": {
                    "1": "bit_index",
                    "16": "bit_counter",
                    "2": "counter",
                    "4": "bit_shift_counter",
                    "6": "bit_count"
                },
                "cVar3 + -1": {
                    "1": "decrement_counter"
                },
                "iVar1": {
                    "1": "current_offset",
                    "13": "current_index",
                    "5": "index",
                    "8": "current_address"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "data_ptr",
                    "3": "data_address",
                    "6": "data_start_index",
                    "7": "start_address"
                },
                "param_2": {
                    "1": "byte_count",
                    "10": "length",
                    "19": "data_length"
                },
                "uVar2": {
                    "1": "temp_checksum",
                    "23": "checksum",
                    "3": "crc"
                },
                "uVar2 & 0xff": {
                    "1": "high_byte"
                },
                "uVar2 >> 8": {
                    "1": "upper_byte"
                },
                "uVar2 ^ *(byte *)(iVar1 + 9)": {
                    "1": "xor_result"
                },
                "uVar4": {
                    "1": "shifted_bit",
                    "10": "bit_value",
                    "14": "bit",
                    "2": "bit_mask"
                },
                "uVar5": {
                    "1": "temp_checksum"
                },
                "uVar6": {
                    "1": "temp_check"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080258"
            ],
            "code": "\nuint calculate_checksum_0008021c(int start_address,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_counter;\n  uint bit;\n  \n  checksum = 0xffff;\n  for (current_index = start_address; (current_index - start_address & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_counter = '\\b';\n    do {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "current_name": "calculate_checksum_0008021c",
            "entrypoint": "0x0008021c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "cVar3": "bit_counter",
                "iVar1": "current_index",
                "param_1": "start_address",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar4": "bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080258": {
            "additional_data": {
                "FUN_0008021c": {
                    "1": "calculate_checksum"
                },
                "FUN_00080258": {
                    "1": "calculate_crc_and_set_values",
                    "2": "update_and_calculate_crc",
                    "3": "update_checksum_and_state"
                },
                "FUN_00081318": {
                    "1": "send_data"
                },
                "F_00080258": {
                    "1": "calculate_and_store_crc"
                },
                "bVar1": {
                    "1": "crc_value",
                    "17": "byte_value",
                    "2": "crc_byte",
                    "5": "checksum"
                },
                "calcCRC": {
                    "14": "calculate_crc",
                    "2": "calculate_checksum"
                },
                "digitalWrite": {
                    "1": "set_digital_state",
                    "2": "set_digital_pin_state",
                    "4": "set_pin_state",
                    "6": "set_digital_output"
                },
                "iVar3": {
                    "1": "loop_index",
                    "11": "result",
                    "2": "iteration_count",
                    "4": "loop_counter",
                    "5": "return_value"
                },
                "millis": {
                    "4": "get_current_millis",
                    "6": "get_milliseconds",
                    "7": "get_current_time"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_pointer",
                    "24": "data"
                },
                "param_2": {
                    "1": "crc_start",
                    "15": "param2",
                    "2": "param",
                    "4": "value1"
                },
                "param_3": {
                    "1": "arg3",
                    "16": "param3",
                    "2": "size",
                    "3": "param_3",
                    "4": "value2"
                },
                "param_4": {
                    "1": "action2",
                    "16": "param4",
                    "3": "param_4",
                    "4": "value3"
                },
                "uVar2": {
                    "1": "result",
                    "13": "crc_value",
                    "3": "checksum",
                    "4": "crc",
                    "6": "calculated_crc"
                },
                "uVar4": {
                    "1": "checksum_unsigned",
                    "2": "byte_value_uint",
                    "4": "checksum_value",
                    "5": "converted_byte_value"
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_0008021c",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000802da"
            ],
            "code": "\nvoid update_checksum_and_state_00080258(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byte_value;\n  undefined2 crc_value;\n  int result;\n  uint converted_byte_value;\n  \n  byte_value = *(byte *)((int)data + 0x49);\n  converted_byte_value = (uint)byte_value;\n  crc_value = calculate_crc(data,converted_byte_value,param3,param4,param4);\n  *(char *)((int)data + converted_byte_value + 9) = (char)((ushort)crc_value >> 8);\n  *(char *)((int)data + (converted_byte_value + 1 & 0xff) + 9) = (char)crc_value;\n  *(byte *)((int)data + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    set_digital_output(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    set_digital_output(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = get_current_time();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "current_name": "update_checksum_and_state_00080258",
            "entrypoint": "0x00080258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080258": "update_checksum_and_state_00080258",
                "bVar1": "byte_value",
                "calcCRC": "calculate_crc",
                "digitalWrite": "set_digital_output",
                "iVar3": "result",
                "millis": "get_current_time",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "crc_value",
                "uVar4": "converted_byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000802da": {
            "additional_data": {
                "FUN_000802da": {
                    "1": "validate_input_params",
                    "11": "process_data",
                    "2": "parse_data"
                },
                "bVar2": {
                    "1": "temp_var",
                    "10": "byte_var",
                    "12": "temp_byte",
                    "4": "byte_val"
                },
                "cVar1": {
                    "1": "return_value",
                    "11": "error_code",
                    "15": "result",
                    "2": "result_code"
                },
                "local_18": {
                    "1": "ushort_var",
                    "2": "temp_short1"
                },
                "local_1a": {
                    "1": "temp_undefined"
                },
                "local_1b": {
                    "1": "param2_high",
                    "2": "temp_byte2",
                    "4": "byte2"
                },
                "local_1c": {
                    "1": "local_byte1",
                    "2": "temp_byte1",
                    "4": "byte1"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "buffer",
                    "2": "input_data",
                    "3": "data_ptr",
                    "4": "input_buffer"
                },
                "param_2": {
                    "1": "key",
                    "2": "param1",
                    "3": "value1",
                    "7": "flags"
                },
                "param_3": {
                    "1": "flag_value",
                    "2": "param2",
                    "3": "flag2",
                    "5": "length",
                    "6": "value"
                },
                "param_4": {
                    "1": "payload",
                    "11": "data",
                    "2": "data_ptr",
                    "4": "buffer"
                },
                "puVar6": {
                    "1": "pointer_value",
                    "2": "pointer",
                    "3": "ptr",
                    "4": "temp_pointer",
                    "7": "temp_ptr"
                },
                "sendTxBuffer": {
                    "1": "transmit_data"
                },
                "uVar3": {
                    "1": "undefined_val",
                    "2": "temp1",
                    "3": "temp_byte2",
                    "4": "temp_undefined",
                    "6": "temp",
                    "7": "temp_value"
                },
                "uVar4": {
                    "1": "temp_value2",
                    "2": "temp_ushort",
                    "3": "temp_u_short",
                    "4": "ushort_value",
                    "5": "temp2"
                },
                "uVar5": {
                    "1": "uint_val",
                    "2": "temp_var",
                    "4": "uint_var",
                    "5": "temp3"
                }
            },
            "called": [
                "FUN_00080258"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint process_data_000802da(int buffer,uint flags,uint value,ushort *data)\n\n{\n  char result;\n  byte temp_byte;\n  undefined temp_value;\n  ushort temp_short;\n  uint temp_u_int;\n  ushort *temp_ptr;\n  undefined byte1;\n  undefined byte2;\n  ushort temp_short1;\n  \n  byte1 = (undefined)flags;\n  byte2 = (undefined)(flags >> 8);\n  temp_short1 = (ushort)value;\n  temp_u_int = value & 0xffff;\n  if (*(char *)(buffer + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(buffer + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flags & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(buffer + 9) = byte1;\n  *(undefined *)(buffer + 10) = byte2;\n  *(ushort **)(buffer + 0x4c) = data;\n  *(char *)(buffer + 0xb) = (char)(flags >> 0x18);\n  *(char *)(buffer + 0xc) = (char)(flags >> 0x10);\n  temp_value = (undefined)(value >> 8);\n  switch(byte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(buffer + 0xd) = temp_value;\n    break;\n  case 5:\n    temp_short = *data;\n    if (temp_short != 0) {\n      temp_short = 1;\n    }\n    *(char *)(buffer + 0xd) = -(char)temp_short;\n    temp_u_int = 0;\n    break;\n  case 6:\n    *(char *)(buffer + 0xd) = (char)(*data >> 8);\n    temp_u_int = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    temp_byte = (byte)(temp_short1 >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      temp_byte = temp_byte + 1;\n    }\n    *(char *)(buffer + 0xe) = (char)value;\n    *(undefined *)(buffer + 0xd) = temp_value;\n    *(byte *)(buffer + 0xf) = temp_byte;\n    temp_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(buffer + 0xd) = temp_value;\n    *(char *)(buffer + 0xe) = (char)value;\n    data = data + -1;\n    *(char *)(buffer + 0xf) = (char)temp_u_int * '\\x02';\n    *(undefined *)(buffer + 0x49) = 7;\n    temp_ptr = data + temp_u_int;\n    while (data != temp_ptr) {\n      temp_byte = *(byte *)(buffer + 0x49);\n      *(char *)(buffer + (uint)temp_byte + 9) = (char)(data[1] >> 8);\n      temp_u_int = temp_byte + 1 & 0xff;\n      *(char *)(buffer + 0x49) = (char)temp_u_int;\n      data = data + 1;\n      *(char *)(temp_u_int + buffer + 9) = (char)*data;\n      *(byte *)(buffer + 0x49) = temp_byte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(buffer + 0xe) = (char)temp_u_int;\n  temp_value = 6;\nLAB_0008034a:\n  *(undefined *)(buffer + 0x49) = temp_value;\nswitchD_0008031e_caseD_7:\n  transmit_data(buffer);\n  *(undefined *)(buffer + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "current_name": "process_data_000802da",
            "entrypoint": "0x000802da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000802da": "process_data_000802da",
                "bVar2": "temp_byte",
                "cVar1": "result",
                "local_18": "temp_short1",
                "local_1b": "byte2",
                "local_1c": "byte1",
                "param_1": "buffer",
                "param_2": "flags",
                "param_3": "value",
                "param_4": "data",
                "puVar6": "temp_ptr",
                "sendTxBuffer": "transmit_data",
                "uVar3": "temp_value",
                "uVar4": "temp_short",
                "uVar5": "temp_u_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803d4": {
            "additional_data": {
                "&DAT_00084d10": {
                    "1": "array_comparison",
                    "2": "byte_array"
                },
                "&DAT_00084d10[iVar1]": {
                    "1": "array_element"
                },
                "(int)((uint)*(byte *)(param_1 + 10) << 0x18)": {
                    "1": "shifted_value"
                },
                "* (byte *)(param_1 + 10)": {
                    "1": "value_at_input_plus_10"
                },
                "*(byte *)(param_1 + 10)": {
                    "1": "value_at_offset_10",
                    "2": "input_byte",
                    "3": "value",
                    "4": "byte_value"
                },
                "*(short *)(param_1 + 0x54)": {
                    "1": "counter_plus_84",
                    "9": "counter"
                },
                "*(short *)(param_1 + 0x54) + 1": {
                    "1": "counter_incremented"
                },
                "*byte": {
                    "1": "byte_array"
                },
                "0": {
                    "1": "valid_result"
                },
                "0xfb": {
                    "1": "invalid_result"
                },
                "8": {
                    "1": "array_length"
                },
                "DAT_00084d10": {
                    "1": "data_array"
                },
                "FUN_000803d4": {
                    "1": "check_condition",
                    "2": "check_byte_value",
                    "3": "check_and_increment",
                    "6": "check_value"
                },
                "byte_10": {
                    "1": "value"
                },
                "iVar1": {
                    "1": "iterator",
                    "25": "index",
                    "4": "counter"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "value",
                    "13": "input_value",
                    "3": "data",
                    "4": "input"
                },
                "short_54": {
                    "1": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nundefined4 check_and_update_value_000803d4(int input_value)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input_value + 10) << 0x18) < 0) {\n    *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input_value + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n  return 1;\n}\n\n",
            "current_name": "check_and_update_value_000803d4",
            "entrypoint": "0x000803d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "iVar1": "index",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080410": {
            "additional_data": {
                "FUN_00080410": {
                    "1": "extract_words",
                    "18": "process_data",
                    "2": "process_function",
                    "4": "extract_data"
                },
                "FUN_000815f8": {
                    "1": "make_word"
                },
                "bVar3": {
                    "1": "index",
                    "25": "counter",
                    "3": "count"
                },
                "iVar2": {
                    "1": "adjusted_index",
                    "2": "new_address",
                    "3": "temp_var1",
                    "4": "index",
                    "8": "offset"
                },
                "iVar5": {
                    "1": "dest_address",
                    "2": "temp_var2",
                    "4": "data_address",
                    "5": "array_pointer",
                    "6": "array_address"
                },
                "makeWord": {
                    "1": "create_word"
                },
                "param_1": {
                    "1": "input_pointer",
                    "10": "data_address",
                    "2": "input_address",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "unused_param2",
                    "24": "param2",
                    "3": "param1"
                },
                "param_3": {
                    "1": "param_value2",
                    "24": "param3",
                    "3": "param2"
                },
                "param_4": {
                    "1": "byte_to_pass",
                    "25": "param4",
                    "3": "param3"
                },
                "uVar1": {
                    "1": "encoded_value",
                    "8": "result",
                    "9": "word"
                },
                "uVar4": {
                    "1": "byte_value",
                    "2": "byte_val",
                    "3": "byte_index",
                    "7": "index",
                    "8": "converted_counter"
                }
            },
            "called": [
                "FUN_000815f8"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nvoid process_data_00080410(int data_address,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 word;\n  int offset;\n  byte counter;\n  uint converted_counter;\n  int array_address;\n  \n  counter = 0;\n  while( true ) {\n    converted_counter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data_address + 0xb) >> 1 <= converted_counter) break;\n    offset = (converted_counter * 2 + 3 & 0xff) + data_address;\n    array_address = *(int *)(data_address + 0x4c);\n    word = create_word(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                     *(byte *)(data_address + 0xb),param4);\n    *(undefined2 *)(array_address + converted_counter * 2) = word;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00080410",
            "entrypoint": "0x00080410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "bVar3": "counter",
                "iVar2": "offset",
                "iVar5": "array_address",
                "makeWord": "create_word",
                "param_1": "data_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "word",
                "uVar4": "converted_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008043e": {
            "additional_data": {
                "FUN_0008043e": {
                    "1": "check_data",
                    "12": "process_data",
                    "3": "check_and_process_data",
                    "4": "check_answer"
                },
                "cVar1": {
                    "1": "answer_status",
                    "20": "result",
                    "5": "status"
                },
                "getRxBuffer": {
                    "1": "retrieve_data"
                },
                "get_FC3": {
                    "1": "fetch_fc3"
                },
                "iVar4": {
                    "1": "validation_status",
                    "29": "validation_result"
                },
                "param_1": {
                    "1": "parameters",
                    "14": "data",
                    "3": "input_data"
                },
                "piVar3": {
                    "1": "time_pointer",
                    "25": "current_time",
                    "5": "current_millis"
                },
                "uVar2": {
                    "1": "callback_result",
                    "2": "response",
                    "7": "function_result",
                    "8": "result",
                    "9": "return_value"
                },
                "unaff_r6": {
                    "1": "byte_value",
                    "11": "buffer_size",
                    "2": "counter",
                    "7": "buffer_length"
                },
                "validateAnswer": {
                    "2": "check_answer"
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint process_data_0008043e(int **data)\n\n{\n  char result;\n  uint return_value;\n  int *current_time;\n  int validation_result;\n  uint buffer_size;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    return_value = (**(code **)(**data + 8))();\n    buffer_size = return_value & 0xff;\n  }\n  current_time = (int *)millis();\n  if (data[0x17] < current_time) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < buffer_size) {\n    retrieve_data(data);\n    validation_result = check_answer(data);\n    if (validation_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        fetch_fc3(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)validation_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "current_name": "process_data_0008043e",
            "entrypoint": "0x0008043e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "cVar1": "result",
                "getRxBuffer": "retrieve_data",
                "get_FC3": "fetch_fc3",
                "iVar4": "validation_result",
                "param_1": "data",
                "piVar3": "current_time",
                "uVar2": "return_value",
                "unaff_r6": "buffer_size",
                "validateAnswer": "check_answer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000804a8": {
            "additional_data": {
                "FUN_000804a8": {
                    "1": "initialize_sensor",
                    "2": "initialize_and_configure_devices",
                    "3": "initialize_system",
                    "5": "initialize_and_configure",
                    "7": "initialize_device",
                    "9": "initialize_and_configure_device"
                },
                "channel_index": {
                    "1": "index",
                    "3": "channel_index"
                },
                "configure_adc_channel_00081210": {
                    "31": "configure_adc_channel"
                },
                "configure_pin_00081318": {
                    "30": "configure_pin"
                },
                "device_data": {
                    "1": "data",
                    "3": "device_data"
                },
                "digitalWrite": {
                    "1": "set_digital_value",
                    "2": "set_digital_state"
                },
                "iVar1": {
                    "2": "current_time"
                },
                "initialize_device_00080164": {
                    "28": "initialize_device",
                    "3": "initialize_device_data"
                },
                "millis": {
                    "1": "get_current_millis",
                    "2": "get_current_time"
                },
                "mode": {
                    "1": "mode"
                },
                "param": {
                    "1": "pin_param",
                    "3": "parameter"
                },
                "pinMode": {
                    "2": "configure_pin_mode",
                    "9": "set_pin_mode"
                },
                "pin_number": {
                    "1": "number",
                    "3": "pin_number"
                },
                "software_interrupt": {
                    "1": "perform_software_interrupt",
                    "2": "trigger_software_interrupt"
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_00081210",
                "FUN_00081318",
                "FUN_00080164"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nundefined8 initialize_and_configure_device_000804a8(void)\n\n{\n  int current_time;\n  \n  set_pin_mode(1,0);\n  set_pin_mode(6,1);\n  set_pin_mode(0,1);\n  set_pin_mode(1,1);\n  write_digital_pin(0,0);\n  write_digital_pin(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_device(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_current_time();\n  current_time = get_current_time();\n  DAT_200709e0 = current_time + 1000;\n  current_time = get_current_time();\n  DAT_20070a48 = current_time + 1000;\n  current_time = get_current_time();\n  DAT_20070934 = current_time + 1000;\n  current_time = get_current_time();\n  DAT_200708c0 = current_time + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    trigger_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_and_configure_device_000804a8",
            "entrypoint": "0x000804a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000804a8": "initialize_and_configure_device_000804a8",
                "digitalWrite": "write_digital_pin",
                "iVar1": "current_time",
                "initialize_device_00080164": "initialize_device",
                "millis": "get_current_time",
                "pinMode": "set_pin_mode",
                "software_interrupt": "trigger_software_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805d0": {
            "additional_data": {
                "DAT_200708bc": {
                    "1": "temp_value10"
                },
                "DAT_200708c0": {
                    "1": "timer"
                },
                "DAT_200708c4": {
                    "1": "prev_value"
                },
                "DAT_200708c8": {
                    "1": "last_poll_time",
                    "2": "prev_time"
                },
                "DAT_200708ce": {
                    "1": "temp_value1"
                },
                "DAT_200708d0": {
                    "1": "temp_value2"
                },
                "DAT_200708d8": {
                    "1": "temp_float5"
                },
                "DAT_200708da": {
                    "1": "temp_value3"
                },
                "DAT_200708dc": {
                    "1": "float_var5"
                },
                "DAT_200708de": {
                    "1": "float_var7"
                },
                "DAT_200708e4": {
                    "1": "temp_value6"
                },
                "DAT_200708e8": {
                    "1": "temp_value7"
                },
                "DAT_200708ea": {
                    "1": "temp_value8"
                },
                "DAT_20070902": {
                    "1": "difference1"
                },
                "DAT_20070904": {
                    "1": "output_value2"
                },
                "DAT_20070906": {
                    "1": "var1"
                },
                "DAT_20070908": {
                    "1": "sensor_var15"
                },
                "DAT_2007090c": {
                    "1": "var13"
                },
                "DAT_20070910": {
                    "1": "result7"
                },
                "DAT_20070914": {
                    "1": "result2"
                },
                "DAT_20070918": {
                    "1": "flag2"
                },
                "DAT_2007091c": {
                    "1": "result8"
                },
                "DAT_20070920": {
                    "1": "sensor_data2"
                },
                "DAT_20070924": {
                    "1": "sensor_var8"
                },
                "DAT_20070928": {
                    "1": "input_value2_2"
                },
                "DAT_20070928_2": {
                    "1": "diff3"
                },
                "DAT_2007092c": {
                    "1": "counter2"
                },
                "DAT_20070930": {
                    "1": "diff1"
                },
                "DAT_20070938": {
                    "1": "var4"
                },
                "DAT_20070940": {
                    "1": "sensor_var1"
                },
                "DAT_20070944": {
                    "1": "temp_value13"
                },
                "DAT_20070948": {
                    "3": "state"
                },
                "DAT_2007094c": {
                    "1": "result1"
                },
                "DAT_20070950": {
                    "1": "temp_output_value1"
                },
                "DAT_20070950_2": {
                    "1": "sensor_var16"
                },
                "DAT_20070960": {
                    "1": "var16"
                },
                "DAT_20070964": {
                    "1": "sensor_var13"
                },
                "DAT_20070968": {
                    "1": "temp_value15"
                },
                "DAT_2007096c": {
                    "1": "result3"
                },
                "DAT_20070970": {
                    "1": "var11"
                },
                "DAT_20070974": {
                    "1": "sensor_var6"
                },
                "DAT_20070978": {
                    "1": "temp_value9"
                },
                "DAT_20070980": {
                    "1": "query_param2"
                },
                "DAT_20070984": {
                    "1": "query_data3"
                },
                "DAT_20070988": {
                    "1": "query_input1"
                },
                "DAT_20070998": {
                    "1": "query_param5"
                },
                "DAT_2007099c": {
                    "1": "query_data6"
                },
                "DAT_200709a0": {
                    "1": "query_input2"
                },
                "DAT_200709ac": {
                    "1": "query_input3"
                },
                "DAT_200709b0": {
                    "1": "query_param8"
                },
                "DAT_200709b4": {
                    "1": "query_param9"
                },
                "DAT_200709c4": {
                    "1": "var9"
                },
                "DAT_200709c8": {
                    "1": "temp_float6"
                },
                "DAT_200709cc": {
                    "1": "output_condition"
                },
                "DAT_200709e0": {
                    "1": "next_update_time"
                },
                "DAT_200709e4": {
                    "1": "poll_result"
                },
                "DAT_200709eb": {
                    "1": "is_poll_successful"
                },
                "DAT_20070a4c": {
                    "1": "sensor_var3"
                },
                "FUN_000802da": {
                    "1": "calculation1"
                },
                "FUN_0008043e": {
                    "1": "check_condition"
                },
                "FUN_000805d0": {
                    "1": "update_sensor_values",
                    "11": "update_sensor_data",
                    "12": "process_data",
                    "2": "update_data"
                },
                "FUN_00081730": {
                    "1": "query_sensor_b"
                },
                "FUN_00081734": {
                    "1": "calculate_value1"
                },
                "FUN_00081894": {
                    "1": "poll_sensor"
                },
                "FUN_0008189c": {
                    "1": "calculate_value4"
                },
                "FUN_00081944": {
                    "1": "calculate_value3"
                },
                "FUN_00081c94": {
                    "1": "check_condition_one"
                },
                "FUN_00081ca8": {
                    "1": "is_sensor_data_available"
                },
                "FUN_00081cd0": {
                    "1": "millis"
                },
                "FUN_00081d1c": {
                    "1": "process_data_nine"
                },
                "_DAT_2007097c": {
                    "1": "query_param1"
                },
                "_DAT_20070988": {
                    "1": "query_data7"
                },
                "_DAT_20070988_2": {
                    "1": "query_data12"
                },
                "_DAT_20070994": {
                    "1": "query_param4"
                },
                "_DAT_200709a0": {
                    "1": "query_data8"
                },
                "_DAT_200709ac": {
                    "1": "query_data9"
                },
                "iVar6": {
                    "1": "temp_var1",
                    "2": "temp_var4",
                    "4": "temp",
                    "5": "temp_var"
                },
                "int": {
                    "1": "int"
                },
                "millis": {
                    "1": "get_millis"
                },
                "param": {
                    "1": "input"
                },
                "param_1": {
                    "1": "state",
                    "2": "millis",
                    "3": "param1",
                    "5": "sensor_data"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "value1",
                    "6": "param2"
                },
                "param_3": {
                    "1": "sensor2_data",
                    "2": "value2",
                    "6": "param3"
                },
                "param_4": {
                    "1": "input_data",
                    "6": "param4"
                },
                "poll": {
                    "1": "perform_poll"
                },
                "puVar7": {
                    "1": "ptr_data",
                    "2": "ptr_var",
                    "3": "pointer_var",
                    "5": "pointer1"
                },
                "puVar8": {
                    "1": "ptr_array",
                    "2": "ptr2",
                    "5": "pointer_var2"
                },
                "query": {
                    "1": "perform_query"
                },
                "uVar1": {
                    "1": "temp_uint1",
                    "17": "current_time",
                    "7": "current_millis"
                },
                "uVar2": {
                    "1": "calculation1",
                    "2": "difference",
                    "5": "var1"
                },
                "uVar3": {
                    "1": "sensor_sum",
                    "2": "temp_var1",
                    "3": "temp_float2",
                    "5": "var2"
                },
                "uVar4": {
                    "1": "temp_value3",
                    "2": "temp_var2",
                    "3": "temp_float3",
                    "5": "var3"
                },
                "uVar5": {
                    "1": "temp4",
                    "2": "temp_var3",
                    "3": "temp_float4",
                    "5": "var4"
                },
                "undefined": {
                    "1": "undefined"
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081734",
                "FUN_00081c94",
                "FUN_00081730",
                "FUN_00081944",
                "FUN_0008043e",
                "FUN_0008189c",
                "FUN_00081d1c",
                "FUN_00081ca8"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid process_data_000805d0(void)\n\n{\n  uint current_time;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  int temp_var;\n  uint *pointer1;\n  undefined4 *pointer_var2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    current_time = get_millis();\n    if (DAT_200708c8 < current_time) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    perform_poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      perform_query(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_millis();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = __floatunsisf(DAT_200708d8);\n      DAT_2007094c = __floatsisf(DAT_200708da / 10);\n      DAT_200709c4 = __floatunsisf(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    perform_poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_millis();\n    }\n    break;\n  case '\\x03':\n    perform_poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      perform_query(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_millis();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    perform_poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      pointer_var2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      perform_query(&DAT_200709e4,*pointer_var2,pointer_var2[1],pointer_var2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    perform_poll(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      pointer_var2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    perform_poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      perform_query(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_millis();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointer1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointer1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (current_time = get_millis(), DAT_200708c0 < current_time)) {\n      DAT_20070960 = DAT_20070960 + 1;\n      temp_var = get_millis();\n      DAT_200708c0 = temp_var + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      current_time = get_millis();\n      if (DAT_200708c0 < current_time) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var = get_millis();\n        DAT_200708c0 = temp_var + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointer1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      current_time = get_millis();\n      if (DAT_200708c0 < current_time) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var = get_millis();\n        DAT_200708c0 = temp_var + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  current_time = get_millis();\n  if (DAT_200709e0 < current_time) {\n    var1 = __floatsisf(DAT_20070940);\n    var2 = __aeabi_fsub(var1,DAT_200709c8);\n    var1 = DAT_200708c4;\n    DAT_20070930 = var2;\n    var3 = __addsf3(var2,DAT_200708c4);\n    var3 = __aeabi_fmul(var3,DAT_2007094c);\n    var3 = __addsf3(var3,DAT_20070914);\n    DAT_2007094c = var3;\n    var1 = __aeabi_fsub(var2,var1);\n    var1 = __aeabi_fmul(var1,DAT_200709c4);\n    var1 = __aeabi_fsub(var1,DAT_2007096c);\n    DAT_200709c4 = var1;\n    var4 = __aeabi_fmul(var2,DAT_20070a4c);\n    var4 = __addsf3(var4,var3);\n    __addsf3(var4,var1);\n    DAT_20070910 = __aeabi_f2iz();\n    DAT_2007091c = __floatsisf();\n    DAT_2007092c = 0;\n    DAT_200708c4 = var2;\n    DAT_20070914 = var3;\n    DAT_2007096c = var1;\n    temp_var = get_millis();\n    DAT_200709e0 = temp_var + DAT_20070970;\n  }\n  var1 = __floatsisf(DAT_20070970);\n  temp_var = __aeabi_fcmpge(DAT_2007091c,var1);\n  if (temp_var != 0) {\n    DAT_2007091c = var1;\n  }\n  temp_var = __aeabi_fcmple(DAT_2007091c,0);\n  if (temp_var != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = __fixunssfsi(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "current_name": "process_data_000805d0",
            "entrypoint": "0x000805d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "iVar6": "temp_var",
                "millis": "get_millis",
                "poll": "perform_poll",
                "puVar7": "pointer1",
                "puVar8": "pointer_var2",
                "query": "perform_query",
                "uVar1": "current_time",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a68": {
            "additional_data": {
                "DAT_20070954": {
                    "1": "string_var",
                    "5": "empty_string"
                },
                "DAT_200709e8": {
                    "1": "var1",
                    "2": "counter1",
                    "3": "variable1"
                },
                "DAT_200709e9": {
                    "1": "var2",
                    "2": "counter2",
                    "3": "variable2"
                },
                "DAT_200709ea": {
                    "1": "value",
                    "2": "constant",
                    "3": "variable3"
                },
                "DAT_20070a3a": {
                    "1": "delay",
                    "2": "timeout",
                    "3": "variable4"
                },
                "FUN_00080a68": {
                    "1": "initialize_global_variables",
                    "17": "initialize_data",
                    "3": "initialize_application",
                    "8": "initialize_function"
                },
                "FUN_00081682": {
                    "1": "perform_operation",
                    "2": "update_values",
                    "3": "update_data",
                    "6": "modify_data"
                },
                "FUN_00081d5c": {
                    "1": "process_data_block",
                    "2": "perform_operation",
                    "22": "process_data"
                },
                "String": {
                    "1": "str"
                },
                "__aeabi_atexit": {
                    "1": "register_exit_function"
                },
                "input1": {
                    "1": "initial_value"
                },
                "input2": {
                    "1": "size_value"
                },
                "input3": {
                    "1": "index_value"
                },
                "new_variable_name_1": {
                    "1": "string_variable"
                },
                "new_variable_name_2": {
                    "1": "counter"
                },
                "new_variable_name_3": {
                    "1": "constant_value"
                },
                "new_variable_name_n": {
                    "1": "<new_variable_name_n>"
                },
                "param_1": {
                    "1": "result_array",
                    "2": "input_data",
                    "3": "input1",
                    "6": "data_pointer"
                },
                "param_2": {
                    "1": "param_pointer2",
                    "2": "value",
                    "3": "count",
                    "6": "size"
                },
                "param_3": {
                    "1": "third_parameter",
                    "2": "length",
                    "4": "value",
                    "5": "input3"
                }
            },
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_00080a68(void)\n\n{\n  str(&DAT_20070954,\"\");\n  register_exit_function(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "current_name": "initialize_data_00080a68",
            "entrypoint": "0x00080a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68",
                "String": "str",
                "__aeabi_atexit": "register_exit_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ab8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080ab8",
            "entrypoint": "0x00080ab8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080aba": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aba",
            "entrypoint": "0x00080aba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080abc": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080abc",
            "entrypoint": "0x00080abc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ae4": {
            "additional_data": {
                "0x400e0e00": {
                    "1": "pio1"
                },
                "0x400e1000": {
                    "1": "pio3"
                },
                "0x400e1400": {
                    "1": "pio2"
                },
                "DAT_e000ed23": {
                    "1": "data_val",
                    "4": "value"
                },
                "DIGITAL_WRITE_PIN": {
                    "1": "set_pin_low"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array",
                    "2": "elf_rel_array"
                },
                "FUN_00080ae4": {
                    "1": "initialize_system_and_peripherals",
                    "30": "initialize_system"
                },
                "FUN_00080da0": {
                    "1": "setup_adc",
                    "2": "adc_init",
                    "3": "initialize_adc"
                },
                "FUN_00080e18": {
                    "1": "function_e18",
                    "2": "configure_digital_pin"
                },
                "FUN_00080e9c": {
                    "1": "function_e9c",
                    "2": "enable_clock"
                },
                "FUN_00080f9c": {
                    "1": "perform_initialization",
                    "2": "configure_adc"
                },
                "FUN_00081034": {
                    "1": "adc_disable_all_channel",
                    "2": "configure_interrupt"
                },
                "FUN_00081042": {
                    "1": "function5",
                    "2": "configure_trigger",
                    "3": "configure_timing"
                },
                "FUN_00081066": {
                    "1": "disable_all_adc_channels",
                    "2": "disable_all_channel",
                    "4": "disable_interrupt"
                },
                "FUN_0008106e": {
                    "1": "adc_disable_all_channel",
                    "2": "disable_all_channel"
                },
                "FUN_00081318": {
                    "1": "configure_analog_pin",
                    "2": "adc_disable_interrupt",
                    "3": "configure_trigger"
                },
                "FUN_00081d7c": {
                    "1": "enable_periph_clk",
                    "4": "enable_peripheral_clock"
                },
                "Fun_00080f9c": {
                    "1": "function_f9c"
                },
                "PIO_Configure": {
                    "14": "configure_pio"
                },
                "SystemInit": {
                    "1": "system_initialization",
                    "2": "initialize_system_components",
                    "4": "initialize_system"
                },
                "_DAT_400e0ea0": {
                    "1": "variable3",
                    "3": "register1"
                },
                "_DAT_400e10a0": {
                    "1": "value2",
                    "3": "register2"
                },
                "_DAT_400e12a0": {
                    "1": "peripheral_register3",
                    "3": "register3"
                },
                "_DAT_400e14a0": {
                    "1": "pin_config_d",
                    "3": "register4"
                },
                "_DAT_e000e010": {
                    "1": "data_val3",
                    "2": "variable2"
                },
                "_DAT_e000e014": {
                    "1": "data_offset",
                    "2": "offset"
                },
                "_DAT_e000e018": {
                    "1": "value2",
                    "2": "variable1"
                },
                "__libc_init_array": {
                    "1": "init_array",
                    "8": "initialize_libc_array"
                },
                "adc_configure_timing": {
                    "14": "configure_adc_timing"
                },
                "adc_configure_trigger": {
                    "14": "configure_adc_trigger"
                },
                "adc_disable_all_channel": {
                    "1": "disable_adc_channels",
                    "3": "disable_all_adc_channel",
                    "9": "disable_all_adc_channels"
                },
                "adc_disable_interrupt": {
                    "14": "disable_adc_interrupt"
                },
                "adc_init": {
                    "14": "initialize_adc"
                },
                "digitalWrite": {
                    "1": "set_pin_low",
                    "2": "set_digital_output",
                    "5": "set_pin_state"
                },
                "iVar1": {
                    "1": "loop_counter",
                    "13": "counter",
                    "3": "index"
                },
                "iVar2": {
                    "1": "next_i",
                    "13": "next_counter",
                    "2": "next_index"
                },
                "param_1": {
                    "1": "parameter1",
                    "2": "param1"
                },
                "param_2": {
                    "1": "param_size",
                    "2": "param2"
                },
                "param_3": {
                    "1": "param_offset",
                    "2": "param3"
                },
                "param_4": {
                    "1": "parameter4",
                    "2": "param4"
                },
                "pmc_enable_periph_clk": {
                    "1": "enable_periph_clk",
                    "2": "enable_periph_clock",
                    "9": "enable_peripheral_clock"
                }
            },
            "called": [
                "FUN_00080f9c",
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00081318",
                "FUN_0008106e",
                "FUN_00081034",
                "FUN_00081d7c",
                "FUN_00080e9c"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_system_00080ae4(void)\n\n{\n  int counter;\n  int next_counter;\n  \n  initialize_system_00080ae4();\n  _DAT_e000e014 = array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  initialize_libc_array();\n  counter = 0;\n  do {\n    next_counter = counter + 1;\n    set_pin_state(counter,0);\n    counter = next_counter;\n  } while (next_counter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  configure_pio(0x400e0e00,1,0x300,0);\n  set_pin_state(0,1);\n  configure_pio(0x400e0e00,1,0xc00,0);\n  configure_pio(0x400e0e00,1,0x3000,0);\n  configure_pio(0x400e1400,2,0x30,0);\n  configure_pio(0x400e1000,1,0xc00,0);\n  configure_pio(0x400e0e00,1,3,0);\n  configure_pio(0x400e1000,1,0xc000,0);\n  enable_peripheral_clock(0x25);\n  initialize_adc(0x400c0000,array[6].r_offset,20000000,0xc);\n  configure_adc_timing(0x400c0000,0,0x300000,1);\n  configure_adc_trigger(0x400c0000,0,0);\n  disable_adc_interrupt(0x400c0000,0xffffffff);\n  disable_all_adc_channels(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_system_00080ae4",
            "entrypoint": "0x00080ae4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "FUN_00080ae4": "initialize_system_00080ae4",
                "PIO_Configure": "configure_pio",
                "SystemInit": "initialize_system",
                "__libc_init_array": "initialize_libc_array",
                "adc_configure_timing": "configure_adc_timing",
                "adc_configure_trigger": "configure_adc_trigger",
                "adc_disable_all_channel": "disable_all_adc_channels",
                "adc_disable_interrupt": "disable_adc_interrupt",
                "adc_init": "initialize_adc",
                "digitalWrite": "set_pin_state",
                "iVar1": "counter",
                "iVar2": "next_counter",
                "pmc_enable_periph_clk": "enable_peripheral_clock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "additional_data": {
                "&DAT_20070a50": {
                    "1": "ring_buffer6"
                },
                "&DAT_20070ad8": {
                    "1": "ring_buffer2"
                },
                "&DAT_20070b60": {
                    "1": "uart_instance2"
                },
                "&DAT_20070b84": {
                    "1": "ring_buffer_instance3"
                },
                "&DAT_20070c0c": {
                    "1": "usart_instance1"
                },
                "&DAT_20070c34": {
                    "1": "usart_instance3"
                },
                "&DAT_20070c5c": {
                    "1": "usart_instance5"
                },
                "&DAT_20070c84": {
                    "1": "ring_buffer_instance14"
                },
                "&DAT_20070d0c": {
                    "1": "ring_buffer8"
                },
                "&DAT_20070de4": {
                    "1": "ring_buffer_instance11"
                },
                "&DAT_20070e6c": {
                    "1": "ring_buffer4"
                },
                "&DAT_20070ef4": {
                    "1": "ring_buffer_instance15"
                },
                "0x11": {
                    "1": "usart_config1"
                },
                "0x12": {
                    "1": "usart_data_bits2"
                },
                "0x14": {
                    "1": "usart_config3"
                },
                "0x40098000": {
                    "1": "usart_instance2"
                },
                "0x4009c000": {
                    "1": "usart_base_address2"
                },
                "0x400a4000": {
                    "1": "usart_base_address3"
                },
                "0x400e0800": {
                    "1": "uart_instance1"
                },
                "8": {
                    "1": "uart_config1"
                },
                "DAT_20070a50": {
                    "1": "ring_buffer6"
                },
                "DAT_20070ad8": {
                    "1": "ring_buffer2"
                },
                "DAT_20070b60": {
                    "1": "uart1"
                },
                "DAT_20070b84": {
                    "1": "ring_buffer1"
                },
                "DAT_20070c0c": {
                    "1": "usart1"
                },
                "DAT_20070c34": {
                    "1": "usart2"
                },
                "DAT_20070c5c": {
                    "1": "usart3"
                },
                "DAT_20070c84": {
                    "1": "ring_buffer7"
                },
                "DAT_20070d0c": {
                    "1": "ring_buffer8"
                },
                "DAT_20070de4": {
                    "1": "ring_buffer3"
                },
                "DAT_20070e6c": {
                    "1": "ring_buffer4"
                },
                "DAT_20070ef4": {
                    "1": "ring_buffer5"
                },
                "FUN_00080c0c": {
                    "1": "initialize_communication_devices",
                    "18": "initialize_communication",
                    "2": "initialize_peripherals",
                    "5": "initialize_uar_tand_usart"
                },
                "FUN_000813a8": {
                    "1": "read_device_param",
                    "2": "perform_operation",
                    "5": "process_param1"
                },
                "FUN_000814e4": {
                    "1": "initialize_variable",
                    "2": "process_param2",
                    "4": "configure_uart",
                    "5": "process_data"
                },
                "FUN_000815d4": {
                    "1": "process_param1_helper"
                },
                "RingBuffer": {
                    "14": "initialize_ring_buffer",
                    "6": "create_ring_buffer"
                },
                "RingBuffer(&DAT_20070a50)": {
                    "2": "initialize_ring_buffer6"
                },
                "RingBuffer(&DAT_20070ad8)": {
                    "2": "initialize_ring_buffer2"
                },
                "RingBuffer(&DAT_20070b84)": {
                    "2": "initialize_ring_buffer1"
                },
                "RingBuffer(&DAT_20070c84)": {
                    "2": "initialize_ring_buffer7"
                },
                "RingBuffer(&DAT_20070d0c)": {
                    "2": "initialize_ring_buffer8"
                },
                "RingBuffer(&DAT_20070de4)": {
                    "2": "initialize_ring_buffer3"
                },
                "RingBuffer(&DAT_20070e6c)": {
                    "2": "initialize_ring_buffer4"
                },
                "RingBuffer(&DAT_20070ef4)": {
                    "2": "initialize_ring_buffer5"
                },
                "UARTClass": {
                    "16": "initialize_uart",
                    "4": "initialize_uart_class"
                },
                "UARTClass(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param_3)": {
                    "1": "initialize_uart_class"
                },
                "USARTClass": {
                    "16": "initialize_usart",
                    "4": "initialize_usart_class"
                },
                "USARTClass(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50)": {
                    "1": "initialize_usart_class1"
                },
                "USARTClass(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84)": {
                    "1": "initialize_usart2"
                },
                "USARTClass(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c)": {
                    "1": "initialize_usart3"
                },
                "param_1": {
                    "1": "ring_buffer_ptr",
                    "15": "param1",
                    "2": "unknown_param1",
                    "3": "arg1"
                },
                "param_2": {
                    "1": "param_2",
                    "16": "param2",
                    "2": "usart_param2",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "config_param3",
                    "15": "param3",
                    "2": "uart_param3",
                    "3": "arg3"
                },
                "param_4": {
                    "1": "unused_configuration_parameter4",
                    "2": "uart_param4",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "calling": [],
            "code": "\nvoid initialize_communication_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_ring_buffer(&DAT_20070b84);\n  initialize_ring_buffer(&DAT_20070ad8);\n  initialize_uart(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initialize_ring_buffer(&DAT_20070de4);\n  initialize_ring_buffer(&DAT_20070e6c);\n  initialize_ring_buffer(&DAT_20070ef4);\n  initialize_ring_buffer(&DAT_20070a50);\n  initialize_ring_buffer(&DAT_20070c84);\n  initialize_ring_buffer(&DAT_20070d0c);\n  initialize_usart(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_usart(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_usart(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "current_name": "initialize_communication_00080c0c",
            "entrypoint": "0x00080c0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c0c": "initialize_communication_00080c0c",
                "RingBuffer": "initialize_ring_buffer",
                "UARTClass": "initialize_uart",
                "USARTClass": "initialize_usart",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "additional_data": {
                "&DAT_20070b60": {
                    "1": "data_1"
                },
                "&DAT_20070c0c": {
                    "1": "data_2"
                },
                "&DAT_20070c34": {
                    "1": "data_3"
                },
                "&DAT_20070c5c": {
                    "1": "data_4"
                },
                "DAT_20070b60": {
                    "1": "serial_data1"
                },
                "DAT_20070c0c": {
                    "1": "serial_data2"
                },
                "DAT_20070c34": {
                    "1": "serial_data3"
                },
                "DAT_20070c5c": {
                    "1": "serial_data4"
                },
                "FUNC_00080aa8": {
                    "1": "finalize_another_thing",
                    "9": "serial_event3"
                },
                "FUNC_00080ab8": {
                    "1": "initialize_another_thing",
                    "10": "serial_event1"
                },
                "FUNC_00080aba": {
                    "1": "initialize_something",
                    "10": "serial_event"
                },
                "FUNC_00080abc": {
                    "1": "finalize_something",
                    "9": "serial_event2"
                },
                "FUN_00080ce0": {
                    "1": "handle_serial_events",
                    "14": "process_serial_events",
                    "15": "check_serial_events"
                },
                "FUN_000813e4": {
                    "1": "handle_serial_event2",
                    "2": "process_serial_event"
                },
                "available": {
                    "1": "check_buffer_availability",
                    "2": "is_available",
                    "4": "is_data_available",
                    "5": "check_availability"
                },
                "iVar1": {
                    "1": "num_available",
                    "2": "event_available",
                    "4": "is_available",
                    "9": "result"
                },
                "serialEvent": {
                    "1": "handle_data_event",
                    "11": "process_serial_event",
                    "2": "process_serial_event1",
                    "6": "handle_serial_event"
                },
                "serialEvent1": {
                    "1": "handle_data_event1",
                    "11": "process_serial_event1",
                    "2": "process_serial_event2",
                    "6": "handle_serial_event1"
                },
                "serialEvent2": {
                    "1": "handle_data_event2",
                    "11": "process_serial_event2",
                    "2": "process_serial_event3",
                    "6": "handle_serial_event2"
                },
                "serialEvent3": {
                    "1": "check_serial_event3",
                    "11": "process_serial_event3",
                    "2": "process_serial_event4",
                    "6": "handle_serial_event3"
                }
            },
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_000813e4",
                "FUN_00080abc",
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid check_serial_events_00080ce0(void)\n\n{\n  int result;\n  \n  result = check_availability(&DAT_20070b60);\n  if (result != 0) {\n    process_serial_event();\n  }\n  result = check_availability(&DAT_20070c0c);\n  if (result != 0) {\n    process_serial_event1();\n  }\n  result = check_availability(&DAT_20070c34);\n  if (result != 0) {\n    process_serial_event2();\n  }\n  result = check_availability(&DAT_20070c5c);\n  if (result != 0) {\n    process_serial_event3();\n  }\n  return;\n}\n\n",
            "current_name": "check_serial_events_00080ce0",
            "entrypoint": "0x00080ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ce0": "check_serial_events_00080ce0",
                "available": "check_availability",
                "iVar1": "result",
                "serialEvent": "process_serial_event",
                "serialEvent1": "process_serial_event1",
                "serialEvent2": "process_serial_event2",
                "serialEvent3": "process_serial_event3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "additional_data": {
                "FUN_00080d2e": {
                    "1": "update_register_value",
                    "2": "update_param_values",
                    "3": "update_data",
                    "4": "update_value",
                    "6": "update_parameter_value"
                },
                "param_1": {
                    "1": "obj_ptr",
                    "18": "base_address",
                    "2": "data_ptr",
                    "3": "object_address"
                },
                "param_2": {
                    "1": "command",
                    "10": "operation_type",
                    "2": "case_value",
                    "6": "option"
                },
                "param_3": {
                    "1": "parameter_value",
                    "19": "new_value",
                    "9": "value"
                },
                "uVar1": {
                    "1": "masked_value",
                    "2": "result",
                    "22": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid update_parameter_00080d2e(int base_address,undefined4 operation_type,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(operation_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\nswitchD_00080d34_caseD_6:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_00080d2e",
            "entrypoint": "0x00080d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d2e": "update_parameter_00080d2e",
                "param_1": "base_address",
                "param_2": "operation_type",
                "param_3": "new_value",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d54": {
            "additional_data": {
                "*param_1": {
                    "1": "output",
                    "6": "array[0]"
                },
                "0x11": {
                    "1": "param_index1",
                    "6": "index1"
                },
                "0x18": {
                    "1": "param_index2_if_positive",
                    "5": "index3"
                },
                "0x19": {
                    "1": "param_index2_if_negative",
                    "5": "index2"
                },
                "0x20": {
                    "1": "param_index4_if_bit_set",
                    "6": "index6"
                },
                "5": {
                    "1": "param_index5",
                    "4": "index7"
                },
                "8": {
                    "1": "param_index3_if_set",
                    "6": "index4"
                },
                "9": {
                    "1": "param_index3_if_not_set",
                    "6": "index5"
                },
                "FUN_00080d54": {
                    "1": "set_values_in_array",
                    "2": "set_values",
                    "3": "set_values_based_on_conditions",
                    "4": "update_parameters"
                },
                "bVar1": {
                    "1": "is_negative_flag",
                    "22": "is_negative",
                    "7": "is_flag_set"
                },
                "param_1": {
                    "1": "data_array",
                    "2": "output_params",
                    "3": "param_array",
                    "6": "output_array",
                    "7": "parameters",
                    "9": "array"
                },
                "param_1[0x11]": {
                    "1": "param1_0x11",
                    "2": "param1_value",
                    "6": "array[17]"
                },
                "param_1[0x18]": {
                    "1": "params[24]",
                    "6": "array[24]"
                },
                "param_1[0x19]": {
                    "1": "param2_value",
                    "6": "array[25]"
                },
                "param_1[0x20]": {
                    "1": "param1_condition",
                    "6": "array[32]"
                },
                "param_1[5]": {
                    "1": "output_array[5]",
                    "6": "array[5]"
                },
                "param_1[8]": {
                    "1": "params[8]",
                    "6": "array[8]"
                },
                "param_1[9]": {
                    "1": "output_array[9]",
                    "6": "array[9]"
                },
                "param_2": {
                    "1": "input_param",
                    "19": "value",
                    "8": "new_value"
                },
                "param_3": {
                    "1": "bit_mask",
                    "21": "flags",
                    "3": "flag",
                    "5": "bitmask"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid update_parameters_00080d54(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[17] = value;\n  if (is_negative) {\n    array[25] = value;\n  }\n  if (!is_negative) {\n    array[24] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = value;\n  }\n  if (!is_negative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[32] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "current_name": "update_parameters_00080d54",
            "entrypoint": "0x00080d54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_1[0x11]": "array[17]",
                "param_1[0x18]": "array[24]",
                "param_1[0x19]": "array[25]",
                "param_1[0x20]": "array[32]",
                "param_1[5]": "array[5]",
                "param_1[8]": "array[8]",
                "param_1[9]": "array[9]",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "additional_data": {
                "FUN_00080d7a": {
                    "1": "update_data",
                    "2": "set_values",
                    "3": "update_params",
                    "4": "update_parameters",
                    "5": "set_parameters"
                },
                "param_1": {
                    "1": "result_array",
                    "2": "output",
                    "3": "params",
                    "4": "array",
                    "5": "param_array",
                    "7": "parameters"
                },
                "param_1[0x11]": {
                    "1": "parameters[17]"
                },
                "param_1[0x14]": {
                    "1": "parameters[20]"
                },
                "param_1[0x15]": {
                    "1": "parameters[21]"
                },
                "param_1[0x18]": {
                    "1": "parameters[24]"
                },
                "param_1[0x19]": {
                    "1": "parameters[25]"
                },
                "param_1[0xc]": {
                    "1": "parameters[12]"
                },
                "param_1[0xd]": {
                    "1": "parameters[13]"
                },
                "param_1[4]": {
                    "1": "parameters[4]"
                },
                "param_2": {
                    "1": "new_parameter",
                    "18": "value",
                    "2": "param_value",
                    "8": "new_value"
                },
                "param_3": {
                    "1": "check_param3",
                    "10": "condition1",
                    "2": "flag_a",
                    "3": "is_zero1",
                    "4": "condition_1",
                    "5": "flag1"
                },
                "param_4": {
                    "1": "condition_b",
                    "10": "condition2",
                    "2": "flag_b",
                    "3": "is_zero2",
                    "4": "condition_2",
                    "5": "flag2"
                },
                "param_5": {
                    "1": "check_value3",
                    "10": "condition3",
                    "2": "flag_c",
                    "3": "is_zero3",
                    "4": "condition_3",
                    "5": "flag3"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "code": "\nvoid set_parameters_00080d7a(undefined4 *parameters,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  parameters[17] = value;\n  if (condition3 == 0) {\n    parameters[24] = value;\n  }\n  else {\n    parameters[25] = value;\n  }\n  if (condition2 == 0) {\n    parameters[21] = value;\n  }\n  else {\n    parameters[20] = value;\n  }\n  if (condition1 == 0) {\n    parameters[13] = value;\n  }\n  else {\n    parameters[12] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "current_name": "set_parameters_00080d7a",
            "entrypoint": "0x00080d7a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d7a": "set_parameters_00080d7a",
                "param_1": "parameters",
                "param_1[0x11]": "parameters[17]",
                "param_1[0x14]": "parameters[20]",
                "param_1[0x15]": "parameters[21]",
                "param_1[0x18]": "parameters[24]",
                "param_1[0x19]": "parameters[25]",
                "param_1[0xc]": "parameters[12]",
                "param_1[0xd]": "parameters[13]",
                "param_1[4]": "parameters[4]",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080da0": {
            "additional_data": {
                "(param_4 << 0x1d) >> 0x1f": {
                    "1": "input_shifted"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "peripheral1"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "peripheral3"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "peripheral2"
                },
                "0x80d55": {
                    "1": "input_register1"
                },
                "FUN_00080d2e": {
                    "1": "set_peripheral_input",
                    "2": "configure_input"
                },
                "FUN_00080d54": {
                    "1": "configure_peripheral_value"
                },
                "FUN_00080d7a": {
                    "1": "set_device_register",
                    "2": "configure_output"
                },
                "FUN_00080da0": {
                    "1": "set_peripheral_property",
                    "12": "set_peripheral",
                    "2": "set_peripheral_value",
                    "9": "configure_peripheral"
                },
                "PIO_SetInput": {
                    "1": "set_input_function",
                    "16": "set_input",
                    "2": "set_input_mode"
                },
                "PIO_SetOutput": {
                    "1": "set_pio_output",
                    "16": "set_output",
                    "2": "set_output_mode"
                },
                "PIO_SetPeripheral": {
                    "1": "set_peripheral_function",
                    "11": "set_peripheral",
                    "5": "set_peripheral_mode"
                },
                "PTR_00080d2e": {
                    "1": "set_peripheral"
                },
                "PTR_00080d54": {
                    "1": "set_peripheral_output"
                },
                "PTR_00080d7a": {
                    "1": "set_peripheral_input"
                },
                "bVar1": {
                    "1": "is_config_negative",
                    "2": "is_negative_flag",
                    "26": "is_negative"
                },
                "param_1": {
                    "1": "device_id",
                    "11": "device_address",
                    "14": "device",
                    "3": "peripheral_address"
                },
                "param_1 + 0x44": {
                    "1": "peripheral_config1",
                    "2": "register_a",
                    "3": "register_address",
                    "5": "register1"
                },
                "param_1 + 0x60": {
                    "1": "peripheral_register3",
                    "2": "device_register3",
                    "5": "register3"
                },
                "param_1 + 100": {
                    "1": "register_address2",
                    "2": "device_register2",
                    "5": "register2"
                },
                "param_2": {
                    "1": "peripheral_id",
                    "18": "peripheral_type",
                    "9": "mode"
                },
                "param_2 == 5": {
                    "2": "is_mode5"
                },
                "param_3": {
                    "1": "param",
                    "2": "configuration",
                    "3": "config",
                    "4": "peripheral",
                    "5": "peripheral_config"
                },
                "param_4": {
                    "1": "config_flags",
                    "2": "peripheral_value",
                    "3": "bit_mask",
                    "5": "flag",
                    "7": "flags"
                },
                "param_4 & 1": {
                    "1": "value_and1"
                },
                "param_4 << 0x1d": {
                    "1": "value_shifted2"
                },
                "param_4 << 0x1f": {
                    "1": "value_shifted",
                    "2": "shifted_flag"
                },
                "param_5": {
                    "1": "output_type"
                }
            },
            "called": [
                "FUN_00080d2e",
                "FUN_00080d7a",
                "FUN_00080d54"
            ],
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "code": "\nundefined4 set_peripheral_00080da0(int device,int peripheral_type,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  switch(peripheral_type) {\n  case 1:\n  case 2:\n    set_peripheral_00080da0(device,peripheral_type,value);\n    is_negative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = value;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = value;\n    }\n    break;\n  case 3:\n    set_input(device,value,flags,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    set_output(device,value,peripheral_type == 5,(flags << 0x1d) >> 0x1f,flags & 1,peripheral_type,value\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "set_peripheral_00080da0",
            "entrypoint": "0x00080da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080da0": "set_peripheral_00080da0",
                "PIO_SetInput": "set_input",
                "PIO_SetOutput": "set_output",
                "PIO_SetPeripheral": "set_peripheral",
                "bVar1": "is_negative",
                "param_1": "device",
                "param_2": "peripheral_type",
                "param_3": "value",
                "param_4": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e04": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "value2"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "value1"
                },
                "FUN_00080e04": {
                    "1": "logical_and_comparison",
                    "2": "check_conditions",
                    "3": "check_bitwise_compatibility",
                    "4": "check_bitwise_intersection"
                },
                "param_1": {
                    "1": "parameter_1",
                    "2": "input_address",
                    "3": "ptr"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "permissions",
                    "3": "bit_mask",
                    "4": "bitmask",
                    "9": "mask"
                },
                "uVar1": {
                    "1": "bitwise_result",
                    "2": "intersection_result",
                    "26": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081318"
            ],
            "code": "\nuint check_bitwise_intersection_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_bitwise_intersection_00080e04",
            "entrypoint": "0x00080e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e18": {
            "additional_data": {
                "FUN_00080e18": {
                    "1": "check_and_update_flags",
                    "15": "check_and_set_bit",
                    "2": "set_bit_in_register",
                    "3": "set_bit",
                    "4": "check_bit_and_set"
                },
                "_DAT_400e0610": {
                    "1": "set_bitmask_1"
                },
                "_DAT_400e0618": {
                    "1": "bitmask_1"
                },
                "_DAT_400e0700": {
                    "1": "set_bitmask_2"
                },
                "_DAT_400e0708": {
                    "1": "bitmask_2"
                },
                "param_1": {
                    "1": "flag_value",
                    "3": "input",
                    "4": "bit_index",
                    "9": "value"
                },
                "uVar1": {
                    "1": "bit_value",
                    "27": "bit_mask",
                    "3": "bitmask"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_set_bit_00080e18",
            "entrypoint": "0x00080e18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "10": "relocation_array",
                    "2": "elf_relocations",
                    "5": "relocation_table"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "2": "elf_offset"
                },
                "FUN_00080e9c": {
                    "1": "reset_memory_values",
                    "22": "initialize_memory",
                    "4": "initialize_data"
                },
                "_DAT_400e0620": {
                    "1": "memory_value1",
                    "2": "offset",
                    "3": "memory_address",
                    "8": "shifted_value"
                },
                "_DAT_400e0628": {
                    "1": "memory_address",
                    "2": "register_value",
                    "3": "value1"
                },
                "_DAT_400e0630": {
                    "1": "constant2",
                    "2": "constant_value",
                    "3": "value2"
                },
                "_DAT_400e0668": {
                    "1": "value_2",
                    "2": "loop_counter",
                    "3": "counter",
                    "4": "comparison_value"
                },
                "_DAT_400e0a00": {
                    "1": "buffer_size1",
                    "2": "base_address1",
                    "3": "buffer_size",
                    "4": "memory_size1"
                },
                "_DAT_400e0c00": {
                    "1": "memory_chunk2",
                    "2": "buffer_size2",
                    "4": "memory_size2"
                },
                "_FUN_00080e9c": {
                    "1": "initialize_memory"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n\n\nvoid initialize_memory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elf_offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00080e9c",
            "entrypoint": "0x00080e9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "elf_offset",
                "FUN_00080e9c": "initialize_memory_00080e9c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f24": {
            "additional_data": {
                "&DAT_0008588c": {
                    "1": "source_pointer"
                },
                "&DAT_2007089c": {
                    "1": "end_pointer",
                    "2": "end_address"
                },
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": {
                    "1": "elf32_rel_offset"
                },
                "DAT_0008588c": {
                    "1": "p_src",
                    "7": "source_data"
                },
                "DAT_2007089c": {
                    "1": "destination_data",
                    "2": "end_of_relocation_table",
                    "3": "end_address"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array1",
                    "5": "relocation_table",
                    "6": "rel_array",
                    "7": "relocation_array"
                },
                "FUN_00080f24": {
                    "1": "initialize_elf_relocation",
                    "11": "initialize_memory",
                    "2": "initialize_data",
                    "3": "initialize_program"
                },
                "FUN_000816a8": {
                    "1": "reinitialize"
                },
                "_DAT_e000ed08": {
                    "1": "destination_data",
                    "2": "data_value",
                    "6": "constant_value"
                },
                "iVar1": {
                    "1": "counter",
                    "11": "index",
                    "17": "offset"
                },
                "main": {
                    "2": "execute_main"
                },
                "puVar2": {
                    "1": "dest_ptr",
                    "11": "ptr",
                    "2": "current_pointer",
                    "8": "pointer"
                },
                "puVar2: : destinationPointer: ,\n: Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_table"
                },
                "r_offset": {
                    "1": "entry_offset",
                    "6": "offset"
                }
            },
            "called": [
                "FUN_000816a8"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid initialize_memory_00080f24(void)\n\n{\n  int offset;\n  undefined4 *ptr;\n  \n  for (offset = 0; (undefined4 *)((int)elf32_rel_offset + offset) < &DAT_2007089c\n      ; offset = offset + 4) {\n    *(undefined4 *)((int)elf32_rel_offset + offset) =\n         *(undefined4 *)(&DAT_0008588c + offset);\n  }\n  for (ptr = &DAT_2007089c; ptr < (undefined4 *)0x200711c0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  execute_main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_memory_00080f24",
            "entrypoint": "0x00080f24",
            "imported": false,
            "improved": true,
            "renaming": {
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": "elf32_rel_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00080f24": "initialize_memory_00080f24",
                "iVar1": "offset",
                "main": "execute_main",
                "puVar2": "ptr",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "additional_data": {
                "*param_1": {
                    "1": "result[0]"
                },
                "FUN_00080f9c": {
                    "1": "find_index_closest_value",
                    "12": "calculate_threshold",
                    "2": "calculate_index"
                },
                "local_58": {
                    "1": "threshold_table",
                    "16": "thresholds",
                    "6": "threshold_values",
                    "7": "threshold_array"
                },
                "param_1": {
                    "1": "result_array",
                    "10": "result",
                    "4": "output",
                    "8": "output_array"
                },
                "param_1[0x41]": {
                    "1": "result[0x41]"
                },
                "param_1[0x45]": {
                    "1": "result[0x45]"
                },
                "param_1[0x48]": {
                    "1": "result[0x48]"
                },
                "param_1[1]": {
                    "1": "result[1]"
                },
                "param_2": {
                    "1": "size",
                    "3": "total_size",
                    "7": "input_value",
                    "8": "input_size"
                },
                "param_3": {
                    "1": "time_per_iteration",
                    "2": "threshold_factor",
                    "3": "scaling_factor",
                    "6": "divisor"
                },
                "param_4": {
                    "1": "max_percentage",
                    "10": "multiplier",
                    "2": "scaling_factor",
                    "3": "conversion_factor"
                },
                "uVar1": {
                    "1": "param_ratio",
                    "11": "quotient",
                    "2": "divisor",
                    "3": "num_iterations"
                },
                "uVar2": {
                    "1": "current_index",
                    "2": "i",
                    "24": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *result,uint input_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_00080f9c",
            "entrypoint": "0x00080f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "local_58": "thresholds",
                "param_1": "result",
                "param_1[0x41]": "result[0x41]",
                "param_1[0x45]": "result[0x45]",
                "param_1[0x48]": "result[0x48]",
                "param_1[1]": "result[1]",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081034": {
            "additional_data": {
                "(param_3 & 1)": {
                    "1": "bit_mask"
                },
                "(param_3 & 1) << 7": {
                    "1": "flag_bit_shifted"
                },
                "(param_3 & 1)<<7": {
                    "1": "flag_value"
                },
                "(uint *)(param_1 + 4)": {
                    "1": "target_address"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "previous_value",
                    "2": "current_value"
                },
                "*PTR_registerAddress_4": {
                    "1": "current_value"
                },
                "1 << 7": {
                    "1": "shifted_value"
                },
                "<new_variable_name_1>": {
                    "1": "current_data"
                },
                "<new_variable_name_2>": {
                    "1": "flagged_data"
                },
                "<original_variable_name_1>": {
                    "1": "existing_flags"
                },
                "<original_variable_name_2>": {
                    "1": "shifted_flag"
                },
                "<original_variable_name_3>": {
                    "1": "new_flags"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_00081034": {
                    "1": "set_flag_bit",
                    "2": "update_parameter_value",
                    "3": "update_parameter",
                    "4": "update_param",
                    "5": "update_flags"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "local_var_1": {
                    "1": "current_value"
                },
                "local_var_2": {
                    "1": "updated_value"
                },
                "param_1": {
                    "1": "param_addr",
                    "15": "base_address",
                    "2": "parameter_address",
                    "3": "data_address"
                },
                "param_1 + 4": {
                    "1": "previous_value_address"
                },
                "param_2": {
                    "1": "new_bit_value",
                    "2": "flag_value",
                    "3": "new_data",
                    "5": "new_value",
                    "6": "value"
                },
                "param_2 | *(uint *)(param_1 + 4)": {
                    "1": "current_value"
                },
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "updated_value"
                },
                "param_3": {
                    "1": "flag_value",
                    "12": "flag",
                    "2": "bit_position",
                    "3": "bit_mask"
                },
                "param_3 & 1": {
                    "1": "bit"
                },
                "param_4": {
                    "2": "bit_position"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_flags_00081034(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_flags_00081034",
            "entrypoint": "0x00081034",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081042": {
            "additional_data": {
                "(param_2 & 0xf)": {
                    "1": "upper_bits"
                },
                "(param_2 & 0xf) << 0x18": {
                    "1": "masked_bitmask_shifted_left"
                },
                "(param_4 & 3)": {
                    "1": "lower_bits"
                },
                "(param_4 & 3) << 0x1c": {
                    "1": "masked_data_to_write_shifted_left"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "flags"
                },
                "FUN_00081042": {
                    "1": "update_config_params",
                    "2": "set_flags",
                    "3": "update_memory"
                },
                "param_1": {
                    "1": "context",
                    "2": "data_pointer",
                    "4": "config_address",
                    "5": "memory_address",
                    "9": "base_address"
                },
                "param_1 + 4": {
                    "1": "config_pointer"
                },
                "param_2": {
                    "1": "input_value1",
                    "11": "value1",
                    "2": "value_1"
                },
                "param_2 & 0xf": {
                    "1": "masked_value"
                },
                "param_3": {
                    "1": "current_value",
                    "11": "value2",
                    "2": "value_2"
                },
                "param_4": {
                    "1": "bit_mask3",
                    "12": "value3",
                    "2": "value_3"
                },
                "param_4 & 3": {
                    "1": "masked_flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_flags_00081042(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_flags_00081042",
            "entrypoint": "0x00081042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008105c": {
            "additional_data": {
                "FUN_0008105c": {
                    "1": "set_bit_flag",
                    "16": "set_bit",
                    "2": "set_bit_in_integer",
                    "6": "set_bit_at_position"
                },
                "int": {
                    "1": "bit_value"
                },
                "param_1": {
                    "1": "flags_address",
                    "25": "base_address",
                    "4": "address"
                },
                "param_1 + 0x14": {
                    "1": "target_address"
                },
                "param_2": {
                    "1": "position",
                    "20": "bit_position",
                    "9": "bit_index"
                },
                "param_2 & 0xff": {
                    "1": "bit_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081210"
            ],
            "code": "\nvoid set_bit_0008105c(bit_value base_address,ubit_value bit_position)\n\n{\n  *(bit_value *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_0008105c",
            "entrypoint": "0x0008105c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "int": "bit_value",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081066": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "result",
                    "2": "memory_value"
                },
                "0xffff": {
                    "1": "max_value"
                },
                "<original_variable_name_1>": {
                    "1": "value_to_store"
                },
                "FUN_00081066": {
                    "1": "initialize_to_max_value",
                    "11": "set_default_value",
                    "2": "initialize_memory",
                    "3": "set_param_to_ffff",
                    "5": "initialize_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param",
                    "4": "base_address",
                    "6": "object_address",
                    "8": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid set_default_value_00081066(int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00081066",
            "entrypoint": "0x00081066",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008106e": {
            "additional_data": {
                "FUN_0008106e": {
                    "1": "store_parameter_value",
                    "11": "set_param_value",
                    "2": "set_parameter",
                    "6": "set_param",
                    "9": "set_parameter_value"
                },
                "param_1": {
                    "1": "obj",
                    "19": "object_address",
                    "2": "obj_ptr",
                    "6": "base_address"
                },
                "param_1 + 0x28": {
                    "1": "property_address"
                },
                "param_2": {
                    "1": "value_to_set",
                    "5": "param_value",
                    "8": "parameter_value",
                    "9": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid set_param_value_0008106e(int object_address,undefined4 value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_0008106e",
            "entrypoint": "0x0008106e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "object_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081184": {
            "additional_data": {
                "<original_parameter_name>": {
                    "2": "<new_parameter_name>"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_00081184": {
                    "1": "calculate_result",
                    "11": "initialize",
                    "2": "initialize_data",
                    "3": "get_return_value",
                    "5": "get_zero"
                },
                "r0": {
                    "1": "result"
                },
                "return": {
                    "2": "result"
                },
                "return value": {
                    "1": "status"
                },
                "undefined4": {
                    "1": "int",
                    "2": "uint32_t",
                    "8": "void"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_00081184(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_00081184",
            "entrypoint": "0x00081184",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081184": "initialize_00081184",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008118c": {
            "additional_data": {
                "DAT_20071180": {
                    "1": "current_sum"
                },
                "FUN_0008118c": {
                    "1": "calculate_new_address",
                    "2": "add_param_to_global",
                    "3": "calculate_updated_value",
                    "8": "calculate_sum",
                    "9": "calculate_new_value"
                },
                "iVar1": {
                    "1": "original_value",
                    "14": "previous_value",
                    "2": "initial_value",
                    "3": "previous_sum",
                    "5": "old_value"
                },
                "param_1": {
                    "1": "number",
                    "16": "input_value",
                    "2": "param",
                    "4": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_00082970"
            ],
            "code": "\nint calculate_new_value_0008118c(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previous_value = DAT_20071180;\n  DAT_20071180 = input_value + DAT_20071180;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_new_value_0008118c",
            "entrypoint": "0x0008118c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008118c": "calculate_new_value_0008118c",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ae": {
            "additional_data": {
                "0xffffffff": {
                    "1": "error_flag"
                },
                "<original_variable_name_1>": {
                    "1": "error_code",
                    "2": "<new_variable_name_1>"
                },
                "DAT_XXXX": {
                    "1": "dat_xxx"
                },
                "FUN_000811ae": {
                    "1": "calculate_return_value",
                    "2": "get_return_value",
                    "3": "initialize_return_value",
                    "4": "get_negative_one",
                    "7": "get_default_value",
                    "8": "get_error_code"
                },
                "PTR_XXXX": {
                    "1": "ptr_xxx"
                },
                "return": {
                    "1": "return_value"
                },
                "returnValue": {
                    "1": "error_status"
                },
                "undefined4": {
                    "2": "return_value",
                    "4": "int",
                    "5": "error_code",
                    "9": "uint32_t"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_000811ae(void)\n\n{\n  return_value 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_000811ae",
            "entrypoint": "0x000811ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "return": "return_value",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b4": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_segment",
                    "3": "memory_value"
                },
                "0x2000": {
                    "1": "segment_size",
                    "2": "memory_size"
                },
                "<original_variable_name_1>": {
                    "1": "value"
                },
                "FUN_000811b4": {
                    "1": "set_memory_to_default",
                    "12": "initialize_memory",
                    "3": "set_memory_size"
                },
                "param_1": {
                    "1": "return_val",
                    "2": "initial_value",
                    "3": "param",
                    "5": "result",
                    "9": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "12": "memory_address",
                    "2": "memory_offset",
                    "4": "buffer",
                    "6": "address"
                },
                "param_2 + 4": {
                    "1": "address_to_update"
                },
                "undefined4": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_000846b4"
            ],
            "code": "\nresult initialize_memory_000811b4(result param1,int memory_address)\n\n{\n  *(result *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_000811b4",
            "entrypoint": "0x000811b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memory_address",
                "undefined4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811be": {
            "additional_data": {
                "": {
                    "1": "void",
                    "2": ""
                },
                "1": {
                    "1": "return_value"
                },
                "<no_parameters>": {
                    "1": "<no_parameters>"
                },
                "<no_variables>": {
                    "1": "<no_variables>"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "1": "status",
                    "2": "<new_variable_name_1>"
                },
                "FUN_000811be": {
                    "1": "get_status",
                    "2": "get_true_value",
                    "5": "get_one",
                    "8": "get_return_value"
                },
                "PTR_FUN_000811be": {
                    "1": "new_application_data"
                },
                "PTR_FUN_000811be_Buffer": {
                    "1": "application_buffer"
                },
                "RET": {
                    "1": "return_value"
                },
                "newApplicationData": {
                    "1": "application_data"
                },
                "return": {
                    "1": "status",
                    "3": "result",
                    "4": "return_value"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "void",
                    "2": "uint32_t",
                    "8": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_000846dc"
            ],
            "code": "\nint get_return_value_000811be(void)\n\n{\n  return_value 1;\n}\n\n",
            "current_name": "get_return_value_000811be",
            "entrypoint": "0x000811be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811be": "get_return_value_000811be",
                "return": "return_value",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c2": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_function_name>": {
                    "1": "<new_function_name>"
                },
                "<original_parameter_name_1>": {
                    "2": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_000811c2": {
                    "1": "initialize_value",
                    "2": "initialize_data",
                    "3": "get_return_value",
                    "4": "get_zero",
                    "5": "get_default_value",
                    "8": "initialize"
                },
                "return": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "4": "int",
                    "8": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084700"
            ],
            "code": "\nvoid initialize_000811c2(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_000811c2",
            "entrypoint": "0x000811c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c2": "initialize_000811c2",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c6": {
            "additional_data": {
                "<no_parameters>": {
                    "1": "<no_parameters>"
                },
                "<no_variables>": {
                    "1": "<no_variables>"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<unnamed_variable>": {
                    "1": "result"
                },
                "FUN_000811c6": {
                    "1": "calculate_result",
                    "16": "initialize",
                    "3": "get_return_value",
                    "4": "get_zero",
                    "5": "get_default_value"
                },
                "FUN_000811c6<return>": {
                    "1": "status"
                },
                "PTR_XXXX": {
                    "1": "..."
                },
                "return": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "status",
                    "3": "int",
                    "6": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084728"
            ],
            "code": "\nvoid initialize_000811c6(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_000811c6",
            "entrypoint": "0x000811c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c6": "initialize_000811c6",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811cc": {
            "additional_data": {
                "FUN_000811cc": {
                    "1": "process_bytes",
                    "16": "copy_bytes",
                    "2": "copy_bytes_to_memory",
                    "4": "process_data"
                },
                "iVar1": {
                    "1": "loop_iterator",
                    "13": "i",
                    "14": "index"
                },
                "int param_2": {
                    "1": "src_address"
                },
                "param_1": {
                    "1": "result",
                    "2": "input_pointer",
                    "3": "dest",
                    "4": "param1",
                    "5": "param_1"
                },
                "param_2": {
                    "1": "array_start",
                    "2": "byte_array",
                    "3": "src",
                    "4": "source"
                },
                "param_3": {
                    "1": "num_chars",
                    "10": "num_bytes",
                    "2": "param3",
                    "4": "size",
                    "8": "length"
                },
                "uint param_3": {
                    "1": "num_bytes"
                },
                "undefined4 param_1": {
                    "1": "param"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084464"
            ],
            "code": "\n\n\nuint copy_bytes_000811cc(undefined4 param_1,int source_address,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source_address + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_000811cc",
            "entrypoint": "0x000811cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "iVar1": "index",
                "param_2": "source_address",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081208": {
            "called": [
                "FUN_00081714"
            ],
            "calling": [
                "FUN_000805d0",
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_0008043e"
            ],
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "FUN_00081208",
            "entrypoint": "0x00081208",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_0008120c": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008120c",
            "entrypoint": "0x0008120c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081210": {
            "additional_data": {
                "&DAT_00084d18": {
                    "1": "pio_address_array"
                },
                "&DAT_00084d1c": {
                    "1": "io_mode_a"
                },
                "&DAT_00084d20": {
                    "1": "io_port_a"
                },
                "&DAT_00084d24": {
                    "1": "channel_enabled"
                },
                "&DAT_00084d28": {
                    "1": "pio_pull_up_array"
                },
                "&DAT_00084d31": {
                    "1": "channel_pin_array"
                },
                "&DAT_20070d94": {
                    "1": "port_mode_array"
                },
                "FUN_00080da0": {
                    "1": "configure_pio",
                    "3": "pio_configure"
                },
                "FUN_00080e18": {
                    "1": "enable_peripheral_clock",
                    "3": "adc_disable_channel"
                },
                "FUN_0008105c": {
                    "1": "set_pio",
                    "3": "pmc_enable_periph_clk"
                },
                "FUN_00081210": {
                    "1": "configure_and_disable_adc_channel",
                    "2": "configure_and_enable_channel",
                    "3": "configure_channel",
                    "4": "configure_peripheral",
                    "5": "configure_pin",
                    "7": "configure_adc_channel"
                },
                "PIO_Configure": {
                    "12": "configure_pio"
                },
                "_DAT_400e0614": {
                    "1": "register2"
                },
                "_DAT_400e0618": {
                    "1": "pio_osr",
                    "2": "register1"
                },
                "_DAT_400e0704": {
                    "1": "pio_pdr_write"
                },
                "_DAT_400e0708": {
                    "1": "register2"
                },
                "adc_disable_channel": {
                    "1": "disable_channel"
                },
                "bVar5": {
                    "1": "low_bits",
                    "2": "mode_low",
                    "3": "mode_bits",
                    "4": "pin_mode",
                    "6": "lower_nibble"
                },
                "bVar6": {
                    "1": "mode_bits",
                    "2": "config_bits"
                },
                "iVar1": {
                    "1": "status",
                    "29": "result"
                },
                "iVar7": {
                    "1": "configuration_index",
                    "2": "config_offset",
                    "3": "channel_offset",
                    "6": "offset",
                    "8": "config_index"
                },
                "iVar8": {
                    "1": "pio_base",
                    "2": "config_ptr",
                    "3": "pin_config",
                    "6": "pio_config"
                },
                "param_1": {
                    "1": "channel_id",
                    "10": "channel",
                    "12": "channel_index",
                    "2": "pin_number",
                    "4": "pin_index"
                },
                "param_2": {
                    "1": "configuration",
                    "2": "config_index",
                    "24": "mode"
                },
                "pmc_enable_periph_clk": {
                    "1": "enable_peripheral_clk",
                    "10": "enable_peripheral_clock"
                },
                "uDVar3": {
                    "1": "configure_result"
                },
                "uDVar4": {
                    "1": "pin_mask"
                },
                "uVar2": {
                    "1": "peripheral_id",
                    "2": "periph_clk",
                    "4": "pin_mask",
                    "5": "pin"
                },
                "uVar3": {
                    "1": "u_config",
                    "2": "pin_mode",
                    "3": "pin_config",
                    "5": "pio_mode"
                },
                "uVar4": {
                    "1": "pio_mask",
                    "2": "temp_var",
                    "9": "pin_mask"
                }
            },
            "called": [
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_0008105c"
            ],
            "calling": [
                "FUN_000804a8",
                "FUN_00081318",
                "FUN_00080164"
            ],
            "code": "\n\n\nint configure_adc_channel_00081210(int channel_index,int mode)\n\n{\n  int result;\n  uint pin;\n  undefined4 pio_mode;\n  uint pin_mask;\n  byte lower_nibble;\n  byte pin_config;\n  int config_index;\n  int pio_config;\n  \n  result = channel_index;\n  if ((&DAT_00084d24)[channel_index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[channel_index] & 0xf) == 4) {\n      result = disable_channel(0x400c0000,(&DAT_00084d31)[channel_index * 0x1c]);\n    }\n    pin_config = (&DAT_20070d94)[channel_index];\n    lower_nibble = pin_config & 0xf;\n    if ((lower_nibble < 3) && (pin_config != 0)) {\n      if (lower_nibble == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = channel_index * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),0);\n        pin_config = (&DAT_20070d94)[channel_index] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = channel_index * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),1);\n        pin_config = (&DAT_20070d94)[channel_index] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[channel_index] = pin_config;\n      return result;\n    }\n    config_index = channel_index * 0x1c;\n    pio_config = *(int *)(&DAT_00084d18 + config_index);\n    if (pin_config >> 4 == 0) {\n      pio_mode = 4;\n    }\n    else {\n      pio_mode = 5;\n    }\n    result = configure_pio(pio_config,pio_mode,*(undefined4 *)(&DAT_00084d1c + config_index),\n                          *(undefined4 *)(&DAT_00084d28 + config_index));\n    (&DAT_20070d94)[channel_index] = (&DAT_20070d94)[channel_index] & 0xf0 | 3;\n    if (*(int *)(pio_config + 0x18) == -1) {\n      pin = *(uint *)(&DAT_00084d20 + config_index);\n      if (0x2c < pin) {\n        return 1;\n      }\n      if (pin < 0x20) {\n        pin = 1 << (pin & 0xff);\n        pin_mask = _DAT_400e0618 & pin;\n        if (pin_mask == pin) {\n          _DAT_400e0614 = pin_mask;\n        }\n      }\n      else {\n        pin = 1 << (pin - 0x20 & 0xff);\n        pin_mask = _DAT_400e0708 & pin;\n        if (pin_mask == pin) {\n          _DAT_400e0704 = pin_mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "configure_adc_channel_00081210",
            "entrypoint": "0x00081210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081210": "configure_adc_channel_00081210",
                "PIO_Configure": "configure_pio",
                "adc_disable_channel": "disable_channel",
                "bVar5": "lower_nibble",
                "bVar6": "pin_config",
                "iVar1": "result",
                "iVar7": "config_index",
                "iVar8": "pio_config",
                "param_1": "channel_index",
                "param_2": "mode",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "uVar2": "pin",
                "uVar3": "pio_mode",
                "uVar4": "pin_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081318": {
            "additional_data": {
                "FUN_00080d7a": {
                    "1": "set_output_pin",
                    "17": "pin_mode"
                },
                "FUN_00080e04": {
                    "1": "check_output_pin_status",
                    "17": "pio_set_output"
                },
                "FUN_00081210": {
                    "1": "get_pin_config",
                    "17": "pio_get_output_data_status"
                },
                "FUN_00081318": {
                    "1": "set_output_status",
                    "10": "configure_pin",
                    "2": "configure_gpio",
                    "3": "update_pin_mode",
                    "4": "set_pin_mode"
                },
                "FUN_00081318_block_1": {
                    "1": "check_if_pin_is_output"
                },
                "FUN_00081318_block_2": {
                    "1": "update_pin_state"
                },
                "FUN_00081318_block_3": {
                    "1": "check_and_get_output_data_status"
                },
                "FUN_00081318_block_4": {
                    "1": "update_output_data"
                },
                "FUN_00081318_block_5": {
                    "1": "set_output"
                },
                "PIO_GetOutputDataStatus": {
                    "1": "get_output_data_status"
                },
                "PIO_SetOutput": {
                    "1": "set_output"
                },
                "iVar1": {
                    "1": "data_status",
                    "11": "output_data_status",
                    "17": "output_status",
                    "2": "status"
                },
                "iVar3": {
                    "1": "pin_mode_id",
                    "2": "pio",
                    "3": "pio_index",
                    "4": "pin_config"
                },
                "param_1": {
                    "12": "pin_index",
                    "13": "pin_number",
                    "6": "pin"
                },
                "param_2": {
                    "1": "mode_value",
                    "10": "mode",
                    "2": "state",
                    "3": "pin_value",
                    "9": "value"
                },
                "param_3": {
                    "1": "configuration",
                    "16": "param",
                    "2": "param_value",
                    "3": "param_3"
                },
                "pinMode": {
                    "1": "configure_pin"
                },
                "uVar2": {
                    "1": "pin_mode_value",
                    "2": "output_mask",
                    "20": "output_data",
                    "5": "output_value"
                }
            },
            "called": [
                "FUN_00081210",
                "FUN_00080e04",
                "FUN_00080d7a"
            ],
            "calling": [
                "FUN_000801b0",
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_00080258",
                "FUN_00080164"
            ],
            "code": "\nvoid configure_pin_00081318(int pin_number,int mode,undefined4 param)\n\n{\n  int output_status;\n  undefined4 output_data;\n  int output_pin;\n  \n  if ((&DAT_00084d24)[pin_number * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[pin_number] & 0xf) == 5) {\n      configure_pin_00081318(pin_number,1,param,5,pin_number,mode,param);\n    }\n    (&DAT_20070d94)[pin_number] = (&DAT_20070d94)[pin_number] & 0xf | (byte)(mode << 4);\n    output_pin = *(int *)(&DAT_00084d18 + pin_number * 0x1c);\n    output_data = *(undefined4 *)(&DAT_00084d1c + pin_number * 0x1c);\n    output_status = get_output_data_status(output_pin,output_data);\n    if (output_status == 0) {\n      if (mode != 0) {\n        *(undefined4 *)(output_pin + 100) = output_data;\n        return;\n      }\n      *(undefined4 *)(output_pin + 0x60) = output_data;\n      return;\n    }\n    set_output(output_pin,output_data,mode,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "configure_pin_00081318",
            "entrypoint": "0x00081318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081318": "configure_pin_00081318",
                "PIO_GetOutputDataStatus": "get_output_data_status",
                "PIO_SetOutput": "set_output",
                "iVar1": "output_status",
                "iVar3": "output_pin",
                "param_1": "pin_number",
                "param_2": "mode",
                "param_3": "param",
                "pinMode": "configure_pin",
                "uVar2": "output_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081388": {
            "additional_data": {
                ".r_info": {
                    "1": "info_value"
                },
                ".r_offset": {
                    "1": "offset_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocation_array",
                    "12": "rel_array",
                    "2": "relocation_entries",
                    "3": "relocation_table"
                },
                "Elf32_Rel_ARRAY_20070000[0].r_offset": {
                    "1": "relocation_entry_0_offset"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_info": {
                    "1": "relocation_info"
                },
                "FUN_00081388": {
                    "1": "execute_if_rel_info_valid",
                    "2": "execute_if_r_info_equals_zero",
                    "3": "execute_if_r_info_zero",
                    "4": "execute_if_r_info_is_zero"
                },
                "code": {
                    "1": "callback_function"
                },
                "r_info": {
                    "13": "info",
                    "15": "relocation_info"
                },
                "r_offset": {
                    "1": "rel_offset",
                    "13": "offset",
                    "14": "relocation_offset"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_if_r_info_is_zero_00081388(void)\n\n{\n  if ((relocation_entry_6_info != 0xffffffff) &&\n     (relocation_entry_6_info = relocation_entry_6_info - 1,\n     relocation_entry_6_info == 0)) {\n    (*(callback_function *)((int)&relocation_entry_0_offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_if_r_info_is_zero_00081388",
            "entrypoint": "0x00081388",
            "imported": false,
            "improved": true,
            "renaming": {
                ".r_info": "info_value",
                ".r_offset": "offset_value",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[0].r_offset": "relocation_entry_0_offset",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "relocation_entry_6_info",
                "FUN_00081388": "execute_if_r_info_is_zero_00081388",
                "code": "callback_function",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813a8": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x80)": {
                    "1": "buffer_offset1",
                    "2": "set_first_value"
                },
                "*(undefined4 *)(param_1 + 0x84)": {
                    "1": "memory_offset2",
                    "2": "set_second_value"
                },
                "<original_variable_name_1>": {
                    "1": "size"
                },
                "<original_variable_name_2>": {
                    "1": "p_data"
                },
                "<original_variable_name_3>": {
                    "1": "data_size"
                },
                "<unnamed_variable_1>": {
                    "1": "size"
                },
                "<unnamed_variable_2>": {
                    "1": "zero"
                },
                "<unnamed_variable_3>": {
                    "1": "zero"
                },
                "<unnamed_variable_4>": {
                    "1": "null_pointer"
                },
                "<unnamed_variable_5>": {
                    "1": "null_pointer"
                },
                "DAT_": {
                    "1": "<unchanged>",
                    "3": ""
                },
                "DAT_...": {
                    "1": "..."
                },
                "FUN_000813a8": {
                    "1": "initialize_data",
                    "23": "initialize_memory",
                    "4": "initialize_buffer"
                },
                "FUN_00082504": {
                    "1": "sub_function"
                },
                "PTR_": {
                    "1": "<unchanged>",
                    "3": ""
                },
                "PTR_...": {
                    "1": "..."
                },
                "PTR_FUN_00082504": {
                    "4": "sub_function"
                },
                "PTR_FUN_00082504_param_1": {
                    "1": "sub_function_param"
                },
                "PTR_FUN_00082504_param_2": {
                    "1": "sub_function_value"
                },
                "PTR_FUN_00082504_param_3": {
                    "1": "sub_function_size"
                },
                "PTR_XXXXXX": {
                    "1": "unchanged_var"
                },
                "memset": {
                    "1": "initialize_with_zero"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "10": "buffer",
                    "2": "memory_pointer",
                    "6": "memory_buffer",
                    "9": "memory"
                },
                "param_1 + 0x80": {
                    "1": "buffer_end"
                },
                "param_1 + 0x84": {
                    "1": "counter"
                },
                "param_2": {
                    "1": "size",
                    "3": "unused",
                    "8": "value"
                },
                "param_3": {
                    "1": "block_size",
                    "11": "size",
                    "2": "buffer_size",
                    "3": "param3"
                },
                "uint param_3": {
                    "1": "unknown_size"
                },
                "undefined": {
                    "1": "data"
                },
                "undefined param_2": {
                    "1": "unknown_param"
                },
                "undefined4": {
                    "1": "<unchanged>",
                    "2": "uint32"
                },
                "undefined4 *param_1": {
                    "1": "buffer"
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nint initialize_memory_000813a8(int buffer)\n\n{\n  fill_memory(buffer,0,0x80);\n  *(uint32 *)(buffer + 0x80) = 0;\n  *(uint32 *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "current_name": "initialize_memory_000813a8",
            "entrypoint": "0x000813a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "memset": "fill_memory",
                "param_1": "buffer",
                "undefined": "data",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813c2": {
            "additional_data": {
                "FUN_000813c2": {
                    "1": "update_data_and_index",
                    "3": "update_parameter",
                    "4": "update_data",
                    "5": "update_and_store_value",
                    "7": "update_buffer"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_address",
                    "3": "buffer_address",
                    "5": "buffer",
                    "8": "base_address"
                },
                "param_2": {
                    "1": "character",
                    "2": "data",
                    "21": "new_value",
                    "3": "new_data",
                    "4": "value"
                },
                "uVar1": {
                    "1": "current_index",
                    "13": "updated_index",
                    "4": "next_index",
                    "8": "new_index"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_buffer_000813c2(int base_address,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(base_address + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(base_address + 0x84)) {\n    *(undefined *)(base_address + *(int *)(base_address + 0x80)) = new_value;\n    *(uint *)(base_address + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_buffer_000813c2",
            "entrypoint": "0x000813c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "base_address",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813e4": {
            "additional_data": {
                "*(*(input_value + 0x10) + 0x80)": {
                    "1": "first_value"
                },
                "*(*(input_value + 0x10) + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "subtract_value"
                },
                "*(int *)(addressOffset + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(addressOffset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(first_ptr + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(first_ptr + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "value_ptr",
                    "2": "pointer_to_offset"
                },
                "*(int *)(param_1 + 0x10) + 0x80": {
                    "1": "pointer1"
                },
                "*(int *)(param_1 + 0x10) + 0x84": {
                    "1": "ptr_offset2"
                },
                "*(int *)(pointer_A + 0x80)": {
                    "2": "value_a"
                },
                "*(int *)(pointer_A + 0x84)": {
                    "2": "value_b"
                },
                "*(int *)(pointer_to_offset + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(pointer_to_offset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(ptr1 + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(ptr1 + 0x84)": {
                    "1": "value2"
                },
                "*(int *)(ptr_1 + 0x80)": {
                    "1": "ptr_2"
                },
                "*(int *)(ptr_1 + 0x84)": {
                    "1": "ptr_3"
                },
                "*(int *)(ptr_offset + 0x80)": {
                    "1": "value_1"
                },
                "*(int *)(ptr_offset + 0x84)": {
                    "1": "value_2"
                },
                "*(int *)(valuePointer + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(valuePointer + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(value_ptr + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(value_ptr + 0x84)": {
                    "1": "second_value"
                },
                "+ 0x10": {
                    "1": "offset"
                },
                "+ 0x80": {
                    "1": "first_value_offset"
                },
                "+ 0x84": {
                    "1": "second_value_offset"
                },
                "0x10": {
                    "1": "base_address_offset"
                },
                "0x7f": {
                    "1": "bitwise_mask"
                },
                "0x80": {
                    "1": "first_value_offset",
                    "2": "first_offset"
                },
                "0x84": {
                    "1": "second_value_offset",
                    "2": "second_offset"
                },
                "FUN_000813e4": {
                    "1": "calculate_difference_modulo_127",
                    "26": "calculate_difference",
                    "3": "calculate_difference_and_mask"
                },
                "PTR_1": {
                    "1": "pointer_1"
                },
                "PTR_2": {
                    "1": "pointer_2"
                },
                "PTR_x": {
                    "1": "pointer_x"
                },
                "PTR_y": {
                    "1": "pointer_y"
                },
                "local_var_1": {
                    "1": "base_address"
                },
                "local_var_2": {
                    "1": "offset_1"
                },
                "local_var_3": {
                    "1": "offset_2"
                },
                "new_variable_name_1": {
                    "1": "base_address"
                },
                "new_variable_name_2": {
                    "1": "offset1"
                },
                "new_variable_name_3": {
                    "1": "offset2"
                },
                "param_1": {
                    "1": "param",
                    "2": "input",
                    "24": "input_value",
                    "3": "input_parameter"
                },
                "result": {
                    "1": "difference"
                },
                "return_value": {
                    "1": "difference"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_000813e4",
            "entrypoint": "0x000813e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081454": {
            "additional_data": {
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": {
                    "1": "info_value"
                },
                "*(int *)(iVar1 + 0x80)": {
                    "1": "data_flag2"
                },
                "*(int *)(iVar1 + 0x84)": {
                    "1": "data_flag1"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "data_address"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "data_info_address"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00081454": {
                    "1": "update_value_if_needed",
                    "18": "update_data",
                    "2": "update_parameter",
                    "5": "update_value"
                },
                "PTR_": {
                    "1": ""
                },
                "iVar1": {
                    "1": "data_value",
                    "2": "data_pointer",
                    "3": "ptr1",
                    "5": "data_ptr",
                    "6": "data_offset"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "data_address",
                    "3": "data_struct",
                    "4": "data_pointer",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "parameter_value",
                    "2": "new_data",
                    "24": "new_value"
                },
                "uVar2": {
                    "1": "new_offset",
                    "11": "new_index",
                    "2": "new_value_index",
                    "4": "updated_index",
                    "5": "next_index"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_00081454(int data_ptr,undefined4 new_value)\n\n{\n  int data_offset;\n  uint new_index;\n  \n  data_offset = *(int *)(data_ptr + 0x14);\n  if ((*(int *)(*(int *)(data_ptr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_offset + 0x84) == *(int *)(data_offset + 0x80))) {\n    *(undefined4 *)(*(int *)(data_ptr + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    new_index = *(int *)(data_offset + 0x80) + 1U & 0x8000007f;\n    if ((int)new_index < 0) {\n      new_index = (new_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_offset + 0x84) == new_index);\n    *(char *)(data_offset + *(int *)(data_offset + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_ptr + 0x14) + 0x80) = new_index;\n    *(undefined4 *)(*(int *)(data_ptr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_00081454",
            "entrypoint": "0x00081454",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "iVar1": "data_offset",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "uVar2": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814e4": {
            "additional_data": {
                "&PTR_FUN_00081454_1_000857a8": {
                    "1": "function_pointer"
                },
                "*(param_1 + 7)": {
                    "1": "param7_value"
                },
                "*param_1": {
                    "1": "function_ptr"
                },
                "FUN_000814e4": {
                    "1": "initialize_param_array",
                    "12": "initialize_params",
                    "14": "initialize_parameters",
                    "3": "initialize_function"
                },
                "PTR_FUN_00081454_1_000857a8": {
                    "1": "some_function_ptr"
                },
                "param_1": {
                    "1": "array",
                    "2": "buffer",
                    "3": "param_array",
                    "4": "function_params",
                    "7": "params",
                    "8": "parameters"
                },
                "param_1[1]": {
                    "1": "param1_value1",
                    "2": "output_array[1]"
                },
                "param_1[2]": {
                    "1": "param1_value2",
                    "2": "output_array[2]"
                },
                "param_1[4]": {
                    "1": "array[4]",
                    "2": "output_array[4]"
                },
                "param_1[5]": {
                    "1": "param1_value7",
                    "2": "output_array[5]"
                },
                "param_1[6]": {
                    "1": "param1_value3",
                    "2": "output_array[6]"
                },
                "param_1[7]": {
                    "1": "output_array[7]"
                },
                "param_1[8]": {
                    "1": "param1_value6",
                    "2": "output_array[8]"
                },
                "param_2": {
                    "1": "param_value1",
                    "10": "value2",
                    "2": "input_value1",
                    "3": "value",
                    "9": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "input_value2",
                    "7": "value2",
                    "9": "value3"
                },
                "param_4": {
                    "1": "parameter8",
                    "10": "value4",
                    "2": "value2",
                    "7": "value3"
                },
                "param_5": {
                    "1": "param5",
                    "10": "value5",
                    "2": "value2",
                    "7": "value4"
                },
                "param_6": {
                    "1": "param6_value",
                    "10": "value6",
                    "2": "value4",
                    "7": "value5"
                }
            },
            "called": [],
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "code": "\nvoid initialize_parameters_000814e4(undefined4 *parameters,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  output_array[1] = 0;\n  output_array[2] = 1000;\n  output_array[6] = value2;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = value3;\n  output_array[4] = value5;\n  output_array[8] = value4;\n  output_array[5] = value6;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_000814e4",
            "entrypoint": "0x000814e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_1[1]": "output_array[1]",
                "param_1[2]": "output_array[2]",
                "param_1[4]": "output_array[4]",
                "param_1[5]": "output_array[5]",
                "param_1[6]": "output_array[6]",
                "param_1[8]": "output_array[8]",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081508": {
            "additional_data": {
                "*(byte *)(param_1 + 0x1c)": {
                    "1": "byte_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "i_var2"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "i_var3"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "clock_address"
                },
                "*(undefined4 **)(param_1 + 0x18)": {
                    "1": "config_array"
                },
                "DAT_20070000": {
                    "1": "data_var"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_array",
                    "2": "rel_array"
                },
                "FUN_00081508": {
                    "1": "initialize_periph",
                    "2": "configure_peripheral",
                    "22": "initialize_peripheral"
                },
                "iVar1": {
                    "1": "index",
                    "2": "local_var1",
                    "3": "variable1",
                    "4": "var1",
                    "5": "temp_var"
                },
                "param_1": {
                    "1": "input_address",
                    "10": "base_address",
                    "2": "param_a",
                    "5": "peripheral_address",
                    "9": "param1"
                },
                "param_2": {
                    "1": "param_divider",
                    "13": "param2",
                    "2": "param",
                    "3": "factor"
                },
                "param_3": {
                    "1": "param",
                    "14": "param3",
                    "2": "param_c",
                    "6": "value"
                },
                "pmc_enable_periph_clk": {
                    "1": "enable_clock_for_peripheral"
                },
                "puVar2": {
                    "1": "variable2",
                    "2": "config_ptr",
                    "3": "pointer_var",
                    "4": "register_array"
                },
                "r_offset": {
                    "1": "relative_offset"
                }
            },
            "called": [
                "FUN_00080e18"
            ],
            "calling": [],
            "code": "\nvoid initialize_peripheral_00081508(int base_address,uint param2,undefined4 param3)\n\n{\n  int temp_var;\n  undefined4 *register_array;\n  \n  enable_clock_for_peripheral(*(undefined4 *)(base_address + 0x20));\n  register_array = *(undefined4 **)(base_address + 0x18);\n  register_array[0x48] = 0x202;\n  *register_array = 0xac;\n  register_array[1] = param3;\n  register_array[8] = rel_array[6].relative_offset / param2 >> 4;\n  register_array[3] = 0xffffffff;\n  register_array[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(base_address + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(base_address + 0x1c) & 0x1f);\n  temp_var = *(int *)(base_address + 0x10);\n  *(undefined4 *)(temp_var + 0x84) = 0;\n  *(undefined4 *)(temp_var + 0x80) = 0;\n  temp_var = *(int *)(base_address + 0x14);\n  *(undefined4 *)(temp_var + 0x84) = 0;\n  *(undefined4 *)(temp_var + 0x80) = 0;\n  *register_array = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_00081508",
            "entrypoint": "0x00081508",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081508": "initialize_peripheral_00081508",
                "iVar1": "temp_var",
                "param_1": "base_address",
                "param_2": "param2",
                "param_3": "param3",
                "pmc_enable_periph_clk": "enable_clock_for_peripheral",
                "puVar2": "register_array",
                "r_offset": "relative_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815d4": {
            "additional_data": {
                "&PTR_FUN_00081454_1_000857d8": {
                    "1": "function_pointer"
                },
                "*param_1": {
                    "1": "address_of_uart_instance",
                    "2": "result"
                },
                "FUN_00081454_1_000857d8": {
                    "1": "uart_class_instance"
                },
                "FUN_000814e4": {
                    "1": "process_input_data",
                    "2": "configure_uart",
                    "4": "process_data"
                },
                "FUN_000815d4": {
                    "1": "configure_uart",
                    "30": "initialize_uart"
                },
                "PTR_FUN_00081454_1_000857d8": {
                    "1": "uart_function_pointer"
                },
                "param_1": {
                    "1": "uart_parameters",
                    "14": "uart_instance",
                    "2": "uart_pointer",
                    "5": "output_buffer"
                },
                "param_1[9]": {
                    "1": "uart_instance[9]"
                },
                "param_2": {
                    "1": "value_to_assign",
                    "2": "input_param",
                    "4": "param_value",
                    "6": "input_value",
                    "9": "param"
                },
                "param_3": {
                    "1": "unknown_param",
                    "4": "param3"
                },
                "param_4": {
                    "1": "unknown2",
                    "2": "another_param",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_000814e4"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nundefined4 * initialize_uart_000815d4(undefined4 *uart_instance,undefined4 param)\n\n{\n  UARTClass();\n  *uart_instance = &PTR_FUN_00081454_1_000857d8;\n  data_parameter = param;\n  return uart_instance;\n}\n\n",
            "current_name": "initialize_uart_000815d4",
            "entrypoint": "0x000815d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815d4": "initialize_uart_000815d4",
                "param_1": "uart_instance",
                "param_1[9]": "data_parameter",
                "param_2": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815f8": {
            "additional_data": {
                "<<": {
                    "1": "bit_shift_left"
                },
                "FUN_000815f8": {
                    "1": "combine_param_and_shift_left",
                    "14": "combine_values",
                    "2": "combine_parameters",
                    "5": "combine_params"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "value1",
                    "2": "value",
                    "3": "input_value",
                    "4": "input1"
                },
                "param_1 << 8": {
                    "1": "input1_shifted8_bits"
                },
                "param_1 << 8 | param_2": {
                    "1": "combined_values"
                },
                "param_2": {
                    "1": "original_value",
                    "11": "value2",
                    "2": "value",
                    "3": "mask",
                    "4": "input2"
                },
                "param_3": {
                    "1": "new_parameter_name3"
                },
                "return": {
                    "1": "result",
                    "2": "combined_value"
                },
                "|": {
                    "1": "bitwise_or"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080410"
            ],
            "code": "\nuint combine_values_000815f8(int value1,uint value2)\n\n{\n  combined_value value2 | value1 << 8;\n}\n\n",
            "current_name": "combine_values_000815f8",
            "entrypoint": "0x000815f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2",
                "return": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815fe": {
            "additional_data": {
                "*param_1": {
                    "1": "memory_address"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "FUN_000815fe": {
                    "1": "free_and_return_ptr",
                    "2": "free_and_return",
                    "21": "free_memory",
                    "3": "free_memory_and_return"
                },
                "FUN_00081e04": {
                    "1": "reverse_data",
                    "2": "cleanup_function",
                    "3": "release_resource"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "12": "memory_block",
                    "2": "memory",
                    "7": "memory_pointer"
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [],
            "code": "\nundefined4 * free_memory_000815fe(undefined4 *memory_block)\n\n{\n  free(*memory_block);\n  return memory_block;\n}\n\n",
            "current_name": "free_memory_000815fe",
            "entrypoint": "0x000815fe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815fe": "free_memory_000815fe",
                "param_1": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008160c": {
            "additional_data": {
                "*param_1": {
                    "1": "param"
                },
                "FUN_0008160c": {
                    "1": "reset_parameter",
                    "13": "reset_param",
                    "2": "reset_values",
                    "3": "reset_memory"
                },
                "FUN_00081e04": {
                    "1": "cleanup_function",
                    "3": "sub_function"
                },
                "param_1": {
                    "1": "ptr",
                    "11": "param",
                    "2": "parameters",
                    "4": "memory_pointer"
                },
                "param_1[1]": {
                    "1": "tag",
                    "2": "params[1]",
                    "7": "param[1]"
                },
                "param_1[2]": {
                    "1": "param_2_assigned",
                    "2": "params[2]",
                    "7": "param[2]"
                },
                "undefined4 param_1": {
                    "1": "undefined_variable"
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid reset_param_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    free();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_param_0008160c",
            "entrypoint": "0x0008160c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008160c": "reset_param_0008160c",
                "param_1": "param",
                "param_1[1]": "param[1]",
                "param_1[2]": "param[2]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081622": {
            "additional_data": {
                "*param_1": {
                    "1": "previous_array"
                },
                "FUN_00081622": {
                    "1": "expand_and_assign_memory",
                    "15": "resize_array",
                    "2": "resize_array_and_assign"
                },
                "FUN_000825a0": {
                    "1": "perform_operation"
                },
                "iVar1": {
                    "1": "new_ptr_to_memory",
                    "10": "new_array",
                    "2": "result",
                    "3": "resized_array",
                    "4": "new_array_pointer"
                },
                "param_1": {
                    "1": "ptr_to_memory",
                    "16": "array",
                    "2": "pointer",
                    "5": "array_ptr"
                },
                "param_2": {
                    "1": "array_size",
                    "24": "new_size",
                    "5": "size"
                },
                "param_3": {
                    "1": "old_size",
                    "2": "new_size",
                    "3": "arg1",
                    "6": "param3",
                    "8": "arg3"
                },
                "param_4": {
                    "1": "alignment",
                    "3": "arg2",
                    "6": "param4",
                    "8": "arg4"
                }
            },
            "called": [
                "FUN_000825a0"
            ],
            "calling": [
                "FUN_0008163a"
            ],
            "code": "\nint resize_array_00081622(int *array,int new_size,undefined4 arg3,undefined4 arg4)\n\n{\n  int new_array;\n  \n  new_array = realloc(*array,new_size + 1,arg3,arg4,arg4);\n  if (new_array != 0) {\n    *array = new_array;\n    array[1] = new_size;\n    new_array = 1;\n  }\n  return new_array;\n}\n\n",
            "current_name": "resize_array_00081622",
            "entrypoint": "0x00081622",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081622": "resize_array_00081622",
                "iVar1": "new_array",
                "param_1": "array",
                "param_2": "new_size",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008163a": {
            "additional_data": {
                "*param_1": {
                    "1": "buffer"
                },
                "FUN_0008163a": {
                    "1": "check_buffer_and_change",
                    "2": "check_and_change_buffer",
                    "3": "check_buffer_and_update",
                    "4": "check_buffer_validity",
                    "6": "check_and_modify_buffer",
                    "9": "check_and_update_buffer"
                },
                "changeBuffer": {
                    "1": "update_buffer"
                },
                "iVar1": {
                    "1": "result_code",
                    "17": "result",
                    "6": "change_result"
                },
                "param_1": {
                    "1": "input_array",
                    "28": "buffer"
                },
                "param_2": {
                    "1": "max_size",
                    "16": "size",
                    "2": "length",
                    "3": "required_size",
                    "6": "buffer_size"
                }
            },
            "called": [
                "FUN_00081622"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nundefined4 check_and_update_buffer_0008163a(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < size)) {\n    result = update_buffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_update_buffer_0008163a",
            "entrypoint": "0x0008163a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008163a": "check_and_update_buffer_0008163a",
                "changeBuffer": "update_buffer",
                "iVar1": "result",
                "param_1": "buffer",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008165c": {
            "additional_data": {
                "FUN_0008160c": {
                    "1": "reserve"
                },
                "FUN_0008163a": {
                    "1": "reserve"
                },
                "FUN_0008165c": {
                    "1": "update_values",
                    "2": "initialize_memory",
                    "3": "process_data",
                    "9": "update_data"
                },
                "FUN_00082994": {
                    "1": "copy_memory"
                },
                "iVar1": {
                    "1": "allocation_result",
                    "4": "reservation_result",
                    "8": "reservation_status",
                    "9": "result"
                },
                "invalidate": {
                    "1": "reset_data"
                },
                "param_1": {
                    "1": "input_array",
                    "10": "data",
                    "2": "output_buffer",
                    "4": "data_ptr"
                },
                "param_2": {
                    "1": "source_str",
                    "13": "source",
                    "14": "source_string",
                    "2": "new_string"
                },
                "param_3": {
                    "1": "new_size",
                    "13": "size",
                    "2": "new_value",
                    "3": "buffer_size",
                    "8": "length"
                },
                "reserve": {
                    "1": "check_reserve_limits"
                }
            },
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "calling": [
                "FUN_00081682"
            ],
            "code": "\nundefined4 * update_data_0008165c(undefined4 *data,undefined4 source_string,undefined4 size)\n\n{\n  int result;\n  \n  result = check_availability(data,size);\n  if (result == 0) {\n    reset_config(data);\n  }\n  else {\n    data[2] = size;\n    strcpy(*data,source_string);\n  }\n  return data;\n}\n\n",
            "current_name": "update_data_0008165c",
            "entrypoint": "0x0008165c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008165c": "update_data_0008165c",
                "iVar1": "result",
                "invalidate": "reset_config",
                "param_1": "data",
                "param_2": "source_string",
                "param_3": "size",
                "reserve": "check_availability"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081682": {
            "additional_data": {
                "FUN_0008165c": {
                    "1": "copy_data"
                },
                "FUN_00081682": {
                    "1": "initialize_and_copy_string",
                    "2": "initialize_memory",
                    "4": "initialize_buffer",
                    "5": "initialize_param",
                    "8": "initialize_param_array"
                },
                "FUN_00082a50": {
                    "1": "some_other_function"
                },
                "copy": {
                    "1": "copy_array",
                    "2": "copy_string"
                },
                "param_1": {
                    "1": "ptr_param_array",
                    "12": "param_array",
                    "2": "output_buffer",
                    "3": "output_array",
                    "4": "buffer",
                    "6": "array"
                },
                "param_2": {
                    "1": "input_string_length",
                    "2": "string",
                    "23": "input_string",
                    "3": "source_string"
                },
                "param_3": {
                    "1": "param_value"
                },
                "uVar1": {
                    "1": "str_length",
                    "2": "input_length",
                    "22": "string_length",
                    "4": "length"
                }
            },
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 * initialize_param_array_00081682(undefined4 *param_array,int input_string)\n\n{\n  undefined4 string_length;\n  \n  *param_array = 0;\n  param_array[1] = 0;\n  param_array[2] = 0;\n  if (input_string != 0) {\n    string_length = strlen(input_string);\n    copy_string(param_array,input_string,string_length);\n  }\n  return param_array;\n}\n\n",
            "current_name": "initialize_param_array_00081682",
            "entrypoint": "0x00081682",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081682": "initialize_param_array_00081682",
                "copy": "copy_string",
                "param_1": "param_array",
                "param_2": "input_string",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816a6": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000816a6",
            "entrypoint": "0x000816a6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000816a8": {
            "additional_data": {
                "FUNC_0008120c": {
                    "1": "perform_initialization",
                    "2": "perform_operation",
                    "4": "execute_function"
                },
                "FUNC_000816a6": {
                    "1": "execute_operation",
                    "2": "execute_action",
                    "3": "reverse_something"
                },
                "FUN_000804a8": {
                    "1": "get_system_state",
                    "2": "get_data"
                },
                "FUN_000816a8": {
                    "1": "start_system",
                    "2": "run_application",
                    "3": "run_system_loop",
                    "5": "main_loop",
                    "8": "run_system"
                },
                "_watchdogDefaultSetup": {
                    "1": "setup_watchdog"
                },
                "check_serial_events_00080ce0": {
                    "1": "check_for_serial_events",
                    "17": "check_serial_events"
                },
                "delay": {
                    "1": "delay_function",
                    "3": "wait",
                    "4": "delay_milliseconds",
                    "6": "short_delay"
                },
                "initVariant": {
                    "2": "configure_variant",
                    "23": "initialize_variant"
                },
                "initialize_data_000816d4": {
                    "1": "initialize_program_data",
                    "17": "initialize_data"
                },
                "initialize_system_00080ae4": {
                    "31": "initialize_system"
                },
                "loop": {
                    "1": "perform_loop",
                    "11": "run_loop",
                    "3": "system_loop",
                    "5": "main_loop",
                    "6": "execute_loop"
                },
                "process_data_000805d0": {
                    "18": "process_data"
                },
                "serialEventRun": {
                    "1": "execute_serial_events",
                    "12": "run_serial_events",
                    "3": "handle_serial_events",
                    "9": "process_serial_events"
                },
                "setup": {
                    "1": "setup_components",
                    "10": "setup_system",
                    "2": "setup_application",
                    "3": "setup_function",
                    "6": "setup_environment"
                }
            },
            "called": [
                "FUN_000805d0",
                "FUN_0008120c",
                "FUN_00080ae4",
                "FUN_000804a8",
                "FUN_000816a6",
                "FUN_000816d4",
                "FUN_00080ce0"
            ],
            "calling": [
                "FUN_00080f24"
            ],
            "code": "\nvoid run_system_000816a8(void)\n\n{\n  setup_watchdog();\n  initialize_system();\n  initialize_variant();\n  short_delay(1);\n  setup_system();\n  do {\n    run_loop();\n    run_serial_events();\n  } while( true );\n}\n\n",
            "current_name": "run_system_000816a8",
            "entrypoint": "0x000816a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816a8": "run_system_000816a8",
                "_watchdogDefaultSetup": "setup_watchdog",
                "delay": "short_delay",
                "initVariant": "initialize_variant",
                "initialize_system_00080ae4": "initialize_system",
                "loop": "run_loop",
                "serialEventRun": "run_serial_events",
                "setup": "setup_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d4": {
            "additional_data": {
                "DAT_400e1a54": {
                    "2": "memory_address"
                },
                "FUN_000816d4": {
                    "1": "initialize_value",
                    "12": "initialize_data",
                    "2": "initialize_global_variable",
                    "4": "set_initial_value",
                    "5": "initialize_memory"
                },
                "_DAT_400e1a54": {
                    "1": "pointer_value",
                    "2": "data_address",
                    "3": "memory_address",
                    "4": "data_value",
                    "5": "initial_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_data_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_data_000816d4",
            "entrypoint": "0x000816d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081714": {
            "additional_data": {
                "DAT_20071184": {
                    "1": "global_variable_value",
                    "2": "constant_value",
                    "7": "global_variable"
                },
                "FUN_00081714": {
                    "1": "get_global_variable_value",
                    "2": "get_constant_value",
                    "7": "get_data",
                    "9": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081208"
            ],
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "get_data_value_00081714",
            "entrypoint": "0x00081714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081730": {
            "additional_data": {
                "FUN_00081730": {
                    "1": "calculate_floating_point_sum",
                    "10": "calculate_float",
                    "2": "calculate_new_float",
                    "3": "reverse_bits"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "bVar8": {
                    "1": "bool_flag",
                    "2": "is_condition_met",
                    "4": "is_true",
                    "5": "is_equal",
                    "8": "is_zero"
                },
                "iVar1": {
                    "1": "shift_val1",
                    "2": "shift1",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "high_bits2",
                    "2": "shift2",
                    "3": "shifted_value2",
                    "5": "shifted_input2"
                },
                "param_1": {
                    "1": "input_a",
                    "11": "input1",
                    "2": "value1",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "input_2",
                    "11": "input2",
                    "2": "value2"
                },
                "param_3": {
                    "1": "flags",
                    "2": "exponent",
                    "9": "input3"
                },
                "param_4": {
                    "1": "fraction",
                    "2": "value4",
                    "9": "input4"
                },
                "uVar3": {
                    "1": "input1_xor_flag",
                    "2": "masked_value",
                    "4": "result1",
                    "6": "temp1"
                },
                "uVar4": {
                    "1": "result_2",
                    "2": "temp_value1",
                    "4": "result2",
                    "6": "temp2"
                },
                "uVar5": {
                    "1": "temp_value2",
                    "2": "shifted_input",
                    "4": "result1",
                    "5": "temp1",
                    "6": "result"
                },
                "uVar6": {
                    "1": "adjusted_exponent",
                    "3": "result2",
                    "5": "temp2"
                },
                "uVar7": {
                    "1": "u_var7",
                    "16": "difference",
                    "2": "temp3"
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint result;\n  uint temp2;\n  uint difference;\n  bool is_zero;\n  \n  temp1 = input2 ^ 0x80000000;\n  result = input1 << 1;\n  is_zero = result == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result == input4;\n  }\n  shifted_input1 = (int)result >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result = temp1;\n      if (shifted_input1 == -1) {\n        result = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = result;\n      }\n      is_zero = (result & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result == temp1;\n      }\n      if (!is_zero) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result;\n  is_zero = difference != 0;\n  temp2 = result;\n  if (is_zero && result <= input4) {\n    temp2 = result + difference;\n  }\n  if (is_zero && result <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_zero && result <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_zero && result <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (temp2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (temp2 == 0) {\n      result = result ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_zero = temp2 != 0;\n    temp2 = -temp2;\n    result = -result - (uint)is_zero;\n  }\n  if (result < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result = result * 2 + (uint)(temp1 != 0);\n    temp1 = temp2 - 2;\n    if ((result & 0x800000) == 0) {\n      difference = leading_zero_count(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result = result >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result = result + (temp1 - difference) * 0x800000;\n      }\n      return result | input1;\n    }\n  }\n  else {\n    temp1 = temp2 - 1;\n    if (0xffffff < result) {\n      temp1 = result & 1;\n      result = result >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  result = result + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input1;\n}\n\n",
            "current_name": "calculate_float_00081730",
            "entrypoint": "0x00081730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "LZCOUNT": "leading_zero_count",
                "bVar8": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result",
                "uVar6": "temp2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081734": {
            "additional_data": {
                "FUN_00081734": {
                    "1": "improve_code",
                    "13": "calculate_float",
                    "2": "calculate_floating_point",
                    "3": "reverse_float"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count",
                    "2": "leading_zero_count"
                },
                "LZCOUNT()": {
                    "1": "leading_zero_count"
                },
                "bVar7": {
                    "1": "is_equal_or_zero",
                    "23": "is_zero",
                    "4": "is_equal"
                },
                "iVar1": {
                    "1": "shifted_input_a",
                    "2": "shift_val1",
                    "3": "shifted_value1",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "shifted_input2_msb",
                    "2": "shift_amount2",
                    "3": "shifted_value2",
                    "5": "shifted_input2"
                },
                "param_1": {
                    "1": "num1",
                    "14": "input1",
                    "2": "input_a",
                    "4": "input_value1"
                },
                "param_2": {
                    "1": "exponent_bits2",
                    "14": "input2",
                    "2": "value2",
                    "4": "input_value2"
                },
                "param_3": {
                    "1": "input_val3",
                    "2": "value3",
                    "3": "unused",
                    "5": "param3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "unknown2",
                    "2": "value4",
                    "3": "rounding_mode",
                    "5": "param4",
                    "7": "input4"
                },
                "uVar10": {
                    "1": "shifted_sign_bit_a"
                },
                "uVar11": {
                    "1": "shifted_sign_bit_b"
                },
                "uVar12": {
                    "1": "rounded_bits"
                },
                "uVar13": {
                    "1": "is_not_same_mantissa"
                },
                "uVar14": {
                    "1": "shifted_in_bits"
                },
                "uVar15": {
                    "1": "extracted_exponent"
                },
                "uVar16": {
                    "1": "extracted_mantissa"
                },
                "uVar17": {
                    "1": "shift_count"
                },
                "uVar18": {
                    "1": "num_bits_in_shift"
                },
                "uVar19": {
                    "1": "shifted_mantissa"
                },
                "uVar20": {
                    "1": "shifted_exp_mant"
                },
                "uVar21": {
                    "1": "num_shifts"
                },
                "uVar22": {
                    "1": "shifted_in_mask"
                },
                "uVar3": {
                    "1": "rounded_value",
                    "2": "temp1",
                    "3": "result",
                    "5": "result1"
                },
                "uVar4": {
                    "1": "shifted_input_a",
                    "2": "shifted_input1"
                },
                "uVar5": {
                    "1": "frac_part2",
                    "2": "temp3",
                    "5": "shift_amount"
                },
                "uVar6": {
                    "1": "temp_value2",
                    "13": "difference",
                    "2": "exponent_difference"
                },
                "uVar8": {
                    "1": "temp_a"
                },
                "uVar9": {
                    "1": "packed_float_tmp"
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint shifted_input1;\n  uint shift_amount;\n  uint difference;\n  bool is_zero;\n  \n  shifted_input1 = input1 << 1;\n  is_zero = shifted_input1 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_input1 == input4;\n  }\n  shifted_input1 = (int)shifted_input1 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      shifted_input1 = input2;\n      if (shifted_input1 == -1) {\n        shifted_input1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = shifted_input1;\n      }\n      is_zero = (shifted_input1 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input1 == input2;\n      }\n      if (!is_zero) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      shifted_input1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shifted_input1 = shifted_input1 | 0x80000000;\n      }\n      return shifted_input1;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input1;\n  is_zero = difference != 0;\n  shift_amount = shifted_input1;\n  if (is_zero && shifted_input1 <= input4) {\n    shift_amount = shifted_input1 + difference;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shifted_input1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shift_amount == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shift_amount == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    shifted_input1 = -shifted_input1 - (uint)is_zero;\n  }\n  if (shifted_input1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(difference != 0);\n    difference = shift_amount - 2;\n    if ((shifted_input1 & 0x800000) == 0) {\n      shift_amount = leading_zero_count(shifted_input1) - 8;\n      shifted_input1 = shifted_input1 << (shift_amount & 0xff);\n      if ((int)difference < (int)shift_amount) {\n        shifted_input1 = shifted_input1 >> (-(difference - shift_amount) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (difference - shift_amount) * 0x800000;\n      }\n      return shifted_input1 | input1;\n    }\n  }\n  else {\n    difference = shift_amount - 1;\n    if (0xffffff < shifted_input1) {\n      difference = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shift_amount;\n      if (0xfd < shift_amount) goto LAB_0008186a;\n    }\n  }\n  shifted_input1 = shifted_input1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input1;\n}\n\n",
            "current_name": "calculate_float_00081734",
            "entrypoint": "0x00081734",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "shifted_input1",
                "uVar5": "shift_amount",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081894": {
            "additional_data": {
                "(0x20 - uVar2 & 0xff)": {
                    "1": "right_shift"
                },
                "(param_1 >> (0x20 - (uVar1 + 0x18) & 0xff)) - ((int)uVar2 >> 0x1f)": {
                    "1": "result2"
                },
                "(param_1 >> rightShift)": {
                    "1": "right_shifted_value"
                },
                "0U >> (0x20 - uVar2 & 0xff)": {
                    "1": "zero_shift"
                },
                "0x7fffffff < uVar4": {
                    "1": "is_negative"
                },
                "FUN_00081894": {
                    "1": "count_bits_and_translate",
                    "2": "decode_value",
                    "3": "calculate_result"
                },
                "iVar3": {
                    "1": "i_var3",
                    "2": "initial_value",
                    "3": "offset",
                    "4": "base_value",
                    "6": "constant_value",
                    "7": "constant"
                },
                "iVar3 + (param_1 << (uVar2 & 0xff)) + (0U >> (0x20 - uVar2 & 0xff)) + (uint)(0x7fffffff < uVar4)": {
                    "1": "result1"
                },
                "param_1": {
                    "1": "encoded_number",
                    "11": "input",
                    "14": "input_value",
                    "2": "input_number"
                },
                "param_1 << uVar1 + 0x18": {
                    "1": "shifted_value"
                },
                "uVar1": {
                    "1": "shifted_input",
                    "16": "leading_zeros",
                    "2": "leading_zeros_count",
                    "3": "result"
                },
                "uVar1 & 0xfffffffe": {
                    "1": "clear_lsb"
                },
                "uVar1 & ~(uVar2 >> 0x1f)": {
                    "1": "clear_msb"
                },
                "uVar1 + 0x18": {
                    "1": "shift_value"
                },
                "uVar1_2": {
                    "1": "leading_zeros2"
                },
                "uVar1_3": {
                    "1": "leading_zeros3"
                },
                "uVar1_4": {
                    "1": "leading_zeros4"
                },
                "uVar1_temp": {
                    "1": "temp_result1"
                },
                "uVar2": {
                    "1": "shift_count",
                    "16": "shift_amount",
                    "2": "shifted_number",
                    "3": "shift_value"
                },
                "uVar2 & 0x7fffffff": {
                    "1": "clear_bit"
                },
                "uVar2 & 0xff": {
                    "1": "shift_mask"
                },
                "uVar2 * -0x800000 + 0x4a800000": {
                    "1": "offset"
                },
                "uVar2 >> 0x1f": {
                    "1": "signed_bit"
                },
                "uVar2_2": {
                    "1": "shift_amount2"
                },
                "uVar2_3": {
                    "1": "shift_amount3"
                },
                "uVar2_temp": {
                    "1": "temp_result2"
                },
                "uVar3": {
                    "1": "result"
                },
                "uVar4": {
                    "1": "result",
                    "2": "carry",
                    "3": "temp_value",
                    "7": "mask"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_overflow"
                },
                "uVar4_temp": {
                    "1": "temp_mask"
                },
                "uVar5": {
                    "1": "masked_value"
                },
                "uVar6": {
                    "1": "final_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_result_00081894(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_result_00081894",
            "entrypoint": "0x00081894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081894": "calculate_result_00081894",
                "iVar3": "constant",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008189c": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "reverse_computation"
                },
                "FUN_0008189c": {
                    "1": "count_bits_in_negated_input",
                    "3": "count_bits",
                    "4": "reverse_bits"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "iVar4": {
                    "1": "adjusted_value",
                    "2": "offset",
                    "26": "result"
                },
                "param_1": {
                    "1": "value",
                    "13": "input",
                    "2": "num",
                    "6": "number"
                },
                "uVar1": {
                    "1": "shifted_input",
                    "18": "leading_zeros",
                    "2": "leading_zeros_count"
                },
                "uVar1_check": {
                    "1": "leading_zeros_check"
                },
                "uVar1_extra": {
                    "1": "leading_zeros_extra"
                },
                "uVar1_initial": {
                    "1": "initial_leading_zeros_count"
                },
                "uVar1_inside_if": {
                    "1": "mask"
                },
                "uVar1_mask": {
                    "1": "leading_zeros_mask"
                },
                "uVar1_modified": {
                    "1": "num_bits"
                },
                "uVar1_param": {
                    "1": "leading_zeros_param"
                },
                "uVar1_temp": {
                    "1": "leading_zeros_temp"
                },
                "uVar2": {
                    "1": "shifted_bits",
                    "2": "shift",
                    "21": "shift_amount"
                },
                "uVar2_bitwiseAnd": {
                    "1": "shift_bitwise_and"
                },
                "uVar2_bitwiseShiftRight": {
                    "1": "shift_bitwise_shift_right"
                },
                "uVar2_check": {
                    "1": "shift_check"
                },
                "uVar2_extra": {
                    "1": "shift_extra"
                },
                "uVar2_initial": {
                    "1": "initial_shift_amount"
                },
                "uVar2_inside_else": {
                    "1": "shifted_input"
                },
                "uVar2_inside_if": {
                    "1": "shifted_input"
                },
                "uVar2_mask": {
                    "1": "shift_mask"
                },
                "uVar2_masked": {
                    "1": "right_shifted_mask"
                },
                "uVar2_modified": {
                    "1": "scaled_value_right_shift"
                },
                "uVar2_param": {
                    "1": "shift_param"
                },
                "uVar2_return": {
                    "1": "shifted_input"
                },
                "uVar2_temp": {
                    "1": "shift_temp"
                },
                "uVar3": {
                    "1": "sign_bits",
                    "16": "sign_bit",
                    "7": "is_negative"
                },
                "uVar3_bitwiseAnd": {
                    "1": "sign_bit_bitwise_and"
                },
                "uVar3_bitwiseShiftRight": {
                    "1": "sign_bit_bitwise_shift_right"
                },
                "uVar3_extra": {
                    "1": "sign_bit_extra"
                },
                "uVar3_inside_else": {
                    "1": "input_sign"
                },
                "uVar3_inside_if": {
                    "1": "input_sign"
                },
                "uVar3_inside_if_two": {
                    "1": "result_sign"
                },
                "uVar3_masked": {
                    "1": "result_masked"
                },
                "uVar3_modified": {
                    "1": "scaled_value_sign_bit"
                },
                "uVar3_return": {
                    "1": "result_sign"
                },
                "uVar3_shift": {
                    "1": "sign_bit_shift"
                },
                "uVar3_zeroFlag": {
                    "1": "zero_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint count_leading_zeros_0008189c(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros_0008189c(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_leading_zeros_0008189c",
            "entrypoint": "0x0008189c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008189c": "count_leading_zeros_0008189c",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081944": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "calculate_float32_from_uint32"
                },
                "<param_1>": {
                    "1": "mantissa1"
                },
                "<param_2>": {
                    "1": "mantissa2"
                },
                "<param_3>": {
                    "1": "exponent"
                },
                "<param_4>": {
                    "1": "exponent2"
                },
                "FUN_00081944": {
                    "1": "floating_point_addition",
                    "12": "calculate_float",
                    "7": "calculate_floating_point"
                },
                "SBORROW4": {
                    "1": "subtract_borrow"
                },
                "SCARRY4": {
                    "1": "is_addition_overflow"
                },
                "bVar10": {
                    "1": "flag2",
                    "10": "is_negative",
                    "2": "is_negative1",
                    "3": "is_overflow",
                    "4": "is_carry"
                },
                "bVar10_temp": {
                    "1": "is_negative_temp"
                },
                "bVar9": {
                    "1": "is_zero_sign_input1",
                    "13": "is_zero",
                    "3": "condition1",
                    "5": "is_zero1"
                },
                "bVar9_temp": {
                    "1": "is_zero_temp"
                },
                "iVar4": {
                    "1": "temp1",
                    "2": "sum_of_exponents",
                    "8": "sum"
                },
                "iVar5": {
                    "1": "byte3",
                    "2": "adjusted_exponent"
                },
                "iVar7": {
                    "1": "byte4",
                    "2": "difference"
                },
                "lVar1": {
                    "1": "long_long_variable",
                    "2": "result",
                    "3": "product"
                },
                "param_1": {
                    "1": "float_value1",
                    "16": "input1",
                    "2": "input_1",
                    "3": "number1",
                    "4": "value1"
                },
                "param_1 == 0 || param_1 == 0x80000000": {
                    "1": "is_float1_special"
                },
                "param_1_temp": {
                    "1": "temp_num1"
                },
                "param_2": {
                    "1": "input_float2",
                    "16": "input2",
                    "2": "input_2",
                    "3": "number2",
                    "4": "value2"
                },
                "param_2 == 0": {
                    "1": "is_float2_zero"
                },
                "param_2 == 0x80000000": {
                    "1": "is_float2_special"
                },
                "param_2_temp": {
                    "1": "temp_num2"
                },
                "param_3": {
                    "1": "param",
                    "4": "input3",
                    "6": "unused",
                    "7": "param3"
                },
                "param_4": {
                    "1": "unused2",
                    "2": "input3",
                    "3": "constant2",
                    "4": "input4",
                    "5": "param4"
                },
                "uVar2": {
                    "1": "sign2",
                    "18": "result"
                },
                "uVar2_low_bits": {
                    "1": "temp4"
                },
                "uVar3": {
                    "1": "shifted_num1",
                    "2": "upper_bits1",
                    "3": "shifted_input1",
                    "4": "exponent1"
                },
                "uVar3_diff": {
                    "1": "shift_diff_temp2"
                },
                "uVar3_temp": {
                    "1": "temp7"
                },
                "uVar5": {
                    "1": "is_carry2"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "temp1",
                    "3": "product_lower",
                    "6": "product"
                },
                "uVar6_temp": {
                    "1": "temp_product_lower"
                },
                "uVar6_temp_low_bits": {
                    "1": "temp6"
                },
                "uVar7": {
                    "1": "is_carry3"
                },
                "uVar8": {
                    "1": "result4",
                    "2": "temp3",
                    "3": "result"
                },
                "uVar8_temp": {
                    "1": "temp_product_upper"
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int difference;\n  uint product;\n  int shift_difference;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  temp_result = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = subtract_borrow(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    shift_difference = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = subtract_borrow(0xff,difference);\n      shift_difference = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && shift_difference < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && shift_difference < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = subtract_borrow(difference,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    exponent1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = subtract_borrow(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    exponent1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != signed_carry(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == signed_carry(temp_result,0x19)) {\n      exponent1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        exponent1 = exponent1 & ~(temp_result >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_00081944",
            "entrypoint": "0x00081944",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081944": "calculate_float_00081944",
                "SBORROW4": "subtract_borrow",
                "SCARRY4": "signed_carry",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "shift_difference",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "additional_data": {
                "(int)param_2 >> 0x1f": {
                    "1": "is_input2_signed"
                },
                "FUN_00081bf4": {
                    "1": "perform_operation",
                    "2": "check_overflow_and_sign",
                    "5": "calculate_result",
                    "8": "check_overflow"
                },
                "bVar1": {
                    "1": "check_condition",
                    "19": "is_negative",
                    "2": "is_combined_negative",
                    "3": "is_negative_result"
                },
                "bVar5": {
                    "1": "is_zero_combined",
                    "2": "is_combined_zero",
                    "20": "is_zero",
                    "3": "is_result_zero"
                },
                "param_1": {
                    "1": "output",
                    "14": "input1",
                    "4": "result",
                    "9": "input_1"
                },
                "param_1 & 0x7fffff": {
                    "1": "input1_masked"
                },
                "param_1 ^ param_2": {
                    "1": "input1_xor_input2"
                },
                "param_2": {
                    "1": "value_2",
                    "11": "input_2",
                    "16": "input2"
                },
                "param_2 & 0x7fffff": {
                    "1": "input2_masked"
                },
                "return": {
                    "2": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "uVar2": {
                    "1": "input_1_times_2",
                    "2": "multiplied_input1",
                    "3": "input1_doubled",
                    "5": "double_input_1"
                },
                "uVar3": {
                    "1": "input_2_times_2",
                    "2": "input2_times2",
                    "3": "doubled_input_2",
                    "5": "double_input_2"
                },
                "uVar3 <= uVar2": {
                    "1": "is_input2_less_eq_input1"
                },
                "uVar4": {
                    "1": "result1",
                    "11": "combined_inputs",
                    "2": "combined_result",
                    "3": "combined_vars",
                    "4": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081c5c"
            ],
            "code": "\nuint check_overflow_00081bf4(uint input1,uint input2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input1 * 2;\n  double_input_2 = input2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = double_input_1 | input2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input1 ^ input2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input1 = double_input_1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  result input1;\n}\n\n",
            "current_name": "check_overflow_00081bf4",
            "entrypoint": "0x00081bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input1",
                "param_2": "input2",
                "return": "result",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c54": {
            "additional_data": {
                "FUN_00081c54": {
                    "1": "compare_float_parameters",
                    "19": "compare_floats",
                    "2": "compare_values",
                    "3": "compare_parameters"
                },
                "FUN_00081c5c": {
                    "1": "perform_comparison"
                },
                "__aeabi_cfcmpeq": {
                    "1": "floats_equal"
                },
                "param_1": {
                    "1": "num1",
                    "17": "value1",
                    "2": "first_parameter",
                    "8": "float1"
                },
                "param_2": {
                    "1": "num2",
                    "17": "value2",
                    "2": "second_float",
                    "8": "float2"
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_00081ca8"
            ],
            "code": "\nvoid compare_floats_00081c54(undefined4 value1,undefined4 value2)\n\n{\n  floats_equal(value2,value1);\n  return;\n}\n\n",
            "current_name": "compare_floats_00081c54",
            "entrypoint": "0x00081c54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "__aeabi_cfcmpeq": "floats_equal",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate",
                    "2": "concatenate_values"
                },
                "FUN_00081bf4": {
                    "1": "compare_unsigned_integers"
                },
                "FUN_00081c5c": {
                    "1": "combine_two_values",
                    "16": "concatenate_params",
                    "2": "concatenate_values",
                    "3": "concatenate_and_compare_floats"
                },
                "__cmpsf2": {
                    "1": "compare_single_floats",
                    "2": "compare_floats"
                },
                "param_1": {
                    "1": "param_a",
                    "2": "parameter1",
                    "3": "param1",
                    "5": "first_param",
                    "6": "input1"
                },
                "param_2": {
                    "1": "second_float",
                    "2": "parameter2",
                    "3": "input_param2",
                    "5": "second_param",
                    "6": "value2"
                }
            },
            "called": [
                "FUN_00081bf4"
            ],
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 value1,undefined4 value2)\n\n{\n  compare_floats();\n  return concatenate_values(value2,value1);\n}\n\n",
            "current_name": "concatenate_params_00081c5c",
            "entrypoint": "0x00081c5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_values",
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "__cmpsf2": "compare_floats",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c94": {
            "additional_data": {
                "FUN_00081c5c": {
                    "1": "process_input"
                },
                "FUN_00081c94": {
                    "1": "check_for_equality",
                    "2": "check_condition",
                    "5": "check_comparison_result",
                    "9": "check_equality"
                },
                "in_CY": {
                    "1": "is_nan",
                    "14": "carry_flag",
                    "2": "is_carry_result"
                },
                "in_ZR": {
                    "1": "is_zero_return",
                    "11": "zero_flag",
                    "3": "zero_result",
                    "4": "is_zero",
                    "5": "is_zero_result"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input_param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "input_param2"
                },
                "undefined8": {
                    "1": "new_result_type"
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_equality_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_equality_00081c94",
            "entrypoint": "0x00081c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c94": "check_equality_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "additional_data": {
                "FUN_00081c54": {
                    "1": "handle_parameters",
                    "2": "perform_operation"
                },
                "FUN_00081ca8": {
                    "1": "check_zero_or_less",
                    "14": "check_conditions",
                    "2": "is_leq_or_zero",
                    "3": "check_condition"
                },
                "in_CY": {
                    "1": "condition_2",
                    "3": "is_carry_set",
                    "7": "carry_flag",
                    "8": "is_carry"
                },
                "in_ZR": {
                    "1": "condition_1",
                    "6": "is_zero_result",
                    "7": "zero_flag"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_param_2"
                }
            },
            "called": [
                "FUN_00081c54"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_conditions_00081ca8(void)\n\n{\n  undefined zero_flag;\n  undefined is_carry;\n  \n  __aeabi_cfrcmple();\n  return !(bool)is_carry || (bool)zero_flag;\n}\n\n",
            "current_name": "check_conditions_00081ca8",
            "entrypoint": "0x00081ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081ca8": "check_conditions_00081ca8",
                "in_CY": "is_carry",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "additional_data": {
                "FUN_00081cd0": {
                    "1": "extract_integer",
                    "2": "decode_integer",
                    "3": "convert_to_signed_int"
                },
                "param_1": {
                    "1": "result",
                    "19": "input_value",
                    "5": "input"
                },
                "param_1 & 0x7fffff": {
                    "1": "extract_fractional_part"
                },
                "param_1_1": {
                    "1": "input_value_masked"
                },
                "param_1_2": {
                    "1": "sign_extended_input"
                },
                "param_1_3": {
                    "1": "masked_input"
                },
                "uVar1": {
                    "1": "shifted_input",
                    "2": "shift_count",
                    "20": "shifted_value",
                    "3": "result"
                },
                "uVar1Shifted": {
                    "1": "shifted_temp_value"
                },
                "uVar1Temp": {
                    "1": "temporary_shifted_value"
                },
                "uVar1_2": {
                    "1": "shifted_input"
                },
                "uVar2": {
                    "1": "adjusted_shift_count",
                    "18": "difference",
                    "2": "offset"
                },
                "uVar2 == 0xffffff9f": {
                    "1": "check_overflow"
                },
                "uVar2Shifted": {
                    "1": "shifted_temp_difference"
                },
                "uVar2Temp": {
                    "1": "temporary_difference"
                },
                "uVar3": {
                    "1": "resolved_number",
                    "2": "shifted_input",
                    "3": "result"
                },
                "uVar4": {
                    "1": "signed_result",
                    "3": "result"
                },
                "uVar5": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint convert_to_signed_int_00081cd0(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_to_signed_int_00081cd0",
            "entrypoint": "0x00081cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "additional_data": {
                "0x18": {
                    "1": "shift_amount_1"
                },
                "0x7f000000": {
                    "1": "max_threshold"
                },
                "0x7fffff": {
                    "1": "mask_lower_23_bits"
                },
                "0x80000000": {
                    "1": "mask_sign_bit"
                },
                "0x9e": {
                    "1": "shift_constant"
                },
                "0xff": {
                    "1": "mask_lower_bits"
                },
                "0xffffff9f": {
                    "1": "condition_value"
                },
                "0xfffffff9f": {
                    "1": "check_constant"
                },
                "FUN_00081d1c": {
                    "1": "bitwise_shift",
                    "2": "decode_param",
                    "3": "extract_bits",
                    "4": "decode_number",
                    "8": "reverse_bits"
                },
                "param_1": {
                    "10": "input",
                    "12": "input_value",
                    "2": "number",
                    "3": "input_number"
                },
                "uVar1": {
                    "1": "bit_count",
                    "17": "shift_amount",
                    "2": "result",
                    "3": "shift_value",
                    "4": "shift_count"
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint reverse_bits_00081d1c(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_bits_00081d1c",
            "entrypoint": "0x00081d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d1c": "reverse_bits_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_table",
                    "3": "rel_array"
                },
                "FUN_00081d5c": {
                    "1": "update_relocation_table",
                    "17": "update_relocation_entry",
                    "2": "update_relocation"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "param_1": {
                    "1": "new_offset",
                    "14": "address",
                    "2": "new_value_1",
                    "3": "new_value",
                    "4": "new_value1"
                },
                "param_2": {
                    "1": "param",
                    "12": "value",
                    "2": "value1",
                    "3": "new_value",
                    "4": "new_value2"
                },
                "param_3": {
                    "1": "new_offset",
                    "2": "value2",
                    "3": "offset",
                    "4": "new_value3"
                },
                "pdVar1": {
                    "1": "array_ptr",
                    "14": "relocation_entry",
                    "3": "relocation_table",
                    "4": "rel_entry"
                },
                "r_offset": {
                    "1": "offset"
                },
                "uVar2": {
                    "1": "entry_offset",
                    "27": "index",
                    "3": "entry_index"
                },
                "uVar3": {
                    "1": "bit_value",
                    "18": "bit_mask",
                    "2": "bit_position",
                    "3": "bit_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 update_relocation_entry_00081d5c(dword address,dword value,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  \n  if (relocation_entries[48].offset == 0) {\n    relocation_entries[48].offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_entries[48].offset + 4);\n  relocation_entry = (dword *)relocation_entries[48].offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)allocate_memory(400);\n    if (relocation_entry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocation_entry = relocation_entries[48].offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocation_entries[48].offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = address;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = value;\n  return 0;\n}\n\n",
            "current_name": "update_relocation_entry_00081d5c",
            "entrypoint": "0x00081d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "malloc": "allocate_memory",
                "param_1": "address",
                "param_2": "value",
                "param_3": "new_value3",
                "pdVar1": "relocation_entry",
                "r_offset": "offset",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "additional_data": {
                "FUNC_00080118": {
                    "1": "subfunction_2",
                    "2": "initialize"
                },
                "FUNC_00085858": {
                    "1": "cleanup"
                },
                "FUN_00081d7c": {
                    "1": "initialize_and_execute_functions",
                    "2": "execute_subroutines",
                    "4": "initialize_and_call_functions",
                    "5": "execute_subfunctions",
                    "7": "execute_sub_functions"
                },
                "FUN_00083974": {
                    "1": "subfunction_1"
                },
                "iVar1": {
                    "1": "iteration_counter",
                    "10": "counter",
                    "17": "iteration_count",
                    "2": "iteration"
                },
                "ppcVar2": {
                    "1": "subroutine_array",
                    "15": "function_pointers",
                    "2": "function_array_ptr",
                    "3": "function_array"
                }
            },
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_sub_functions_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  _init();\n  function_pointers = (code **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_00081d7c",
            "entrypoint": "0x00081d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d7c": "execute_sub_functions_00081d7c",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081df4": {
            "additional_data": {
                "140": {
                    "1": "array_index"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_array",
                    "4": "relocation_table"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "allocation_size"
                },
                "FUN_00081df4": {
                    "1": "allocate_dynamic_memory",
                    "28": "allocate_memory"
                },
                "FUN_00081e14": {
                    "1": "perform_operation",
                    "2": "process_memory",
                    "21": "process_data",
                    "3": "process_relocation"
                },
                "param_1": {
                    "1": "relocated_pointer",
                    "12": "size",
                    "2": "memory_size",
                    "9": "data"
                },
                "param_2": {
                    "1": "relocation_size",
                    "2": "array_size",
                    "9": "length"
                },
                "r_offset": {
                    "1": "offset"
                }
            },
            "called": [
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083974"
            ],
            "code": "\nvoid allocate_memory_00081df4(undefined4 size)\n\n{\n  _malloc_r(allocation_size,size);\n  return;\n}\n\n",
            "current_name": "allocate_memory_00081df4",
            "entrypoint": "0x00081df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "allocation_size",
                "FUN_00081df4": "allocate_memory_00081df4",
                "param_1": "size",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e04": {
            "additional_data": {
                "140": {
                    "1": "index"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "3": "rel_array"
                },
                "FUN_00081e04": {
                    "1": "free_elf32_rel_array",
                    "10": "free_elf32_rel_offset",
                    "3": "free_elf32_rel_entry",
                    "5": "free_memory"
                },
                "FUN_00083d9c": {
                    "1": "perform_operation",
                    "2": "process_param",
                    "7": "process_data"
                },
                "param_1": {
                    "1": "arg",
                    "2": "ptr",
                    "4": "memory_address",
                    "8": "offset",
                    "9": "param"
                },
                "param_2": {
                    "1": "param",
                    "2": "arg2",
                    "4": "size",
                    "5": "count"
                }
            },
            "called": [
                "FUN_00083d9c"
            ],
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "code": "\nvoid free_elf32_rel_offset_00081e04(undefined4 param)\n\n{\n  _free_r(rel_array[140].r_offset,param);\n  return;\n}\n\n",
            "current_name": "free_elf32_rel_offset_00081e04",
            "entrypoint": "0x00081e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081e04": "free_elf32_rel_offset_00081e04",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e14": {
            "additional_data": {
                "*param_1": {
                    "1": "lock"
                },
                "DAT_20071188": {
                    "1": "minimum_brk"
                },
                "DAT_2007118c": {
                    "1": "current_address"
                },
                "DAT_20071190": {
                    "1": "memory_base"
                },
                "DAT_20071194": {
                    "1": "current_brk"
                },
                "FUNC_00082598": {
                    "1": "initialize_memory"
                },
                "FUNC_0008259c": {
                    "1": "unlock_heap"
                },
                "FUN_00081e14": {
                    "1": "malloc_mem",
                    "27": "allocate_memory"
                },
                "FUN_00082970": {
                    "1": "lock_heap"
                },
                "FUN_00083d9c": {
                    "1": "extend_heap"
                },
                "F_decompiled_function": {
                    "1": "allocate_memory"
                },
                "__malloc_lock": {
                    "1": "lock_memory"
                },
                "dVar1": {
                    "1": "info",
                    "2": "first_rel_info",
                    "3": "index",
                    "9": "rel_info"
                },
                "dVar11": {
                    "1": "temp_pointer",
                    "2": "current_offset"
                },
                "dVar12": {
                    "1": "prev_free_block",
                    "2": "prev_info"
                },
                "dVar17": {
                    "1": "new_memory_offset"
                },
                "dVar19": {
                    "1": "offset_rearrange"
                },
                "dVar20": {
                    "1": "new_info_offset"
                },
                "dVar23": {
                    "1": "new_data_size"
                },
                "dVar24": {
                    "1": "new_alloc_size"
                },
                "dVar7": {
                    "1": "next_info",
                    "2": "offset"
                },
                "dvar1": {
                    "1": "rel_array_index"
                },
                "dvar7": {
                    "1": "temp_offset"
                },
                "iVar11": {
                    "1": "new_index2"
                },
                "iVar13": {
                    "1": "block_index",
                    "6": "index"
                },
                "iVar2": {
                    "1": "new_index",
                    "2": "offset",
                    "3": "offset1",
                    "4": "current_offset"
                },
                "iVar20": {
                    "1": "size_rearrange"
                },
                "iVar21": {
                    "1": "array_index"
                },
                "iVar5": {
                    "1": "temp4",
                    "2": "prev_rel_info",
                    "6": "next_offset"
                },
                "iVar9": {
                    "1": "prev_block_size",
                    "2": "tmp_var7",
                    "4": "prev_offset"
                },
                "param_1": {
                    "1": "param",
                    "2": "param_pointer",
                    "3": "lock_param",
                    "4": "lock_ptr",
                    "5": "mem_lock",
                    "9": "lock"
                },
                "param_2": {
                    "1": "size_input",
                    "30": "size"
                },
                "pdVar14": {
                    "1": "pd_var14",
                    "2": "rel_ptr",
                    "3": "ptr2",
                    "4": "ptr1"
                },
                "pdVar17": {
                    "1": "block_ptr",
                    "2": "rel_info_ptr2",
                    "4": "ptr2"
                },
                "pdVar21": {
                    "1": "new_table_ptr"
                },
                "puVar10": {
                    "1": "current_rel",
                    "2": "temp_ptr",
                    "3": "ptr1",
                    "4": "ptr"
                },
                "puVar16": {
                    "1": "tmp_ptr3",
                    "2": "aligned_ptr"
                },
                "puVar22": {
                    "1": "next_pointer_3"
                },
                "uVar15": {
                    "1": "new_size",
                    "13": "aligned_size",
                    "2": "block_size",
                    "3": "adjusted_size"
                },
                "uVar18": {
                    "1": "section_index",
                    "2": "block_index",
                    "4": "index"
                },
                "uVar19": {
                    "1": "info_offset"
                },
                "uVar22": {
                    "1": "u_var22"
                },
                "uVar3": {
                    "1": "uint_val",
                    "2": "alignment",
                    "3": "flags"
                },
                "uVar4": {
                    "1": "block_size_difference",
                    "2": "tmp_var2",
                    "4": "adjusted_size"
                },
                "uVar6": {
                    "1": "new_size",
                    "2": "diff_offset",
                    "4": "difference"
                },
                "uVar8": {
                    "1": "temp4",
                    "2": "prev_size"
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00083d9c"
            ],
            "calling": [
                "FUN_000842a4",
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081df4"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *lock,uint size)\n\n{\n  dword rel_info;\n  int current_offset;\n  uint flags;\n  uint aligned_size;\n  int next_offset;\n  uint difference;\n  dword rel_offset;\n  uint tmp_var6;\n  int prev_offset;\n  undefined *ptr;\n  dword current_offset;\n  dword prev_info;\n  int index;\n  dword *ptr1;\n  uint aligned_size;\n  undefined *new_rel_ptr;\n  dword *ptr2;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  lock_memory(lock);\n  rel_info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (current_offset = index + 8, index = *(int *)(index + 0x14), current_offset != index)) {\n      next_offset = *(int *)(index + 0xc);\n      prev_offset = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(prev_offset + 4);\n      current_offset = *(int *)(index + 8);\n      *(int *)(current_offset + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = current_offset;\n      *(uint *)(prev_offset + 4) = aligned_size | 1;\n      __malloc_unlock(lock);\n      return (int *)(index + 8);\n    }\n    index = (aligned_size >> 3) + 2;\n  }\n  else {\n    index = aligned_size >> 9;\n    if (index == 0) {\n      current_offset = 0x7e;\n      index = 0x3f;\n    }\n    else if (index < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      current_offset = index * 2;\n    }\n    else if (index < 0x15) {\n      index = index + 0x5b;\n      current_offset = index * 2;\n    }\n    else if (index < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      current_offset = index * 2;\n    }\n    else if (index < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      current_offset = index * 2;\n    }\n    else if (index < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      current_offset = index * 2;\n    }\n    else {\n      current_offset = 0xfc;\n      index = 0x7e;\n    }\n    for (rel_offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[current_offset]; current_offset * 4 + 0x20070464U != rel_offset\n        ; rel_offset = *(dword *)(rel_offset + 0xc)) {\n      index = *(uint *)(rel_offset + 4) & 0xfffffffc;\n      next_offset = index - aligned_size;\n      if (0xf < next_offset) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < next_offset) {\n        current_offset = index + rel_offset;\n        aligned_size = *(uint *)(current_offset + 4);\n        next_offset = *(int *)(rel_offset + 0xc);\n        index = *(int *)(rel_offset + 8);\n        *(int *)(index + 0xc) = next_offset;\n        *(int *)(next_offset + 8) = index;\n        *(uint *)(current_offset + 4) = aligned_size | 1;\n        __malloc_unlock(lock);\n        return (int *)(rel_offset + 8);\n      }\n    }\n    index = index + 1;\n  }\n  rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    flags = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    aligned_size = flags & 0xfffffffc;\n    difference = aligned_size - aligned_size;\n    if (0xf < (int)difference) {\n      rel_offset = aligned_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = rel_offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = rel_offset;\n      *(undefined4 *)(rel_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(rel_offset + 8) = 0x2007046c;\n      *(uint *)(rel_offset + 4) = difference | 1;\n      *(uint *)(rel_offset + difference) = difference;\n      __malloc_unlock(lock);\n      return (int *)(rel_info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)difference) {\n      *(uint *)(aligned_size + rel_info + 4) = *(uint *)(aligned_size + rel_info + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(rel_info + 8);\n    }\n    if (aligned_size < 0x200) {\n      aligned_size = flags & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size);\n      rel_offset = 1 << ((int)(flags >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(rel_info + 8) = index;\n      *(uint *)(rel_info + 0xc) = aligned_size + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = rel_offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size) = rel_info;\n      *(dword *)(index + 0xc) = rel_info;\n    }\n    else {\n      difference = flags >> 9;\n      if (difference < 5) {\n        current_offset = (flags >> 6) + 0x38;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x15) {\n        current_offset = difference + 0x5b;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x55) {\n        current_offset = (flags >> 0xc) + 0x6e;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x155) {\n        current_offset = (flags >> 0xf) + 0x77;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x555) {\n        current_offset = (flags >> 0x12) + 0x7c;\n        index = current_offset * 2;\n      }\n      else {\n        index = 0xfc;\n        current_offset = 0x7e;\n      }\n      rel_offset = index * 4 + 0x20070464;\n      current_offset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (current_offset == rel_offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (current_offset >> 2 & 0xffU);\n        prev_info = current_offset;\n      }\n      else {\n        do {\n          prev_info = current_offset;\n          if ((*(uint *)(current_offset + 4) & 0xfffffffc) <= aligned_size) break;\n          current_offset = *(dword *)(current_offset + 8);\n          prev_info = current_offset;\n        } while (rel_offset != current_offset);\n        current_offset = *(dword *)(prev_info + 0xc);\n      }\n      rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(rel_info + 0xc) = current_offset;\n      *(dword *)(rel_info + 8) = prev_info;\n      *(dword *)(current_offset + 8) = rel_info;\n      *(dword *)(prev_info + 0xc) = rel_info;\n    }\n  }\n  rel_info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  flags = 1 << ((int)index >> 2 & 0xffU);\n  if (flags <= rel_offset) {\n    if ((rel_offset & flags) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        flags = flags << 1;\n        index = index + 4;\n      } while ((rel_offset & flags) == 0);\n    }\n    do {\n      ptr2 = &Elf32_Rel_ARRAY_20070000[index + 0x8c].r_info;\n      ptr1 = ptr2;\n      aligned_size = index;\n      do {\n        for (ptr = (undefined *)ptr1[3]; ptr1 != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          difference = *(uint *)(ptr + 4) & 0xfffffffc;\n          tmp_var6 = difference - aligned_size;\n          if (0xf < (int)tmp_var6) {\n            current_offset = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            new_rel_ptr = ptr + aligned_size;\n            *(uint *)(ptr + 4) = aligned_size | 1;\n            *(int *)(current_offset + 0xc) = index;\n            *(int *)(index + 8) = current_offset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)new_rel_ptr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)new_rel_ptr;\n            *(undefined4 *)(new_rel_ptr + 0xc) = 0x2007046c;\n            *(undefined4 *)(new_rel_ptr + 8) = 0x2007046c;\n            *(uint *)(new_rel_ptr + 4) = tmp_var6 | 1;\n            *(uint *)(new_rel_ptr + tmp_var6) = tmp_var6;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)tmp_var6) {\n            index = *(int *)(ptr + 8);\n            current_offset = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + difference + 4) = *(uint *)(ptr + difference + 4) | 1;\n            *(int *)(index + 0xc) = current_offset;\n            *(int *)(current_offset + 8) = index;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n        }\n        aligned_size = aligned_size + 1;\n        ptr1 = ptr1 + 2;\n      } while ((aligned_size & 3) != 0);\n      do {\n        difference = index & 3;\n        ptr = (undefined *)(ptr2 + -2);\n        index = index - 1;\n        if (difference == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~flags;\n          break;\n        }\n        ptr2 = (dword *)*ptr2;\n      } while (ptr2 == (dword *)ptr);\n      flags = flags * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= flags &&\n           flags - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (index = aligned_size, flags == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & flags) == 0; flags = flags << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= index) &&\n     (flags = index - aligned_size, rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)flags))\n  goto LAB_0008211e;\n  flags = Elf32_Rel_ARRAY_20070000[141].r_info + index;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    aligned_size = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    aligned_size = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  rel_offset = _sbrk_r(lock,aligned_size);\n  if ((rel_offset == 0xffffffff) || ((rel_offset < flags && (rel_info != 0x20070464)))) {\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    difference = DAT_20071194 + aligned_size;\n    DAT_20071194 = difference;\n    if ((flags == rel_offset) && ((flags & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = aligned_size + index | 1;\n    }\n    else {\n      current_offset = rel_offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        current_offset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = difference + (rel_offset - flags);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = current_offset;\n      flags = rel_offset & 7;\n      if (flags == 0) {\n        index = 0x1000;\n      }\n      else {\n        rel_offset = rel_offset + (8 - flags);\n        index = 0x1008 - flags;\n      }\n      index = index - (aligned_size + rel_offset & 0xfff);\n      current_offset = _sbrk_r(lock,index);\n      if (current_offset == -1) {\n        flags = 1;\n        index = 0;\n      }\n      else {\n        flags = (current_offset - rel_offset) + index | 1;\n      }\n      difference = DAT_20071194 + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = rel_offset;\n      DAT_20071194 = difference;\n      *(uint *)(rel_offset + 4) = flags;\n      if (rel_info != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(rel_offset + 4) = 1;\n          index = 0;\n          goto LAB_00082108;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(rel_info + 4) = index | *(uint *)(rel_info + 4) & 1;\n        *(undefined4 *)(rel_info + index + 4) = 5;\n        *(undefined4 *)(rel_info + index + 8) = 5;\n        if (0xf < index) {\n          _free_r(lock,rel_info + 8);\n          difference = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < difference) {\n      DAT_2007118c = difference;\n    }\n    if (DAT_20071188 < difference) {\n      DAT_20071188 = difference;\n    }\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  flags = index - aligned_size;\n  if ((index < aligned_size) || ((int)flags < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size + rel_offset;\n  *(uint *)(rel_offset + 4) = aligned_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = flags | 1;\n  __malloc_unlock(lock);\n  return (int *)(rel_offset + 8);\n}\n\n",
            "current_name": "allocate_memory_00081e14",
            "entrypoint": "0x00081e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "__malloc_lock": "lock_memory",
                "dVar1": "rel_info",
                "dVar11": "current_offset",
                "dVar12": "prev_info",
                "dVar17": "temp_offset_2",
                "dVar7": "rel_offset",
                "iVar13": "index",
                "iVar2": "current_offset",
                "iVar5": "next_offset",
                "iVar9": "prev_offset",
                "param_1": "lock",
                "param_2": "size",
                "pdVar14": "ptr1",
                "pdVar17": "ptr2",
                "puVar10": "ptr",
                "puVar16": "new_rel_ptr",
                "uVar15": "aligned_size",
                "uVar18": "index",
                "uVar3": "flags",
                "uVar4": "aligned_size",
                "uVar6": "difference",
                "uVar8": "tmp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008234c": {
            "additional_data": {
                "FUN_0008234c": {
                    "1": "copy_bytes",
                    "25": "copy_memory",
                    "4": "copy_data"
                },
                "LAB_000823d0": {
                    "1": "copy_remaining"
                },
                "bVar6": {
                    "1": "is_remaining_length_valid",
                    "10": "loop_condition",
                    "2": "is_remaining_size_positive",
                    "4": "is_looping"
                },
                "param_1": {
                    "1": "dest_buffer",
                    "15": "destination"
                },
                "param_2": {
                    "1": "src_buffer",
                    "15": "src"
                },
                "param_3": {
                    "1": "num_bytes",
                    "24": "size",
                    "6": "length"
                },
                "puVar1": {
                    "1": "src",
                    "2": "dst_ptr",
                    "25": "dest_ptr"
                },
                "puVar2": {
                    "1": "dest_ptr",
                    "2": "dest_end",
                    "3": "dest_end_ptr",
                    "7": "src_ptr"
                },
                "puVar3": {
                    "1": "src",
                    "12": "src_ptr",
                    "2": "temp_dest_ptr",
                    "3": "src_iter"
                },
                "uVar4": {
                    "1": "size_iter",
                    "19": "remaining_size",
                    "2": "copy_size",
                    "3": "remaining",
                    "5": "remaining_length"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp_length",
                    "3": "temp_size",
                    "4": "unrolled_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34"
            ],
            "code": "\nundefined4 * copy_memory_0008234c(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint unrolled_size;\n  bool loop_condition;\n  \n  src_ptr = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      unrolled_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = src;\n          src_ptr = src_ptr;\n          loop_condition = unrolled_size != 0;\n          unrolled_size = unrolled_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          src = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return dest;\n      }\n      goto copy_last_bytes;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      unrolled_size = 4 - ((uint)dest & 3);\n      size = size - unrolled_size;\n      dest_ptr = dest;\n      src_ptr = src;\n      if (((uint)dest & 1) != 0) {\n        src_ptr = (undefined4 *)((int)src + 1);\n        dest_ptr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      src_ptr = dest_ptr;\n      src = src_ptr;\n      if ((unrolled_size & 2) != 0) {\n        src = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *src;\n    src_ptr[1] = src[1];\n    src_ptr[2] = src[2];\n    src_ptr[3] = src[3];\n    src_ptr[4] = src[4];\n    src_ptr[5] = src[5];\n    src_ptr[6] = src[6];\n    src_ptr[7] = src[7];\n    src_ptr[8] = src[8];\n    src_ptr[9] = src[9];\n    src_ptr[10] = src[10];\n    src_ptr[0xb] = src[0xb];\n    src_ptr[0xc] = src[0xc];\n    src_ptr[0xd] = src[0xd];\n    src_ptr[0xe] = src[0xe];\n    src_ptr[0xf] = src[0xf];\n    src_ptr = src_ptr + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *src;\n      src_ptr[1] = src[1];\n      src_ptr[2] = src[2];\n      src_ptr[3] = src[3];\n      src_ptr = src_ptr + 4;\n      src = src + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  unrolled_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = src;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      src = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < unrolled_size;\n      unrolled_size = unrolled_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = src;\n    } while (loop_condition);\n  }\ncopy_last_bytes:\n  if (unrolled_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = src;\n    if ((unrolled_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)src + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)src;\n    }\n    if ((unrolled_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return dest;\n}\n\n",
            "current_name": "copy_memory_0008234c",
            "entrypoint": "0x0008234c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "LAB_000823d0": "copy_last_bytes",
                "bVar6": "loop_condition",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "unrolled_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082438": {
            "additional_data": {
                "FUN_00082438": {
                    "1": "reverse_data",
                    "11": "copy_memory",
                    "2": "copy_and_reverse_memory",
                    "4": "reverse_memory",
                    "6": "reverse_copy"
                },
                "iVar1": {
                    "1": "offset",
                    "13": "index",
                    "4": "i",
                    "5": "count"
                },
                "param_1": {
                    "10": "destination",
                    "17": "dest",
                    "2": "source"
                },
                "param_2": {
                    "1": "destination",
                    "10": "source",
                    "17": "src",
                    "2": "dest"
                },
                "param_3": {
                    "10": "length",
                    "21": "size"
                },
                "puVar2": {
                    "1": "dest_pointer",
                    "18": "dest_ptr",
                    "2": "source_ptr",
                    "5": "dst_ptr"
                },
                "puVar3": {
                    "1": "dest_ptr",
                    "23": "src_ptr"
                },
                "puVar4": {
                    "1": "dst_ptr",
                    "13": "temp_ptr",
                    "2": "temp_pointer",
                    "3": "dest_end"
                },
                "puVar5": {
                    "1": "src_pointer"
                },
                "puVar6": {
                    "1": "ptr",
                    "2": "dst_byte_ptr",
                    "3": "dest_end",
                    "4": "temp_byte"
                },
                "uVar5": {
                    "1": "size_iter",
                    "2": "remainder",
                    "3": "remaining_size",
                    "4": "temp_length",
                    "6": "temp_size"
                },
                "uVar7": {
                    "1": "short_length",
                    "3": "remaining_length",
                    "4": "remaining_bytes",
                    "8": "remainder"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "code": "\nvoid copy_memory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp_byte;\n  uint remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    temp_byte = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_byte = temp_byte + -1;\n        *temp_byte = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp_size = remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "current_name": "copy_memory_00082438",
            "entrypoint": "0x00082438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "iVar1": "index",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "temp_byte",
                "uVar5": "temp_size",
                "uVar7": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082504": {
            "additional_data": {
                "FUN_00082504": {
                    "1": "copy_and_fill_memory",
                    "2": "memset_with_limit",
                    "3": "fill_memory_with_byte",
                    "4": "memset",
                    "8": "fill_memory"
                },
                "LAB_00082580": {
                    "1": "fill_remaining_bytes"
                },
                "bVar5": {
                    "1": "is_empty",
                    "11": "is_zero",
                    "2": "is_zero_length",
                    "5": "is_zero_size"
                },
                "param_1": {
                    "1": "array",
                    "13": "dest",
                    "4": "memory",
                    "5": "buffer",
                    "7": "destination"
                },
                "param_2": {
                    "1": "pattern",
                    "23": "value",
                    "4": "byte"
                },
                "param_3": {
                    "1": "num",
                    "19": "size",
                    "3": "count",
                    "5": "length"
                },
                "puVar1": {
                    "1": "current_addr",
                    "16": "dest_ptr",
                    "2": "dst_ptr",
                    "3": "buffer_ptr"
                },
                "puVar2": {
                    "1": "next_dst_ptr",
                    "11": "next_dest_ptr",
                    "2": "next_buffer_ptr",
                    "3": "next_ptr",
                    "4": "temp_ptr"
                },
                "uVar3": {
                    "1": "value_32_bits",
                    "2": "value32",
                    "6": "fill_value",
                    "7": "pattern"
                },
                "uVar4": {
                    "1": "count_remaining",
                    "13": "remaining_size",
                    "2": "remaining_bytes",
                    "3": "remaining",
                    "4": "remaining_length"
                }
            },
            "called": [],
            "calling": [
                "FUN_000813a8",
                "FUN_00083b14"
            ],
            "code": "\nvoid fill_memory_00082504(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 pattern;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = pattern;\n        dest_ptr[1] = pattern;\n        dest_ptr[2] = pattern;\n        dest_ptr[3] = pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto fill_remaining_bytes;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nfill_remaining_bytes:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_00082504",
            "entrypoint": "0x00082504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082504": "fill_memory_00082504",
                "LAB_00082580": "fill_remaining_bytes",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "pattern",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082598": {
            "called": [],
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00082598",
            "entrypoint": "0x00082598",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008259c": {
            "called": [],
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008259c",
            "entrypoint": "0x0008259c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000825a0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_table"
                },
                "FUN_000825a0": {
                    "1": "realloc_elf32_rel",
                    "18": "reallocate_memory",
                    "2": "realloc_elf32_rel_array"
                },
                "FUN_000825b0": {
                    "1": "find_relocations",
                    "2": "process_data",
                    "4": "update_pointer"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_array",
                    "3": "offset"
                },
                "param_2": {
                    "1": "result_array",
                    "2": "output_array",
                    "3": "size",
                    "7": "new_size"
                },
                "param_3": {
                    "1": "limit",
                    "2": "length",
                    "5": "size",
                    "6": "count"
                }
            },
            "called": [
                "FUN_000825b0"
            ],
            "calling": [
                "FUN_00081622"
            ],
            "code": "\nvoid reallocate_memory_000825a0(undefined4 pointer_array,undefined4 new_size)\n\n{\n  _realloc_r(relocation_table[140].r_offset,pointer_array,new_size);\n  return;\n}\n\n",
            "current_name": "reallocate_memory_000825a0",
            "entrypoint": "0x000825a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_000825a0": "reallocate_memory_000825a0",
                "param_1": "pointer_array",
                "param_2": "new_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825b0": {
            "additional_data": {
                "*(uint *)((*(uint *)(dVar1 + 4) & 0xfffffffe) + dVar1 + 4)": {
                    "1": "value2"
                },
                "*(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4)": {
                    "1": "info_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array",
                    "2": "elf32_rel_array",
                    "4": "some_array"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "info_data"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info + 4": {
                    "1": "offset3"
                },
                "FUN_000825b0": {
                    "1": "resize_array",
                    "18": "allocate_memory",
                    "2": "reallocate_memory",
                    "5": "allocate_or_resize_memory"
                },
                "LAB_0008267c": {
                    "1": "error_code"
                },
                "LAB_0008268c": {
                    "1": "label_8268c"
                },
                "LAB_000826a4": {
                    "1": "label_826a4"
                },
                "__malloc_lock": {
                    "1": "acquire_lock",
                    "2": "lock_memory"
                },
                "__malloc_unlock": {
                    "1": "unlock_memory_allocation",
                    "2": "unlock_memory"
                },
                "_free_r": {
                    "1": "custom_free_r",
                    "2": "free_memory_r"
                },
                "_malloc_r": {
                    "1": "malloc_function",
                    "2": "allocate_memory_r"
                },
                "dVar1": {
                    "1": "dummy_var1",
                    "2": "tmp",
                    "5": "temp_var1",
                    "6": "offset"
                },
                "dWord": {
                    "1": "allocated_size"
                },
                "iVar4": {
                    "1": "temp_value2",
                    "2": "temp1",
                    "3": "temp_var",
                    "4": "temp_var1",
                    "5": "temp3"
                },
                "iVar6": {
                    "1": "temp_value3",
                    "2": "temp5",
                    "3": "temp4",
                    "4": "temp_var5",
                    "5": "temp_var2"
                },
                "memmove": {
                    "1": "custom_memmove",
                    "2": "copy_memory"
                },
                "param_1": {
                    "1": "param",
                    "3": "lock_ptr",
                    "4": "lock",
                    "5": "allocator",
                    "6": "context"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "old_ptr",
                    "6": "existing_memory"
                },
                "param_3": {
                    "1": "param_3",
                    "18": "size",
                    "2": "requested_size",
                    "8": "new_size"
                },
                "piVar10": {
                    "1": "resized_array",
                    "2": "temp4",
                    "3": "allocated_memory",
                    "7": "temp_ptr2"
                },
                "piVar2": {
                    "1": "result",
                    "10": "new_memory",
                    "2": "new_memory_block",
                    "3": "new_block"
                },
                "piVar7": {
                    "1": "var_7",
                    "2": "temp3",
                    "5": "temp_ptr1",
                    "6": "temp_ptr"
                },
                "uVar3": {
                    "1": "size_difference",
                    "2": "new_size",
                    "4": "temp_var2",
                    "5": "temp2"
                },
                "uVar5": {
                    "1": "block_info",
                    "2": "temp4",
                    "4": "temp_var4",
                    "6": "old_size"
                },
                "uVar8": {
                    "1": "actual_size",
                    "2": "temp_var6",
                    "4": "new_size"
                },
                "uVar9": {
                    "1": "optimal_size",
                    "13": "aligned_size",
                    "2": "new_size_aligned"
                }
            },
            "called": [
                "FUN_00082438",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "code": "\nint * allocate_memory_000825b0(undefined4 *context,int *existing_memory,uint size)\n\n{\n  dword offset;\n  int *new_memory;\n  uint temp2;\n  int temp3;\n  uint old_size;\n  int temp_var2;\n  int *temp_ptr;\n  uint new_size;\n  uint aligned_size;\n  int *temp_ptr2;\n  \n  if (existing_memory == (int *)0x0) {\n    new_memory = (int *)allocate_memory_000825b0_r(context,size);\n    return new_memory;\n  }\n  lock_memory();\n  old_size = existing_memory[-1];\n  new_size = old_size & 0xfffffffc;\n  new_memory = existing_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto label_8267c;\n  }\n  if (aligned_size < size) {\nlabel_8267c:\n    *context = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)new_size < (int)aligned_size) {\n    offset = (int)new_memory + new_size;\n    if (info_data == offset) {\n      temp2 = *(uint *)(info_data + 4) & 0xfffffffc;\n      offset = info_data;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + new_size)) {\n        info_data = (int)new_memory + aligned_size;\n        *(uint *)(info_data + 4) = (temp2 + new_size) - aligned_size | 1;\n        existing_memory[-1] = aligned_size | existing_memory[-1] & 1U;\n        unlock_memory(context);\n        return existing_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(offset + 4) & 0xfffffffe) + offset + 4) & 1) == 0) {\n      temp2 = *(uint *)(offset + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + new_size)) {\n        temp_var2 = *(int *)(offset + 0xc);\n        temp3 = *(int *)(offset + 8);\n        *(int *)(temp3 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp3;\n        new_size = temp2 + new_size;\n        goto label_8268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      offset = 0;\n    }\n    if (-1 < (int)(old_size << 0x1f)) {\n      temp_ptr2 = (int *)((int)new_memory - existing_memory[-2]);\n      old_size = (temp_ptr2[1] & 0xfffffffcU) + new_size;\n      if (offset != 0) {\n        if (offset == info_data) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + old_size)) {\n            new_memory = temp_ptr2 + 2;\n            temp3 = *new_memory;\n            temp_var2 = temp_ptr2[3];\n            new_size = new_size - 4;\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            if (new_size < 0x25) {\n              temp_ptr = new_memory;\n              if (0x13 < new_size) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (new_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  temp_ptr = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (new_size == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    temp_ptr = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *temp_ptr;\n                    temp_ptr = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    temp_ptr = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr = *existing_memory;\n              temp_ptr[1] = existing_memory[1];\n              temp_ptr[2] = existing_memory[2];\n            }\n            else {\n              move_memory(new_memory,existing_memory);\n            }\n            info_data = (int)temp_ptr2 + aligned_size;\n            *(uint *)(info_data + 4) = (temp2 + old_size) - aligned_size | 1;\n            temp_ptr2[1] = aligned_size | temp_ptr2[1] & 1U;\n            unlock_memory(context);\n            return new_memory;\n          }\n        }\n        else {\n          temp2 = temp2 + old_size;\n          if ((int)aligned_size <= (int)temp2) {\n            temp_var2 = *(int *)(offset + 0xc);\n            temp3 = *(int *)(offset + 8);\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            temp_ptr = temp_ptr2 + 2;\n            temp3 = *temp_ptr;\n            temp_var2 = temp_ptr2[3];\n            old_size = new_size - 4;\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            new_size = temp2;\n            if (old_size < 0x25) {\n              new_memory = temp_ptr;\n              if (0x13 < old_size) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (old_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  new_memory = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (old_size == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    new_memory = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *new_memory;\n                    new_memory = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    new_memory = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *new_memory = *existing_memory;\n              new_memory[1] = existing_memory[1];\n              new_memory[2] = existing_memory[2];\n              old_size = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr;\n            }\n            else {\n              move_memory(temp_ptr,existing_memory);\n              old_size = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr;\n            }\n            goto label_8268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)old_size) {\n        temp_ptr = temp_ptr2 + 2;\n        temp3 = *temp_ptr;\n        temp_var2 = temp_ptr2[3];\n        temp2 = new_size - 4;\n        *(int *)(temp3 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp3;\n        new_size = old_size;\n        if (temp2 < 0x25) {\n          new_memory = temp_ptr;\n          if (0x13 < temp2) {\n            temp_ptr2[2] = *existing_memory;\n            temp_ptr2[3] = existing_memory[1];\n            if (temp2 < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = existing_memory[2];\n              temp_ptr2[5] = existing_memory[3];\n              if (temp2 == 0x24) {\n                temp_ptr2[6] = existing_memory[4];\n                new_memory = existing_memory + 5;\n                existing_memory = existing_memory + 6;\n                temp_ptr2[7] = *new_memory;\n                new_memory = temp_ptr2 + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = temp_ptr2 + 6;\n              }\n            }\n          }\n          *new_memory = *existing_memory;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          old_size = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr;\n        }\n        else {\n          move_memory(temp_ptr,existing_memory);\n          old_size = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr;\n        }\n        goto label_8268c;\n      }\n    }\n    temp_ptr2 = (int *)allocate_memory_000825b0_r(context,size);\n    if (temp_ptr2 == (int *)0x0) goto label_826a4;\n    old_size = existing_memory[-1];\n    if (temp_ptr2 + -2 != (int *)((old_size & 0xfffffffe) + (int)new_memory)) {\n      new_size = new_size - 4;\n      if (new_size < 0x25) {\n        new_memory = existing_memory;\n        temp_ptr = temp_ptr2;\n        if (0x13 < new_size) {\n          *temp_ptr2 = *existing_memory;\n          temp_ptr2[1] = existing_memory[1];\n          if (new_size < 0x1c) {\n            new_memory = existing_memory + 2;\n            temp_ptr = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = existing_memory[2];\n            temp_ptr2[3] = existing_memory[3];\n            if (new_size == 0x24) {\n              temp_ptr2[4] = existing_memory[4];\n              temp_ptr2[5] = existing_memory[5];\n              new_memory = existing_memory + 6;\n              temp_ptr = temp_ptr2 + 6;\n            }\n            else {\n              new_memory = existing_memory + 4;\n              temp_ptr = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr = *new_memory;\n        temp_ptr[1] = new_memory[1];\n        temp_ptr[2] = new_memory[2];\n      }\n      else {\n        move_memory(temp_ptr2,existing_memory);\n      }\n      free_memory(context,existing_memory);\n      goto label_826a4;\n    }\n    new_size = new_size + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nlabel_8268c:\n  temp2 = new_size - aligned_size;\n  temp_ptr2 = existing_memory;\n  if (temp2 < 0x10) {\n    new_memory[1] = old_size & 1 | new_size;\n    *(uint *)((int)new_memory + new_size + 4) = *(uint *)((int)new_memory + new_size + 4) | 1;\n  }\n  else {\n    new_memory[1] = old_size & 1 | aligned_size;\n    *(uint *)((int)new_memory + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)new_memory + temp2 + aligned_size + 4) = *(uint *)((int)new_memory + temp2 + aligned_size + 4) | 1;\n    free_memory(context,(int)new_memory + aligned_size + 8);\n  }\nlabel_826a4:\n  unlock_memory(context);\n  return temp_ptr2;\n}\n\n",
            "current_name": "allocate_memory_000825b0",
            "entrypoint": "0x000825b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "some_array",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "info_data",
                "FUN_000825b0": "allocate_memory_000825b0",
                "LAB_0008267c": "label_8267c",
                "LAB_0008268c": "label_8268c",
                "LAB_000826a4": "label_826a4",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory_r",
                "dVar1": "offset",
                "iVar4": "temp3",
                "iVar6": "temp_var2",
                "memmove": "move_memory",
                "param_1": "context",
                "param_2": "existing_memory",
                "param_3": "size",
                "piVar10": "temp_ptr2",
                "piVar2": "new_memory",
                "piVar7": "temp_ptr",
                "uVar3": "temp2",
                "uVar5": "old_size",
                "uVar8": "new_size",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082970": {
            "additional_data": {
                "FUN_00082970": {
                    "1": "initialize_memory_allocation",
                    "27": "allocate_memory",
                    "3": "initialize_memory"
                },
                "iVar1": {
                    "1": "memory_allocation_result",
                    "14": "allocation_result",
                    "2": "memory_pointer",
                    "3": "memory_address",
                    "5": "allocated_memory"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "11": "result",
                    "2": "output_address",
                    "3": "result_pointer",
                    "4": "result_ptr",
                    "8": "output_pointer"
                },
                "param_2": {
                    "1": "mem_size",
                    "2": "memory_size",
                    "24": "size",
                    "3": "bytes_to_allocate"
                }
            },
            "called": [
                "FUN_0008118c"
            ],
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "code": "\nvoid allocate_memory_00082970(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_200711bc = 0;\n  allocation_result = _sbrk(size);\n  if ((allocation_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_00082970",
            "entrypoint": "0x00082970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082994": {
            "additional_data": {
                "FUN_00082994": {
                    "1": "copy_string_with_length_check",
                    "2": "copy_string_with_alignment_check",
                    "24": "copy_string"
                },
                "LAB_000829f8": {
                    "1": "end_loop"
                },
                "bVar8": {
                    "1": "is_zero_byte_found",
                    "3": "is_short_zero",
                    "9": "is_zero"
                },
                "cVar1": {
                    "1": "ch",
                    "26": "current_char"
                },
                "new_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "new_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "param_1": {
                    "14": "dest",
                    "17": "destination"
                },
                "param_2": {
                    "14": "src",
                    "17": "source"
                },
                "puVar3": {
                    "1": "temp_ptr1",
                    "2": "temp_pointer",
                    "3": "next_source",
                    "4": "next_src",
                    "5": "temp_ptr"
                },
                "puVar4": {
                    "1": "next_pointer2",
                    "2": "source_ptr",
                    "3": "temp_pointer2",
                    "5": "next_dest"
                },
                "puVar7": {
                    "1": "temp_ptr3",
                    "2": "next_destination",
                    "4": "destination_ptr",
                    "5": "destination_pointer",
                    "9": "dest_ptr"
                },
                "uVar2": {
                    "1": "ushort_val",
                    "2": "temp_short",
                    "25": "current_short"
                },
                "uVar5": {
                    "1": "current_source_value",
                    "11": "current_uint",
                    "2": "current_int",
                    "3": "current_u_int",
                    "4": "current_word"
                },
                "uVar6": {
                    "1": "temp_value2",
                    "2": "temp_u_int",
                    "3": "current_byte",
                    "4": "shifted_uint",
                    "6": "temp_uint"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid copy_string_00082994(uint *destination,uint *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *temp_ptr;\n  uint *temp_ptr2;\n  uint current_uint;\n  uint temp_uint;\n  uint *dest_ptr;\n  bool is_zero_byte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    temp_ptr2 = source;\n    if (((uint)source & 1) != 0) {\n      temp_ptr2 = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = temp_ptr2;\n    if (((uint)temp_ptr2 & 2) != 0) {\n      source = (uint *)((int)temp_ptr2 + 2);\n      current_short = *(ushort *)temp_ptr2;\n      is_zero_byte = (current_short & 0xff) == 0;\n      if (is_zero_byte) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_zero_byte = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_zero_byte) {\n        return;\n      }\n    }\n  }\n  current_uint = *source;\n  temp_ptr2 = source + 1;\n  dest_ptr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto check_alignment;\n    dest_ptr = destination + 1;\n    *destination = current_uint;\n    temp_ptr2 = source + 2;\n    current_uint = source[1];\n  }\n  while( true ) {\n    temp_ptr = temp_ptr2 + 1;\n    temp_uint = *temp_ptr2;\n    destination = dest_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    destination = dest_ptr + 1;\n    *dest_ptr = current_uint;\n    current_uint = temp_uint;\n    if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n    temp_ptr2 = temp_ptr2 + 2;\n    current_uint = *temp_ptr;\n    dest_ptr = dest_ptr + 2;\n    *destination = temp_uint;\n  }\ncheck_alignment:\n  do {\n    *(char *)destination = (char)current_uint;\n    temp_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (temp_uint != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_00082994",
            "entrypoint": "0x00082994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "LAB_000829f8": "check_alignment",
                "bVar8": "is_zero_byte",
                "cVar1": "current_char",
                "param_1": "destination",
                "param_2": "source",
                "puVar3": "temp_ptr",
                "puVar4": "temp_ptr2",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_uint",
                "uVar6": "temp_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082a50": {
            "additional_data": {
                "(param_1 & 3)": {
                    "1": "remainder"
                },
                "-(param_1 & 3)": {
                    "1": "offset_remainder"
                },
                "FUN_00082a50": {
                    "1": "count_zeros_starting_from_lsb",
                    "2": "count_leading_zeroes",
                    "20": "count_leading_zeros",
                    "3": "count_leading_zero_bytes"
                },
                "bVar4": {
                    "1": "is_null",
                    "28": "is_zero"
                },
                "iVar1": {
                    "1": "leading_zeros_count",
                    "20": "leading_zeros",
                    "3": "leading_zeroes",
                    "4": "count"
                },
                "param_1": {
                    "1": "number",
                    "18": "input",
                    "2": "num",
                    "4": "input_value",
                    "5": "value"
                },
                "param_1 & 0xfffffffc": {
                    "1": "aligned_input"
                },
                "puVar2": {
                    "1": "value_ptr",
                    "18": "ptr",
                    "2": "pointer"
                },
                "puVar2 + 1": {
                    "1": "current_aligned_input"
                },
                "uVar3": {
                    "1": "word",
                    "2": "temp",
                    "21": "value",
                    "3": "current_value"
                },
                "uVar3 & 0xff": {
                    "1": "current_byte_1"
                },
                "uVar3 & 0xff00": {
                    "1": "current_byte_2"
                },
                "uVar3 & 0xff0000": {
                    "1": "current_byte_3"
                },
                "uVar3 + 0xfefefeff & ~uVar3 & 0x80808080": {
                    "1": "mask_check"
                },
                "uVar3 | 0xffffffffU >> ((iVar1 + 4U & 0x1f) << 3)": {
                    "1": "current_value"
                },
                "uVar5": {
                    "1": "shifted_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "code": "\nint count_leading_zeros_00082a50(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_00082a50",
            "entrypoint": "0x00082a50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "additional_data": {
                "FUN_00082ac0": {
                    "1": "write_data_to_stream",
                    "2": "write_data_to_file",
                    "25": "write_to_file"
                },
                "iVar2": {
                    "1": "status",
                    "2": "write_status",
                    "23": "result",
                    "4": "write_result"
                },
                "param_1": {
                    "1": "file_ptr",
                    "10": "stream",
                    "2": "file_stream",
                    "7": "file_descriptor",
                    "8": "file"
                },
                "param_2": {
                    "1": "arg2",
                    "15": "buffer_size",
                    "2": "count",
                    "3": "size",
                    "6": "file_descriptor"
                },
                "param_3": {
                    "1": "array_of_pointers",
                    "10": "data",
                    "2": "file_data",
                    "4": "data_buffer",
                    "8": "buffer"
                },
                "piVar1": {
                    "1": "buffer",
                    "2": "ptr_data",
                    "6": "current_data",
                    "8": "current_buffer"
                },
                "piVar3": {
                    "1": "file_chunks",
                    "5": "remaining_buffer",
                    "8": "remaining_data"
                },
                "puVar5": {
                    "1": "current_value",
                    "2": "ptr_element",
                    "3": "current_item",
                    "9": "current_element"
                },
                "uVar4": {
                    "1": "chunk_index",
                    "2": "iteration_count",
                    "3": "loop_counter",
                    "5": "count",
                    "7": "index",
                    "9": "counter"
                },
                "uVar6": {
                    "1": "temp_var1",
                    "2": "element",
                    "4": "chunk_size",
                    "9": "element_size"
                },
                "uVar7": {
                    "1": "entry_size",
                    "2": "num_chunks",
                    "3": "item_count",
                    "6": "num_elements"
                }
            },
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint write_to_file_00082ac0(undefined4 stream,int buffer_size,int **data)\n\n{\n  int *current_buffer;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *current_element;\n  uint element_size;\n  uint num_elements;\n  \n  if (-1 < *(int *)(buffer_size + 100) << 0x12) {\n    result = __sfvwrite_r();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = data[2];\n  current_buffer = *data;\n  while (remaining_data != (int *)0x0) {\n    element_size = current_buffer[1];\n    num_elements = element_size >> 2;\n    if (num_elements != 0) {\n      current_element = (undefined4 *)(*current_buffer + -4);\n      counter = 0;\n      do {\n        current_element = current_element + 1;\n        result = _fputwc_r(stream,*current_element,buffer_size);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (num_elements != counter);\n      remaining_data = data[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (element_size & 0xfffffffc));\n    data[2] = remaining_data;\n    current_buffer = current_buffer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "write_to_file_00082ac0",
            "entrypoint": "0x00082ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082ac0": "write_to_file_00082ac0",
                "iVar2": "result",
                "param_1": "stream",
                "param_2": "buffer_size",
                "param_3": "data",
                "piVar1": "current_buffer",
                "piVar3": "remaining_data",
                "puVar5": "current_element",
                "uVar4": "counter",
                "uVar6": "element_size",
                "uVar7": "num_elements"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082b38": {
            "additional_data": {
                " iVar15": {
                    "1": "count"
                },
                " iVar25": {
                    "1": "width"
                },
                "**param_4": {
                    "1": "args"
                },
                "*local_c8": {
                    "1": "arg"
                },
                "FUN_00082a50": {
                    "1": "is_flag"
                },
                "FUN_00082ac0": {
                    "1": "initialize_buffer"
                },
                "FUN_00082b38": {
                    "1": "new_function_name",
                    "10": "print_formatted_string",
                    "12": "format_string"
                },
                "FUN_0008378c": {
                    "1": "get_argument"
                },
                "FUN_00083808": {
                    "1": "get_item_from_arguments"
                },
                "FUN_00083b14": {
                    "1": "sprint_r"
                },
                "FUN_00084384": {
                    "1": "print_number"
                },
                "FUN_00084750": {
                    "1": "print_string"
                },
                "F_00082b38": {
                    "1": "format_string"
                },
                "F_UNK_00082b38": {
                    "1": "parse_format_string"
                },
                "LOCAL_64": {
                    "1": "local64_var"
                },
                "a1": {
                    "1": "specifier"
                },
                "bVar1": {
                    "1": "is_type_propagated",
                    "2": "is_long",
                    "3": "is_left_justified"
                },
                "bVar10": {
                    "1": "flag_padding"
                },
                "bVar11": {
                    "1": "flag_pointer"
                },
                "bVar12": {
                    "1": "flag_negative"
                },
                "bVar13": {
                    "1": "flag_width"
                },
                "bVar14": {
                    "1": "flag_precision"
                },
                "bVar15": {
                    "1": "flag_unsigned_int"
                },
                "bVar16": {
                    "1": "flag_uppercase"
                },
                "bVar17": {
                    "1": "flag_scientific"
                },
                "bVar18": {
                    "1": "flag_float"
                },
                "bVar19": {
                    "1": "flag_char"
                },
                "bVar2": {
                    "1": "is_plus",
                    "2": "is_flag_plus",
                    "3": "is_signed"
                },
                "bVar20": {
                    "1": "flag_string"
                },
                "bVar21": {
                    "1": "flag_pointer_null"
                },
                "bVar22": {
                    "1": "flag_size"
                },
                "bVar23": {
                    "1": "flag_memory_layout"
                },
                "bVar24": {
                    "1": "flag_precision_value"
                },
                "bVar26": {
                    "1": "var11",
                    "4": "is_negative"
                },
                "bVar3": {
                    "1": "flag_sharp",
                    "2": "alternate_form",
                    "4": "is_alternate"
                },
                "bVar4": {
                    "1": "flag_scientific_upper_case"
                },
                "bVar5": {
                    "1": "use_upper_case",
                    "2": "is_zero_padding",
                    "3": "is_zero"
                },
                "bVar7": {
                    "1": "flag_print"
                },
                "bVar8": {
                    "1": "flag_test"
                },
                "bVar9": {
                    "1": "flag_end"
                },
                "cStack_69": {
                    "1": "value_buffer"
                },
                "cStack_6a": {
                    "1": "temp_char4",
                    "2": "temp_char2",
                    "5": "temp_char"
                },
                "cVar26": {
                    "1": "negative"
                },
                "cVar4": {
                    "1": "alternate_char",
                    "2": "fill_char",
                    "3": "padding_char"
                },
                "cVar9": {
                    "1": "char_var2",
                    "4": "temp_char"
                },
                "getVar18": {
                    "1": "var4"
                },
                "iVar15": {
                    "1": "temp_int1",
                    "2": "num_args"
                },
                "iVar17": {
                    "1": "result",
                    "2": "current_arg_index",
                    "4": "arg_count"
                },
                "iVar18": {
                    "1": "stage3_counter"
                },
                "iVar8": {
                    "1": "temp_int3",
                    "18": "result"
                },
                "lVar27": {
                    "1": "long_value",
                    "2": "temp_long_long",
                    "3": "combined_arg",
                    "4": "arg_value"
                },
                "local_64": {
                    "1": "local_arg_stack",
                    "2": "temp_array"
                },
                "local_64[16]": {
                    "1": "hidden_element_pointer_array"
                },
                "local_68": {
                    "1": "format_buf",
                    "3": "temp_buffer"
                },
                "local_68[4]": {
                    "1": "hex_lower_case"
                },
                "local_69": {
                    "1": "temp_char3"
                },
                "local_6a": {
                    "1": "char_buffer"
                },
                "local_90": {
                    "1": "local_var3",
                    "2": "decimal_char",
                    "3": "temp_char"
                },
                "local_94": {
                    "1": "arg_indices_length_offset"
                },
                "local_98": {
                    "1": "part_index",
                    "2": "num_args",
                    "6": "arg_count"
                },
                "local_9c": {
                    "1": "start_args",
                    "2": "arg_list"
                },
                "local_9f": {
                    "1": "temp_undef2"
                },
                "local_a0": {
                    "1": "zero_padding_char",
                    "2": "pad_char",
                    "4": "padding_char"
                },
                "local_a1": {
                    "1": "modifier_char",
                    "2": "current_char",
                    "3": "flag_char",
                    "5": "sign_char"
                },
                "local_c0": {
                    "1": "output_buffer",
                    "2": "hex_table",
                    "3": "hex_digits",
                    "7": "digits"
                },
                "local_c4": {
                    "1": "res",
                    "2": "result"
                },
                "local_c8": {
                    "1": "args_list_pos",
                    "2": "arg_list_ptr",
                    "3": "arg_ptr"
                },
                "local_d4": {
                    "1": "arg_indices_length_offset"
                },
                "local_dc": {
                    "1": "max_category_address",
                    "2": "max_width"
                },
                "param_1": {
                    "1": "input1",
                    "17": "buffer",
                    "5": "output_buffer"
                },
                "param_1 + 0x38": {
                    "1": "ptr_next"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "buffer_length",
                    "6": "format",
                    "7": "format_string"
                },
                "param_2 + 0x10": {
                    "1": "ptr_next2"
                },
                "param_2 + 0xc": {
                    "1": "format_length"
                },
                "param_3": {
                    "1": "buf",
                    "3": "format_string",
                    "5": "arguments",
                    "8": "format"
                },
                "param_4": {
                    "1": "input4",
                    "11": "args",
                    "3": "argptr"
                },
                "piVar19": {
                    "1": "arg2"
                },
                "piVar22": {
                    "1": "width_ptr2",
                    "2": "pi_var"
                },
                "piVar7": {
                    "1": "arg_ptr_x",
                    "2": "arg_ptr",
                    "5": "arg"
                },
                "ppiParam16": {
                    "1": "var_args"
                },
                "ppiVar12": {
                    "1": "start_args",
                    "2": "arg_list_ptr"
                },
                "ppiVar19": {
                    "1": "fmt_ptr"
                },
                "pppage_9c": {
                    "1": "chunk_ptr_ptr"
                },
                "ppppppp********iVar16": {
                    "1": "width_args"
                },
                "ppppppp********iVar6": {
                    "1": "format_args"
                },
                "pppppppakVar25": {
                    "1": "temp_char_ptr"
                },
                "pppppppiVar10": {
                    "1": "pointer10",
                    "2": "format_pos"
                },
                "pppppppiVar16": {
                    "1": "p_format_string"
                },
                "pppppppiVar18": {
                    "1": "remaining_args"
                },
                "pppppppiVar19": {
                    "1": "stage2_pos"
                },
                "pppppppiVar20": {
                    "1": "p_width",
                    "3": "arg_ptr"
                },
                "pppppppiVar23": {
                    "1": "tmp_args3"
                },
                "pppppppiVar6": {
                    "1": "format_args"
                },
                "ppppppppiVar10": {
                    "1": "current_arg_ptr"
                },
                "ppppppppiVar16": {
                    "1": "temp_arg_stack"
                },
                "ppppppppiVar18": {
                    "1": "arg_list_length"
                },
                "ppppppppiVar20": {
                    "1": "current_arg"
                },
                "ppppppppiVar23": {
                    "1": "arg_list_length"
                },
                "ppppppppiVar25": {
                    "1": "ptr_addr"
                },
                "ppppppppiVar6": {
                    "1": "arg_ptrs",
                    "2": "arg_ptr",
                    "3": "arg_list"
                },
                "ppppppppvVar20": {
                    "1": "raw_pos"
                },
                "ppppppppvVar23": {
                    "1": "stage2_size_shfited"
                },
                "ppppppppvVar25": {
                    "1": "ptr_to_string"
                },
                "ppprim23": {
                    "1": "var_arg_ptr"
                },
                "uVar11": {
                    "1": "digits",
                    "11": "digit",
                    "2": "digit_value"
                },
                "uVar13": {
                    "1": "temp_u_var2",
                    "17": "flags",
                    "3": "format_flags"
                },
                "uVar14": {
                    "1": "unsigned_var3",
                    "11": "ch",
                    "2": "current_char",
                    "4": "c"
                },
                "uVar21": {
                    "1": "limit",
                    "2": "temp_uint",
                    "4": "width"
                },
                "uVar24": {
                    "1": "temp_var1",
                    "2": "temp"
                },
                "uVar27": {
                    "1": "temp"
                },
                "ufixed28": {
                    "1": "temp"
                }
            },
            "called": [
                "FUN_00082ac0",
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00084384",
                "FUN_00084750",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "calling": [
                "FUN_0008378c"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint format_string_00082b38(int buffer,int format_string_00082b38,int *******args,int **args)\n\n{\n  bool is_left_justified;\n  bool is_signed;\n  bool is_alternate;\n  char padding_char;\n  bool is_zero;\n  int ********arg_list;\n  int *arg;\n  int result;\n  char ch;\n  int *******format_pos;\n  uint digit;\n  int **arg_list_ptr;\n  uint flags;\n  uint ch;\n  int count;\n  int ********arg_indices_offset;\n  int arg_count;\n  int *******remaining_format_string_00082b38_offset;\n  int *arg_index;\n  int *******arg_ptr;\n  uint width;\n  int *pi_var;\n  int *******remaining_format_string_00082b38_offset;\n  undefined4 temp;\n  int ********arg_indices_offset;\n  bool is_negative;\n  longlong arg_value;\n  int *******max_width;\n  int *******arg_indices_length_offset;\n  int **arg_ptr;\n  int count;\n  char *digits;\n  char sign_char;\n  undefined padding_char;\n  undefined grouping_char;\n  int ********arg_list;\n  int arg_count;\n  int *******arg_indices_length_offset;\n  undefined temp_char;\n  char temp_char;\n  undefined temp_char3;\n  undefined temp_buffer [4];\n  int *******temp_array [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = (uint)*(ushort *)(format_string_00082b38 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format_string_00082b38 + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format_string_00082b38 + 0xc) = (short)flags;\n    *(uint *)(format_string_00082b38 + 100) = *(uint *)(format_string_00082b38 + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format_string_00082b38 + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = __swsetup_r(buffer,format_string_00082b38);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format_string_00082b38 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(format_string_00082b38 + 0xe)) {\n    result = __sbprintf(buffer,format_string_00082b38,args,args);\n    return result;\n  }\nLAB_00082b8a:\n  digits = (char *)0x0;\n  arg_indices_length_offset = (int *******)0x0;\n  arg_count = 0;\n  count = 0;\n  arg_list = (int ********)temp_buffer;\n  arg_ptr = args;\n  arg_list = (int ********)temp_buffer;\nLAB_00082b9e:\n  format_pos = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      format_pos = (int *******)((int)format_pos + 1);\n      if (*(char *)format_pos == '\\0') break;\n    } while (*(char *)format_pos != '%');\n    arg_ptr = (int *******)((int)format_pos - (int)args);\n    if (arg_ptr != (int *******)0x0) {\n      arg_count = arg_count + 1;\n      arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + (int)arg_ptr);\n      *arg_list = args;\n      arg_list[1] = arg_ptr;\n      if (arg_count < 8) {\n        arg_list = arg_list + 2;\n      }\n      else {\n        if (arg_indices_length_offset == (int *******)0x0) {\n          count = count + (int)arg_ptr;\n          arg_count = 0;\n          arg_list = (int ********)temp_buffer;\n          goto LAB_00082bee;\n        }\n        result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n        arg_list = (int ********)temp_buffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      count = count + (int)arg_ptr;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)format_pos != '\\0') {\n    sign_char = '\\0';\n    ch = (uint)*(byte *)((int)format_pos + 1);\n    flags = 0;\n    is_zero = false;\n    is_signed = false;\n    is_left_justified = false;\n    is_alternate = false;\n    is_negative = false;\n    arg_ptr = (int *******)0x0;\n    arg_indices_length_offset = (int *******)0xffffffff;\n    args = (int *******)((int)format_pos + 1);\nLAB_00082c12:\n    args = (int *******)((int)args + 1);\nLAB_00082c16:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (ch != 0) {\n        max_width = (int *******)0x1;\n        arg_indices_length_offset = (int *******)0x1;\n        arg_indices_offset = (int ********)&temp_char;\n        temp_char = (char)ch;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      is_alternate = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2a:\n      arg_ptr = (int *******)*arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      if ((int)arg_ptr < 0) {\n        arg_ptr = (int *******)-(int)arg_ptr;\n        goto switchD_00082c20_caseD_2d;\n      }\n      ch = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2b:\n      ch = (uint)*(byte *)args;\n      sign_char = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2e:\n      ch = (uint)*(byte *)args;\n      format_pos = (int *******)((int)args + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)args + 1);\n        arg_indices_length_offset = (int *******)*arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        args = format_pos;\n        if ((int)arg_indices_length_offset < 0) {\n          arg_indices_length_offset = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        width = 0;\n        do {\n          args = (int *******)((int)format_pos + 1);\n          ch = (uint)*(byte *)format_pos;\n          width = digit + width * 10;\n          digit = ch - 0x30;\n          format_pos = args;\n        } while (digit < 10);\n        arg_indices_length_offset = (int *******)(width | (int)width >> 0x1f);\n      }\n      else {\n        arg_indices_length_offset = (int *******)0x0;\n        args = format_pos;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      is_signed = true;\n      if (is_left_justified == false) goto LAB_00083028;\nLAB_00082e98:\n      arg_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_index = *arg_ptr;\n      pi_var = arg_ptr[1];\n      arg_ptr = arg_ptr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      is_signed = true;\n      if (is_left_justified != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)is_signed << 4;\n      count = (uint)is_left_justified << 5;\n      if ((is_signed == 0) && (count = (uint)is_negative << 6, is_negative != 0)) {\n        arg_index = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        pi_var = (int *)0x0;\n      }\n      else {\n        result = count;\n        arg_index = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        pi_var = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_signed = true;\n      if (is_left_justified != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((is_signed) || (is_negative == false)) {\n        result = 1;\n        arg_index = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        pi_var = (int *)0x0;\n      }\n      else {\n        pi_var = (int *)0x0;\n        arg_index = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (is_left_justified == false) goto LAB_00083196;\nLAB_00082fb6:\n      arg_list_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = arg_list_ptr + 2;\n      arg_index = *arg_list_ptr;\n      pi_var = arg_list_ptr[1];\n      goto LAB_00082fca;\n    case 99:\n      arg_index = *arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      max_width = (int *******)0x1;\n      temp_char = SUB41(arg_index,0);\n      arg_indices_length_offset = (int *******)0x1;\n      arg_indices_offset = (int ********)&temp_char;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (is_left_justified != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((is_signed == false) && (is_negative != false)) {\n        arg_index = (int *)(int)*(short *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        pi_var = (int *)((int)arg_index >> 0x1f);\n      }\n      else {\n        arg_index = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        pi_var = (int *)((int)arg_index >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)pi_var < 0) {\n        is_negative = arg_index != (int *)0x0;\n        arg_index = (int *)-(int)arg_index;\n        pi_var = (int *)(-(int)pi_var - (uint)is_negative);\n        sign_char = '-';\n        padding_char = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)arg_indices_length_offset) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero = false;\n      ch = (uint)arg_index | (uint)pi_var;\n      result = 1;\n      padding_char = sign_char;\n      goto joined_r0x00082d78;\n    case 0x68:\n      is_negative = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x6c:\n      ch = (uint)*(byte *)args;\n      if (ch == 0x6c) {\n        is_left_justified = true;\n        ch = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        is_signed = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (is_left_justified == false) {\n        if (is_signed == false) {\n          if (is_negative) {\n            arg_index = *arg_ptr;\n            arg_ptr = arg_ptr + 1;\n            *(short *)arg_index = (short)count;\n          }\n          else {\n            arg_index = *arg_ptr;\n            arg_ptr = arg_ptr + 1;\n            *arg_index = count;\n          }\n        }\n        else {\n          arg_index = *arg_ptr;\n          arg_ptr = arg_ptr + 1;\n          *arg_index = count;\n        }\n      }\n      else {\n        arg_index = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        *arg_index = count;\n        arg_index[1] = count >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (is_left_justified == false) goto LAB_00082f2a;\nLAB_00082d42:\n      arg_list_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = arg_list_ptr + 2;\n      arg_index = *arg_list_ptr;\n      pi_var = arg_list_ptr[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg_index = *arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      grouping_char = 0x78;\n      is_zero = true;\n      pi_var = (int *)0x0;\n      padding_char = 0x30;\n      digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_left_justified = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x73:\n      arg_indices_offset = (int ********)*arg_ptr;\n      sign_char = '\\0';\n      arg_ptr = arg_ptr + 1;\n      if (arg_indices_offset != (int ********)0x0) {\n        if ((int)arg_indices_length_offset < 0) {\n          arg_indices_length_offset = (int *******)strlen(arg_indices_offset);\n          format_pos = (int *******)0x0;\n          padding_char = sign_char;\n        }\n        else {\n          result = memchr(arg_indices_offset,0,arg_indices_length_offset);\n          padding_char = sign_char;\n          if (result == 0) {\n            format_pos = (int *******)0x0;\n          }\n          else {\n            remaining_format_string_00082b38_offset = (int *******)(result - (int)arg_indices_offset);\n            if ((int)arg_indices_length_offset <= (int)(int *******)(result - (int)arg_indices_offset)) {\n              remaining_format_string_00082b38_offset = arg_indices_length_offset;\n            }\n            format_pos = (int *******)0x0;\n            arg_indices_length_offset = remaining_format_string_00082b38_offset;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < arg_indices_length_offset) {\n        arg_indices_length_offset = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)arg_indices_length_offset & ~((int)arg_indices_length_offset >> 0x1f));\n      arg_indices_offset = (int ********)&UNK_00085840;\nLAB_00083012:\n      sign_char = '\\0';\n      format_pos = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!is_left_justified) goto LAB_00082f7c;\nLAB_00082e62:\n      arg_list_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = arg_list_ptr + 2;\n      arg_index = *arg_list_ptr;\n      pi_var = arg_list_ptr[1];\n      result = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (is_left_justified != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((is_signed == false) && (is_negative != false)) {\n        pi_var = (int *)0x0;\n        arg_index = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n      }\n      else {\n        arg_index = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        pi_var = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((is_alternate) && (((uint)arg_index | (uint)pi_var) != 0)) {\n        is_zero = true;\n        padding_char = 0x30;\n        result = 2;\n        grouping_char = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    sign_char = '\\0';\n    padding_char = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)arg_indices_length_offset) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)arg_index | (uint)pi_var;\njoined_r0x00082d78:\n    arg_value = CONCAT44(pi_var,arg_index);\n    format_pos = arg_indices_length_offset;\n    if ((ch == 0) && (arg_indices_length_offset == (int *******)0x0)) {\n      arg_indices_offset = (int ********)temp_buffer;\n      if ((result != 0) || (!is_alternate)) goto LAB_00082da0;\n      arg_indices_offset = (int ********)(&temp_char + 1);\n      temp_char3 = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (pi_var != (int *)0x0 || (int *)0x9 < arg_index) {\n        arg_indices_offset = (int ********)(&temp_char + 1);\n        do {\n          arg_indices_offset = arg_indices_offset;\n          temp = (undefined4)((ulonglong)arg_value >> 0x20);\n          ch = '\\n';\n          __aeabi_uldivmod((int)arg_value,temp,10,0);\n          *(char *)arg_indices_offset = ch + '0';\n          arg_value = __aeabi_uldivmod((int)arg_value,temp,10,0);\n          arg_indices_offset = (int ********)((int)arg_indices_offset + -1);\n        } while (arg_value != 0);\n        arg_indices_length_offset = (int *******)((int)temp_buffer - (int)arg_indices_offset);\n        goto LAB_00082da0;\n      }\n      temp_char3 = (char)arg_index + '0';\n      arg_indices_offset = (int ********)(&temp_char + 1);\n      goto LAB_0008351e;\n    }\n    arg_indices_offset = (int ********)(&temp_char + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      arg_indices_offset = arg_indices_offset;\n      ch = (uint)arg_index & 0xf;\n      arg_index = (int *)((uint)arg_index >> 4 | (int)pi_var << 0x1c);\n      pi_var = (int *)((uint)pi_var >> 4);\n      *(char *)arg_indices_offset = digits[ch];\n      arg_indices_offset = (int ********)((int)arg_indices_offset + -1);\n    } while (((uint)arg_index | (uint)pi_var) != 0);\n    arg_indices_length_offset = (int *******)((int)temp_buffer - (int)arg_indices_offset);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (arg_indices_length_offset != (int *******)0x0) {\n    __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(format_string_00082b38 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return count;\nLAB_0008337e:\n  do {\n    arg_indices_offset = arg_indices_offset;\n    arg = (int *)((uint)arg_index >> 3 | (int)pi_var << 0x1d);\n    pi_var = (int *)((uint)pi_var >> 3);\n    result = ((uint)arg_index & 7) + 0x30;\n    *(char *)arg_indices_offset = (char)result;\n    arg_indices_offset = (int ********)((int)arg_indices_offset + -1);\n    arg_index = arg;\n  } while (((uint)arg | (uint)pi_var) != 0);\n  if (is_alternate) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      arg_indices_length_offset = (int *******)((int)temp_buffer - (int)arg_indices_offset);\n    }\n    else {\n      *(undefined *)((int)arg_indices_offset + -1) = 0x30;\n      arg_indices_offset = arg_indices_offset;\n      arg_indices_length_offset = (int *******)((int)temp_buffer - (int)arg_indices_offset);\n    }\n  }\n  else {\nLAB_0008351e:\n    arg_indices_length_offset = (int *******)((int)temp_buffer - (int)arg_indices_offset);\n  }\nLAB_00082da0:\n  max_width = arg_indices_length_offset;\n  if ((int)arg_indices_length_offset < (int)format_pos) {\n    max_width = format_pos;\n  }\n  if (padding_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082dba:\n  if (is_zero) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (remaining_format_string_00082b38_offset = (int *******)((int)arg_ptr - (int)max_width), 0 < (int)remaining_format_string_00082b38_offset)) {\n    if ((int)remaining_format_string_00082b38_offset < 0x11) {\n      arg_count = arg_count + 1;\n    }\n    else {\n      do {\n        remaining_format_string_00082b38_offset = remaining_format_string_00082b38_offset;\n        result = arg_count + 1;\n        arg_indices_length_offset = arg_indices_length_offset + 4;\n        *arg_list = (int *******)0x85808;\n        arg_list[1] = (int *******)0x10;\n        if (result < 8) {\n          count = arg_count + 2;\n          arg_list = arg_list + 2;\n          arg_count = result;\n        }\n        else if (arg_indices_length_offset == (int *******)0x0) {\n          count = 1;\n          arg_list = (int ********)temp_buffer;\n          arg_count = 0;\n        }\n        else {\n          arg_count = result;\n          result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n          if (result != 0) goto LAB_000833de;\n          count = arg_count + 1;\n          arg_list = (int ********)temp_buffer;\n        }\n        remaining_format_string_00082b38_offset = remaining_format_string_00082b38_offset + -4;\n      } while (0x10 < (int)remaining_format_string_00082b38_offset);\n      remaining_format_string_00082b38_offset = remaining_format_string_00082b38_offset + -4;\n      arg_count = count;\n    }\n    arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + (int)remaining_format_string_00082b38_offset);\n    *arg_list = (int *******)0x85808;\n    arg_list[1] = remaining_format_string_00082b38_offset;\n    if (arg_count < 8) {\n      result = arg_count + 1;\n      arg_list = arg_list + 2;\n    }\n    else if (arg_indices_length_offset == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      arg_list = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      arg_list = (int ********)temp_buffer;\n    }\n  }\n  else {\n    result = arg_count + 1;\n  }\n  count = result;\n  if (sign_char != '\\0') {\n    arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + 1);\n    count = 1;\n    *arg_list = (int *******)&sign_char;\n    arg_list[1] = (int *******)0x1;\n    arg_count = result;\n    if (result < 8) {\n      count = result + 1;\n      arg_list = arg_list + 2;\n    }\n    else if (arg_indices_length_offset == (int *******)0x0) {\n      arg_count = 0;\n      arg_list = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n      if (result != 0) goto LAB_000833de;\n      count = arg_count + 1;\n      arg_list = (int ********)temp_buffer;\n    }\n  }\n  result = count;\n  arg_count = arg_count;\n  if (is_zero) {\n    arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + 2);\n    *arg_list = (int *******)&padding_char;\n    arg_list[1] = (int *******)0x2;\n    if (count < 8) {\n      result = count + 1;\n      arg_count = count;\n      arg_list = arg_list + 2;\n    }\n    else if (arg_indices_length_offset == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      arg_list = (int ********)temp_buffer;\n    }\n    else {\n      arg_count = count;\n      result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      arg_count = arg_count;\n      arg_list = (int ********)temp_buffer;\n    }\n  }\n  arg_count = arg_count;\n  if ((flags == 0x80) &&\n     (remaining_format_string_00082b38_offset = (int *******)((int)arg_ptr - (int)max_width), 0 < (int)remaining_format_string_00082b38_offset)) {\n    if (0x10 < (int)remaining_format_string_00082b38_offset) {\n      do {\n        while( true ) {\n          remaining_format_string_00082b38_offset = remaining_format_string_00082b38_offset;\n          arg_count = arg_count + 1;\n          arg_indices_length_offset = arg_indices_length_offset + 4;\n          *arg_list = (int *******)&DAT_00085848;\n          arg_list[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = arg_count + 2;\n          arg_list = arg_list + 2;\nLAB_0008348e:\n          arg_count = arg_count;\n          remaining_format_string_00082b38_offset = remaining_format_string_00082b38_offset + -4;\n          if ((int)(remaining_format_string_00082b38_offset + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (arg_indices_length_offset != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n          if (result == 0) {\n            result = arg_count + 1;\n            arg_list = (int ********)temp_buffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        arg_count = 0;\n        remaining_format_string_00082b38_offset = remaining_format_string_00082b38_offset + -4;\n        arg_list = (int ********)temp_buffer;\n      } while (0x10 < (int)(remaining_format_string_00082b38_offset + -4));\nLAB_000834b4:\n      remaining_format_string_00082b38_offset = remaining_format_string_00082b38_offset + -4;\n    }\n    arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + (int)remaining_format_string_00082b38_offset);\n    *arg_list = (int *******)&DAT_00085848;\n    arg_list[1] = remaining_format_string_00082b38_offset;\n    arg_count = result;\n    if (result < 8) {\n      result = result + 1;\n      arg_list = arg_list + 2;\n    }\n    else if (arg_indices_length_offset == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      arg_list = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      arg_list = (int ********)temp_buffer;\n    }\n  }\n  format_pos = (int *******)((int)format_pos - (int)arg_indices_length_offset);\n  arg_indices_offset = (int ********)temp_buffer;\n  if ((int)format_pos < 1) {\nLAB_000832c6:\n    arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + (int)arg_indices_length_offset);\n    *arg_list = (int *******)arg_indices_offset;\n    arg_list[1] = arg_indices_length_offset;\n    arg_indices_length_offset = arg_indices_length_offset;\n    arg_count = result;\n    if (result < 8) goto LAB_0008345a;\n    if (arg_indices_length_offset == (int *******)0x0) {\n      arg_count = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    count = arg_count;\n    if (0x10 < (int)format_pos) {\n      do {\n        while( true ) {\n          remaining_format_string_00082b38_offset = format_pos;\n          arg_count = count + 1;\n          arg_indices_length_offset = arg_indices_length_offset + 4;\n          *arg_list = (int *******)&DAT_00085848;\n          arg_list[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = count + 2;\n          arg_list = arg_list + 2;\nLAB_00083282:\n          count = arg_count;\n          format_pos = remaining_format_string_00082b38_offset + -4;\n          if ((int)(remaining_format_string_00082b38_offset + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (arg_indices_length_offset != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n          if (result == 0) {\n            result = arg_count + 1;\n            arg_list = (int ********)temp_buffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        arg_list = (int ********)temp_buffer;\n        count = 0;\n        format_pos = remaining_format_string_00082b38_offset + -4;\n      } while (0x10 < (int)(remaining_format_string_00082b38_offset + -4));\nLAB_000832aa:\n      format_pos = remaining_format_string_00082b38_offset + -4;\n    }\n    arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + (int)format_pos);\n    *arg_list = (int *******)&DAT_00085848;\n    arg_list[1] = format_pos;\n    if (result < 8) {\n      result = result + 1;\n      arg_list = arg_list + 2;\n      goto LAB_000832c6;\n    }\n    if (arg_indices_length_offset != (int *******)0x0) {\n      arg_count = result;\n      result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      arg_list = (int ********)temp_buffer;\n      goto LAB_000832c6;\n    }\n    temp_array[0] = arg_indices_length_offset;\n    arg_count = 1;\n    arg_list = (int ********)temp_buffer;\n    temp_buffer = (undefined  [4])arg_indices_offset;\nLAB_0008345a:\n    arg_indices_offset = arg_list + 2;\n    arg_indices_length_offset = arg_indices_length_offset;\n  }\n  if (((flags & 4) != 0) &&\n     (format_pos = (int *******)((int)arg_ptr - (int)max_width), 0 < (int)format_pos)) {\n    result = arg_count;\n    if ((int)format_pos < 0x11) {\n      count = arg_count + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arg_count = result + 1;\n          arg_indices_length_offset = arg_indices_length_offset + 4;\n          *arg_indices_offset = (int *******)0x85808;\n          arg_indices_offset[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          count = result + 2;\n          arg_indices_offset = arg_indices_offset + 2;\nLAB_00083316:\n          format_pos = format_pos + -4;\n          result = arg_count;\n          if ((int)format_pos < 0x11) goto LAB_0008333e;\n        }\n        if (arg_indices_length_offset != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n          if (result == 0) {\n            count = arg_count + 1;\n            arg_indices_offset = (int ********)temp_buffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        format_pos = format_pos + -4;\n        count = 1;\n        result = 0;\n        arg_indices_offset = (int ********)temp_buffer;\n      } while (0x10 < (int)format_pos);\n    }\nLAB_0008333e:\n    arg_indices_length_offset = (int *******)((int)arg_indices_length_offset + (int)format_pos);\n    *arg_indices_offset = (int *******)0x85808;\n    arg_indices_offset[1] = format_pos;\n    arg_count = count;\n    if (7 < count) {\n      if (arg_indices_length_offset == (int *******)0x0) {\n        if ((int)max_width < (int)arg_ptr) {\n          max_width = arg_ptr;\n        }\n        count = count + (int)max_width;\n        goto LAB_00083422;\n      }\n      result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)max_width < (int)arg_ptr) {\n    max_width = arg_ptr;\n  }\n  count = count + (int)max_width;\n  if ((arg_indices_length_offset != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,format_string_00082b38,&arg_list), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  arg_count = 0;\n  arg_list = (int ********)temp_buffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = ch - 0x30;\n  arg_ptr = (int *******)0x0;\n  format_pos = args;\n  do {\n    args = (int *******)((int)format_pos + 1);\n    ch = (uint)*(byte *)format_pos;\n    arg_ptr = (int *******)(digit + (int)arg_ptr * 10);\n    digit = ch - 0x30;\n    format_pos = args;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  ch = (uint)*(byte *)args;\n  if (sign_char == '\\0') {\n    sign_char = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "current_name": "format_string_00082b38",
            "entrypoint": "0x00082b38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082b38": "format_string_00082b38",
                "bVar1": "is_left_justified",
                "bVar2": "is_signed",
                "bVar26": "is_negative",
                "bVar3": "is_alternate",
                "bVar5": "is_zero",
                "cStack_6a": "temp_char",
                "cVar4": "padding_char",
                "cVar9": "ch",
                "iVar15": "count",
                "iVar17": "arg_count",
                "iVar18": "stage3_counter",
                "iVar8": "result",
                "lVar27": "arg_value",
                "local_64": "temp_array",
                "local_68": "temp_buffer",
                "local_69": "temp_char3",
                "local_90": "temp_char",
                "local_94": "arg_indices_length_offset",
                "local_98": "arg_count",
                "local_9c": "arg_list",
                "local_9f": "grouping_char",
                "local_a0": "padding_char",
                "local_a1": "sign_char",
                "local_c0": "digits",
                "local_c4": "count",
                "local_c8": "arg_ptr",
                "local_d4": "arg_indices_length_offset",
                "local_dc": "max_width",
                "param_1": "buffer",
                "param_2": "format_string",
                "param_3": "args",
                "param_4": "args",
                "piVar19": "arg_index",
                "piVar22": "pi_var",
                "piVar7": "arg",
                "ppiVar12": "arg_list_ptr",
                "pppppppiVar10": "format_pos",
                "pppppppiVar16": "ptr2_ptrs2",
                "pppppppiVar18": "remaining_format_string_offset",
                "pppppppiVar20": "arg_ptr",
                "pppppppiVar23": "remaining_format_string_offset",
                "pppppppiVar6": "format_args",
                "ppppppppiVar16": "arg_indices_offset",
                "ppppppppiVar25": "arg_indices_offset",
                "ppppppppiVar6": "arg_list",
                "uVar11": "digit",
                "uVar13": "flags",
                "uVar14": "ch",
                "uVar21": "width",
                "uVar24": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008378c": {
            "additional_data": {
                "FUN_0008378c": {
                    "1": "print_and_flush_function",
                    "2": "print_and_flush_data",
                    "3": "print_and_flush_output",
                    "9": "print_and_flush"
                },
                "_fflush_r": {
                    "1": "flush"
                },
                "_vfiprintf_r": {
                    "1": "formatted_print"
                },
                "auStack_420": {
                    "1": "array_stack",
                    "11": "stack_buffer",
                    "2": "auxiliary_stack"
                },
                "iVar1": {
                    "1": "formatted_string_result",
                    "4": "printf_result",
                    "6": "result",
                    "7": "print_result"
                },
                "iVar2": {
                    "1": "fflush_ret_val",
                    "17": "flush_result",
                    "2": "fflush_result"
                },
                "local_424": {
                    "1": "auxiliary_buffer",
                    "2": "value3"
                },
                "local_464": {
                    "1": "unused_pointer",
                    "2": "value",
                    "4": "value2"
                },
                "local_46c": {
                    "1": "data_value",
                    "2": "value1"
                },
                "local_470": {
                    "1": "flush_result",
                    "2": "zero_value",
                    "5": "zero"
                },
                "local_474": {
                    "1": "fflush_result",
                    "2": "flush_size",
                    "3": "buffer_size",
                    "4": "buffer_size_2",
                    "5": "buffer_size2"
                },
                "local_478": {
                    "1": "output",
                    "10": "buffer",
                    "2": "output_buffer",
                    "6": "buffer_pointer",
                    "8": "buffer_ptr"
                },
                "local_47a": {
                    "1": "modified_value_2",
                    "2": "flag",
                    "3": "value",
                    "4": "short_value"
                },
                "local_47c": {
                    "1": "flags",
                    "2": "flag",
                    "7": "modified_value",
                    "8": "masked_value"
                },
                "local_480": {
                    "1": "string_buffer_size",
                    "2": "buffer_size1",
                    "21": "buffer_size",
                    "4": "buffer_size_1"
                },
                "local_488": {
                    "1": "printf_arguments",
                    "10": "buffer_array",
                    "2": "output_buffer",
                    "8": "buffer"
                },
                "local_488[2]": {
                    "1": "buffer_array"
                },
                "param_1": {
                    "1": "printer",
                    "18": "output_stream",
                    "2": "output",
                    "3": "output_file",
                    "4": "file_stream"
                },
                "param_2": {
                    "1": "buffer_address",
                    "4": "input_data",
                    "6": "data_ptr",
                    "7": "data"
                }
            },
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint print_and_flush_0008378c(undefined4 output_stream,int binary_data)\n\n{\n  int print_result;\n  int flush_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort masked_value;\n  undefined2 short_value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero;\n  undefined4 pointer_offset;\n  undefined4 value2;\n  undefined4 temp_buffer;\n  undefined stack_buffer [1024];\n  \n  temp_buffer = *(undefined4 *)(binary_data + 100);\n  pointer_offset = *(undefined4 *)(binary_data + 0x1c);\n  short_value = *(undefined2 *)(binary_data + 0xe);\n  value2 = *(undefined4 *)(binary_data + 0x24);\n  buffer_array[0] = stack_buffer;\n  masked_value = *(ushort *)(binary_data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  zero = 0;\n  buffer = buffer_array[0];\n  print_result = formatted_print(output_stream,buffer_array);\n  if ((-1 < print_result) && (flush_result = flush(output_stream,buffer_array), flush_result != 0)) {\n    print_result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(binary_data + 0xc) = *(ushort *)(binary_data + 0xc) | 0x40;\n  }\n  return print_result;\n}\n\n",
            "current_name": "print_and_flush_0008378c",
            "entrypoint": "0x0008378c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008378c": "print_and_flush_0008378c",
                "_fflush_r": "flush",
                "_vfiprintf_r": "formatted_print",
                "auStack_420": "stack_buffer",
                "iVar1": "print_result",
                "iVar2": "flush_result",
                "local_424": "temp_buffer",
                "local_464": "value2",
                "local_46c": "pointer_offset",
                "local_470": "zero",
                "local_474": "buffer_size2",
                "local_478": "buffer",
                "local_47a": "short_value",
                "local_47c": "masked_value",
                "local_480": "buffer_size",
                "local_488": "buffer_array",
                "param_1": "output_stream",
                "param_2": "binary_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083808": {
            "additional_data": {
                "*(ushort *)(param_2 + 3)": {
                    "1": "flag_value"
                },
                "*param_1": {
                    "1": "output_pointer"
                },
                "*param_2": {
                    "1": "input_array"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "FUN_00083808": {
                    "1": "perform_operation",
                    "2": "process_function",
                    "4": "process_data",
                    "7": "initialize_buffer"
                },
                "FUN_00083b14": {
                    "1": "reset_buffer",
                    "2": "sub_function_3"
                },
                "FUN_00083d9c": {
                    "1": "subfunction_2",
                    "2": "sub_function_2"
                },
                "FUN_000842a4": {
                    "1": "subfunction_1",
                    "2": "sub_function_1"
                },
                "__sinit": {
                    "1": "__initialize",
                    "6": "initialize"
                },
                "__smakebuf_r": {
                    "1": "__make_buffer",
                    "2": "create_buffer",
                    "4": "make_buffer"
                },
                "_free_r": {
                    "1": "free_resources",
                    "4": "free_memory"
                },
                "iVar1": {
                    "1": "condition_result",
                    "11": "temp_var1",
                    "2": "flag",
                    "3": "value1"
                },
                "iVar2": {
                    "1": "temp_variable2",
                    "11": "temp_var2",
                    "3": "value2",
                    "4": "value"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "buffer",
                    "4": "output_status",
                    "6": "output",
                    "9": "result"
                },
                "param_1[0]": {
                    "1": "var3"
                },
                "param_2": {
                    "1": "input_param",
                    "4": "data",
                    "5": "input_data",
                    "6": "input"
                },
                "param_2 + 0x10": {
                    "1": "var5"
                },
                "param_2[0]": {
                    "1": "var6"
                },
                "param_2[0xc]": {
                    "1": "var4"
                },
                "param_2[1]": {
                    "1": "var7"
                },
                "param_2[4]": {
                    "1": "var2"
                },
                "param_2[5]": {
                    "1": "var8"
                },
                "param_2[6]": {
                    "1": "var9"
                },
                "r_offset": {
                    "1": "offset"
                },
                "uVar3": {
                    "1": "u_var_1",
                    "2": "shifted_value",
                    "6": "temp_var3"
                },
                "uVar4": {
                    "1": "u_var_temp2",
                    "2": "temp",
                    "6": "temp_var4"
                }
            },
            "called": [
                "FUN_000842a4",
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_00082b38"
            ],
            "code": "\nundefined4 initialize_buffer_00083808(undefined4 *result,int *input)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((rel_array[140].offset != 0) &&\n     (*(int *)(rel_array[140].offset + 0x38) == 0)) {\n    initialize();\n  }\n  temp_var4 = *(ushort *)(input + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = var2;\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(input + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)var4 != (int *)0x0) {\n        if ((int *)var4 != input + 0x10) {\n          free_memory(result);\n          temp_var4 = *(ushort *)(input + 3);\n        }\n        var4 = 0;\n      }\n      temp_var2 = var2;\n      temp_var4 = temp_var4 & 0xffdb;\n      *input = temp_var2;\n      var7 = 0;\n    }\n    else {\n      temp_var2 = var2;\n    }\n    *(ushort *)(input + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    make_buffer(result,input);\n    temp_var3 = (uint)*(ushort *)(input + 3);\n    temp_var2 = var2;\n  }\n  if ((temp_var3 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = var8;\n    }\n    input[2] = temp_var1;\n  }\n  else {\n    var9 = -var8;\n    input[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_buffer_00083808",
            "entrypoint": "0x00083808",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083808": "initialize_buffer_00083808",
                "__sinit": "initialize",
                "__smakebuf_r": "make_buffer",
                "_free_r": "free_memory",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "param_1": "result",
                "param_2": "input",
                "param_2[0xc]": "var4",
                "param_2[1]": "var7",
                "param_2[4]": "var2",
                "param_2[5]": "var8",
                "param_2[6]": "var9",
                "r_offset": "offset",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083974": {
            "additional_data": {
                "<unnamed_variable_1>": {
                    "1": "unused_var1"
                },
                "<unnamed_variable_2>": {
                    "1": "unused_var2"
                },
                "<unnamed_variable_3>": {
                    "1": "unused_var3"
                },
                "FUN_00081df4": {
                    "1": "helper_function",
                    "2": "perform_operation"
                },
                "FUN_00083974": {
                    "1": "copy_function",
                    "12": "identity_function",
                    "2": "copy_parameter_value",
                    "3": "copy_param",
                    "4": "copy_parameter"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input",
                    "2": "value_to_copy",
                    "3": "value",
                    "7": "input_value"
                },
                "undefined4": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_00081df4"
            ],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nvoid identity_function_00083974(void input)\n\n{\n  return input;\n}\n\n",
            "current_name": "identity_function_00083974",
            "entrypoint": "0x00083974",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083adc": {
            "additional_data": {
                "FUN_00083adc": {
                    "1": "extract_and_process_data",
                    "2": "decode_and_process_data",
                    "3": "decompress_data",
                    "6": "process_data"
                },
                "LAB_00083a54": {
                    "1": "loop_label"
                },
                "iVar": {
                    "1": "temp_variable"
                },
                "iVar2": {
                    "1": "offset",
                    "2": "var1",
                    "3": "index",
                    "4": "temp_var1"
                },
                "iVar5": {
                    "1": "temp4",
                    "2": "temp_var4",
                    "3": "int_var5"
                },
                "iVar7": {
                    "1": "temp3",
                    "2": "temp_var5",
                    "3": "temp_var"
                },
                "param_1": {
                    "1": "array_param",
                    "16": "input_array",
                    "2": "array1",
                    "3": "data_ptr"
                },
                "param_2": {
                    "1": "output_buffer",
                    "14": "output_array",
                    "2": "array2",
                    "3": "info_ptr"
                },
                "pcVar": {
                    "1": "function_pointer"
                },
                "pcVar6": {
                    "1": "function",
                    "10": "function_pointer",
                    "2": "callback_function",
                    "3": "callback_func",
                    "9": "function_ptr"
                },
                "piVar": {
                    "1": "temp_ptr"
                },
                "piVar1": {
                    "1": "param",
                    "2": "ptr_var1",
                    "3": "ptr1",
                    "7": "temp_ptr"
                },
                "uVar": {
                    "1": "temp_unsigned_variable"
                },
                "uVar3": {
                    "1": "var2",
                    "2": "temp_ushort",
                    "7": "flags"
                },
                "uVar4": {
                    "1": "temp3",
                    "2": "temp_var",
                    "3": "temp"
                },
                "unaff_4": {
                    "1": "return_value"
                },
                "unaff_r4": {
                    "1": "unaff_param",
                    "2": "return_val",
                    "3": "unaff_r4",
                    "7": "result"
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_0008378c",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "code": "\nundefined4 process_data_00083adc(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int temp_var1;\n  ushort flags;\n  uint temp;\n  int int_var5;\n  code *function_pointer;\n  undefined4 return_value;\n  int temp_var2;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var2 = output_array[4];\n    if (temp_var2 == 0) {\n      return 0;\n    }\n    temp_var1 = *output_array;\n    if ((flags & 3) == 0) {\n      int_var5 = output_array[5];\n    }\n    else {\n      int_var5 = 0;\n    }\n    *output_array = temp_var2;\n    temp_var1 = temp_var1 - temp_var2;\n    output_array[2] = int_var5;\n    do {\n      if (temp_var1 < 1) {\n        return 0;\n      }\n      int_var5 = (*(code *)output_array[9])(input_array,output_array[7],temp_var2,temp_var1,return_value);\n      temp_var1 = temp_var1 - int_var5;\n      temp_var2 = temp_var2 + int_var5;\n    } while (0 < int_var5);\nloop_label:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flags | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_pointer = (code *)output_array[10];\n  if (function_pointer == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp_var2 = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var1 = (*function_pointer)(input_array,output_array[7],temp & 0x1000,1);\n    if ((temp_var1 == -1) && (int_var5 = *input_array, int_var5 != 0)) {\n      if ((int_var5 == 0x1d) || (int_var5 == 0x16)) {\n        *input_array = temp_var2;\n        return 0;\n      }\n      goto loop_label;\n    }\n    temp = (uint)*(ushort *)(output_array + 3);\n    function_pointer = (code *)output_array[10];\n  }\n  else {\n    temp_var1 = output_array[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (temp_var1 = temp_var1 - output_array[1], output_array[0xc] != 0)) {\n    temp_var1 = temp_var1 - output_array[0xf];\n  }\n  temp_var1 = (*function_pointer)(input_array,output_array[7],temp_var1,0);\n  if (temp_var1 == -1) {\n    int_var5 = *input_array;\n    if (int_var5 != 0) {\n      if ((int_var5 != 0x1d) && (int_var5 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flags;\n    *output_array = output_array[4];\n  }\n  else {\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flags;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_array[0x14] = temp_var1;\n  }\nLAB_00083a00:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = temp_var2;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    _free_r(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "process_data_00083adc",
            "entrypoint": "0x00083adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "LAB_00083a54": "loop_label",
                "iVar": "temp_variable",
                "iVar2": "temp_var1",
                "iVar5": "int_var5",
                "iVar7": "temp_var2",
                "param_1": "input_array",
                "param_2": "output_array",
                "pcVar": "function_pointer",
                "pcVar6": "function_pointer",
                "piVar": "temp_ptr",
                "piVar1": "temp_ptr",
                "uVar": "temp_unsigned_variable",
                "uVar3": "flags",
                "uVar4": "temp",
                "unaff_r4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b14": {
            "additional_data": {
                "*(undefined2 *)((int)array1Ptr + 0x17)": {
                    "1": "array1_value8"
                },
                "*(undefined2 *)((int)array1Ptr + 0xe)": {
                    "1": "array1_value4"
                },
                "*(undefined2 *)((int)array2 + 0x17)": {
                    "1": "array2_value5"
                },
                "*(undefined2 *)((int)array2 + 0xe)": {
                    "1": "array2_value3"
                },
                "*(undefined2 *)((int)dataStructures + 0x12)": {
                    "1": "array1_value6"
                },
                "*(undefined2 *)((int)dataStructures + 0x17)": {
                    "1": "array1_value10"
                },
                "*(undefined2 *)((int)dataStructures + 0xe)": {
                    "1": "array1_value5"
                },
                "*(undefined2 *)(array1Ptr + 0x12)": {
                    "1": "array1_value3"
                },
                "*(undefined2 *)(array1Ptr + 0x17)": {
                    "1": "array1_value7"
                },
                "*(undefined2 *)(array1Ptr + 0xe)": {
                    "1": "array1_value1"
                },
                "*(undefined2 *)(array2 + 0x12)": {
                    "1": "array2_value2"
                },
                "*(undefined2 *)(array2 + 0x17)": {
                    "1": "array2_value4"
                },
                "*(undefined2 *)(array2 + 0xe)": {
                    "1": "array2_value1"
                },
                "*(undefined2 *)(dataStructures + 0x17)": {
                    "1": "array1_value9"
                },
                "*(undefined2 *)(dataStructures + 0xc)": {
                    "1": "array1_value2"
                },
                "FUN_00083b14": {
                    "1": "initialize_function",
                    "18": "initialize_data_structures",
                    "2": "initialize_parameters",
                    "3": "initialize_data"
                },
                "dataStructures + 0x2e0": {
                    "1": "value3"
                },
                "dataStructures + 0x2e4": {
                    "1": "value1"
                },
                "dataStructures + 0x2e8": {
                    "1": "value2"
                },
                "dataStructures + 0x38": {
                    "1": "flag"
                },
                "dataStructures + 0x3c": {
                    "1": "label_ptr"
                },
                "dataStructures + 4": {
                    "1": "array1_ptr"
                },
                "memset": {
                    "1": "clear_memory"
                },
                "param_1": {
                    "1": "data_pointer",
                    "2": "data_structure_ptr",
                    "3": "param",
                    "4": "data_struct_ptr"
                },
                "puVar1": {
                    "1": "data_structure1",
                    "2": "array1",
                    "3": "pointer1",
                    "8": "ptr1"
                },
                "puVar2": {
                    "1": "variable2",
                    "2": "data_struct_ptr2",
                    "3": "pointer2",
                    "8": "ptr2"
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_000844c4",
                "FUN_00082b38",
                "FUN_00083808"
            ],
            "code": "\nvoid initialize_data_structures_00083b14(int data_structures)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data_structures + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data_structures + 4);\n    *(undefined **)(data_structures + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(data_structures + 0x2e4) = 3;\n    *(int *)(data_structures + 0x2e8) = data_structures + 0x2ec;\n    *(undefined4 *)(data_structures + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    clear_memory(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data_structures + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    clear_memory(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data_structures + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    clear_memory(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(data_structures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083b14",
            "entrypoint": "0x00083b14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "memset": "clear_memory",
                "param_1": "data_structures",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083c08": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c08",
            "entrypoint": "0x00083c08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c0c": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c0c",
            "entrypoint": "0x00083c0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c40": {
            "additional_data": {
                "FUN_00083c40": {
                    "1": "print_utf8_chars",
                    "2": "print_string",
                    "3": "convert_and_print",
                    "6": "convert_and_write_to_stream"
                },
                "__locale_mb_cur_max": {
                    "1": "get_max_bytes_per_character"
                },
                "__swbuf_r": {
                    "1": "write_character_to_stream"
                },
                "_wcrtomb_r": {
                    "1": "convert_character_to_buffer"
                },
                "abStack_1b": {
                    "1": "special_chars",
                    "2": "additional_bytes",
                    "3": "temp_array",
                    "5": "conversion_buffer"
                },
                "iVar1": {
                    "1": "max_cur",
                    "16": "max_bytes",
                    "2": "mb_max",
                    "3": "locale_max"
                },
                "local_1c": {
                    "1": "mb_char",
                    "2": "char_to_convert",
                    "3": "temp_byte",
                    "5": "converted_byte"
                },
                "param_1": {
                    "1": "flags",
                    "2": "param",
                    "6": "locale",
                    "8": "stream"
                },
                "param_2": {
                    "1": "num_chars",
                    "2": "size",
                    "4": "length",
                    "6": "value"
                },
                "param_3": {
                    "1": "string_ptr",
                    "2": "stream_buffer",
                    "3": "string",
                    "6": "output_buffer",
                    "7": "buffer"
                },
                "pbVar4": {
                    "1": "stream_ptr",
                    "2": "ptr",
                    "3": "buffer",
                    "4": "current_byte",
                    "5": "buffer_ptr"
                },
                "uVar2": {
                    "1": "encountered_error",
                    "17": "result",
                    "2": "result_code",
                    "3": "conversion_result",
                    "6": "bytes_written"
                },
                "uVar3": {
                    "1": "byte_to_write",
                    "2": "char_value",
                    "3": "current_char",
                    "4": "converted_byte",
                    "6": "converted_value",
                    "7": "converted_char"
                },
                "uVar5": {
                    "1": "char_index",
                    "18": "index",
                    "2": "iteration_count",
                    "3": "counter"
                }
            },
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nuint convert_and_write_to_stream_00083c40(undefined4 stream,uint value,byte **buffer)\n\n{\n  int max_bytes;\n  uint result;\n  uint converted_char;\n  byte *buffer_ptr;\n  uint index;\n  byte converted_byte;\n  byte conversion_buffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  max_bytes = get_max_bytes_per_character();\n  if ((max_bytes == 1) && (value - 1 < 0xff)) {\n    converted_char = value & 0xff;\n    converted_byte = (byte)converted_char;\n    result = 1;\n  }\n  else {\n    result = convert_character_to_buffer(stream,&converted_byte,value,buffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return value;\n    }\n    converted_char = (uint)converted_byte;\n  }\n  index = 0;\n  do {\n    buffer_ptr = buffer[2] + -1;\n    buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)buffer[6] <= (int)buffer_ptr) {\n        **buffer = (byte)converted_char;\n        buffer_ptr = *buffer;\n        converted_char = (uint)*buffer_ptr;\n        if (converted_char != 10) goto LAB_00083c90;\n      }\n      max_bytes = write_character_to_stream(stream,converted_char,buffer);\n      if (max_bytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)converted_char;\n      buffer_ptr = *buffer;\nLAB_00083c90:\n      *buffer = buffer_ptr + 1;\n    }\n    if (result <= index + 1) {\n      return value;\n    }\n    converted_char = (uint)conversion_buffer[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "convert_and_write_to_stream_00083c40",
            "entrypoint": "0x00083c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083c40": "convert_and_write_to_stream_00083c40",
                "__locale_mb_cur_max": "get_max_bytes_per_character",
                "__swbuf_r": "write_character_to_stream",
                "_wcrtomb_r": "convert_character_to_buffer",
                "abStack_1b": "conversion_buffer",
                "iVar1": "max_bytes",
                "local_1c": "converted_byte",
                "param_1": "stream",
                "param_2": "value",
                "param_3": "buffer",
                "pbVar4": "buffer_ptr",
                "uVar2": "result",
                "uVar3": "converted_char",
                "uVar5": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d00": {
            "additional_data": {
                "(Elf32_Rel_ARRAY_20070000[141].r_info + 4)": {
                    "1": "rel_table_entry_141_address"
                },
                "*(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4)": {
                    "1": "rel_table_entry_141_value"
                },
                "DAT_20071194": {
                    "1": "data_offset",
                    "2": "total_allocated_memory",
                    "3": "total_memory",
                    "5": "allocated_memory"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "dynamic_array",
                    "5": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "rel_table_entry_141"
                },
                "Elf32_Rel_ARRAY_20070000[270].r_offset": {
                    "1": "rel_table_offset_270"
                },
                "FUNC_00082598": {
                    "1": "lock_heap"
                },
                "FUNC_0008259c": {
                    "1": "unlock_heap"
                },
                "FUN_00082598": {
                    "1": "lock_memory"
                },
                "FUN_0008259c": {
                    "1": "unlock_memory"
                },
                "FUN_00082970": {
                    "1": "update_pointer"
                },
                "FUN_00083d00": {
                    "1": "improved_alloc",
                    "19": "allocate_memory",
                    "2": "manage_memory"
                },
                "__malloc_lock": {
                    "2": "acquire_lock",
                    "4": "lock_memory"
                },
                "__malloc_unlock": {
                    "2": "release_lock",
                    "4": "unlock_memory"
                },
                "_sbrk_r": {
                    "1": "change_brk_address",
                    "3": "allocate_memory",
                    "4": "request_memory"
                },
                "_sbrk_r(param_1,-iVar3)": {
                    "1": "decrease_memory_break"
                },
                "_sbrk_r(param_1,0)": {
                    "1": "get_current_memory_break"
                },
                "dword": {
                    "1": "allocated_memory_ref"
                },
                "iVar1": {
                    "1": "new_offset",
                    "2": "current_address",
                    "3": "allocation_result",
                    "5": "brk_result",
                    "9": "sbrk_result"
                },
                "iVar3": {
                    "1": "new_memory",
                    "11": "adjusted_size",
                    "2": "new_size",
                    "3": "alignment",
                    "4": "new_offset"
                },
                "param_1": {
                    "1": "mem_lock_param",
                    "11": "lock",
                    "2": "lock_param",
                    "3": "param_size",
                    "4": "param",
                    "5": "size"
                },
                "param_2": {
                    "1": "existing_memory",
                    "15": "size",
                    "2": "requested_size",
                    "3": "alignment"
                },
                "uVar2": {
                    "1": "r_info_offset",
                    "13": "rel_info",
                    "3": "mask"
                }
            },
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "calling": [
                "FUN_00083d9c"
            ],
            "code": "\nundefined4 allocate_memory_00083d00(undefined4 lock,int size)\n\n{\n  int sbrk_result;\n  uint rel_info;\n  int adjusted_size;\n  \n  lock_memory();\n  rel_info = *(uint *)(rel_table_entry_141 + 4) & 0xfffffffc;\n  adjusted_size = ((rel_info - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_size) {\n    sbrk_result = get_current_memory_break;\n    if (sbrk_result == rel_table_entry_141 + rel_info) {\n      sbrk_result = decrease_memory_break;\n      if (sbrk_result != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_size;\n        *(uint *)(rel_table_entry_141 + 4) = rel_info - adjusted_size | 1;\n        unlock_memory(lock);\n        return 1;\n      }\n      adjusted_size = get_current_memory_break;\n      if (0xf < (int)(adjusted_size - rel_table_entry_141)) {\n        DAT_20071194 = adjusted_size - rel_table_offset_270;\n        *(pointer_size *)(rel_table_entry_141 + 4) =\n             adjusted_size - rel_table_entry_141 | 1;\n      }\n    }\n  }\n  unlock_memory(lock);\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_00083d00",
            "entrypoint": "0x00083d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "rel_table_entry_141",
                "Elf32_Rel_ARRAY_20070000[270].r_offset": "rel_table_offset_270",
                "FUN_00083d00": "allocate_memory_00083d00",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_sbrk_r": "sbrk",
                "_sbrk_r(param_1,-iVar3)": "decrease_memory_break",
                "_sbrk_r(param_1,0)": "get_current_memory_break",
                "dword": "pointer_size",
                "iVar1": "sbrk_result",
                "iVar3": "adjusted_size",
                "param_1": "lock",
                "param_2": "size",
                "uVar2": "rel_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "additional_data": {
                "DAT_20071190": {
                    "1": "trim_threshold"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocation_array"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "some_data1"
                },
                "Elf32_Rel_ARRAY_20070000[142].r_info": {
                    "1": "some_data3"
                },
                "Elf32_Rel_ARRAY_20070000[143].r_offset": {
                    "1": "some_data4"
                },
                "Elf32_Rel_ARRAY_20070000[269].r_info": {
                    "1": "some_data2"
                },
                "FUN_00083d9c": {
                    "1": "update_relocation_table"
                },
                "LAB_00083e30": {
                    "1": "exit_label"
                },
                "__malloc_lock": {
                    "1": "lock_memory_allocation"
                },
                "_malloc_trim_r": {
                    "1": "trim_memory_allocation"
                },
                "bVar2": {
                    "1": "is_match",
                    "2": "is_var2",
                    "3": "is_condition_true",
                    "4": "is_true",
                    "7": "flag"
                },
                "dVar4": {
                    "1": "first_dword_variable",
                    "2": "offset",
                    "3": "var2",
                    "4": "temp_var2"
                },
                "dVar7": {
                    "1": "new_variable_7",
                    "2": "temp_var4",
                    "3": "var4"
                },
                "dVar9": {
                    "1": "pointer3",
                    "2": "temp_var6",
                    "3": "var6"
                },
                "iVar1": {
                    "1": "counter",
                    "2": "offset",
                    "3": "temp1",
                    "8": "index1"
                },
                "iVar5": {
                    "1": "value",
                    "2": "temp_var",
                    "3": "temp2",
                    "8": "index2"
                },
                "param_1": {
                    "1": "mutex",
                    "5": "param",
                    "8": "lock"
                },
                "param_2": {
                    "1": "relocation_entry",
                    "2": "address",
                    "4": "data",
                    "8": "param2"
                },
                "uVar3": {
                    "1": "offset",
                    "2": "flags",
                    "3": "var1",
                    "4": "value1"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "size",
                    "3": "offset",
                    "4": "value2"
                },
                "uVar8": {
                    "1": "new_size",
                    "2": "new_value",
                    "3": "var5",
                    "4": "value3"
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "calling": [
                "FUN_00081e04",
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00081e14"
            ],
            "code": "\nvoid update_relocation_entry_00083d9c(undefined4 lock,int param2)\n\n{\n  int index1;\n  bool flag;\n  uint value1;\n  dword temp_var2;\n  int index2;\n  uint value2;\n  dword var4;\n  uint value3;\n  dword var6;\n  \n  if (param2 == 0) {\n    return;\n  }\n  lock_memory_allocation();\n  value1 = *(uint *)(param2 + -4);\n  var4 = param2 - 8;\n  value2 = value1 & 0xfffffffe;\n  temp_var2 = var4 + value2;\n  value3 = *(uint *)(temp_var2 + 4) & 0xfffffffc;\n  if (some_data1 == temp_var2) {\n    value3 = value3 + value2;\n    if (-1 < (int)(value1 << 0x1f)) {\n      var4 = var4 - *(int *)(param2 + -8);\n      index2 = *(int *)(var4 + 0xc);\n      index1 = *(int *)(var4 + 8);\n      value3 = value3 + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    temp_var2 = some_data2;\n    *(uint *)(var4 + 4) = value3 | 1;\n    some_data1 = var4;\n    if (temp_var2 <= value3) {\n      trim_memory_allocation(lock,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(temp_var2 + 4) = value3;\n    if ((value1 & 1) == 0) {\n      var4 = var4 - *(int *)(param2 + -8);\n      index1 = *(int *)(var4 + 8);\n      value2 = value2 + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        index2 = *(int *)(var4 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(temp_var2 + value3 + 4) << 0x1f) {\n      value2 = value2 + value3;\n      index1 = *(int *)(temp_var2 + 8);\n      if ((!flag) && (index1 == 0x2007046c)) {\n        some_data3 = var4;\n        some_data4 = var4;\n        *(undefined4 *)(var4 + 0xc) = 0x2007046c;\n        *(undefined4 *)(var4 + 8) = 0x2007046c;\n        *(uint *)(var4 + 4) = value2 | 1;\n        *(uint *)(var4 + value2) = value2;\n        goto exit_label;\n      }\n      index2 = *(int *)(temp_var2 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(var4 + 4) = value2 | 1;\n    *(uint *)(var4 + value2) = value2;\n    if (!flag) {\n      if (value2 < 0x200) {\n        value1 = value2 & 0xfffffff8;\n        index1 = *(int *)((int)&elf_relocation_array[0x8d].r_info + value1);\n        elf_relocation_array[141].r_offset =\n             elf_relocation_array[141].r_offset | 1 << ((int)(value2 >> 3) >> 2 & 0xffU);\n        *(int *)(var4 + 8) = index1;\n        *(uint *)(var4 + 0xc) = value1 + 0x20070464;\n        *(dword *)((int)&elf_relocation_array[0x8d].r_info + value1) = var4;\n        *(dword *)(index1 + 0xc) = var4;\n        __malloc_unlock(lock);\n        return;\n      }\n      value1 = value2 >> 9;\n      if (value1 < 5) {\n        index1 = (value2 >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x15) {\n        index1 = value1 + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x55) {\n        index1 = (value2 >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x155) {\n        index1 = (value2 >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x555) {\n        index1 = (value2 >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      var6 = index2 * 4 + 0x20070464;\n      temp_var2 = (&elf_relocation_array[0x8d].r_info)[index2];\n      if (temp_var2 == var6) {\n        elf_relocation_array[141].r_offset =\n             elf_relocation_array[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        var6 = temp_var2;\n      }\n      else {\n        do {\n          if ((*(uint *)(temp_var2 + 4) & 0xfffffffc) <= value2) break;\n          temp_var2 = *(dword *)(temp_var2 + 8);\n        } while (var6 != temp_var2);\n        var6 = *(dword *)(temp_var2 + 0xc);\n      }\n      *(dword *)(var4 + 0xc) = var6;\n      *(dword *)(var4 + 8) = temp_var2;\n      *(dword *)(var6 + 8) = var4;\n      *(dword *)(temp_var2 + 0xc) = var4;\n    }\n  }\nexit_label:\n  __malloc_unlock(lock);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_00083d9c",
            "entrypoint": "0x00083d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "some_data1",
                "Elf32_Rel_ARRAY_20070000[142].r_info": "some_data3",
                "Elf32_Rel_ARRAY_20070000[143].r_offset": "some_data4",
                "Elf32_Rel_ARRAY_20070000[269].r_info": "some_data2",
                "FUN_00083d9c": "update_relocation_entry_00083d9c",
                "LAB_00083e30": "exit_label",
                "__malloc_lock": "lock_memory_allocation",
                "_malloc_trim_r": "trim_memory_allocation",
                "bVar2": "flag",
                "dVar4": "temp_var2",
                "dVar7": "var4",
                "dVar9": "var6",
                "iVar1": "index1",
                "iVar5": "index2",
                "param_1": "lock",
                "param_2": "param2",
                "uVar3": "value1",
                "uVar6": "value2",
                "uVar8": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083f34": {
            "additional_data": {
                "**param_3": {
                    "1": "output_data"
                },
                "FUN_00081e14": {
                    "1": "allocate_memory"
                },
                "FUN_0008234c": {
                    "1": "prepare_and_setup_buffer"
                },
                "FUN_00082438": {
                    "1": "prepare_and_setup_buffer"
                },
                "FUN_000825b0": {
                    "1": "flush_buffer"
                },
                "FUN_00083808": {
                    "1": "new_function2"
                },
                "FUN_00083adc": {
                    "1": "flush_buffer"
                },
                "FUN_00083d9c": {
                    "1": "set_error_code"
                },
                "FUN_00083f34": {
                    "1": "rearrange_data",
                    "2": "extract_data",
                    "5": "process_data"
                },
                "FUN_00084384": {
                    "1": "allocate_and_setup_memory"
                },
                "__swsetup_r": {
                    "1": "sw_setup",
                    "2": "setup_r"
                },
                "_fflush_r": {
                    "1": "fflush_function",
                    "2": "flush_stream"
                },
                "_free_r": {
                    "1": "free_mem",
                    "5": "free_memory"
                },
                "_malloc_r": {
                    "1": "malloc_function",
                    "5": "allocate_memory"
                },
                "_memchr_r": {
                    "1": "search_memory_r"
                },
                "_memcpy_r": {
                    "1": "copy_memory_r"
                },
                "_memmove_r": {
                    "1": "move_memory_r"
                },
                "_realloc_r": {
                    "1": "reallocate_memory_r",
                    "5": "reallocate_memory"
                },
                "_swsetup_r": {
                    "1": "setup_string_reverse"
                },
                "iVar1": {
                    "1": "index",
                    "15": "result",
                    "4": "status",
                    "8": "return_value"
                },
                "local_2c": {
                    "1": "local_var2c",
                    "2": "local_variable",
                    "3": "temp_var9",
                    "9": "local_var"
                },
                "memchr": {
                    "1": "search_memory",
                    "2": "find_character"
                },
                "memcpy": {
                    "1": "memcpy_function",
                    "5": "copy_memory"
                },
                "memmove": {
                    "1": "memmove_function",
                    "5": "move_memory"
                },
                "param_1": {
                    "1": "output_status",
                    "2": "output_buffer",
                    "3": "result",
                    "5": "error_code"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "input",
                    "3": "param2",
                    "4": "data"
                },
                "param_3": {
                    "1": "pointer_to_pointer_to_uint",
                    "2": "buffer",
                    "3": "param3"
                },
                "puVar6": {
                    "1": "var_pointer6",
                    "3": "pointer1",
                    "4": "ptr_var1",
                    "5": "pointer_var1",
                    "7": "ptr1"
                },
                "puVar7": {
                    "1": "temp_ptr_2",
                    "3": "pointer2",
                    "4": "ptr_var2",
                    "5": "pointer_var2",
                    "7": "ptr2"
                },
                "reverseAndImproveFunction": {
                    "1": "new_function"
                },
                "reverse_and_improve": {
                    "1": "new_function"
                },
                "reverse_and_improve_function": {
                    "1": "better_function"
                },
                "uVar10": {
                    "1": "temp_uint_6",
                    "2": "temp3",
                    "8": "temp_var7"
                },
                "uVar11": {
                    "1": "var8",
                    "2": "temp4",
                    "8": "temp_var8"
                },
                "uVar2": {
                    "1": "var2",
                    "12": "temp_var1",
                    "2": "temp1",
                    "3": "value1"
                },
                "uVar3": {
                    "1": "flag2",
                    "12": "temp_var2",
                    "2": "var2",
                    "3": "value2"
                },
                "uVar4": {
                    "1": "temp_ushort",
                    "2": "ushort_value",
                    "4": "flags",
                    "6": "flag",
                    "8": "temp_var3"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "size",
                    "8": "temp_var4"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "data_size",
                    "3": "length",
                    "8": "temp_var5"
                },
                "uVar9": {
                    "1": "new_size",
                    "2": "size",
                    "8": "temp_var6"
                }
            },
            "called": [
                "FUN_00082438",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_0008234c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nundefined4 process_data_00083f34(undefined4 *error_code,uint *data,uint **param3)\n\n{\n  int result;\n  uint temp_var1;\n  uint temp_var2;\n  ushort temp_var3;\n  uint temp_var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint local_var;\n  \n  if (param3[2] != (uint *)0x0) {\n    temp_var3 = *(ushort *)(data + 3);\n    temp_var4 = (uint)temp_var3;\n    if (((int)(temp_var4 << 0x1c) < 0) && (data[4] != 0)) {\n      ptr2 = *param3;\n    }\n    else {\n      result = setup_r(error_code,data);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      temp_var3 = *(ushort *)(data + 3);\n      temp_var4 = (uint)temp_var3;\n      ptr2 = *param3;\n    }\n    if ((temp_var3 & 2) == 0) {\n      temp_var1 = temp_var4 & 2;\n      temp_var7 = temp_var1;\n      temp_var5 = temp_var1;\n      local_var = temp_var1;\n      if ((temp_var4 & 1) == 0) {\n        temp_var1 = 0;\n        temp_var7 = 0;\n        while( true ) {\n          while (temp_var1 == 0) {\n            temp_var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp_var1 = *ptr1;\n          }\n          temp_var5 = data[2];\n          if ((int)(temp_var4 << 0x16) < 0) {\n            if (temp_var1 < temp_var5) {\n              temp_var4 = *data;\n              temp_var5 = temp_var1;\n            }\n            else if ((temp_var4 & 0x480) == 0) {\n              temp_var4 = *data;\n            }\n            else {\n              result = *data - data[4];\n              temp_var5 = result + 1 + temp_var1;\n              temp_var6 = (int)(data[5] * 3) / 2;\n              if (temp_var5 <= temp_var6) {\n                temp_var5 = temp_var6;\n              }\n              if ((int)(temp_var4 << 0x15) < 0) {\n                temp_var6 = allocate_memory(error_code,temp_var5);\n                if (temp_var6 == 0) {\n                  *error_code = 0xc;\n                  temp_var3 = *(ushort *)(data + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory(temp_var6,data[4],result);\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_var6 = reallocate_memory(error_code);\n                if (temp_var6 == 0) {\n                  free_memory(error_code,data[4]);\n                  temp_var3 = *(ushort *)(data + 3) & 0xff7f;\n                  *error_code = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp_var4 = temp_var6 + result;\n              data[4] = temp_var6;\n              data[5] = temp_var5;\n              *data = temp_var4;\n              data[2] = temp_var5 - result;\n              temp_var5 = temp_var1;\n            }\n            move_memory(temp_var4,temp_var7,temp_var5);\n            data[2] = data[2] - temp_var5;\n            *data = *data + temp_var5;\n            temp_var5 = temp_var1;\n          }\n          else if ((data[4] < *data) || (temp_var4 = data[5], temp_var1 < temp_var4)) {\n            if (temp_var1 < temp_var5) {\n              temp_var5 = temp_var1;\n            }\n            move_memory(*data,temp_var7,temp_var5);\n            temp_var4 = data[2];\n            data[2] = temp_var4 - temp_var5;\n            *data = *data + temp_var5;\n            if ((temp_var4 - temp_var5 == 0) && (result = flush_buffer(error_code,data), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            temp_var5 = 0x7fffffff;\n            if (temp_var1 < 0x7fffffff) {\n              temp_var5 = temp_var1;\n            }\n            temp_var5 = (*(code *)data[9])(error_code,data[7],temp_var7,(temp_var5 / temp_var4) * temp_var4);\n            if ((int)temp_var5 < 1) goto LAB_0008402e;\n          }\n          ptr1 = param3[2];\n          temp_var7 = temp_var7 + temp_var5;\n          temp_var1 = temp_var1 - temp_var5;\n          param3[2] = (uint *)((int)ptr1 - temp_var5);\n          if ((uint *)((int)ptr1 - temp_var5) == (uint *)0x0) break;\n          temp_var4 = (uint)*(ushort *)(data + 3);\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == 0) {\n            temp_var5 = *ptr2;\n            temp_var1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_character_in_memory(temp_var5,10,temp_var1);\n            if (result == 0) {\n              temp_var7 = temp_var1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp_var7 = (result + 1) - temp_var5;\n              local_var = 1;\n            }\n          }\n          temp_var6 = *data;\n          temp_var4 = temp_var7;\n          if (temp_var1 <= temp_var7) {\n            temp_var4 = temp_var1;\n          }\n          temp_var2 = data[5];\n          if ((data[4] < temp_var6) && (temp_var8 = data[2] + temp_var2, (int)temp_var8 < (int)temp_var4)) {\n            move_memory(temp_var6,temp_var5,temp_var8);\n            *data = *data + temp_var8;\n            result = flush_buffer(error_code,data);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp_var4 < (int)temp_var2) {\n            move_memory(temp_var6,temp_var5,temp_var4);\n            data[2] = data[2] - temp_var4;\n            *data = temp_var4 + *data;\n            temp_var8 = temp_var4;\n          }\n          else {\n            temp_var8 = (*(code *)data[9])(error_code,data[7],temp_var5,temp_var2);\n            if ((int)temp_var8 < 1) goto LAB_0008402e;\n          }\n          temp_var7 = temp_var7 - temp_var8;\n          if (temp_var7 == 0) {\n            result = flush_buffer(error_code,data);\n            if (result != 0) goto LAB_0008402e;\n            local_var = 0;\n          }\n          ptr1 = param3[2];\n          temp_var5 = temp_var5 + temp_var8;\n          temp_var1 = temp_var1 - temp_var8;\n          param3[2] = (uint *)((int)ptr1 - temp_var8);\n        } while ((uint *)((int)ptr1 - temp_var8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp_var1 = 0;\n      temp_var4 = 0;\n      do {\n        while( true ) {\n          temp_var7 = temp_var4;\n          if (0x7ffffbff < temp_var4) {\n            temp_var7 = 0x7ffffc00;\n          }\n          if (temp_var4 != 0) break;\n          temp_var1 = *ptr2;\n          temp_var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)data[9])(error_code,data[7],temp_var1,temp_var7);\n        if (result < 1) {\nLAB_0008402e:\n          temp_var3 = *(ushort *)(data + 3);\nLAB_00084030:\n          *(ushort *)(data + 3) = temp_var3 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = param3[2];\n        temp_var1 = temp_var1 + result;\n        temp_var4 = temp_var4 - result;\n        param3[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00083f34",
            "entrypoint": "0x00083f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "__swsetup_r": "setup_r",
                "_fflush_r": "flush_buffer",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "_swsetup_r": "setup_string_reverse",
                "iVar1": "result",
                "local_2c": "local_var",
                "memchr": "find_character_in_memory",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "error_code",
                "param_2": "data",
                "param_3": "param3",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar10": "temp_var7",
                "uVar11": "temp_var8",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084290": {
            "additional_data": {
                "0x20070874": {
                    "7": "memory_address"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "DAT_00000004": {
                    "1": "result"
                },
                "FUN_00084290": {
                    "1": "get_solution",
                    "2": "get_return_value",
                    "22": "get_memory_address",
                    "4": "get_magic_number"
                },
                "FUN_00084290_00": {
                    "1": "result"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "PTR_00000000": {
                    "1": "result"
                },
                "PTR_00000004": {
                    "1": "input_data"
                },
                "PTR_00000008": {
                    "1": "base_address"
                },
                "PTR_FUN_00084290": {
                    "1": "memory_address"
                },
                "PTR_FUN_00084290_00": {
                    "1": "data_pointer"
                },
                "original_variable_name_1": {
                    "1": "return_value"
                },
                "return value": {
                    "1": "memory_address"
                },
                "returnvalue": {
                    "1": "return_value"
                },
                "undefined4": {
                    "1": "unsigned_int",
                    "13": "uint32_t",
                    "2": "uint32"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nuint32_t get_memory_address_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "current_name": "get_memory_address_00084290",
            "entrypoint": "0x00084290",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084298": {
            "additional_data": {
                ".r_info": {
                    "1": "relocation_info"
                },
                "274": {
                    "1": "index"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf32_rel_array",
                    "10": "relocation_array",
                    "3": "elf_relocation_array",
                    "4": "relocation_table",
                    "5": "elf_rel_array",
                    "6": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[274].r_info": {
                    "1": "relocation_info"
                },
                "FUN_00084298": {
                    "1": "get_r_info_from_elf32_rel_array",
                    "15": "get_relocation_info",
                    "2": "get_rel_r_info",
                    "3": "get_elf_relocation_info",
                    "4": "get_elf_rel_info"
                },
                "r_info": {
                    "1": "result",
                    "3": "rel_info"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\ndword get_relocation_info_00084298(void)\n\n{\n  return relocation_info;\n}\n\n",
            "current_name": "get_relocation_info_00084298",
            "entrypoint": "0x00084298",
            "imported": false,
            "improved": true,
            "renaming": {
                ".r_info": "relocation_info",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[274].r_info": "relocation_info",
                "FUN_00084298": "get_relocation_info_00084298",
                "r_info": "rel_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "*param_1": {
                    "1": "file_descriptor"
                },
                "*param_2": {
                    "1": "file_stat"
                },
                "FUN_00081e14": {
                    "1": "initialize_file_struct_fields"
                },
                "FUN_000842a4": {
                    "1": "handle_file_operations",
                    "2": "initialize_file_descriptor",
                    "5": "initialize_file"
                },
                "FUN_000846b4": {
                    "1": "set_file_struct_fields"
                },
                "FUN_000846dc": {
                    "1": "set_file_struct_fields"
                },
                "_fstat_r": {
                    "1": "get_file_info",
                    "2": "get_file_status"
                },
                "_isatty_r": {
                    "1": "check_terminal_status",
                    "2": "check_if_terminal"
                },
                "_malloc_r": {
                    "3": "allocate_memory"
                },
                "auStack_54": {
                    "1": "file_stats",
                    "12": "stat_buffer",
                    "2": "file_stat",
                    "3": "buffer"
                },
                "bVar5": {
                    "1": "is_flag_set",
                    "15": "is_regular_file",
                    "3": "is_terminal",
                    "5": "is_tty"
                },
                "iVar2": {
                    "1": "buffer_status",
                    "13": "file_status",
                    "2": "file_mode",
                    "8": "status"
                },
                "iVar3": {
                    "1": "memory_allocation_result",
                    "10": "allocation_result",
                    "2": "allocation_status",
                    "3": "result",
                    "5": "malloc_result",
                    "8": "allocated_memory"
                },
                "local_50": {
                    "1": "file_stat_info_status",
                    "11": "file_mode",
                    "2": "file_type",
                    "3": "stat_result",
                    "4": "file_permissions"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_file_descriptor",
                    "23": "file_descriptor"
                },
                "param_2": {
                    "1": "metadata",
                    "16": "file_info",
                    "2": "buffer"
                },
                "uVar1": {
                    "1": "permissions",
                    "2": "file_type",
                    "3": "file_permissions",
                    "4": "file_attributes"
                },
                "uVar4": {
                    "1": "file_attributes",
                    "2": "file_flags_copy",
                    "3": "temp_value",
                    "4": "temp",
                    "5": "temp_var"
                }
            },
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083808"
            ],
            "code": "\nvoid initialize_file_000842a4(int file_descriptor,int *file_info)\n\n{\n  ushort file_attributes;\n  int file_status;\n  int allocation_result;\n  uint temp_var;\n  bool is_regular_file;\n  undefined stat_buffer [4];\n  uint file_mode;\n  \n  file_attributes = *(ushort *)(file_info + 3);\n  temp_var = (uint)file_attributes;\n  if ((int)(temp_var << 0x1e) < 0) {\n    *file_info = (int)file_info + 0x43;\n    file_info[4] = (int)file_info + 0x43;\n    file_info[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)file_info + 0xe)) {\n    file_status = get_file_status(file_descriptor,(int)*(short *)((int)file_info + 0xe),stat_buffer);\n    if (-1 < file_status) {\n      is_regular_file = (file_mode & 0xf000) == 0x2000;\n      if (((file_mode & 0xf000) == 0x8000) && (file_info[10] == 0x8449d)) {\n        file_status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x400;\n        file_info[0x13] = 0x400;\n      }\n      else {\n        file_status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    file_attributes = *(ushort *)(file_info + 3);\n    temp_var = (uint)file_attributes;\n  }\n  *(ushort *)(file_info + 3) = file_attributes | 0x800;\n  if ((temp_var & 0x80) == 0) {\n    file_status = 0x400;\n  }\n  else {\n    file_status = 0x40;\n  }\n  is_regular_file = false;\nLAB_00084300:\n  allocation_result = allocate_memory(file_descriptor,file_status);\n  file_attributes = *(ushort *)(file_info + 3);\n  if (allocation_result == 0) {\n    if (-1 < (int)((uint)file_attributes << 0x16)) {\n      *(ushort *)(file_info + 3) = file_attributes | 2;\n      *file_info = (int)file_info + 0x43;\n      file_info[4] = (int)file_info + 0x43;\n      file_info[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(file_descriptor + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(file_info + 3) = file_attributes | 0x80;\n    *file_info = allocation_result;\n    file_info[4] = allocation_result;\n    file_info[5] = file_status;\n    if ((is_regular_file) && (file_status = check_if_terminal(file_descriptor,(int)*(short *)((int)file_info + 0xe)), file_status != 0)) {\n      *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_file_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "initialize_file_000842a4",
                "_fstat_r": "get_file_status",
                "_isatty_r": "check_if_terminal",
                "_malloc_r": "allocate_memory",
                "auStack_54": "stat_buffer",
                "bVar5": "is_regular_file",
                "iVar2": "file_status",
                "iVar3": "allocation_result",
                "local_50": "file_mode",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "uVar1": "file_attributes",
                "uVar4": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084384": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "find_first_occurrence"
                },
                "FUN_00084384": {
                    "1": "find_pattern",
                    "2": "find_char_in_buffer",
                    "3": "find_char_in_array",
                    "6": "find_character",
                    "8": "find_first_occurrence"
                },
                "LAB_000843b4": {
                    "1": "check_alignment"
                },
                "LAB_000843dc": {
                    "1": "character_not_found"
                },
                "bVar4": {
                    "1": "is_last",
                    "10": "found",
                    "2": "is_last_character",
                    "5": "is_last_element",
                    "8": "is_last_index"
                },
                "iVar2": {
                    "1": "counter",
                    "29": "index"
                },
                "param_1": {
                    "1": "input_data",
                    "11": "array",
                    "2": "string",
                    "4": "buffer",
                    "6": "input_array"
                },
                "param_2": {
                    "1": "pattern",
                    "11": "target",
                    "2": "target_value",
                    "6": "character",
                    "7": "target_char"
                },
                "param_3": {
                    "1": "array_size",
                    "11": "length",
                    "2": "buffer_size",
                    "5": "size",
                    "9": "array_length"
                },
                "puVar3": {
                    "1": "current_char_ptr",
                    "10": "ptr",
                    "2": "pointer",
                    "4": "current",
                    "8": "current_ptr"
                },
                "uVar1": {
                    "1": "encrypted_char",
                    "10": "temp",
                    "6": "result",
                    "9": "xor_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint length)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)array & 3) == 0) {\ncheck_alignment:\n    if (3 < length) {\n      ptr = array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto character_not_found;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\ncharacter_not_found:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto check_alignment;\n      if (length == 0) goto character_not_found;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "current_name": "find_first_occurrence_00084384",
            "entrypoint": "0x00084384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "LAB_000843b4": "check_alignment",
                "LAB_000843dc": "character_not_found",
                "bVar4": "found",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "puVar3": "ptr",
                "uVar1": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084464": {
            "additional_data": {
                "DAT_200711bc": {
                    "1": "error_flag",
                    "2": "error_code"
                },
                "FUN_000811cc": {
                    "1": "check_offset"
                },
                "FUN_00084464": {
                    "1": "write_to_file_with_offset",
                    "10": "write_data_to_file",
                    "12": "write_to_file",
                    "6": "write_data"
                },
                "FUN_00084700": {
                    "1": "seek_to_offset"
                },
                "_lseek_r": {
                    "1": "seek_to_end_of_file"
                },
                "iVar1": {
                    "1": "bytes_written",
                    "30": "write_result"
                },
                "in_lr": {
                    "1": "unused_register_lr",
                    "2": "unused_lr",
                    "3": "link_register"
                },
                "param_1": {
                    "1": "file_descriptor_ptr",
                    "29": "file_descriptor"
                },
                "param_2": {
                    "1": "data_offset",
                    "2": "file_info_ptr",
                    "3": "file_info",
                    "4": "header_address",
                    "8": "buffer_address"
                },
                "param_3": {
                    "11": "data",
                    "2": "data_pointer",
                    "3": "data_buffer",
                    "5": "data_address",
                    "8": "buffer"
                },
                "param_4": {
                    "14": "data_size",
                    "3": "data_length",
                    "8": "size"
                },
                "uVar2": {
                    "1": "buffer_data",
                    "3": "data_value",
                    "4": "flags"
                },
                "unaff_r4": {
                    "1": "unused_r4",
                    "2": "arg4"
                },
                "unaff_r5": {
                    "1": "unused_param",
                    "2": "unused_param_2"
                },
                "unaff_r6": {
                    "1": "unused_param",
                    "2": "unused_param_3"
                }
            },
            "called": [
                "FUN_00084700",
                "FUN_000811cc"
            ],
            "calling": [],
            "code": "\nvoid write_to_file_00084464(int *file_descriptor,int buffer_address,undefined4 data,undefined4 data_size)\n\n{\n  int write_result;\n  ushort header_value;\n  undefined4 unused_param_1;\n  undefined4 unused_param_2;\n  undefined4 unused_param_3;\n  undefined4 link_register;\n  \n  header_value = *(ushort *)(buffer_address + 0xc);\n  if ((int)((uint)header_value << 0x17) < 0) {\n    reposition_file_pointer(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n    header_value = *(ushort *)(buffer_address + 0xc);\n  }\n  *(ushort *)(buffer_address + 0xc) = header_value & 0xefff;\n  DAT_200711bc = 0;\n  write_result = _write((int)*(short *)(buffer_address + 0xe),data,data_size,data_size,unused_param_1,unused_param_2,unused_param_3,\n                 link_register);\n  if ((write_result == -1) && (DAT_200711bc != 0)) {\n    *file_descriptor = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "write_to_file_00084464",
            "entrypoint": "0x00084464",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084464": "write_to_file_00084464",
                "_lseek_r": "reposition_file_pointer",
                "iVar1": "write_result",
                "in_lr": "link_register",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data",
                "param_4": "data_size",
                "uVar2": "header_value",
                "unaff_r4": "unused_param_1",
                "unaff_r5": "unused_param_2",
                "unaff_r6": "unused_param_3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008449c": {
            "additional_data": {
                "FUN_0008449c": {
                    "1": "update_file_access_state",
                    "2": "update_file_position",
                    "4": "update_file_offset",
                    "7": "seek_and_set_flag"
                },
                "FUN_00084700": {
                    "1": "helper_function"
                },
                "iVar1": {
                    "1": "lseek_result",
                    "29": "seek_result"
                },
                "param_1": {
                    "1": "file_handle",
                    "28": "file_descriptor"
                },
                "param_2": {
                    "1": "data_struct_addr",
                    "2": "data_ptr",
                    "3": "buffer_address",
                    "5": "buffer",
                    "6": "struct_address"
                },
                "uVar2": {
                    "1": "access_state",
                    "2": "updated_flags",
                    "3": "flag_value",
                    "4": "updated_flag",
                    "8": "flag"
                }
            },
            "called": [
                "FUN_00084700"
            ],
            "calling": [],
            "code": "\nvoid seek_and_set_flag_0008449c(undefined4 file_descriptor,int struct_address)\n\n{\n  int seek_result;\n  ushort flag;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(struct_address + 0xe));\n  if (seek_result == -1) {\n    flag = *(ushort *)(struct_address + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(struct_address + 0xc) | 0x1000;\n  }\n  if (seek_result != -1) {\n    *(int *)(struct_address + 0x50) = seek_result;\n  }\n  *(ushort *)(struct_address + 0xc) = flag;\n  return;\n}\n\n",
            "current_name": "seek_and_set_flag_0008449c",
            "entrypoint": "0x0008449c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008449c": "seek_and_set_flag_0008449c",
                "iVar1": "seek_result",
                "param_1": "file_descriptor",
                "param_2": "struct_address",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844c4": {
            "additional_data": {
                "FUN_000844c4": {
                    "1": "write_char_to_stream",
                    "3": "process_data",
                    "4": "write_to_stream",
                    "6": "write_to_file",
                    "9": "process_input"
                },
                "__sinit": {
                    "1": "init_file",
                    "3": "initialize",
                    "5": "initialize_stream"
                },
                "__swsetup_r": {
                    "1": "setup_file",
                    "2": "setup_read",
                    "5": "setup_stream"
                },
                "_fflush_r": {
                    "1": "flush_file",
                    "3": "flush_buffer",
                    "4": "flush_stream"
                },
                "iVar4": {
                    "1": "int_var",
                    "2": "counter",
                    "3": "temp_variable",
                    "4": "index",
                    "6": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "file_handle",
                    "3": "input_data",
                    "6": "file_descriptor",
                    "7": "input_ptr"
                },
                "param_2": {
                    "1": "param",
                    "14": "character",
                    "2": "input_size",
                    "5": "data"
                },
                "param_3": {
                    "1": "array_param",
                    "15": "buffer",
                    "2": "output_buffer",
                    "5": "stream"
                },
                "param_4": {
                    "1": "stream_param",
                    "2": "mode",
                    "4": "param",
                    "6": "buffer_size",
                    "8": "size"
                },
                "puVar3": {
                    "1": "temp_ptr",
                    "2": "ptr",
                    "3": "stream_ptr",
                    "5": "buffer_ptr"
                },
                "uVar1": {
                    "1": "stream_length",
                    "2": "buffer_size",
                    "3": "short_value",
                    "5": "buffer_length"
                },
                "uVar2": {
                    "1": "current_value",
                    "2": "buffer_length_uint"
                }
            },
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nuint process_input_000844c4(int input_ptr,uint character,undefined4 *buffer,undefined4 size)\n\n{\n  ushort flags;\n  uint flags_uint;\n  undefined *buffer_ptr;\n  int result;\n  \n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x38) == 0)) {\n    initialize_stream();\n  }\n  flags = *(ushort *)(buffer + 3);\n  flags_uint = (uint)flags;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(flags_uint << 0x1c)) || (result = buffer[4], result == 0)) {\n    result = setup_stream(input_ptr,buffer,flags,flags_uint,size);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    flags = *(ushort *)(buffer + 3);\n    result = buffer[4];\n    flags_uint = (uint)flags;\n  }\n  character = character & 0xff;\n  if ((int)(flags_uint << 0x12) < 0) {\n    buffer_ptr = (undefined *)*buffer;\n    result = (int)buffer_ptr - result;\n    if (result < (int)buffer[5]) {\nLAB_000844f6:\n      result = result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = flags | 0x2000;\n    result = (int)buffer_ptr - result;\n    if (result < (int)buffer[5]) goto LAB_000844f6;\n  }\n  result = flush_stream(input_ptr,buffer);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*buffer;\n  result = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_ptr + 1;\n  *buffer_ptr = (char)character;\n  if (((buffer[5] == result) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (result = flush_stream(input_ptr,buffer), result != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "current_name": "process_input_000844c4",
            "entrypoint": "0x000844c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "__sinit": "initialize_stream",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_stream",
                "iVar4": "result",
                "param_1": "input_ptr",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "size",
                "puVar3": "buffer_ptr",
                "uVar1": "flags",
                "uVar2": "flags_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008456c": {
            "additional_data": {
                "FUN_0008456c": {
                    "1": "convert_and_set_locale_charset",
                    "2": "convert_to_locale_charset",
                    "3": "process_data",
                    "4": "decode_data"
                },
                "auStack_24": {
                    "1": "auxiliary_stack",
                    "10": "temp_buffer",
                    "2": "stack_array",
                    "3": "stack_buffer",
                    "6": "temporary_buffer"
                },
                "iVar3": {
                    "1": "result_code",
                    "2": "return_code",
                    "22": "result",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "decoded_data",
                    "15": "output_buffer",
                    "2": "output_string",
                    "3": "output_ptr"
                },
                "param_2": {
                    "1": "length",
                    "15": "input_length",
                    "2": "buffer_size",
                    "4": "size",
                    "5": "input_size"
                },
                "param_3": {
                    "1": "input_param",
                    "2": "constant_value",
                    "3": "param_3",
                    "4": "param"
                },
                "param_4": {
                    "1": "output_code_point",
                    "2": "result_ptr",
                    "3": "result",
                    "8": "status"
                },
                "pcVar1": {
                    "1": "conversion_function",
                    "11": "function_ptr",
                    "18": "function_pointer"
                },
                "uVar2": {
                    "1": "locale",
                    "19": "charset",
                    "9": "locale_charset"
                }
            },
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nvoid decode_data_0008456c(undefined4 *output_buffer,int input_length,undefined4 param,undefined4 *error_code)\n\n{\n  code *function_pointer;\n  undefined4 charset;\n  int result;\n  undefined temp_buffer [12];\n  \n  function_pointer = DAT_20070898;\n  if (input_length == 0) {\n    charset = __locale_charset();\n    result = (*function_pointer)(output_buffer,temp_buffer,0,charset,error_code);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*function_pointer)(output_buffer,input_length,param,charset,error_code);\n  }\n  if (result == -1) {\n    *error_code = 0;\n    *output_buffer = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "decode_data_0008456c",
            "entrypoint": "0x0008456c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008456c": "decode_data_0008456c",
                "auStack_24": "temp_buffer",
                "iVar3": "result",
                "param_1": "output_buffer",
                "param_2": "input_length",
                "param_3": "param",
                "param_4": "error_code",
                "pcVar1": "function_pointer",
                "uVar2": "charset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845bc": {
            "additional_data": {
                "(char)param_3": {
                    "1": "value_as_char"
                },
                "(undefined *)0x0": {
                    "4": "null"
                },
                "*param_1": {
                    "1": "status"
                },
                "*param_2": {
                    "1": "out_byte"
                },
                "0x0": {
                    "2": "null"
                },
                "0x100": {
                    "1": "256"
                },
                "0x8a": {
                    "1": "default_error_code",
                    "2": "error_code"
                },
                "0xffffffff": {
                    "1": "error_code",
                    "2": "failure_code"
                },
                "FUN_000845bc": {
                    "1": "convert_integer_to_byte",
                    "2": "copy_value_to_memory",
                    "4": "convert_to_byte"
                },
                "char": {
                    "1": "byte"
                },
                "new_variable_name_1": {
                    "1": "temp"
                },
                "param_1": {
                    "1": "dest_ptr",
                    "2": "result",
                    "3": "output_byte",
                    "4": "output_pointer",
                    "9": "output"
                },
                "param_2": {
                    "1": "value_ptr",
                    "2": "input_pointer",
                    "4": "input_ptr",
                    "6": "buffer"
                },
                "param_3": {
                    "1": "byte_value",
                    "15": "value",
                    "3": "number",
                    "5": "input_value"
                },
                "return": {
                    "1": "status"
                },
                "undefined": {
                    "1": "uint8"
                },
                "undefined4": {
                    "1": "uint32"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nuint32 convert_to_byte_000845bc(uint32 *output,uint8 *buffer,uint value)\n\n{\n  if (buffer == (uint8 *)0x0) {\n    status 0;\n  }\n  if (value < 0x100) {\n    *buffer = value_to_store;\n    status 1;\n  }\n  *output = 0x8a;\n  status 0xffffffff;\n}\n\n",
            "current_name": "convert_to_byte_000845bc",
            "entrypoint": "0x000845bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_3": "value_to_store",
                "FUN_000845bc": "convert_to_byte_000845bc",
                "char": "byte",
                "param_1": "output",
                "param_2": "buffer",
                "param_3": "value",
                "return": "status",
                "undefined": "uint8",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846a4": {
            "additional_data": {
                "*(code **)(param_1 + 0x2c)": {
                    "1": "function_ptr"
                },
                "*(int *)(param_1 + 0x30)": {
                    "1": "pointer1_value"
                },
                "*(int *)(param_1 + 0x38)": {
                    "1": "int_ptr"
                },
                "*(int *)(param_1 + 0x44)": {
                    "1": "pointer2_value"
                },
                "*(ushort *)(param_1 + 0xc)": {
                    "1": "ushort_condition"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "FUNC_00083c08": {
                    "1": "initialize_sfp",
                    "2": "initialize"
                },
                "FUNC_00083c0c": {
                    "1": "release_resources"
                },
                "FUN_00083adc": {
                    "1": "reverse_integer_param"
                },
                "FUN_00083b14": {
                    "1": "function_e",
                    "2": "cleanup"
                },
                "FUN_00083c08": {
                    "1": "do_something"
                },
                "FUN_00083c0c": {
                    "1": "do_something_else"
                },
                "FUN_00083d9c": {
                    "1": "subfunction_with_undefined_param"
                },
                "FUN_000846a4": {
                    "1": "clean_up_and_flush_file",
                    "2": "flush_file",
                    "3": "process_data",
                    "6": "flush_and_free_resources"
                },
                "__free_r": {
                    "1": "free_resource"
                },
                "__sfp_lock_acquire": {
                    "1": "acquire_sfp_lock",
                    "9": "acquire_lock"
                },
                "__sfp_lock_release": {
                    "1": "release_sfp_lock",
                    "9": "release_lock"
                },
                "__sfp_unlock_stream": {
                    "1": "unlock_stream"
                },
                "__sinit": {
                    "1": "initialize_streams",
                    "8": "initialize"
                },
                "_fflush_r": {
                    "1": "flush_resource",
                    "2": "flush_stream",
                    "3": "flush_buffer"
                },
                "_free_r": {
                    "1": "free_memory_with_offset",
                    "2": "free_resources",
                    "4": "free_resource"
                },
                "code": {
                    "1": "code_ptr"
                },
                "dVar1": {
                    "1": "r_offset",
                    "2": "file_offset",
                    "21": "offset",
                    "4": "rel_offset"
                },
                "iVar3": {
                    "1": "temp_var",
                    "15": "return_value",
                    "5": "result",
                    "6": "status"
                },
                "param_1": {
                    "1": "file_handle",
                    "2": "buffer",
                    "3": "input_param",
                    "4": "data",
                    "5": "file_descriptor",
                    "8": "input"
                },
                "param_1 + 0x10": {
                    "1": "buffer"
                },
                "param_1 + 0x1c": {
                    "1": "size"
                },
                "param_1 + 0x2c": {
                    "1": "callback"
                },
                "param_1 + 0x30": {
                    "1": "pointer1"
                },
                "param_1 + 0x40": {
                    "1": "pointer1_end"
                },
                "param_1 + 0x44": {
                    "1": "pointer2"
                },
                "param_1 + 0xc": {
                    "1": "condition"
                },
                "param_2": {
                    "1": "data_param"
                },
                "uVar2": {
                    "1": "status",
                    "25": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00083c08",
                "FUN_00083c0c",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083b14"
            ],
            "calling": [],
            "code": "\nundefined4 flush_and_free_resources_000846a4(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int return_value;\n  \n  offset = array[140].r_offset;\n  if (input != 0) {\n    if ((array[140].r_offset != 0) &&\n       (*(int *)(array[140].r_offset + 0x38) == 0)) {\n      initialize();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = flush_buffer(offset,input);\n      if ((*(code_ptr **)(input + 0x2c) != (code_ptr *)0x0) &&\n         (return_value = (**(code_ptr **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), return_value < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        free_resource(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          free_resource(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        free_resource(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      acquire_lock();\n      *(undefined2 *)(input + 0xc) = 0;\n      release_lock();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "flush_and_free_resources_000846a4",
            "entrypoint": "0x000846a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "FUN_000846a4": "flush_and_free_resources_000846a4",
                "__sfp_lock_acquire": "acquire_lock",
                "__sfp_lock_release": "release_lock",
                "__sinit": "initialize",
                "_fflush_r": "flush_buffer",
                "_free_r": "free_resource",
                "code": "code_ptr",
                "dVar1": "offset",
                "iVar3": "return_value",
                "param_1": "input",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846b4": {
            "additional_data": {
                "DAT_200711bc": {
                    "1": "error_value"
                },
                "FUN_000846b4": {
                    "1": "check_and_set_file_status",
                    "2": "file_stat",
                    "3": "get_file_stat",
                    "5": "get_file_status",
                    "6": "check_file_status"
                },
                "_fstat": {
                    "1": "get_file_status"
                },
                "iVar1": {
                    "1": "fstat_result",
                    "10": "status",
                    "4": "stat_result",
                    "5": "file_status"
                },
                "param_1": {
                    "1": "status_value",
                    "12": "result",
                    "2": "status_pointer",
                    "3": "file_size"
                },
                "param_2": {
                    "28": "file_descriptor",
                    "3": "fd"
                },
                "param_3": {
                    "1": "stat_buffer_ptr",
                    "18": "stat_buffer",
                    "2": "stat_buf",
                    "3": "buf"
                },
                "param_4": {
                    "1": "stat_size",
                    "14": "buffer_size",
                    "2": "flags",
                    "3": "stat_buffer_size"
                }
            },
            "called": [
                "FUN_000811b4"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid get_file_size_000846b4(int *result,undefined4 file_descriptor,undefined4 stat_buffer,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_200711bc = 0;\n  status = get_file_status_details(file_descriptor,stat_buffer,stat_buffer,0,buffer_size);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "get_file_size_000846b4",
            "entrypoint": "0x000846b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846b4": "get_file_size_000846b4",
                "_fstat": "get_file_status_details",
                "iVar1": "status",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buffer",
                "param_4": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846dc": {
            "additional_data": {
                "DAT_200711bc": {
                    "1": "terminal_output_value",
                    "2": "saved_value"
                },
                "FUN_000811be": {
                    "1": "get_is_terminal",
                    "2": "get_terminal_status"
                },
                "FUN_000846dc": {
                    "1": "check_terminal_and_assign_value",
                    "2": "check_if_terminal",
                    "3": "check_is_terminal"
                },
                "_isatty": {
                    "1": "is_input_redirected",
                    "3": "check_if_terminal"
                },
                "iVar1": {
                    "1": "terminal_check",
                    "2": "result",
                    "3": "is_tty",
                    "8": "is_terminal"
                },
                "param_1": {
                    "1": "output_result",
                    "2": "return_value",
                    "3": "result_pointer",
                    "6": "output_value",
                    "7": "result"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "terminal_id",
                    "25": "file_descriptor"
                }
            },
            "called": [
                "FUN_000811be"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid check_terminal_status_000846dc(int *result,undefined4 file_descriptor)\n\n{\n  int is_terminal;\n  \n  DAT_200711bc = 0;\n  is_terminal = check_if_terminal(file_descriptor);\n  if ((is_terminal == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "check_terminal_status_000846dc",
            "entrypoint": "0x000846dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846dc": "check_terminal_status_000846dc",
                "_isatty": "check_if_terminal",
                "iVar1": "is_terminal",
                "param_1": "result",
                "param_2": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084700": {
            "additional_data": {
                "FUN_00084700": {
                    "1": "seek_and_store_offset",
                    "2": "seek_and_copy_data",
                    "5": "seek_and_assign"
                },
                "iVar1": {
                    "1": "seek_status",
                    "2": "result",
                    "23": "seek_result"
                },
                "param_1": {
                    "1": "out_int_ptr",
                    "17": "result",
                    "2": "file_offset",
                    "3": "output"
                },
                "param_2": {
                    "31": "file_descriptor"
                },
                "param_3": {
                    "1": "offset_value",
                    "30": "offset"
                },
                "param_4": {
                    "23": "whence",
                    "8": "origin"
                }
            },
            "called": [
                "FUN_000811c2"
            ],
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "code": "\nvoid seek_and_assign_00084700(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seek_result;\n  \n  DAT_200711bc = 0;\n  seek_result = _lseek(file_descriptor,offset,whence);\n  if ((seek_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "seek_and_assign_00084700",
            "entrypoint": "0x00084700",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084700": "seek_and_assign_00084700",
                "iVar1": "seek_result",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084728": {
            "additional_data": {
                "FUN_00084728": {
                    "1": "read_from_stream",
                    "2": "read_and_store_value",
                    "5": "read_and_check_error",
                    "6": "read_and_assign_error"
                },
                "iVar1": {
                    "2": "read_status",
                    "26": "read_result"
                },
                "param_1": {
                    "1": "error_pointer",
                    "10": "result",
                    "12": "output"
                },
                "param_2": {
                    "1": "source_file_descriptor",
                    "2": "source",
                    "23": "file_descriptor",
                    "3": "buffer"
                },
                "param_3": {
                    "1": "destination",
                    "25": "buffer",
                    "5": "size"
                },
                "param_4": {
                    "1": "buffer_length",
                    "10": "size",
                    "20": "count"
                }
            },
            "called": [
                "FUN_000811c6"
            ],
            "calling": [],
            "code": "\nvoid read_and_assign_error_00084728(int *output,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_200711bc = 0;\n  read_result = _read(file_descriptor,buffer,count);\n  if ((read_result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_assign_error_00084728",
            "entrypoint": "0x00084728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084728": "read_and_assign_error_00084728",
                "iVar1": "read_result",
                "param_1": "output",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084750": {
            "additional_data": {
                "FUN_00084750": {
                    "1": "divide_or_negative",
                    "11": "calculate_result",
                    "2": "divmod_operation",
                    "3": "divmod_helper",
                    "6": "divide_and_check_zero"
                },
                "FUN_000847ac": {
                    "1": "compute_helper"
                },
                "iVar1": {
                    "2": "quotient",
                    "24": "result"
                },
                "param_1": {
                    "1": "input_param_1",
                    "12": "dividend",
                    "4": "numerator",
                    "5": "input1",
                    "9": "input_1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "12": "divisor",
                    "4": "denominator",
                    "5": "input2",
                    "9": "input_2"
                },
                "param_3": {
                    "1": "unspecified_value1",
                    "2": "param_a",
                    "3": "quotient",
                    "4": "remainder",
                    "8": "input_3"
                },
                "param_4": {
                    "1": "unspecified_value2",
                    "2": "param_4",
                    "4": "input4",
                    "5": "remainder",
                    "8": "input_4"
                }
            },
            "called": [
                "FUN_000847ac"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint calculate_result_00084750(int dividend,int divisor,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    return dividend;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "current_name": "calculate_result_00084750",
            "entrypoint": "0x00084750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "iVar1": "result",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008477c": {
            "additional_data": {
                "FUN_0008477c": {
                    "1": "calculate_result",
                    "2": "subtract_and_update_params",
                    "3": "subtract_and_store_difference",
                    "4": "calculate_difference",
                    "5": "subtract_and_store",
                    "7": "subtract_and_adjust"
                },
                "FUN_000847e0": {
                    "1": "calculate_product"
                },
                "__divdi3()": {
                    "1": "divide_64_bit_numbers"
                },
                "lVar2": {
                    "1": "result",
                    "13": "product",
                    "2": "multiplication_result"
                },
                "param_1": {
                    "1": "num",
                    "19": "input_value",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "subtraction_value",
                    "2": "second_param"
                },
                "param_3": {
                    "1": "lower_half_of_multiplier"
                },
                "param_4": {
                    "1": "lower_bits_param"
                },
                "param_5": {
                    "1": "result",
                    "12": "result_array",
                    "15": "output_array",
                    "2": "output_values"
                },
                "uVar1": {
                    "1": "result_uint",
                    "15": "result",
                    "2": "product_low"
                },
                "undefined8 FUN_000847e0": {
                    "1": "multiply_and_assign"
                }
            },
            "called": [
                "FUN_000847e0"
            ],
            "calling": [],
            "code": "\nvoid subtract_and_adjust_0008477c(uint input_value,int another_input_value,undefined4 param_y,undefined4 param_z,int *output_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide_64_bit_numbers;\n  product = product * CONCAT44(param_z,param_y);\n  result = (uint)product;\n  *output_array = input_value - result;\n  output_array[1] = (another_input_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_adjust_0008477c",
            "entrypoint": "0x0008477c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008477c": "subtract_and_adjust_0008477c",
                "__divdi3()": "divide_64_bit_numbers",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "another_input_value",
                "param_3": "param_y",
                "param_4": "param_z",
                "param_5": "output_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847ac": {
            "additional_data": {
                "*param_5": {
                    "1": "result_array[0]"
                },
                "CONCAT44": {
                    "1": "concatenate_uintegers"
                },
                "FUN_000847ac": {
                    "1": "subtract_and_modify_array",
                    "2": "subtract_and_store_difference",
                    "3": "subtract_and_store",
                    "5": "calculate_difference",
                    "7": "subtract_and_adjust"
                },
                "FUN_00084a80": {
                    "1": "multiply_four_values"
                },
                "__udivdi3": {
                    "1": "unsigned_integer_division"
                },
                "concatenated_params": {
                    "1": "concatenated_params"
                },
                "lVar2": {
                    "1": "product_longlong",
                    "14": "product",
                    "2": "quotient"
                },
                "param_1": {
                    "1": "input_param",
                    "14": "input_value",
                    "2": "input1",
                    "3": "original_value"
                },
                "param_2": {
                    "1": "current_value",
                    "2": "offset",
                    "3": "subtract_value"
                },
                "param_3": {
                    "1": "lower_bits_param",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "lower_part_2",
                    "2": "multiplier_high"
                },
                "param_5": {
                    "1": "result_storage",
                    "17": "result_array",
                    "2": "output_values",
                    "3": "result",
                    "8": "output_array"
                },
                "param_5[1]": {
                    "1": "result_array[1]"
                },
                "uVar1": {
                    "1": "product_as_uint",
                    "2": "computed_value",
                    "3": "product",
                    "9": "result"
                },
                "uint": {
                    "1": "uint32"
                },
                "ulonglong": {
                    "1": "uint64"
                }
            },
            "called": [
                "FUN_00084a80"
            ],
            "calling": [
                "FUN_00084750"
            ],
            "code": "\nvoid subtract_and_adjust_000847ac(uint32 input_value,int subtract_value,undefined4 param_3,undefined4 param_4,int *result_array)\n\n{\n  uint32 result;\n  longlong product;\n  \n  product = unsigned_integer_division();\n  product = product * concatenate_uintegers(param_4,param_3);\n  result = (uint32)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((uint64)product >> 0x20)) - (uint32)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_adjust_000847ac",
            "entrypoint": "0x000847ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_uintegers",
                "FUN_000847ac": "subtract_and_adjust_000847ac",
                "__udivdi3": "unsigned_integer_division",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_5": "result_array",
                "param_5[1]": "result_array[1]",
                "uVar1": "result",
                "uint": "uint32",
                "ulonglong": "uint64"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847e0": {
            "additional_data": {
                "<bVar13>": {
                    "1": "carry_flag"
                },
                "<iVar6>": {
                    "1": "shift_amount"
                },
                "<original_function_name>": {
                    "1": "perform_division"
                },
                "<param_1>": {
                    "1": "dividend"
                },
                "<param_2>": {
                    "1": "divisor"
                },
                "<param_3>": {
                    "1": "quotient"
                },
                "<param_4>": {
                    "1": "remainder"
                },
                "<uVar10>": {
                    "1": "u_var10"
                },
                "<uVar11>": {
                    "1": "u_var11"
                },
                "<uVar12>": {
                    "1": "u_var12"
                },
                "<uVar2>": {
                    "1": "quotient_bits"
                },
                "<uVar3>": {
                    "1": "quotient_high"
                },
                "<uVar4>": {
                    "1": "u_var4"
                },
                "<uVar5>": {
                    "1": "u_var5"
                },
                "<uVar7>": {
                    "1": "u_var7"
                },
                "<uVar8>": {
                    "1": "u_var8"
                },
                "<uVar9>": {
                    "1": "is_dividend_negative"
                },
                "FUN_000847e0": {
                    "1": "division_with_overflow",
                    "2": "div_mod",
                    "3": "division_with_remainder",
                    "5": "divide_unsigned_integers",
                    "8": "divide_with_remainder"
                },
                "bVar13": {
                    "1": "can_divisor_be_negative",
                    "2": "is_carry",
                    "5": "is_negative",
                    "6": "carry_flag"
                },
                "iVar6": {
                    "1": "leading_zeros_count",
                    "6": "shift",
                    "7": "shift_amount"
                },
                "lVar1": {
                    "1": "quotient",
                    "2": "result",
                    "4": "temp",
                    "6": "product"
                },
                "param_1": {
                    "30": "dividend"
                },
                "param_2": {
                    "1": "dividend_remaing",
                    "11": "dividend_high",
                    "2": "dividend_sign",
                    "4": "divisor"
                },
                "param_3": {
                    "1": "dividend_high",
                    "26": "divisor",
                    "3": "quotient"
                },
                "param_4": {
                    "1": "quotient",
                    "12": "divisor_high",
                    "2": "divisor_lower",
                    "4": "remainder"
                },
                "uVar10": {
                    "1": "temp_quotient",
                    "2": "is_divisor_negative",
                    "5": "is_negative_divisor"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "temp3",
                    "3": "temp6"
                },
                "uVar12": {
                    "1": "division_temp",
                    "2": "shifted_divisor",
                    "3": "temp6"
                },
                "uVar13": {
                    "1": "temp7"
                },
                "uVar14": {
                    "1": "temp8"
                },
                "uVar15": {
                    "1": "shifted_dividend"
                },
                "uVar16": {
                    "1": "temp10"
                },
                "uVar17": {
                    "1": "temp11"
                },
                "uVar18": {
                    "1": "temp12"
                },
                "uVar19": {
                    "1": "temp13"
                },
                "uVar2": {
                    "1": "quotient_lower_bits",
                    "3": "quotient_lower",
                    "5": "quotient1",
                    "9": "quotient"
                },
                "uVar20": {
                    "1": "temp14"
                },
                "uVar21": {
                    "1": "temp15"
                },
                "uVar22": {
                    "1": "temp16"
                },
                "uVar3": {
                    "1": "temp_quotient2",
                    "4": "remainder",
                    "5": "quotient2",
                    "9": "quotient_high"
                },
                "uVar4": {
                    "1": "divisor_upper_shifted",
                    "2": "quotient3",
                    "8": "temp1"
                },
                "uVar5": {
                    "1": "temp_variable3",
                    "2": "quotient4",
                    "8": "temp2"
                },
                "uVar6": {
                    "1": "temp3"
                },
                "uVar7": {
                    "1": "temp_result_low",
                    "2": "result1",
                    "6": "temp1",
                    "7": "temp3"
                },
                "uVar8": {
                    "1": "temp_dividend_high",
                    "7": "temp2",
                    "8": "temp4"
                },
                "uVar9": {
                    "1": "neg_dividend",
                    "11": "is_negative_dividend",
                    "2": "dividend_sign",
                    "5": "is_dividend_negative"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008477c"
            ],
            "code": "\nundefined8 divide_with_remainder_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp3;\n  uint temp4;\n  uint is_negative_dividend;\n  uint is_negative_divisor;\n  uint temp5;\n  uint temp6;\n  bool carry;\n  \n  if ((int)dividend_high < 0) {\n    carry = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry;\n    is_negative_dividend = 0xffffffff;\n  }\n  else {\n    is_negative_dividend = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_negative_dividend = ~is_negative_dividend;\n    carry = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividend_high / quotient;\n      temp3 = (divisor & 0xffff) * temp1;\n      is_negative_divisor = dividend >> 0x10 | (dividend_high - quotient * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_negative_divisor <= temp3 && temp3 - is_negative_divisor != 0) {\n        carry = CARRY4(is_negative_divisor,divisor);\n        is_negative_divisor = is_negative_divisor + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry == false) && (is_negative_divisor <= temp3 && temp3 - is_negative_divisor != 0)) {\n          quotient_high = temp1 - 2;\n          is_negative_divisor = is_negative_divisor + divisor;\n        }\n      }\n      temp4 = (is_negative_divisor - temp3) / quotient;\n      temp1 = (divisor & 0xffff) * temp4;\n      temp3 = dividend & 0xffff | ((is_negative_divisor - temp3) - quotient * temp4) * 0x10000;\n      quotient = temp4;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        quotient = temp4 - 1;\n        if ((CARRY4(temp3,divisor) == false) &&\n           (temp3 + divisor <= temp1 && temp1 - (temp3 + divisor) != 0)) {\n          quotient = temp4 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        temp6 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        is_negative_divisor = quotient_high / temp1;\n        temp6 = divisor & 0xffff;\n        temp3 = temp6 * is_negative_divisor;\n        temp4 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp4 >> 0x10 | (quotient_high - temp1 * is_negative_divisor) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = is_negative_divisor;\n        if (quotient_high <= temp3 && temp3 - quotient_high != 0) {\n          carry = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = is_negative_divisor - 1;\n          if ((carry == false) && (quotient_high <= temp3 && temp3 - quotient_high != 0)) {\n            quotient = is_negative_divisor - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp3) / temp1;\n        is_negative_divisor = temp6 * temp2;\n        dividend_high = temp4 & 0xffff | ((quotient_high - temp3) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_negative_divisor && is_negative_divisor - dividend_high != 0) {\n          carry = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry == false) && (dividend_high <= is_negative_divisor && is_negative_divisor - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_negative_divisor;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / temp1;\n      is_negative_divisor = temp6 * quotient;\n      temp4 = dividend >> 0x10 | (dividend_high - temp1 * quotient) * 0x10000;\n      temp3 = quotient;\n      if (temp4 <= is_negative_divisor && is_negative_divisor - temp4 != 0) {\n        carry = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = quotient - 1;\n        if ((carry == false) && (temp4 <= is_negative_divisor && is_negative_divisor - temp4 != 0)) {\n          temp3 = quotient - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp2 = (temp4 - is_negative_divisor) / temp1;\n      temp6 = temp6 * temp2;\n      temp1 = dividend & 0xffff | ((temp4 - is_negative_divisor) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp6 && temp6 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp6 && temp6 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | temp3 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      temp6 = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      is_negative_divisor = temp6 >> 0x10;\n      quotient = temp1 / is_negative_divisor;\n      temp4 = (temp6 & 0xffff) * quotient;\n      temp3 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp3 >> 0x10 | (temp1 - is_negative_divisor * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry = CARRY4(temp1,temp6);\n        temp1 = temp1 + temp6;\n        quotient_high = quotient - 1;\n        if ((carry == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotient_high = quotient - 2;\n          temp1 = temp1 + temp6;\n        }\n      }\n      temp2 = (temp1 - temp4) / is_negative_divisor;\n      temp5 = (temp6 & 0xffff) * temp2;\n      temp1 = temp3 & 0xffff | ((temp1 - temp4) - is_negative_divisor * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp5 && temp5 - temp1 != 0) {\n        carry = CARRY4(temp1,temp6);\n        temp1 = temp1 + temp6;\n        quotient = temp2 - 1;\n        if ((carry == false) && (temp1 <= temp5 && temp5 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + temp6;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n      temp3 = (uint)((ulonglong)product >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp5 < temp3) ||\n         ((temp1 - temp5 == temp3 && (dividend << shift_amount < (uint)product)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_negative_dividend != 0) {\n    carry = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "current_name": "divide_with_remainder_000847e0",
            "entrypoint": "0x000847e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000847e0": "divide_with_remainder_000847e0",
                "bVar13": "carry",
                "iVar6": "shift_amount",
                "lVar1": "product",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar10": "is_negative_divisor",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "is_negative_dividend"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084a80": {
            "additional_data": {
                "FUN_00084a80": {
                    "1": "calculate_unsigned_divide_remainder",
                    "10": "calculate_quotient",
                    "2": "divide_and_subtract",
                    "3": "perform_division",
                    "7": "divide_and_remainder"
                },
                "bVar11": {
                    "1": "carry_overflow",
                    "18": "carry_flag",
                    "4": "is_carry",
                    "7": "carry"
                },
                "iVar10": {
                    "1": "leading_zeros",
                    "2": "bit_count",
                    "6": "shift_amount",
                    "8": "shift",
                    "9": "shift_count"
                },
                "lVar1": {
                    "1": "quotient_mul",
                    "3": "quotient",
                    "4": "result"
                },
                "param_1": {
                    "1": "numerator",
                    "30": "dividend"
                },
                "param_2": {
                    "1": "dividend_upper_part",
                    "23": "divisor",
                    "3": "dividend_high"
                },
                "param_3": {
                    "1": "high_bits",
                    "16": "quotient",
                    "5": "temp1",
                    "7": "divisor"
                },
                "param_4": {
                    "1": "divisor_upper_half",
                    "17": "remainder",
                    "2": "divisor_high",
                    "5": "temp2"
                },
                "uVar10": {
                    "1": "quotient_guess"
                },
                "uVar11": {
                    "1": "carry_flag"
                },
                "uVar12": {
                    "1": "num_quotients3"
                },
                "uVar13": {
                    "1": "divisor_high3"
                },
                "uVar14": {
                    "1": "temp6"
                },
                "uVar15": {
                    "1": "partial_product_low3"
                },
                "uVar16": {
                    "1": "partial_product_high3"
                },
                "uVar2": {
                    "1": "quotient_high",
                    "2": "temp1",
                    "4": "result",
                    "5": "quotient",
                    "6": "quotient1"
                },
                "uVar3": {
                    "1": "divisor_lower_half",
                    "2": "temp2",
                    "3": "temp3"
                },
                "uVar4": {
                    "1": "temp4",
                    "2": "quotient3",
                    "3": "temp3"
                },
                "uVar5": {
                    "1": "prod_low",
                    "2": "temp3",
                    "5": "temp4"
                },
                "uVar6": {
                    "1": "dividend_shifted_upper_part",
                    "2": "temp4",
                    "3": "dividend_high"
                },
                "uVar7": {
                    "1": "temp_quotient",
                    "2": "temp3",
                    "3": "quotient3"
                },
                "uVar8": {
                    "1": "temp4",
                    "2": "temp6"
                },
                "uVar9": {
                    "1": "temp9",
                    "2": "temp7"
                }
            },
            "called": [],
            "calling": [
                "FUN_000847ac"
            ],
            "code": "\nulonglong calculate_quotient_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong product;\n  uint quotient1;\n  uint temp3;\n  uint temp3;\n  uint temp4;\n  uint dividend_high;\n  uint quotient3;\n  uint temp6;\n  uint remainder2;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        temp3 = quotient >> 0x10;\n        temp4 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp6 = divisor >> (0x20U - shift_count & 0xff);\n        temp3 = quotient >> 0x10;\n        remainder2 = temp6 / temp3;\n        temp4 = quotient & 0xffff;\n        quotient1 = temp4 * remainder2;\n        dividend_high = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        temp3 = dividend_high >> 0x10 | (temp6 - temp3 * remainder2) * 0x10000;\n        dividend = dividend << shift_count;\n        temp6 = remainder2;\n        if (temp3 <= quotient1 && quotient1 - temp3 != 0) {\n          carry_flag = CARRY4(temp3,quotient);\n          temp3 = temp3 + quotient;\n          temp6 = remainder2 - 1;\n          if ((carry_flag == false) && (temp3 <= quotient1 && quotient1 - temp3 != 0)) {\n            temp6 = remainder2 - 2;\n            temp3 = temp3 + quotient;\n          }\n        }\n        quotient3 = (temp3 - quotient1) / temp3;\n        remainder2 = temp4 * quotient3;\n        divisor = dividend_high & 0xffff | ((temp3 - quotient1) - temp3 * quotient3) * 0x10000;\n        quotient1 = quotient3;\n        if (divisor <= remainder2 && remainder2 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = quotient3 - 1;\n          if ((carry_flag == false) && (divisor <= remainder2 && remainder2 - divisor != 0)) {\n            quotient1 = quotient3 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - remainder2;\n        quotient1 = quotient1 | temp6 << 0x10;\n      }\n      remainder2 = divisor / temp3;\n      temp3 = temp4 * remainder2;\n      dividend_high = dividend >> 0x10 | (divisor - temp3 * remainder2) * 0x10000;\n      temp6 = remainder2;\n      if (dividend_high <= temp3 && temp3 - dividend_high != 0) {\n        carry_flag = CARRY4(dividend_high,quotient);\n        dividend_high = dividend_high + quotient;\n        temp6 = remainder2 - 1;\n        if ((carry_flag == false) && (dividend_high <= temp3 && temp3 - dividend_high != 0)) {\n          temp6 = remainder2 - 2;\n          dividend_high = dividend_high + quotient;\n        }\n      }\n      remainder2 = (dividend_high - temp3) / temp3;\n      temp4 = temp4 * remainder2;\n      dividend_high = dividend & 0xffff | ((dividend_high - temp3) - temp3 * remainder2) * 0x10000;\n      temp3 = remainder2;\n      if (dividend_high <= temp4 && temp4 - dividend_high != 0) {\n        temp3 = remainder2 - 1;\n        if ((CARRY4(dividend_high,quotient) == false) &&\n           (dividend_high + quotient <= temp4 && temp4 - (dividend_high + quotient) != 0)) {\n          temp3 = remainder2 - 2;\n        }\n      }\n      return CONCAT44(quotient1,temp3 | temp6 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      temp6 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp6 | divisor << shift_count;\n    }\n    quotient1 = quotient >> 0x10;\n    temp3 = divisor / quotient1;\n    temp4 = (quotient & 0xffff) * temp3;\n    remainder2 = dividend >> 0x10 | (divisor - quotient1 * temp3) * 0x10000;\n    temp6 = temp3;\n    if (remainder2 <= temp4 && temp4 - remainder2 != 0) {\n      carry_flag = CARRY4(remainder2,quotient);\n      remainder2 = remainder2 + quotient;\n      temp6 = temp3 - 1;\n      if ((carry_flag == false) && (remainder2 <= temp4 && temp4 - remainder2 != 0)) {\n        temp6 = temp3 - 2;\n        remainder2 = remainder2 + quotient;\n      }\n    }\n    dividend_high = (remainder2 - temp4) / quotient1;\n    temp3 = (quotient & 0xffff) * dividend_high;\n    temp4 = dividend & 0xffff | ((remainder2 - temp4) - quotient1 * dividend_high) * 0x10000;\n    quotient1 = dividend_high;\n    if (temp4 <= temp3 && temp3 - temp4 != 0) {\n      quotient1 = dividend_high - 1;\n      if ((CARRY4(temp4,quotient) == false) &&\n         (temp4 + quotient <= temp3 && temp3 - (temp4 + quotient) != 0)) {\n        quotient1 = dividend_high - 2;\n      }\n    }\n    quotient1 = quotient1 | temp6 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift_count;\n      temp6 = divisor >> (quotient1 & 0xff);\n      temp3 = remainder << shift_count | quotient >> (quotient1 & 0xff);\n      temp4 = temp3 >> 0x10;\n      temp3 = temp6 / temp4;\n      remainder2 = (temp3 & 0xffff) * temp3;\n      dividend_high = dividend >> (quotient1 & 0xff) | divisor << shift_count;\n      quotient1 = dividend_high >> 0x10 | (temp6 - temp4 * temp3) * 0x10000;\n      temp6 = temp3;\n      if (quotient1 <= remainder2 && remainder2 - quotient1 != 0) {\n        carry_flag = CARRY4(quotient1,temp3);\n        quotient1 = quotient1 + temp3;\n        temp6 = temp3 - 1;\n        if ((carry_flag == false) && (quotient1 <= remainder2 && remainder2 - quotient1 != 0)) {\n          temp6 = temp3 - 2;\n          quotient1 = quotient1 + temp3;\n        }\n      }\n      temp3 = (quotient1 - remainder2) / temp4;\n      quotient3 = (temp3 & 0xffff) * temp3;\n      temp4 = dividend_high & 0xffff | ((quotient1 - remainder2) - temp4 * temp3) * 0x10000;\n      quotient1 = temp3;\n      if (temp4 <= quotient3 && quotient3 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,temp3);\n        temp4 = temp4 + temp3;\n        quotient1 = temp3 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient3 && quotient3 - temp4 != 0)) {\n          quotient1 = temp3 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      quotient1 = quotient1 | temp6 << 0x10;\n      product = (ulonglong)quotient1 * (ulonglong)(quotient << shift_count);\n      temp6 = (uint)((ulonglong)product >> 0x20);\n      if ((temp4 - quotient3 < temp6) || ((temp4 - quotient3 == temp6 && (dividend << shift_count < (uint)product)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "current_name": "calculate_quotient_00084a80",
            "entrypoint": "0x00084a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084a80": "calculate_quotient_00084a80",
                "bVar11": "carry_flag",
                "iVar10": "shift_count",
                "lVar1": "product",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient1",
                "uVar3": "temp3",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "dividend_high",
                "uVar7": "quotient3",
                "uVar8": "temp6",
                "uVar9": "remainder2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085858": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085858",
            "entrypoint": "0x00085858",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_000804a8",
            "FUN_000816a8"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 457643
}