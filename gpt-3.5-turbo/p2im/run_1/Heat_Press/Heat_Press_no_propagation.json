{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000800f4": {
                    "1": "update_flag_if_unset",
                    "2": "update_flag",
                    "21": "initialize_flag",
                    "4": "set_flag_if_not_set"
                },
                "param_1": {
                    "15": "input",
                    "2": "value",
                    "1": "input_parameter",
                    "8": "input_value",
                    "3": "input_param"
                },
                "DAT_2007089c": {
                    "17": "flag",
                    "3": "flag_variable",
                    "1": "flag_byte"
                }
            }
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initialize_data_00080164(int **data_pointer)\n\n{\n  int return_value;\n  \n  *data_pointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data_pointer + 6)) {\n    FUN_00081210(*(byte *)((int)data_pointer + 6),1);\n    FUN_00081318(*(undefined *)((int)data_pointer + 6),0);\n  }\n  do {\n    return_value = (**(code **)(**data_pointer + 0xc))();\n  } while (-1 < return_value);\n  *(undefined *)((int)data_pointer + 0x49) = 0;\n  *(undefined *)((int)data_pointer + 0x4a) = 0;\n  *(undefined2 *)(data_pointer + 0x15) = 0;\n  *(undefined2 *)((int)data_pointer + 0x52) = 0;\n  *(undefined2 *)(data_pointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data_pointer",
                "iVar1": "return_value"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080164": {
                    "27": "initialize_data",
                    "1": "initialize_data_structure",
                    "2": "initialize_data_structures"
                },
                "param_1": {
                    "8": "data",
                    "1": "input1",
                    "5": "data_ptr",
                    "11": "data_pointer",
                    "2": "data_structure"
                },
                "iVar1": {
                    "1": "loop_counter",
                    "8": "result",
                    "22": "return_value"
                },
                "FUN_00081318": {
                    "3": "set_flag",
                    "1": "execute_function_b",
                    "2": "update_data"
                },
                "param_2": {
                    "1": "input_value"
                },
                "FUN_00081210": {
                    "1": "modify_data_one",
                    "5": "process_data"
                },
                "param_3": {
                    "1": "param"
                },
                "DAT_20070b60": {
                    "1": "data"
                }
            }
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint process_data_000801b0(int **data)\n\n{\n  bool is_overflow;\n  undefined result;\n  char counter;\n  int return_value;\n  byte index;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  is_overflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (return_value = (**(code **)(**data + 8))(), return_value != 0) {\n      index = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      counter = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + index + 9) = result;\n      index = counter + 1;\n      *(byte *)((int)data + 0x49) = index;\n      if (0x3f < index) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_overflow) {\n    counter = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)data + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "result",
                "cVar3": "counter",
                "iVar4": "return_value",
                "bVar5": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000801b0": {
                    "1": "decode_data",
                    "27": "process_data"
                },
                "param_1": {
                    "23": "data",
                    "3": "data_ptr",
                    "2": "input_data",
                    "1": "input_array"
                },
                "bVar1": {
                    "2": "exceed_limit",
                    "1": "has_exceeded_threshold",
                    "3": "is_full",
                    "11": "is_overflow"
                },
                "uVar2": {
                    "2": "return_value",
                    "1": "byte_value",
                    "6": "value",
                    "17": "result"
                },
                "cVar3": {
                    "2": "current_char",
                    "6": "count",
                    "15": "counter",
                    "3": "result"
                },
                "iVar4": {
                    "19": "return_value",
                    "2": "func_result",
                    "1": "status",
                    "8": "result"
                },
                "bVar5": {
                    "1": "byte_index",
                    "2": "char_index",
                    "3": "counter",
                    "5": "index",
                    "4": "current_index"
                },
                "FUN_00081318": {
                    "1": "reset_function"
                },
                "param_2": {
                    "1": "param1"
                },
                "param_3": {
                    "1": "param2"
                },
                "param_1+6": {
                    "1": "input_data+6"
                },
                "param_1+5": {
                    "1": "input_data+5"
                },
                "param_1+0x49": {
                    "1": "input_data+0x49"
                }
            }
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_counter;\n  uint bit;\n  \n  checksum = 0xffff;\n  for (current_index = data_start; (current_index - data_start & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_counter = '\\b';\n    do {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "data_start",
                "param_2": "data_length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_counter",
                "uVar4": "bit"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008021c": {
                    "25": "calculate_checksum",
                    "3": "calculate_crc",
                    "1": "reverse_byte_order"
                },
                "param_1": {
                    "2": "start_address",
                    "3": "start_index",
                    "8": "data_start",
                    "4": "data_address",
                    "1": "input_data",
                    "5": "data_start_index"
                },
                "param_2": {
                    "1": "size",
                    "3": "input_length",
                    "17": "data_length",
                    "8": "length"
                },
                "iVar1": {
                    "1": "current_position",
                    "2": "current_offset",
                    "5": "index",
                    "8": "current_address",
                    "11": "current_index"
                },
                "uVar2": {
                    "1": "crc_result",
                    "2": "result",
                    "22": "checksum"
                },
                "cVar3": {
                    "13": "bit_counter",
                    "1": "bits_to_shift",
                    "12": "bit_count"
                },
                "uVar4": {
                    "1": "temp_checksum",
                    "11": "bit_value",
                    "14": "bit"
                },
                "uVar2 & 0xff": {
                    "1": "lower_byte"
                },
                "uVar2 >> 8": {
                    "1": "upper_byte"
                },
                "uVar2_dat_1": {
                    "1": "lsb"
                },
                "uVar2_dat_2": {
                    "1": "msb"
                },
                "uVar5": {
                    "1": "swapped_checksum"
                },
                "uVar2 ^ *(byte *)(iVar1 + 9)": {
                    "1": "byte_xor"
                },
                "uVar2 ^ 0xa001": {
                    "1": "xor_value"
                },
                "(uVar2 & 0xff) << 8 | uVar2 >> 8": {
                    "1": "reversed_checksum"
                },
                "(uVar2 & 1)": {
                    "1": "bit_mask"
                },
                "uVar3": {
                    "1": "temp"
                }
            }
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_param_00080258",
            "code": "\nvoid update_param_00080258(int **param_array,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte byte_value;\n  undefined2 result;\n  int return_value;\n  uint converted_byte;\n  \n  byte_value = *(byte *)((int)param_array + 0x49);\n  converted_byte = (uint)byte_value;\n  result = FUN_0008021c(param_array,converted_byte,value2,value3,value3);\n  *(char *)((int)param_array + converted_byte + 9) = (char)((ushort)result >> 8);\n  *(char *)((int)param_array + (converted_byte + 1 & 0xff) + 9) = (char)result;\n  *(byte *)((int)param_array + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)param_array + 6)) {\n    FUN_00081318(*(byte *)((int)param_array + 6),1);\n  }\n  if (*(byte *)((int)param_array + 5) < 4) {\n    (**(code **)(**param_array + 4))(*param_array,(int)param_array + 9,*(undefined *)((int)param_array + 0x49));\n  }\n  if (1 < *(byte *)((int)param_array + 6)) {\n    FUN_00081318(*(byte *)((int)param_array + 6),0);\n  }\n  if (*(byte *)((int)param_array + 5) < 4) {\n    do {\n      return_value = (**(code **)(**param_array + 0xc))();\n    } while (-1 < return_value);\n  }\n  *(undefined *)((int)param_array + 0x49) = 0;\n  return_value = thunk_FUN_00081714();\n  param_array[0x17] = (int *)(return_value + (uint)*(ushort *)((int)param_array + 0x56));\n  *(short *)((int)param_array + 0x52) = *(short *)((int)param_array + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_param_00080258",
                "param_1": "param_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "byte_value",
                "uVar2": "result",
                "iVar3": "return_value",
                "uVar4": "converted_byte"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080258": {
                    "1": "update_data_and_call_subfunctions",
                    "4": "update_data",
                    "9": "update_param",
                    "3": "update_param_values"
                },
                "param_1": {
                    "6": "data",
                    "1": "parameter_data",
                    "2": "param",
                    "8": "param_array",
                    "3": "param_list"
                },
                "param_2": {
                    "11": "param2",
                    "1": "value2",
                    "2": "param1",
                    "12": "value1"
                },
                "param_3": {
                    "2": "arg2",
                    "11": "param3",
                    "1": "val2",
                    "12": "value2"
                },
                "param_4": {
                    "1": "value4",
                    "11": "param4",
                    "2": "arg3",
                    "12": "value3"
                },
                "bVar1": {
                    "1": "current_value",
                    "5": "byte_val",
                    "22": "byte_value"
                },
                "uVar2": {
                    "1": "updated_value",
                    "6": "return_value",
                    "3": "ushort_value",
                    "2": "ushort_result",
                    "15": "result"
                },
                "iVar3": {
                    "1": "int_var",
                    "5": "loop_var",
                    "9": "return_value",
                    "4": "loop_variable",
                    "2": "result"
                },
                "uVar4": {
                    "11": "converted_byte",
                    "1": "uint_val",
                    "3": "uint_value",
                    "6": "converted_value",
                    "4": "converted_byte_value"
                },
                "FUN_0008021c": {
                    "1": "convert_value"
                },
                "FUN_00081318": {
                    "1": "change_state"
                },
                "thunk_FUN_00081714": {
                    "1": "get_thunck_value",
                    "2": "get_address"
                }
            }
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "process_data_000802da",
            "code": "\nint process_data_000802da(int input_data,uint value1,uint value2,ushort *data)\n\n{\n  char result;\n  byte temp_byte;\n  undefined undefined_var;\n  ushort ushort_var;\n  uint uint_var;\n  ushort *temp_ptr;\n  undefined byte1;\n  undefined byte2;\n  ushort ushort_value;\n  \n  byte1 = (undefined)value1;\n  byte2 = (undefined)(value1 >> 8);\n  ushort_value = (ushort)value2;\n  uint_var = value2 & 0xffff;\n  if (*(char *)(input_data + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(input_data + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((value1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(input_data + 9) = byte1;\n  *(undefined *)(input_data + 10) = byte2;\n  *(ushort **)(input_data + 0x4c) = data;\n  *(char *)(input_data + 0xb) = (char)(value1 >> 0x18);\n  *(char *)(input_data + 0xc) = (char)(value1 >> 0x10);\n  undefined_var = (undefined)(value2 >> 8);\n  switch(byte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(input_data + 0xd) = undefined_var;\n    break;\n  case 5:\n    ushort_var = *data;\n    if (ushort_var != 0) {\n      ushort_var = 1;\n    }\n    *(char *)(input_data + 0xd) = -(char)ushort_var;\n    uint_var = 0;\n    break;\n  case 6:\n    *(char *)(input_data + 0xd) = (char)(*data >> 8);\n    uint_var = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    temp_byte = (byte)(ushort_value >> 3) & 0xfe;\n    if ((value2 & 0xf) != 0) {\n      temp_byte = temp_byte + 1;\n    }\n    *(char *)(input_data + 0xe) = (char)value2;\n    *(undefined *)(input_data + 0xd) = undefined_var;\n    *(byte *)(input_data + 0xf) = temp_byte;\n    undefined_var = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(input_data + 0xd) = undefined_var;\n    *(char *)(input_data + 0xe) = (char)value2;\n    data = data + -1;\n    *(char *)(input_data + 0xf) = (char)uint_var * '\\x02';\n    *(undefined *)(input_data + 0x49) = 7;\n    temp_ptr = data + uint_var;\n    while (data != temp_ptr) {\n      temp_byte = *(byte *)(input_data + 0x49);\n      *(char *)(input_data + (uint)temp_byte + 9) = (char)(data[1] >> 8);\n      uint_var = temp_byte + 1 & 0xff;\n      *(char *)(input_data + 0x49) = (char)uint_var;\n      data = data + 1;\n      *(char *)(uint_var + input_data + 9) = (char)*data;\n      *(byte *)(input_data + 0x49) = temp_byte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(input_data + 0xe) = (char)uint_var;\n  undefined_var = 6;\nLAB_0008034a:\n  *(undefined *)(input_data + 0x49) = undefined_var;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(input_data);\n  *(undefined *)(input_data + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "param_1": "input_data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "cVar1": "result",
                "bVar2": "temp_byte",
                "uVar3": "undefined_var",
                "uVar4": "ushort_var",
                "uVar5": "uint_var",
                "puVar6": "temp_ptr",
                "local_1c": "byte1",
                "local_1b": "byte2",
                "local_18": "ushort_value",
                "FUN_000802da": "process_data_000802da"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "4": "input_buffer",
                    "5": "data",
                    "3": "input",
                    "1": "input_pointer",
                    "2": "data_buffer",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "input_value1",
                    "2": "data_length",
                    "11": "value1",
                    "4": "flags"
                },
                "param_3": {
                    "1": "size_param",
                    "4": "value",
                    "2": "length",
                    "11": "value2"
                },
                "param_4": {
                    "5": "data",
                    "4": "array",
                    "2": "buffer",
                    "1": "output_buffer",
                    "3": "input_array"
                },
                "cVar1": {
                    "17": "result",
                    "4": "return_value",
                    "1": "error",
                    "9": "error_code"
                },
                "bVar2": {
                    "6": "byte_value",
                    "10": "temp_byte",
                    "1": "temp_var1",
                    "3": "byte_val"
                },
                "uVar3": {
                    "1": "temp_var2",
                    "6": "temp",
                    "4": "temp_var",
                    "11": "undefined_var",
                    "2": "temp_byte2",
                    "5": "temp_undefined"
                },
                "uVar4": {
                    "1": "temp_variable3",
                    "3": "temp_value",
                    "2": "temp_val",
                    "10": "ushort_var",
                    "4": "temp_ushort"
                },
                "uVar5": {
                    "2": "temp3",
                    "3": "temp_u_int",
                    "1": "temp_variable4",
                    "5": "temp_uint",
                    "10": "uint_var"
                },
                "puVar6": {
                    "1": "ptr_array",
                    "6": "temp_pointer",
                    "2": "temp_array"
                },
                "local_1c": {
                    "1": "flags_lo",
                    "2": "local_var1",
                    "5": "byte1"
                },
                "local_1b": {
                    "2": "temp_byte2",
                    "1": "upper_byte",
                    "5": "byte2"
                },
                "local_18": {
                    "1": "value2_lsb",
                    "4": "ushort_value",
                    "2": "local_var3",
                    "3": "short_value"
                },
                "FUN_000802da": {
                    "1": "convert_param_to_value",
                    "13": "process_data"
                },
                "FUN_00080258": {
                    "1": "process_data"
                }
            }
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_increment_000803d4",
            "code": "\nundefined4 check_and_increment_000803d4(int input)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input + 10) << 0x18) < 0) {\n    *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_increment_000803d4",
                "param_1": "input",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000803d4": {
                    "4": "check_and_increment_counter",
                    "3": "check_and_increment_value",
                    "1": "check_character",
                    "2": "check_value_and_update_counter",
                    "5": "check_and_increment"
                },
                "param_1": {
                    "15": "input",
                    "1": "input_data",
                    "10": "input_value",
                    "3": "value"
                },
                "iVar1": {
                    "1": "loop_index",
                    "27": "index"
                },
                "*(byte *)(param_1 + 10)": {
                    "5": "value",
                    "7": "byte_value",
                    "2": "target_byte"
                },
                "*(short *)(param_1 + 0x54)": {
                    "1": "counter_val",
                    "13": "counter"
                },
                "&DAT_00084d10": {
                    "2": "lookup_table",
                    "3": "data_array",
                    "1": "array",
                    "7": "byte_array"
                },
                "0xfb": {
                    "1": "failure_value"
                },
                "8": {
                    "2": "array_length"
                },
                "*((byte *)(param_1 + 10) + 1)": {
                    "1": "shifted_byte_value"
                },
                "(uint)*(byte *)(param_1 + 10)": {
                    "1": "value"
                },
                "(int)((uint)*(byte *)(param_1 + 10) << 0x18)": {
                    "1": "shifted_value"
                },
                "0": {
                    "1": "success_return_value"
                }
            }
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid process_data_00080410(int data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int index;\n  byte counter;\n  uint converted_counter;\n  int array_address;\n  \n  counter = 0;\n  while( true ) {\n    converted_counter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data + 0xb) >> 1 <= converted_counter) break;\n    index = (converted_counter * 2 + 3 & 0xff) + data;\n    array_address = *(int *)(data + 0x4c);\n    result = FUN_000815f8(*(undefined *)(index + 9),*(undefined *)(index + 10),index,\n                         *(byte *)(data + 0xb),param4);\n    *(undefined2 *)(array_address + converted_counter * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "index",
                "bVar3": "counter",
                "uVar4": "converted_counter",
                "iVar5": "array_address"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080410": {
                    "1": "extract_and_store_data",
                    "20": "process_data",
                    "3": "reverse_and_store_data"
                },
                "param_1": {
                    "1": "input_array",
                    "9": "data",
                    "3": "input_data",
                    "5": "data_address",
                    "2": "input_param"
                },
                "param_2": {
                    "19": "param2",
                    "1": "param_2",
                    "4": "param1"
                },
                "param_3": {
                    "4": "param2",
                    "19": "param3",
                    "1": "param_y"
                },
                "param_4": {
                    "19": "param4",
                    "4": "param3",
                    "2": "param",
                    "1": "param_z"
                },
                "uVar1": {
                    "1": "func_result",
                    "24": "result",
                    "5": "return_value"
                },
                "iVar2": {
                    "1": "array_element_address",
                    "2": "var1",
                    "8": "offset",
                    "9": "index"
                },
                "bVar3": {
                    "1": "index",
                    "29": "counter"
                },
                "uVar4": {
                    "14": "converted_counter",
                    "1": "temp_counter",
                    "3": "byte_index",
                    "5": "index",
                    "2": "byte_value"
                },
                "iVar5": {
                    "2": "data_offset",
                    "1": "array_index",
                    "3": "array_address"
                },
                "FUN_000815f8": {
                    "1": "convert_value"
                }
            }
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint process_data_0008043e(int **data)\n\n{\n  char result;\n  uint function_result;\n  int *thunk_result;\n  int check_result;\n  uint value;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    function_result = (**(code **)(**data + 8))();\n    value = function_result & 0xff;\n  }\n  thunk_result = (int *)thunk_FUN_00081714();\n  if (param_condition < thunk_result) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < value) {\n    FUN_000801b0(data);\n    check_result = FUN_000803d4(data);\n    if (check_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        FUN_00080410(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)check_result;\n    }\n    goto skip_to_label;\n  }\n  result = '\\0';\nskip_to_label:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "function_result",
                "piVar3": "thunk_result",
                "iVar4": "check_result",
                "unaff_r6": "value",
                "LAB_000804a2": "skip_to_label",
                "param_1[0x17]": "param_condition"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008043e": {
                    "7": "process_data",
                    "2": "check_and_execute_function",
                    "1": "check_and_modify_param",
                    "3": "check_and_process_data"
                },
                "param_1": {
                    "2": "param",
                    "8": "data",
                    "1": "input_data",
                    "3": "data_ptr"
                },
                "cVar1": {
                    "1": "counter",
                    "24": "result",
                    "5": "return_value"
                },
                "uVar2": {
                    "5": "return_value",
                    "2": "status",
                    "1": "return_value1",
                    "10": "function_result",
                    "4": "result"
                },
                "piVar3": {
                    "7": "threshold",
                    "16": "thunk_result",
                    "1": "return_value2",
                    "2": "thunk_return_value"
                },
                "iVar4": {
                    "1": "result_code",
                    "3": "error",
                    "4": "error_code",
                    "2": "comparison_result",
                    "8": "check_result"
                },
                "unaff_r6": {
                    "4": "flag",
                    "2": "byte_value",
                    "1": "parameter",
                    "5": "value"
                },
                "thunk_FUN_00081714": {
                    "1": "get_thunk_value",
                    "3": "get_threshold"
                },
                "FUN_000801b0": {
                    "1": "perform_operation"
                },
                "FUN_000803d4": {
                    "1": "check_subfunction",
                    "2": "check_error"
                },
                "FUN_00080410": {
                    "1": "handle_condition",
                    "2": "perform_operation"
                },
                "LAB_000804a2": {
                    "1": "skip_to_label"
                },
                "param_1[0x17]": {
                    "1": "param_condition"
                },
                "param_1 + 2": {
                    "1": "error_code"
                },
                "(int)param_1 + 7": {
                    "1": "condition2",
                    "2": "counter"
                },
                "param_1 + 0x15": {
                    "1": "index"
                },
                "(int)param_1 + 0x49": {
                    "1": "char_result"
                },
                "FUN_00081714": {
                    "1": "get_thunk_result",
                    "2": "get_threshold"
                },
                "*(byte *)((int)param_1 + 10) - 3": {
                    "1": "condition"
                },
                "byte_VAR": {
                    "1": "parameter_byte_value"
                },
                "**param_1": {
                    "1": "value"
                }
            }
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int result;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  result = thunk_FUN_00081714();\n  DAT_200709e0 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070a48 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070934 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_200708c0 = result + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    handle_interrupt;\n    status 1;\n  }\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "iVar1": "result",
                "software_interrupt(0x3f)": "handle_interrupt",
                "software_interrupt": "trigger_interrupt",
                "return": "status"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000804a8": {
                    "3": "initialize_binary",
                    "1": "initialize_app",
                    "19": "initialize_system"
                },
                "FUN_00081318": {
                    "4": "set_initial_values",
                    "1": "update_data",
                    "3": "configure_device",
                    "13": "set_configuration",
                    "2": "set_values"
                },
                "thunk_FUN_00081714": {
                    "1": "get_adjusted_value",
                    "4": "get_initial_value",
                    "10": "get_random_value",
                    "2": "get_variable_value"
                },
                "FUN_00081210": {
                    "1": "configure_peripheral",
                    "3": "set_configuration",
                    "2": "set_device_option",
                    "8": "configure_device"
                },
                "FUN_00080164": {
                    "1": "set_initial_memory",
                    "3": "initialize_buffer",
                    "15": "initialize_memory",
                    "5": "initialize_data"
                },
                "FUN_00081714": {
                    "1": "get_random_number"
                },
                "param_1": {
                    "1": "configuration"
                },
                "param_2": {
                    "1": "flag2"
                },
                "param_3": {
                    "1": "config_param3",
                    "2": "param_3"
                },
                "iVar1": {
                    "2": "random_value",
                    "7": "result",
                    "1": "adjusted_value"
                },
                "iVar1 + 1000": {
                    "1": "random_offset"
                },
                "software_interrupt(0x3f)": {
                    "1": "handle_interrupt"
                },
                "software_interrupt": {
                    "2": "trigger_interrupt",
                    "1": "execute_system_call"
                },
                "&DAT_2007098a": {
                    "1": "device_id"
                },
                "&DAT_200708f2": {
                    "1": "device_name"
                },
                "&DAT_2007097d": {
                    "1": "device_type"
                },
                "&DAT_20070995": {
                    "1": "device_status"
                },
                "&DAT_20070996": {
                    "1": "device_code"
                },
                "&DAT_200709a4": {
                    "1": "device_version"
                },
                "&DAT_20070980": {
                    "1": "device_size"
                },
                "&DAT_200708cc": {
                    "1": "device_address"
                },
                "&DAT_20070989": {
                    "1": "device_length"
                },
                "&DAT_20070998": {
                    "1": "device_width"
                },
                "&DAT_200709a1": {
                    "1": "device_height"
                },
                "&DAT_200709b0": {
                    "1": "device_port"
                },
                "&DAT_200709a2": {
                    "1": "device_speed"
                },
                "&DAT_200709a8": {
                    "1": "device_buffer"
                },
                "&DAT_200709ac": {
                    "1": "device_limit1"
                },
                "&DAT_200709ad": {
                    "1": "device_limit2"
                },
                "&DAT_200709b4": {
                    "1": "device_data1"
                },
                "&DAT_200709b8": {
                    "1": "device_data2"
                },
                "&DAT_2007097c": {
                    "1": "device_setting1"
                },
                "&DAT_20070988": {
                    "1": "device_setting2"
                },
                "&DAT_20070994": {
                    "1": "device_setting3"
                },
                "&DAT_200709a0": {
                    "1": "device_setting4"
                },
                "&DAT_200709ba": {
                    "1": "device_setting5"
                },
                "&DAT_200709bc": {
                    "1": "device_setting6"
                },
                "&DAT_2007097e": {
                    "1": "device_status1"
                },
                "&DAT_200708f4": {
                    "1": "device_log"
                },
                "&DAT_200709ae": {
                    "1": "device_status2"
                },
                "&DAT_200709b9": {
                    "1": "device_value"
                },
                "&DAT_200709c0": {
                    "1": "device_data3"
                },
                "&DAT_200709e4": {
                    "1": "memory_buffer"
                },
                "0x4b00": {
                    "1": "memory_size"
                },
                "DAT_20070a3a": {
                    "1": "variable_2"
                },
                "DAT_200708c8": {
                    "1": "random_value_1"
                },
                "DAT_200709e0": {
                    "1": "random_value_2"
                },
                "DAT_20070a48": {
                    "1": "thunk_result_2"
                },
                "DAT_20070934": {
                    "1": "random_value_4"
                },
                "DAT_200708c0": {
                    "1": "random_value_5"
                },
                "DAT_20070948": {
                    "1": "value_26"
                },
                "DAT_2007098a": {
                    "1": "state_value_1"
                },
                "DAT_2007098c": {
                    "1": "state_value_2"
                },
                "DAT_20070990": {
                    "1": "data_value_1"
                },
                "DAT_200708f2": {
                    "1": "data_value_2"
                },
                "DAT_2007097d": {
                    "1": "data_value_3"
                },
                "DAT_20070995": {
                    "1": "constant_4"
                },
                "DAT_20070996": {
                    "1": "data_value_5"
                },
                "DAT_200709a4": {
                    "1": "constant_6"
                },
                "DAT_20070980": {
                    "1": "value_7"
                },
                "DAT_200708cc": {
                    "1": "data_value_8"
                },
                "DAT_20070989": {
                    "1": "constant_8"
                },
                "DAT_20070998": {
                    "1": "constant_9"
                },
                "DAT_200709a1": {
                    "1": "value_10"
                },
                "DAT_200709b0": {
                    "1": "constant_11"
                },
                "DAT_200709a2": {
                    "1": "data_value_13"
                },
                "DAT_20070904": {
                    "1": "data_value_14"
                },
                "DAT_200709ac": {
                    "1": "value_13"
                },
                "DAT_200709ad": {
                    "1": "data_value_16"
                },
                "DAT_200709b4": {
                    "1": "data_value_17"
                },
                "DAT_200709b8": {
                    "1": "value_15"
                },
                "DAT_2007097c": {
                    "1": "data_value_19"
                },
                "DAT_20070988": {
                    "1": "data_value_20"
                },
                "DAT_20070994": {
                    "1": "value_18"
                },
                "DAT_200709a0": {
                    "1": "constant_19"
                },
                "DAT_200709ba": {
                    "1": "value_20"
                },
                "DAT_200709bc": {
                    "1": "constant_21"
                },
                "DAT_2007097e": {
                    "1": "constant_22"
                },
                "DAT_200708f4": {
                    "1": "data_value_26"
                },
                "DAT_200709ae": {
                    "1": "constant_23"
                },
                "DAT_200709b9": {
                    "1": "value_24"
                },
                "DAT_200709c0": {
                    "1": "data_value_29"
                },
                "DAT_200709ce": {
                    "1": "data_value_30"
                },
                "DAT_200709e4": {
                    "1": "param_1_ptr"
                },
                "F_000804a8": {
                    "1": "initialize_system"
                },
                "DAT_20070984": {
                    "1": "pointer_constant_2"
                },
                "DAT_200709a8": {
                    "1": "pointer_constant_3"
                },
                "DAT_2007099c": {
                    "1": "pointer_constant_5"
                },
                "DAT_200708b8": {
                    "1": "constant_26"
                },
                "ERROR: <name>": {
                    "1": "handle_error"
                },
                "return": {
                    "1": "status"
                }
            }
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid process_data_000805d0(void)\n\n{\n  uint result;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int counter;\n  uint *ptr1;\n  undefined4 *ptr2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    result = thunk_FUN_00081714();\n    if (DAT_200708c8 < result) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptr2,ptr2[1],ptr2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (result = thunk_FUN_00081714(), DAT_200708c0 < result))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      counter = thunk_FUN_00081714();\n      DAT_200708c0 = counter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  result = thunk_FUN_00081714();\n  if (DAT_200709e0 < result) {\n    result1 = FUN_0008189c(DAT_20070940);\n    result2 = FUN_00081730(result1,DAT_200709c8);\n    result1 = DAT_200708c4;\n    DAT_20070930 = result2;\n    result3 = FUN_00081734(result2,DAT_200708c4);\n    result3 = FUN_00081944(result3,DAT_2007094c);\n    result3 = FUN_00081734(result3,DAT_20070914);\n    DAT_2007094c = result3;\n    result1 = FUN_00081730(result2,result1);\n    result1 = FUN_00081944(result1,DAT_200709c4);\n    result1 = FUN_00081730(result1,DAT_2007096c);\n    DAT_200709c4 = result1;\n    result4 = FUN_00081944(result2,DAT_20070a4c);\n    result4 = FUN_00081734(result4,result3);\n    FUN_00081734(result4,result1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = result2;\n    DAT_20070914 = result3;\n    DAT_2007096c = result1;\n    counter = thunk_FUN_00081714();\n    DAT_200709e0 = counter + DAT_20070970;\n  }\n  result1 = FUN_0008189c(DAT_20070970);\n  counter = FUN_00081ca8(DAT_2007091c,result1);\n  if (counter != 0) {\n    DAT_2007091c = result1;\n  }\n  counter = FUN_00081c94(DAT_2007091c,0);\n  if (counter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "iVar6": "counter",
                "puVar7": "ptr1",
                "puVar8": "ptr2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000805d0": {
                    "2": "update_status",
                    "1": "improve_code",
                    "7": "process_data",
                    "4": "calculate_metrics",
                    "3": "update_data"
                },
                "thunk_FUN_00081714": {
                    "2": "get_random_value",
                    "1": "get_current_value",
                    "11": "get_random_number"
                },
                "DAT_20070948": {
                    "1": "switch_case"
                },
                "DAT_200708c8": {
                    "1": "limit"
                },
                "DAT_200709e4": {
                    "1": "data_ptr"
                },
                "DAT_200709eb": {
                    "2": "flag"
                },
                "DAT_200708ce": {
                    "1": "param3"
                },
                "DAT_200708d0": {
                    "1": "data2"
                },
                "DAT_200708d8": {
                    "1": "data3"
                },
                "DAT_200708da": {
                    "1": "data4"
                },
                "DAT_200708dc": {
                    "1": "param7"
                },
                "DAT_200708de": {
                    "1": "param8"
                },
                "DAT_200708e4": {
                    "1": "param9"
                },
                "DAT_200708e8": {
                    "1": "param10"
                },
                "DAT_2007097c": {
                    "1": "val1"
                },
                "DAT_20070980": {
                    "1": "val2"
                },
                "DAT_20070984": {
                    "1": "val3"
                },
                "DAT_20070994": {
                    "1": "val4"
                },
                "DAT_20070998": {
                    "1": "val5"
                },
                "DAT_2007099c": {
                    "1": "val6"
                },
                "DAT_20070908": {
                    "1": "value5"
                },
                "DAT_20070906": {
                    "1": "val8"
                },
                "DAT_20070988": {
                    "1": "val9"
                },
                "DAT_200709a0": {
                    "1": "temp6"
                },
                "DAT_200709ac": {
                    "1": "val11"
                },
                "DAT_200709b0": {
                    "1": "val12"
                },
                "DAT_200709b4": {
                    "1": "val13"
                },
                "DAT_20070918": {
                    "1": "flag2"
                },
                "DAT_200709c8": {
                    "1": "data11"
                },
                "DAT_20070940": {
                    "1": "param1"
                },
                "DAT_200709c4": {
                    "1": "val15"
                },
                "DAT_20070974": {
                    "1": "val16"
                },
                "DAT_20070970": {
                    "1": "val17"
                },
                "DAT_20070924": {
                    "1": "val18"
                },
                "DAT_20070928": {
                    "1": "value2"
                },
                "DAT_20070978": {
                    "1": "updated_value1"
                },
                "DAT_2007090c": {
                    "1": "updated_value2"
                },
                "DAT_20070902": {
                    "1": "updated_value3"
                },
                "DAT_20070904": {
                    "1": "updated_value4"
                },
                "DAT_20070950": {
                    "1": "updated_value5"
                },
                "DAT_20070960": {
                    "1": "value8"
                },
                "DAT_20070964": {
                    "1": "updated_value7"
                },
                "DAT_20070920": {
                    "1": "switch_case2"
                },
                "DAT_20070938": {
                    "1": "val20"
                },
                "DAT_20070914": {
                    "1": "param14"
                },
                "DAT_2007096c": {
                    "1": "val22"
                },
                "DAT_200708c0": {
                    "1": "val23"
                },
                "DAT_200709e0": {
                    "1": "result3"
                },
                "DAT_20070930": {
                    "1": "result4"
                },
                "DAT_200708c4": {
                    "1": "val26"
                },
                "DAT_2007093c": {
                    "1": "val27"
                },
                "FUN_00081734": {
                    "1": "perform_operation_with_values",
                    "3": "perform_operation"
                },
                "FUN_00081d1c": {
                    "1": "perform_operation_with_parameter"
                },
                "FUN_00081944": {
                    "1": "calculate_value3"
                },
                "FUN_000802da": {
                    "2": "set_data",
                    "1": "calculate_data",
                    "4": "update_data"
                },
                "FUN_00081c94": {
                    "1": "perform_operation_c",
                    "2": "check_another_condition"
                },
                "FUN_0008043e": {
                    "1": "update_data",
                    "4": "reset_data",
                    "2": "print_data",
                    "3": "initialize_data"
                },
                "FUN_00081cd0": {
                    "1": "calculate_value6",
                    "2": "get_current_time"
                },
                "FUN_00081894": {
                    "1": "convert_value",
                    "7": "calculate_value_a",
                    "4": "calculate_value1"
                },
                "FUN_00081730": {
                    "1": "perform_operation",
                    "2": "calculate_value_c",
                    "3": "perform_operation_a"
                },
                "FUN_00081ca8": {
                    "1": "reverse_data",
                    "2": "check_value",
                    "3": "check_condition"
                },
                "FUN_0008189c": {
                    "1": "calculate_new_value",
                    "7": "calculate_value_b",
                    "4": "calculate_value2"
                },
                "uVar2": {
                    "1": "result",
                    "4": "result1",
                    "2": "temp_var1"
                },
                "uVar3": {
                    "1": "temp_result2",
                    "2": "value2",
                    "4": "temp2"
                },
                "uVar4": {
                    "2": "value3",
                    "1": "u_var4",
                    "4": "temp3"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "value4",
                    "4": "result4"
                },
                "iVar6": {
                    "1": "index",
                    "5": "temp_var",
                    "7": "counter"
                },
                "puVar7": {
                    "1": "ptr_var",
                    "6": "ptr1",
                    "3": "ptr_var1",
                    "4": "pointer1"
                },
                "puVar8": {
                    "4": "ptr_var2",
                    "1": "temp_ptr2",
                    "6": "ptr2"
                },
                "uVar1": {
                    "1": "thunk_value",
                    "2": "value1",
                    "9": "result"
                },
                "_DAT_2007097c": {
                    "1": "data10"
                },
                "DAT_20070944": {
                    "1": "param2"
                },
                "DAT_20070a4c": {
                    "1": "result1"
                },
                "DAT_2007094c": {
                    "1": "result2"
                },
                "DAT_200708ea": {
                    "1": "param12"
                },
                "_DAT_20070994": {
                    "1": "data4"
                },
                "DAT_20070910": {
                    "1": "result5"
                },
                "DAT_20070968": {
                    "1": "value10"
                },
                "DAT_200709c0": {
                    "1": "param16"
                },
                "DAT_200709cc": {
                    "1": "flag2"
                },
                "DAT_200708f6": {
                    "1": "result6"
                },
                "DAT_2007092c": {
                    "1": "counter2"
                }
            }
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initialize_data_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080a68": {
                    "29": "initialize_data",
                    "1": "initialize_game_data"
                },
                "FUN_00081682": {
                    "1": "set_null_pointer",
                    "3": "set_empty_data"
                },
                "FUN_00081d5c": {
                    "1": "update_data",
                    "7": "configure_data",
                    "3": "set_values",
                    "2": "initialize_memory"
                },
                "param_1": {
                    "3": "data_buffer",
                    "1": "value_array",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "length",
                    "2": "size",
                    "3": "value1"
                },
                "param_3": {
                    "1": "settings_value",
                    "2": "offset",
                    "3": "value2"
                },
                "DAT_200709e8": {
                    "1": "var1",
                    "2": "counter1",
                    "3": "counter"
                },
                "DAT_200709e9": {
                    "1": "var2",
                    "2": "index"
                },
                "DAT_200709ea": {
                    "1": "constant2"
                },
                "DAT_20070a3a": {
                    "4": "timeout",
                    "1": "delay"
                },
                "DAT_20070954": {
                    "1": "data_array"
                }
            }
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initialize_system_00080ae4(void)\n\n{\n  int index;\n  int next_index;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = relocation_array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  index = 0;\n  do {\n    next_index = index + 1;\n    FUN_00081318(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,relocation_array[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  end_function;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "next_index",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "return": "end_function"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080ae4": {
                    "1": "initialize_device",
                    "23": "initialize_system",
                    "3": "initialize_components"
                },
                "FUN_00080e18": {
                    "1": "set_flags",
                    "11": "set_mode",
                    "3": "set_system_mode",
                    "2": "set_system_parameter"
                },
                "FUN_00081066": {
                    "1": "disable_peripheral",
                    "2": "disable_interrupts",
                    "3": "reset_device",
                    "4": "reset_system"
                },
                "FUN_00081034": {
                    "1": "set_memory_range",
                    "2": "configure_peripheral",
                    "3": "configure_device"
                },
                "FUN_00081318": {
                    "1": "initialize_data",
                    "2": "initialize_variable",
                    "3": "process_data",
                    "9": "perform_operation"
                },
                "FUN_00080e9c": {
                    "1": "setup_initialization",
                    "4": "initialize_components",
                    "3": "setup_environment",
                    "2": "initialize_memory"
                },
                "FUN_00080da0": {
                    "1": "perform_operation",
                    "3": "configure_component",
                    "2": "configure_peripheral",
                    "4": "configure_device"
                },
                "FUN_00081d7c": {
                    "1": "setup_interrupt",
                    "5": "configure_system",
                    "2": "initialize_communication"
                },
                "FUN_00080f9c": {
                    "1": "execute_operation",
                    "8": "process_data",
                    "2": "configure_device"
                },
                "FUN_00081042": {
                    "1": "read_memory",
                    "8": "transfer_data",
                    "3": "copy_data",
                    "2": "process_data_range"
                },
                "param_1": {
                    "2": "param1",
                    "1": "index"
                },
                "param_2": {
                    "1": "flag",
                    "2": "param2"
                },
                "param_3": {
                    "1": "value",
                    "2": "param3"
                },
                "param_4": {
                    "2": "param4",
                    "1": "delay"
                },
                "iVar1": {
                    "1": "i",
                    "3": "counter",
                    "4": "index"
                },
                "iVar2": {
                    "1": "temp_counter",
                    "2": "next_counter",
                    "4": "next_index"
                },
                "FUN_0008106e": {
                    "1": "set_flags",
                    "3": "set_interrupt_mask",
                    "2": "disable_interrupts",
                    "5": "set_flag"
                },
                "Fun_00080e18": {
                    "1": "set_mode"
                },
                "Fun_00081066": {
                    "1": "cleanup_system"
                },
                "Fun_00081034": {
                    "1": "configure_system"
                },
                "Fun_00081318": {
                    "1": "process_data"
                },
                "Fun_00080e9c": {
                    "1": "initialize_components"
                },
                "Fun_00080da0": {
                    "1": "perform_operation"
                },
                "Fun_00081d7c": {
                    "1": "configure_components"
                },
                "Fun_00080f9c": {
                    "1": "load_data"
                },
                "Fun_00081042": {
                    "1": "transfer_data"
                },
                "_DAT_e000e014": {
                    "1": "offset_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "3": "relocation_array"
                },
                "DAT_e000ed23": {
                    "1": "data_value",
                    "2": "constant_value"
                },
                "_DAT_e000e018": {
                    "1": "variable1"
                },
                "_DAT_e000e010": {
                    "1": "variable2"
                },
                "_DAT_400e0ea0": {
                    "1": "memory_value1"
                },
                "_DAT_400e10a0": {
                    "1": "register2"
                },
                "_DAT_400e12a0": {
                    "1": "memory_value3"
                },
                "_DAT_400e14a0": {
                    "1": "register4"
                },
                "return": {
                    "1": "end_function"
                }
            }
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_components_00080c0c",
            "code": "\nvoid initialize_components_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_components_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080c0c": {
                    "1": "initialize_modules",
                    "2": "initialize_data",
                    "3": "initialize_data_structures",
                    "15": "initialize_components"
                },
                "undefined4 param_1": {
                    "1": "argument1"
                },
                "undefined4 param_2": {
                    "1": "argument2"
                },
                "undefined4 param_3": {
                    "1": "argument3"
                },
                "FUN_000813a8": {
                    "1": "ensure_initialized",
                    "5": "initialize_memory",
                    "4": "reset_data",
                    "2": "enable_device",
                    "3": "initialize_variable"
                },
                "FUN_000814e4": {
                    "1": "configure_block",
                    "2": "configure_device",
                    "4": "configure_module",
                    "3": "configure_memory"
                },
                "FUN_000815d4": {
                    "1": "initialize_data_structures",
                    "3": "initialize_module",
                    "2": "configure_memory"
                },
                "&DAT_20070b84": {
                    "1": "device1"
                },
                "&DAT_20070ad8": {
                    "1": "data2"
                },
                "&DAT_20070b60": {
                    "1": "memory1"
                },
                "&DAT_20070de4": {
                    "1": "device3"
                },
                "&DAT_20070e6c": {
                    "1": "memory_location4"
                },
                "&DAT_20070ef4": {
                    "1": "memory_location5"
                },
                "&DAT_20070a50": {
                    "1": "device6"
                },
                "&DAT_20070c84": {
                    "1": "data7"
                },
                "&DAT_20070d0c": {
                    "1": "device8"
                },
                "&DAT_20070c0c": {
                    "1": "memory1"
                },
                "0x40098000": {
                    "1": "constant3"
                },
                "0x11": {
                    "1": "constant4"
                },
                "&DAT_20070c34": {
                    "1": "memory2"
                },
                "0x4009c000": {
                    "1": "source2"
                },
                "0x12": {
                    "1": "value2"
                },
                "&DAT_20070c5c": {
                    "1": "memory3"
                },
                "0x400a4000": {
                    "1": "config4"
                },
                "0x14": {
                    "1": "constant8"
                },
                "param_1": {
                    "2": "config_param1",
                    "1": "first_param",
                    "3": "unused_param1",
                    "6": "arg1",
                    "8": "param1"
                },
                "param_2": {
                    "4": "address",
                    "8": "param2",
                    "2": "param_2",
                    "1": "start_address",
                    "3": "unused_param2",
                    "6": "arg2"
                },
                "param_3": {
                    "2": "config_param3",
                    "8": "param3",
                    "1": "third_param",
                    "4": "size",
                    "6": "arg3"
                },
                "param_4": {
                    "2": "value2",
                    "1": "length"
                },
                "DAT_20070b84": {
                    "1": "data_structure1"
                },
                "DAT_20070ad8": {
                    "1": "subsys_data2"
                },
                "DAT_20070b60": {
                    "1": "data_structure3"
                },
                "DAT_20070de4": {
                    "1": "hardware_data3"
                },
                "DAT_20070e6c": {
                    "1": "hardware_data4"
                },
                "DAT_20070ef4": {
                    "1": "memory_location5"
                },
                "DAT_20070a50": {
                    "1": "data_structure7"
                },
                "DAT_20070c84": {
                    "1": "data_structure8"
                },
                "DAT_20070d0c": {
                    "1": "data_structure9"
                },
                "DAT_20070c0c": {
                    "1": "hardware_data1"
                },
                "DAT_20070c34": {
                    "1": "memory_configuration3"
                },
                "DAT_20070c5c": {
                    "1": "hardware_data3"
                },
                "0x400e0800": {
                    "1": "config1"
                },
                "8": {
                    "1": "constant2"
                },
                "FUN_000813a8_2": {
                    "1": "initialize_memory"
                }
            }
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid check_and_execute_functions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080ce0": {
                    "1": "initialize_components",
                    "3": "check_and_execute_sub_functions",
                    "17": "check_and_execute_functions"
                },
                "iVar1": {
                    "25": "result",
                    "1": "return_value"
                },
                "FUN_000813e4": {
                    "1": "check_validity",
                    "2": "is_data_valid",
                    "3": "check_condition",
                    "13": "check_data"
                },
                "FUNC_00080aa8": {
                    "4": "execute_function_c",
                    "1": "execute_func_a",
                    "2": "execute_function1",
                    "6": "execute_function_a"
                },
                "FUNC_00080ab8": {
                    "2": "execute_function_2",
                    "1": "handle_dat_20070c0c",
                    "4": "execute_function_d",
                    "6": "execute_function_b"
                },
                "FUNC_00080aba": {
                    "6": "execute_function_c",
                    "1": "initialize_object_a",
                    "4": "execute_function_a",
                    "2": "execute_function3"
                },
                "FUNC_00080abc": {
                    "1": "initialize_object_b",
                    "6": "execute_function_d",
                    "2": "execute_function4",
                    "4": "execute_function_b"
                },
                "&DAT_20070b60": {
                    "1": "component1"
                },
                "&DAT_20070c0c": {
                    "1": "component2"
                },
                "&DAT_20070c34": {
                    "1": "component3"
                },
                "&DAT_20070c5c": {
                    "1": "data_4"
                },
                "param_1": {
                    "1": "data"
                }
            }
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_00080d2e",
            "code": "\nvoid update_parameter_00080d2e(int base_address,undefined4 option,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto default_case;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ndefault_case:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_00080d2e",
                "param_1": "base_address",
                "param_2": "option",
                "param_3": "new_value",
                "uVar1": "updated_value",
                "switchD_00080d34_caseD_6": "default_case"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d2e": {
                    "2": "update_param_value",
                    "6": "update_parameter",
                    "1": "update_parameters",
                    "5": "update_param",
                    "4": "update_parameter_value",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_address",
                    "21": "base_address"
                },
                "param_2": {
                    "5": "mode",
                    "1": "operation_code",
                    "2": "command",
                    "6": "operation_type"
                },
                "param_3": {
                    "1": "value_to_update",
                    "17": "new_value",
                    "9": "value"
                },
                "uVar1": {
                    "1": "new_data",
                    "25": "updated_value",
                    "3": "result"
                },
                "switchD_00080d34_caseD_6": {
                    "2": "default_case"
                }
            }
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_parameters_00080d54",
            "code": "\nvoid update_parameters_00080d54(undefined4 *output_array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  params_array[17] = value;\n  if (is_negative) {\n    params_array[25] = value;\n  }\n  if (!is_negative) {\n    params_array[24] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    params_array[8] = value;\n  }\n  if (!is_negative) {\n    params_array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    params_array[32] = value;\n  }\n  params_array[5] = value;\n  *output_array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "output_array",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "param_1[0x11]": "params_array[17]",
                "param_1[0x19]": "params_array[25]",
                "param_1[0x18]": "params_array[24]",
                "param_1[8]": "params_array[8]",
                "param_1[9]": "params_array[9]",
                "param_1[0x20]": "params_array[32]",
                "param_1[5]": "params_array[5]",
                "[0x11]": "parameter1",
                "[0x18]": "parameter2",
                "[0x19]": "parameter3",
                "[8]": "parameter4",
                "[9]": "parameter5",
                "[0x20]": "parameter6",
                "[5]": "parameter7"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d54": {
                    "4": "update_params",
                    "1": "set_param_values",
                    "2": "update_param_values",
                    "5": "update_parameters"
                },
                "param_1": {
                    "7": "output_array",
                    "5": "parameters",
                    "2": "data_array",
                    "1": "result_array",
                    "4": "param_array",
                    "3": "params_array"
                },
                "param_2": {
                    "1": "new_parameter_value",
                    "9": "new_value",
                    "2": "value_to_set",
                    "16": "value"
                },
                "param_3": {
                    "2": "bit_mask",
                    "4": "bitmask",
                    "18": "flags",
                    "1": "bit_flags"
                },
                "bVar1": {
                    "1": "is_negative_condition",
                    "19": "is_negative",
                    "5": "is_negative_flag",
                    "3": "is_flag_set"
                },
                "0x11": {
                    "1": "first_parameter_index",
                    "4": "index1"
                },
                "0x19": {
                    "3": "index2",
                    "1": "index_3"
                },
                "0x18": {
                    "1": "destination_index3",
                    "3": "index3"
                },
                "8": {
                    "1": "destination_index4",
                    "4": "index4"
                },
                "9": {
                    "1": "destination_index5",
                    "4": "index5"
                },
                "0x20": {
                    "1": "twentieth_parameter_index",
                    "5": "index6"
                },
                "5": {
                    "5": "index7",
                    "1": "param5"
                },
                "param_1[0x11]": {
                    "1": "result_array[17]",
                    "2": "params_array[17]"
                },
                "param_1[0x19]": {
                    "2": "params_array[25]",
                    "1": "result_array[25]"
                },
                "param_1[0x18]": {
                    "2": "params_array[24]",
                    "1": "result_array[24]"
                },
                "param_1[8]": {
                    "2": "output_array[8]",
                    "1": "parameters[eighth_parameter_index]"
                },
                "param_1[9]": {
                    "1": "parameters[ninth_parameter_index]",
                    "2": "output_array[9]"
                },
                "param_1[0x20]": {
                    "2": "output_array[32]",
                    "1": "result_array[32]"
                },
                "param_1[5]": {
                    "1": "parameters[fifth_parameter_index]",
                    "2": "params_array[5]"
                },
                "*param_1": {
                    "1": "result",
                    "2": "output_array[0]"
                },
                "[0x11]": {
                    "1": "parameter1"
                },
                "[0x18]": {
                    "1": "parameter2"
                },
                "[0x19]": {
                    "1": "parameter3"
                },
                "[8]": {
                    "1": "parameter4"
                },
                "[9]": {
                    "1": "parameter5"
                },
                "[0x20]": {
                    "1": "parameter6"
                },
                "[5]": {
                    "1": "parameter7"
                }
            }
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_params_00080d7a",
            "code": "\nvoid update_params_00080d7a(undefined4 *param_array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  output_array[0x11] = value;\n  if (condition3 == 0) {\n    output_array[0x18] = value;\n  }\n  else {\n    output_array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    output_array[0x15] = value;\n  }\n  else {\n    output_array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    output_array[0xd] = value;\n  }\n  else {\n    params_array[12] = value;\n  }\n  output_array[4] = value;\n  *param_array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_params_00080d7a",
                "param_1": "param_array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3",
                "param_1[0x11]": "output_array[0x11]",
                "param_1[0x18]": "output_array[0x18]",
                "param_1[0x19]": "output_array[0x19]",
                "param_1[0x15]": "output_array[0x15]",
                "param_1[0x14]": "output_array[0x14]",
                "param_1[0xd]": "output_array[0xd]",
                "param_1[0xc]": "params_array[12]",
                "param_1[4]": "output_array[4]"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d7a": {
                    "1": "set_values",
                    "4": "set_param_values",
                    "2": "update_parameters",
                    "3": "update_param_values"
                },
                "param_1": {
                    "4": "array",
                    "2": "params_array",
                    "1": "result",
                    "6": "param_array",
                    "5": "parameters"
                },
                "param_2": {
                    "3": "param_value",
                    "12": "new_value",
                    "1": "new_param",
                    "14": "value"
                },
                "param_3": {
                    "8": "condition1",
                    "1": "is_zero_param",
                    "6": "flag1",
                    "7": "is_param3_zero",
                    "2": "condition_1"
                },
                "param_4": {
                    "8": "condition2",
                    "1": "is_zero2",
                    "7": "is_param4_zero",
                    "2": "condition_2",
                    "6": "flag2"
                },
                "param_5": {
                    "7": "is_param5_zero",
                    "1": "is_zero_3",
                    "6": "flag3",
                    "8": "condition3",
                    "2": "condition_3"
                },
                "param_1[0x11]": {
                    "1": "params_array[17]",
                    "2": "output_array[0x11]"
                },
                "param_1[0x18]": {
                    "2": "output_array[0x18]",
                    "1": "params_array[24]"
                },
                "param_1[0x19]": {
                    "2": "output_array[0x19]",
                    "1": "params_array[25]"
                },
                "param_1[0x15]": {
                    "1": "params_array[21]",
                    "2": "output_array[0x15]"
                },
                "param_1[0x14]": {
                    "2": "output_array[0x14]",
                    "1": "params_array[20]"
                },
                "param_1[0xd]": {
                    "2": "output_array[0xd]",
                    "1": "params_array[13]"
                },
                "param_1[0xc]": {
                    "1": "params_array[12]"
                },
                "param_1[4]": {
                    "1": "params_array[4]",
                    "2": "output_array[4]"
                },
                "0x11": {
                    "1": "param_1_value"
                },
                "0x15": {
                    "1": "flag2_param_1"
                },
                "0x18": {
                    "1": "flag3_param_1"
                },
                "0x19": {
                    "1": "index4"
                },
                "0xc": {
                    "1": "index5"
                },
                "0xd": {
                    "1": "index6"
                },
                "param_1[Oxc]": {
                    "1": "output_array[0xc]"
                },
                "0x14": {
                    "1": "flag2_param_2"
                }
            }
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "process_data_00080da0",
            "code": "\nundefined4 process_data_00080da0(int data,int type,undefined4 value,uint flag)\n\n{\n  bool is_negative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    FUN_00080d2e(data,type,value);\n    is_negative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = value;\n    if (is_negative) {\n      *(undefined4 *)(data + 100) = value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(data + 0x60) = value;\n    }\n    break;\n  case 3:\n    FUN_00080d54(data,value,flag,0x80d55,data);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(data,value,type == 5,(flag << 0x1d) >> 0x1f,flag & 1,type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "is_negative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080da0": {
                    "1": "update_values",
                    "9": "process_data",
                    "2": "update_data",
                    "4": "process_function"
                },
                "param_1": {
                    "9": "data",
                    "1": "memory_address",
                    "2": "config_ptr"
                },
                "param_2": {
                    "1": "arg2",
                    "7": "type",
                    "4": "param_type",
                    "6": "option",
                    "5": "value",
                    "2": "operation_type"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "is_type5",
                    "5": "new_value",
                    "15": "value"
                },
                "param_4": {
                    "12": "flag",
                    "1": "bit_mask",
                    "2": "bit1",
                    "8": "flags"
                },
                "bVar1": {
                    "27": "is_negative",
                    "3": "is_flag_negative"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "main_value",
                    "2": "result1"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "value_ptr2",
                    "2": "result2"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "value_ptr3",
                    "2": "result3"
                },
                "FUN_00080d2e": {
                    "1": "update_values",
                    "4": "update_data",
                    "2": "update_value"
                },
                "FUN_00080d54": {
                    "1": "perform_operation",
                    "2": "process_option3",
                    "3": "process_type3",
                    "4": "handle_type3"
                },
                "FUN_00080d7a": {
                    "1": "process_data_with_options",
                    "2": "handle_type4_and5"
                },
                "0x80d55": {
                    "1": "flag_value",
                    "2": "constant_value"
                },
                "(param_4 << 0x1d) >> 0x1f": {
                    "1": "flag2",
                    "3": "shifted_value"
                },
                "param_4 & 1": {
                    "1": "bitwise_and_param4",
                    "2": "bitwise_value"
                },
                "param_1 + 0x44": {
                    "1": "new_value_address1",
                    "2": "output1"
                },
                "param_1 + 100": {
                    "1": "data_address2",
                    "2": "output2"
                },
                "param_1 + 0x60": {
                    "2": "output3",
                    "1": "data_address3"
                },
                "param_5": {
                    "1": "lsb",
                    "2": "type"
                },
                "param_2 == 5": {
                    "1": "is_five_option",
                    "2": "is_type5"
                },
                "param_1+0x44": {
                    "1": "data_address1"
                },
                "param_1+100": {
                    "1": "data_address2"
                },
                "param_1+0x60": {
                    "1": "data_address3"
                },
                "param_4 << 0x1d": {
                    "1": "shifted_param4_1"
                }
            }
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_and_00080e04",
            "code": "\nuint check_bitwise_and_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e04": {
                    "1": "check_matching_bits",
                    "2": "check_mask",
                    "4": "check_intersection",
                    "5": "check_bitwise_and"
                },
                "param_1": {
                    "2": "data_address",
                    "1": "input_param",
                    "6": "input_value",
                    "3": "base_address"
                },
                "param_2": {
                    "21": "mask",
                    "1": "input_2",
                    "2": "bitmask",
                    "3": "bit_mask"
                },
                "uVar1": {
                    "1": "bitwise_result",
                    "27": "result"
                }
            }
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint value)\n\n{\n  uint bit_mask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bit_mask = 1 << (value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e18": {
                    "1": "check_bit_value",
                    "4": "check_and_update_bit",
                    "17": "check_and_set_bit",
                    "2": "check_bit_and_set"
                },
                "param_1": {
                    "4": "input",
                    "7": "input_value",
                    "6": "bit_position",
                    "2": "bit_index",
                    "10": "value",
                    "1": "param"
                },
                "uVar1": {
                    "29": "bit_mask",
                    "1": "shifted_bit"
                },
                "_DAT_400e0618": {
                    "1": "bitmask1"
                },
                "_DAT_400e0610": {
                    "1": "modified_bits1"
                },
                "_DAT_400e0708": {
                    "1": "bitmask2"
                },
                "_DAT_400e0700": {
                    "1": "modified_bits2"
                }
            }
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initialize_memory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  offset_value = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "offset_value",
                "Elf32_Rel_ARRAY_20070000[6]": "elf_relocation"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e9c": {
                    "5": "initialize_data",
                    "1": "set_initial_values",
                    "2": "initialize_registers",
                    "19": "initialize_memory"
                },
                "_DAT_400e0a00": {
                    "1": "base_memory_address",
                    "3": "memory_size1",
                    "2": "memory_base_address"
                },
                "_DAT_400e0c00": {
                    "1": "limit",
                    "3": "memory_size2",
                    "2": "memory_end_address"
                },
                "_DAT_400e0620": {
                    "1": "register_value",
                    "2": "memory_value",
                    "5": "shifted_value",
                    "3": "data_value"
                },
                "_DAT_400e0668": {
                    "3": "temp_value",
                    "1": "bit_mask",
                    "5": "temp",
                    "2": "temp_value2"
                },
                "_DAT_400e0628": {
                    "1": "temp_value3",
                    "2": "value1"
                },
                "_DAT_400e0630": {
                    "1": "limit",
                    "2": "value2"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array20070000",
                    "3": "rel_array",
                    "5": "relocation_array",
                    "2": "elf_rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "elf_offset"
                },
                "_fun_name": {
                    "1": "initialize_data"
                },
                "_var_1": {
                    "1": "data_ptr_1"
                },
                "_var_2": {
                    "1": "data_ptr_2"
                },
                "_var_3": {
                    "1": "shifted_value"
                },
                "_var_4": {
                    "1": "offset"
                },
                "_var_5": {
                    "1": "loop_counter"
                },
                "Elf32_Rel_ARRAY_20070000[6]": {
                    "1": "elf_relocation"
                }
            }
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *output,uint input_size,int multiplier,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  quotient = input_size / (uint)(multiplier * 2);\n  if (input_size == multiplier * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "output",
                "param_2": "input_size",
                "param_3": "multiplier",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080f9c": {
                    "1": "calculation_function",
                    "2": "find_threshold",
                    "18": "calculate_threshold"
                },
                "param_1": {
                    "4": "threshold",
                    "3": "output_values",
                    "1": "output_buffer",
                    "10": "output",
                    "8": "result"
                },
                "param_2": {
                    "1": "value",
                    "2": "total_size",
                    "6": "input_value",
                    "13": "input_size",
                    "4": "size"
                },
                "param_3": {
                    "1": "factor_1",
                    "3": "factor1",
                    "2": "factor",
                    "5": "divisor",
                    "7": "multiplier"
                },
                "param_4": {
                    "5": "threshold",
                    "1": "factor",
                    "3": "factor2",
                    "6": "multiplier"
                },
                "uVar1": {
                    "2": "divisor",
                    "1": "num_executions",
                    "14": "quotient"
                },
                "uVar2": {
                    "1": "counter",
                    "3": "i",
                    "24": "index"
                },
                "local_58": {
                    "19": "thresholds",
                    "1": "threshold_array",
                    "8": "threshold_values"
                }
            }
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_flags_00081034",
            "code": "\nvoid update_flags_00081034(int base_address,uint new_value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = new_value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081034": {
                    "1": "modify_bitwise_operations",
                    "3": "update_register",
                    "2": "update_config",
                    "4": "update_flags"
                },
                "param_1": {
                    "1": "memory_address",
                    "4": "data_address",
                    "10": "base_address",
                    "2": "input_address"
                },
                "param_2": {
                    "1": "value1",
                    "8": "new_value",
                    "2": "flag_value",
                    "7": "value"
                },
                "param_3": {
                    "11": "flag",
                    "1": "flag_value",
                    "8": "bit_value",
                    "4": "bit_mask"
                },
                "(param_1 + 4)": {
                    "1": "address_to_update"
                },
                "(param_3 & 1)": {
                    "1": "bit_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "existing_value",
                    "2": "register_value",
                    "11": "current_value"
                },
                "param_4": {
                    "1": "existing_flags"
                },
                "tempVariable1": {
                    "1": "mask"
                },
                "tempVariable2": {
                    "1": "shifted_value"
                },
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "updated_flag",
                    "3": "updated_value"
                },
                "param_1 + 4": {
                    "1": "current_value_address",
                    "2": "address_to_update"
                },
                "param_3 & 1": {
                    "1": "bit",
                    "2": "flag_bit"
                },
                "(param_3 & 1) << 7": {
                    "1": "shifted_bit",
                    "2": "masked_flag",
                    "3": "flagged_value"
                },
                "PTR_": {
                    "2": ""
                },
                "DAT_": {
                    "2": ""
                },
                "*(uint *)(dataAddress + 4)": {
                    "1": "current_value"
                },
                "*(uint *)(dataAddress + 4) | (param_3 & 1) << 7": {
                    "1": "updated_value"
                },
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "updated_value"
                },
                "param_3 & 1) << 7": {
                    "1": "flag_bit_shifted"
                },
                "param_2 | *(uint *)(param_1 + 4)": {
                    "1": "combined_value"
                }
            }
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid update_flags_00081042(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081042": {
                    "1": "update_parameters",
                    "3": "update_memory",
                    "2": "update_configuration",
                    "6": "update_flags"
                },
                "param_1": {
                    "2": "config_ptr",
                    "4": "register_address",
                    "1": "memory_address",
                    "6": "base_address",
                    "3": "data_address"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "field_value",
                    "5": "value",
                    "12": "value1"
                },
                "param_3": {
                    "1": "current_value",
                    "3": "mask",
                    "4": "mask1",
                    "12": "value2"
                },
                "param_4": {
                    "5": "mask2",
                    "2": "flag",
                    "1": "flag2",
                    "12": "value3"
                },
                "PTR_": {
                    "2": ""
                },
                "DAT_": {
                    "2": ""
                },
                "param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c": {
                    "1": "updated_value"
                },
                "param_1 + 4": {
                    "1": "updated_address"
                },
                "value1 & 0xf": {
                    "1": "masked_value"
                },
                "value3 & 3": {
                    "1": "masked_value2"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "flags"
                },
                "&(bitMask2, 0xf) << 0x18": {
                    "1": "masked_bit1"
                },
                "(bitMask3 & 3) << 0x1c": {
                    "1": "masked_bit2"
                },
                "param_2 & 0xf": {
                    "1": "masked_bit"
                },
                "param_4 & 3": {
                    "1": "flag_bit"
                },
                "(param_2 & 0xf) << 0x18": {
                    "1": "shifted_bit_mask"
                },
                "(param_4 & 3) << 0x1c": {
                    "1": "shifted_flag_bit"
                },
                "(param_1 + 4)": {
                    "1": "field_pointer"
                },
                "(param_2 & 0xf)": {
                    "1": "masked_data_modifier1"
                },
                "(param_4 & 3)": {
                    "1": "masked_data_modifier2"
                },
                "param_5": {
                    "1": "bit_offset"
                },
                "param_6": {
                    "1": "target_bits"
                },
                "param_7": {
                    "1": "register_bits"
                }
            }
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid set_bit_0008105c(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position bitwise_and 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position",
                "&": "bitwise_and"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008105c": {
                    "13": "set_bit",
                    "1": "set_bit_in_array",
                    "3": "set_bit_in_integer"
                },
                "param_1": {
                    "3": "address",
                    "1": "integer_address",
                    "22": "base_address"
                },
                "param_2": {
                    "23": "bit_position",
                    "6": "bit_index",
                    "1": "bit_number"
                },
                "param_2 & 0xff": {
                    "1": "bit_index"
                },
                "(param_1 + 0x14)": {
                    "1": "address_to_set"
                },
                "0x14": {
                    "1": "bit_mask",
                    "2": "offset"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "<<": {
                    "1": "left_shift"
                },
                "param_1 + 0x14": {
                    "1": "target_address"
                },
                "*PTR_BASE_ADDRESS": {
                    "1": "base_address_ptr"
                },
                "*PTR_BIT_POSITION": {
                    "1": "bit_position_ptr"
                },
                "*baseAddress + 0x14": {
                    "1": "result"
                }
            }
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_default_value_00081066",
            "code": "\nvoid set_default_value_00081066(int input_param)\n\n{\n  *(undefined4 *)(input_param + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081066": {
                    "2": "initialize_value",
                    "1": "initialize_parameter",
                    "10": "set_default_value"
                },
                "param_1": {
                    "2": "error_code",
                    "1": "param",
                    "3": "object_address",
                    "4": "input_param"
                },
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "parameter_value",
                    "2": "target_address"
                },
                "0xffff": {
                    "3": "default_value",
                    "1": "max_value"
                },
                "0x14": {
                    "3": "offset"
                },
                "<original_variable_name_1>": {
                    "1": "parameter_memory"
                }
            }
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid set_param_value_0008106e(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008106e": {
                    "1": "set_param_2",
                    "3": "set_param",
                    "16": "set_param_value"
                },
                "param_1": {
                    "1": "parameter_address",
                    "2": "obj_address",
                    "15": "object_address",
                    "11": "base_address"
                },
                "param_2": {
                    "5": "param_value",
                    "14": "new_value",
                    "9": "value",
                    "1": "parameter_value"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "memory_address"
                },
                "param_1 + 0x28": {
                    "1": "target_address"
                },
                "<original_function_name>": {
                    "1": "set_parameter_value"
                },
                "<param_1>": {
                    "1": "parameter_address"
                },
                "<param_2>": {
                    "1": "parameter_value"
                },
                "0x28": {
                    "1": "offset"
                }
            }
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nvoid initialize_00081184(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081184": {
                    "13": "initialize",
                    "4": "get_default_value",
                    "2": "initialize_application",
                    "1": "initialize_value",
                    "3": "get_zero"
                },
                "undefined4": {
                    "1": "status",
                    "9": "void",
                    "3": "int"
                },
                "Return value": {
                    "1": "status"
                },
                "return": {
                    "3": "result"
                },
                "UNDEFINED": {
                    "1": "result"
                },
                "ret_val": {
                    "1": "result"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<no_changes>": {
                    "1": "<no_changes>"
                },
                "<original_variable_name>": {
                    "1": "result"
                }
            }
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculate_sum_0008118c(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previous_value = DAT_20071180;\n  DAT_20071180 = input_value + DAT_20071180;\n  return previous_value;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input_value",
                "iVar1": "previous_value"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008118c": {
                    "15": "calculate_sum",
                    "1": "calculate_new_data_address",
                    "9": "calculate_new_value",
                    "2": "calculate_updated_value"
                },
                "param_1": {
                    "2": "num",
                    "20": "input_value",
                    "1": "number",
                    "3": "input_number"
                },
                "iVar1": {
                    "1": "old_value",
                    "5": "previous_sum",
                    "19": "previous_value",
                    "2": "result"
                },
                "DAT_20071180": {
                    "1": "base_address",
                    "3": "sum"
                },
                "0x200711c0": {
                    "1": "initial_value"
                }
            }
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_error_code_000811ae",
            "code": "\nuint32_t get_error_code_000811ae(void)\n\n{\n  result 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "undefined4": "uint32_t",
                "return": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811ae": {
                    "4": "get_default_value",
                    "11": "get_error_code",
                    "5": "get_negative_one",
                    "1": "initialize_return_value",
                    "6": "get_return_value"
                },
                "undefined4": {
                    "1": "error_status",
                    "3": "int",
                    "8": "uint32_t"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "return": {
                    "1": "result"
                },
                "PTR_FUN_000811ae": {
                    "1": "ptr_default_value"
                },
                "DAT_000811ae": {
                    "1": "error_code"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nuint32_t initialize_memory_000811b4(uint32_t param1,int memory_address)\n\n{\n  *(uint32_t *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memory_address",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811b4": {
                    "1": "set_memory_flag",
                    "3": "set_memory_size",
                    "2": "set_page_size",
                    "5": "set_memory_page_size",
                    "12": "initialize_memory"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "value",
                    "8": "param1",
                    "5": "param"
                },
                "param_2": {
                    "5": "address",
                    "1": "page_index",
                    "15": "memory_address",
                    "3": "buffer"
                },
                "param_2 + 4": {
                    "1": "ptr_plus_4"
                },
                "0x2000": {
                    "1": "default_memory_size"
                },
                "buffer": {
                    "1": "buffer"
                },
                "result": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "1": "page_constants"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_address",
                    "2": "memory_value"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            }
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "get_return_value_000811be",
            "code": "\nint get_return_value_000811be(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "get_return_value_000811be",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811be": {
                    "3": "initialize",
                    "1": "check_status",
                    "8": "get_one",
                    "11": "get_return_value",
                    "2": "initialize_value"
                },
                "DAT_00081200": {
                    "1": "result"
                },
                "undefined4": {
                    "3": "void",
                    "9": "int",
                    "1": "unsigned_int"
                },
                "return": {
                    "1": "return_value",
                    "7": "result"
                },
                "<original_variable_name_1>": {
                    "1": "return_value",
                    "3": "<new_variable_name_1>"
                },
                "": {
                    "1": ""
                },
                "return type": {
                    "1": "undefined4"
                },
                "original_parameter_name_1": {
                    "1": "n/a"
                },
                "original_variable_name_1": {
                    "1": "n/a"
                },
                "return variable": {
                    "1": "result"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                }
            }
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nvoid initialize_000811c2(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811c2": {
                    "1": "initialize_value",
                    "10": "initialize",
                    "4": "get_return_value",
                    "2": "get_zero"
                },
                "undefined4": {
                    "10": "void",
                    "1": "retval"
                },
                "": {
                    "1": ""
                },
                "return_value": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "1": "error_code"
                },
                "DAT_XXXXXXXX": {
                    "1": "constant"
                },
                "PTR_XXXXXXXX": {
                    "1": "pointer"
                },
                "return": {
                    "1": "result"
                },
                "undefined4_FUN_000811c2": {
                    "1": "initialize_result"
                },
                "original_parameter_name": {
                    "1": "new_parameter_name"
                },
                "original_variable_name": {
                    "1": "new_variable_name"
                },
                "zero": {
                    "1": "result"
                }
            }
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_default_value_000811c6",
            "code": "\nvoid get_default_value_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_default_value_000811c6",
                "undefined4": "void"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811c6": {
                    "1": "calculate_return_value",
                    "7": "get_default_value",
                    "2": "get_zero",
                    "5": "get_return_value"
                },
                "<original_variable_name_1>": {
                    "1": "result",
                    "2": "<new_variable_name_1>"
                },
                "undefined4": {
                    "1": "int",
                    "4": "void"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "return_value": {
                    "1": "status"
                },
                "<original_function_name>": {
                    "1": "initialize_game"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                }
            }
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copy_bytes_000811cc(undefined4 param1,int byte_array,uint length)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)length; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(byte_array + i);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param1",
                "param_2": "byte_array",
                "param_3": "length",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811cc": {
                    "1": "convert_to_unsigned",
                    "8": "copy_bytes",
                    "2": "copy_byte_array",
                    "5": "convert_bytes_to_u_int"
                },
                "param_1": {
                    "1": "input_pointer",
                    "5": "arg1",
                    "4": "dest",
                    "6": "param1",
                    "3": "param"
                },
                "param_2": {
                    "1": "data_address",
                    "2": "arg2",
                    "4": "source",
                    "9": "byte_array",
                    "3": "src"
                },
                "param_3": {
                    "7": "num_bytes",
                    "2": "byte_count",
                    "1": "arg3",
                    "4": "size",
                    "10": "length"
                },
                "iVar1": {
                    "1": "iterator",
                    "15": "i",
                    "12": "index"
                },
                "_DAT_400e0814": {
                    "1": "unused_variable"
                },
                "_DAT_400e081c": {
                    "1": "converted_value"
                }
            }
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_variable_thunk_00081714",
            "code": "\nundefined4 get_global_variable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_00081714": {
                    "9": "get_global_variable",
                    "1": "get_global_data_value",
                    "3": "get_global_variable_value",
                    "5": "get_global_value",
                    "2": "get_data",
                    "8": "get_global_data"
                },
                "DAT_20071184": {
                    "1": "global_data"
                },
                "FUN_00081714": {
                    "2": "get_local_value",
                    "1": "get_local_data",
                    "5": "retrieve_global_data",
                    "4": "retrieve_data",
                    "6": "retrieve_global_variable",
                    "3": "get_variable_value"
                }
            }
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_data_00081210",
            "code": "\n\n\nint process_data_00081210(int input_param,int option)\n\n{\n  int result;\n  uint temp_var1;\n  undefined4 temp_var2;\n  uint temp_var3;\n  byte lower_nibble;\n  byte bit_var2;\n  int temp_var1;\n  int temp_var2;\n  \n  result = input_param;\n  if ((&DAT_00084d24)[input_param * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[input_param] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[input_param * 0x1c]);\n    }\n    bit_var2 = (&DAT_20070d94)[input_param];\n    lower_nibble = bit_var2 & 0xf;\n    if ((lower_nibble < 3) && (bit_var2 != 0)) {\n      if (lower_nibble == 2) {\n        if (option == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (option == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (option == 1) {\n          return result;\n        }\n        goto label1;\n      }\n    }\n    if (option != 1) {\nlabel1:\n      if (option == 0) {\n        result = input_param * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        bit_var2 = (&DAT_20070d94)[input_param] & 0xf0 | 2;\n      }\n      else {\n        if (option != 2) {\n          return result;\n        }\n        result = input_param * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        bit_var2 = (&DAT_20070d94)[input_param] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[input_param] = bit_var2;\n      return result;\n    }\n    temp_var1 = input_param * 0x1c;\n    temp_var2 = *(int *)(&DAT_00084d18 + temp_var1);\n    if (bit_var2 >> 4 == 0) {\n      temp_var2 = 4;\n    }\n    else {\n      temp_var2 = 5;\n    }\n    result = FUN_00080da0(temp_var2,temp_var2,*(undefined4 *)(&DAT_00084d1c + temp_var1),\n                         *(undefined4 *)(&DAT_00084d28 + temp_var1));\n    (&DAT_20070d94)[input_param] = (&DAT_20070d94)[input_param] & 0xf0 | 3;\n    if (*(int *)(temp_var2 + 0x18) == -1) {\n      temp_var1 = *(uint *)(&DAT_00084d20 + temp_var1);\n      if (0x2c < temp_var1) {\n        return 1;\n      }\n      if (temp_var1 < 0x20) {\n        temp_var1 = 1 << (temp_var1 & 0xff);\n        temp_var3 = _DAT_400e0618 & temp_var1;\n        if (temp_var3 == temp_var1) {\n          _DAT_400e0614 = temp_var3;\n        }\n      }\n      else {\n        temp_var1 = 1 << (temp_var1 - 0x20 & 0xff);\n        temp_var3 = _DAT_400e0708 & temp_var1;\n        if (temp_var3 == temp_var1) {\n          _DAT_400e0704 = temp_var3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "input_param",
                "param_2": "option",
                "iVar1": "result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "bVar5": "lower_nibble",
                "bVar6": "bit_var2",
                "iVar7": "temp_var1",
                "iVar8": "temp_var2",
                "FUN_00081210": "process_data_00081210",
                "LAB_0008126c": "label1"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "3": "input_value",
                    "2": "input_index",
                    "4": "input_param1",
                    "1": "input1",
                    "12": "input_param"
                },
                "param_2": {
                    "2": "operation",
                    "1": "selection",
                    "4": "input_param2",
                    "5": "mode"
                },
                "iVar1": {
                    "2": "output_var",
                    "24": "result",
                    "4": "return_value",
                    "1": "output_index"
                },
                "uVar2": {
                    "1": "bit_flag",
                    "3": "value",
                    "2": "size",
                    "5": "temp_var1"
                },
                "uVar3": {
                    "4": "flag",
                    "1": "flag_value",
                    "6": "temp_var2",
                    "3": "temp2"
                },
                "uVar4": {
                    "1": "check",
                    "6": "mask",
                    "3": "temp3",
                    "2": "bit_mask"
                },
                "bVar5": {
                    "1": "value2",
                    "3": "bit_var1",
                    "11": "lower_nibble",
                    "4": "lower_bits"
                },
                "bVar6": {
                    "1": "mode_bits",
                    "2": "combined_flags",
                    "3": "bit_var2"
                },
                "iVar7": {
                    "1": "array_index",
                    "3": "temp4",
                    "6": "temp_var1",
                    "4": "temp_var4"
                },
                "iVar8": {
                    "1": "i_var_value",
                    "2": "ptr",
                    "3": "temp_var5",
                    "6": "temp_var2"
                },
                "FUN_00081210": {
                    "1": "check_param_and_execute",
                    "2": "handle_param",
                    "6": "process_data",
                    "3": "process_function"
                },
                "FUN_00080e18": {
                    "1": "update_data",
                    "2": "perform_operation"
                },
                "FUN_0008105c": {
                    "1": "reverse_data"
                },
                "FUN_00080da0": {
                    "1": "send_data"
                },
                "&DAT_00084d24": {
                    "1": "data1"
                },
                "DAT_20070d94": {
                    "1": "array7"
                },
                "&DAT_00084d31": {
                    "1": "data3"
                },
                "&DAT_20070d94": {
                    "1": "data9"
                },
                "LAB_0008126c": {
                    "1": "label1"
                },
                "param_1 * 0x1c": {
                    "1": "index"
                },
                "&DAT_00084d20": {
                    "1": "data5"
                },
                "&DAT_00084d18": {
                    "1": "data6"
                },
                "&DAT_00084d1c": {
                    "1": "data7"
                },
                "FAT_00080e18": {
                    "1": "sub_function2"
                },
                "FAT_00080da0": {
                    "1": "sub_function3"
                },
                "&DAT_00084d28": {
                    "1": "data8"
                },
                "_DAT_400e0618": {
                    "2": "register1",
                    "1": "constant1"
                },
                "_DAT_400e0614": {
                    "1": "data11",
                    "2": "register2"
                },
                "_DAT_400e0708": {
                    "2": "register3",
                    "1": "data12"
                },
                "_DAT_400e0704": {
                    "1": "constant4",
                    "2": "register4"
                },
                "DAT_00084d24": {
                    "1": "array1"
                },
                "DAT_00084d31": {
                    "1": "array3"
                },
                "DAT_00084d20": {
                    "1": "array4"
                },
                "DAT_00084d18": {
                    "1": "array5"
                },
                "DAT_00084d1c": {
                    "1": "array6"
                },
                "DAT_00084d28": {
                    "1": "array8"
                },
                "(&DAT_00084d24)[param_1 * 0x1c]": {
                    "1": "flag"
                },
                "(&DAT_20070d94)[param_1]": {
                    "1": "status"
                },
                "&DAT_00084d31)[param_1 * 0x1c]": {
                    "1": "command_argument"
                },
                "&DAT_00084d20 + iVar1": {
                    "1": "ptr1"
                },
                "&DAT_00084d18 + iVar1": {
                    "1": "ptr2"
                },
                "&DAT_00084d1c + iVar1": {
                    "1": "ptr3"
                },
                "&DAT_00084d28 + iVar1": {
                    "1": "ptr4"
                }
            }
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_data_00081318",
            "code": "\nvoid update_data_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int address;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084d18 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(address,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = data;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = data;\n      return;\n    }\n    FUN_00080d7a(address,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "address"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081318": {
                    "1": "update_parameter_value",
                    "9": "update_data",
                    "2": "update_parameters",
                    "5": "update_param",
                    "3": "update_parameter"
                },
                "param_1": {
                    "2": "device_index",
                    "29": "index"
                },
                "param_2": {
                    "1": "flag",
                    "28": "value",
                    "2": "param_value"
                },
                "param_3": {
                    "1": "parameter",
                    "2": "data",
                    "24": "param"
                },
                "iVar1": {
                    "1": "error_code",
                    "29": "result"
                },
                "uVar2": {
                    "12": "data",
                    "8": "new_value",
                    "1": "value_to_update",
                    "2": "updated_value"
                },
                "iVar3": {
                    "9": "address",
                    "3": "data_address",
                    "1": "config_ptr",
                    "8": "ptr"
                },
                "FUN_00080e04": {
                    "1": "check_device_status",
                    "4": "check_data",
                    "5": "check_validity"
                },
                "FUN_00081210": {
                    "2": "modify_data",
                    "1": "update_values",
                    "5": "update_value"
                },
                "FUN_00080d7a": {
                    "1": "update_variable",
                    "2": "perform_action",
                    "13": "handle_error"
                }
            }
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_is_zero_00081388",
            "code": "\nvoid execute_if_r_info_is_zero_00081388(void)\n\n{\n  if ((info != 0xffffffff) &&\n     (info = info - 1,\n     info == 0)) {\n    (*(function_pointer *)((int)&offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "r_info": "relocation_info",
                "r_offset": "offset",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "info",
                "Elf32_Rel_ARRAY_20070000[0].r_offset": "offset",
                "code": "function_pointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081388": {
                    "2": "execute_if_r_info_equals_zero",
                    "1": "decrement_and_call_if_zero",
                    "3": "execute_if_condition_met",
                    "4": "execute_if_r_info_is_zero"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relation_array_20070000",
                    "2": "array",
                    "8": "relocation_entries",
                    "5": "relocation_table",
                    "7": "relocation_array",
                    "6": "rel_array"
                },
                "r_info": {
                    "1": "rel_info",
                    "13": "relocation_info",
                    "12": "info"
                },
                "r_offset": {
                    "1": "rel_entry_offset",
                    "12": "offset"
                },
                "6": {
                    "1": "index"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_info": {
                    "1": "info"
                },
                "Elf32_Rel_ARRAY_20070000[0].r_offset": {
                    "1": "offset"
                },
                "code": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initialize_memory_000813a8(int memory_address)\n\n{\n  FUN_00082504(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memory_address"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000813a8": {
                    "1": "initialize_buffer",
                    "2": "initialize_parameters",
                    "4": "initialize_param",
                    "15": "initialize_memory",
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_structure",
                    "9": "memory_address",
                    "4": "param"
                },
                "FUN_00082504": {
                    "2": "set_memory_values",
                    "1": "initialize_sub_function",
                    "8": "set_memory",
                    "3": "set_param_values",
                    "5": "set_default_value"
                },
                "param_2": {
                    "2": "param_2",
                    "1": "param",
                    "4": "default_value",
                    "3": "value1",
                    "8": "value"
                },
                "param_3": {
                    "1": "block_size",
                    "2": "param_3",
                    "16": "size",
                    "3": "value2"
                },
                "*param_1": {
                    "1": "buffer_ptr"
                },
                "*(undefined4 *)(param_1 + 0x80)": {
                    "1": "mem_value1"
                },
                "*(undefined4 *)(param_1 + 0x84)": {
                    "1": "end_marker"
                },
                "0x80": {
                    "1": "offset"
                },
                "0x84": {
                    "1": "optional_value_offset"
                },
                "temp_1": {
                    "1": "zero_value"
                },
                "temp_2": {
                    "1": "zero_value"
                }
            }
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_buffer_000813c2",
            "code": "\nvoid update_buffer_000813c2(int buffer_address,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000813c2": {
                    "1": "update_variable_and_copy",
                    "12": "update_buffer",
                    "7": "update_and_store_value",
                    "2": "update_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "7": "base_address",
                    "8": "buffer_address",
                    "6": "buffer"
                },
                "param_2": {
                    "3": "new_data",
                    "18": "new_value",
                    "1": "new_parameter_value",
                    "4": "value"
                },
                "uVar1": {
                    "1": "index",
                    "13": "updated_index",
                    "7": "next_index",
                    "3": "new_index",
                    "4": "current_index"
                }
            }
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000813e4": {
                    "1": "subtract_and_mask",
                    "2": "calculate_difference_and_mask",
                    "28": "calculate_difference"
                },
                "param_1": {
                    "10": "input",
                    "1": "parameter",
                    "18": "input_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "value_offset",
                    "3": "pointer",
                    "5": "ptr_offset",
                    "2": "pointer_1"
                },
                "*(int *)(pointer_1 + 0x80)": {
                    "1": "value_1"
                },
                "*(int *)(pointer_1 + 0x84)": {
                    "1": "value_2"
                },
                "0x10": {
                    "1": "offset"
                },
                "0x80": {
                    "1": "constant_offset_1",
                    "2": "first_value_offset"
                },
                "0x84": {
                    "1": "offset_2",
                    "2": "second_value_offset"
                },
                "*(int *)(param_1 + 0x10) + 0x80": {
                    "1": "first_value_ptr"
                },
                "*(int *)(param_1 + 0x10) + 0x84": {
                    "1": "ptr_to_offset_plus_0x84"
                },
                "*(int *)(ptrOffset + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(ptrOffset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(ptr_offset + 0x80)": {
                    "1": "offset1"
                },
                "*(int *)(ptr_offset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": {
                    "4": "first_value",
                    "1": "address_1"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "address_2",
                    "4": "second_value"
                },
                "param_1+0x10": {
                    "1": "data_offset"
                },
                "* (int *)(* (int *)(input_value + 0x10) + 0x80)": {
                    "1": "first_value"
                },
                "* (int *)(* (int *)(input_value + 0x10) + 0x84)": {
                    "1": "second_value"
                },
                "*(*(ptr1 + 0x10) + 0x80)": {
                    "1": "first_value"
                },
                "*(*(ptr1 + 0x10) + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x10)": {
                    "1": "pointer_offset"
                },
                "*(*(param_1 + 0x10) + 0x80)": {
                    "1": "first_ptr_offset"
                },
                "*(*(param_1 + 0x10) + 0x84)": {
                    "1": "second_ptr_offset"
                },
                "*(*(int *)(param_1 + 0x10) + 0x80)": {
                    "1": "first_address"
                },
                "*(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "second_address"
                },
                "*(int *)(ptr1 + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(ptr1 + 0x84)": {
                    "1": "value2"
                },
                "0x7f": {
                    "2": "mask"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "DAT_": {
                    "1": "data_"
                },
                "*(int *)(value_offset + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(value_offset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(ptr_a + 0x80)": {
                    "1": "value_a"
                },
                "*(int *)(ptr_a + 0x84)": {
                    "1": "value_b"
                },
                "*(int *)(param_1 + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(param_1 + 0x84)": {
                    "1": "second_value"
                }
            }
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 update_data_00081454(int data_pointer,undefined4 new_value)\n\n{\n  int data_ptr;\n  uint updated_value;\n  \n  data_ptr = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_ptr + 0x84) == *(int *)(data_ptr + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    updated_value = *(int *)(data_ptr + 0x80) + 1U & 0x8000007f;\n    if ((int)updated_value < 0) {\n      updated_value = (updated_value - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_ptr + 0x84) == updated_value);\n    *(char *)(data_ptr + *(int *)(data_ptr + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = updated_value;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "iVar1": "data_ptr",
                "uVar2": "updated_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081454": {
                    "1": "update_value_in_memory",
                    "5": "update_value",
                    "2": "update_value_if_needed",
                    "18": "update_data"
                },
                "param_1": {
                    "1": "context",
                    "3": "data_ptr",
                    "4": "data_address",
                    "2": "data_offset"
                },
                "param_2": {
                    "26": "new_value",
                    "1": "new_data",
                    "2": "new_val"
                },
                "iVar1": {
                    "2": "data_offset",
                    "1": "value1",
                    "4": "data_ptr",
                    "3": "ptr1"
                },
                "uVar2": {
                    "1": "value2",
                    "11": "updated_value",
                    "2": "next_index",
                    "4": "updated_index",
                    "3": "new_index"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "data_ptr"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "data_struct.ptr2"
                },
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": {
                    "1": "data_offset2"
                },
                "*(int *)(iVar1 + 0x84)": {
                    "1": "data_struct_counter"
                },
                "*(int *)(iVar1 + 0x80)": {
                    "1": "value2"
                },
                "*(int *)(param_1 + 0x18) + 0x1c": {
                    "1": "update_flag_ptr"
                },
                "*(char *)(iVar1 + *(int *)(iVar1 + 0x80))": {
                    "1": "data_struct_value"
                },
                "*(uint *)(iVar1 + 0x84)": {
                    "1": "data_struct_end_value"
                },
                "*(uint *)(*(int *)(param_1 + 0x14) + 0x80)": {
                    "1": "data_ptr_updated_index"
                },
                "*(undefined4 *)(*(int *)(param_1 + 0x18) + 8)": {
                    "1": "result_ptr"
                },
                "*(int *)(param_1 + 0x14) + 0x84": {
                    "1": "ptr2_val1"
                },
                "*(int *)(param_1 + 0x14) + 0x80": {
                    "1": "ptr2_val2"
                },
                "*(uint *)(iVar1 + 0x80)": {
                    "1": "value4"
                }
            }
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initialize_parameters_000814e4(undefined4 *parameters,undefined4 value2,undefined flag,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  params[1] = 0;\n  params[2] = 1000;\n  params[6] = value2;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = flag;\n  params[4] = value5;\n  params[8] = value4;\n  params[5] = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value2",
                "param_3": "flag",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6",
                "param_1[1]": "params[1]",
                "param_1[2]": "params[2]",
                "param_1[6]": "params[6]",
                "param_1[4]": "params[4]",
                "param_1[8]": "params[8]",
                "param_1[5]": "params[5]"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000814e4": {
                    "11": "initialize_params",
                    "3": "initialize_function",
                    "16": "initialize_parameters",
                    "1": "initialize_param_array"
                },
                "param_1": {
                    "4": "output_array",
                    "1": "function_params",
                    "7": "params",
                    "3": "param_array",
                    "2": "params_array",
                    "10": "parameters"
                },
                "param_2": {
                    "2": "param2",
                    "1": "param2_value",
                    "3": "initial_value",
                    "4": "value",
                    "7": "value1",
                    "11": "value2"
                },
                "param_3": {
                    "10": "value3",
                    "2": "param3",
                    "1": "param3_value",
                    "6": "value2"
                },
                "param_4": {
                    "1": "value2",
                    "2": "param4",
                    "6": "value3",
                    "3": "value1",
                    "11": "value4"
                },
                "param_5": {
                    "1": "value_2",
                    "11": "value5",
                    "2": "param5",
                    "6": "value4",
                    "3": "value2"
                },
                "param_6": {
                    "1": "param6_value",
                    "6": "value5",
                    "2": "param6",
                    "3": "value3",
                    "11": "value6"
                },
                "param_1[1]": {
                    "1": "params[1]"
                },
                "param_1[2]": {
                    "1": "params[2]"
                },
                "param_1[6]": {
                    "1": "params[6]"
                },
                "param_1[7]": {
                    "1": "params[7]"
                },
                "param_1[4]": {
                    "1": "params[4]"
                },
                "param_1[8]": {
                    "1": "params[8]"
                },
                "param_1[5]": {
                    "1": "parameters[5]"
                },
                "array[1]": {
                    "1": "variable1"
                },
                "array[2]": {
                    "1": "variable2"
                },
                "array[6]": {
                    "1": "variable3"
                },
                "array[7]": {
                    "1": "variable4"
                },
                "array[4]": {
                    "1": "variable5"
                },
                "array[8]": {
                    "1": "variable6"
                },
                "array[5]": {
                    "1": "variable7"
                },
                "&PTR_FUN_00081454_1_000857a8": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_function_00081508",
            "code": "\nvoid initialize_function_00081508(int param1,uint param2,undefined4 param_value)\n\n{\n  int temp_var1;\n  undefined4 *ptr_var;\n  \n  FUN_00080e18(*(undefined4 *)(param1 + 0x20));\n  ptr_var = *(undefined4 **)(param1 + 0x18);\n  widget_data_value1 = 0x202;\n  *ptr_var = 0xac;\n  widget_data_value3 = param_value;\n  widget_data_value4 = rel_array[6].offset / param2 >> 4;\n  widget_data_value5 = 0xffffffff;\n  widget_data_value6 = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  temp_var1 = *(int *)(param1 + 0x10);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  temp_var1 = *(int *)(param1 + 0x14);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  *ptr_var = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_function_00081508",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param_value",
                "iVar1": "temp_var1",
                "puVar2": "ptr_var",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_offset": "offset",
                "puVar2[0x48]": "widget_data_value1",
                "puVar2[1]": "widget_data_value3",
                "puVar2[8]": "widget_data_value4",
                "puVar2[3]": "widget_data_value5",
                "puVar2[2]": "widget_data_value6"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081508": {
                    "1": "initialize_settings",
                    "2": "initialize_data_structures",
                    "3": "initialize_memory",
                    "8": "initialize_data",
                    "13": "initialize_function"
                },
                "param_1": {
                    "1": "param_1",
                    "2": "function_pointer",
                    "5": "param1",
                    "3": "arg1"
                },
                "param_2": {
                    "2": "offset",
                    "6": "param2",
                    "1": "param_2",
                    "5": "param_size",
                    "3": "arg2"
                },
                "param_3": {
                    "10": "param_value",
                    "1": "param_3",
                    "6": "param3",
                    "5": "value",
                    "3": "arg3"
                },
                "iVar1": {
                    "1": "variable1",
                    "3": "local_var1",
                    "4": "index",
                    "11": "temp_var1"
                },
                "puVar2": {
                    "1": "variable2",
                    "3": "data_pointer",
                    "5": "ptr_var",
                    "2": "ptr_data",
                    "4": "pointer_var"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "2": "elf_rel_array",
                    "1": "array_var",
                    "5": "rel_array"
                },
                "r_offset": {
                    "1": "offset"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "data_value"
                },
                "*(undefined4 **)(param_1 + 0x18)": {
                    "1": "widget_data_pointer"
                },
                "0x202": {
                    "1": "constant_value1"
                },
                "0xac": {
                    "1": "constant_value2"
                },
                "0x61": {
                    "1": "constant_value3"
                },
                "*(byte *)(param_1 + 0x1c)": {
                    "1": "byte_value"
                },
                "*(int *)(((uint)(int)(char)*(byte *)(param_1 + 0x1c) >> 5) * 4 + -0x1fff1f00)": {
                    "1": "widget_data_value7"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "temp_var2"
                },
                "*(undefined4 *)(iVar1 + 0x84)": {
                    "1": "var_value1"
                },
                "*(undefined4 *)(iVar1 + 0x80)": {
                    "1": "var_value2"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "temp_var5"
                },
                "0x50": {
                    "1": "constant_value4"
                },
                "FUN_00080e18": {
                    "1": "perform_initialization"
                },
                "param3": {
                    "1": "value"
                },
                "initializeWidget": {
                    "1": "new_widget_address"
                },
                "puVar2[0x48]": {
                    "1": "widget_data_value1"
                },
                "*puVar2": {
                    "1": "widget_data_value2"
                },
                "puVar2[1]": {
                    "1": "widget_data_value3"
                },
                "puVar2[8]": {
                    "1": "widget_data_value4"
                },
                "puVar2[3]": {
                    "1": "widget_data_value5"
                },
                "puVar2[2]": {
                    "1": "widget_data_value6"
                },
                "byteValue": {
                    "1": "byte_val"
                },
                "iVar3": {
                    "1": "tmp_var2"
                }
            }
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_function_000815d4",
            "code": "\nundefined4 * initialize_function_000815d4(undefined4 *output_array,undefined4 input_value)\n\n{\n  FUN_000814e4();\n  *output_array = &PTR_FUN_00081454_1_000857d8;\n  output_array[9] = input_value;\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_function_000815d4",
                "param_1": "output_array",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815d4": {
                    "1": "set_function_and_arg",
                    "27": "initialize_function"
                },
                "param_1": {
                    "17": "output_array",
                    "1": "result_pointer",
                    "3": "output_pointer",
                    "2": "output"
                },
                "param_2": {
                    "2": "parameter",
                    "1": "value",
                    "21": "input_value",
                    "3": "input_param"
                },
                "FUN_000814e4": {
                    "1": "perform_additional_tasks",
                    "2": "secondary_function",
                    "7": "perform_initialization"
                },
                "param_4": {
                    "1": "additional_parameter",
                    "2": "another_parameter"
                },
                "param_3": {
                    "1": "temp_var1",
                    "2": "unused_parameter"
                },
                "PTR_FUN_00081454_1_000857d8": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combine_values_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815f8": {
                    "1": "combine_param_and_shift_left",
                    "12": "combine_values",
                    "2": "combine_shifted_values",
                    "8": "combine_params"
                },
                "param_1": {
                    "4": "input_value",
                    "3": "input1",
                    "1": "first_byte",
                    "12": "value1"
                },
                "param_2": {
                    "1": "uint_val",
                    "3": "input2",
                    "4": "bitmask",
                    "2": "original_value",
                    "11": "value2"
                },
                "param_3": {
                    "3": "result",
                    "1": "shifted_value"
                },
                "<new_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                }
            }
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "process_data_000815fe",
            "code": "\nundefined4 * process_data_000815fe(undefined4 *data)\n\n{\n  FUN_00081e04(*data);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "process_data_000815fe",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815fe": {
                    "1": "process_function",
                    "16": "process_data",
                    "9": "execute_function"
                },
                "param_1": {
                    "2": "parameter",
                    "14": "data",
                    "1": "input_param"
                },
                "FUN_00081e04": {
                    "2": "execute_operation",
                    "1": "execute_process",
                    "3": "reverse_data"
                },
                "*param_1": {
                    "1": "input_param"
                }
            }
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_parameters_0008160c",
            "code": "\nvoid reset_parameters_0008160c(int *parameters)\n\n{\n  if (*parameters != 0) {\n    FUN_00081e04();\n  }\n  *parameters = 0;\n  parameters[2] = 0;\n  parameters[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_parameters_0008160c",
                "param_1": "parameters",
                "param_1[1]": "parameters[1]",
                "param_1[2]": "parameters[2]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008160c": {
                    "1": "reset_parameter",
                    "3": "reset_and_clear",
                    "10": "reset_parameters",
                    "2": "reset_params",
                    "4": "reset_variables"
                },
                "param_1": {
                    "1": "param",
                    "6": "array",
                    "2": "parameter",
                    "10": "parameters"
                },
                "FUN_00081e04": {
                    "1": "undefined_function",
                    "17": "reset_function"
                },
                "param_1[1]": {
                    "1": "array[1]"
                },
                "param_1[2]": {
                    "1": "parameters[2]"
                },
                "*param_1": {
                    "1": "array[0]"
                }
            }
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_array_00081622",
            "code": "\nint update_array_00081622(int *array,int index,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*array,index + 1,param3,param4,param4);\n  if (result != 0) {\n    *array = result;\n    array[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_array_00081622",
                "param_1": "array",
                "param_2": "index",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081622": {
                    "1": "reverse_and_update_array",
                    "3": "update_and_check_value",
                    "2": "update_param_and_return_value",
                    "7": "update_array"
                },
                "param_1": {
                    "16": "array",
                    "1": "value_pointer",
                    "6": "param_array",
                    "2": "value_ptr"
                },
                "param_2": {
                    "1": "param",
                    "8": "value",
                    "4": "size",
                    "14": "index"
                },
                "param_3": {
                    "1": "param_3",
                    "7": "param3",
                    "3": "arg1",
                    "4": "param_a",
                    "6": "value1"
                },
                "param_4": {
                    "4": "param_b",
                    "7": "param4",
                    "1": "undefined_param2",
                    "3": "arg2",
                    "6": "value2"
                },
                "iVar1": {
                    "3": "status",
                    "19": "result",
                    "8": "return_value"
                },
                "FUN_000825a0": {
                    "1": "process_data"
                }
            }
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_value_0008163a",
            "code": "\nundefined4 check_and_update_value_0008163a(int *array,uint threshold)\n\n{\n  int result;\n  \n  if ((*array == 0) || (value2 < threshold)) {\n    result = FUN_00081622(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (value3 == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_value_0008163a",
                "param_1": "array",
                "param_2": "threshold",
                "iVar1": "result",
                "(uint)param_1[1]": "value2",
                "param_1[2]": "value3"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008163a": {
                    "1": "check_and_modify_value",
                    "9": "check_and_update_value",
                    "2": "check_and_update_parameter",
                    "6": "check_validity",
                    "4": "check_and_update"
                },
                "param_1": {
                    "2": "value_pointer",
                    "9": "array",
                    "1": "input_data",
                    "5": "value_array",
                    "4": "input_array"
                },
                "param_2": {
                    "17": "threshold",
                    "1": "length",
                    "5": "value",
                    "2": "limit"
                },
                "iVar1": {
                    "1": "result_code",
                    "28": "result"
                },
                "FUN_00081622": {
                    "1": "validate_array",
                    "2": "update_value"
                },
                "param_3": {
                    "3": "param3",
                    "4": "param_3"
                },
                "param_4": {
                    "4": "param_4",
                    "3": "param4"
                },
                "FUX_00081622": {
                    "1": "process_value_change"
                },
                "*param_1": {
                    "1": "value1"
                },
                "(uint)param_1[1]": {
                    "1": "value2"
                },
                "param_1[2]": {
                    "1": "value3"
                }
            }
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "process_data_0008165c",
            "code": "\nundefined4 * process_data_0008165c(undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_0008163a(data,value2);\n  if (result == 0) {\n    FUN_0008160c(data);\n  }\n  else {\n    data[2] = value2;\n    FUN_00082994(*data,value1);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "process_data_0008165c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008165c": {
                    "1": "update_if_zero",
                    "3": "process_data",
                    "2": "check_and_process"
                },
                "param_1": {
                    "11": "data",
                    "5": "array",
                    "1": "configuration",
                    "2": "param_array",
                    "4": "input_array"
                },
                "param_2": {
                    "1": "param",
                    "4": "value_1",
                    "5": "value",
                    "14": "value1"
                },
                "param_3": {
                    "1": "size",
                    "2": "new_data",
                    "4": "value_2",
                    "14": "value2"
                },
                "iVar1": {
                    "1": "result_code",
                    "2": "is_valid",
                    "16": "result"
                },
                "FUN_0008163a": {
                    "1": "check_if_parameter_matches",
                    "3": "check_condition",
                    "2": "check_result",
                    "4": "check_validity"
                },
                "FUN_0008160c": {
                    "1": "reset_array",
                    "2": "clear_array",
                    "3": "cleanup_data"
                },
                "FUN_00082994": {
                    "1": "handle_data",
                    "3": "perform_operation",
                    "2": "process",
                    "4": "update_values"
                },
                "FUM_0008160c": {
                    "1": "cleanup_entry"
                },
                "FUM_0008163a": {
                    "1": "check_entry"
                },
                "FUM_00082994": {
                    "1": "invoke_function"
                },
                "FUND_0008165c": {
                    "1": "check_and_process"
                }
            }
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_array_00081682",
            "code": "\nundefined4 * initialize_array_00081682(undefined4 *array,int input_value)\n\n{\n  undefined4 result;\n  \n  *array = 0;\n  array[1] = 0;\n  array[2] = 0;\n  if (input_value != 0) {\n    result = FUN_00082a50(input_value);\n    FUN_0008165c(array,input_value,result);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_array_00081682",
                "param_1": "array",
                "param_2": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081682": {
                    "4": "initialize_data",
                    "8": "initialize_array",
                    "1": "initialize_memory",
                    "3": "initialize_param_array",
                    "5": "initialize_param"
                },
                "param_1": {
                    "3": "data",
                    "5": "output_array",
                    "8": "array",
                    "1": "buffer",
                    "7": "param_array"
                },
                "param_2": {
                    "1": "input_data",
                    "12": "input_value",
                    "5": "value",
                    "9": "size",
                    "2": "input_param"
                },
                "uVar1": {
                    "2": "allocated_memory",
                    "1": "data_result",
                    "7": "result"
                },
                "FUN_0008165c": {
                    "1": "copy_value_to_array",
                    "2": "update_parameters",
                    "3": "copy_data"
                },
                "FUN_00082a50": {
                    "9": "calculate_value",
                    "2": "calculate_result",
                    "1": "perform_operation"
                },
                "param_3": {
                    "2": "value",
                    "1": "copy_result",
                    "8": "result"
                }
            }
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_main_loop_000816a8",
            "code": "\nvoid run_main_loop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_main_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000816a8": {
                    "1": "run_continuous_loop",
                    "6": "run_main_loop",
                    "2": "run_application",
                    "4": "main_loop",
                    "3": "execute_main_loop"
                },
                "FUN_000816d4": {
                    "6": "initialize",
                    "1": "initialize_components",
                    "9": "initialize_system",
                    "2": "load_configuration"
                },
                "FUN_00080ae4": {
                    "2": "perform_initialization",
                    "1": "configure_settings"
                },
                "FUNC_000816a6": {
                    "1": "perform_initialization",
                    "2": "configure_settings"
                },
                "FUNC_0008120c": {
                    "13": "set_mode",
                    "1": "set_data_mode",
                    "5": "set_flag",
                    "3": "set_configuration"
                },
                "FUN_000804a8": {
                    "2": "perform_initialization",
                    "1": "check_connection_status",
                    "4": "initialize_system",
                    "3": "perform_setup"
                },
                "FUN_000805d0": {
                    "2": "check_condition",
                    "5": "process_data",
                    "1": "perform_task_a",
                    "4": "check_status"
                },
                "FUN_00080ce0": {
                    "3": "process_data",
                    "1": "update_components",
                    "2": "execute_task",
                    "4": "perform_cleanup"
                },
                "FUNC_0008120c(1)": {
                    "1": "set_mode(1)"
                }
            }
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initialize_data_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000816d4": {
                    "1": "initialize_memory_location",
                    "2": "initialize_variable",
                    "5": "initialize_memory",
                    "10": "initialize_data"
                },
                "_DAT_400e1a54": {
                    "1": "flag_value",
                    "3": "initial_value",
                    "5": "data_value",
                    "4": "memory_address"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_value_00081714",
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081714": {
                    "1": "get_dat_value",
                    "6": "get_global_variable",
                    "9": "get_data_value",
                    "7": "get_global_data",
                    "5": "get_data"
                },
                "DAT_20071184": {
                    "4": "data",
                    "5": "global_variable",
                    "7": "global_data",
                    "1": "data_from_memory",
                    "2": "data_value"
                }
            }
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculate_float_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint result1;\n  uint temp2;\n  uint difference;\n  bool is_equal;\n  \n  result1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  is_equal = result1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result1 == input4;\n  }\n  shifted_input1 = (int)result1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result1 = result1;\n      if (shifted_input1 == -1) {\n        result1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        result1 = result1;\n      }\n      is_equal = (result1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (result1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result1 == result1;\n      }\n      if (!is_equal) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ result1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = result1;\n      }\n      return input1;\n    }\n    if (input1 != result1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      result1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  is_equal = difference != 0;\n  temp2 = result1;\n  if (is_equal && result1 <= input4) {\n    temp2 = result1 + difference;\n  }\n  if (is_equal && result1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (is_equal && result1 <= input4) {\n    input1 = input1 ^ result1;\n  }\n  if (is_equal && result1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (temp2 == difference) {\n    result2 = result2 ^ 0x800000;\n    if (temp2 == 0) {\n      result1 = result1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    is_equal = result2 != 0;\n    result2 = -result2;\n    result1 = -result1 - (uint)is_equal;\n  }\n  if (result1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    result1 = result1 * 2 + (uint)(result1 != 0);\n    result1 = temp2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = leading_zero_count(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        result1 = result1 >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (result1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    result1 = temp2 - 1;\n    if (0xffffff < result1) {\n      result1 = result1 & 1;\n      result1 = result1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  result1 = result1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "result1",
                "uVar6": "temp2",
                "uVar7": "difference",
                "bVar8": "is_equal",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081730": {
                    "1": "convert_to_float",
                    "6": "reverse_bits",
                    "2": "calculate_floating_point_value",
                    "9": "calculate_float",
                    "7": "calculate_floating_point"
                },
                "param_1": {
                    "7": "input",
                    "1": "input_a",
                    "3": "input_value",
                    "2": "operand1",
                    "9": "input1"
                },
                "param_2": {
                    "5": "mask",
                    "9": "input2",
                    "1": "second_operand",
                    "3": "input_flag",
                    "2": "exponent"
                },
                "param_3": {
                    "3": "flag",
                    "1": "modifier",
                    "7": "input3",
                    "2": "constant"
                },
                "param_4": {
                    "2": "mantissa",
                    "1": "w",
                    "7": "input4",
                    "6": "result"
                },
                "iVar1": {
                    "1": "shifted_input_a",
                    "6": "shifted_input1",
                    "2": "shift1",
                    "3": "shift_amount1",
                    "4": "shifted_input"
                },
                "iVar2": {
                    "2": "shift2",
                    "1": "exponent_shifted2",
                    "7": "shifted_input2",
                    "3": "shift_amount2"
                },
                "uVar3": {
                    "1": "float1_shifted",
                    "2": "temp1",
                    "4": "result1",
                    "3": "result"
                },
                "uVar4": {
                    "1": "num2_xor",
                    "2": "temp_var2",
                    "4": "result2"
                },
                "uVar5": {
                    "1": "logical_shift_input1",
                    "2": "result",
                    "6": "result1",
                    "4": "temp1"
                },
                "uVar6": {
                    "1": "result",
                    "2": "shift_amount",
                    "4": "result2"
                },
                "uVar7": {
                    "1": "count2",
                    "4": "diff",
                    "2": "temp3",
                    "19": "difference"
                },
                "bVar8": {
                    "2": "flag",
                    "1": "check",
                    "8": "is_zero",
                    "3": "is_condition_met",
                    "6": "is_true",
                    "9": "is_equal"
                },
                "uVar8": {
                    "1": "normalization_shift"
                },
                "uVar9": {
                    "1": "fraction_shift"
                },
                "uVar10": {
                    "1": "normalized_value"
                },
                "uVar11": {
                    "1": "normalized_result"
                },
                "uVar12": {
                    "1": "shifted_fraction"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "uVar1": {
                    "1": "unsigned_rounding"
                },
                "uVar2": {
                    "1": "unsigned_shifted_dividend"
                },
                "LZCOUNT": {
                    "2": "leading_zero_count"
                }
            }
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_float_00081734",
            "code": "\nuint calculate_float_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool is_zero;\n  \n  temp1 = input1 << 1;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp1 == input4;\n  }\n  shifted_input1 = (int)temp1 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp1 = input2;\n      if (shifted_input1 == -1) {\n        temp1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = temp1;\n      }\n      is_zero = (temp1 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = temp1 == input2;\n      }\n      if (!is_zero) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  is_zero = difference != 0;\n  temp2 = temp1;\n  if (is_zero && temp1 <= input4) {\n    temp2 = temp1 + difference;\n  }\n  if (is_zero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    temp1 = -temp1 - (uint)is_zero;\n  }\n  if (temp1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    temp1 = temp1 * 2 + (uint)(difference != 0);\n    difference = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = leading_zero_count(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)difference < (int)temp2) {\n        temp1 = temp1 >> (-(difference - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (difference - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    difference = temp2 - 1;\n    if (0xffffff < temp1) {\n      difference = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "result1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "difference",
                "bVar7": "is_zero",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081734": {
                    "1": "floating_point_addition",
                    "2": "calculate_floating_point_value",
                    "13": "calculate_float",
                    "7": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_value1",
                    "3": "input_float1",
                    "4": "value1",
                    "18": "input1"
                },
                "param_2": {
                    "1": "num2",
                    "18": "input2",
                    "3": "input_float2",
                    "4": "value2"
                },
                "param_3": {
                    "2": "flag",
                    "1": "input_value1",
                    "5": "param3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "result",
                    "5": "param4",
                    "3": "rounding_mode",
                    "7": "input4"
                },
                "iVar1": {
                    "1": "left_shifted_input1",
                    "10": "shifted_input1",
                    "2": "shift_amount1"
                },
                "iVar2": {
                    "1": "first_byte2",
                    "2": "shifted_num2",
                    "9": "shifted_input2"
                },
                "uVar3": {
                    "1": "sign_bit1",
                    "6": "result1",
                    "2": "temp1",
                    "4": "result"
                },
                "uVar4": {
                    "1": "result_num1",
                    "2": "shifted_result1",
                    "4": "temp1"
                },
                "uVar5": {
                    "1": "difference",
                    "2": "temp3",
                    "4": "temp2"
                },
                "uVar6": {
                    "1": "temp_value2",
                    "3": "temp3",
                    "2": "temp4",
                    "15": "difference"
                },
                "bVar7": {
                    "14": "is_zero",
                    "1": "is_true",
                    "13": "is_equal"
                },
                "uVar8": {
                    "1": "ones_complement_mask"
                },
                "uVar9": {
                    "1": "shifted_mask"
                },
                "uVar10": {
                    "1": "ones_complement_result"
                },
                "uVar11": {
                    "1": "shifted_difference"
                },
                "uVar12": {
                    "1": "shifted_result"
                },
                "uVar13": {
                    "1": "complement"
                },
                "uVar14": {
                    "1": "twos_complement_mask"
                },
                "uVar15": {
                    "1": "twos_complement_result"
                },
                "uVar16": {
                    "1": "shifted_twos_complement_result"
                },
                "uVar17": {
                    "1": "shifted_mask"
                },
                "LZCOUNT": {
                    "2": "leading_zero_count",
                    "1": "leading_zeros_count"
                },
                "LZCOUNT()": {
                    "1": "leading_zeros_count"
                }
            }
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_value_00081894",
            "code": "\nuint calculate_value_00081894(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask",
                "FUN_00081894": "calculate_value_00081894"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "7": "input",
                    "17": "input_value",
                    "2": "input_number",
                    "3": "number",
                    "1": "input_data"
                },
                "uVar1": {
                    "1": "num_bits",
                    "6": "leading_zeroes",
                    "13": "leading_zeros",
                    "3": "bit_count",
                    "5": "result"
                },
                "uVar2": {
                    "2": "shift",
                    "1": "signal",
                    "20": "shift_amount"
                },
                "iVar3": {
                    "2": "offset_value",
                    "1": "calculation1",
                    "4": "offset",
                    "8": "constant",
                    "5": "constant_value"
                },
                "uVar4": {
                    "9": "mask",
                    "2": "comparison_value",
                    "1": "masked_bits",
                    "3": "bit_mask"
                },
                "FUN_00081894": {
                    "4": "calculate_value",
                    "1": "calculate_updated_value",
                    "3": "reverse_bits"
                },
                "uVar2_updated": {
                    "1": "shifted_value_updated"
                },
                "uVar1_updated": {
                    "1": "leading_zeros_updated"
                },
                "uVar1_shifted": {
                    "1": "shifted_leading_zeros"
                },
                "uVar5": {
                    "1": "temporary_value",
                    "2": "temp_value"
                },
                "uVar6": {
                    "1": "result"
                },
                "uVar7": {
                    "1": "conditional_mask"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_neg"
                },
                "uVar2_1": {
                    "1": "shift_amount_2"
                },
                "uVar1_1": {
                    "1": "leading_zeroes_2"
                },
                "uVar1_2": {
                    "1": "leading_zeroes_3"
                },
                "uVar2_2": {
                    "1": "shift_amount_3"
                },
                "uVar1_3": {
                    "1": "leading_zeros_adjusted"
                },
                "uVar1_4": {
                    "1": "leading_zeroes_5"
                },
                "uVar2_3": {
                    "1": "shifted_number_masked_adjusted"
                },
                "uVar1_5": {
                    "1": "leading_zeroes_6"
                },
                "uVar2_4": {
                    "1": "shift_amount_5"
                },
                "uVar2_5": {
                    "1": "shift_amount_6"
                },
                "uVar1_6": {
                    "1": "leading_zeros_shifted_adjusted_masked"
                },
                "uVar1_7": {
                    "1": "leading_zeroes_8"
                },
                "uVar2_6": {
                    "1": "shift_amount_7"
                },
                "uVar2_7": {
                    "1": "shift_amount_8"
                },
                "uVar2_saved": {
                    "1": "shift_amount_saved"
                },
                "uVar1_plus_0x18": {
                    "1": "shift_amount_plus_0x18"
                },
                "uVar2_saved_plus_0x18": {
                    "1": "shift_amount_saved_plus_0x18"
                },
                "uVar1New": {
                    "1": "leading_zeroes_minus_one"
                },
                "uVar4New": {
                    "1": "is_negative"
                },
                "uVar2New": {
                    "1": "shift_amount_plus_eight"
                },
                "uVar2AfterShift": {
                    "1": "temp"
                },
                "uVar1AfterShift": {
                    "1": "shifted_input"
                },
                "uVar1New2": {
                    "1": "leading_zeroes_minus_one_plus_twenty_four"
                },
                "uVar1Final": {
                    "1": "result"
                },
                "uVar4 & 0x7fffffff": {
                    "1": "mask_result"
                },
                "uVar1 > 7": {
                    "1": "is_greater_than7"
                },
                "uVar1 + 0x18": {
                    "1": "shift_amount_plus"
                },
                "0x20 - (uVar1 + 0x18) & 0xff": {
                    "1": "right_shift_amount"
                },
                "(int)uVar2 >> 0x1f": {
                    "1": "prevent_overflow"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_mask_equal_zero"
                },
                "uVar8": {
                    "1": "final_result"
                },
                "uVar1_new": {
                    "1": "result"
                },
                "uVar2_new": {
                    "1": "shifted_value"
                },
                "uVar2_final": {
                    "1": "adjusted_value"
                },
                "uVar2_bitwise_final": {
                    "1": "masked_value"
                }
            }
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "count_bits_0008189c",
            "code": "\nuint count_bits_0008189c(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "count_bits_0008189c",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008189c": {
                    "1": "reverse_and_calc",
                    "4": "count_leading_zeros",
                    "3": "reverse_bits",
                    "2": "count_set_bits"
                },
                "param_1": {
                    "12": "input",
                    "1": "input_number",
                    "7": "input_value",
                    "9": "number"
                },
                "uVar1": {
                    "2": "leading_zeros_count",
                    "1": "num_set_bits",
                    "13": "leading_zeros",
                    "5": "bit_count"
                },
                "uVar2": {
                    "1": "shift_value",
                    "2": "shift_count",
                    "18": "shift_amount",
                    "4": "shift"
                },
                "uVar3": {
                    "17": "sign_bit",
                    "6": "is_negative",
                    "2": "sign",
                    "1": "sign_bits"
                },
                "iVar4": {
                    "2": "shifted_value",
                    "1": "result_offset",
                    "26": "result"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "0x80000000": {
                    "1": "integer_max"
                },
                "0x4b000000": {
                    "1": "constant1"
                },
                "0x800000": {
                    "1": "constant2"
                },
                "0x20": {
                    "1": "bit_width"
                },
                "uVarX": {
                    "1": "temp_var"
                },
                "DAT_000818c0": {
                    "1": "max_shift"
                },
                "DAT_000818c4": {
                    "1": "max_divisor"
                },
                "DAT_000818c8": {
                    "1": "max_multiplier"
                },
                "uVar1_orig": {
                    "1": "lzcount"
                },
                "uVar2_orig": {
                    "1": "shift"
                },
                "uVar3_orig": {
                    "1": "mask"
                },
                "iVar4_orig": {
                    "1": "calculation_constant"
                },
                "uVar3_new": {
                    "1": "mask"
                },
                "uVar1_new": {
                    "1": "leading_zeros"
                },
                "uVar2_new": {
                    "1": "shift_amount"
                },
                "iVar4_new": {
                    "1": "result"
                }
            }
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_00081944",
            "code": "\nuint calculate_float_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint temp1;\n  int sum;\n  int diff;\n  uint temp2;\n  int temp5;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  temp1 = input1 >> 0x17 & 0xff;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (temp1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((temp1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        result temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      result (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = temp1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      temp1 = temp1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = temp1 + param4;\n  temp_result = input1 ^ input2;\n  temp1 = input1 << 9;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (temp1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = signed_borrow(sum,0x7f);\n    diff = sum + -0x7f;\n    is_zero = diff == 0;\n    temp5 = diff;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = signed_borrow(0xff,diff);\n      temp5 = 0xff - diff;\n      is_zero = diff == 0xff;\n    }\n    if (!is_zero && temp5 < 0 == is_negative) {\n      result = result | diff * 0x800000;\n    }\n    if (!is_zero && temp5 < 0 == is_negative) {\n      result result;\n    }\n    result = result | 0x800000;\n    temp2 = 0;\n    is_negative = signed_borrow(diff,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    temp1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(temp1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp2 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = signed_borrow(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    temp1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      result result;\n    }\n  }\n  if (is_zero || (int)temp1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != signed_carry(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == signed_carry(temp_result,0x19)) {\n      temp1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      temp1 = ((uint)((result & 0x80000000) != 0) << 0x1f | temp1 >> 1) + (uint)((byte)temp1 & 1);\n      if ((temp2 | temp_result << 1) == 0) {\n        temp1 = temp1 & ~(temp_result >> 0x1f);\n      }\n      result temp1;\n    }\n    result result;\n  }\nLAB_00081a94:\n  result result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "temp1",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "temp2",
                "iVar7": "temp5",
                "uVar8": "temp_result",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "lVar1": "product",
                "SBORROW4": "signed_borrow",
                "SCARRY4": "signed_carry",
                "return": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081944": {
                    "1": "binary_floating_point_operation",
                    "2": "calculate_floating_point_value",
                    "3": "calculate_float_value",
                    "7": "calculate_float",
                    "5": "calculate_floating_point"
                },
                "param_1": {
                    "1": "value1",
                    "2": "input_a",
                    "3": "operand1",
                    "19": "input1"
                },
                "param_2": {
                    "19": "input2",
                    "2": "input_2",
                    "1": "value2",
                    "3": "operand2"
                },
                "param_3": {
                    "1": "param",
                    "10": "param3",
                    "2": "constant",
                    "9": "input3"
                },
                "param_4": {
                    "2": "input3",
                    "1": "param_four",
                    "9": "input4"
                },
                "uVar2": {
                    "1": "float_result",
                    "25": "result"
                },
                "uVar3": {
                    "2": "exponent1",
                    "1": "fraction_part_operand1",
                    "6": "temp1"
                },
                "iVar4": {
                    "1": "temp2",
                    "2": "exponent_sum",
                    "12": "sum",
                    "3": "temp3"
                },
                "iVar5": {
                    "1": "shifted_byte_difference",
                    "2": "adjusted_exponent",
                    "5": "diff",
                    "4": "temp4"
                },
                "uVar6": {
                    "1": "result_temp",
                    "3": "product_low",
                    "4": "product",
                    "2": "mult_result"
                },
                "iVar7": {
                    "1": "difference",
                    "2": "diff_abs",
                    "4": "temp5"
                },
                "uVar8": {
                    "4": "temp_result",
                    "1": "result4",
                    "2": "result"
                },
                "bVar9": {
                    "1": "b_var9",
                    "5": "condition1",
                    "2": "is_zero1",
                    "15": "is_zero"
                },
                "bVar10": {
                    "16": "is_negative",
                    "5": "condition2",
                    "1": "subtraction_check",
                    "2": "flag2"
                },
                "lVar1": {
                    "1": "result",
                    "3": "long_result",
                    "5": "product"
                },
                "SBORROW4": {
                    "1": "signed_borrow"
                },
                "SCARRY4": {
                    "1": "signed_carry"
                },
                "return": {
                    "1": "result"
                },
                "iVar9": {
                    "1": "temp2"
                }
            }
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_00081bf4",
            "code": "\nuint check_overflow_00081bf4(uint input1,uint input2)\n\n{\n  bool is_negative;\n  uint doubled_input1;\n  uint doubled_input2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input1 = input1 * 2;\n  doubled_input2 = input2 * 2;\n  if (((int)doubled_input1 >> 0x18 == -1 || (int)doubled_input2 >> 0x18 == -1) &&\n     ((((int)doubled_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    output 1;\n  }\n  combined_inputs = doubled_input1 | input2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input1 ^ input2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input1 = doubled_input1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if ((is_negative && doubled_input2 <= doubled_input1) && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input2 > doubled_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  output input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "doubled_input1",
                "uVar3": "doubled_input2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "return": "output"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081bf4": {
                    "1": "multiply_and_check",
                    "4": "calculate_result",
                    "2": "multiply_and_check_overflow",
                    "9": "check_overflow"
                },
                "param_1": {
                    "9": "input_1",
                    "4": "result",
                    "2": "output",
                    "1": "input_a",
                    "12": "input1"
                },
                "param_2": {
                    "14": "input2",
                    "1": "result",
                    "2": "input_value_2",
                    "11": "input_2"
                },
                "uVar2": {
                    "4": "doubled_input1",
                    "1": "doubled_input_value_1",
                    "2": "twice_input1",
                    "3": "input1_times2"
                },
                "uVar3": {
                    "1": "double_input2",
                    "4": "doubled_input2",
                    "2": "twice_input2",
                    "3": "input2_times2"
                },
                "uVar4": {
                    "3": "combined_value",
                    "1": "combined_result",
                    "2": "combined",
                    "4": "combined_input",
                    "9": "combined_inputs"
                },
                "bVar1": {
                    "22": "is_negative",
                    "2": "is_combined_negative",
                    "3": "is_overflow",
                    "1": "is_combined_value_negative"
                },
                "bVar5": {
                    "1": "is_result_zero",
                    "3": "is_combined_zero",
                    "23": "is_zero"
                },
                "param_1 & 0x7fffff": {
                    "1": "input1_masked"
                },
                "param_2 & 0x7fffff": {
                    "1": "input2_masked"
                },
                "param_1 ^ param_2": {
                    "1": "inputs_xo_red"
                },
                "param_1 + param_2 * -2": {
                    "1": "negated_result"
                },
                "int(uVar4)": {
                    "1": "combined_as_int"
                },
                "uVar3 <= uVar2": {
                    "1": "is_b_less_than_a"
                },
                "param_1 | 1": {
                    "1": "result"
                },
                "return param_1": {
                    "1": "return_result"
                },
                "return": {
                    "1": "result"
                },
                "return_value": {
                    "1": "result"
                }
            }
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "execute_function_00081c54",
            "code": "\nvoid execute_function_00081c54(undefined4 arg1,undefined4 arg2)\n\n{\n  FUN_00081c5c(arg2,arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "execute_function_00081c54",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081c54": {
                    "1": "initialize_function",
                    "3": "copy_parameters",
                    "2": "process_data",
                    "6": "execute_function"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input1",
                    "3": "input_param",
                    "5": "arg1"
                },
                "param_2": {
                    "3": "output_param",
                    "2": "input_parameter2",
                    "1": "param_2",
                    "5": "arg2"
                },
                "FUN_00081c5c": {
                    "1": "perform_data_manipulation",
                    "3": "call_sub_function",
                    "2": "subfunction"
                }
            }
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081c5c": {
                    "1": "concatenate_and_return_uint64",
                    "2": "concatenate_values",
                    "12": "concatenate_params",
                    "9": "concatenate_parameters"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param1",
                    "5": "first_parameter",
                    "10": "first_param"
                },
                "param_2": {
                    "1": "second_u_int",
                    "2": "input_param2",
                    "10": "second_param",
                    "5": "second_parameter"
                },
                "FUN_00081bf4": {
                    "1": "merge_parameters",
                    "3": "concatenate_values",
                    "2": "perform_operation"
                },
                "FUN_00081bf4#param_1": {
                    "1": "input_1"
                },
                "FUN_00081bf4#param_2": {
                    "1": "input_2"
                }
            }
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_cy_zr_00081c94",
            "code": "\nbool check_cy_zr_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c5c();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_cy_zr_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081c94": {
                    "1": "check_boolean_conditions",
                    "7": "check_cy_zr",
                    "6": "check_cy_and_zr",
                    "5": "check_flags",
                    "2": "check_carry_and_zero"
                },
                "FUN_00081c5c": {
                    "1": "perform_additional_checks",
                    "2": "perform_operation"
                },
                "in_CY": {
                    "4": "is_carry",
                    "1": "is_cy_set",
                    "2": "is_cy",
                    "16": "carry_flag"
                },
                "in_ZR": {
                    "1": "zero_set",
                    "2": "is_zr",
                    "3": "is_zero",
                    "15": "zero_flag"
                },
                "param_1": {
                    "1": "input_param_1"
                },
                "param_2": {
                    "1": "input_param_2"
                }
            }
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_cy_and_zr_00081ca8",
            "code": "\nbool check_cy_and_zr_00081ca8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c54();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_cy_and_zr_00081ca8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081ca8": {
                    "1": "check_for_zero_values",
                    "4": "check_cy_zr",
                    "10": "check_cy_and_zr",
                    "6": "check_conditions"
                },
                "FUN_00081c54": {
                    "1": "execute_operation",
                    "2": "initialize_cy_and_zr",
                    "3": "perform_operation"
                },
                "in_ZR": {
                    "2": "zr_value",
                    "1": "boolean_input_zr",
                    "7": "zero_flag"
                },
                "in_CY": {
                    "1": "condition_cy",
                    "2": "cy_value",
                    "7": "carry_flag"
                },
                "param_1": {
                    "1": "input_param_1"
                },
                "param_2": {
                    "1": "input_param_2"
                }
            }
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_to_signed_int_00081cd0",
            "code": "\nuint convert_to_signed_int_00081cd0(uint input)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081cd0": {
                    "5": "convert_to_signed_int",
                    "1": "extract_number_from_binary",
                    "2": "reverse_bits",
                    "3": "convert_unsigned_to_int"
                },
                "param_1": {
                    "6": "input_value",
                    "1": "binary_value",
                    "2": "unsigned_int",
                    "3": "number"
                },
                "uVar1": {
                    "1": "shifted_val",
                    "2": "shifted_number",
                    "9": "shifted_value",
                    "3": "shifted_num",
                    "4": "shifted_input"
                },
                "uVar2": {
                    "1": "diff_from_max",
                    "2": "offset",
                    "16": "difference"
                },
                "uVar3": {
                    "1": "shifted_input",
                    "2": "result"
                },
                "uVar4": {
                    "1": "is_negative"
                },
                "uVar5": {
                    "1": "zero_check"
                },
                "param_2": {
                    "1": "output"
                },
                "0x7f000000": {
                    "1": "max_value"
                },
                "0x9e": {
                    "1": "value_to_subtract"
                },
                "0x9f": {
                    "1": "comparison_value"
                },
                "0x80000000": {
                    "1": "negative_mask"
                },
                "0xff": {
                    "1": "bit_mask"
                },
                "0xffffff9f": {
                    "1": "check_value"
                },
                "0x7fffff": {
                    "1": "check_mask"
                },
                "uVar6": {
                    "1": "modified_value"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                }
            }
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "reverse_bits_00081d1c",
            "code": "\nuint reverse_bits_00081d1c(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "reverse_bits_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081d1c": {
                    "1": "bit_shift_and_mask",
                    "3": "extract_bits",
                    "2": "calculate_shifted_value",
                    "8": "reverse_bits"
                },
                "param_1": {
                    "12": "input_value",
                    "3": "value",
                    "2": "input_number",
                    "1": "number"
                },
                "uVar1": {
                    "1": "shift",
                    "5": "shifted_value",
                    "21": "shift_amount",
                    "2": "result"
                },
                "0x80000000": {
                    "1": "bit_sign"
                },
                "0x7f000000": {
                    "1": "max_threshold"
                },
                "0x9e": {
                    "2": "shift_constant",
                    "1": "shift_amount"
                },
                "0x18": {
                    "1": "shift_value_1"
                },
                "0xff": {
                    "1": "mask_value"
                },
                "0xffffff9f": {
                    "1": "special_case"
                },
                "0x7fffff": {
                    "1": "negative_mask",
                    "2": "mask"
                },
                "0xffffffff": {
                    "2": "error_code"
                }
            }
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 update_relocation_entry_00081d5c(dword new_address,dword new_value,dword offset)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  \n  if (relocation_table[48].offset == 0) {\n    relocation_table[48].offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_table[48].offset + 4);\n  relocation_entry = (dword *)relocation_table[48].offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)FUN_00081df4(400);\n    if (relocation_entry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocation_entry = relocation_table[48].offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocation_table[48].offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_address;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = offset;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "new_address",
                "param_2": "new_value",
                "param_3": "offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "pdVar1": "relocation_entry",
                "uVar2": "index",
                "uVar3": "bit_mask",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081d5c": {
                    "2": "set_relocation_entry",
                    "1": "set_relocation",
                    "18": "update_relocation_entry",
                    "4": "update_relocation_table"
                },
                "param_1": {
                    "4": "address",
                    "7": "new_value",
                    "3": "new_value1",
                    "2": "value",
                    "1": "relocation_value",
                    "8": "new_address"
                },
                "param_2": {
                    "1": "value2",
                    "2": "index",
                    "9": "new_value",
                    "3": "new_value2",
                    "4": "value"
                },
                "param_3": {
                    "2": "symbol_type",
                    "3": "new_offset",
                    "1": "new_data",
                    "4": "old_value",
                    "5": "offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "symbol_table",
                    "5": "relocation_array",
                    "8": "relocation_table"
                },
                "pdVar1": {
                    "9": "current_entry",
                    "1": "entry_ptr",
                    "11": "relocation_entry",
                    "2": "entry"
                },
                "uVar2": {
                    "12": "entry_index",
                    "1": "current_index",
                    "16": "index"
                },
                "uVar3": {
                    "3": "flag",
                    "5": "bitmask",
                    "1": "bitwise_flag",
                    "20": "bit_mask"
                },
                "FUN_00081df4": {
                    "1": "allocate_memory"
                },
                "r_offset": {
                    "1": "offset"
                }
            }
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_sub_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_sub_functions_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  FUNC_00085858();\n  function_pointers = (code **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_sub_functions_00081d7c",
                "ppcVar2": "function_pointers",
                "iVar1": "iteration_count"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081d7c": {
                    "8": "execute_subfunctions",
                    "2": "execute_function_set",
                    "15": "execute_sub_functions",
                    "1": "execute_subroutines"
                },
                "ppcVar2": {
                    "14": "function_pointers",
                    "6": "function_pointer",
                    "1": "subfunction_ptr",
                    "2": "function_list"
                },
                "iVar1": {
                    "1": "subfunction_count",
                    "5": "counter",
                    "17": "iteration_count",
                    "3": "index"
                },
                "FUNC_00085858": {
                    "11": "initialize",
                    "1": "initialize_subsystems"
                },
                "FUN_00083974": {
                    "1": "subfunction_one",
                    "2": "sub_function_1",
                    "3": "subfunction_1"
                },
                "FUNC_00080118": {
                    "2": "sub_function_2",
                    "4": "subfunction_2",
                    "1": "additional_function"
                },
                "undefined4": {
                    "1": "return_value"
                },
                "FUNC_00083974": {
                    "1": "subfunction_one"
                },
                "FUN_00085858": {
                    "1": "initialize"
                }
            }
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "process_relocation_00081df4",
            "code": "\nvoid process_relocation_00081df4(undefined4 relocation_array)\n\n{\n  FUN_00081e14(relocation_table[140].offset,relocation_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "process_relocation_00081df4",
                "param_1": "relocation_array",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081df4": {
                    "2": "process_elf_relocation",
                    "1": "perform_relocation",
                    "3": "process_function",
                    "6": "process_relocation",
                    "5": "process_relocation_entry"
                },
                "param_1": {
                    "2": "param",
                    "1": "input_param",
                    "6": "relocation_array"
                },
                "FUN_00081e14": {
                    "1": "process_elf32_rel",
                    "2": "perform_relocation",
                    "14": "apply_relocation",
                    "3": "process_relocation_entry"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array",
                    "3": "relocation_table",
                    "2": "rel_array"
                },
                "r_offset": {
                    "4": "offset",
                    "1": "entry_offset"
                },
                "param_2": {
                    "2": "index",
                    "1": "relocation_value",
                    "3": "size"
                },
                "undefined4 param_1": {
                    "1": "input_param"
                },
                "undefined4 *param_1": {
                    "1": "data_param"
                },
                "uint param_2": {
                    "1": "size_param"
                }
            }
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "execute_relocation_00081e04",
            "code": "\nvoid execute_relocation_00081e04(undefined4 offset)\n\n{\n  FUN_00083d9c(relocation_offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "execute_relocation_00081e04",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocation_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "relocation_offset"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081e04": {
                    "14": "execute_relocation",
                    "1": "process_rel_array_element",
                    "4": "execute_function",
                    "2": "process_elf_relocation",
                    "5": "process_relocation"
                },
                "param_1": {
                    "1": "rel_array",
                    "3": "param",
                    "11": "offset"
                },
                "FUN_00083d9c": {
                    "1": "perform_operation",
                    "7": "apply_relocation",
                    "13": "perform_relocation"
                },
                "param_2": {
                    "1": "relocation_value",
                    "5": "offset",
                    "2": "param_2",
                    "6": "param"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "pointer_to_relocation_offset",
                    "2": "relocation_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "2": "relocation_table",
                    "1": "rel_array"
                },
                "r_offset": {
                    "1": "relocation_offset"
                }
            }
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *param_array,uint size)\n\n{\n  dword temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  uint temp_var6;\n  dword temp_var7;\n  uint temp_var8;\n  int temp_var9;\n  undefined *temp_ptr1;\n  dword temp_var11;\n  dword temp_var12;\n  int temp_var13;\n  dword *temp_var14;\n  uint aligned_size;\n  undefined *temp_var16;\n  dword *temp_var17;\n  uint temp_var18;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *param_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(param_array);\n  temp_var1 = relocation_table[142].r_info;\n  if (aligned_size < 0x1f8) {\n    temp_var13 = *(int *)((int)&relocation_table[0x8e].r_offset + aligned_size);\n    if ((temp_var13 != aligned_size + 0x20070464) ||\n       (temp_var2 = temp_var13 + 8, temp_var13 = *(int *)(temp_var13 + 0x14), temp_var2 != temp_var13)) {\n      temp_var5 = *(int *)(temp_var13 + 0xc);\n      temp_var9 = (*(uint *)(temp_var13 + 4) & 0xfffffffc) + temp_var13;\n      aligned_size = *(uint *)(temp_var9 + 4);\n      temp_var2 = *(int *)(temp_var13 + 8);\n      *(int *)(temp_var2 + 0xc) = temp_var5;\n      *(int *)(temp_var5 + 8) = temp_var2;\n      *(uint *)(temp_var9 + 4) = aligned_size | 1;\n      FUNC_0008259c(param_array);\n      return (int *)(temp_var13 + 8);\n    }\n    temp_var18 = (aligned_size >> 3) + 2;\n  }\n  else {\n    temp_var18 = aligned_size >> 9;\n    if (temp_var18 == 0) {\n      temp_var2 = 0x7e;\n      temp_var13 = 0x3f;\n    }\n    else if (temp_var18 < 5) {\n      temp_var13 = (aligned_size >> 6) + 0x38;\n      temp_var2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x15) {\n      temp_var13 = temp_var18 + 0x5b;\n      temp_var2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x55) {\n      temp_var13 = (aligned_size >> 0xc) + 0x6e;\n      temp_var2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x155) {\n      temp_var13 = (aligned_size >> 0xf) + 0x77;\n      temp_var2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x555) {\n      temp_var13 = (aligned_size >> 0x12) + 0x7c;\n      temp_var2 = temp_var13 * 2;\n    }\n    else {\n      temp_var2 = 0xfc;\n      temp_var13 = 0x7e;\n    }\n    for (temp_var7 = (&relocation_table[0x8e].r_offset)[temp_var2]; temp_var2 * 4 + 0x20070464U != temp_var7\n        ; temp_var7 = *(dword *)(temp_var7 + 0xc)) {\n      temp_var18 = *(uint *)(temp_var7 + 4) & 0xfffffffc;\n      temp_var5 = temp_var18 - aligned_size;\n      if (0xf < temp_var5) {\n        temp_var13 = temp_var13 + -1;\n        break;\n      }\n      if (-1 < temp_var5) {\n        temp_var2 = temp_var18 + temp_var7;\n        aligned_size = *(uint *)(temp_var2 + 4);\n        temp_var5 = *(int *)(temp_var7 + 0xc);\n        temp_var13 = *(int *)(temp_var7 + 8);\n        *(int *)(temp_var13 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var13;\n        *(uint *)(temp_var2 + 4) = aligned_size | 1;\n        FUNC_0008259c(param_array);\n        return (int *)(temp_var7 + 8);\n      }\n    }\n    temp_var18 = temp_var13 + 1;\n  }\n  temp_var7 = relocation_table[141].r_offset;\n  if (relocation_table[142].r_info != 0x2007046c) {\n    temp_var3 = *(uint *)(relocation_table[142].r_info + 4);\n    temp_var4 = temp_var3 & 0xfffffffc;\n    temp_var6 = temp_var4 - aligned_size;\n    if (0xf < (int)temp_var6) {\n      temp_var7 = aligned_size + relocation_table[142].r_info;\n      *(uint *)(relocation_table[142].r_info + 4) = aligned_size | 1;\n      relocation_table[142].r_info = temp_var7;\n      relocation_table[143].r_offset = temp_var7;\n      *(undefined4 *)(temp_var7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp_var7 + 8) = 0x2007046c;\n      *(uint *)(temp_var7 + 4) = temp_var6 | 1;\n      *(uint *)(temp_var7 + temp_var6) = temp_var6;\n      FUNC_0008259c(param_array);\n      return (int *)(temp_var1 + 8);\n    }\n    relocation_table[143].r_offset = 0x2007046c;\n    relocation_table[142].r_info = 0x2007046c;\n    if (-1 < (int)temp_var6) {\n      *(uint *)(temp_var4 + temp_var1 + 4) = *(uint *)(temp_var4 + temp_var1 + 4) | 1;\n      FUNC_0008259c(param_array);\n      return (int *)(temp_var1 + 8);\n    }\n    if (temp_var4 < 0x200) {\n      temp_var4 = temp_var3 & 0xfffffff8;\n      temp_var13 = *(int *)((int)&relocation_table[0x8d].r_info + temp_var4);\n      temp_var7 = 1 << ((int)(temp_var3 >> 3) >> 2 & 0xffU) | relocation_table[141].r_offset;\n      *(int *)(temp_var1 + 8) = temp_var13;\n      *(uint *)(temp_var1 + 0xc) = temp_var4 + 0x20070464;\n      relocation_table[141].r_offset = temp_var7;\n      *(dword *)((int)&relocation_table[0x8d].r_info + temp_var4) = temp_var1;\n      *(dword *)(temp_var13 + 0xc) = temp_var1;\n    }\n    else {\n      temp_var6 = temp_var3 >> 9;\n      if (temp_var6 < 5) {\n        temp_var2 = (temp_var3 >> 6) + 0x38;\n        temp_var13 = temp_var2 * 2;\n      }\n      else if (temp_var6 < 0x15) {\n        temp_var2 = temp_var6 + 0x5b;\n        temp_var13 = temp_var2 * 2;\n      }\n      else if (temp_var6 < 0x55) {\n        temp_var2 = (temp_var3 >> 0xc) + 0x6e;\n        temp_var13 = temp_var2 * 2;\n      }\n      else if (temp_var6 < 0x155) {\n        temp_var2 = (temp_var3 >> 0xf) + 0x77;\n        temp_var13 = temp_var2 * 2;\n      }\n      else if (temp_var6 < 0x555) {\n        temp_var2 = (temp_var3 >> 0x12) + 0x7c;\n        temp_var13 = temp_var2 * 2;\n      }\n      else {\n        temp_var13 = 0xfc;\n        temp_var2 = 0x7e;\n      }\n      temp_var7 = temp_var13 * 4 + 0x20070464;\n      temp_var11 = (&relocation_table[0x8d].r_info)[temp_var13];\n      if (temp_var11 == temp_var7) {\n        relocation_table[141].r_offset =\n             relocation_table[141].r_offset | 1 << (temp_var2 >> 2 & 0xffU);\n        temp_var12 = temp_var11;\n      }\n      else {\n        do {\n          temp_var12 = temp_var11;\n          if ((*(uint *)(temp_var11 + 4) & 0xfffffffc) <= temp_var4) break;\n          temp_var11 = *(dword *)(temp_var11 + 8);\n          temp_var12 = temp_var11;\n        } while (temp_var7 != temp_var11);\n        temp_var11 = *(dword *)(temp_var12 + 0xc);\n      }\n      temp_var7 = relocation_table[141].r_offset;\n      *(dword *)(temp_var1 + 0xc) = temp_var11;\n      *(dword *)(temp_var1 + 8) = temp_var12;\n      *(dword *)(temp_var11 + 8) = temp_var1;\n      *(dword *)(temp_var12 + 0xc) = temp_var1;\n    }\n  }\n  temp_var1 = relocation_table[141].r_info;\n  temp_var3 = 1 << ((int)temp_var18 >> 2 & 0xffU);\n  if (temp_var3 <= temp_var7) {\n    if ((temp_var7 & temp_var3) == 0) {\n      temp_var18 = temp_var18 & 0xfffffffc;\n      do {\n        temp_var3 = temp_var3 << 1;\n        temp_var18 = temp_var18 + 4;\n      } while ((temp_var7 & temp_var3) == 0);\n    }\n    do {\n      temp_var17 = &relocation_table[temp_var18 + 0x8c].r_info;\n      temp_var14 = temp_var17;\n      temp_var4 = temp_var18;\n      do {\n        for (temp_ptr1 = (undefined *)temp_var14[3]; temp_var14 != (dword *)temp_ptr1;\n            temp_ptr1 = *(undefined **)(temp_ptr1 + 0xc)) {\n          temp_var6 = *(uint *)(temp_ptr1 + 4) & 0xfffffffc;\n          temp_var8 = temp_var6 - aligned_size;\n          if (0xf < (int)temp_var8) {\n            temp_var2 = *(int *)(temp_ptr1 + 8);\n            temp_var13 = *(int *)(temp_ptr1 + 0xc);\n            temp_var16 = temp_ptr1 + aligned_size;\n            *(uint *)(temp_ptr1 + 4) = aligned_size | 1;\n            *(int *)(temp_var2 + 0xc) = temp_var13;\n            *(int *)(temp_var13 + 8) = temp_var2;\n            relocation_table[142].r_info = (dword)temp_var16;\n            relocation_table[143].r_offset = (dword)temp_var16;\n            *(undefined4 *)(temp_var16 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_var16 + 8) = 0x2007046c;\n            *(uint *)(temp_var16 + 4) = temp_var8 | 1;\n            *(uint *)(temp_var16 + temp_var8) = temp_var8;\n            FUNC_0008259c(param_array);\n            return (int *)(temp_ptr1 + 8);\n          }\n          if (-1 < (int)temp_var8) {\n            temp_var13 = *(int *)(temp_ptr1 + 8);\n            temp_var2 = *(int *)(temp_ptr1 + 0xc);\n            *(uint *)(temp_ptr1 + temp_var6 + 4) = *(uint *)(temp_ptr1 + temp_var6 + 4) | 1;\n            *(int *)(temp_var13 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var13;\n            FUNC_0008259c(param_array);\n            return (int *)(temp_ptr1 + 8);\n          }\n        }\n        temp_var4 = temp_var4 + 1;\n        temp_var14 = temp_var14 + 2;\n      } while ((temp_var4 & 3) != 0);\n      do {\n        temp_var6 = temp_var18 & 3;\n        temp_ptr1 = (undefined *)(temp_var17 + -2);\n        temp_var18 = temp_var18 - 1;\n        if (temp_var6 == 0) {\n          relocation_table[141].r_offset = relocation_table[141].r_offset & ~temp_var3;\n          break;\n        }\n        temp_var17 = (dword *)*temp_var17;\n      } while (temp_var17 == (dword *)temp_ptr1);\n      temp_var3 = temp_var3 * 2;\n      if ((relocation_table[141].r_offset <= temp_var3 &&\n           temp_var3 - relocation_table[141].r_offset != 0) || (temp_var18 = temp_var4, temp_var3 == 0))\n      break;\n      for (; (relocation_table[141].r_offset & temp_var3) == 0; temp_var3 = temp_var3 << 1) {\n        temp_var18 = temp_var18 + 4;\n      }\n    } while( true );\n  }\n  temp_var18 = *(uint *)(relocation_table[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= temp_var18) &&\n     (temp_var3 = temp_var18 - aligned_size, temp_var7 = relocation_table[141].r_info, 0xf < (int)temp_var3))\n  goto LAB_0008211e;\n  temp_var3 = relocation_table[141].r_info + temp_var18;\n  if (relocation_table[270].r_offset == 0xffffffff) {\n    temp_var4 = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    temp_var4 = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  temp_var7 = FUN_00082970(param_array,temp_var4);\n  if ((temp_var7 == 0xffffffff) || ((temp_var7 < temp_var3 && (temp_var1 != 0x20070464)))) {\n    temp_var18 = *(uint *)(relocation_table[141].r_info + 4) & 0xfffffffc;\n    temp_var7 = relocation_table[141].r_info;\n  }\n  else {\n    temp_var6 = DAT_20071194 + temp_var4;\n    DAT_20071194 = temp_var6;\n    if ((temp_var3 == temp_var7) && ((temp_var3 & 0xfff) == 0)) {\n      *(uint *)(relocation_table[141].r_info + 4) = temp_var4 + temp_var18 | 1;\n    }\n    else {\n      temp_var11 = temp_var7;\n      if (relocation_table[270].r_offset != 0xffffffff) {\n        temp_var11 = relocation_table[270].r_offset;\n        DAT_20071194 = temp_var6 + (temp_var7 - temp_var3);\n      }\n      relocation_table[270].r_offset = temp_var11;\n      temp_var3 = temp_var7 & 7;\n      if (temp_var3 == 0) {\n        temp_var13 = 0x1000;\n      }\n      else {\n        temp_var7 = temp_var7 + (8 - temp_var3);\n        temp_var13 = 0x1008 - temp_var3;\n      }\n      temp_var13 = temp_var13 - (temp_var4 + temp_var7 & 0xfff);\n      temp_var2 = FUN_00082970(param_array,temp_var13);\n      if (temp_var2 == -1) {\n        temp_var3 = 1;\n        temp_var13 = 0;\n      }\n      else {\n        temp_var3 = (temp_var2 - temp_var7) + temp_var13 | 1;\n      }\n      temp_var6 = DAT_20071194 + temp_var13;\n      relocation_table[141].r_info = temp_var7;\n      DAT_20071194 = temp_var6;\n      *(uint *)(temp_var7 + 4) = temp_var3;\n      if (temp_var1 != 0x20070464) {\n        if (temp_var18 < 0x10) {\n          *(undefined4 *)(temp_var7 + 4) = 1;\n          temp_var18 = 0;\n          goto LAB_00082108;\n        }\n        temp_var18 = temp_var18 - 0xc & 0xfffffff8;\n        *(uint *)(temp_var1 + 4) = temp_var18 | *(uint *)(temp_var1 + 4) & 1;\n        *(undefined4 *)(temp_var1 + temp_var18 + 4) = 5;\n        *(undefined4 *)(temp_var1 + temp_var18 + 8) = 5;\n        if (0xf < temp_var18) {\n          FUN_00083d9c(param_array,temp_var1 + 8);\n          temp_var6 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp_var6) {\n      DAT_2007118c = temp_var6;\n    }\n    if (DAT_20071188 < temp_var6) {\n      DAT_20071188 = temp_var6;\n    }\n    temp_var18 = *(uint *)(relocation_table[141].r_info + 4) & 0xfffffffc;\n    temp_var7 = relocation_table[141].r_info;\n  }\nLAB_00082108:\n  temp_var3 = temp_var18 - aligned_size;\n  if ((temp_var18 < aligned_size) || ((int)temp_var3 < 0x10)) {\n    FUNC_0008259c(param_array);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  relocation_table[141].r_info = aligned_size + temp_var7;\n  *(uint *)(temp_var7 + 4) = aligned_size | 1;\n  *(uint *)(relocation_table[141].r_info + 4) = temp_var3 | 1;\n  FUNC_0008259c(param_array);\n  return (int *)(temp_var7 + 8);\n}\n\n",
            "renaming": {
                "param_1": "param_array",
                "param_2": "size",
                "dVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "iVar5": "temp_var5",
                "uVar6": "temp_var6",
                "dVar7": "temp_var7",
                "uVar8": "temp_var8",
                "iVar9": "temp_var9",
                "puVar10": "temp_ptr1",
                "dVar11": "temp_var11",
                "dVar12": "temp_var12",
                "iVar13": "temp_var13",
                "dVar14": "temp_var2",
                "uVar15": "aligned_size",
                "puVar16": "temp_var16",
                "pdVar17": "temp_var17",
                "uVar18": "temp_var18",
                "pdVar14": "temp_var14",
                "FUN_00081e14": "allocate_memory_00081e14",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "uVar16": "temp16"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "result",
                    "3": "parameter_array",
                    "4": "param_array",
                    "2": "input_pointer"
                },
                "param_2": {
                    "4": "array_length",
                    "2": "parameter_2",
                    "6": "input_size",
                    "1": "new_param2",
                    "7": "size"
                },
                "dVar1": {
                    "1": "info",
                    "6": "temp_var1",
                    "2": "index",
                    "5": "temp1",
                    "3": "result"
                },
                "iVar2": {
                    "1": "i_var_temp",
                    "2": "i_var2",
                    "7": "temp_var2",
                    "5": "temp2",
                    "3": "temp_var1"
                },
                "uVar3": {
                    "6": "temp_var3",
                    "1": "temp_var6",
                    "3": "u_var3",
                    "2": "temp_var2",
                    "5": "temp3"
                },
                "uVar4": {
                    "2": "temp_var3",
                    "1": "u_var_temp2",
                    "6": "temp_var4",
                    "3": "u_var4",
                    "5": "temp4"
                },
                "iVar5": {
                    "5": "temp5",
                    "1": "new_var5",
                    "6": "temp_var5",
                    "2": "temp_var4",
                    "4": "i_var5"
                },
                "uVar6": {
                    "1": "u_var4",
                    "4": "u_var6",
                    "2": "temp_var5",
                    "7": "temp_var6"
                },
                "dVar7": {
                    "1": "temp_d_var7",
                    "6": "temp_var7",
                    "4": "temp7",
                    "2": "current_address"
                },
                "uVar8": {
                    "1": "new_size",
                    "5": "temp8",
                    "4": "u_var8",
                    "6": "temp_var8"
                },
                "iVar9": {
                    "1": "index_3",
                    "5": "temp9",
                    "6": "temp_var9"
                },
                "puVar10": {
                    "1": "temp10",
                    "2": "pu_var10",
                    "4": "temp_var10"
                },
                "dVar11": {
                    "1": "temp3",
                    "6": "temp_var11",
                    "2": "d_var11"
                },
                "dVar12": {
                    "1": "temp9",
                    "2": "temp_ptr3",
                    "6": "temp_var12"
                },
                "iVar13": {
                    "2": "temp13",
                    "1": "i_var_iter",
                    "3": "temp_var1",
                    "6": "temp_var13",
                    "4": "i_var13"
                },
                "dVar14": {
                    "1": "temp_var2"
                },
                "uVar15": {
                    "1": "temp_var12",
                    "11": "aligned_size",
                    "4": "temp_var15"
                },
                "puVar16": {
                    "1": "pointer3",
                    "4": "temp_var16",
                    "2": "temp_pointer3"
                },
                "pdVar17": {
                    "1": "temp_info_ptr",
                    "4": "temp_var17",
                    "2": "temp_pointer4"
                },
                "uVar18": {
                    "1": "level",
                    "4": "index",
                    "2": "temp_var4",
                    "5": "temp_var18"
                },
                "iVar19": {
                    "1": "loop_counter2"
                },
                "uVar20": {
                    "1": "temp_var6"
                },
                "dVar21": {
                    "1": "temp_ptr6"
                },
                "dVar22": {
                    "1": "temp_ptr7"
                },
                "iVar23": {
                    "1": "temp_var7"
                },
                "pdVar14": {
                    "1": "rel_index",
                    "2": "pd_var14",
                    "4": "temp_var14"
                },
                "FUN_00081e14": {
                    "1": "binary_relocation",
                    "3": "allocate_memory"
                },
                "FUNC_00082598": {
                    "2": "initialize_function",
                    "1": "initialize_memory"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_table"
                },
                "FUNC_0008259c": {
                    "2": "cleanup_function"
                },
                "FUNC_00082970": {
                    "1": "allocate_memory_function"
                },
                "FUNC_00083d9c": {
                    "1": "free_memory_function"
                },
                "iVar14": {
                    "1": "temp14"
                },
                "iVar15": {
                    "1": "temp15"
                },
                "uVar16": {
                    "1": "temp16"
                },
                "iVar17": {
                    "1": "temp17"
                },
                "dVar19": {
                    "1": "temp19"
                },
                "FUN_00082970": {
                    "1": "allocate_memory"
                },
                "FUN_00083d9c": {
                    "1": "deallocate_memory"
                },
                "iVar20": {
                    "1": "temp_18"
                },
                "iVar21": {
                    "1": "temp_var13"
                },
                "iVar22": {
                    "1": "temp_var14"
                },
                "iVar24": {
                    "1": "temp_22"
                },
                "iVar25": {
                    "1": "temp_var17"
                },
                "iVar26": {
                    "1": "temp_24"
                },
                "iVar27": {
                    "1": "temp_25"
                },
                "dVar28": {
                    "1": "temp_26"
                },
                "dVar29": {
                    "1": "temp_27"
                },
                "dVar30": {
                    "1": "temp_28"
                },
                "dVar31": {
                    "1": "temp_29"
                },
                "dVar32": {
                    "1": "temp_30"
                },
                "dVar33": {
                    "1": "temp_31"
                },
                "dVar34": {
                    "1": "temp_32"
                },
                "dVar35": {
                    "1": "temp_33"
                },
                "dVar36": {
                    "1": "temp_34"
                },
                "dVar37": {
                    "1": "temp_35"
                },
                "dVar38": {
                    "1": "temp_36"
                },
                "dVar39": {
                    "1": "temp_37"
                },
                "dVar40": {
                    "1": "temp_38"
                },
                "dVar41": {
                    "1": "temp_39"
                },
                "dVar42": {
                    "1": "temp_40"
                },
                "dVar43": {
                    "1": "temp_41"
                },
                "dVar44": {
                    "1": "temp_42"
                },
                "dVar45": {
                    "1": "temp_43"
                },
                "dVar46": {
                    "1": "temp_44"
                },
                "dVar47": {
                    "1": "temp_45"
                },
                "dVar48": {
                    "1": "temp_46"
                },
                "dVar49": {
                    "1": "temp_47"
                },
                "dVar50": {
                    "1": "temp_48"
                },
                "dVar51": {
                    "1": "temp_49"
                },
                "dVar52": {
                    "1": "temp_50"
                },
                "dVar53": {
                    "1": "temp_51"
                },
                "dVar54": {
                    "1": "temp_52"
                },
                "dVar55": {
                    "1": "temp_53"
                },
                "dVar56": {
                    "1": "temp_54"
                },
                "dVar57": {
                    "1": "temp_55"
                },
                "dVar58": {
                    "1": "temp_56"
                },
                "dVar59": {
                    "1": "temp_57"
                },
                "dVar60": {
                    "1": "temp_58"
                },
                "dVar61": {
                    "1": "temp_59"
                },
                "dVar62": {
                    "1": "temp_60"
                },
                "dVar63": {
                    "1": "temp_61"
                },
                "dVar64": {
                    "1": "temp_62"
                },
                "dVar65": {
                    "1": "temp_63"
                },
                "uVar21": {
                    "1": "mask_temp"
                },
                "uVar23": {
                    "1": "u_var_temp5"
                },
                "uVar24": {
                    "1": "u_var_temp6"
                },
                "uVar26": {
                    "1": "u_var_temp7"
                },
                "uVar28": {
                    "1": "temp_var20"
                },
                "iVar29": {
                    "1": "i_var_temp7"
                },
                "uVar30": {
                    "1": "u_var_temp9"
                },
                "iVar31": {
                    "1": "i_var_temp8"
                },
                "pdVar32": {
                    "1": "rel_info_temp"
                },
                "pdVar33": {
                    "1": "rel_info_temp2"
                },
                "uVar34": {
                    "1": "mask_temp2"
                },
                "iVar36": {
                    "1": "i_var_temp9"
                },
                "uVar37": {
                    "1": "temp_var29"
                },
                "iVar38": {
                    "1": "i_var_temp10"
                },
                "uVar39": {
                    "1": "u_var_temp11"
                },
                "uVar40": {
                    "1": "temp_var32"
                },
                "uVar27": {
                    "1": "temp_var19"
                },
                "uVar29": {
                    "1": "temp_var21"
                },
                "uVar31": {
                    "1": "temp_var23"
                },
                "uVar32": {
                    "1": "temp_var24"
                },
                "uVar33": {
                    "1": "temp_var25"
                },
                "uVar35": {
                    "1": "temp_var27"
                },
                "uVar36": {
                    "1": "temp_var28"
                },
                "uVar38": {
                    "1": "temp_var30"
                },
                "uVar41": {
                    "1": "temp_var33"
                },
                "uVar42": {
                    "1": "temp_var34"
                },
                "uVar43": {
                    "1": "temp_var35"
                },
                "uVar44": {
                    "1": "temp_var36"
                },
                "uVar45": {
                    "1": "temp_var37"
                },
                "uVar46": {
                    "1": "temp_var38"
                },
                "uVar47": {
                    "1": "temp_var39"
                },
                "uVar48": {
                    "1": "temp_var40"
                },
                "uVar49": {
                    "1": "temp_var41"
                },
                "uVar50": {
                    "1": "temp_var42"
                },
                "uVar51": {
                    "1": "temp_var43"
                },
                "uVar52": {
                    "1": "temp_var44"
                },
                "uVar53": {
                    "1": "temp_var45"
                },
                "uVar54": {
                    "1": "temp_var46"
                },
                "uVar55": {
                    "1": "temp_var47"
                },
                "uVar56": {
                    "1": "temp_var48"
                },
                "uVar57": {
                    "1": "temp_var49"
                },
                "uVar58": {
                    "1": "temp_var50"
                },
                "uVar59": {
                    "1": "temp_var51"
                },
                "uVar60": {
                    "1": "temp_var52"
                },
                "uVar61": {
                    "1": "temp_var53"
                },
                "uVar62": {
                    "1": "temp_var54"
                },
                "uVar63": {
                    "1": "temp_var55"
                },
                "uVar64": {
                    "1": "temp_var56"
                },
                "uVar65": {
                    "1": "temp_var57"
                },
                "uVar66": {
                    "1": "temp_var58"
                },
                "uVar67": {
                    "1": "temp_var59"
                },
                "uVar68": {
                    "1": "temp_var60"
                },
                "dVar69": {
                    "1": "temp_var61"
                },
                "uVar70": {
                    "1": "temp_var62"
                },
                "dVar71": {
                    "1": "temp_var63"
                },
                "uVar72": {
                    "1": "temp_var64"
                },
                "uVar73": {
                    "1": "temp_var65"
                },
                "uVar74": {
                    "1": "temp_var66"
                },
                "uVar75": {
                    "1": "temp_var67"
                },
                "uVar76": {
                    "1": "temp_var68"
                },
                "uVar77": {
                    "1": "temp_var69"
                },
                "uVar78": {
                    "1": "temp_var70"
                },
                "uVar79": {
                    "1": "temp_var71"
                },
                "uVar80": {
                    "1": "temp_var72"
                },
                "uVar81": {
                    "1": "temp_var73"
                },
                "uVar82": {
                    "1": "temp_var74"
                },
                "uVar83": {
                    "1": "temp_var75"
                },
                "uVar84": {
                    "1": "temp_var76"
                },
                "uVar85": {
                    "1": "temp_var77"
                },
                "uVar86": {
                    "1": "temp_var78"
                },
                "uVar87": {
                    "1": "temp_var79"
                },
                "uVar88": {
                    "1": "temp_var80"
                },
                "uVar89": {
                    "1": "temp_var81"
                },
                "uVar90": {
                    "1": "temp_var82"
                },
                "uVar91": {
                    "1": "temp_var83"
                },
                "uVar92": {
                    "1": "temp_var84"
                },
                "uVar93": {
                    "1": "temp_var85"
                },
                "uVar94": {
                    "1": "temp_var86"
                },
                "uVar95": {
                    "1": "temp_var87"
                },
                "uVar96": {
                    "1": "temp_var88"
                },
                "uVar97": {
                    "1": "temp_var89"
                },
                "uVar98": {
                    "1": "temp_var90"
                },
                "uVar99": {
                    "1": "temp_var91"
                },
                "uVar100": {
                    "1": "temp_var92"
                },
                "uVar101": {
                    "1": "temp_var93"
                },
                "uVar102": {
                    "1": "temp_var94"
                },
                "uVar103": {
                    "1": "temp_var95"
                },
                "uVar104": {
                    "1": "temp_var96"
                },
                "uVar105": {
                    "1": "temp_var97"
                },
                "uVar106": {
                    "1": "temp_var98"
                },
                "uVar107": {
                    "1": "temp_var99"
                },
                "uVar108": {
                    "1": "temp_var100"
                },
                "uVar109": {
                    "1": "temp_var101"
                },
                "uVar110": {
                    "1": "temp_var102"
                },
                "uVar111": {
                    "1": "temp_var103"
                },
                "uVar112": {
                    "1": "temp_var104"
                },
                "uVar113": {
                    "1": "temp_var105"
                },
                "uVar114": {
                    "1": "temp_var106"
                },
                "uVar115": {
                    "1": "temp_var107"
                },
                "uVar116": {
                    "1": "temp_var108"
                },
                "uVar117": {
                    "1": "temp_var109"
                },
                "uVar118": {
                    "1": "temp_var110"
                },
                "uVar119": {
                    "1": "temp_var111"
                },
                "uVar120": {
                    "1": "temp_var112"
                },
                "uVar121": {
                    "1": "temp_var113"
                },
                "uVar122": {
                    "1": "temp_var114"
                },
                "uVar123": {
                    "1": "temp_var115"
                },
                "uVar124": {
                    "1": "temp_var116"
                },
                "uVar125": {
                    "1": "temp_var117"
                },
                "uVar126": {
                    "1": "temp_var118"
                },
                "uVar127": {
                    "1": "temp_var119"
                },
                "uVar128": {
                    "1": "temp_var120"
                },
                "uVar129": {
                    "1": "temp_var121"
                },
                "uVar130": {
                    "1": "temp_var122"
                },
                "uVar131": {
                    "1": "temp_var123"
                },
                "uVar132": {
                    "1": "temp_var124"
                },
                "uVar133": {
                    "1": "temp_var125"
                },
                "uVar134": {
                    "1": "temp_var126"
                },
                "uVar135": {
                    "1": "temp_var127"
                },
                "uVar136": {
                    "1": "temp_var128"
                },
                "uVar137": {
                    "1": "temp_var129"
                },
                "uVar138": {
                    "1": "temp_var130"
                },
                "uVar139": {
                    "1": "temp_var131"
                },
                "uVar140": {
                    "1": "temp_var132"
                },
                "uVar141": {
                    "1": "temp_var133"
                },
                "uVar142": {
                    "1": "temp_var134"
                },
                "uVar143": {
                    "1": "temp_var135"
                },
                "uVar144": {
                    "1": "temp_var136"
                },
                "uVar145": {
                    "1": "temp_var137"
                },
                "uVar146": {
                    "1": "temp_var138"
                },
                "uVar147": {
                    "1": "temp_var139"
                },
                "uVar148": {
                    "1": "temp_var140"
                },
                "uVar149": {
                    "1": "temp_var141"
                },
                "uVar150": {
                    "1": "temp_var142"
                },
                "uVar151": {
                    "1": "temp_var143"
                },
                "uVar152": {
                    "1": "temp_var144"
                },
                "uVar153": {
                    "1": "temp_var145"
                },
                "uVar154": {
                    "1": "temp_var146"
                },
                "uVar155": {
                    "1": "temp_var147"
                },
                "uVar156": {
                    "1": "temp_var148"
                },
                "uVar157": {
                    "1": "temp_var149"
                },
                "uVar158": {
                    "1": "temp_var150"
                },
                "uVar159": {
                    "1": "temp_var151"
                },
                "uVar160": {
                    "1": "temp_var152"
                },
                "uVar161": {
                    "1": "temp_var153"
                },
                "uVar162": {
                    "1": "temp_var154"
                },
                "uVar163": {
                    "1": "temp_var155"
                },
                "uVar164": {
                    "1": "temp_var156"
                },
                "uVar165": {
                    "1": "temp_var157"
                },
                "uVar166": {
                    "1": "temp_var158"
                },
                "uVar167": {
                    "1": "temp_var159"
                },
                "uVar168": {
                    "1": "temp_var160"
                },
                "uVar169": {
                    "1": "temp_var161"
                },
                "uVar170": {
                    "1": "temp_var162"
                },
                "uVar171": {
                    "1": "temp_var163"
                },
                "uVar172": {
                    "1": "temp_var164"
                },
                "uVar173": {
                    "1": "temp_var165"
                },
                "uVar174": {
                    "1": "temp_var166"
                },
                "uVar175": {
                    "1": "temp_var167"
                },
                "uVar176": {
                    "1": "temp_var168"
                },
                "uVar177": {
                    "1": "temp_var169"
                },
                "uVar178": {
                    "1": "temp_var170"
                },
                "uVar179": {
                    "1": "temp_var171"
                },
                "uVar180": {
                    "1": "temp_var172"
                },
                "uVar181": {
                    "1": "temp_var173"
                },
                "dVar182": {
                    "1": "temp_var174"
                },
                "uVar183": {
                    "1": "temp_var175"
                },
                "dVar184": {
                    "1": "temp_var176"
                },
                "uVar185": {
                    "1": "temp_var177"
                },
                "uVar186": {
                    "1": "temp_var178"
                },
                "uVar187": {
                    "1": "temp_var179"
                },
                "uVar188": {
                    "1": "temp_var180"
                },
                "uVar189": {
                    "1": "temp_var181"
                },
                "uVar190": {
                    "1": "temp_var182"
                },
                "uVar191": {
                    "1": "temp_var183"
                },
                "uVar192": {
                    "1": "temp_var184"
                },
                "uVar193": {
                    "1": "temp_var185"
                },
                "uVar194": {
                    "1": "temp_var186"
                },
                "uVar195": {
                    "1": "temp_var187"
                },
                "uVar196": {
                    "1": "temp_var188"
                },
                "uVar197": {
                    "1": "temp_var189"
                },
                "uVar198": {
                    "1": "temp_var190"
                },
                "uVar199": {
                    "1": "temp_var191"
                },
                "uVar200": {
                    "1": "temp_var192"
                },
                "uVar201": {
                    "1": "temp_var193"
                },
                "uVar202": {
                    "1": "temp_var194"
                },
                "uVar203": {
                    "1": "temp_var195"
                },
                "uVar204": {
                    "1": "temp_var196"
                },
                "uVar205": {
                    "1": "temp_var197"
                },
                "uVar206": {
                    "1": "temp_var198"
                },
                "uVar207": {
                    "1": "temp_var199"
                },
                "uVar208": {
                    "1": "temp_var200"
                },
                "uVar209": {
                    "1": "temp_var201"
                },
                "uVar210": {
                    "1": "temp_var202"
                },
                "uVar211": {
                    "1": "temp_var203"
                },
                "uVar212": {
                    "1": "temp_var204"
                },
                "uVar213": {
                    "1": "temp_var205"
                },
                "uVar214": {
                    "1": "temp_var206"
                },
                "uVar215": {
                    "1": "temp_var207"
                },
                "uVar216": {
                    "1": "temp_var208"
                },
                "uVar217": {
                    "1": "temp_var209"
                },
                "uVar218": {
                    "1": "temp_var210"
                },
                "uVar219": {
                    "1": "temp_var211"
                },
                "uVar220": {
                    "1": "temp_var212"
                },
                "uVar221": {
                    "1": "temp_var213"
                },
                "uVar222": {
                    "1": "temp_var214"
                },
                "uVar223": {
                    "1": "temp_var215"
                },
                "uVar224": {
                    "1": "temp_var216"
                },
                "uVar225": {
                    "1": "temp_var217"
                },
                "uVar226": {
                    "1": "temp_var218"
                },
                "uVar227": {
                    "1": "temp_var219"
                },
                "uVar228": {
                    "1": "temp_var220"
                },
                "uVar229": {
                    "1": "temp_var221"
                },
                "uVar230": {
                    "1": "temp_var222"
                },
                "uVar231": {
                    "1": "temp_var223"
                },
                "uVar232": {
                    "1": "temp_var224"
                },
                "uVar233": {
                    "1": "temp_var225"
                },
                "uVar234": {
                    "1": "temp_var226"
                },
                "uVar235": {
                    "1": "temp_var227"
                },
                "uVar236": {
                    "1": "temp_var228"
                },
                "uVar237": {
                    "1": "temp_var229"
                },
                "uVar238": {
                    "1": "temp_var230"
                },
                "uVar239": {
                    "1": "temp_var231"
                },
                "uVar240": {
                    "1": "temp_var232"
                },
                "uVar241": {
                    "1": "temp_var233"
                },
                "uVar242": {
                    "1": "temp_var234"
                },
                "uVar243": {
                    "1": "temp_var235"
                },
                "uVar244": {
                    "1": "temp_var236"
                },
                "uVar245": {
                    "1": "temp_var237"
                },
                "uVar246": {
                    "1": "temp_var238"
                },
                "uVar247": {
                    "1": "temp_var239"
                },
                "uVar248": {
                    "1": "temp_var240"
                },
                "uVar249": {
                    "1": "temp_var241"
                },
                "uVar250": {
                    "1": "temp_var242"
                },
                "uVar251": {
                    "1": "temp_var243"
                },
                "uVar252": {
                    "1": "temp_var244"
                },
                "uVar253": {
                    "1": "temp_var245"
                },
                "uVar254": {
                    "1": "temp_var246"
                },
                "uVar255": {
                    "1": "temp_var247"
                },
                "uVar256": {
                    "1": "temp_var248"
                },
                "uVar257": {
                    "1": "temp_var249"
                },
                "uVar258": {
                    "1": "temp_var250"
                },
                "dVar259": {
                    "1": "temp_var251"
                },
                "uVar260": {
                    "1": "temp_var252"
                },
                "dVar261": {
                    "1": "temp_var253"
                },
                "uVar262": {
                    "1": "temp_var254"
                },
                "uVar263": {
                    "1": "temp_var255"
                },
                "uVar264": {
                    "1": "temp_var256"
                },
                "uVar265": {
                    "1": "temp_var257"
                },
                "uVar266": {
                    "1": "temp_var258"
                },
                "uVar267": {
                    "1": "temp_var259"
                },
                "uVar268": {
                    "1": "temp_var260"
                },
                "uVar269": {
                    "1": "temp_var261"
                },
                "uVar270": {
                    "1": "temp_var262"
                },
                "uVar271": {
                    "1": "temp_var263"
                },
                "uVar272": {
                    "1": "temp_var264"
                },
                "uVar273": {
                    "1": "temp_var265"
                },
                "uVar274": {
                    "1": "temp_var266"
                },
                "uVar275": {
                    "1": "temp_var267"
                },
                "uVar276": {
                    "1": "temp_var268"
                },
                "uVar277": {
                    "1": "temp_var269"
                },
                "uVar278": {
                    "1": "temp_var270"
                },
                "uVar279": {
                    "1": "temp_var271"
                },
                "uVar280": {
                    "1": "temp_var272"
                },
                "uVar281": {
                    "1": "temp_var273"
                },
                "uVar282": {
                    "1": "temp_var274"
                },
                "uVar283": {
                    "1": "temp_var275"
                },
                "uVar284": {
                    "1": "temp_var276"
                },
                "uVar285": {
                    "1": "temp_var277"
                },
                "uVar286": {
                    "1": "temp_var278"
                },
                "uVar287": {
                    "1": "temp_var279"
                },
                "uVar288": {
                    "1": "temp_var280"
                },
                "uVar289": {
                    "1": "temp_var281"
                },
                "uVar290": {
                    "1": "temp_var282"
                },
                "uVar291": {
                    "1": "temp_var283"
                },
                "uVar292": {
                    "1": "temp_var284"
                },
                "uVar293": {
                    "1": "temp_var285"
                },
                "uVar294": {
                    "1": "temp_var286"
                },
                "uVar295": {
                    "1": "temp_var287"
                },
                "uVar296": {
                    "1": "temp_var288"
                },
                "uVar297": {
                    "1": "temp_var289"
                },
                "uVar298": {
                    "1": "temp_var290"
                },
                "uVar299": {
                    "1": "temp_var291"
                },
                "uVar300": {
                    "1": "temp_var292"
                },
                "uVar301": {
                    "1": "temp_var293"
                },
                "uVar302": {
                    "1": "temp_var294"
                },
                "uVar303": {
                    "1": "temp_var295"
                },
                "uVar304": {
                    "1": "temp_var296"
                },
                "uVar305": {
                    "1": "temp_var297"
                },
                "uVar306": {
                    "1": "temp_var298"
                },
                "uVar307": {
                    "1": "temp_var299"
                },
                "uVar308": {
                    "1": "temp_var300"
                },
                "uVar309": {
                    "1": "temp_var301"
                },
                "uVar310": {
                    "1": "temp_var302"
                },
                "uVar311": {
                    "1": "temp_var303"
                },
                "uVar312": {
                    "1": "temp_var304"
                },
                "uVar313": {
                    "1": "temp_var305"
                },
                "uVar314": {
                    "1": "temp_var306"
                },
                "uVar315": {
                    "1": "temp_var307"
                },
                "uVar316": {
                    "1": "temp_var308"
                },
                "uVar317": {
                    "1": "temp_var309"
                },
                "dVar318": {
                    "1": "temp_var310"
                },
                "undefined4 *param_1": {
                    "1": "param1"
                },
                "uint param_2": {
                    "1": "param2"
                },
                "undefined *puVar10": {
                    "1": "temp_pointer1"
                },
                "dword *pdVar14": {
                    "1": "temp_pointer2"
                },
                "undefined *puVar16": {
                    "1": "temp_pointer3"
                },
                "dword *pdVar17": {
                    "1": "temp_pointer4"
                }
            }
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copy_memory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint temp_size;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      temp_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = temp_size != 0;\n          temp_size = temp_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      temp_size = 4 - ((uint)destination & 3);\n      size = size - temp_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((temp_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  temp_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < temp_size;\n      temp_size = temp_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\nLAB_000823d0:\n  if (temp_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((temp_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((temp_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "temp_size",
                "bVar6": "loop_condition"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008234c": {
                    "1": "reverse_copy_data",
                    "4": "copy_data",
                    "24": "copy_memory"
                },
                "param_1": {
                    "18": "destination",
                    "1": "dest_buffer",
                    "12": "dest"
                },
                "param_2": {
                    "18": "source",
                    "12": "src",
                    "1": "src_buffer"
                },
                "param_3": {
                    "1": "num_bytes",
                    "9": "length",
                    "21": "size"
                },
                "puVar1": {
                    "1": "dest_pointer",
                    "23": "dest_ptr",
                    "5": "dst_ptr"
                },
                "puVar2": {
                    "2": "dest_ptr_aligned",
                    "6": "src_ptr",
                    "1": "dest_ptr",
                    "5": "dest_end_ptr",
                    "3": "dest"
                },
                "puVar3": {
                    "20": "src_ptr",
                    "1": "src",
                    "2": "temp_ptr"
                },
                "uVar4": {
                    "2": "remaining_bytes",
                    "17": "remaining_size",
                    "5": "remaining_length",
                    "1": "temp_length"
                },
                "uVar5": {
                    "1": "u_var5",
                    "4": "temp_size",
                    "2": "remaining_size_minus4",
                    "3": "copy_size"
                },
                "bVar6": {
                    "2": "has_remaining_bytes",
                    "5": "is_remaining",
                    "1": "is_not_zero",
                    "7": "loop_condition"
                }
            }
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "reverse_copy_00082438",
            "code": "\nvoid reverse_copy_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint remaining;\n  undefined *src_end;\n  uint remaining_size;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    src_end = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        src_end = src_end + -1;\n        *src_end = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remaining_size = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remaining = remaining_size;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remaining_size) {\n      do {\n        remaining = remaining - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < remaining);\n      index = (remaining_size - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remaining_size = size & 3;\n    }\n    size = remaining_size;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "remaining",
                "puVar6": "src_end",
                "uVar7": "remaining_size"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082438": {
                    "1": "copy_and_shift_memory",
                    "10": "copy_memory",
                    "11": "reverse_copy"
                },
                "param_1": {
                    "2": "source",
                    "12": "destination",
                    "14": "dest",
                    "1": "src"
                },
                "param_2": {
                    "2": "destination",
                    "12": "source",
                    "16": "src",
                    "1": "dest"
                },
                "param_3": {
                    "1": "num_bytes",
                    "10": "length",
                    "20": "size"
                },
                "iVar1": {
                    "1": "loop_index",
                    "3": "i",
                    "4": "counter",
                    "14": "index"
                },
                "puVar2": {
                    "1": "destination_next",
                    "4": "src_ptr",
                    "21": "dest_ptr",
                    "3": "dst_ptr"
                },
                "puVar3": {
                    "1": "dst_ptr",
                    "23": "src_ptr",
                    "2": "dest_ptr"
                },
                "puVar4": {
                    "1": "dst_end_ptr",
                    "2": "end_ptr",
                    "8": "temp_ptr",
                    "3": "dest_end_ptr",
                    "7": "dest_end"
                },
                "uVar5": {
                    "8": "remaining",
                    "1": "u_size",
                    "3": "remaining_length",
                    "4": "remaining_size",
                    "5": "temp_size"
                },
                "puVar6": {
                    "2": "dest_end",
                    "1": "dest_byte_ptr",
                    "4": "src_end",
                    "3": "temp_char"
                },
                "uVar7": {
                    "1": "remaining_size2",
                    "4": "remainder",
                    "2": "temp_size2",
                    "3": "remaining_bytes"
                }
            }
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_memory_00082504",
            "code": "\nvoid fill_memory_00082504(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_ptr;\n  undefined4 pattern;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = pattern;\n        dest_ptr[1] = pattern;\n        dest_ptr[2] = pattern;\n        dest_ptr[3] = pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_ptr;\n    } while (next_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_memory_00082504",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_ptr",
                "uVar3": "pattern",
                "uVar4": "remaining_size",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082504": {
                    "1": "copy_data",
                    "8": "fill_memory",
                    "6": "memset",
                    "2": "memset_with_limit",
                    "3": "fill_memory_with_byte"
                },
                "param_1": {
                    "7": "destination",
                    "1": "dst",
                    "3": "memory",
                    "11": "dest",
                    "6": "buffer",
                    "2": "dest_ptr"
                },
                "param_2": {
                    "1": "fill_value",
                    "21": "value",
                    "2": "pattern",
                    "3": "byte"
                },
                "param_3": {
                    "6": "num_bytes",
                    "4": "length",
                    "1": "num",
                    "16": "size"
                },
                "puVar1": {
                    "1": "ptr_array",
                    "2": "dst_ptr",
                    "17": "dest_ptr"
                },
                "puVar2": {
                    "8": "next_ptr",
                    "1": "next_dst_ptr",
                    "4": "temp_ptr"
                },
                "uVar3": {
                    "1": "block_value",
                    "3": "value32",
                    "6": "pattern"
                },
                "uVar4": {
                    "3": "temp_size",
                    "1": "block_size",
                    "5": "remaining_bytes",
                    "9": "remaining_size"
                },
                "bVar5": {
                    "2": "is_length_zero",
                    "1": "done",
                    "5": "is_size_zero",
                    "14": "is_zero"
                }
            }
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "process_relocation_000825a0",
            "code": "\nvoid process_relocation_000825a0(undefined4 relocation_entry,undefined4 param2)\n\n{\n  FUN_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,relocation_entry,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "process_relocation_000825a0",
                "param_1": "relocation_entry",
                "param_2": "param2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000825a0": {
                    "1": "process_elf32_rel_array_item",
                    "2": "process_elf32_rel_entry",
                    "6": "process_relocation",
                    "5": "process_relocation_entry"
                },
                "param_1": {
                    "1": "new_offset",
                    "2": "entry",
                    "4": "relocation_array",
                    "3": "rel_array",
                    "6": "relocation_entry"
                },
                "param_2": {
                    "12": "param2",
                    "1": "param_b",
                    "2": "param",
                    "5": "param1",
                    "9": "param_2"
                },
                "FUN_000825b0": {
                    "1": "process_relocation",
                    "2": "process_rel_entry",
                    "8": "apply_relocation",
                    "3": "process_relocation_entry",
                    "4": "perform_relocation"
                },
                "param_3": {
                    "3": "param2",
                    "2": "size",
                    "12": "param3",
                    "7": "param_3",
                    "1": "param_c"
                }
            }
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_000825b0",
            "code": "\nint * allocate_memory_000825b0(undefined4 *input_array,int *output_array,uint size)\n\n{\n  dword temp_var1;\n  int *result;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  int *temp_array;\n  uint temp_var6;\n  uint aligned_size;\n  int *temp_array2;\n  \n  if (output_array == (int *)0x0) {\n    result = (int *)FUN_00081e14(input_array,size);\n    return result;\n  }\n  FUNC_00082598();\n  temp_var4 = output_array[-1];\n  temp_var6 = temp_var4 & 0xfffffffc;\n  result = output_array + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *input_array = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var6 < (int)aligned_size) {\n    temp_var1 = (int)result + temp_var6;\n    if (constant_value == temp_var1) {\n      temp_var2 = *(uint *)(constant_value + 4) & 0xfffffffc;\n      temp_var1 = constant_value;\n      if ((int)(aligned_size + 0x10) <= (int)(temp_var2 + temp_var6)) {\n        constant_value = (int)result + aligned_size;\n        *(uint *)(constant_value + 4) = (temp_var2 + temp_var6) - aligned_size | 1;\n        output_array[-1] = aligned_size | output_array[-1] & 1U;\n        FUNC_0008259c(input_array);\n        return output_array;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_var2 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp_var2 + temp_var6)) {\n        temp_var5 = *(int *)(temp_var1 + 0xc);\n        temp_var3 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var2 + temp_var6;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_var2 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_array2 = (int *)((int)result - output_array[-2]);\n      temp_var4 = (temp_ptr_1 & 0xfffffffcU) + temp_var6;\n      if (temp_var1 != 0) {\n        if (temp_var1 == constant_value) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp_var2 + temp_var4)) {\n            result = temp_array2 + 2;\n            temp_var3 = *result;\n            temp_var5 = temp_array2[3];\n            temp_var6 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            if (temp_var6 < 0x25) {\n              temp_array = result;\n              if (0x13 < temp_var6) {\n                temp_array2[2] = *output_array;\n                temp_array2[3] = output_array[1];\n                if (temp_var6 < 0x1c) {\n                  output_array = output_array + 2;\n                  temp_array = temp_array2 + 4;\n                }\n                else {\n                  temp_array2[4] = output_array[2];\n                  temp_array2[5] = output_array[3];\n                  if (temp_var6 == 0x24) {\n                    temp_array2[6] = output_array[4];\n                    temp_array = output_array + 5;\n                    output_array = output_array + 6;\n                    temp_array2[7] = *temp_array;\n                    temp_array = temp_array2 + 8;\n                  }\n                  else {\n                    output_array = output_array + 4;\n                    temp_array = temp_array2 + 6;\n                  }\n                }\n              }\n              *temp_array = *output_array;\n              temp_array[1] = output_array[1];\n              temp_array[2] = output_array[2];\n            }\n            else {\n              FUN_00082438(result,output_array);\n            }\n            constant_value = (int)temp_array2 + aligned_size;\n            *(uint *)(constant_value + 4) = (temp_var2 + temp_var4) - aligned_size | 1;\n            temp_ptr_1 = aligned_size | temp_ptr_1 & 1U;\n            FUNC_0008259c(input_array);\n            return result;\n          }\n        }\n        else {\n          temp_var2 = temp_var2 + temp_var4;\n          if ((int)aligned_size <= (int)temp_var2) {\n            temp_var5 = *(int *)(temp_var1 + 0xc);\n            temp_var3 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_array = temp_array2 + 2;\n            temp_var3 = *temp_array;\n            temp_var5 = temp_array2[3];\n            temp_var4 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var6 = temp_var2;\n            if (temp_var4 < 0x25) {\n              result = temp_array;\n              if (0x13 < temp_var4) {\n                temp_array2[2] = *output_array;\n                temp_array2[3] = output_array[1];\n                if (temp_var4 < 0x1c) {\n                  output_array = output_array + 2;\n                  result = temp_array2 + 4;\n                }\n                else {\n                  temp_array2[4] = output_array[2];\n                  temp_array2[5] = output_array[3];\n                  if (temp_var4 == 0x24) {\n                    temp_array2[6] = output_array[4];\n                    result = output_array + 5;\n                    output_array = output_array + 6;\n                    temp_array2[7] = *result;\n                    result = temp_array2 + 8;\n                  }\n                  else {\n                    output_array = output_array + 4;\n                    result = temp_array2 + 6;\n                  }\n                }\n              }\n              *result = *output_array;\n              result[1] = output_array[1];\n              result[2] = output_array[2];\n              temp_var4 = temp_ptr_1;\n              result = temp_array2;\n              output_array = temp_array;\n            }\n            else {\n              FUN_00082438(temp_array,output_array);\n              temp_var4 = temp_ptr_1;\n              result = temp_array2;\n              output_array = temp_array;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)temp_var4) {\n        temp_array = temp_array2 + 2;\n        temp_var3 = *temp_array;\n        temp_var5 = temp_array2[3];\n        temp_var2 = temp_var6 - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var4;\n        if (temp_var2 < 0x25) {\n          result = temp_array;\n          if (0x13 < temp_var2) {\n            temp_array2[2] = *output_array;\n            temp_array2[3] = output_array[1];\n            if (temp_var2 < 0x1c) {\n              output_array = output_array + 2;\n              result = temp_array2 + 4;\n            }\n            else {\n              temp_array2[4] = output_array[2];\n              temp_array2[5] = output_array[3];\n              if (temp_var2 == 0x24) {\n                temp_array2[6] = output_array[4];\n                result = output_array + 5;\n                output_array = output_array + 6;\n                temp_array2[7] = *result;\n                result = temp_array2 + 8;\n              }\n              else {\n                output_array = output_array + 4;\n                result = temp_array2 + 6;\n              }\n            }\n          }\n          *result = *output_array;\n          result[1] = output_array[1];\n          result[2] = output_array[2];\n          temp_var4 = temp_ptr_1;\n          result = temp_array2;\n          output_array = temp_array;\n        }\n        else {\n          FUN_00082438(temp_array,output_array);\n          temp_var4 = temp_ptr_1;\n          result = temp_array2;\n          output_array = temp_array;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_array2 = (int *)FUN_00081e14(input_array,size);\n    if (temp_array2 == (int *)0x0) goto LAB_000826a4;\n    temp_var4 = output_array[-1];\n    if (temp_array2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)result)) {\n      temp_var6 = temp_var6 - 4;\n      if (temp_var6 < 0x25) {\n        result = output_array;\n        temp_array = temp_array2;\n        if (0x13 < temp_var6) {\n          *temp_array2 = *output_array;\n          temp_ptr_1 = output_array[1];\n          if (temp_var6 < 0x1c) {\n            result = output_array + 2;\n            temp_array = temp_array2 + 2;\n          }\n          else {\n            temp_array2[2] = output_array[2];\n            temp_array2[3] = output_array[3];\n            if (temp_var6 == 0x24) {\n              temp_array2[4] = output_array[4];\n              temp_array2[5] = output_array[5];\n              result = output_array + 6;\n              temp_array = temp_array2 + 6;\n            }\n            else {\n              result = output_array + 4;\n              temp_array = temp_array2 + 4;\n            }\n          }\n        }\n        *temp_array = *result;\n        temp_array[1] = result[1];\n        temp_array[2] = result[2];\n      }\n      else {\n        FUN_00082438(temp_array2,output_array);\n      }\n      FUN_00083d9c(input_array,output_array);\n      goto LAB_000826a4;\n    }\n    temp_var6 = temp_var6 + (temp_array2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_var2 = temp_var6 - aligned_size;\n  temp_array2 = output_array;\n  if (temp_var2 < 0x10) {\n    result[1] = temp_var4 & 1 | temp_var6;\n    *(uint *)((int)result + temp_var6 + 4) = *(uint *)((int)result + temp_var6 + 4) | 1;\n  }\n  else {\n    result[1] = temp_var4 & 1 | aligned_size;\n    *(uint *)((int)result + aligned_size + 4) = temp_var2 | 1;\n    *(uint *)((int)result + temp_var2 + aligned_size + 4) = *(uint *)((int)result + temp_var2 + aligned_size + 4) | 1;\n    FUN_00083d9c(input_array,(int)result + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(input_array);\n  return temp_array2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_000825b0",
                "param_1": "input_array",
                "param_2": "output_array",
                "param_3": "size",
                "piVar2": "result",
                "uVar3": "temp_var2",
                "iVar4": "temp_var3",
                "uVar5": "temp_var4",
                "iVar6": "temp_var5",
                "piVar7": "temp_array",
                "uVar8": "temp_var6",
                "uVar9": "aligned_size",
                "piVar10": "temp_array2",
                "dVar1": "temp_var1",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "constant_value",
                "piVar10[1]": "temp_ptr_1",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000825b0": {
                    "1": "process_memory_allocation",
                    "2": "allocate_memory"
                },
                "param_1": {
                    "1": "ptr_target",
                    "2": "parameter1",
                    "3": "input_pointer",
                    "7": "input_array"
                },
                "param_2": {
                    "2": "dynamic_array",
                    "1": "ptr_source",
                    "3": "output_array"
                },
                "param_3": {
                    "3": "array_size",
                    "2": "param_3",
                    "1": "block_size",
                    "13": "size"
                },
                "piVar2": {
                    "1": "result_pointer",
                    "5": "result_array",
                    "13": "result"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "temp_u_var",
                    "5": "temp2",
                    "7": "temp_var2"
                },
                "iVar4": {
                    "1": "var2",
                    "7": "temp_var3",
                    "2": "temp_var2",
                    "5": "temp_var1"
                },
                "uVar5": {
                    "1": "temp_value3",
                    "2": "temp_var3",
                    "6": "temp_var4",
                    "4": "temp4"
                },
                "iVar6": {
                    "4": "temp_var2",
                    "1": "temp_variable2",
                    "6": "temp_var5",
                    "3": "temp_var4",
                    "2": "temp4"
                },
                "piVar7": {
                    "1": "temp_array_ptr",
                    "2": "temp_ptr",
                    "3": "temp_pointer"
                },
                "uVar8": {
                    "1": "total_size",
                    "3": "new_size",
                    "4": "temp_var6"
                },
                "uVar9": {
                    "1": "temp9",
                    "6": "aligned_size",
                    "3": "temp_var8",
                    "4": "temp_var7"
                },
                "piVar10": {
                    "1": "tmp_result2",
                    "3": "temp_array2"
                },
                "dVar1": {
                    "1": "current_value",
                    "6": "temp1",
                    "2": "offset",
                    "8": "temp_var1"
                },
                "FUN_00081e14": {
                    "1": "allocate_array",
                    "2": "allocate_memory"
                },
                "FUNC_00082598": {
                    "1": "initialize_memory",
                    "4": "initialize"
                },
                "ELF32_Rel_ARRAY_20070000": {
                    "1": "array"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "constant_value"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info + 4": {
                    "1": "constant_value_plus_4"
                },
                "uVar3 + uVar8": {
                    "1": "temp_uv_var_plus_uv_var"
                },
                "piVar2 + uVar9": {
                    "1": "result_plus_required_size"
                },
                "piVar10[1]": {
                    "1": "temp_ptr_1"
                },
                "uVar5 << 0x1f": {
                    "1": "temp_uv_var_shifted"
                },
                "piVar10[1] & 1U": {
                    "1": "temp_ptr_1_bitwise_and_1"
                },
                "uVar3 + uVar5": {
                    "1": "temp_uv_var_plus_uv_var"
                },
                "uVar9 - uVar3": {
                    "1": "remaining_size"
                },
                "FUN_00083d9c": {
                    "1": "do_something"
                },
                "FUN_00082438": {
                    "1": "copy_buffer",
                    "3": "copy_memory"
                },
                "FUNC_0008259c": {
                    "1": "cleanup_memory"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array_info",
                    "3": "rel_array"
                },
                "FUNC_00081e14": {
                    "2": "allocate_memory"
                },
                "FUNC_00082438": {
                    "1": "copy_data"
                },
                "FUN_0008259c": {
                    "1": "cleanup_func"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info + 8": {
                    "1": "elf_info_next_ptr"
                },
                "FUN_00082598": {
                    "1": "initialize_func"
                },
                "*param_1": {
                    "1": "input_pointer"
                },
                "*param_2": {
                    "1": "data_pointer"
                }
            }
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "process_data_00082970",
            "code": "\nvoid process_data_00082970(int *result,undefined4 input)\n\n{\n  int return_value;\n  \n  DAT_200711bc = 0;\n  return_value = FUN_0008118c(input);\n  if ((return_value == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "process_data_00082970",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "return_value"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082970": {
                    "1": "find_result",
                    "2": "check_and_assign_value",
                    "7": "process_data"
                },
                "param_1": {
                    "1": "result_code",
                    "2": "result_ptr",
                    "7": "output",
                    "16": "result"
                },
                "param_2": {
                    "20": "input",
                    "1": "input_param",
                    "9": "input_value"
                },
                "iVar1": {
                    "1": "result_status",
                    "13": "return_value",
                    "2": "status",
                    "10": "result"
                },
                "FUN_0008118c": {
                    "1": "check_input"
                }
            }
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copy_string_00082994(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_src;\n  uint *next_byte_ptr;\n  uint current_word;\n  uint temp_uint;\n  uint *dest_ptr;\n  bool is_zero_byte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_byte_ptr = src;\n    if (((uint)src & 1) != 0) {\n      next_byte_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_byte_ptr;\n    if (((uint)next_byte_ptr & 2) != 0) {\n      src = (uint *)((int)next_byte_ptr + 2);\n      current_short = *(ushort *)next_byte_ptr;\n      is_zero_byte = (current_short & 0xff) == 0;\n      if (is_zero_byte) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero_byte = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero_byte) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  next_byte_ptr = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto alignment_check_label;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    next_byte_ptr = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    next_src = next_byte_ptr + 1;\n    temp_uint = *next_byte_ptr;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp_uint;\n    if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n    next_byte_ptr = next_byte_ptr + 2;\n    current_word = *next_src;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp_uint;\n  }\nalignment_check_label:\n  do {\n    *(char *)dest = (char)current_word;\n    temp_uint = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_uint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_src",
                "puVar4": "next_byte_ptr",
                "uVar5": "current_word",
                "uVar6": "temp_uint",
                "puVar7": "dest_ptr",
                "bVar8": "is_zero_byte",
                "LAB_000829f8": "alignment_check_label"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082994": {
                    "1": "copy_strings",
                    "3": "copy_string_with_alignment_check",
                    "22": "copy_string"
                },
                "param_1": {
                    "2": "dst",
                    "10": "destination",
                    "1": "dest_buffer",
                    "17": "dest"
                },
                "param_2": {
                    "10": "source",
                    "1": "src_buffer",
                    "19": "src"
                },
                "cVar1": {
                    "2": "current_byte",
                    "1": "char_value",
                    "28": "current_char"
                },
                "uVar2": {
                    "26": "current_short",
                    "1": "current_value"
                },
                "puVar3": {
                    "1": "src_pointer",
                    "3": "next_ptr",
                    "2": "next_source",
                    "5": "next_src"
                },
                "puVar4": {
                    "1": "next_src_buffer_adjusted",
                    "2": "next_dest"
                },
                "uVar5": {
                    "1": "current_u_int",
                    "10": "current_word",
                    "2": "current_int",
                    "8": "current_uint",
                    "4": "current_value"
                },
                "uVar6": {
                    "3": "current_byte",
                    "1": "current_src_word_rotated",
                    "2": "temp_byte",
                    "6": "temp_uint"
                },
                "puVar7": {
                    "2": "next_dest",
                    "1": "next_next_dst",
                    "6": "dest_ptr"
                },
                "bVar8": {
                    "14": "is_zero_byte",
                    "1": "is_dest_short_not_full",
                    "10": "is_zero",
                    "2": "is_short_zero"
                },
                "LAB_000829f8": {
                    "1": "alignment_check_label"
                }
            }
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint count_leading_zeros_00082a50(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leading_zeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082a50": {
                    "1": "find_first_non_zero_byte_index",
                    "4": "count_trailing_zeros",
                    "2": "count_leading_zeroes",
                    "20": "count_leading_zeros"
                },
                "param_1": {
                    "21": "input",
                    "2": "num",
                    "5": "value",
                    "1": "number"
                },
                "iVar1": {
                    "2": "leading_zeros_count",
                    "4": "count",
                    "1": "var_count",
                    "16": "leading_zeros"
                },
                "puVar2": {
                    "1": "aligned_address",
                    "21": "ptr",
                    "2": "p_value"
                },
                "uVar3": {
                    "1": "masked_value",
                    "25": "value",
                    "3": "current_value"
                },
                "bVar4": {
                    "30": "is_zero"
                }
            }
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint process_data_00082ac0(undefined4 param1,int size,int **param3)\n\n{\n  int *ptr1;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *current_value;\n  uint value;\n  uint shifted_value;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = FUN_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = param3[2];\n  ptr1 = *param3;\n  while (remaining_data != (int *)0x0) {\n    value = ptr1[1];\n    shifted_value = value >> 2;\n    if (shifted_value != 0) {\n      current_value = (undefined4 *)(*ptr1 + -4);\n      counter = 0;\n      do {\n        current_value = current_value + 1;\n        result = FUN_00083c40(param1,*current_value,size);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (shifted_value != counter);\n      remaining_data = param3[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (value & 0xfffffffc));\n    param3[2] = remaining_data;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "param1",
                "param_2": "size",
                "param_3": "param3",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "remaining_data",
                "uVar4": "counter",
                "puVar5": "current_value",
                "uVar6": "value",
                "uVar7": "shifted_value",
                "FUN_00082ac0": "process_data_00082ac0"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "6": "arg1",
                    "1": "input_data",
                    "7": "param1",
                    "2": "input_param",
                    "3": "context"
                },
                "param_2": {
                    "7": "size",
                    "2": "count",
                    "1": "param_2",
                    "6": "arg2"
                },
                "param_3": {
                    "6": "data",
                    "2": "array",
                    "1": "array_ptr",
                    "7": "param3",
                    "5": "arg3",
                    "3": "input_array"
                },
                "piVar1": {
                    "1": "current_value",
                    "4": "current_data",
                    "5": "ptr1",
                    "2": "current_pointer"
                },
                "iVar2": {
                    "3": "return_value",
                    "1": "int_variable1",
                    "25": "result"
                },
                "piVar3": {
                    "1": "remaining_pointer",
                    "2": "ptr3",
                    "3": "ptr2",
                    "4": "remaining_data"
                },
                "uVar4": {
                    "1": "variable_5",
                    "7": "count",
                    "8": "counter",
                    "4": "iteration_count"
                },
                "puVar5": {
                    "1": "current_param_value",
                    "2": "current_data",
                    "3": "ptr3",
                    "4": "current_value"
                },
                "uVar6": {
                    "1": "current_size",
                    "3": "temp_var1",
                    "2": "current_value",
                    "4": "value"
                },
                "uVar7": {
                    "1": "val2",
                    "2": "shifted_var",
                    "7": "shifted_value",
                    "3": "temp_var2"
                },
                "FUN_00082ac0": {
                    "1": "process_function",
                    "17": "process_data"
                },
                "FUN_00083c40": {
                    "1": "check_data"
                },
                "FUN_00083f34": {
                    "1": "initialize_data"
                },
                "_initialized_": {
                    "1": "initialized_value"
                }
            }
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parse_format_string_00082b38(int format_string,int arg2,int *******format_string,int **args)\n\n{\n  bool is_signed;\n  bool is_float;\n  bool is_alternate_form;\n  char sign_char;\n  bool is_zero;\n  int ********param_ptr;\n  int *int_ptr1;\n  int result;\n  char temp_char;\n  int *******current_char;\n  uint digit;\n  int **ppi_var12;\n  uint flags;\n  uint next_char;\n  int arg_index;\n  int ********arg_ptr;\n  int arg_count;\n  int *******remaining_format;\n  int *pi_var19;\n  int *******next_arg;\n  uint uint_var4;\n  int *arg_width;\n  int *******temp_arg;\n  undefined4 u_var24;\n  int ********temp_ptr;\n  bool is_negative;\n  longlong temp_long;\n  int *******max_width;\n  int *******remaining_width;\n  int **arg_list_ptr;\n  int result;\n  char *hex_digits;\n  char flag_char;\n  undefined padding_char;\n  undefined x_format_char;\n  int ********local_params;\n  int arg_index;\n  int *******arg_list_ptr;\n  undefined digit_char;\n  char temp_char;\n  undefined zero_char;\n  undefined stack_buffer [4];\n  int *******arg_local_array [16];\n  \n  if ((format_string != 0) && (*(int *)(format_string + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  flags = (uint)*(ushort *)(arg2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(arg2 + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(arg2 + 0xc) = (short)flags;\n    *(uint *)(arg2 + 100) = *(uint *)(arg2 + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(arg2 + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(format_string,arg2);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(arg2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(arg2 + 0xe)) {\n    result = FUN_0008378c(format_string,arg2,format_string,args);\n    return result;\n  }\nLAB_00082b8a:\n  hex_digits = (char *)0x0;\n  arg_list_ptr = (int *******)0x0;\n  arg_index = 0;\n  result = 0;\n  param_ptr = (int ********)stack_buffer;\n  arg_list_ptr = args;\n  local_params = (int ********)stack_buffer;\nLAB_00082b9e:\n  current_char = format_string;\n  if ((*(char *)format_string != '\\0') && (*(char *)format_string != '%')) {\n    do {\n      current_char = (int *******)((int)current_char + 1);\n      if (*(char *)current_char == '\\0') break;\n    } while (*(char *)current_char != '%');\n    next_arg = (int *******)((int)current_char - (int)format_string);\n    if (next_arg != (int *******)0x0) {\n      arg_index = arg_index + 1;\n      arg_list_ptr = (int *******)((int)arg_list_ptr + (int)next_arg);\n      *param_ptr = format_string;\n      param_ptr[1] = next_arg;\n      if (arg_index < 8) {\n        param_ptr = param_ptr + 2;\n      }\n      else {\n        if (arg_list_ptr == (int *******)0x0) {\n          result = result + (int)next_arg;\n          arg_index = 0;\n          param_ptr = (int ********)stack_buffer;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(format_string,arg2,&local_params);\n        param_ptr = (int ********)stack_buffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      result = result + (int)next_arg;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)current_char != '\\0') {\n    flag_char = '\\0';\n    next_char = (uint)*(byte *)((int)current_char + 1);\n    flags = 0;\n    is_zero = false;\n    is_float = false;\n    is_signed = false;\n    is_alternate_form = false;\n    is_negative = false;\n    next_arg = (int *******)0x0;\n    remaining_width = (int *******)0xffffffff;\n    format_string = (int *******)((int)current_char + 1);\nLAB_00082c12:\n    format_string = (int *******)((int)format_string + 1);\nLAB_00082c16:\n    switch(next_char) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (next_char != 0) {\n        max_width = (int *******)0x1;\n        remaining_width = (int *******)0x1;\n        temp_ptr = (int ********)&digit_char;\n        digit_char = (char)next_char;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      is_alternate_form = true;\n      next_char = (uint)*(byte *)format_string;\n      goto LAB_00082c12;\n    case 0x2a:\n      next_arg = (int *******)*arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      if ((int)next_arg < 0) {\n        next_arg = (int *******)-(int)next_arg;\n        goto switchD_00082c20_caseD_2d;\n      }\n      next_char = (uint)*(byte *)format_string;\n      goto LAB_00082c12;\n    case 0x2b:\n      next_char = (uint)*(byte *)format_string;\n      flag_char = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      next_char = (uint)*(byte *)format_string;\n      goto LAB_00082c12;\n    case 0x2e:\n      next_char = (uint)*(byte *)format_string;\n      current_char = (int *******)((int)format_string + 1);\n      if (next_char == 0x2a) {\n        next_char = (uint)*(byte *)((int)format_string + 1);\n        remaining_width = (int *******)*arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        format_string = current_char;\n        if ((int)remaining_width < 0) {\n          remaining_width = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = next_char - 0x30;\n      if (digit < 10) {\n        uint_var4 = 0;\n        do {\n          format_string = (int *******)((int)current_char + 1);\n          next_char = (uint)*(byte *)current_char;\n          uint_var4 = digit + uint_var4 * 10;\n          digit = next_char - 0x30;\n          current_char = format_string;\n        } while (digit < 10);\n        remaining_width = (int *******)(uint_var4 | (int)uint_var4 >> 0x1f);\n      }\n      else {\n        remaining_width = (int *******)0x0;\n        format_string = current_char;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      next_char = (uint)*(byte *)format_string;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      is_float = true;\n      if (is_signed == false) goto LAB_00083028;\nLAB_00082e98:\n      arg_list_ptr = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      pi_var19 = *arg_list_ptr;\n      arg_width = arg_list_ptr[1];\n      arg_list_ptr = arg_list_ptr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      is_float = true;\n      if (is_signed != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)is_float << 4;\n      arg_index = (uint)is_signed << 5;\n      if ((is_float == 0) && (arg_index = (uint)is_negative << 6, is_negative != 0)) {\n        pi_var19 = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        arg_width = (int *)0x0;\n      }\n      else {\n        result = arg_index;\n        pi_var19 = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        arg_width = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_float = true;\n      if (is_signed != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((is_float) || (is_negative == false)) {\n        result = 1;\n        pi_var19 = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        arg_width = (int *)0x0;\n      }\n      else {\n        arg_width = (int *)0x0;\n        pi_var19 = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hex_digits = \"0123456789ABCDEF\";\n      if (is_signed == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppi_var12 = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = ppi_var12 + 2;\n      pi_var19 = *ppi_var12;\n      arg_width = ppi_var12[1];\n      goto LAB_00082fca;\n    case 99:\n      pi_var19 = *arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      max_width = (int *******)0x1;\n      digit_char = SUB41(pi_var19,0);\n      remaining_width = (int *******)0x1;\n      temp_ptr = (int ********)&digit_char;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (is_signed != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((is_float == false) && (is_negative != false)) {\n        pi_var19 = (int *)(int)*(short *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        arg_width = (int *)((int)pi_var19 >> 0x1f);\n      }\n      else {\n        pi_var19 = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        arg_width = (int *)((int)pi_var19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)arg_width < 0) {\n        is_negative = pi_var19 != (int *)0x0;\n        pi_var19 = (int *)-(int)pi_var19;\n        arg_width = (int *)(-(int)arg_width - (uint)is_negative);\n        flag_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)remaining_width) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero = false;\n      next_char = (uint)pi_var19 | (uint)arg_width;\n      result = 1;\n      sign_char = flag_char;\n      goto joined_r0x00082d78;\n    case 0x68:\n      is_negative = true;\n      next_char = (uint)*(byte *)format_string;\n      goto LAB_00082c12;\n    case 0x6c:\n      next_char = (uint)*(byte *)format_string;\n      if (next_char == 0x6c) {\n        is_signed = true;\n        next_char = (uint)*(byte *)((int)format_string + 1);\n        format_string = (int *******)((int)format_string + 1);\n      }\n      else {\n        is_float = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (is_signed == false) {\n        if (is_float == false) {\n          if (is_negative) {\n            pi_var19 = *arg_list_ptr;\n            arg_list_ptr = arg_list_ptr + 1;\n            *(short *)pi_var19 = (short)result;\n          }\n          else {\n            pi_var19 = *arg_list_ptr;\n            arg_list_ptr = arg_list_ptr + 1;\n            *pi_var19 = result;\n          }\n        }\n        else {\n          pi_var19 = *arg_list_ptr;\n          arg_list_ptr = arg_list_ptr + 1;\n          *pi_var19 = result;\n        }\n      }\n      else {\n        pi_var19 = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        *pi_var19 = result;\n        pi_var19[1] = result >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (is_signed == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppi_var12 = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = ppi_var12 + 2;\n      pi_var19 = *ppi_var12;\n      arg_width = ppi_var12[1];\n      result = 0;\n      break;\n    case 0x70:\n      pi_var19 = *arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      x_format_char = 0x78;\n      is_zero = true;\n      arg_width = (int *)0x0;\n      padding_char = 0x30;\n      hex_digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_signed = true;\n      next_char = (uint)*(byte *)format_string;\n      goto LAB_00082c12;\n    case 0x73:\n      temp_ptr = (int ********)*arg_list_ptr;\n      flag_char = '\\0';\n      arg_list_ptr = arg_list_ptr + 1;\n      if (temp_ptr != (int ********)0x0) {\n        if ((int)remaining_width < 0) {\n          remaining_width = (int *******)FUN_00082a50(temp_ptr);\n          current_char = (int *******)0x0;\n          sign_char = flag_char;\n        }\n        else {\n          result = FUN_00084384(temp_ptr,0,remaining_width);\n          sign_char = flag_char;\n          if (result == 0) {\n            current_char = (int *******)0x0;\n          }\n          else {\n            remaining_format = (int *******)(result - (int)temp_ptr);\n            if ((int)remaining_width <= (int)(int *******)(result - (int)temp_ptr)) {\n              remaining_format = remaining_width;\n            }\n            current_char = (int *******)0x0;\n            remaining_width = remaining_format;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < remaining_width) {\n        remaining_width = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)remaining_width & ~((int)remaining_width >> 0x1f));\n      temp_ptr = (int ********)&UNK_00085840;\nLAB_00083012:\n      flag_char = '\\0';\n      current_char = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!is_signed) goto LAB_00082f7c;\nLAB_00082e62:\n      ppi_var12 = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = ppi_var12 + 2;\n      pi_var19 = *ppi_var12;\n      arg_width = ppi_var12[1];\n      result = 1;\n      break;\n    case 0x78:\n      hex_digits = \"0123456789abcdef\";\n      if (is_signed != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((is_float == false) && (is_negative != false)) {\n        arg_width = (int *)0x0;\n        pi_var19 = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n      }\n      else {\n        pi_var19 = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        arg_width = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((is_alternate_form) && (((uint)pi_var19 | (uint)arg_width) != 0)) {\n        is_zero = true;\n        padding_char = 0x30;\n        result = 2;\n        x_format_char = (char)next_char;\n      }\n      else {\n        result = 2;\n      }\n    }\n    flag_char = '\\0';\n    sign_char = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)remaining_width) {\n      flags = flags & 0xffffff7f;\n    }\n    next_char = (uint)pi_var19 | (uint)arg_width;\njoined_r0x00082d78:\n    temp_long = CONCAT44(arg_width,pi_var19);\n    current_char = remaining_width;\n    if ((next_char == 0) && (remaining_width == (int *******)0x0)) {\n      temp_ptr = (int ********)stack_buffer;\n      if ((result != 0) || (!is_alternate_form)) goto LAB_00082da0;\n      temp_ptr = (int ********)(&temp_char + 1);\n      zero_char = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (arg_width != (int *)0x0 || (int *)0x9 < pi_var19) {\n        arg_ptr = (int ********)(&temp_char + 1);\n        do {\n          temp_ptr = arg_ptr;\n          u_var24 = (undefined4)((ulonglong)temp_long >> 0x20);\n          temp_char = '\\n';\n          FUN_00084750((int)temp_long,u_var24,10,0);\n          *(char *)temp_ptr = temp_char + '0';\n          temp_long = FUN_00084750((int)temp_long,u_var24,10,0);\n          arg_ptr = (int ********)((int)temp_ptr + -1);\n        } while (temp_long != 0);\n        remaining_width = (int *******)((int)stack_buffer - (int)temp_ptr);\n        goto LAB_00082da0;\n      }\n      zero_char = (char)pi_var19 + '0';\n      temp_ptr = (int ********)(&temp_char + 1);\n      goto LAB_0008351e;\n    }\n    arg_ptr = (int ********)(&temp_char + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      temp_ptr = arg_ptr;\n      next_char = (uint)pi_var19 & 0xf;\n      pi_var19 = (int *)((uint)pi_var19 >> 4 | (int)arg_width << 0x1c);\n      arg_width = (int *)((uint)arg_width >> 4);\n      *(char *)temp_ptr = hex_digits[next_char];\n      arg_ptr = (int ********)((int)temp_ptr + -1);\n    } while (((uint)pi_var19 | (uint)arg_width) != 0);\n    remaining_width = (int *******)((int)stack_buffer - (int)temp_ptr);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (arg_list_ptr != (int *******)0x0) {\n    FUN_00082ac0(format_string,arg2,&local_params);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_0008337e:\n  do {\n    temp_ptr = arg_ptr;\n    int_ptr1 = (int *)((uint)pi_var19 >> 3 | (int)arg_width << 0x1d);\n    arg_width = (int *)((uint)arg_width >> 3);\n    result = ((uint)pi_var19 & 7) + 0x30;\n    *(char *)temp_ptr = (char)result;\n    arg_ptr = (int ********)((int)temp_ptr + -1);\n    pi_var19 = int_ptr1;\n  } while (((uint)int_ptr1 | (uint)arg_width) != 0);\n  if (is_alternate_form) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      remaining_width = (int *******)((int)stack_buffer - (int)temp_ptr);\n    }\n    else {\n      *(undefined *)((int)temp_ptr + -1) = 0x30;\n      temp_ptr = arg_ptr;\n      remaining_width = (int *******)((int)stack_buffer - (int)arg_ptr);\n    }\n  }\n  else {\nLAB_0008351e:\n    remaining_width = (int *******)((int)stack_buffer - (int)temp_ptr);\n  }\nLAB_00082da0:\n  max_width = remaining_width;\n  if ((int)remaining_width < (int)current_char) {\n    max_width = current_char;\n  }\n  if (sign_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082dba:\n  if (is_zero) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (remaining_format = (int *******)((int)next_arg - (int)max_width), 0 < (int)remaining_format)) {\n    if ((int)remaining_format < 0x11) {\n      arg_index = arg_index + 1;\n    }\n    else {\n      do {\n        temp_arg = remaining_format;\n        result = arg_index + 1;\n        arg_list_ptr = arg_list_ptr + 4;\n        *param_ptr = (int *******)0x85808;\n        param_ptr[1] = (int *******)0x10;\n        if (result < 8) {\n          arg_index = arg_index + 2;\n          param_ptr = param_ptr + 2;\n          arg_index = result;\n        }\n        else if (arg_list_ptr == (int *******)0x0) {\n          arg_index = 1;\n          param_ptr = (int ********)stack_buffer;\n          arg_index = 0;\n        }\n        else {\n          arg_index = result;\n          result = FUN_00082ac0(format_string,arg2,&local_params);\n          if (result != 0) goto LAB_000833de;\n          arg_index = arg_index + 1;\n          param_ptr = (int ********)stack_buffer;\n        }\n        remaining_format = temp_arg + -4;\n      } while (0x10 < (int)remaining_format);\n      remaining_format = temp_arg + -4;\n      arg_index = arg_index;\n    }\n    arg_list_ptr = (int *******)((int)arg_list_ptr + (int)remaining_format);\n    *param_ptr = (int *******)0x85808;\n    param_ptr[1] = remaining_format;\n    if (arg_index < 8) {\n      result = arg_index + 1;\n      param_ptr = param_ptr + 2;\n    }\n    else if (arg_list_ptr == (int *******)0x0) {\n      result = 1;\n      arg_index = 0;\n      param_ptr = (int ********)stack_buffer;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_params);\n      if (result != 0) goto LAB_000833de;\n      result = arg_index + 1;\n      param_ptr = (int ********)stack_buffer;\n    }\n  }\n  else {\n    result = arg_index + 1;\n  }\n  arg_index = result;\n  if (flag_char != '\\0') {\n    arg_list_ptr = (int *******)((int)arg_list_ptr + 1);\n    arg_index = 1;\n    *param_ptr = (int *******)&flag_char;\n    param_ptr[1] = (int *******)0x1;\n    arg_index = result;\n    if (result < 8) {\n      arg_index = result + 1;\n      param_ptr = param_ptr + 2;\n    }\n    else if (arg_list_ptr == (int *******)0x0) {\n      arg_index = 0;\n      param_ptr = (int ********)stack_buffer;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_params);\n      if (result != 0) goto LAB_000833de;\n      arg_index = arg_index + 1;\n      param_ptr = (int ********)stack_buffer;\n    }\n  }\n  result = arg_index;\n  arg_count = arg_index;\n  if (is_zero) {\n    arg_list_ptr = (int *******)((int)arg_list_ptr + 2);\n    *param_ptr = (int *******)&padding_char;\n    param_ptr[1] = (int *******)0x2;\n    if (arg_index < 8) {\n      result = arg_index + 1;\n      arg_count = arg_index;\n      param_ptr = param_ptr + 2;\n    }\n    else if (arg_list_ptr == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      param_ptr = (int ********)stack_buffer;\n    }\n    else {\n      arg_index = arg_index;\n      result = FUN_00082ac0(format_string,arg2,&local_params);\n      if (result != 0) goto LAB_000833de;\n      result = arg_index + 1;\n      arg_count = arg_index;\n      param_ptr = (int ********)stack_buffer;\n    }\n  }\n  arg_index = arg_count;\n  if ((flags == 0x80) &&\n     (remaining_format = (int *******)((int)next_arg - (int)max_width), 0 < (int)remaining_format)) {\n    if (0x10 < (int)remaining_format) {\n      do {\n        while( true ) {\n          temp_arg = remaining_format;\n          arg_index = arg_count + 1;\n          arg_list_ptr = arg_list_ptr + 4;\n          *param_ptr = (int *******)&DAT_00085848;\n          param_ptr[1] = (int *******)0x10;\n          if (7 < arg_index) break;\n          result = arg_count + 2;\n          param_ptr = param_ptr + 2;\nLAB_0008348e:\n          arg_count = arg_index;\n          remaining_format = temp_arg + -4;\n          if ((int)(temp_arg + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (arg_list_ptr != (int *******)0x0) {\n          result = FUN_00082ac0(format_string,arg2,&local_params);\n          if (result == 0) {\n            result = arg_index + 1;\n            param_ptr = (int ********)stack_buffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        arg_count = 0;\n        remaining_format = temp_arg + -4;\n        param_ptr = (int ********)stack_buffer;\n      } while (0x10 < (int)(temp_arg + -4));\nLAB_000834b4:\n      remaining_format = temp_arg + -4;\n    }\n    arg_list_ptr = (int *******)((int)arg_list_ptr + (int)remaining_format);\n    *param_ptr = (int *******)&DAT_00085848;\n    param_ptr[1] = remaining_format;\n    arg_index = result;\n    if (result < 8) {\n      result = result + 1;\n      param_ptr = param_ptr + 2;\n    }\n    else if (arg_list_ptr == (int *******)0x0) {\n      result = 1;\n      arg_index = 0;\n      param_ptr = (int ********)stack_buffer;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_params);\n      if (result != 0) goto LAB_000833de;\n      result = arg_index + 1;\n      param_ptr = (int ********)stack_buffer;\n    }\n  }\n  current_char = (int *******)((int)current_char - (int)remaining_width);\n  arg_ptr = (int ********)stack_buffer;\n  if ((int)current_char < 1) {\nLAB_000832c6:\n    arg_list_ptr = (int *******)((int)arg_list_ptr + (int)remaining_width);\n    *param_ptr = (int *******)temp_ptr;\n    param_ptr[1] = remaining_width;\n    remaining_width = arg_list_ptr;\n    arg_index = result;\n    if (result < 8) goto LAB_0008345a;\n    if (arg_list_ptr == (int *******)0x0) {\n      arg_index = 0;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_params);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    arg_index = arg_index;\n    if (0x10 < (int)current_char) {\n      do {\n        while( true ) {\n          remaining_format = current_char;\n          arg_index = arg_index + 1;\n          arg_list_ptr = arg_list_ptr + 4;\n          *param_ptr = (int *******)&DAT_00085848;\n          param_ptr[1] = (int *******)0x10;\n          if (7 < arg_index) break;\n          result = arg_index + 2;\n          param_ptr = param_ptr + 2;\nLAB_00083282:\n          arg_index = arg_index;\n          current_char = remaining_format + -4;\n          if ((int)(remaining_format + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (arg_list_ptr != (int *******)0x0) {\n          result = FUN_00082ac0(format_string,arg2,&local_params);\n          if (result == 0) {\n            result = arg_index + 1;\n            param_ptr = (int ********)stack_buffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        param_ptr = (int ********)stack_buffer;\n        arg_index = 0;\n        current_char = remaining_format + -4;\n      } while (0x10 < (int)(remaining_format + -4));\nLAB_000832aa:\n      current_char = remaining_format + -4;\n    }\n    arg_list_ptr = (int *******)((int)arg_list_ptr + (int)current_char);\n    *param_ptr = (int *******)&DAT_00085848;\n    param_ptr[1] = current_char;\n    if (result < 8) {\n      result = result + 1;\n      param_ptr = param_ptr + 2;\n      goto LAB_000832c6;\n    }\n    if (arg_list_ptr != (int *******)0x0) {\n      arg_index = result;\n      result = FUN_00082ac0(format_string,arg2,&local_params);\n      if (result != 0) goto LAB_000833de;\n      result = arg_index + 1;\n      param_ptr = (int ********)stack_buffer;\n      goto LAB_000832c6;\n    }\n    arg_local_array[0] = remaining_width;\n    arg_index = 1;\n    param_ptr = (int ********)stack_buffer;\n    stack_buffer = (undefined  [4])temp_ptr;\nLAB_0008345a:\n    arg_ptr = param_ptr + 2;\n    arg_list_ptr = remaining_width;\n  }\n  if (((flags & 4) != 0) &&\n     (current_char = (int *******)((int)next_arg - (int)max_width), 0 < (int)current_char)) {\n    result = arg_index;\n    if ((int)current_char < 0x11) {\n      arg_index = arg_index + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arg_index = result + 1;\n          arg_list_ptr = arg_list_ptr + 4;\n          *arg_ptr = (int *******)0x85808;\n          arg_ptr[1] = (int *******)0x10;\n          if (7 < arg_index) break;\n          arg_index = result + 2;\n          arg_ptr = arg_ptr + 2;\nLAB_00083316:\n          current_char = current_char + -4;\n          result = arg_index;\n          if ((int)current_char < 0x11) goto LAB_0008333e;\n        }\n        if (arg_list_ptr != (int *******)0x0) {\n          result = FUN_00082ac0(format_string,arg2,&local_params);\n          if (result == 0) {\n            arg_index = arg_index + 1;\n            arg_ptr = (int ********)stack_buffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        current_char = current_char + -4;\n        arg_index = 1;\n        result = 0;\n        arg_ptr = (int ********)stack_buffer;\n      } while (0x10 < (int)current_char);\n    }\nLAB_0008333e:\n    arg_list_ptr = (int *******)((int)arg_list_ptr + (int)current_char);\n    *arg_ptr = (int *******)0x85808;\n    arg_ptr[1] = current_char;\n    arg_index = arg_index;\n    if (7 < arg_index) {\n      if (arg_list_ptr == (int *******)0x0) {\n        if ((int)max_width < (int)next_arg) {\n          max_width = next_arg;\n        }\n        result = result + (int)max_width;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(format_string,arg2,&local_params);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)max_width < (int)next_arg) {\n    max_width = next_arg;\n  }\n  result = result + (int)max_width;\n  if ((arg_list_ptr != (int *******)0x0) &&\n     (result = FUN_00082ac0(format_string,arg2,&local_params), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  arg_index = 0;\n  param_ptr = (int ********)stack_buffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = next_char - 0x30;\n  next_arg = (int *******)0x0;\n  current_char = format_string;\n  do {\n    format_string = (int *******)((int)current_char + 1);\n    next_char = (uint)*(byte *)current_char;\n    next_arg = (int *******)(digit + (int)next_arg * 10);\n    digit = next_char - 0x30;\n    current_char = format_string;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  next_char = (uint)*(byte *)format_string;\n  if (flag_char == '\\0') {\n    flag_char = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "param_1": "format_string",
                "param_2": "arg2",
                "param_3": "format_string",
                "param_4": "args",
                "bVar1": "is_signed",
                "bVar2": "is_float",
                "bVar3": "is_alternate_form",
                "cVar4": "sign_char",
                "bVar5": "is_zero",
                "ppppppppiVar6": "param_ptr",
                "piVar7": "int_ptr1",
                "iVar8": "result",
                "cVar9": "temp_char",
                "pppppppiVar10": "current_char",
                "uVar11": "digit",
                "ppiVar12": "ppi_var12",
                "uVar13": "flags",
                "uVar14": "next_char",
                "iVar15": "arg_index",
                "lVar27": "temp_long",
                "local_dc": "max_width",
                "local_d4": "remaining_width",
                "local_c8": "arg_list_ptr",
                "local_c4": "result",
                "local_c0": "hex_digits",
                "local_a1": "flag_char",
                "local_a0": "padding_char",
                "local_9f": "x_format_char",
                "local_9c": "local_params",
                "local_98": "arg_index",
                "local_94": "arg_list_ptr",
                "local_90": "digit_char",
                "ppiVar16": "arg_list",
                "iVar17": "arg_count",
                "pppppppiVar18": "remaining_format",
                "piVar19": "pi_var19",
                "pppppppiVar20": "next_arg",
                "uVar21": "uint_var4",
                "piVar22": "arg_width",
                "pppppppiVar23": "temp_arg",
                "uVar24": "u_var24",
                "ppppppppiVar25": "temp_ptr",
                "bVar26": "is_negative",
                "cStack_6a": "temp_char",
                "local_69": "zero_char",
                "local_64": "arg_local_array",
                "local_68": "stack_buffer",
                "pppppppiVar16": "array_pointer3",
                "pppppppiVar25": "array_pointer7",
                "ppppppppiVar16": "arg_ptr",
                "iVar22": "temp_var4",
                "iVar25": "error_code",
                "pppppppiVar6": "ptr_ptr"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082b38": {
                    "16": "parse_format_string",
                    "1": "parse_format",
                    "3": "process_params",
                    "2": "format_string"
                },
                "param_1": {
                    "3": "input",
                    "1": "input_data",
                    "2": "buffer",
                    "4": "arg1",
                    "9": "format_string"
                },
                "param_2": {
                    "1": "format_specifier",
                    "3": "format_ptr",
                    "4": "arg2",
                    "2": "param2"
                },
                "param_3": {
                    "1": "formatted_output",
                    "2": "arg_ptr",
                    "7": "format_string",
                    "3": "args"
                },
                "param_4": {
                    "1": "arg_ptr_ptr",
                    "3": "arg_list",
                    "2": "ptr_ptr",
                    "6": "args"
                },
                "bVar1": {
                    "1": "is_zero_padding",
                    "2": "is_signed"
                },
                "bVar2": {
                    "1": "left_justify",
                    "2": "is_width"
                },
                "bVar3": {
                    "1": "is_param_unsigned",
                    "2": "is_alternate_form"
                },
                "cVar4": {
                    "1": "c_var4",
                    "3": "sign_char",
                    "2": "fill_char"
                },
                "bVar5": {
                    "1": "is_precision_specified",
                    "3": "is_zero",
                    "2": "is_flag_zero"
                },
                "ppppppppiVar6": {
                    "1": "local_params",
                    "2": "format_param_list"
                },
                "piVar7": {
                    "1": "result",
                    "2": "arg_ptr"
                },
                "iVar8": {
                    "1": "int_var",
                    "2": "index",
                    "9": "result"
                },
                "cVar9": {
                    "1": "char2",
                    "2": "char_var2",
                    "4": "temp_char",
                    "3": "char9"
                },
                "pppppppiVar10": {
                    "1": "format_ptr"
                },
                "uVar11": {
                    "1": "temp_digits",
                    "2": "uint_var1",
                    "13": "digit"
                },
                "ppiVar12": {
                    "1": "arg_pointer",
                    "2": "ppi_var12"
                },
                "uVar13": {
                    "1": "format_flag",
                    "3": "format_flags",
                    "2": "u_var13",
                    "9": "flags"
                },
                "uVar14": {
                    "1": "temp_char2",
                    "3": "current_char",
                    "2": "c",
                    "4": "next_char"
                },
                "iVar15": {
                    "1": "temp_int1",
                    "2": "loop_counter",
                    "3": "arg_index"
                },
                "lVar27": {
                    "1": "combined_int",
                    "3": "longlong_var",
                    "2": "combined_value"
                },
                "local_dc": {
                    "1": "num_args",
                    "5": "max_width",
                    "2": "local_var1"
                },
                "local_d4": {
                    "2": "precision",
                    "1": "local_d4"
                },
                "local_c8": {
                    "1": "arg_ptr_list",
                    "2": "arg_list",
                    "6": "arg_list_ptr"
                },
                "local_c4": {
                    "1": "output_char_count",
                    "2": "total_width",
                    "7": "result"
                },
                "local_c0": {
                    "1": "format_string_masked_char",
                    "3": "digits",
                    "2": "hex_chars"
                },
                "local_a1": {
                    "1": "format_string_sign",
                    "3": "flag_char",
                    "2": "leading_char"
                },
                "local_a0": {
                    "1": "padding_char_type",
                    "2": "zero_padding_char",
                    "5": "padding_char",
                    "3": "fill_char"
                },
                "local_9f": {
                    "1": "zero_pad"
                },
                "local_9c": {
                    "1": "local_params"
                },
                "local_98": {
                    "2": "param_count",
                    "1": "local_var6",
                    "3": "arg_index"
                },
                "local_94": {
                    "1": "params_ptr",
                    "2": "arg_list_ptr"
                },
                "local_90": {
                    "1": "signed_char",
                    "2": "digit_char"
                },
                "ppiVar16": {
                    "1": "arg_list"
                },
                "iVar17": {
                    "2": "i_var17",
                    "1": "var17",
                    "3": "int_var3"
                },
                "pppppppiVar18": {
                    "1": "pp_var18",
                    "2": "remaining_format"
                },
                "piVar19": {
                    "1": "var19",
                    "2": "int_ptr2"
                },
                "pppppppiVar20": {
                    "1": "ptr_ptr_ptr_ptr_ptr_ptr2"
                },
                "uVar21": {
                    "1": "temp3",
                    "3": "uint_var4",
                    "2": "u_var21"
                },
                "piVar22": {
                    "1": "tmp_int_ptr",
                    "2": "arg_width"
                },
                "pppppppiVar23": {
                    "1": "temp_pointer"
                },
                "uVar24": {
                    "1": "temp4",
                    "2": "uint_var5"
                },
                "ppppppppiVar25": {
                    "1": "block_ptr",
                    "2": "temp_ptr"
                },
                "bVar26": {
                    "2": "is_unsigned",
                    "1": "nullable_value",
                    "5": "is_negative"
                },
                "cStack_6a": {
                    "1": "temporary_char",
                    "2": "temp_char3"
                },
                "local_69": {
                    "1": "zero_pad",
                    "2": "zero_char"
                },
                "local_64": {
                    "1": "remaining_args"
                },
                "local_68": {
                    "1": "temp_vars",
                    "3": "stack_buffer"
                },
                "pppppppiVar16": {
                    "1": "array_pointer3"
                },
                "pppppppiVar25": {
                    "1": "ppppppppi_var_temp"
                },
                "FUN_00083808": {
                    "1": "check_format_specifier"
                },
                "FUN_00083b14": {
                    "1": "handle_error"
                },
                "FUN_00084750": {
                    "1": "convert_integer_to_string"
                },
                "FUN_00082a50": {
                    "1": "get_length_of_integer_string"
                },
                "FUN_00082ac0": {
                    "1": "process_format_specifier"
                },
                "FUN_00084384": {
                    "1": "convert_hex_to_char_string"
                },
                "FUN_0008378c": {
                    "1": "do_format_conversion"
                },
                "ppppppppiVar16": {
                    "1": "block_ptr",
                    "2": "arg_ptr"
                },
                "iVar22": {
                    "1": "temp_var4"
                },
                "dataProvider": {
                    "1": "get_data_ptr"
                },
                "flags": {
                    "1": "get_flags"
                },
                "typeSpecifier": {
                    "1": "get_type_specifier"
                },
                "precision": {
                    "1": "get_precision"
                },
                "width": {
                    "1": "get_field_width"
                },
                "argSize": {
                    "1": "get_argument_size"
                },
                "pppppppiVar19": {
                    "1": "remaining_format_string_pointer2"
                },
                "iVar25": {
                    "1": "error_code"
                },
                "local_99": {
                    "1": "underscore_present"
                },
                "pppppppppiVar6": {
                    "1": "format_ptr"
                },
                "ppppppppiVar20": {
                    "1": "star_param"
                },
                "ppppppppiVar18": {
                    "1": "remaining_pointer"
                },
                "local_6a": {
                    "1": "temp_char"
                },
                "pppppppVar18": {
                    "1": "temp_var3"
                },
                "pppppppiVar6": {
                    "1": "ptr_ptr"
                },
                "pppppppvIar20": {
                    "1": "star_arg"
                },
                "pppppppvIar23": {
                    "1": "remaining_arg_ptr"
                }
            }
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint process_data_0008378c(undefined4 arg1,int arg2)\n\n{\n  int result;\n  int check_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size1;\n  ushort masked_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero;\n  undefined4 value2;\n  undefined4 size4;\n  undefined4 value3;\n  undefined stack_buffer [1024];\n  \n  value3 = *(undefined4 *)(arg2 + 100);\n  value2 = *(undefined4 *)(arg2 + 0x1c);\n  value = *(undefined2 *)(arg2 + 0xe);\n  size4 = *(undefined4 *)(arg2 + 0x24);\n  buffer = stack_buffer;\n  masked_value = *(ushort *)(arg2 + 0xc) & 0xfffd;\n  buffer_size1 = 0x400;\n  buffer_size2 = 0x400;\n  zero = 0;\n  buffer = buffer;\n  result = FUN_00082b38(arg1,buffer_array);\n  if ((-1 < result) && (check_result = FUN_00083adc(arg1,buffer_array), check_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(arg2 + 0xc) = *(ushort *)(arg2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "arg1",
                "param_2": "arg2",
                "local_488": "buffer_array",
                "local_480": "buffer_size1",
                "local_47c": "masked_value",
                "local_47a": "value",
                "local_478": "buffer",
                "local_474": "buffer_size2",
                "local_470": "zero",
                "local_46c": "value2",
                "local_464": "size4",
                "local_424": "value3",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "check_result",
                "local_488[0]": "buffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008378c": {
                    "1": "decode_and_update_info",
                    "11": "process_data"
                },
                "param_1": {
                    "2": "input1",
                    "1": "unknown_param",
                    "8": "param1",
                    "3": "input_param"
                },
                "param_2": {
                    "3": "data",
                    "7": "param2",
                    "2": "input2",
                    "1": "input_param",
                    "8": "arg2"
                },
                "local_488": {
                    "1": "dynamic_array",
                    "4": "local_array",
                    "12": "buffer_array",
                    "3": "local_buffers",
                    "2": "buffer"
                },
                "local_480": {
                    "2": "size1",
                    "11": "buffer_size1",
                    "1": "array_size1"
                },
                "local_47c": {
                    "4": "flag",
                    "1": "buffer_size2",
                    "9": "masked_value",
                    "6": "modified_value"
                },
                "local_47a": {
                    "1": "value_to_update",
                    "2": "value1",
                    "3": "data_value",
                    "5": "value"
                },
                "local_478": {
                    "3": "local_buffer",
                    "1": "stack_pointer",
                    "2": "pointer",
                    "4": "buffer_pointer",
                    "13": "buffer"
                },
                "local_474": {
                    "2": "size1",
                    "1": "array_size2",
                    "3": "buffer_size1",
                    "11": "buffer_size2"
                },
                "local_470": {
                    "2": "constant2",
                    "1": "array_index",
                    "4": "zero",
                    "3": "zero_value"
                },
                "local_46c": {
                    "1": "offset",
                    "2": "constant3",
                    "3": "value2"
                },
                "local_464": {
                    "1": "param_four",
                    "2": "value4"
                },
                "local_424": {
                    "1": "pointer_value",
                    "2": "value4"
                },
                "auStack_420": {
                    "1": "buffer_data",
                    "5": "stack_array",
                    "15": "stack_buffer"
                },
                "iVar1": {
                    "6": "return_value",
                    "1": "result1",
                    "2": "result_1",
                    "14": "result"
                },
                "iVar2": {
                    "1": "sub_function_return_value",
                    "3": "sub_return_value",
                    "2": "return_value2",
                    "8": "check_result"
                },
                "FUN_00082b38": {
                    "1": "sub_function_a"
                },
                "FUN_00083adc": {
                    "1": "sub_function_b"
                },
                "local_488[2]": {
                    "1": "buffer_array"
                },
                "auStack_420[1024]": {
                    "1": "stack_buffer"
                },
                "local_488[0]": {
                    "1": "buffer"
                }
            }
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_data_00083808",
            "code": "\nundefined4 process_data_00083808(undefined4 *output,int *input_data)\n\n{\n  int value1;\n  int value2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((relocation_offset != 0) &&\n     (*(int *)(relocation_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  temp_var4 = *(ushort *)(input_data + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    value2 = i_var2;\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input_data + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)pointer_value != (int *)0x0) {\n        if ((int *)pointer_value != input_data + 0x10) {\n          FUN_00083d9c(output);\n          temp_var4 = *(ushort *)(input_data + 3);\n        }\n        pointer_value = 0;\n      }\n      value2 = i_var2;\n      temp_var4 = temp_var4 & 0xffdb;\n      *input_data = value2;\n      param2_1 = 0;\n    }\n    else {\n      value2 = i_var2;\n    }\n    *(ushort *)(input_data + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((value2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    FUN_000842a4(output,input_data);\n    temp_var3 = (uint)*(ushort *)(input_data + 3);\n    value2 = i_var2;\n  }\n  if ((temp_var3 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      value1 = i_var1;\n    }\n    input_data[2] = value1;\n  }\n  else {\n    param2_6 = -i_var1;\n    input_data[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "output",
                "param_2": "input_data",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocation_offset",
                "param_2[0xc]": "pointer_value",
                "param_2[4]": "i_var2",
                "param_2[1]": "param2_1",
                "param_2[5]": "i_var1",
                "param_2[6]": "param2_6"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083808": {
                    "3": "validate_and_update_data",
                    "1": "update_param1",
                    "6": "process_data",
                    "2": "validate_and_process_data",
                    "5": "process_relocation"
                },
                "param_1": {
                    "2": "error_code",
                    "1": "status",
                    "5": "output_status",
                    "8": "result"
                },
                "param_2": {
                    "7": "input",
                    "4": "data",
                    "1": "input_param",
                    "3": "data_ptr",
                    "8": "input_data"
                },
                "iVar1": {
                    "1": "another_variable",
                    "2": "value",
                    "9": "value1",
                    "8": "temp_var1"
                },
                "iVar2": {
                    "1": "temp_variable2",
                    "10": "value2",
                    "8": "temp_var2",
                    "2": "var2"
                },
                "uVar3": {
                    "3": "flag",
                    "4": "temp_var3",
                    "1": "lower_ushort_data",
                    "2": "temp1"
                },
                "uVar4": {
                    "2": "u_var4",
                    "1": "value",
                    "3": "temp2",
                    "4": "temp_var4"
                },
                "FUN_00083d9c": {
                    "1": "clear_relocation_data"
                },
                "FUN_00083b14": {
                    "1": "perform_additional_action"
                },
                "FUN_000842a4": {
                    "1": "handle_case2"
                },
                "FUC_00083808": {
                    "1": "process_data"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array_data"
                },
                "_param_2_3": {
                    "1": "relocation_type"
                },
                "*param_1": {
                    "1": "status"
                },
                "*param_2": {
                    "1": "i_var2"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "relocation_offset"
                },
                "*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38)": {
                    "1": "relocation_value"
                },
                "uVar4 | 0x40": {
                    "1": "updated_u_var4"
                },
                "(int *)param_2[0xc]": {
                    "1": "pointer_check"
                },
                "param_2[0xc]": {
                    "1": "pointer_value"
                },
                "param_2 + 0x10": {
                    "1": "temp_pointer"
                },
                "param_2[4]": {
                    "1": "new_var2"
                },
                "uVar4 & 0xffdb": {
                    "1": "updated_u_var4"
                },
                "param_2[1]": {
                    "1": "new_var5"
                },
                "uVar3 & 0x280": {
                    "1": "mask_value"
                },
                "param_2[5]": {
                    "1": "new_var7"
                },
                "param_2[6]": {
                    "1": "new_var6"
                },
                "*(ushort *)(param_2 + 3) | 0x40": {
                    "1": "updated_u_var4"
                },
                "(int)((uint)*(ushort *)(param_2 + 3) << 0x18)": {
                    "1": "signed_shift"
                },
                "param_2 + 3": {
                    "1": "new_pointer"
                },
                "param_2[12]": {
                    "1": "new_var3"
                },
                "param_2[0]": {
                    "1": "new_var4"
                }
            }
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083974": {
                    "1": "return_parameter_value",
                    "4": "identity",
                    "2": "copy_value",
                    "5": "copy_parameter",
                    "17": "identity_function"
                },
                "param_1": {
                    "17": "input",
                    "1": "param",
                    "7": "input_value",
                    "5": "value"
                },
                "FUN_00081df4": {
                    "2": "do_something",
                    "1": "perform_operation"
                }
            }
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 process_data_00083adc(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int temp_var1;\n  ushort flags;\n  uint temp;\n  int temp_var4;\n  code *function_ptr;\n  undefined4 return_value;\n  int temp_var5;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var5 = output_array[4];\n    if (temp_var5 == 0) {\n      return 0;\n    }\n    temp_var1 = *output_array;\n    if ((flags & 3) == 0) {\n      temp_var4 = output_array[5];\n    }\n    else {\n      temp_var4 = 0;\n    }\n    *output_array = temp_var5;\n    temp_var1 = temp_var1 - temp_var5;\n    output_array[2] = temp_var4;\n    do {\n      if (temp_var1 < 1) {\n        return 0;\n      }\n      temp_var4 = (*(code *)output_array[9])(input_array,output_array[7],temp_var5,temp_var1,return_value);\n      temp_var1 = temp_var1 - temp_var4;\n      temp_var5 = temp_var5 + temp_var4;\n    } while (0 < temp_var4);\nLAB_00083a54:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flags | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp_var5 = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var1 = (*function_ptr)(input_array,output_array[7],temp & 0x1000,1);\n    if ((temp_var1 == -1) && (temp_var4 = *input_array, temp_var4 != 0)) {\n      if ((temp_var4 == 0x1d) || (temp_var4 == 0x16)) {\n        *input_array = temp_var5;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(output_array + 3);\n    function_ptr = (code *)output_array[10];\n  }\n  else {\n    temp_var1 = output_array[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (temp_var1 = temp_var1 - output_array[1], output_array[0xc] != 0)) {\n    temp_var1 = temp_var1 - output_array[0xf];\n  }\n  temp_var1 = (*function_ptr)(input_array,output_array[7],temp_var1,0);\n  if (temp_var1 == -1) {\n    temp_var4 = *input_array;\n    if (temp_var4 != 0) {\n      if ((temp_var4 != 0x1d) && (temp_var4 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flags;\n    *output_array = output_array[4];\n  }\n  else {\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flags;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_array[0x14] = temp_var1;\n  }\nLAB_00083a00:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = temp_var5;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    FUN_00083d9c(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "input_array",
                "param_2": "output_array",
                "uVar3": "flags",
                "uVar4": "temp",
                "iVar2": "temp_var1",
                "iVar5": "temp_var4",
                "iVar7": "temp_var5",
                "pcVar6": "function_ptr",
                "unaff_r4": "return_value",
                "piVar1": "temp_ptr",
                "FUN_00083adc": "process_data_00083adc",
                "iVar1": "value1"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "data_pointer1",
                    "2": "data_ptr",
                    "3": "data_buffer",
                    "14": "input_array",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "data_pointer2",
                    "11": "output_array",
                    "4": "output_data",
                    "2": "control_array"
                },
                "uVar3": {
                    "5": "flag",
                    "2": "status",
                    "1": "var2",
                    "4": "temp_var2",
                    "9": "flags"
                },
                "uVar4": {
                    "1": "value2",
                    "4": "temp_var2",
                    "2": "flag2",
                    "5": "temp"
                },
                "iVar2": {
                    "1": "variable1",
                    "3": "var2",
                    "2": "counter",
                    "6": "temp_var1"
                },
                "iVar5": {
                    "4": "temp_var4",
                    "2": "temp2",
                    "1": "variable2",
                    "3": "var2"
                },
                "iVar7": {
                    "3": "var3",
                    "1": "temp_value3",
                    "4": "temp_var4",
                    "2": "var7"
                },
                "pcVar6": {
                    "1": "function1",
                    "9": "function_pointer",
                    "4": "callback",
                    "2": "callback_function",
                    "10": "function_ptr"
                },
                "unaff_r4": {
                    "11": "return_value",
                    "1": "status",
                    "2": "return_val",
                    "10": "result"
                },
                "piVar1": {
                    "2": "ptr_var1",
                    "1": "pointer_variable",
                    "7": "temp_ptr",
                    "3": "temp_var1",
                    "4": "temp_pointer"
                },
                "FUN_00083adc": {
                    "1": "decode_and_process_data",
                    "11": "process_data",
                    "2": "decode_data"
                },
                "iVar1": {
                    "1": "value1"
                },
                "FUN_00083d9c": {
                    "1": "cleanup_function"
                },
                "FUN_00083b14": {
                    "1": "other_function"
                }
            }
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initialize_data_structures_00083b14(int param)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(param + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(param + 4);\n    *(undefined **)(param + 0x3c) = label1;\n    *(undefined4 *)(param + 0x2e4) = 3;\n    *(int *)(param + 0x2e8) = param + 0x2ec;\n    *(undefined4 *)(param + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    var6_addr = 0;\n    var7_addr = 0;\n    var8_addr = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    var10_addr = 0;\n    var11_addr = 0;\n    var12_addr = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(param + 8);\n    var22_addr = ptr1;\n    var23_addr = label2;\n    var24_addr = 0x84465;\n    var25_addr = 0x8449d;\n    var26_addr = label3;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    var16_addr = 0;\n    var17_addr = 0;\n    var18_addr = 0;\n    var19_addr = 0;\n    var20_addr = 0;\n    var21_addr = 0;\n    FUN_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(param + 0xc);\n    var27_addr = ptr2;\n    var28_addr = label2;\n    var29_addr = 0x84465;\n    var30_addr = 0x8449d;\n    var31_addr = label3;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    var6_addr = 0;\n    var7_addr = 0;\n    var8_addr = 0;\n    var10_addr = 0;\n    var11_addr = 0;\n    var12_addr = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    var22_addr = ptr1;\n    var23_addr = label2;\n    var24_addr = 0x84465;\n    var25_addr = 0x8449d;\n    var26_addr = label3;\n    *(undefined4 *)(param + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "param",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "&LAB_00083b08_1": "label1",
                "&LAB_00084440_1": "label2",
                "&LAB_000844bc_1": "label3",
                "puVar1[1]": "var6_addr",
                "puVar1[2]": "var7_addr",
                "puVar1[0x19]": "var8_addr",
                "puVar1[4]": "var10_addr",
                "puVar1[5]": "var11_addr",
                "puVar1[6]": "var12_addr",
                "puVar2[1]": "var16_addr",
                "puVar2[2]": "var17_addr",
                "puVar2[0x19]": "var18_addr",
                "puVar2[4]": "var19_addr",
                "puVar2[5]": "var20_addr",
                "puVar2[6]": "var21_addr",
                "puVar1[7]": "var22_addr",
                "puVar1[8]": "var23_addr",
                "puVar1[9]": "var24_addr",
                "puVar1[10]": "var25_addr",
                "puVar1[0xb]": "var26_addr",
                "puVar2[7]": "var27_addr",
                "puVar2[8]": "var28_addr",
                "puVar2[9]": "var29_addr",
                "puVar2[10]": "var30_addr",
                "puVar2[0xb]": "var31_addr",
                "LAB_00083b08_1": "label1",
                "LAB_00084440_1": "label2",
                "LAB_000844bc_1": "label3"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083b14": {
                    "1": "initialize_params",
                    "2": "initialize_function",
                    "21": "initialize_data_structures",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "buffer_address",
                    "3": "data_structure",
                    "2": "data_structure_pointer",
                    "7": "param"
                },
                "puVar1": {
                    "1": "ptr",
                    "2": "data_struct1",
                    "8": "ptr1",
                    "3": "data_structure1"
                },
                "puVar2": {
                    "2": "data_struct2",
                    "1": "struct_ptr2",
                    "3": "data_structure2",
                    "9": "ptr2"
                },
                "FUN_00082504": {
                    "1": "initialize_data",
                    "4": "initialize_array",
                    "2": "initialize_memory"
                },
                "param_2": {
                    "1": "value"
                },
                "param_3": {
                    "2": "size",
                    "1": "array_size"
                },
                "&LAB_00083b08_1": {
                    "3": "label1"
                },
                "&LAB_00084440_1": {
                    "3": "label2"
                },
                "&LAB_000844bc_1": {
                    "3": "label3"
                },
                "param_1 + 0x38": {
                    "1": "param1_addr"
                },
                "param_1 + 4": {
                    "1": "ptr1_addr"
                },
                "param_1 + 0x3c": {
                    "1": "data[0x3c]"
                },
                "param_1 + 0x2e4": {
                    "1": "data[0x2e4]"
                },
                "param_1 + 0x2e8": {
                    "1": "data[0x2e8]"
                },
                "param_1 + 0x2e0": {
                    "1": "data[0x2e0]"
                },
                "puVar1 + 3": {
                    "1": "data_ptr1[0x3]"
                },
                "puVar1[1]": {
                    "1": "data_ptr1[0x1]"
                },
                "puVar1[2]": {
                    "1": "var7_addr"
                },
                "puVar1[0x19]": {
                    "1": "var8_addr"
                },
                "(int)puVar1 + 0xe": {
                    "1": "var9_addr"
                },
                "puVar1[4]": {
                    "1": "var10_addr"
                },
                "puVar1[5]": {
                    "1": "var11_addr"
                },
                "puVar1[6]": {
                    "1": "data_ptr1[0x6]"
                },
                "puVar2 + 3": {
                    "1": "data_ptr2[0x3]"
                },
                "(int)puVar2 + 0xe": {
                    "1": "var14_addr"
                },
                "puVar2[1]": {
                    "1": "var16_addr"
                },
                "puVar2[2]": {
                    "1": "var17_addr"
                },
                "puVar2[0x19]": {
                    "1": "var18_addr"
                },
                "puVar2[4]": {
                    "1": "var19_addr"
                },
                "puVar2[5]": {
                    "1": "var20_addr"
                },
                "puVar2[6]": {
                    "1": "var21_addr"
                },
                "puVar1[7]": {
                    "1": "var22_addr"
                },
                "puVar1[8]": {
                    "1": "var23_addr"
                },
                "puVar1[9]": {
                    "1": "var24_addr"
                },
                "puVar1[10]": {
                    "1": "var25_addr"
                },
                "puVar1[0xb]": {
                    "1": "var26_addr"
                },
                "puVar2[7]": {
                    "1": "var27_addr"
                },
                "puVar2[8]": {
                    "1": "var28_addr"
                },
                "puVar2[9]": {
                    "1": "var29_addr"
                },
                "puVar2[10]": {
                    "1": "var30_addr"
                },
                "puVar2[0xb]": {
                    "1": "var31_addr"
                },
                "puVar1 + 0x17": {
                    "1": "var32_addr"
                },
                "puVar2 + 0x17": {
                    "1": "var33_addr"
                },
                "param_1 + 8": {
                    "1": "ptr3_addr"
                },
                "param_1 + 0xc": {
                    "1": "data_ptr1[0xc]"
                },
                "param_1 + 0xe": {
                    "1": "data[0xe]"
                },
                "puVar1 + 0xe": {
                    "1": "data_ptr2[0xe]"
                },
                "puVar1 + 7": {
                    "1": "data_ptr1[0x7]"
                },
                "puVar2 + 7": {
                    "1": "data_ptr2[0x7]"
                },
                "puVar1[0]": {
                    "1": "data_ptr1[0]"
                },
                "LAB_00083b08_1": {
                    "1": "first_label",
                    "3": "label1"
                },
                "LAB_00084440_1": {
                    "3": "label2",
                    "1": "second_label"
                },
                "LAB_000844bc_1": {
                    "3": "label3",
                    "1": "third_label"
                }
            }
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint process_data_00083c40(undefined4 param1,uint length,byte **data)\n\n{\n  int result;\n  uint flag;\n  uint byte_value;\n  byte *current_byte;\n  uint index;\n  byte temp_byte;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  result = FUN_00084298();\n  if ((result == 1) && (length - 1 < 0xff)) {\n    byte_value = length & 0xff;\n    temp_byte = (byte)byte_value;\n    flag = 1;\n  }\n  else {\n    flag = FUN_0008456c(param1,&temp_byte,length,data + 0x17);\n    if (flag == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (flag == 0) {\n      return length;\n    }\n    byte_value = (uint)temp_byte;\n  }\n  index = 0;\n  do {\n    current_byte = data[2] + -1;\n    data[2] = current_byte;\n    if ((int)current_byte < 0) {\n      if ((int)data[6] <= (int)current_byte) {\n        **data = (byte)byte_value;\n        current_byte = *data;\n        byte_value = (uint)*current_byte;\n        if (byte_value != 10) goto LAB_00083c90;\n      }\n      result = FUN_000844c4(param1,byte_value,data);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)byte_value;\n      current_byte = *data;\nLAB_00083c90:\n      *data = current_byte + 1;\n    }\n    if (flag <= index + 1) {\n      return length;\n    }\n    byte_value = (uint)byte_array[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "length",
                "param_3": "data",
                "iVar1": "result",
                "uVar2": "flag",
                "uVar3": "byte_value",
                "pbVar4": "current_byte",
                "uVar5": "index",
                "local_1c": "temp_byte",
                "abStack_1b": "byte_array"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083c40": {
                    "2": "process_input_data",
                    "1": "copy_data_with_limit",
                    "22": "process_data"
                },
                "param_1": {
                    "3": "input_value",
                    "1": "input_param",
                    "4": "arg1",
                    "2": "param_1",
                    "12": "param1"
                },
                "param_2": {
                    "7": "param2",
                    "2": "size",
                    "1": "arg2",
                    "3": "data_length",
                    "9": "length"
                },
                "param_3": {
                    "9": "data",
                    "1": "arg3",
                    "7": "param3",
                    "4": "buffer",
                    "3": "input_data"
                },
                "iVar1": {
                    "4": "status",
                    "25": "result",
                    "1": "return_value"
                },
                "uVar2": {
                    "7": "flag",
                    "1": "index",
                    "2": "is_success",
                    "3": "result",
                    "6": "status"
                },
                "uVar3": {
                    "1": "byte_val",
                    "7": "current_byte",
                    "9": "byte_value",
                    "2": "current_value"
                },
                "pbVar4": {
                    "5": "byte_ptr",
                    "1": "temp_byte_ptr",
                    "3": "current_ptr",
                    "2": "pointer",
                    "6": "ptr",
                    "7": "current_byte"
                },
                "uVar5": {
                    "2": "count",
                    "8": "counter",
                    "21": "index"
                },
                "local_1c": {
                    "1": "byte_val",
                    "2": "current_value",
                    "11": "temp_byte",
                    "7": "byte_value"
                },
                "abStack_1b": {
                    "2": "byte_stack",
                    "1": "temp_byte_array",
                    "4": "stack_array",
                    "17": "byte_array"
                }
            }
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "initialize_memory_00083d00",
            "code": "\nundefined4 initialize_memory_00083d00(undefined4 input_param,int offset)\n\n{\n  int result;\n  uint masked_value;\n  int adjusted_offset;\n  \n  FUNC_00082598();\n  masked_value = *(uint *)(memory_array[141].r_info + 4) & 0xfffffffc;\n  adjusted_offset = ((masked_value - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result = FUN_00082970(input_param,0);\n    if (result == memory_array[141].r_info + masked_value) {\n      result = FUN_00082970(input_param,-adjusted_offset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_offset;\n        *(uint *)(memory_array[141].r_info + 4) = masked_value - adjusted_offset | 1;\n        FUNC_0008259c(input_param);\n        return 1;\n      }\n      adjusted_offset = FUN_00082970(input_param,0);\n      if (0xf < (int)(adjusted_offset - memory_array[141].r_info)) {\n        DAT_20071194 = adjusted_offset - memory_array[270].r_offset;\n        *(dword *)(memory_array[141].r_info + 4) =\n             adjusted_offset - memory_array[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "input_param",
                "param_2": "offset",
                "uVar2": "masked_value",
                "iVar3": "adjusted_offset",
                "iVar1": "result",
                "FUN_00083d00": "initialize_memory_00083d00",
                "Elf32_Rel_ARRAY_20070000": "memory_array"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "param",
                    "1": "input1",
                    "4": "param1",
                    "8": "input_param"
                },
                "param_2": {
                    "4": "arg2",
                    "1": "memory_offset",
                    "16": "offset",
                    "2": "param_2"
                },
                "uVar2": {
                    "4": "mask",
                    "1": "rel_address",
                    "3": "rel_offset",
                    "2": "rel_info",
                    "5": "masked_value"
                },
                "iVar3": {
                    "1": "var2",
                    "12": "adjusted_offset",
                    "3": "adjusted_value",
                    "2": "offset",
                    "6": "new_offset"
                },
                "iVar1": {
                    "5": "result1",
                    "24": "result",
                    "2": "return_value"
                },
                "FUNC_00082598": {
                    "1": "initialize_memory",
                    "7": "initialize"
                },
                "FUN_00082970": {
                    "1": "apply_relocation",
                    "3": "adjust_offset"
                },
                "DAT_20071194": {
                    "1": "data_address",
                    "3": "global_offset",
                    "2": "memory_offset"
                },
                "FUN_00083d00": {
                    "1": "improve_and_adjust_memory"
                },
                "FUN_00082598": {
                    "1": "initialize_system"
                },
                "FUNC_0008259c": {
                    "2": "finalize",
                    "1": "release_resources",
                    "3": "cleanup"
                },
                "FUNC_00082970": {
                    "1": "modify_pointer"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "memory_array"
                }
            }
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocation_00083d9c",
            "code": "\nvoid process_relocation_00083d9c(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool flag;\n  uint mask;\n  dword address;\n  int index2;\n  uint offset;\n  dword adjusted_address;\n  uint new_offset;\n  dword new_address;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  mask = *(uint *)(param2 + -4);\n  adjusted_address = param2 - 8;\n  offset = mask & 0xfffffffe;\n  address = adjusted_address + offset;\n  new_offset = *(uint *)(address + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == address) {\n    new_offset = new_offset + offset;\n    if (-1 < (int)(mask << 0x1f)) {\n      adjusted_address = adjusted_address - *(int *)(param2 + -8);\n      index2 = *(int *)(adjusted_address + 0xc);\n      index1 = *(int *)(adjusted_address + 8);\n      new_offset = new_offset + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    address = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(adjusted_address + 4) = new_offset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = adjusted_address;\n    if (address <= new_offset) {\n      FUN_00083d00(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(address + 4) = new_offset;\n    if ((mask & 1) == 0) {\n      adjusted_address = adjusted_address - *(int *)(param2 + -8);\n      index1 = *(int *)(adjusted_address + 8);\n      offset = offset + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        index2 = *(int *)(adjusted_address + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(address + new_offset + 4) << 0x1f) {\n      offset = offset + new_offset;\n      index1 = *(int *)(address + 8);\n      if ((!flag) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = adjusted_address;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = adjusted_address;\n        *(undefined4 *)(adjusted_address + 0xc) = 0x2007046c;\n        *(undefined4 *)(adjusted_address + 8) = 0x2007046c;\n        *(uint *)(adjusted_address + 4) = offset | 1;\n        *(uint *)(adjusted_address + offset) = offset;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(address + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(adjusted_address + 4) = offset | 1;\n    *(uint *)(adjusted_address + offset) = offset;\n    if (!flag) {\n      if (offset < 0x200) {\n        mask = offset & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + mask);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(adjusted_address + 8) = index1;\n        *(uint *)(adjusted_address + 0xc) = mask + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + mask) = adjusted_address;\n        *(dword *)(index1 + 0xc) = adjusted_address;\n        FUNC_0008259c(param1);\n        return;\n      }\n      mask = offset >> 9;\n      if (mask < 5) {\n        index1 = (offset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (mask < 0x15) {\n        index1 = mask + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (mask < 0x55) {\n        index1 = (offset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (mask < 0x155) {\n        index1 = (offset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (mask < 0x555) {\n        index1 = (offset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      new_address = index2 * 4 + 0x20070464;\n      address = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (address == new_address) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        new_address = address;\n      }\n      else {\n        do {\n          if ((*(uint *)(address + 4) & 0xfffffffc) <= offset) break;\n          address = *(dword *)(address + 8);\n        } while (new_address != address);\n        new_address = *(dword *)(address + 0xc);\n      }\n      *(dword *)(adjusted_address + 0xc) = new_address;\n      *(dword *)(adjusted_address + 8) = address;\n      *(dword *)(new_address + 8) = adjusted_address;\n      *(dword *)(address + 0xc) = adjusted_address;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "renaming": {
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "flag",
                "uVar3": "mask",
                "dVar4": "address",
                "iVar5": "index2",
                "uVar6": "offset",
                "dVar7": "adjusted_address",
                "uVar8": "new_offset",
                "dVar9": "new_address",
                "FUN_00083d9c": "process_relocation_00083d9c"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_param",
                    "6": "arg1",
                    "3": "param",
                    "15": "param1"
                },
                "param_2": {
                    "1": "input_param",
                    "15": "param2",
                    "2": "size",
                    "6": "arg2"
                },
                "iVar1": {
                    "10": "index1",
                    "1": "first_index",
                    "2": "index",
                    "7": "temp_var1"
                },
                "bVar2": {
                    "6": "flag",
                    "1": "is_match",
                    "4": "is_special_case",
                    "2": "is_flag_set"
                },
                "uVar3": {
                    "2": "value",
                    "1": "relocation_value",
                    "4": "value1"
                },
                "dVar4": {
                    "1": "adjusted_offset",
                    "4": "current_relocation",
                    "2": "offset"
                },
                "iVar5": {
                    "10": "index2",
                    "2": "var5",
                    "1": "iterator_var2",
                    "7": "temp_var2"
                },
                "uVar6": {
                    "1": "increment",
                    "2": "adjusted_offset",
                    "3": "value2",
                    "6": "offset"
                },
                "dVar7": {
                    "1": "temp_var6",
                    "2": "current_address"
                },
                "uVar8": {
                    "1": "next_relocation",
                    "3": "value3",
                    "4": "new_offset",
                    "2": "updated_value"
                },
                "dVar9": {
                    "1": "next_relocation",
                    "2": "new_address"
                },
                "FUN_00083d9c": {
                    "1": "update_relocation_table",
                    "3": "process_relocations",
                    "5": "process_relocation"
                }
            }
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 process_data_00083f34(undefined4 *output,uint *input,uint **ptr_array)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flag;\n  uint temp4;\n  uint *ptr1;\n  uint *ptr2;\n  uint count;\n  uint temp1;\n  uint offset;\n  uint temp3;\n  uint local_var;\n  \n  if (ptr_array[2] != (uint *)0x0) {\n    flag = *(ushort *)(input + 3);\n    temp4 = (uint)flag;\n    if (((int)(temp4 << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *ptr_array;\n    }\n    else {\n      result = FUN_00083808(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input + 3);\n      temp4 = (uint)flag;\n      ptr2 = *ptr_array;\n    }\n    if ((flag & 2) == 0) {\n      value1 = temp4 & 2;\n      offset = value1;\n      count = value1;\n      local_var = value1;\n      if ((temp4 & 1) == 0) {\n        value1 = 0;\n        offset = 0;\n        while( true ) {\n          while (value1 == 0) {\n            offset = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          count = input[2];\n          if ((int)(temp4 << 0x16) < 0) {\n            if (value1 < count) {\n              temp4 = *input;\n              count = value1;\n            }\n            else if ((temp4 & 0x480) == 0) {\n              temp4 = *input;\n            }\n            else {\n              result = *input - input[4];\n              count = result + 1 + value1;\n              temp1 = (int)(input[5] * 3) / 2;\n              if (count <= temp1) {\n                count = temp1;\n              }\n              if ((int)(temp4 << 0x15) < 0) {\n                temp1 = FUN_00081e14(output,count);\n                if (temp1 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(input + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(temp1,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp1 = FUN_000825b0(output);\n                if (temp1 == 0) {\n                  FUN_00083d9c(output,input[4]);\n                  flag = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp4 = temp1 + result;\n              input[4] = temp1;\n              input[5] = count;\n              *input = temp4;\n              input[2] = count - result;\n              count = value1;\n            }\n            FUN_00082438(temp4,offset,count);\n            input[2] = input[2] - count;\n            *input = *input + count;\n            count = value1;\n          }\n          else if ((input[4] < *input) || (temp4 = input[5], value1 < temp4)) {\n            if (value1 < count) {\n              count = value1;\n            }\n            FUN_00082438(*input,offset,count);\n            temp4 = input[2];\n            input[2] = temp4 - count;\n            *input = *input + count;\n            if ((temp4 - count == 0) && (result = FUN_00083adc(output,input), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            count = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              count = value1;\n            }\n            count = (*(code *)input[9])(output,input[7],offset,(count / temp4) * temp4);\n            if ((int)count < 1) goto LAB_0008402e;\n          }\n          ptr1 = ptr_array[2];\n          offset = offset + count;\n          value1 = value1 - count;\n          ptr_array[2] = (uint *)((int)ptr1 - count);\n          if ((uint *)((int)ptr1 - count) == (uint *)0x0) break;\n          temp4 = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            count = *ptr2;\n            value1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = FUN_00084384(count,10,value1);\n            if (result == 0) {\n              offset = value1 + 1;\n              local_var = 1;\n            }\n            else {\n              offset = (result + 1) - count;\n              local_var = 1;\n            }\n          }\n          temp1 = *input;\n          temp4 = offset;\n          if (value1 <= offset) {\n            temp4 = value1;\n          }\n          value2 = input[5];\n          if ((input[4] < temp1) && (temp3 = input[2] + value2, (int)temp3 < (int)temp4)) {\n            FUN_00082438(temp1,count,temp3);\n            *input = *input + temp3;\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp4 < (int)value2) {\n            FUN_00082438(temp1,count,temp4);\n            input[2] = input[2] - temp4;\n            *input = temp4 + *input;\n            temp3 = temp4;\n          }\n          else {\n            temp3 = (*(code *)input[9])(output,input[7],count,value2);\n            if ((int)temp3 < 1) goto LAB_0008402e;\n          }\n          offset = offset - temp3;\n          if (offset == 0) {\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto LAB_0008402e;\n            local_var = 0;\n          }\n          ptr1 = ptr_array[2];\n          count = count + temp3;\n          value1 = value1 - temp3;\n          ptr_array[2] = (uint *)((int)ptr1 - temp3);\n        } while ((uint *)((int)ptr1 - temp3) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      temp4 = 0;\n      do {\n        while( true ) {\n          offset = temp4;\n          if (0x7ffffbff < temp4) {\n            offset = 0x7ffffc00;\n          }\n          if (temp4 != 0) break;\n          value1 = *ptr2;\n          temp4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],value1,offset);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(input + 3);\nLAB_00084030:\n          *(ushort *)(input + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = ptr_array[2];\n        value1 = value1 + result;\n        temp4 = temp4 - result;\n        ptr_array[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "output",
                "param_2": "input",
                "param_3": "ptr_array",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flag",
                "uVar5": "temp4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "count",
                "uVar9": "temp1",
                "uVar10": "offset",
                "uVar11": "temp3",
                "local_2c": "local_var",
                "FUN_00083f34": "process_data_00083f34"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "output_buffer",
                    "3": "input_array",
                    "15": "output",
                    "4": "result"
                },
                "param_2": {
                    "7": "input",
                    "5": "input_data",
                    "1": "flags",
                    "3": "input1"
                },
                "param_3": {
                    "2": "data",
                    "1": "output_array",
                    "3": "input2",
                    "4": "buffer",
                    "5": "ptr_array"
                },
                "iVar1": {
                    "2": "status",
                    "22": "result",
                    "6": "return_value",
                    "1": "error_code"
                },
                "uVar2": {
                    "1": "u_var2",
                    "2": "var1",
                    "7": "temp1",
                    "9": "value1",
                    "5": "temp_var1"
                },
                "uVar3": {
                    "1": "flag2",
                    "5": "temp_var2",
                    "8": "value2",
                    "7": "temp2",
                    "2": "var2"
                },
                "uVar4": {
                    "13": "flag",
                    "2": "ushort_var",
                    "1": "flags",
                    "4": "temp3"
                },
                "uVar5": {
                    "2": "temp_var4",
                    "1": "u_var5",
                    "3": "temp",
                    "4": "temp4"
                },
                "puVar6": {
                    "1": "ptr_var",
                    "13": "ptr1",
                    "3": "ptr_var1",
                    "2": "temp_ptr1",
                    "6": "pointer1"
                },
                "puVar7": {
                    "6": "pointer2",
                    "1": "pointer_var2",
                    "2": "temp_ptr2",
                    "4": "ptr_var2",
                    "13": "ptr2"
                },
                "uVar8": {
                    "1": "temp4",
                    "5": "count",
                    "2": "var5",
                    "3": "length"
                },
                "uVar9": {
                    "1": "temp_value3",
                    "2": "temp_var6",
                    "3": "temp1"
                },
                "uVar10": {
                    "1": "temp_value7",
                    "3": "offset",
                    "2": "temp3"
                },
                "uVar11": {
                    "2": "temp4",
                    "1": "value_2",
                    "3": "temp3"
                },
                "local_2c": {
                    "2": "temp9",
                    "3": "temp5",
                    "1": "temp_count",
                    "12": "local_var"
                },
                "FUN_00083f34": {
                    "1": "decode_and_process_data",
                    "16": "process_data"
                },
                "FUN_00083808": {
                    "1": "perform_operation"
                },
                "FUN_0008234c": {
                    "1": "copy_data_to_array"
                },
                "FUN_00083d9c": {
                    "1": "update_result",
                    "5": "handle_error"
                },
                "FUN_000825b0": {
                    "1": "allocate_memory_function",
                    "8": "allocate_memory"
                },
                "FUN_00081e14": {
                    "1": "allocate_reserved_memory",
                    "2": "initialize_memory"
                },
                "FUN_00083adc": {
                    "1": "validate_pointer",
                    "2": "check_condition"
                },
                "FUN_00082438": {
                    "1": "modify_variables",
                    "2": "update_values"
                },
                "FUN_00084384": {
                    "2": "manipulate_data",
                    "1": "perform_operation"
                }
            }
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nuint32_t get_memory_address_00084290(void)\n\n{\n  base_address 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290",
                "undefined4": "uint32_t",
                "return": "base_address"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084290": {
                    "6": "get_magic_number",
                    "3": "get_base_address",
                    "22": "get_memory_address"
                },
                "undefined4": {
                    "3": "uint32",
                    "1": "unsigned_int",
                    "9": "uint32_t"
                },
                "0x20070874": {
                    "9": "memory_address"
                },
                "return": {
                    "1": "base_address"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "PTR_FUN_00084290": {
                    "1": "memory_address"
                },
                "PTR_DAT_00084290": {
                    "1": "data"
                },
                "": {
                    "1": ""
                },
                "return value": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword get_relocation_info_00084298(void)\n\n{\n  return relocation_arrayentry274.relocation_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_info": "relocation_info",
                "[274]": "entry274"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084298": {
                    "2": "get_rel_info",
                    "1": "get_relocation_type",
                    "4": "get_rel_r_info",
                    "13": "get_relocation_info"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "2": "elf_relocation_array",
                    "4": "relocation_table",
                    "1": "elf32_rel_array",
                    "11": "relocation_array",
                    "9": "rel_array",
                    "3": "elf_rel_array"
                },
                "r_info": {
                    "4": "relocation_info",
                    "1": "rel_info"
                },
                "274": {
                    "1": "relocation_entry_index"
                },
                "[274]": {
                    "1": "entry274"
                }
            }
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nvoid process_data_000842a4(int data,int *output)\n\n{\n  ushort value;\n  int result;\n  int status;\n  uint value2;\n  bool flag;\n  undefined stack_array [4];\n  uint local_value;\n  \n  value = *(ushort *)(output + 3);\n  value2 = (uint)value;\n  if ((int)(value2 << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_000846b4(data,(int)*(short *)((int)output + 0xe),stack_array);\n    if (-1 < result) {\n      flag = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value = *(ushort *)(output + 3);\n    value2 = (uint)value;\n  }\n  *(ushort *)(output + 3) = value | 0x800;\n  if ((value2 & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nLAB_00084300:\n  status = FUN_00081e14(data,result);\n  value = *(ushort *)(output + 3);\n  if (status == 0) {\n    if (-1 < (int)((uint)value << 0x16)) {\n      *(ushort *)(output + 3) = value | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = value | 0x80;\n    *output = status;\n    output[4] = status;\n    output[5] = result;\n    if ((flag) && (result = FUN_000846dc(data,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data",
                "param_2": "output",
                "uVar1": "value",
                "iVar2": "result",
                "iVar3": "status",
                "uVar4": "value2",
                "bVar5": "flag",
                "auStack_54": "stack_array",
                "local_50": "local_value"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000842a4": {
                    "1": "update_flags_and_values",
                    "15": "process_data"
                },
                "param_1": {
                    "4": "input1",
                    "6": "data",
                    "1": "arg1",
                    "2": "param1",
                    "3": "input_param"
                },
                "param_2": {
                    "2": "output_array",
                    "1": "array_param",
                    "4": "input2",
                    "3": "output_data",
                    "7": "output"
                },
                "uVar1": {
                    "4": "flag",
                    "1": "result",
                    "10": "value",
                    "2": "ushort_val",
                    "7": "value1"
                },
                "iVar2": {
                    "1": "result_code",
                    "6": "result1",
                    "2": "status",
                    "15": "result"
                },
                "iVar3": {
                    "2": "return_value",
                    "1": "status_code",
                    "4": "error_code",
                    "6": "result2",
                    "10": "status"
                },
                "uVar4": {
                    "1": "attribute_flag",
                    "3": "temp_value",
                    "5": "temp",
                    "8": "value2",
                    "2": "uint_val"
                },
                "bVar5": {
                    "12": "flag",
                    "1": "is_special_case",
                    "4": "is_condition_met",
                    "2": "is_flag_set"
                },
                "auStack_54": {
                    "1": "buffer",
                    "6": "stack_array",
                    "4": "temp_array",
                    "5": "temp_stack",
                    "2": "stack_variable"
                },
                "local_50": {
                    "1": "local_var1",
                    "2": "temp_var",
                    "12": "local_value",
                    "7": "local_variable",
                    "4": "local_var"
                },
                "FUN_000846dc": {
                    "1": "handle_error"
                },
                "FUN_000846b4": {
                    "1": "process_data"
                },
                "FUN_00081e14": {
                    "1": "perform_operation"
                },
                "param_3": {
                    "1": "additional_param1"
                },
                "param_4": {
                    "1": "additional_param2"
                }
            }
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint array_length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nlabel_check_loop:\n    if (3 < array_length) {\n      current_ptr = array;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto label_not_found;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (array_length == 0) {\nlabel_not_found:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    current_ptr = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto label_check_loop;\n      if (array_length == 0) goto label_not_found;\n      current_ptr = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "array_length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_last_index",
                "LAB_000843b4": "label_check_loop",
                "LAB_000843dc": "label_not_found"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084384": {
                    "1": "find_occurrence",
                    "4": "find_char_in_array",
                    "2": "find_character",
                    "3": "find_next_occurrence",
                    "8": "find_first_occurrence"
                },
                "param_1": {
                    "3": "input",
                    "2": "data",
                    "12": "array",
                    "1": "data_ptr",
                    "6": "input_array",
                    "5": "buffer"
                },
                "param_2": {
                    "6": "target_char",
                    "8": "character",
                    "4": "target_value",
                    "1": "target_byte",
                    "10": "target"
                },
                "param_3": {
                    "11": "array_length",
                    "3": "buffer_size",
                    "1": "input_length",
                    "2": "buffer_length",
                    "5": "size",
                    "9": "length"
                },
                "uVar1": {
                    "12": "xor_result",
                    "7": "temp",
                    "1": "temp_val",
                    "2": "xor_value",
                    "5": "result"
                },
                "iVar2": {
                    "1": "iterator",
                    "29": "index"
                },
                "puVar3": {
                    "2": "current_address",
                    "15": "current_ptr",
                    "4": "current_element",
                    "5": "ptr",
                    "1": "next_data"
                },
                "bVar4": {
                    "5": "found",
                    "1": "target_found",
                    "2": "is_last_char",
                    "10": "is_last_index",
                    "4": "is_last_element"
                },
                "LAB_000843b4": {
                    "1": "start_search"
                },
                "LAB_000843dc": {
                    "1": "label_not_found"
                }
            }
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid process_data_00084464(int *output,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = FUN_000811cc((int)*(short *)(input + 0xe),param_a,param_b,param_b,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "output",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4",
                "iVar1": "result",
                "FUN_00084464": "process_data_00084464"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "output_buffer",
                    "7": "output_array",
                    "4": "output_data",
                    "12": "output",
                    "5": "result"
                },
                "param_2": {
                    "10": "input",
                    "4": "data",
                    "2": "input_pointer",
                    "1": "data_offset",
                    "5": "input_data"
                },
                "param_3": {
                    "4": "param3",
                    "1": "extra_param_1",
                    "3": "value1",
                    "8": "param1",
                    "13": "param_a"
                },
                "param_4": {
                    "8": "param2",
                    "4": "param4",
                    "13": "param_b",
                    "1": "val2",
                    "3": "value2"
                },
                "uVar2": {
                    "2": "ushort_val",
                    "1": "data_value",
                    "3": "ushort_value",
                    "16": "value"
                },
                "unaff_r4": {
                    "10": "unused1",
                    "1": "unused_r4",
                    "5": "unused_param1"
                },
                "unaff_r5": {
                    "1": "unused_var2",
                    "5": "unused_param2",
                    "10": "unused2"
                },
                "unaff_r6": {
                    "5": "unused_param3",
                    "1": "unused_r6",
                    "10": "unused3"
                },
                "in_lr": {
                    "1": "temp4",
                    "4": "unused_param4",
                    "2": "unused_lr",
                    "10": "unused4"
                },
                "iVar1": {
                    "1": "function_result",
                    "23": "result",
                    "6": "return_value"
                },
                "FUN_000811cc": {
                    "1": "process_data"
                },
                "FUN_00084700": {
                    "2": "handle_error"
                },
                "FUN_00084464": {
                    "18": "process_data",
                    "1": "update_data_and_check",
                    "2": "process_function",
                    "5": "update_data"
                },
                "DAT_200711bc": {
                    "1": "result",
                    "2": "error_flag",
                    "3": "error_code"
                }
            }
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_status_0008449c",
            "code": "\nvoid update_status_0008449c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updated_value;\n  \n  result = FUN_00084700(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    updated_value = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = updated_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_status_0008449c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updated_value"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008449c": {
                    "2": "update_configuration",
                    "1": "update_value_based_on_condition",
                    "3": "update_value",
                    "7": "update_status",
                    "5": "update_parameter",
                    "4": "update_data"
                },
                "param_1": {
                    "1": "status_pointer",
                    "5": "param1",
                    "4": "param",
                    "2": "param_1"
                },
                "param_2": {
                    "1": "param_2",
                    "5": "param2",
                    "4": "data",
                    "2": "data_offset",
                    "3": "data_pointer"
                },
                "iVar1": {
                    "30": "result",
                    "1": "return_value"
                },
                "uVar2": {
                    "2": "new_flags",
                    "1": "flag_value",
                    "3": "updated_flag",
                    "13": "updated_value"
                },
                "*(short *)(param_2 + 0xe)": {
                    "1": "value"
                },
                "*(ushort *)(param_2 + 0xc)": {
                    "1": "flags_value"
                },
                "FUN_00084700": {
                    "1": "perform_calculation"
                }
            }
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint process_data_000844c4(int input_param,uint flag,undefined4 *data,undefined4 value)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input_param != 0) && (*(int *)(input_param + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  ushort_value = *(ushort *)(data + 3);\n  uint_value = (uint)ushort_value;\n  data[2] = data[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data[4], index == 0)) {\n    index = FUN_00083808(input_param,data,ushort_value,uint_value,value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data + 3);\n    index = data[4];\n    uint_value = (uint)ushort_value;\n  }\n  flag = flag & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*data;\n    index = (int)ptr - index;\n    if (index < (int)data[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data[0x19] = data[0x19] & 0xffffdfff;\n    ptr = (undefined *)*data;\n    *(ushort *)(data + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)data[5]) goto LAB_000844f6;\n  }\n  index = FUN_00083adc(input_param,data);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*data;\n  index = 1;\nLAB_000844f8:\n  data[2] = data[2] + -1;\n  *data = ptr + 1;\n  *ptr = (char)flag;\n  if (((data[5] == index) ||\n      (((int)((uint)*(ushort *)(data + 3) << 0x1f) < 0 && (flag == 10)))) &&\n     (index = FUN_00083adc(input_param,data), index != 0)) {\n    return 0xffffffff;\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "input_param",
                "param_2": "flag",
                "param_3": "data",
                "param_4": "value",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "ptr",
                "iVar4": "index"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000844c4": {
                    "6": "process_input",
                    "1": "decode_and_process_data",
                    "16": "process_data"
                },
                "param_1": {
                    "4": "input_data",
                    "1": "input_val",
                    "3": "input_ptr",
                    "2": "input_address",
                    "6": "input_param"
                },
                "param_2": {
                    "7": "flag",
                    "1": "param",
                    "2": "output",
                    "6": "value"
                },
                "param_3": {
                    "8": "data",
                    "3": "data_array",
                    "1": "ptr3",
                    "2": "output_buffer",
                    "5": "buffer"
                },
                "param_4": {
                    "2": "extra_param",
                    "1": "some_data",
                    "7": "value",
                    "3": "size",
                    "4": "param"
                },
                "uVar1": {
                    "2": "flag",
                    "1": "info_array_element",
                    "14": "ushort_value",
                    "4": "value1"
                },
                "uVar2": {
                    "1": "temp2",
                    "14": "uint_value",
                    "4": "value2",
                    "3": "uint_var",
                    "2": "flag_value"
                },
                "puVar3": {
                    "2": "data_pointer",
                    "6": "pointer",
                    "1": "pointer_value",
                    "13": "ptr"
                },
                "iVar4": {
                    "1": "result",
                    "3": "int_value",
                    "4": "counter",
                    "11": "index",
                    "2": "int_var"
                },
                "FUN_00083808": {
                    "1": "perform_operation",
                    "2": "process_data"
                },
                "FUN_00083b14": {
                    "1": "sub_function_2",
                    "3": "initialize",
                    "2": "handle_error"
                },
                "FUN_00083adc": {
                    "1": "sub_function_3",
                    "2": "validate_data"
                }
            }
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_function_0008456c",
            "code": "\nvoid execute_function_0008456c(undefined4 *output,int input_length,undefined4 param,undefined4 *result)\n\n{\n  code *function_pointer;\n  undefined4 return_value;\n  int return_value;\n  undefined temp_buffer [12];\n  \n  function_pointer = DAT_20070898;\n  if (input_length == 0) {\n    return_value = FUN_00084290();\n    return_value = (*function_pointer)(output,temp_buffer,0,return_value,result);\n  }\n  else {\n    return_value = FUN_00084290();\n    return_value = (*function_pointer)(output,input_length,param,return_value,result);\n  }\n  if (return_value == -1) {\n    *result = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_function_0008456c",
                "param_1": "output",
                "param_2": "input_length",
                "param_3": "param",
                "param_4": "result",
                "pcVar1": "function_pointer",
                "uVar2": "return_value",
                "iVar3": "return_value",
                "auStack_24": "temp_buffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008456c": {
                    "5": "process_data",
                    "3": "execute_command",
                    "7": "execute_function",
                    "1": "update_status",
                    "4": "execute_operation"
                },
                "param_1": {
                    "2": "result_pointer",
                    "3": "output_ptr",
                    "1": "input_data",
                    "8": "output",
                    "5": "output_buffer"
                },
                "param_2": {
                    "5": "size",
                    "4": "input_size",
                    "1": "arg2",
                    "2": "operation_type",
                    "3": "condition"
                },
                "param_3": {
                    "2": "input",
                    "3": "value",
                    "1": "input_param",
                    "4": "param"
                },
                "param_4": {
                    "1": "error_pointer",
                    "2": "status_ptr",
                    "5": "status",
                    "11": "result"
                },
                "pcVar1": {
                    "6": "function_ptr",
                    "24": "function_pointer",
                    "1": "data_process_func"
                },
                "uVar2": {
                    "1": "data_var",
                    "13": "return_value",
                    "2": "value",
                    "10": "result"
                },
                "iVar3": {
                    "18": "return_value",
                    "1": "call_result",
                    "4": "status",
                    "5": "result",
                    "2": "execution_result"
                },
                "auStack_24": {
                    "2": "stack_array",
                    "8": "temp_buffer",
                    "1": "auxiliary_array",
                    "3": "stack_data",
                    "4": "buffer",
                    "5": "temporary_buffer"
                },
                "FUN_00084290": {
                    "1": "get_return_value"
                },
                "FUN_000845bc": {
                    "1": "call_function"
                }
            }
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_value_to_char_000845bc",
            "code": "\nundefined4 convert_value_to_char_000845bc(undefined4 *output,undefined *output_buffer,uint value)\n\n{\n  if (output_buffer == (undefined *)0x0) {\n    status 0;\n  }\n  if (value < 0x100) {\n    *output_buffer = converted_byte;\n    status 1;\n  }\n  *output = 0x8a;\n  status 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_value_to_char_000845bc",
                "param_1": "output",
                "param_2": "output_buffer",
                "param_3": "value",
                "return": "status",
                "(char)param_3": "converted_byte",
                "char": "byte_value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000845bc": {
                    "1": "convert_byte_to_value",
                    "2": "decode_character",
                    "3": "convert_value_to_byte",
                    "4": "convert_value_to_char"
                },
                "param_1": {
                    "4": "output_ptr",
                    "1": "value_ptr",
                    "2": "output_buffer",
                    "3": "output_value",
                    "6": "output"
                },
                "param_2": {
                    "2": "input_ptr",
                    "1": "value_ptr",
                    "4": "buffer",
                    "5": "output_buffer",
                    "3": "input_pointer"
                },
                "param_3": {
                    "1": "number",
                    "10": "input_value",
                    "2": "character_code",
                    "12": "value"
                },
                "*param_2": {
                    "1": "output_byte",
                    "2": "decoded_character"
                },
                "*param_1": {
                    "1": "output_value"
                },
                "return": {
                    "1": "status"
                },
                "value": {
                    "1": "input_value"
                },
                "<FUN_000845bc>": {
                    "1": "<convert_to_single_byte>"
                },
                "<param_1>": {
                    "1": "<output_data>"
                },
                "<param_2>": {
                    "1": "<input_data>"
                },
                "<param_3>": {
                    "1": "<input_length>"
                },
                "0xffffffff": {
                    "1": "error_indicator"
                },
                "(undefined *)0x0": {
                    "5": "null"
                },
                "0x100": {
                    "1": "byte_limit",
                    "2": "256"
                },
                "(char)param_3": {
                    "2": "converted_byte",
                    "1": "decoded_byte"
                },
                "0x8a": {
                    "2": "error_value",
                    "1": "buffer_overflow",
                    "5": "error_code"
                },
                "ptr_1": {
                    "1": "output_value"
                },
                "char": {
                    "2": "byte_value"
                },
                "0x0": {
                    "4": "null"
                },
                "param_2 == (undefined *)0x0": {
                    "1": "buffer_is_null"
                },
                "param_3 < 0x100": {
                    "1": "value_is_less_than256"
                },
                "*param_2 = (char)param_3": {
                    "1": "set_buffer_value"
                },
                "*param_1 = 0x8a": {
                    "1": "set_output_value"
                },
                "*param_2 = value": {
                    "1": "write_value_to_target_address"
                }
            }
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_param_000846a4",
            "code": "\nundefined4 process_param_000846a4(int input_param)\n\n{\n  dword offset;\n  undefined4 return_value;\n  int result;\n  \n  offset = elf32_rel_array[140].r_offset;\n  if (input_param != 0) {\n    if ((elf32_rel_array[140].r_offset != 0) &&\n       (*(int *)(elf32_rel_array[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      return_value = FUN_00083adc(offset,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(input_param + 0x2c))(offset,*(undefined4 *)(input_param + 0x1c)), result < 0))\n      {\n        return_value = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          FUN_00083d9c(offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        FUN_00083d9c(offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      FUNC_00083c0c();\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_param_000846a4",
                "param_1": "input_param",
                "Elf32_Rel_ARRAY_20070000": "elf32_rel_array",
                "dVar1": "offset",
                "uVar2": "return_value",
                "iVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000846a4": {
                    "6": "process_parameter",
                    "4": "process_function",
                    "1": "validate_input_and_execute",
                    "2": "check_and_process_data",
                    "8": "process_param"
                },
                "param_1": {
                    "3": "input_value",
                    "5": "param",
                    "1": "value",
                    "11": "input_param"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf32_rel_array"
                },
                "dVar1": {
                    "1": "rel_array_offset",
                    "7": "rel_offset",
                    "17": "offset",
                    "2": "offset_value"
                },
                "uVar2": {
                    "10": "result",
                    "21": "return_value"
                },
                "iVar3": {
                    "1": "execution_result",
                    "3": "return_value",
                    "2": "error_code",
                    "6": "status",
                    "13": "result"
                },
                "FUN_00083d9c": {
                    "1": "clear_resource1",
                    "3": "cleanup_function1",
                    "2": "reset_value"
                },
                "FUN_00083b14": {
                    "3": "cleanup_function2",
                    "4": "perform_action",
                    "1": "execute_function1"
                },
                "FUN_00083adc": {
                    "2": "perform_operation",
                    "1": "process_function",
                    "4": "process_data"
                },
                "FUNC_00083c08": {
                    "1": "cleanup_step1",
                    "4": "cleanup1",
                    "2": "cleanup_function3"
                },
                "FUNC_00083c0c": {
                    "2": "cleanup_function4",
                    "1": "cleanup_action2",
                    "4": "cleanup2"
                },
                "param_2": {
                    "1": "data_ptr"
                }
            }
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "extract_error_code_000846b4",
            "code": "\nvoid extract_error_code_000846b4(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "extract_error_code_000846b4",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000846b4": {
                    "2": "extract_return_value",
                    "1": "extract_information",
                    "3": "find_error_code",
                    "5": "extract_error_code"
                },
                "param_1": {
                    "2": "result_ptr",
                    "1": "result_array",
                    "4": "output_value",
                    "3": "output",
                    "11": "result"
                },
                "param_2": {
                    "8": "input_1",
                    "1": "value1",
                    "2": "input_value1",
                    "3": "arg1",
                    "10": "input1"
                },
                "param_3": {
                    "1": "value2",
                    "9": "input2",
                    "2": "input_param_2",
                    "8": "input_2",
                    "3": "arg2"
                },
                "param_4": {
                    "8": "input_3",
                    "2": "input_value3",
                    "1": "val3",
                    "3": "arg3",
                    "9": "input3"
                },
                "iVar1": {
                    "2": "error",
                    "10": "return_value",
                    "1": "function_result",
                    "14": "result"
                },
                "FUN_000811b4": {
                    "1": "perform_calculation"
                },
                "DAT_200711bc": {
                    "1": "data_value",
                    "3": "error_code"
                }
            }
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "process_data_000846dc",
            "code": "\nvoid process_data_000846dc(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "process_data_000846dc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000846dc": {
                    "2": "extract_value",
                    "4": "process_data",
                    "3": "extract_data",
                    "1": "extract_integer"
                },
                "param_1": {
                    "2": "output_value",
                    "1": "error_pointer",
                    "8": "output",
                    "16": "result"
                },
                "param_2": {
                    "16": "input",
                    "1": "input_data",
                    "11": "input_value",
                    "2": "input_param"
                },
                "iVar1": {
                    "7": "return_value",
                    "1": "retrieved_value",
                    "3": "status",
                    "12": "result"
                },
                "DAT_200711bc": {
                    "1": "error_code"
                },
                "*param_1": {
                    "1": "result"
                },
                "FUN_000811be": {
                    "1": "retrieve_data"
                }
            }
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "process_data_00084700",
            "code": "\nvoid process_data_00084700(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c2(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "process_data_00084700",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084700": {
                    "1": "reverse_and_copy_data",
                    "6": "process_data",
                    "2": "extract_return_value"
                },
                "param_1": {
                    "1": "error_code_ptr",
                    "3": "output_value",
                    "12": "output",
                    "13": "result"
                },
                "param_2": {
                    "1": "param_2",
                    "6": "input_1",
                    "2": "value1",
                    "4": "arg1",
                    "10": "input1"
                },
                "param_3": {
                    "10": "input2",
                    "1": "value_2",
                    "2": "value2",
                    "6": "input_2",
                    "4": "arg2"
                },
                "param_4": {
                    "5": "input_3",
                    "1": "value_3",
                    "2": "value3",
                    "4": "arg3",
                    "10": "input3"
                },
                "iVar1": {
                    "1": "status",
                    "8": "return_value",
                    "2": "error_code",
                    "13": "result"
                },
                "DAT_200711bc": {
                    "1": "temp_result"
                }
            }
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "process_data_00084728",
            "code": "\nvoid process_data_00084728(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "process_data_00084728",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084728": {
                    "1": "update_value_if_needed",
                    "6": "process_data",
                    "4": "extract_error_code"
                },
                "param_1": {
                    "1": "error_code_ptr",
                    "2": "result_ptr",
                    "7": "output",
                    "14": "result"
                },
                "param_2": {
                    "2": "value1",
                    "8": "arg1",
                    "1": "arg2",
                    "13": "input1"
                },
                "param_3": {
                    "1": "input_param_2",
                    "13": "input2",
                    "2": "value2",
                    "8": "arg2"
                },
                "param_4": {
                    "2": "value3",
                    "1": "arg4",
                    "8": "arg3",
                    "13": "input3"
                },
                "iVar1": {
                    "5": "return_value",
                    "1": "result_status",
                    "3": "error_code",
                    "4": "status",
                    "10": "result"
                }
            }
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "process_parameters_00084750",
            "code": "\nint process_parameters_00084750(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "process_parameters_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084750": {
                    "4": "check_parameters",
                    "3": "check_params",
                    "5": "process_parameters",
                    "1": "calculate_result",
                    "2": "perform_operation"
                },
                "param_1": {
                    "6": "input_1",
                    "2": "value1",
                    "1": "first_parameter",
                    "3": "input_param_1",
                    "13": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "input2",
                    "2": "value2",
                    "3": "input_param_2",
                    "6": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "2": "input_param_3",
                    "1": "third_parameter",
                    "10": "input3"
                },
                "param_4": {
                    "1": "arg4",
                    "2": "input_param_4",
                    "4": "input_4",
                    "10": "input4"
                },
                "iVar1": {
                    "24": "result",
                    "2": "return_value"
                },
                "FUN_000847ac": {
                    "1": "perform_subfunction",
                    "2": "perform_calculation"
                },
                "param_5": {
                    "1": "var5"
                }
            }
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint input_value,int value2,undefined4 lower_32_bits,undefined4 upper_32_bits,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_000847e0();\n  product = product * combine_params(upper_32_bits,lower_32_bits);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (value2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value",
                "param_2": "value2",
                "param_5": "result_array",
                "lVar2": "product",
                "uVar1": "result",
                "param_3": "lower_32_bits",
                "param_4": "upper_32_bits",
                "CONCAT44": "combine_params"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008477c": {
                    "2": "subtract_and_update_values",
                    "1": "calculate_difference_and_store",
                    "10": "calculate_difference",
                    "3": "subtract_and_adjust",
                    "4": "subtract_values"
                },
                "param_1": {
                    "1": "input_param",
                    "16": "input_value",
                    "2": "value_1",
                    "4": "initial_value",
                    "3": "value1"
                },
                "param_2": {
                    "1": "param_difference",
                    "2": "value_2",
                    "3": "value2"
                },
                "param_5": {
                    "8": "output_array",
                    "1": "output",
                    "15": "result_array",
                    "3": "result"
                },
                "lVar2": {
                    "2": "result2",
                    "4": "multiplied_value",
                    "1": "result_2",
                    "14": "product",
                    "6": "result"
                },
                "uVar1": {
                    "2": "result1",
                    "5": "converted_result",
                    "1": "result_uint",
                    "8": "result"
                },
                "FUN_000847e0": {
                    "2": "multiply_params"
                },
                "param_3": {
                    "1": "first_param"
                },
                "param_4": {
                    "1": "input4"
                },
                "CONCAT44": {
                    "1": "combine_params"
                }
            }
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_values_000847ac",
            "code": "\nvoid subtract_values_000847ac(uint input_value,int subtract_value,undefined4 param3,undefined4 param4,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_00084a80();\n  product = product * combine_params(param4,param3);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_values_000847ac",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product",
                "param_3": "param3",
                "param_4": "param4",
                "CONCAT44": "combine_params"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000847ac": {
                    "2": "subtract_and_update_params",
                    "1": "subtract_params_and_store",
                    "3": "calculate_difference",
                    "4": "subtract_and_adjust",
                    "5": "subtract_values"
                },
                "param_1": {
                    "1": "input1",
                    "19": "input_value",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "second_param",
                    "3": "param2",
                    "5": "subtract_value",
                    "2": "param_2"
                },
                "param_5": {
                    "8": "output_array",
                    "1": "result_list",
                    "2": "output_values",
                    "16": "result_array"
                },
                "uVar1": {
                    "2": "converted_value",
                    "1": "result_as_uint",
                    "3": "converted_product",
                    "6": "converted_result",
                    "7": "result"
                },
                "lVar2": {
                    "4": "multiplied_value",
                    "1": "result_2",
                    "2": "multiplied_result",
                    "8": "result",
                    "3": "multiplier"
                },
                "param_3": {
                    "1": "first_param",
                    "2": "lower_bits"
                },
                "param_4": {
                    "2": "param4",
                    "1": "negative_value"
                },
                "FUN_00084a80": {
                    "1": "multiply_operands"
                },
                "CONCAT44": {
                    "1": "combine_params"
                }
            }
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_unsigned_integers_000847e0",
            "code": "\nundefined8 divide_unsigned_integers_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong temp_long;\n  uint quotient;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_count;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint temp3;\n  uint temp5;\n  uint divisor_shifted;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_count = LZCOUNT(divisor);\n      if (shift_count != 0) {\n        quotient_high = dividend >> (0x20U - shift_count & 0xff);\n        divisor = divisor << shift_count;\n        dividend = dividend << shift_count;\n        dividend_high = dividend_high << shift_count | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividend_high / quotient;\n      temp1 = (divisor & 0xffff) * temp1;\n      temp3 = dividend >> 0x10 | (dividend_high - quotient * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        carry_flag = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n          quotient_high = temp1 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp2 = (temp3 - temp1) / quotient;\n      temp1 = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((temp3 - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp1 && temp1 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        divisor_shifted = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_count;\n        quotient_high = dividend_high >> (0x20U - shift_count & 0xff);\n        temp1 = divisor >> 0x10;\n        temp3 = quotient_high / temp1;\n        divisor_shifted = divisor & 0xffff;\n        temp1 = divisor_shifted * temp3;\n        temp2 = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        quotient_high = temp2 >> 0x10 | (quotient_high - temp1 * temp3) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient = temp3;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = temp3 - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient = temp3 - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp1) / temp1;\n        temp3 = divisor_shifted * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= temp3 && temp3 - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp3 && temp3 - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - temp3;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / temp1;\n      temp3 = divisor_shifted * quotient;\n      temp2 = dividend >> 0x10 | (dividend_high - temp1 * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= temp3 && temp3 - temp2 != 0) {\n        carry_flag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((carry_flag == false) && (temp2 <= temp3 && temp3 - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - temp3) / temp1;\n      divisor_shifted = divisor_shifted * temp2;\n      temp1 = dividend & 0xffff | ((temp2 - temp3) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= divisor_shifted && divisor_shifted - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= divisor_shifted && divisor_shifted - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_high);\n    if (shift_count == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_count;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      divisor_shifted = divisor >> (quotient_high & 0xff) | divisor_high << shift_count;\n      temp3 = divisor_shifted >> 0x10;\n      quotient = temp1 / temp3;\n      temp2 = (divisor_shifted & 0xffff) * quotient;\n      temp1 = dividend_high << shift_count | dividend >> (quotient_high & 0xff);\n      temp1 = temp1 >> 0x10 | (temp1 - temp3 * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,divisor_shifted);\n        temp1 = temp1 + divisor_shifted;\n        quotient_high = quotient - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          quotient_high = quotient - 2;\n          temp1 = temp1 + divisor_shifted;\n        }\n      }\n      temp2 = (temp1 - temp2) / temp3;\n      temp5 = (divisor_shifted & 0xffff) * temp2;\n      temp1 = temp1 & 0xffff | ((temp1 - temp2) - temp3 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp5 && temp5 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,divisor_shifted);\n        temp1 = temp1 + divisor_shifted;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp5 && temp5 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + divisor_shifted;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      temp_long = (ulonglong)quotient * (ulonglong)(divisor << shift_count);\n      temp1 = (uint)((ulonglong)temp_long >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp5 < temp1) ||\n         ((temp1 - temp5 == temp1 && (dividend << shift_count < (uint)temp_long)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_unsigned_integers_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_dividend_negative",
                "uVar10": "temp3",
                "uVar11": "temp5",
                "uVar12": "divisor_shifted",
                "bVar13": "carry_flag",
                "iVar6": "shift_count",
                "lVar1": "temp_long"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000847e0": {
                    "1": "divide_with_carry",
                    "7": "divide_unsigned_integers",
                    "2": "perform_division",
                    "5": "division_with_remainder",
                    "6": "divide_with_remainder"
                },
                "param_1": {
                    "31": "dividend"
                },
                "param_2": {
                    "1": "dividend_remainder",
                    "5": "dividend_upper",
                    "3": "divisor",
                    "15": "dividend_high",
                    "2": "dividend_sign"
                },
                "param_3": {
                    "1": "divisor_lower",
                    "24": "divisor",
                    "4": "quotient"
                },
                "param_4": {
                    "1": "quotient",
                    "14": "divisor_high",
                    "3": "remainder",
                    "5": "divisor_upper",
                    "2": "divisor_sign"
                },
                "uVar2": {
                    "1": "quotient_high",
                    "4": "quotient_lower",
                    "7": "quotient_low",
                    "10": "quotient"
                },
                "uVar3": {
                    "4": "quotient_upper",
                    "1": "quotient",
                    "6": "remainder",
                    "11": "quotient_high"
                },
                "uVar4": {
                    "1": "divisor_part",
                    "2": "divisor_low",
                    "4": "temp1"
                },
                "uVar5": {
                    "1": "u_divisor_remainder",
                    "2": "remainder_high",
                    "5": "temp2"
                },
                "uVar7": {
                    "2": "remainder_low",
                    "1": "partial_product",
                    "6": "temp1",
                    "3": "temp3"
                },
                "uVar8": {
                    "1": "quotient1_high",
                    "2": "temp3",
                    "7": "temp2",
                    "3": "temp4"
                },
                "uVar9": {
                    "10": "is_dividend_negative",
                    "1": "dividend_sign_flag",
                    "2": "u_var9",
                    "3": "dividend_sign",
                    "6": "is_negative_dividend"
                },
                "uVar10": {
                    "1": "quotient_low_temp",
                    "2": "temp4"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "quotient2",
                    "4": "temp5"
                },
                "uVar12": {
                    "1": "divisor2_high",
                    "3": "u_var12",
                    "2": "tmp6"
                },
                "bVar13": {
                    "1": "is_negative_dividend",
                    "2": "is_borrow",
                    "3": "carry",
                    "9": "carry_flag"
                },
                "iVar6": {
                    "1": "bit_count",
                    "5": "shift_amount",
                    "9": "shift_count",
                    "7": "shift"
                },
                "uVar13": {
                    "1": "is_negative_divisor"
                },
                "uVar14": {
                    "1": "quotient_low"
                },
                "lVar1": {
                    "2": "quotient",
                    "1": "quotient_product",
                    "3": "temp",
                    "4": "temp_long"
                },
                "uVar15": {
                    "1": "remainder_low"
                },
                "uVar16": {
                    "1": "quotient_high"
                },
                "uVar6": {
                    "1": "temp3"
                }
            }
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_quotient_00084a80",
            "code": "\nulonglong calculate_quotient_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint quotient1;\n  uint quotient_high;\n  uint temp1;\n  uint partial_dividend;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp2;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient_high = quotient >> 0x10;\n        partial_dividend = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp3 = divisor >> (0x20U - shift_count & 0xff);\n        quotient_high = quotient >> 0x10;\n        temp2 = temp3 / quotient_high;\n        partial_dividend = quotient & 0xffff;\n        quotient1 = partial_dividend * temp2;\n        temp1 = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        temp1 = temp1 >> 0x10 | (temp3 - quotient_high * temp2) * 0x10000;\n        dividend = dividend << shift_count;\n        temp3 = temp2;\n        if (temp1 <= quotient1 && quotient1 - temp1 != 0) {\n          carry_flag = CARRY4(temp1,quotient);\n          temp1 = temp1 + quotient;\n          temp3 = temp2 - 1;\n          if ((carry_flag == false) && (temp1 <= quotient1 && quotient1 - temp1 != 0)) {\n            temp3 = temp2 - 2;\n            temp1 = temp1 + quotient;\n          }\n        }\n        temp2 = (temp1 - quotient1) / quotient_high;\n        temp2 = partial_dividend * temp2;\n        divisor = temp1 & 0xffff | ((temp1 - quotient1) - quotient_high * temp2) * 0x10000;\n        quotient1 = temp2;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = temp2 - 1;\n          if ((carry_flag == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            quotient1 = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        quotient1 = quotient1 | temp3 << 0x10;\n      }\n      temp2 = divisor / quotient_high;\n      temp1 = partial_dividend * temp2;\n      temp1 = dividend >> 0x10 | (divisor - quotient_high * temp2) * 0x10000;\n      temp3 = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        temp3 = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp1 && temp1 - temp1 != 0)) {\n          temp3 = temp2 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      temp2 = (temp1 - temp1) / quotient_high;\n      partial_dividend = partial_dividend * temp2;\n      temp1 = dividend & 0xffff | ((temp1 - temp1) - quotient_high * temp2) * 0x10000;\n      quotient_high = temp2;\n      if (temp1 <= partial_dividend && partial_dividend - temp1 != 0) {\n        quotient_high = temp2 - 1;\n        if ((CARRY4(temp1,quotient) == false) &&\n           (temp1 + quotient <= partial_dividend && partial_dividend - (temp1 + quotient) != 0)) {\n          quotient_high = temp2 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient_high | temp3 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      temp3 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp3 | divisor << shift_count;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient_high = divisor / quotient1;\n    partial_dividend = (quotient & 0xffff) * quotient_high;\n    temp2 = dividend >> 0x10 | (divisor - quotient1 * quotient_high) * 0x10000;\n    temp3 = quotient_high;\n    if (temp2 <= partial_dividend && partial_dividend - temp2 != 0) {\n      carry_flag = CARRY4(temp2,quotient);\n      temp2 = temp2 + quotient;\n      temp3 = quotient_high - 1;\n      if ((carry_flag == false) && (temp2 <= partial_dividend && partial_dividend - temp2 != 0)) {\n        temp3 = quotient_high - 2;\n        temp2 = temp2 + quotient;\n      }\n    }\n    temp1 = (temp2 - partial_dividend) / quotient1;\n    quotient_high = (quotient & 0xffff) * temp1;\n    partial_dividend = dividend & 0xffff | ((temp2 - partial_dividend) - quotient1 * temp1) * 0x10000;\n    quotient1 = temp1;\n    if (partial_dividend <= quotient_high && quotient_high - partial_dividend != 0) {\n      quotient1 = temp1 - 1;\n      if ((CARRY4(partial_dividend,quotient) == false) &&\n         (partial_dividend + quotient <= quotient_high && quotient_high - (partial_dividend + quotient) != 0)) {\n        quotient1 = temp1 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp3 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift_count;\n      temp3 = divisor >> (quotient1 & 0xff);\n      quotient_high = remainder << shift_count | quotient >> (quotient1 & 0xff);\n      partial_dividend = quotient_high >> 0x10;\n      temp1 = temp3 / partial_dividend;\n      temp2 = (quotient_high & 0xffff) * temp1;\n      temp1 = dividend >> (quotient1 & 0xff) | divisor << shift_count;\n      quotient1 = temp1 >> 0x10 | (temp3 - partial_dividend * temp1) * 0x10000;\n      temp3 = temp1;\n      if (quotient1 <= temp2 && temp2 - quotient1 != 0) {\n        carry_flag = CARRY4(quotient1,quotient_high);\n        quotient1 = quotient1 + quotient_high;\n        temp3 = temp1 - 1;\n        if ((carry_flag == false) && (quotient1 <= temp2 && temp2 - quotient1 != 0)) {\n          temp3 = temp1 - 2;\n          quotient1 = quotient1 + quotient_high;\n        }\n      }\n      temp1 = (quotient1 - temp2) / partial_dividend;\n      temp2 = (quotient_high & 0xffff) * temp1;\n      partial_dividend = temp1 & 0xffff | ((quotient1 - temp2) - partial_dividend * temp1) * 0x10000;\n      quotient1 = temp1;\n      if (partial_dividend <= temp2 && temp2 - partial_dividend != 0) {\n        carry_flag = CARRY4(partial_dividend,quotient_high);\n        partial_dividend = partial_dividend + quotient_high;\n        quotient1 = temp1 - 1;\n        if ((carry_flag == false) && (partial_dividend <= temp2 && temp2 - partial_dividend != 0)) {\n          quotient1 = temp1 - 2;\n          partial_dividend = partial_dividend + quotient_high;\n        }\n      }\n      quotient1 = quotient1 | temp3 << 0x10;\n      temp = (ulonglong)quotient1 * (ulonglong)(quotient << shift_count);\n      temp3 = (uint)((ulonglong)temp >> 0x20);\n      if ((partial_dividend - temp2 < temp3) || ((partial_dividend - temp2 == temp3 && (dividend << shift_count < (uint)temp)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_quotient_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "quotient1",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "partial_dividend",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp2",
                "iVar10": "shift_count",
                "bVar11": "carry_flag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084a80": {
                    "1": "division_algorithm",
                    "2": "perform_division",
                    "3": "calculate_quotient_and_remainder",
                    "9": "calculate_quotient"
                },
                "param_1": {
                    "1": "input1",
                    "30": "dividend"
                },
                "param_2": {
                    "1": "dividend_upper32",
                    "2": "dividend_low",
                    "20": "divisor",
                    "3": "dividend_high"
                },
                "param_3": {
                    "1": "quotient_1",
                    "2": "temp1",
                    "9": "divisor",
                    "16": "quotient"
                },
                "param_4": {
                    "1": "divisor_upper32",
                    "2": "temp2",
                    "3": "divisor_high",
                    "16": "remainder"
                },
                "lVar1": {
                    "2": "product",
                    "1": "combined_quotient"
                },
                "uVar2": {
                    "1": "result",
                    "4": "quotient",
                    "2": "temp1"
                },
                "uVar3": {
                    "2": "temp2",
                    "1": "quotient_low",
                    "3": "quotient2"
                },
                "uVar4": {
                    "1": "temp4",
                    "2": "temp3",
                    "3": "temp1"
                },
                "uVar5": {
                    "1": "temp3",
                    "2": "temp4"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "temp3",
                    "4": "temp1"
                },
                "uVar7": {
                    "1": "quotient_low",
                    "2": "temp4",
                    "3": "temp2"
                },
                "uVar8": {
                    "1": "quotient_low",
                    "3": "temp3",
                    "2": "temp7"
                },
                "uVar9": {
                    "1": "dividend_bit_3",
                    "2": "temp4",
                    "4": "temp2"
                },
                "iVar10": {
                    "1": "shift",
                    "2": "bit_shift",
                    "8": "shift_amount",
                    "12": "shift_count"
                },
                "bVar11": {
                    "1": "has_carry",
                    "5": "carry",
                    "18": "carry_flag"
                },
                "uVar11": {
                    "1": "carry",
                    "2": "carry_flag"
                },
                "uVar12": {
                    "1": "remainder_high"
                },
                "uVar13": {
                    "1": "quotient_high"
                },
                "uVar14": {
                    "1": "product_high_temp"
                },
                "uVar15": {
                    "1": "divisor_low"
                },
                "uVar16": {
                    "1": "divisor_high_temp"
                }
            }
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 468170,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}