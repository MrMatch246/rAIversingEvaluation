{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "main_loop_000816a8",
                "FUN_000816d4": "initialize_network",
                "FUN_00080ae4": "initialize_gpio",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "set_leds",
                "FUN_000804a8": "initialize_uart",
                "FUNC_000805d0": "check_network_status",
                "DAT_000816d0": "network_status",
                "FUN_00080ce0": "handle_network_request"
            },
            "code": "void main_loop_000816a8()\n{\n  initialize_network();\n  initialize_gpio();\n  do_nothing();\n  set_leds(1);\n  initialize_uart();\n  do {\n    do {\n      check_DAT_000816d0();\n    } while (DAT_000816d0 == 0);\n    handle_network_request();\n  } while(true);\n}",
            "called": [
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_00080ce0",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "main_loop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "update_parameters_00081042",
                "param_1": "base_address",
                "param_2": "mask_value",
                "param_3": "data_value",
                "param_4": "shift_value",
                "PTR_": "ptr",
                "DAT_": "uint32_t"
            },
            "code": "void update_parameters_00081042(int base_address, DAT_ mask_value, DAT_ data_value, DAT_ shift_value){\n  DAT_ *PTR_ = (DAT_ *)(base_address + 4);\n  *PTR_ = (*PTR_ & ~mask_value) | (data_value & mask_value) << shift_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_parameters_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "piVar1": "ptr_1",
                "iVar2": "result",
                "piVar3": "ptr_2",
                "uVar4": "count_1",
                "puVar5": "ptr_3",
                "uVar6": "count_2",
                "uVar7": "data_size"
            },
            "code": "int process_data_00082ac0(undefined4 input_1, int input_2, int **input_3) {\n  int *ptr_1 = *input_3;\n  int *ptr_2 = input_3[2];\n  uint count_1, count_2;\n  uint data_size;\n  undefined4 *ptr_3;\n  int result;\n  uint i;\n  \n  data_size = *(int *)(input_2 + 100) << 0x12;\n  if (data_size >= 0) {\n    result = FUNC_00083f34();\n    input_3[2] = NULL;\n    input_3[1] = NULL;\n    return result;\n  }\n  while (ptr_2 != NULL) {\n    count_1 = ptr_1[1];\n    count_2 = count_1 >> 2;\n    if (count_2 != 0) {\n      ptr_3 = (undefined4 *)(*ptr_1 + -4);\n      i = 0;\n      do {\n        ptr_3++;\n        result = process_item(input_1, *ptr_3, input_2);\n        i++;\n        if (result == -1) {\n          input_3[2] = NULL;\n          input_3[1] = NULL;\n          return -1;\n        }\n      } while (count_2 != i);\n      ptr_2 = input_3[2];\n    }\n    ptr_2 = (int *)((int)ptr_2 - (count_1 & 0xfffffffc));\n    input_3[2] = ptr_2;\n    ptr_1 += 2;\n  }\n  input_3[2] = NULL;\n  input_3[1] = NULL;\n  return 0;\n}",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "process_data_from_pointers_00080ce0",
                "iVar1": "result",
                "PTR_DAT_00080d14": "pointer_1",
                "PTR_DAT_00080d18": "pointer_2",
                "PTR_DAT_00080d1c": "pointer_3",
                "PTR_DAT_00080d20": "pointer_4"
            },
            "code": "void process_data_from_pointers_00080ce0(void)\n{\n    int result;\n    result = check_pointer(PTR_DAT_00080d14);\n    if (result != 0) {\n        do_nothing_00080aa8();\n    }\n    result = check_pointer(PTR_DAT_00080d18);\n    if (result != 0) {\n        do_nothing_00080ab8();\n    }\n    result = check_pointer(PTR_DAT_00080d1c);\n    if (result != 0) {\n        do_nothing_00080aba();\n    }\n    result = check_pointer(PTR_DAT_00080d20);\n    if (result != 0) {\n        do_nothing_00080abc();\n    }\n    return;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_000813e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "process_data_from_pointers_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_array_00081682",
                "param_1": "array",
                "param_2": "array_length",
                "uVar1": "random_number",
                "FUN_00082a50": "generate_random_number",
                "FUN_0008165c": "assign_random_number"
            },
            "code": "int* initialize_array_00081682(int* array, int array_length) {\n  int* array_ptr = array;\n  *array_ptr = 0;\n  *(array_ptr + 1) = 0;\n  *(array_ptr + 2) = 0;\n  if (array_length != 0) {\n    int* random_number = generate_random_number(array_length);\n    assign_random_number(array_ptr, array_length, random_number);\n  }\n  return array_ptr;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_array_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "run_function_000815fe",
                "*param_1": "*ptr_param_1",
                "FUN_00081e04": "call_another_function",
                "param_1": "ptr_param_1"
            },
            "code": "undefined4 run_function_000815fe(undefined4 *ptr_param_1)\n{\n  call_another_function(*ptr_param_1);\n  return ptr_param_1;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "run_function_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "calculate_shifted_value_00081d1c",
                "param_1": "value_to_shift",
                "uVar1": "shift_amount",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint calculate_shifted_value_00081d1c(uint value_to_shift)\n{\n  uint shifted_value;\n  \n  if (((value_to_shift & 0x80000000) != 0) || (value_to_shift << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = 0x9e - ((value_to_shift << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    shifted_value = (value_to_shift << 8 | 0x80000000) >> (shift_amount & 0xff);\n    return shifted_value;\n  }\n  if ((shift_amount == 0xffffff9f) && ((value_to_shift & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "result_array",
                "lVar2": "product",
                "uVar1": "difference",
                "shift_amount": "shift_amount",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void calculate_difference_000847ac(uint first_value, int second_value, uint32_t param_3, uint32_t param_4, int *result_array)\n{\n  uint product = FUNC_00084a80() * CONCAT44(param_4, param_3);\n  uint difference = first_value - product;\n  uint shift_amount = (uint)(product >> 0x20);\n  uint second_difference = second_value - shift_amount - (first_value < product);\n  result_array[0] = difference;\n  result_array[1] = second_difference;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "global_flag",
                "PTR_DAT_0008013c": "global_ptr",
                "DAT_00080140": "global_func_ptr",
                "DAT_00080144": "global_code_ptr"
            },
            "code": "void execute_function_if_not_null_00080118(int param1, char* param2, int param3, int param4)\n{\n  if (DAT_00080134 != 0) {\n    param2 = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "is_CY_false_or_ZR_true_00081c94",
                "in_CY": "CY_false",
                "in_ZR": "ZR_true",
                "FUN_00081c5c": "check_CY",
                "bool": "bool",
                "undefined": "undefined"
            },
            "code": "bool is_CY_false_or_ZR_true_00081c94(void)\n{\n  bool CY_false = !check_CY();\n  bool ZR_true = check_ZR();\n  return CY_false || ZR_true;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "is_CY_false_or_ZR_true_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "init_data_structures_00083b14",
                "param_1": "struct_ptr",
                "data1": "data_structure_1",
                "data2": "data_structure_2",
                "data3": "data_structure_3",
                "ptr1": "pointer_1",
                "ptr2": "pointer_2",
                "ptr3": "pointer_3",
                "val1": "value_1"
            },
            "code": "void init_data_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    int *data1 = *(int **)(param_1 + 4);\n    int *data2 = *(int **)(param_1 + 8);\n    int *data3 = *(int **)(param_1 + 0xc);\n    int *ptr1 = PTR_LAB_00083b08_1_00083bf4;\n    int *ptr2 = PTR_FUN_0008449c_1_00083c00;\n    int *ptr3 = PTR_LAB_000844bc_1_00083c04;\n    int val1 = DAT_00083bfc;\n    data1[0] = 0;\n    data1[1] = 0;\n    data1[2] = 0;\n    data1[3] = data1;\n    data1[4] = 0;\n    data1[5] = 0;\n    data1[6] = 0;\n    data1[7] = data1;\n    data1[8] = ptr1;\n    data1[9] = val1;\n    data1[10] = ptr2;\n    data1[11] = ptr3;\n    data1[12] = data2;\n    data1[13] = data3;\n    data1[14] = 0;\n    data1[15] = 0;\n    data1[16] = 0;\n    data1[17] = 0;\n    data1[18] = 0;\n    data1[19] = 0;\n    data2[0] = 0;\n    data2[1] = 0;\n    data2[2] = 0;\n    data2[3] = data2;\n    data2[4] = 0;\n    data2[5] = 0;\n    data2[6] = 0;\n    data2[7] = data2;\n    data2[8] = ptr1;\n    data2[9] = val1;\n    data2[10] = ptr2;\n    data2[11] = ptr3;\n    data2[12] = data1;\n    data2[13] = data3;\n    data2[14] = 0;\n    data2[15] = 0;\n    data2[16] = 0;\n    data2[17] = 0;\n    data2[18] = 0;\n    data2[19] = 0;\n    data3[0] = 0;\n    data3[1] = 0;\n    data3[2] = 0;\n    data3[3] = data3;\n    data3[4] = 0;\n    data3[5] = 0;\n    data3[6] = 0;\n    data3[7] = data3;\n    data3[8] = ptr1;\n    data3[9] = val1;\n    data3[10] = ptr2;\n    data3[11] = ptr3;\n    data3[12] = data1;\n    data3[13] = data2;\n    data3[14] = 0;\n    data3[15] = 0;\n    data3[16] = 0;\n    data3[17] = 0;\n    data3[18] = 0;\n    data3[19] = 0;\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "imported": false,
            "current_name": "init_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "check_and_update_000842a4",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "flags",
                "iVar2": "result",
                "iVar3": "check_result",
                "uVar4": "flag_bits",
                "bVar5": "has_flag",
                "auStack_54": "stack_var",
                "local_50": "local_var"
            },
            "code": "void check_and_update_000842a4(int input, int *output)\n{\n  ushort flags = *(ushort *)(output + 3);\n  uint flag_bits = (uint)flags;\n  bool has_flag = false;\n  undefined stack_var[4];\n  uint local_var;\n  \n  if ((int)(flag_bits << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  \n  if (-1 < *(short *)((int)output + 0xe)) {\n    int result = process_data(input,(int)*(short *)((int)output + 0xe),stack_var);\n    if (-1 < result) {\n      bool is_2000 = (local_var & 0xf000) == 0x2000;\n      if (((local_var & 0xf000) == 0x8000) && ((undefined *)output[10] == PTR_FUN_0008449c_1_00084380)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    flags = *(ushort *)(output + 3);\n    flag_bits = (uint)flags;\n  }\n  \n  *(ushort *)(output + 3) = flags | 0x800;\n  if ((flag_bits & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  has_flag = false;\n  \nLAB_00084300:\n  int check_result = check_data(input,result);\n  flags = *(ushort *)(output + 3);\n  if (check_result == 0) {\n    if (-1 < (int)((uint)flags << 0x16)) {\n      *(ushort *)(output + 3) = flags | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n    *(ushort *)(output + 3) = flags | 0x80;\n    *output = check_result;\n    output[4] = check_result;\n    output[5] = result;\n    if ((is_2000) && (check_result = process_data(input,(int)*(short *)((int)output + 0xe)), check_result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "check_and_update_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data_ptr",
                "DAT_000846b0": "PTR_DATA_HEADER",
                "iVar3": "data_header",
                "FUN_00083b14": "initialize_data_header",
                "short": "short",
                "code": "code",
                "FUN_00083adc": "process_data_helper",
                "iVar2": "result",
                "ushort": "ushort",
                "FUN_00083d9c": "cleanup_data",
                "do_nothing_00083c08": "do_nothing_00083c08",
                "do_nothing_00083c0c": "do_nothing_00083c0c",
                "0xffffffff": "-1",
                "0xc": "DATA_PTR_FLAG_OFFSET",
                "0x38": "DATA_HEADER_FLAG_OFFSET",
                "0x2c": "DATA_PTR_FUNC_OFFSET",
                "0x1c": "DATA_PTR_PARAM_OFFSET",
                "0x10": "DATA_PTR_CLEANUP_OFFSET",
                "0x30": "DATA_PTR_CHILD_OFFSET",
                "0x40": "DATA_PTR_CHILD_SIZE",
                "0x44": "DATA_PTR_EXTRA_OFFSET"
            },
            "code": "int process_data_000846a4(int data_ptr)\n{\n  int data_header = *DAT_000846b0;\n  if (data_ptr != 0) {\n    if ((data_header != 0) && (*(int *)(data_header + DATA_HEADER_FLAG_OFFSET) == 0)) {\n      initialize_data_header();\n    }\n    if (*(short *)(data_ptr + DATA_PTR_FLAG_OFFSET) != 0) {\n      int result = process_data_000846a4_helper(data_header, data_ptr);\n      if ((*(code **)(data_ptr + DATA_PTR_FUNC_OFFSET) != (code *)0x0) &&\n         (result = (**(code **)(data_ptr + DATA_PTR_FUNC_OFFSET))(data_header,*(undefined4 *)(data_ptr + DATA_PTR_PARAM_OFFSET)), result < 0))\n      {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(data_ptr + DATA_PTR_SIZE_OFFSET) << 0x18) < 0) {\n        cleanup_data(data_header,*(undefined4 *)(data_ptr + DATA_PTR_CLEANUP_OFFSET));\n      }\n      if (*(int *)(data_ptr + DATA_PTR_CHILD_OFFSET) != 0) {\n        if (*(int *)(data_ptr + DATA_PTR_CHILD_OFFSET) != data_ptr + DATA_PTR_CHILD_SIZE) {\n          cleanup_data(data_header);\n        }\n        *(undefined4 *)(data_ptr + DATA_PTR_CHILD_OFFSET) = 0;\n      }\n      if (*(int *)(data_ptr + DATA_PTR_EXTRA_OFFSET) != 0) {\n        cleanup_data(data_header);\n        *(undefined4 *)(data_ptr + DATA_PTR_EXTRA_OFFSET) = 0;\n      }\n      do_nothing_00083c08();\n      *(undefined2 *)(data_ptr + DATA_PTR_FLAG_OFFSET) = 0;\n      do_nothing_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083c08",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_memory_00080f24",
                "puVar1": "destination",
                "puVar2": "source",
                "iVar3": "i",
                "puVar4": "pointer",
                "PTR_Elf32_Rel_ARRAY_00080f80": "destination",
                "DAT_00080f7c": "source",
                "PTR_DAT_00080f84": "pointer",
                "PTR_DAT_00080f88": "end_pointer",
                "DAT_00080f94": "memory_attribute",
                "PTR_DAT_00080f90": "address",
                "DAT_00080f98": "function_pointer"
            },
            "code": "void initialize_memory_00080f24(void)\n{\n    // Copy data from DAT_00080f7c to PTR_Elf32_Rel_ARRAY_00080f80\n    uint8_t *DAT_00080f7c = DAT_00080f7c;\n    uint8_t *PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n    uint32_t length = PTR_DAT_00080f88 - PTR_Elf32_Rel_ARRAY_00080f80;\n    if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80)\n    {\n        for (uint32_t i = 0; i < length; i += 4)\n        {\n            *(uint32_t *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(uint32_t *)(DAT_00080f7c + i);\n        }\n    }\n\n    // Clear PTR_DAT_00080f84 to DAT_00080f8c\n    uint32_t *PTR_DAT_00080f84 = (uint32_t *)PTR_DAT_00080f84;\n    uint32_t *PTR_DAT_00080f88 = (uint32_t *)DAT_00080f8c;\n    while (PTR_DAT_00080f84 < PTR_DAT_00080f88)\n    {\n        *PTR_DAT_00080f84 = 0;\n        PTR_DAT_00080f84++;\n    }\n\n    // Set the memory attribute of PTR_DAT_00080f90\n    uint8_t *PTR_DAT_00080f90 = PTR_DAT_00080f90 + 0x80000000;\n    uint32_t *DAT_00080f94 = (uint32_t *)DAT_00080f94;\n    *DAT_00080f94 = ((uint32_t)PTR_DAT_00080f90 & 0x1fffff80) | 0x08;\n    if (PTR_DAT_00080f90 < (uint8_t *)0x100000)\n    {\n        *DAT_00080f94 |= 0x20000000;\n    }\n\n    // Call the function at DAT_00080f98\n    ((void (*)(void))DAT_00080f98)();\n\n    // Infinite loop\n    while (true)\n    {\n    }\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_flag_00080e04",
                "param_1": "flag_address",
                "param_2": "flag_value",
                "uVar1": "flag_result"
            },
            "code": "uint check_flag_00080e04(int flag_address, uint flag_value)\n{\n  uint flag_result;\n  flag_result = *(uint *)(flag_address + 8) & flag_value;\n  if (flag_result != 0) {\n    if ((flag_value & *(uint *)(flag_address + 0x18)) == 0) {\n      flag_result = 0;\n    }\n    else {\n      flag_result = 1;\n    }\n  }\n  return flag_result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_flag_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "set_up_device_000804a8",
                "puVar1": "device_info",
                "puVar2": "device_properties",
                "puVar3": "device_properties_2",
                "puVar4": "PTR_DAT_000805b4",
                "uVar5": "device_id",
                "iVar6": "time"
            },
            "code": "undefined8 set_up_device_000804a8(void)\n{\n  initialize_device(1, 0);\n  initialize_device(6, 1);\n  initialize_device(0, 1);\n  initialize_device(1, 1);\n  set_device_property(0, 0);\n  set_device_property(1, 0);\n  undefined *device_info = PTR_DAT_000805a8;\n  undefined *device_properties = PTR_DAT_000805ac;\n  *(undefined2 *)(device_info + 0xe) = 0x13;\n  *(undefined2 *)(device_info + 0x10) = 10;\n  *(undefined **)(device_info + 0x14) = device_properties + 0x26;\n  device_info[1] = 3;\n  device_info[0x19] = 3;\n  *(undefined2 *)(device_info + 0x1a) = 0x14;\n  *(undefined2 *)(device_info + 0x28) = 3;\n  *(undefined2 *)(device_info + 4) = 0x10;\n  *(undefined **)(device_info + 8) = device_properties;\n  device_info[0xd] = 0x10;\n  *(undefined2 *)(device_info + 0x1c) = 0xc;\n  device_info[0x25] = 0x10;\n  *(undefined2 *)(device_info + 0x34) = 8;\n  undefined *device_properties_2 = PTR_DAT_000805b0;\n  *(undefined2 *)(device_info + 0x26) = 0x1c;\n  *(undefined **)(device_info + 0x2c) = device_properties + 0x38;\n  device_info[0x30] = 2;\n  device_info[0x31] = 2;\n  *(undefined **)(device_info + 0x38) = device_properties_2;\n  device_info[0x3c] = 2;\n  *device_info = 1;\n  device_info[0xc] = 1;\n  device_info[0x18] = 1;\n  device_info[0x24] = 1;\n  *(undefined2 *)(device_info + 0x3e) = 1;\n  *(undefined2 *)(device_info + 0x40) = 1;\n  *(undefined2 *)(device_info + 2) = 0;\n  *(undefined **)(device_info + 0x20) = device_properties + 0x28;\n  *(undefined2 *)(device_info + 0x32) = 0;\n  device_info[0x3d] = 5;\n  *(undefined **)(device_info + 0x44) = device_properties_2 + 2;\n  FUN_00080164(PTR_DAT_000805b4, 0x4b00);\n  *(undefined2 *)(PTR_DAT_000805b4 + 0x56) = 2000;\n  undefined4 device_id = thunk_FUNC_00081714();\n  *(undefined4 *)PTR_DAT_000805b8 = device_id;\n  int time_1 = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805bc = time_1 + 1000;\n  int time_2 = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805c0 = time_2 + 1000;\n  int time_3 = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805c4 = time_3 + 1000;\n  int time_4 = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805c8 = time_4 + 1000;\n  *PTR_DAT_000805cc = 0;\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_up_device_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_input_000802da",
                "param_1": "input_addr",
                "param_2": "input_len",
                "param_3": "input_data",
                "cVar1": "error_code",
                "bVar2": "byte_val",
                "uVar3": "undefined_val",
                "uVar4": "ushort_val",
                "uVar5": "uint_val",
                "puVar6": "ushort_ptr",
                "local_1c": "local_char",
                "local_1b": "local_undefined",
                "local_1a": "local_ushort"
            },
            "code": "int validate_input_000802da(int input_addr, ushort input_len, ushort *input_data) {\n    char error_code;\n    byte byte_val;\n    undefined undefined_val;\n    ushort ushort_val;\n    uint uint_val;\n    ushort *ushort_ptr;\n    char local_char;\n    undefined local_undefined;\n    ushort local_ushort;\n\n    uint_val = (uint)input_len;\n    if (*(char *)(input_addr + 4) != '\\0') {\n        error_code = -2;\n        goto LAB_000803cc;\n    }\n    if (*(char *)(input_addr + 7) != '\\0') {\n        error_code = -1;\n        goto LAB_000803cc;\n    }\n    if (0xf6 < (byte)(local_char - 1U)) {\n        error_code = -3;\n        goto LAB_000803cc;\n    }\n    *(char *)(input_addr + 9) = local_char;\n    *(undefined *)(input_addr + 10) = local_undefined;\n    *(ushort **)(input_addr + 0x4c) = input_data;\n    *(char *)(input_addr + 0xb) = (char)((uint)local_ushort >> 8);\n    *(char *)(input_addr + 0xc) = (char)local_ushort;\n    error_code = (char)input_len;\n    undefined_val = (undefined)(uint_val >> 8);\n    switch(local_undefined) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(undefined *)(input_addr + 0xd) = undefined_val;\n            break;\n        case 5:\n            ushort_val = *input_data;\n            if (ushort_val != 0) {\n                ushort_val = 1;\n            }\n            *(char *)(input_addr + 0xd) = -(char)ushort_val;\n            uint_val = 0;\n            break;\n        case 6:\n            *(char *)(input_addr + 0xd) = (char)((uint)*input_data >> 8);\n            uint_val = (uint)*input_data;\n            break;\n        default:\n            goto switchD_0008031e_caseD_7;\n        case 0xf:\n            byte_val = (byte)(input_len >> 3) & 0xfe;\n            if ((input_len & 0xf) != 0) {\n                byte_val = byte_val + 1;\n            }\n            *(char *)(input_addr + 0xe) = error_code;\n            *(undefined *)(input_addr + 0xd) = undefined_val;\n            *(byte *)(input_addr + 0xf) = byte_val;\n            undefined_val = 7;\n            goto LAB_0008034a;\n        case 0x10:\n            *(undefined *)(input_addr + 0xd) = undefined_val;\n            *(char *)(input_addr + 0xe) = error_code;\n            input_data = input_data + -1;\n            *(char *)(input_addr + 0xf) = error_code * '\\x02';\n            *(undefined *)(input_addr + 0x49) = 7;\n            ushort_ptr = input_data + uint_val;\n            while (input_data != ushort_ptr) {\n                byte_val = *(byte *)(input_addr + 0x49);\n                *(char *)(input_addr + (uint)byte_val + 9) = (char)((uint)input_data[1] >> 8);\n                uint_val = byte_val + 1 & 0xff;\n                *(char *)(input_addr + 0x49) = (char)uint_val;\n                input_data = input_data + 1;\n                *(char *)(uint_val + input_addr + 9) = (char)*input_data;\n                *(byte *)(input_addr + 0x49) = byte_val + 2;\n            }\n            goto switchD_0008031e_caseD_7;\n    }\n    *(char *)(input_addr + 0xe) = (char)uint_val;\n    undefined_val = 6;\nLAB_0008034a:\n    *(undefined *)(input_addr + 0x49) = undefined_val;\n    validate_helper(input_addr);\n    *(undefined *)(input_addr + 7) = 1;\n    error_code = '\\0';\nLAB_000803cc:\n    return (int)error_code;\n}\n",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_input_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_value_at_index_00080f9c",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "multiplier",
                "local_58": "local_array",
                "uVar1": "quotient",
                "uVar2": "i"
            },
            "code": "uint32_t find_value_at_index_00080f9c(uint32_t *output_array, uint32_t input_value, int divisor, int multiplier) {\n    uint32_t local_array[16] = {\n        *(uint32_t *)PTR_DAT_0008102c,\n        *(uint32_t *)(PTR_DAT_0008102c + 4),\n        *(uint32_t *)(PTR_DAT_0008102c + 8),\n        *(uint32_t *)(PTR_DAT_0008102c + 0xc),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x10),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x14),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x18),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x1c),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x20),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x24),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x28),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x2c),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x30),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x34),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x38),\n        *(uint32_t *)(PTR_DAT_0008102c + 0x3c)\n    };\n    output_array[0] = 1;\n    output_array[1] = 0;\n    output_array[0x48] = 0x202;\n    output_array[0x41] = 0;\n    output_array[0x45] = 0;\n    uint32_t quotient = input_value / (uint32_t)(divisor * 2);\n    if (input_value == divisor * 2 * quotient) {\n        quotient--;\n    }\n    for (int i = 0; i < 16; i++) {\n        if ((uint32_t)(multiplier * (int)(((uint64_t)input_value / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_array[i]) {\n            output_array[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n            return 0;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "data_index",
                "param_2": "operation_type",
                "puVar1": "data_ptr",
                "puVar2": "type_ptr",
                "iVar3": "result",
                "iVar9": "data_offset",
                "iVar10": "data_address",
                "uVar4": "data_length",
                "uVar5": "data_size",
                "uVar6": "bit_result",
                "bVar7": "type",
                "bVar8": "type_byte"
            },
            "code": "int process_data_00081210(int data_index, int operation_type) {\\n  undefined *data_ptr = PTR_DAT_0008130c;\\n  undefined *type_ptr = PTR_DAT_00081310;\\n  int result = data_index;\\n  if (data_ptr[data_index * 0x1c + 0xc] != \"\\0\") {\\n    if ((type_ptr[data_index] & 0xf) == 4) {\\n      result = FUN_0008105c(DAT_00081314, data_ptr[data_index * 0x1c + 0x19]);\\n    }\\n    byte type = type_ptr[data_index] & 0xf;\\n    if ((type < 3) && (type_ptr[data_index] != 0)) {\\n      if (type == 2) {\\n        if (operation_type == 0) {\\n          return result;\\n        }\\n      }\\n      else if (type == 1) {\\n        if (operation_type == 2) {\\n          return result;\\n        }\\n      }\\n      else if (type == 3) {\\n        if (operation_type == 1) {\\n          return result;\\n        }\\n        goto LAB_0008126c;\\n      }\\n    }\\n    if (operation_type != 1) {\\nLAB_0008126c:\\n      if (operation_type == 0) {\\n        int data_offset = data_index * 0x1c;\\n        FUN_00080e18(*(undefined4 *)(data_ptr + data_offset + 8));\\n        result = FUN_00080da0(*(undefined4 *)(data_ptr + data_offset), 3, *(undefined4 *)(data_ptr + data_offset + 4), 0);\\n        type_ptr[data_index] = type_ptr[data_index] & 0xf0 | 2;\\n      }\\n      else {\\n        if (operation_type != 2) {\\n          return result;\\n        }\\n        int data_offset = data_index * 0x1c;\\n        FUN_00080e18(*(undefined4 *)(data_ptr + data_offset + 8));\\n        result = FUN_00080da0(*(undefined4 *)(data_ptr + data_offset), 3, *(undefined4 *)(data_ptr + data_offset + 4), 1);\\n        type_ptr[data_index] = type_ptr[data_index] & 0xf0 | 1;\\n      }\\n      return result;\\n    }\\n    int data_offset = data_index * 0x1c;\\n    int data_address = *(int *)(data_ptr + data_offset);\\n    byte data_type = type_ptr[data_index] >> 4;\\n    uint data_size = 0;\\n    if (data_type == 0) {\\n      data_size = 4;\\n    }\\n    else {\\n      data_size = 5;\\n    }\\n    result = FUN_00080da0(data_address, data_size, *(undefined4 *)(data_ptr + data_offset + 4), *(undefined4 *)(data_ptr + data_offset + 0x10));\\n    type_ptr[data_index] = type_ptr[data_index] & 0xf0 | 3;\\n    if (*(int *)(data_address + 0x18) == -1) {\\n      uint data_length = *(uint *)(data_ptr + data_offset + 8);\\n      if (0x2c < data_length) {\\n        return 1;\\n      }\\n      if (data_length < 0x20) {\\n        uint bit_mask = 1 << (data_length & 0xff);\\n        uint bit_result = *(uint *)(DAT_00080e98 + 0x18) & bit_mask;\\n        if (bit_result == bit_mask) {\\n          *(uint *)(DAT_00080e98 + 0x14) = bit_result;\\n        }\\n      }\\n      else {\\n        uint bit_mask = 1 << (data_length - 0x20 & 0xff);\\n        uint bit_result = *(uint *)(DAT_00080e98 + 0x108) & bit_mask;\\n        if (bit_result == bit_mask) {\\n          *(uint *)(DAT_00080e98 + 0x104) = bit_result;\\n        }\\n      }\\n      return 0;\\n    }\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "process_data_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_data_to_buffer_00081454",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer_ptr",
                "uVar2": "mask",
                "DAT_000814a4": "DAT_mask"
            },
            "code": "int write_data_to_buffer_00081454(int buffer_address, int data){\n  int buffer_ptr = *(int *)(buffer_address + 0x14);\n  int buffer_size = *(int *)(buffer_address + 0x18);\n  \n  if ((*(int *)(*(int *)(buffer_address + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(buffer_ptr + 0x84) == *(int *)(buffer_ptr + 0x80))) {\n    *(int *)(*(int *)(buffer_address + 0x18) + 0x1c) = data;\n  }\n  else {\n    uint mask = DAT_000814a4 & *(int *)(buffer_ptr + 0x80) + 1U;\n    if ((int)mask < 0) {\n      mask = (mask - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(buffer_ptr + 0x84) == mask);\n    *(char *)(buffer_ptr + *(int *)(buffer_ptr + 0x80)) = (char)data;\n    *(uint *)(*(int *)(buffer_address + 0x14) + 0x80) = mask;\n    *(int *)(*(int *)(buffer_address + 0x18) + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "execute_function": "execute_function",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "ptr",
                "iVar2": "function_result",
                "FUN_00084728": "execute_function_00084728"
            },
            "code": "void execute_function_00084728(int *result, undefined4 param1, undefined4 param2, undefined4 param3)\n{\n    undefined *ptr = PTR_DAT_0008474c;\n    *(undefined4 *)PTR_DAT_0008474c = 0;\n    int function_result = execute_subfunction(param1, param2, param3);\n    if (function_result == -1 && (*(int *)ptr != 0)) {\n        *result = *(int *)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "buffer",
                "uVar1": "status_1",
                "iVar2": "status_2",
                "uVar3": "current_index",
                "pbVar4": "buffer_ptr",
                "uVar5": "current_char",
                "local_1c": "local_char",
                "abStack_1b": "char_array"
            },
            "code": "uint process_data_00083c40(undefined4 data_size, uint data, byte **buffer){\n  uint status_1;\n  int status_2;\n  uint current_char;\n  byte *buffer_ptr;\n  uint current_index;\n  byte local_char;\n  byte char_array[3];\n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  status_1 = check_status();\n  if ((status_1 == 1) && (data_size - 1 < 0xff)) {\n    current_index = data_size & 0xff;\n    local_char = (byte)current_index;\n  }\n  else {\n    status_1 = process_character(data, &local_char, data_size, buffer + 0x17);\n    if (status_1 == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (status_1 == 0) {\n      return data_size;\n    }\n    current_index = (uint)local_char;\n  }\n  current_char = 0;\n  do {\n    buffer_ptr = buffer[2] + -1;\n    buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)buffer[6] <= (int)buffer_ptr) {\n        **buffer = (byte)current_index;\n        buffer_ptr = *buffer;\n        current_index = (uint)*buffer_ptr;\n        if (current_index != 10) goto LAB_00083c90;\n      }\n      status_2 = write_character(data, current_index, buffer);\n      if (status_2 == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)current_index;\n      buffer_ptr = *buffer;\nLAB_00083c90:\n      *buffer = buffer_ptr + 1;\n    }\n    if (status_1 <= current_char + 1) {\n      return data_size;\n    }\n    current_index = (uint)char_array[current_char];\n    current_char = current_char + 1;\n  } while( true );\n}",
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = thunk_FUNC_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = thunk_FUNC_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = thunk_FUNC_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = thunk_FUNC_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = thunk_FUNC_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = thunk_FUNC_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = thunk_FUNC_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = FUN_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = FUN_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = FUN_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = thunk_FUNC_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = FUN_0008189c(*(undefined4 *)puVar2);\n  iVar15 = FUN_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = FUN_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = FUN_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008043e",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081c94",
                "FUN_0008189c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2",
                "difference": "difference",
                "masked_difference": "masked_difference"
            },
            "code": "uint calculate_difference_000813e4(int input_param){\n    int* ptr_1 = (int*)(*(int*)(input_param + 0x10) + 0x80);\n    int* ptr_2 = (int*)(*(int*)(input_param + 0x10) + 0x84);\n    int difference = *ptr_1 - *ptr_2;\n    int masked_difference = difference & 0x7f;\n    return masked_difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_data_00084290",
                "DAT_00084294": "data_value"
            },
            "code": "int get_data_00084290(void)\n{\n  return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "process_data_000846b4",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "data_ptr",
                "iVar2": "func_result"
            },
            "code": "void process_data_000846b4(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_ptr;\n  int func_result;\n  data_ptr = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  func_result = process(param_2, param_3, param_3, 0, param_4);\n  if ((func_result == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_data_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer_address",
                "FUN_00082504": "set_memory",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ initialize_buffer_000813a8(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_block_00083d9c",
                "param_1": "heap_start",
                "param_2": "block_size",
                "iVar1": "prev_block_size",
                "uVar2": "block_header",
                "iVar3": "prev_block_footer",
                "uVar4": "block_footer",
                "iVar5": "current_block_header",
                "iVar6": "next_block_header",
                "uVar7": "current_block_size",
                "iVar8": "heap_header",
                "DAT_00083f24": "heap_header",
                "PTR_DAT_00083f30": "free_memory_blocks",
                "DAT_00083f28": "heap_footer",
                "do_nothing_00082598": "do_nothing_1",
                "do_nothing_0008259c": "do_nothing_2"
            },
            "code": "void allocate_memory_block_00083d9c(void* heap_start, size_t block_size)\n{\n  int prev_block_size;\n  uint block_header;\n  int prev_block_footer;\n  uint block_footer;\n  int current_block_header;\n  int next_block_header;\n  uint current_block_size;\n  int DAT_00083f24 = DAT_00083f24;\n  if (block_size == 0) {\n    return;\n  }\n  do_nothing_00082598();\n  prev_block_size = *(int*)(heap_start - 4);\n  current_block_size = block_size & 0xfffffffe;\n  prev_block_footer = heap_start - 8 + current_block_size;\n  current_block_header = prev_block_footer + 4;\n  block_footer = *(uint*)(prev_block_footer + 4) & 0xfffffffc;\n  if (*(int*)(DAT_00083f24 + 8) == prev_block_footer) {\n    block_footer += current_block_size;\n    if (-1 < (int)(block_size << 0x1f)) {\n      prev_block_size -= *(int*)(heap_start - 8);\n      int prev_block_header = *(int*)(prev_block_size + 0xc);\n      next_block_header = *(int*)(prev_block_size + 8);\n      block_footer += *(int*)(heap_start - 8);\n      *(int*)(next_block_header + 0xc) = prev_block_header;\n      *(int*)(prev_block_header + 8) = next_block_header;\n    }\n    block_header = *DAT_00083f2c;\n    *(uint*)(prev_block_size + 4) = block_footer | 1;\n    *(int*)(DAT_00083f24 + 8) = prev_block_size;\n    if (block_header <= block_footer) {\n      PTR_DAT_00083f30(DAT_00083f24, *(undefined4*)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    block_size = block_size & 1;\n    *(uint*)(current_block_header + 4) = block_footer;\n    if (block_size == 0) {\n      prev_block_size -= *(int*)(heap_start - 8);\n      int prev_block_next = *(int*)(prev_block_size + 8);\n      uint prev_block_size_plus_block_size = current_block_size + *(int*)(heap_start - 8);\n      if (prev_block_next == DAT_00083f24 + 8) {\n        block_size = 1;\n      }\n      else {\n        int prev_block_prev = *(int*)(prev_block_size + 0xc);\n        *(int*)(prev_block_next + 0xc) = prev_block_prev;\n        *(int*)(prev_block_prev + 8) = prev_block_next;\n      }\n    }\n    else {\n      block_size = 0;\n    }\n    if (-1 < *(int*)(current_block_header + block_footer + 4) << 0x1f) {\n      uint prev_block_size_plus_current_block_size = current_block_size + block_footer;\n      int next_block_prev = *(int*)(current_block_header + 8);\n      if ((block_size == 0) && (next_block_prev == DAT_00083f28)) {\n        *(int*)(DAT_00083f24 + 0x14) = prev_block_size;\n        *(int*)(DAT_00083f24 + 0x10) = prev_block_size;\n        int prev_block_next = *(int*)(prev_block_size + 8);\n        *(int*)(prev_block_size + 0xc) = next_block_prev;\n        *(int*)(prev_block_size + 8) = next_block_prev;\n        *(uint*)(prev_block_size + 4) = prev_block_size_plus_current_block_size | 1;\n        *(uint*)(prev_block_size + prev_block_size_plus_current_block_size) = prev_block_size_plus_current_block_size;\n        goto LAB_00083e30;\n      }\n      int next_block_next = *(int*)(current_block_header + 0xc);\n      *(int*)(next_block_prev + 0xc) = next_block_next;\n      *(int*)(next_block_next + 8) = next_block_prev;\n    }\n    *(uint*)(heap_start - 8 + current_block_size + 4) = prev_block_size_plus_current_block_size | 1;\n    *(uint*)(heap_start - 8 + current_block_size + prev_block_size_plus_current_block_size) = prev_block_size_plus_current_block_size;\n    if (block_size == 0) {\n      if (prev_block_size_plus_current_block_size < 0x200) {\n        block_header = *(uint*)(DAT_00083f24 + 4);\n        int free_block_size = DAT_00083f24 + (prev_block_size_plus_current_block_size & 0xfffffff8);\n        int free_block_next = *(int*)(free_block_size + 8);\n        int free_block_prev = *(int*)(free_block_size + 0xc);\n        *(uint*)(DAT_00083f24 + 4) = block_header | 1 << ((int)(prev_block_size_plus_current_block_size >> 3) >> 2 & 0xffU);\n        *(int*)(free_block_size + 8) = free_block_next;\n        *(int*)(free_block_size + 0xc) = free_block_prev;\n        *(int*)(free_block_prev + 8) = free_block_size;\n        *(int*)(free_block_next + 0xc) = free_block_size;\n        do_nothing_0008259c(heap_start);\n        return;\n      }\n      uint free_block_size_divided_by_eight = prev_block_size_plus_current_block_size >> 9;\n      if (free_block_size_divided_by_eight < 5) {\n        int block_header_index = (prev_block_size_plus_current_block_size >> 6) + 0x38;\n        int block_header_index_times_two = block_header_index * 2;\n      }\n      else if (free_block_size_divided_by_eight < 0x15) {\n        int block_header_index = free_block_size_divided_by_eight + 0x5b;\n        int block_header_index_times_two = block_header_index * 2;\n      }\n      else if (free_block_size_divided_by_eight < 0x55) {\n        int block_header_index = (prev_block_size_plus_current_block_size >> 0xc) + 0x6e;\n        int block_header_index_times_two = block_header_index * 2;\n      }\n      else if (free_block_size_divided_by_eight < 0x155) {\n        int block_header_index = (prev_block_size_plus_current_block_size >> 0xf) + 0x77;\n        int block_header_index_times_two = block_header_index * 2;\n      }\n      else if (free_block_size_divided_by_eight < 0x555) {\n        int block_header_index = (prev_block_size_plus_current_block_size >> 0x12) + 0x7c;\n        int block_header_index_times_two = block_header_index * 2;\n      }\n      else {\n        int block_header_index_times_two = 0xfc;\n        int block_header_index = 0x7e;\n      }\n      int free_block_header = DAT_00083f24 + block_header_index_times_two * 4;\n      int free_block_next = *(int*)(free_block_header + 8);\n      if (free_block_next == free_block_header) {\n        *(uint*)(DAT_00083f24 + 4) = *(uint*)(DAT_00083f24 + 4) | 1 << (block_header_index >> 2 & 0xffU);\n        free_block_next = free_block_header;\n      }\n      else {\n        do {\n          if ((*(uint*)(free_block_next + 4) & 0xfffffffc) <= prev_block_size_plus_current_block_size) break;\n          free_block_next = *(int*)(free_block_next + 8);\n        } while (free_block_header != free_block_next);\n      }\n      *(int*)(heap_start - 8 + current_block_size + 0xc) = free_block_next;\n      *(int*)(heap_start - 8 + current_block_size + 8) = free_block_header;\n      *(int*)(free_block_next + 8) = heap_start - 8 + current_block_size;\n      *(int*)(free_block_header + 0xc) = heap_start - 8 + current_block_size;\n    }\n  }\nLAB_00083e30:\n  do_nothing_0008259c(heap_start);\n  return;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "check_overflow_and_return_result_00081bf4",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "doubled_num1",
                "uVar3": "doubled_num2",
                "uVar4": "combined_nums",
                "bVar1": "is_xor_result_negative",
                "bVar5": "is_combined_nums_zero"
            },
            "code": "uint check_overflow_and_return_result_00081bf4(uint num1, uint num2)\n{\n    bool is_negative1 = (int)num1 >> 0x18 == -1;\n    bool is_negative2 = (int)num2 >> 0x18 == -1;\n    uint doubled_num1 = num1 * 2;\n    uint doubled_num2 = num2 * 2;\n    if ((is_negative1 || is_negative2) && ((is_negative1 && ((num1 & 0x7fffff) != 0)) || (is_negative2 && ((num2 & 0x7fffff) != 0)))) {\n        return 1;\n    }\n    uint combined_nums = doubled_num1 | num2 & 0x7fffffff;\n    bool is_combined_nums_zero = combined_nums == 0;\n    if (!is_combined_nums_zero) {\n        uint xor_result = num1 ^ num2;\n        is_combined_nums_zero = xor_result == 0;\n    }\n    bool is_xor_result_negative = -1 < (int)(num1 ^ num2);\n    if (is_xor_result_negative) {\n        num1 = doubled_num1 + num2 * -2;\n        is_combined_nums_zero = num1 == 0;\n    }\n    if (is_xor_result_negative && doubled_num2 <= doubled_num1 && !is_combined_nums_zero) {\n        num1 = (int)num2 >> 0x1f;\n    }\n    if (!is_xor_result_negative || doubled_num2 > doubled_num1) {\n        num1 = ~((int)num2 >> 0x1f);\n    }\n    if (!is_combined_nums_zero) {\n        num1 = num1 | 1;\n    }\n    return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "check_overflow_and_return_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "puVar1": "data_start",
                "puVar2": "data_end",
                "iVar3": "i",
                "ppcVar4": "function_ptr",
                "iVar5": "num_functions"
            },
            "code": "void execute_functions_00081d7c(void)\n{\n  int num_functions = (int)PTR_functions_end - (int)PTR_functions_start >> 2;\n  if (num_functions != 0) {\n    code **function_ptr = (code **)(PTR_functions_start + -4);\n    int i = 0;\n    do {\n      i++;\n      function_ptr++;\n      (**function_ptr)();\n    } while (num_functions != i);\n  }\n  undefined *data_end = PTR_data_end;\n  undefined *data_start = PTR_data_start;\n  do_nothing();\n  int num_data = (int)data_start - (int)data_end >> 2;\n  if (num_data != 0) {\n    code **data_ptr = (code **)(data_end + -4);\n    int i = 0;\n    do {\n      i++;\n      data_ptr++;\n      (**data_ptr)();\n    } while (num_data != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_functions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_32_bit_values_00081c5c",
                "param_1": "value_1",
                "param_2": "value_2",
                "FUN_00081bf4": "call_some_function",
                "CONCAT44": "((uint64_t)value_2 << 32) | value_1"
            },
            "code": "void concatenate_32_bit_values_00081c5c(uint32_t value_1, uint32_t value_2)\n{\n  call_some_function();\n  uint64_t concatenated_value = ((uint64_t)value_2 << 32) | value_1;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "imported": false,
            "current_name": "concatenate_32_bit_values_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "update_counter_if_not_negative_00081388",
                "*DAT_000813a0": "counter_ptr",
                "*DAT_000813a4": "callback_ptr",
                "iVar1": "counter_value"
            },
            "code": "void update_counter_if_not_negative_00081388(void)\n{\n  int counter_value = *DAT_000813a0;\n  if (counter_value != -1) {\n    counter_value--;\n    *DAT_000813a0 = counter_value;\n    if (counter_value == 0) {\n      (*DAT_000813a4)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "update_counter_if_not_negative_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_word_ptr",
                "puVar4": "current_word_ptr",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "puVar7": "dest_ptr",
                "bVar8": "is_terminator"
            },
            "code": "void copy_string_00082994(uint *dest, uint *src) {\n    char current_char;\n    ushort current_short;\n    uint *src_ptr;\n    uint *dest_ptr;\n    uint current_word;\n    uint next_word;\n    bool is_terminator;\n\n    if ((((uint)dest ^ (uint)src) & 3) != 0) {\n        do {\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            src = (uint *)((int)src + 1);\n            dest = (uint *)((int)dest + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n\n    if (((uint)src & 3) != 0) {\n        src_ptr = src;\n        if (((uint)src & 1) != 0) {\n            src_ptr = (uint *)((int)src + 1);\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            dest = (uint *)((int)dest + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        src = src_ptr;\n        if (((uint)src_ptr & 2) != 0) {\n            src = (uint *)((int)src_ptr + 2);\n            current_short = *(ushort *)src_ptr;\n            is_terminator = (current_short & 0xff) == 0;\n            if (is_terminator) {\n                *(char *)dest = (char)current_short;\n            }\n            else {\n                *(ushort *)dest = current_short;\n                is_terminator = (current_short & 0xff00) == 0;\n                dest = (uint *)((int)dest + 2);\n            }\n            if (is_terminator) {\n                return;\n            }\n        }\n    }\n\n    current_word = *src;\n    src_ptr = src + 1;\n    dest_ptr = dest;\n    if (((uint)src & 4) != 0) {\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            goto LAB_000829f8;\n        }\n        dest_ptr = dest + 1;\n        *dest = current_word;\n        src_ptr = src + 2;\n        current_word = src[1];\n    }\n\n    while (true) {\n        next_word = *src_ptr;\n        is_terminator = (current_word + 0xfefefeff & ~current_word & 0x80808080) != 0;\n        dest = dest_ptr;\n        if (is_terminator) {\n            break;\n        }\n        *dest_ptr = current_word;\n        current_word = next_word;\n        src_ptr = src_ptr + 1;\n        dest_ptr = dest_ptr + 1;\n        if ((next_word + 0xfefefeff & ~next_word & 0x80808080) != 0) {\n            break;\n        }\n        current_word = *src_ptr;\n        dest_ptr = dest_ptr + 1;\n        *dest = next_word;\n    }\n\nLAB_000829f8:\n    do {\n        *(char *)dest = (char)current_word;\n        next_word = current_word & 0xff;\n        current_word = current_word >> 8 | current_word << 0x18;\n        dest = (uint *)((int)dest + 1);\n    } while (next_word != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "init_data_structures_00080c0c",
                "param_1": "data_structure_1",
                "param_2": "data_structure_2",
                "param_3": "data_structure_3",
                "puVar1": "ptr_1",
                "puVar2": "ptr_2",
                "puVar3": "ptr_3",
                "puVar4": "ptr_4",
                "puVar5": "ptr_5",
                "puVar6": "ptr_6",
                "PTR_DAT_00080ca4": "original_ptr_1",
                "PTR_DAT_00080ca0": "original_ptr_2",
                "FUN_000813a8": "initialize",
                "PTR_DAT_00080cd8": "original_ptr_3",
                "PTR_DAT_00080cac": "original_ptr_4",
                "PTR_DAT_00080cb0": "original_ptr_5",
                "DAT_00080ca8": "original_data_1",
                "PTR_DAT_00080cb4": "original_ptr_6",
                "PTR_DAT_00080cdc": "original_ptr_7",
                "PTR_DAT_00080cb8": "original_ptr_8",
                "PTR_DAT_00080cbc": "original_ptr_9",
                "FUN_000815d4": "create_data_structure",
                "PTR_DAT_00080cc4": "original_ptr_10",
                "DAT_00080cc0": "original_data_2",
                "PTR_DAT_00080ccc": "original_ptr_11",
                "DAT_00080cc8": "original_data_3",
                "PTR_DAT_00080cd4": "original_ptr_12",
                "DAT_00080cd0": "original_data_4"
            },
            "code": "void init_data_structures_00080c0c(void *data_structure_1, void *data_structure_2, void *data_structure_3)\n{\n  void *ptr_1;\n  void *ptr_2;\n  void *ptr_3;\n  void *ptr_4;\n  void *ptr_5;\n  void *ptr_6;\n  ptr_2 = PTR_DAT_00080ca4;\n  ptr_1 = PTR_DAT_00080ca0;\n  initialize(ptr_1);\n  initialize(ptr_2);\n  ptr_5 = PTR_DAT_00080cd8;\n  ptr_3 = PTR_DAT_00080cac;\n  create_data_structure(PTR_DAT_00080cb0, DAT_00080ca8, 8, 8, ptr_1, ptr_2, data_structure_3);\n  ptr_1 = PTR_DAT_00080cb4;\n  initialize(ptr_5);\n  ptr_6 = PTR_DAT_00080cdc;\n  initialize(ptr_3);\n  ptr_2 = PTR_DAT_00080cb8;\n  initialize(ptr_1);\n  ptr_4 = PTR_DAT_00080cbc;\n  initialize(ptr_6);\n  initialize(ptr_2);\n  initialize(ptr_4);\n  create_data_structure(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, ptr_5, ptr_6, data_structure_1);\n  create_data_structure(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, ptr_3, ptr_2, data_structure_2);\n  create_data_structure(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, ptr_1, ptr_4, data_structure_3);\n  return;\n}",
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "init_data_structures_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "set_param_and_update_00080d2e",
                "param_1": "base_address",
                "param_2": "new_param_value",
                "param_3": "param_bitmask",
                "uVar1": "updated_value"
            },
            "code": "void set_param_and_update_00080d2e(uint32_t base_address, uint32_t new_param_value, uint32_t param_bitmask) {\n  *(uint32_t *)(base_address + 0x44) = new_param_value;\n  switch(param_bitmask) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    uint32_t updated_value = *(uint32_t *)(base_address + 0x70) & *(uint32_t *)(base_address + 0x70) & ~param_bitmask;\n    *(uint32_t *)(base_address + 0x70) = updated_value;\n    break;\n  case 2:\n    uint32_t updated_value = *(uint32_t *)(base_address + 0x70) | param_bitmask;\n    *(uint32_t *)(base_address + 0x70) = updated_value;\n    break;\n  default:\n    *(uint32_t *)(base_address + 4) = param_bitmask;\n    break;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_param_and_update_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "send_message_000844c4",
                "param_1": "socket_fd",
                "param_2": "message_type",
                "param_3": "message_data",
                "param_4": "message_data_length",
                "uVar1": "message_length",
                "uVar2": "length",
                "puVar3": "buffer",
                "iVar4": "result"
            },
            "code": "uint send_message_000844c4(int socket_fd, uint message_type, uint8_t *message_data, uint message_data_length)\n{\n    ushort message_length = *(ushort *)(message_data + 6);\n    uint length = (uint)message_length;\n    uint8_t *buffer = message_data;\n    if ((-1 < (int)(length << 0x1c)) || (*(int *)(message_data + 0x10) == 0)) {\n        int result = create_message(socket_fd, message_data, message_length, message_type);\n        if (result != 0) {\n            return 0xffffffff;\n        }\n        message_length = *(ushort *)(message_data + 6);\n        length = (uint)message_length;\n        buffer = message_data;\n    }\n    message_type = message_type & 0xff;\n    if ((int)(length << 0x12) < 0) {\n        buffer = (uint8_t *)*message_data - *(int *)(message_data + 0x10);\n        if ((int)buffer < *(int *)(message_data + 0x14)) {\n            buffer++;\n            goto LAB_000844f8;\n        }\n    }\n    else {\n        *(ushort *)(message_data + 6) = message_length | 0x2000;\n        *(uint *)(message_data + 0x1c) = *(uint *)(message_data + 0x1c) & 0xffffdfff;\n        buffer = (uint8_t *)*message_data - *(int *)(message_data + 0x10);\n        if ((int)buffer < *(int *)(message_data + 0x14)) {\n            buffer++;\n            goto LAB_000844f8;\n        }\n    }\n    int result = create_message(socket_fd, message_data, message_length, message_type);\n    if ((result != 0) || ((*(int *)(message_data + 0x14) == 1) || ((int)((uint)*(ushort *)(message_data + 6) << 0x1f) < 0 && (message_type == 10)))) {\n        return 0xffffffff;\n    }\n    return message_type;\n}\n",
            "called": [
                "FUN_00083b14",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "send_message_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "iVar1": "leading_zero_bits",
                "uVar2": "shift_amount",
                "iVar4": "initial_value",
                "uVar3": "result",
                "iVar5": "carry_bit",
                "uVar5": "shift_mask",
                "count_leading_zeroes": "count_leading_zero_bits"
            },
            "code": "uint calculate_hash_0008189c(uint num)\n{\n    uint mask = 0x80000000;\n    uint leading_zero_bits = 0;\n    while ((num & mask) == 0 && mask != 0)\n    {\n        leading_zero_bits++;\n        mask >>= 1;\n    }\n    return leading_zero_bits;\n}\n\nuint calculate_hash_0008189c(uint input)\n{\n    uint is_negative = input & 0x80000000;\n    if ((int)is_negative < 0)\n    {\n        input = -input;\n    }\n    if (input == 0)\n    {\n        return 0;\n    }\n    uint leading_zero_bits = calculate_hash_0008189c(input);\n    uint shift_amount = leading_zero_bits - 8;\n    int initial_value = ((is_negative | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n    if (leading_zero_bits > 7)\n    {\n        uint shift_mask = 0 << (shift_amount & 0xff);\n        uint shifted_input = input << (shift_amount & 0xff);\n        uint carry_bit = 0U >> (0x20 - shift_amount & 0xff);\n        uint result = initial_value + shifted_input + carry_bit + (uint)(0x7fffffff < shift_mask);\n        if (shift_mask == 0x80000000)\n        {\n            result = result & 0xfffffffe;\n        }\n        return result;\n    }\n    uint shifted_input = input << (leading_zero_bits + 0x18U & 0xff);\n    uint carry_bit = (int)(shifted_input) >> 0x1f;\n    uint result = initial_value + ((input >> (0x20 - (leading_zero_bits + 0x18U) & 0xff)) - carry_bit);\n    if ((shifted_input & 0x7fffffff) == 0)\n    {\n        result = result & ~(shifted_input >> 0x1f);\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_hash_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "reverse_copy_0008234c",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "new_dest",
                "puVar2": "new_src",
                "puVar3": "temp_dest",
                "uVar4": "remaining_length",
                "uVar5": "i",
                "bVar6": "long_copy"
            },
            "code": "undefined4 reverse_copy_0008234c(undefined4 *dest, undefined4 *src, uint length)\n{\n  undefined4 *new_dest;\n  undefined4 *new_src;\n  uint remaining_length;\n  uint i;\n  bool long_copy;\n  \n  new_src = src;\n  new_dest = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (length < 8) {\n      remaining_length = length - 4;\n      if (3 < length) {\n        do {\n          *new_dest = *new_src;\n          new_dest = (undefined4 *)((int)new_dest + 1);\n          new_src = (undefined4 *)((int)new_src + 1);\n          i = remaining_length - 1;\n          remaining_length = i;\n        } while (i != 0);\n        *(undefined *)(undefined4 *)((int)new_dest + 1) = *(undefined *)(undefined4 *)((int)new_src + 1);\n        *(undefined *)((int)new_dest + 2) = *(undefined *)((int)new_src + 2);\n        *(undefined *)((int)new_dest + 3) = *(undefined *)((int)new_src + 3);\n        return dest;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      remaining_length = 4 - ((uint)dest & 3);\n      length = length - remaining_length;\n      i = 0;\n      if (((uint)dest & 1) != 0) {\n        new_src = (undefined4 *)((int)src + 1);\n        new_dest = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n        i = 1;\n      }\n      if ((remaining_length & 2) != 0) {\n        new_src = (undefined4 *)((int)src + (i + 1));\n        new_dest = (undefined4 *)((int)dest + (i + 1));\n        *(undefined2 *)dest = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *new_dest = *new_src;\n    new_dest[1] = new_src[1];\n    new_dest[2] = new_src[2];\n    new_dest[3] = new_src[3];\n    new_dest[4] = new_src[4];\n    new_dest[5] = new_src[5];\n    new_dest[6] = new_src[6];\n    new_dest[7] = new_src[7];\n    new_dest[8] = new_src[8];\n    new_dest[9] = new_src[9];\n    new_dest[10] = new_src[10];\n    new_dest[11] = new_src[11];\n    new_dest[12] = new_src[12];\n    new_dest[13] = new_src[13];\n    new_dest[14] = new_src[14];\n    new_dest[15] = new_src[15];\n    new_dest = new_dest + 0x10;\n    new_src = new_src + 0x10;\n    length = length - 0x40;\n  }\n  remaining_length = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *new_dest = *new_src;\n      new_dest[1] = new_src[1];\n      new_dest[2] = new_src[2];\n      new_dest[3] = new_src[3];\n      new_dest = new_dest + 4;\n      new_src = new_src + 4;\n      long_copy = 0xf < remaining_length;\n      remaining_length = remaining_length - 0x10;\n    } while (long_copy);\n  }\n  i = remaining_length + 0xc;\n  if (0xfffffff3 < remaining_length) {\n    do {\n      new_src = new_src + 1;\n      *new_dest = *(new_src - 1);\n      long_copy = 3 < i;\n      i = i - 4;\n      new_dest = new_dest + 1;\n    } while (long_copy);\n  }\nLAB_000823d0:\n  if (i + 4 != 0) {\n    new_src = src;\n    new_dest = dest;\n    if ((i & 1) != 0) {\n      new_src = (undefined4 *)((int)src + 1);\n      new_dest = (undefined4 *)((int)dest + 1);\n      *(undefined *)dest = *(undefined *)src;\n    }\n    if ((i + 4 & 2) != 0) {\n      *(undefined2 *)new_dest = *(undefined2 *)new_src;\n    }\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "reverse_copy_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68",
                "PTR_DAT_00080a94": "data_array_pointer",
                "PTR_s__00080a98": "network_name",
                "DAT_00080aa0": "data_size",
                "DAT_00080a9c": "data_type",
                "PTR_DAT_00080aa4": "data_array_pointer_2"
            },
            "code": "void initialize_data_00080a68(void)\n{\n  undefined *data_pointer;\n  data_pointer = PTR_DAT_00080a94;\n  initialize_network(PTR_DAT_00080a94, PTR_s__00080a98);\n  set_data_params(data_pointer, DAT_00080aa0, DAT_00080a9c);\n  data_pointer = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  data_pointer[5] = 0;\n  data_pointer[6] = 6;\n  *(undefined2 *)(data_pointer + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "check_and_update_ptr_0008165c",
                "param_1": "ptr_array",
                "param_2": "new_value",
                "param_3": "ptr_value",
                "iVar1": "check_result"
            },
            "code": "undefined4* check_and_update_ptr_0008165c(undefined4* ptr_array, undefined4 new_value, undefined4 ptr_value)\n{\n    int check_result = FUN_0008163a(ptr_array, ptr_value);\n    if (check_result == 0)\n    {\n        FUN_0008160c(ptr_array);\n    }\n    else\n    {\n        ptr_array[2] = ptr_value;\n        FUN_00082994(*ptr_array, new_value);\n    }\n    return ptr_array;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008163a",
                "FUN_0008160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "check_and_update_ptr_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "code": "uint combine_values_000815f8(int value_1, uint value_2) {\n    return value_2 | (value_1 << 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_end",
                "puVar1": "current_ptr",
                "uVar2": "current_val",
                "pcVar3": "current_char_ptr",
                "pcVar4": "end_char_ptr",
                "bVar5": "found_target_char"
            },
            "code": "uint* find_char_in_buffer_00084384(uint* buffer, char target_char, uint* buffer_end){\n    uint* current_ptr;\n    uint current_val;\n    char* current_char_ptr;\n    char* end_char_ptr;\n    bool found_target_char;\n\n    if (((uint)buffer & 3) == 0) {\n        current_ptr = buffer;\n        if (buffer_end > (uint*)0x3) {\n            do {\n                current_val = *buffer ^ CONCAT22(CONCAT11(target_char, target_char), CONCAT11(target_char, target_char));\n                current_ptr = buffer;\n                if ((current_val + 0xfefefeff & ~current_val & 0x80808080) != 0) {\n                    break;\n                }\n                buffer_end = buffer_end - 1;\n                current_ptr = buffer + 1;\n                buffer = buffer + 1;\n            } while (buffer_end > (uint*)0x3);\n        }\n        buffer = buffer_end;\n        end_char_ptr = (char*)((int)buffer - 1);\n        if ((buffer != (uint*)0x0) && (*current_ptr != target_char)) {\n            current_char_ptr = (char*)0x0;\n            do {\n                buffer = (uint*)((int)buffer + 1);\n                found_target_char = current_char_ptr == end_char_ptr;\n                current_char_ptr = current_char_ptr + 1;\n                if (found_target_char) {\n                    goto EXIT_LOOP;\n                }\n            } while (*(char*)buffer != target_char);\n        }\n    } else if (buffer_end == (uint*)0x0) {\n        current_ptr = (uint*)0x0;\n    } else if (*buffer != target_char) {\n        current_ptr = (uint*)((int)buffer + 1);\n        buffer_end = (uint*)((int)buffer_end - 1);\n        do {\n            buffer = current_ptr;\n            if (((uint)buffer & 3) == 0) {\n                current_ptr = buffer;\n                if (buffer_end > (uint*)0x3) {\n                    do {\n                        current_val = *buffer ^ CONCAT22(CONCAT11(target_char, target_char), CONCAT11(target_char, target_char));\n                        current_ptr = buffer;\n                        if ((current_val + 0xfefefeff & ~current_val & 0x80808080) != 0) {\n                            goto EXIT_LOOP;\n                        }\n                        buffer_end = buffer_end - 1;\n                        current_ptr = buffer + 1;\n                        buffer = buffer + 1;\n                    } while (buffer_end > (uint*)0x3);\n                }\n                buffer = buffer_end;\n                end_char_ptr = (char*)((int)buffer - 1);\n                current_char_ptr = (char*)0x0;\n                while (*(char*)current_ptr != target_char) {\n                    current_ptr = (uint*)((int)current_ptr + 1);\n                    found_target_char = current_char_ptr == end_char_ptr;\n                    current_char_ptr = current_char_ptr + 1;\n                    if (found_target_char) {\n                        current_ptr = (uint*)0x0;\n                        goto EXIT_LOOP;\n                    }\n                }\n                goto EXIT_LOOP;\n            }\n            if (buffer_end == (uint*)0x0) {\n                current_ptr = (uint*)0x0;\n                goto EXIT_LOOP;\n            }\n            current_ptr = (uint*)((int)buffer + 1);\n            buffer_end = (uint*)((int)buffer_end - 1);\n        } while (*buffer != target_char);\n    }\n    EXIT_LOOP:\n    return current_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_param_00081034",
                "param_1": "param_array",
                "param_2": "new_param_value",
                "param_3": "bit_flag",
                "PTR_": "param_",
                "DAT_": "data_"
            },
            "code": "void update_param_00081034(uint32_t* PTR_array, uint32_t new_PTR_value, uint32_t bit_flag) {\n  uint32_t* PTR_ptr = PTR_array + 1;\n  uint32_t current_PTR_value = *PTR_ptr;\n  uint32_t updated_PTR_value = new_PTR_value | current_PTR_value | (bit_flag & 1) << 7;\n  *PTR_ptr = updated_PTR_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_param_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_to_buffer_00083974",
                "param_1": "data_to_add",
                "puVar1": "buffer_ptr",
                "puVar2": "buffer_array_ptr",
                "iVar3": "buffer_length",
                "iVar4": "buffer_index"
            },
            "code": "undefined4 add_to_buffer_00083974(undefined4 param_1)\n{\n  undefined *buffer_ptr;\n  undefined4 *buffer_array_ptr;\n  int buffer_length;\n  int buffer_index;\n\n  buffer_ptr = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return param_1;\n  }\n  buffer_index = *(int *)PTR_DAT_0008396c;\n  buffer_array_ptr = *(undefined4 **)(buffer_index + 0x148);\n  if (buffer_array_ptr == (undefined4 *)0x0) {\n    buffer_array_ptr = (undefined4 *)(buffer_index + 0x14c);\n    *(undefined4 **)(buffer_index + 0x148) = buffer_array_ptr;\n  }\n  buffer_length = buffer_array_ptr[1];\n  if (0x1f < buffer_length) {\n    if ((DAT_00083970 == 0) ||\n       (buffer_array_ptr = (undefined4 *)FUN_00081df4(400), buffer_array_ptr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_array_ptr = *(undefined4 *)(buffer_index + 0x148);\n    buffer_array_ptr[1] = 0;\n    buffer_length = 0;\n    *(undefined4 **)(buffer_index + 0x148) = buffer_array_ptr;\n    buffer_array_ptr[0x62] = 0;\n    buffer_array_ptr[99] = 0;\n  }\n  buffer_array_ptr[1] = buffer_length + 1;\n  buffer_array_ptr[buffer_length + 2] = buffer_ptr;\n  return 0;\n}\n",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "find_value_from_data_00084700",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "data_pointer",
                "iVar2": "function_result"
            },
            "code": "void find_value_from_data_00084700(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  undefined *data_pointer = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  int function_result = calculate_value(arg2, arg3, arg4);\n  if (function_result == -1 && *(int *)data_pointer != 0) {\n    *result = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "find_value_from_data_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUNC_00081714": "get_value_from_pointer",
                "PTR_DAT_0008171c": "PTR_DATA",
                "thunk_FUN_00081714": "thunk_FUNC_00081714_thunk_00081714"
            },
            "code": "int thunk_FUNC_00081714_thunk_00081714() {\n    int* value_pointer = (int*) PTR_DAT_0008171c;\n    return *value_pointer;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "thunk_FUNC_00081714_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "should_continue_execution_00081ca8",
                "in_CY": "is_carry_set",
                "in_ZR": "is_zero_set",
                "FUN_00081c54": "check_for_carry_flag"
            },
            "code": "bool should_continue_execution_00081ca8(void)\n{\n  bool is_carry_set = check_for_carry_flag();\n  bool is_zero_set = check_for_zero_flag();\n  return !is_carry_set || is_zero_set;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "should_continue_execution_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "data_index",
                "param_2": "data_value",
                "param_3": "param_3",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "data_ptr_3",
                "uVar4": "data_ptr_4",
                "iVar5": "data_ptr_5"
            },
            "code": "void update_data_00081318(int data_index, int data_value, undefined4 param_3)\\n{\\n  undefined *data_ptr_2;\\n  undefined *data_ptr_1;\\n  int data_ptr_3;\\n  undefined4 data_ptr_4;\\n  int data_ptr_5;\\n  data_ptr_2 = PTR_DAT_00081384;\\n  data_ptr_1 = PTR_DAT_00081380;\\n  if (PTR_DAT_00081380[data_index * 0x1c + 0xc] != \"\\0\") {\\n    if ((PTR_DAT_00081384[data_index] & 0xf) == 5) {\\n      FUN_00081210(data_index,1,param_3,5,data_index,data_value,param_3);\\n    }\\n    data_ptr_2[data_index] = data_ptr_2[data_index] & 0xf | (byte)(data_value << 4);\\n    data_ptr_5 = *(int *)(data_ptr_1 + data_index * 0x1c);\\n    data_ptr_4 = *(undefined4 *)(data_ptr_1 + data_index * 0x1c + 4);\\n    data_ptr_3 = FUN_00080e04(data_ptr_5,data_ptr_4);\\n    if (data_ptr_3 == 0) {\\n      if (data_value != 0) {\\n        *(undefined4 *)(data_ptr_5 + 100) = data_ptr_4;\\n        return;\\n      }\\n      *(undefined4 *)(data_ptr_5 + 0x60) = data_ptr_4;\\n      return;\\n    }\\n    FUN_00080d7a(data_ptr_5,data_ptr_4,data_value,0,1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080e04",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "update_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_value_from_pointer_00081714",
                "PTR_DAT_0008171c": "pointer_value"
            },
            "code": "get_value_from_pointer_00081714() {\n  return *(undefined4 *)PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "update_status_0008449c",
                "param_1": "device_id",
                "param_2": "status_info",
                "iVar1": "device_status",
                "uVar2": "status_flags"
            },
            "code": "void update_status_0008449c(int device_id, int* status_info)\n{\n  int device_status = get_device_status(device_id, (int)*(short *)(status_info + 0xe));\n  ushort status_flags;\n  if (device_status == -1) {\n    status_flags = *(ushort *)(status_info + 0xc) & 0xefff;\n  }\n  else {\n    status_flags = *(ushort *)(status_info + 0xc) | 0x1000;\n  }\n  if (device_status != -1) {\n    *(int *)(status_info + 0x50) = device_status;\n  }\n  *(ushort *)(status_info + 0xc) = status_flags;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "update_status_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_param",
                "param_2": "input_param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "output_ptr",
                "lVar2": "product",
                "uVar1": "product_low"
            },
            "code": "void calculate_difference_0008477c(uint input_param, int input_param_2, undefined4 param_3, undefined4 param_4, int *output_ptr) {\n  long long product = FUNC_000847e0() * CONCAT44(param_4, param_3);\n  uint product_low = (uint)product;\n  *output_ptr = input_param - product_low;\n  output_ptr[1] = (input_param_2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_param < product_low);\n  return;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "data_overflow",
                "uVar2": "current_byte",
                "cVar3": "return_value",
                "iVar4": "result",
                "bVar5": "current_byte_count"
            },
            "code": "int process_data_000801b0(int **data)\n{\n  bool data_overflow = false;\n  undefined byte_count = 0;\n  if (1 < *(byte *)((int)data + 6)) {\n    initialize_data(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    while (true) {\n      int result = (**(code **)(**data + 8))();\n      if (result == 0) break;\n      byte current_byte_count = *(byte *)((int)data + 0x49);\n      undefined current_byte = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + current_byte_count + 9) = current_byte;\n      current_byte_count++;\n      *(byte *)((int)data + 0x49) = current_byte_count;\n      if (0x3f < current_byte_count) {\n        data_overflow = true;\n        break;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  char return_value = *(char *)((int)data + 0x49);\n  if (data_overflow) {\n    return_value = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  return (int)return_value;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "data",
                "uVar1": "new_index"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined data) {\n  uint new_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = data;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "puVar1": "PTR_PTR_FUN_00081454_1_00081504"
            },
            "code": "void initialize_params_000814e4(undefined4 *params, undefined4 param1, undefined param2, undefined4 param3, undefined4 param4, undefined4 param5)\n{\n  params[0] = PTR_PTR_FUN_00081454_1_00081504;\n  params[1] = 0;\n  params[2] = 1000;\n  params[3] = param1;\n  *(undefined *)(params + 4) = param2;\n  params[5] = param3;\n  params[6] = param4;\n  params[7] = param5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "imported": false,
            "current_name": "initialize_params_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "set_values_00080d54",
                "param_1": "data_array",
                "param_2": "value",
                "param_3": "bitmask",
                "bVar1": "is_bitmask_negative"
            },
            "code": "void set_values_00080d54(uint32_t* data_array, uint32_t value, uint32_t bitmask)\n{\n  bool is_bitmask_negative = (int)(bitmask << 0x1f) < 0;\n  data_array[0x11] = value;\n  if (is_bitmask_negative) {\n    data_array[0x19] = value;\n  }\n  if (!is_bitmask_negative) {\n    data_array[0x18] = value;\n  }\n  bool is_second_bit_set = (bitmask & 0x2) != 0;\n  if (is_second_bit_set) {\n    data_array[8] = value;\n  }\n  if (!is_second_bit_set) {\n    data_array[9] = value;\n  }\n  bool is_higher_bits_set = ((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0);\n  if (is_higher_bits_set) {\n    data_array[0x20] = value;\n  }\n  data_array[5] = value;\n  *data_array = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_values_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_index",
                "uVar4": "bit"
            },
            "code": "uint calculate_checksum_0008021c(int start_index, uint length)\n{\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index++) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index--;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = FUN_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_00082ac0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "call_function_with_param_00081e04",
                "param_1": "param",
                "*DAT_00081e10": "function_pointer"
            },
            "code": "void call_function_with_param_00081e04(void* *DAT_00081e10, int param){\n  *DAT_00081e10(param);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "check_params_00084750",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "result",
                "FUN_000847ac": "calculate_result"
            },
            "code": "int check_params_00084750(int x, int y, int z, int w) {\n  int result;\n  if (w == 0 && z == 0) {\n    if (y != 0 || x != 0) {\n      result = -1;\n    }\n    else {\n      result = x;\n    }\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "check_params_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "puVar1": "time_in_ms_ptr",
                "puVar2": "system_data_ptr",
                "iVar3": "var_5",
                "iVar4": "var_6",
                "iVar5": "var_7",
                "iVar6": "var_8"
            },
            "code": "void initialize_system_00080ae4(void)\n{\n  uint *time_in_ms_ptr;\n  undefined4 *system_data_ptr;\n  int i;\n  int num_iterations;\n  int var_5;\n  int var_6;\n  int var_7;\n  int var_8;\n  time_in_ms_ptr = time_in_ms_ptr_global;\n  initialize_time();\n  system_data_ptr = system_data_ptr_global;\n  system_data_ptr[1] = *time_in_ms_ptr / 1000 - 1;\n  *(undefined *)(system_data_ptr_global + 0x23) = 0xf0;\n  system_data_ptr[2] = 0;\n  *system_data_ptr = 7;\n  initialize_network();\n  num_iterations = 0;\n  do {\n    var_8 = num_iterations + 1;\n    initialize_system_00080ae4_data(num_iterations, 0);\n    var_6 = system_data_ptr[3];\n    var_5 = system_data_ptr[4];\n    i = system_data_ptr[5];\n    var_7 = system_data_ptr[6];\n    num_iterations = var_8;\n  } while (var_8 != 0x4f);\n  *(undefined4 *)(i + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_7 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_6 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_5 + 0xa0) = 0xffffffff;\n  initialize_system_00080ae4_data(i, 1, 0x300, 0);\n  initialize_system_00080ae4_data(0, 1);\n  initialize_system_00080ae4_data(i, 1, 0xc00, 0);\n  initialize_system_00080ae4_data(i, 1, 0x3000, 0);\n  initialize_system_00080ae4_data(var_5, 2, 0x30, 0);\n  initialize_system_00080ae4_data(var_7, 1, 0xc00, 0);\n  initialize_system_00080ae4_data(i, 1, 3, 0);\n  initialize_system_00080ae4_data(var_7, 1, 0xc000, 0);\n  initialize_led(0x25);\n  initialize_network_connection(system_data_ptr_global + 0x8, *time_in_ms_ptr, system_data_ptr_global + 0x4, 0xc);\n  initialize_network_data(system_data_ptr_global + 0x8, 0, 0x300000, 1);\n  initialize_network_data(system_data_ptr_global + 0x8, 0, 0);\n  initialize_network_data(system_data_ptr_global + 0x8, 0xffffffff);\n  initialize_network_data(system_data_ptr_global + 0x8);\n  return;\n}",
            "called": [
                "FUN_0008106e",
                "FUN_00081042",
                "FUN_00080e18",
                "FUN_00081034",
                "FUN_00081066",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00080f9c",
                "FUN_00081d7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "add_to_buffer_00081d5c",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_index",
                "iVar3": "buffer_start",
                "uVar4": "buffer_bitmask"
            },
            "code": "uint32_t add_to_buffer_00081d5c(uint32_t data_1, uint32_t data_2, uint32_t data_3)\n{\n  uint32_t *buffer_ptr;\n  uint32_t buffer_index;\n  uint32_t buffer_bitmask;\n  int buffer_start = *(int *)PTR_DAT_0008396c;\n  buffer_ptr = *(uint32_t **)(buffer_start + 0x148);\n  if (buffer_ptr == (uint32_t *)0x0) {\n    buffer_ptr = (uint32_t *)(buffer_start + 0x14c);\n    *(uint32_t **)(buffer_start + 0x148) = buffer_ptr;\n  }\n  buffer_index = buffer_ptr[1];\n  if (buffer_index > 31) {\n    if ((DAT_00083970 == 0) || (buffer_ptr = (uint32_t *)FUN_00081df4(400), buffer_ptr == (uint32_t *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_ptr = *(uint32_t *)(buffer_start + 0x148);\n    buffer_ptr[1] = 0;\n    buffer_index = 0;\n    *(uint32_t **)(buffer_start + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  buffer_bitmask = 1 << (buffer_index & 0xff);\n  buffer_ptr[buffer_index + 0x22] = data_1;\n  buffer_ptr[0x62] |= buffer_bitmask;\n  buffer_ptr[buffer_index + 0x42] = data_3;\n  buffer_ptr[99] |= buffer_bitmask;\n  buffer_ptr[1] = buffer_index + 1;\n  buffer_ptr[buffer_index + 2] = data_2;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "process_data_00082970",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void process_data_00082970(int *output_value, undefined4 input_value)\n{\n  undefined *data_pointer;\n  int result;\n  data_pointer = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  result = validate_input(input_value);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output_value = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "process_data_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be"
            },
            "code": "int return_one_000811be(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "swap_parameters_00081c54",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "FUN_00081c5c": "swap"
            },
            "code": "void swap_parameters_00081c54(int* first_parameter, int* second_parameter) {\n    swap(first_parameter, second_parameter);\n    return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "swap_parameters_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "check_if_param_valid_0008163a",
                "param_1": "param_array",
                "param_2": "param_size",
                "*param_1": "*param_array",
                "iVar1": "result",
                "FUN_00081622": "some_other_function",
                "DAT_0008162e": "some_data",
                "PTR_00081632": "some_pointer"
            },
            "code": "int check_if_param_valid_0008163a(int *param_array, uint param_size) {\n  int first_elem = param_array[0];\n  uint second_elem = (uint)param_array[1];\n  if (first_elem == 0 || second_elem < param_size) {\n    int result = FUN_00081622(param_array);\n    if (result == 0) {\n      return 0;\n    }\n    if (param_array[2] == 0) {\n      *(undefined *)*param_array = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "check_if_param_valid_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "call_func_with_params_000825a0",
                "param_1": "param_1",
                "param_2": "param_2",
                "*DAT_000825ac": "ptr_data",
                "FUNC_000825b0": "call_func"
            },
            "code": "void call_func_with_params_000825a0(const int* *DAT_000825ac, const int param_1, const int param_2)\n{\n  FUNC_000825b0(**DAT_000825ac, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "call_func_with_params_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "set_pointer_and_value_000815d4",
                "param_1": "pointer_to_array",
                "param_2": "value",
                "*param_1": "*pointer_to_array",
                "PTR_PTR_FUN_00081454_1_000815f4": "PTR_PTR_FUNCTION_START",
                "param_1[9]": "pointer_to_array[9]"
            },
            "code": "undefined4* set_pointer_and_value_000815d4(undefined4* pointer_to_array, undefined4 value){\n  initialize();\n  *pointer_to_array = PTR_PTR_FUN_00081454_1_000815f4;\n  pointer_to_array[9] = value;\n  return pointer_to_array;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "set_pointer_and_value_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00081df4"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "*param_1": "**data",
                "puVar1": "data_ptr",
                "iVar2": "status",
                "PTR_DAT_000801ac": "PTR_DAT",
                "code": "function_pointer",
                "byte": "data_byte",
                "FUN_00081210": "process_data_part1",
                "FUN_00081318": "process_data_part2"
            },
            "code": "void process_data_00080164(int **data)\n{\n  undefined *data_ptr;\n  int status;\n  data_ptr = PTR_DAT_000801ac_000801ac;\n  *data = (int *)PTR_DAT_000801ac_000801ac;\n  (**(code **)(*(int *)data_ptr + 0x18))(PTR_DAT_000801ac_000801ac);\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_00080164_part1(*(byte *)((int)data + 6),1);\n    process_data_00080164_part2(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    status = (**(code **)(**data + 0xc))();\n  } while (-1 < status);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "process_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "reverse_and_clear_bits_000811cc",
                "param_1": "ptr_1",
                "param_2": "offset",
                "param_3": "num_bits",
                "iVar1": "i"
            },
            "code": "uint reverse_and_clear_bits_000811cc(undefined4 ptr_1, int offset, uint num_bits)\n{\n  int i = 0;\n  for (i = 0; i < (int)num_bits; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(offset + i);\n  }\n  return num_bits & ~((int)num_bits >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "reverse_and_clear_bits_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "get_value_if_error_000846dc",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "pointer_to_data",
                "iVar2": "result"
            },
            "code": "void get_value_if_error_000846dc(int *output_value, undefined4 input_value) {\n  undefined *pointer_to_data = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  int result = calculate_input_value(input_value);\n  if ((result == -1) && (*(int *)pointer_to_data != 0)) {\n    *output_value = *(int *)pointer_to_data;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "get_value_if_error_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_hash_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "overflow",
                "shifted_input": "shifted_input",
                "shifted_zero": "shifted_zero",
                "result": "result",
                "shifted_right": "shifted_right",
                "shifted_overflow": "shifted_overflow"
            },
            "code": "uint calculate_hash_00081894(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint overflow = (uint)(0x7fffffff < shifted_zero);\n    uint result = multiplier + shifted_input + shifted_zero + overflow;\n    if ((shifted_zero & 0x80000000) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_right = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff));\n  int shifted_overflow = (int)(shifted_input >> 0x1f);\n  uint result = multiplier + (shifted_right - shifted_overflow);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_hash_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_to_memory_000845bc",
                "param_1": "memory",
                "param_2": "byte",
                "param_3": "memory_size",
                "*param_1": "*memory",
                "*param_2": "*byte"
            },
            "code": "int write_byte_to_memory_000845bc(uint8_t *memory, uint8_t byte, uint memory_size) {\n                      if (memory == NULL) {\n                          return 0;\n                      }\n                      if (memory_size < 256) {\n                          *memory = byte;\n                          return 1;\n                      }\n                      *memory = 0x8a;\n                      return -1;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "write_byte_pattern_to_buffer_00082504",
                "param_1": "buffer",
                "param_2": "byte_pattern",
                "param_3": "buffer_size",
                "puVar1": "current_buffer",
                "puVar2": "end_buffer",
                "uVar3": "pattern",
                "uVar4": "remaining_buffer_size",
                "bVar5": "is_buffer_size_zero",
                "LAB_00082580": "write_remaining_bytes"
            },
            "code": "void write_byte_pattern_to_buffer_00082504(uint32_t *buffer, uint8_t byte_pattern, uint32_t buffer_size)\n{\n  uint32_t *current_buffer = buffer;\n  uint32_t *end_buffer = buffer + (buffer_size / 4);\n  uint32_t pattern = byte_pattern << 24 | byte_pattern << 16 | byte_pattern << 8 | byte_pattern;\n\n  while (current_buffer < end_buffer) {\n    *current_buffer++ = pattern;\n  }\n\n  uint8_t *current_byte = (uint8_t *)current_buffer;\n  while (current_byte < (uint8_t *)buffer + buffer_size) {\n    *current_byte++ = byte_pattern;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "write_byte_pattern_to_buffer_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_and_return_value_if_not_empty_string_000800f4",
                "param_1": "value_to_check",
                "PTR_DAT_0008010c": "PTR_TO_FLAG",
                "DAT_00080110": "DAT_HAS_VALUE",
                "DAT_00080114": "VALUE_TO_RETURN"
            },
            "code": "undefined4 check_and_return_value_if_not_empty_string_000800f4(undefined4 value_to_check) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110) {\\n      value_to_check = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return value_to_check;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_value_if_not_empty_string_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "data",
                "param_2": "data_length",
                "iVar1": "result",
                "iVar2": "temp_result",
                "local_488": "buffer_array",
                "local_480": "buffer_size",
                "local_47c": "data_masked",
                "local_47a": "data_short",
                "local_478": "buffer_pointer",
                "local_474": "buffer_param2",
                "local_470": "buffer_param1",
                "local_46c": "buffer_param3",
                "local_464": "buffer_param4",
                "local_424": "buffer_param5",
                "auStack_420": "buffer_stack",
                "FUNC_00082b38": "function1",
                "FUN_00083adc": "function2"
            },
            "code": "int process_data_0008378c(undefined4 data, int data_length)\n{\n    int result;\n    int temp_result;\n    undefined *buffer_array[2];\n    undefined4 buffer_size;\n    ushort data_masked;\n    undefined2 data_short;\n    undefined *buffer_pointer;\n    undefined4 buffer_param1;\n    undefined4 buffer_param2;\n    undefined4 buffer_param3;\n    undefined4 buffer_param4;\n    undefined4 buffer_param5;\n    undefined buffer_stack[1024];\n\n    buffer_param5 = *(undefined4 *)(data_length + 100);\n    buffer_param3 = *(undefined4 *)(data_length + 0x1c);\n    data_short = *(undefined2 *)(data_length + 0xe);\n    buffer_param4 = *(undefined4 *)(data_length + 0x24);\n    buffer_array[0] = buffer_stack;\n    data_masked = *(ushort *)(data_length + 0xc) & 0xfffd;\n    buffer_size = 0x400;\n    buffer_param2 = 0x400;\n    buffer_param1 = 0;\n    buffer_pointer = buffer_array[0];\n    result = FUNC_00082b38(data, buffer_array);\n    if ((-1 < result) && (temp_result = function2(data, buffer_array), temp_result != 0)) {\n        result = -1;\n    }\n    if ((int)((uint)data_masked << 0x19) < 0) {\n        *(ushort *)(data_length + 0xc) = *(ushort *)(data_length + 0xc) | 0x40;\n    }\n    return result;\n}",
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "current_output_buffer",
                "iVar2": "current_input_buffer_size",
                "uVar3": "buffer_size",
                "uVar4": "processed_bytes",
                "iVar5": "bytes_processed",
                "pcVar6": "process_bytes",
                "unaff_r4": "result",
                "iVar7": "current_output_buffer_start"
            },
            "code": "undefined4 process_data_00083adc(int *input_buffer, int *output_buffer)\n{\n    int *current_output_buffer;\n    int current_input_buffer_size;\n    int current_output_buffer_size;\n    int bytes_processed;\n    code *process_bytes;\n    undefined4 result;\n\n    if ((input_buffer != NULL) && (input_buffer[14] == 0)) {\n        initialize_input_buffer();\n    }\n\n    if (*(short *)(output_buffer + 6) == 0) {\n        return 0;\n    }\n\n    ushort buffer_size = *(ushort *)(output_buffer + 6);\n\n    if ((int)((uint)buffer_size << 0x1c) < 0) {\n\n        int current_output_buffer_start = output_buffer[4];\n\n        if (current_output_buffer_start == 0) {\n            return 0;\n        }\n\n        int current_input_buffer_start = *output_buffer;\n        int current_input_buffer_offset = 0;\n\n        if ((buffer_size & 3) == 0) {\n            current_input_buffer_offset = output_buffer[5];\n        }\n\n        *output_buffer = current_output_buffer_start;\n        current_input_buffer_size = current_input_buffer_start - current_output_buffer_start;\n        output_buffer[2] = current_input_buffer_offset;\n\n        do {\n            if (current_input_buffer_size < 1) {\n                return 0;\n            }\n            bytes_processed = (*(code *)output_buffer[9])(input_buffer, output_buffer[7], current_output_buffer_start, current_input_buffer_size, result);\n            current_input_buffer_size -= bytes_processed;\n            current_output_buffer_start += bytes_processed;\n        } while (0 < bytes_processed);\n\n        *(ushort *)(output_buffer + 6) = *(ushort *)(output_buffer + 6) | 0x40;\n        return 0xffffffff;\n    }\n\n    *(ushort *)(output_buffer + 6) = buffer_size | 0x800;\n\n    if ((output_buffer[1] < 1) && (output_buffer[15] < 1)) {\n        return 0;\n    }\n\n    process_bytes = (code *)output_buffer[10];\n\n    if (process_bytes == NULL) {\n        return 0;\n    }\n\n    uint processed_bytes = (uint)(buffer_size | 0x800);\n    int current_input_buffer_start = *input_buffer;\n    *input_buffer = 0;\n\n    if ((buffer_size & 0x1000) == 0) {\n        bytes_processed = (*process_bytes)(input_buffer, output_buffer[7], processed_bytes & 0x1000, 1);\n        if ((bytes_processed == -1) && (*input_buffer != 0)) {\n            if ((*input_buffer == 0x1d) || (*input_buffer == 0x16)) {\n                *input_buffer = current_input_buffer_start;\n                return 0;\n            }\n            *(ushort *)(output_buffer + 6) = *(ushort *)(output_buffer + 6) | 0x40;\n            return 0xffffffff;\n        }\n        buffer_size = *(ushort *)(output_buffer + 6);\n        process_bytes = (code *)output_buffer[10];\n    }\n    else {\n        bytes_processed = output_buffer[20];\n    }\n\n    if (((int)(buffer_size << 0x1d) < 0) && (bytes_processed = bytes_processed - output_buffer[1], output_buffer[12] != 0)) {\n        bytes_processed = bytes_processed - output_buffer[15];\n    }\n\n    bytes_processed = (*process_bytes)(input_buffer, output_buffer[7], bytes_processed, 0);\n\n    if (bytes_processed == -1) {\n        int input_buffer_status = *input_buffer;\n\n        if (input_buffer_status != 0) {\n            if ((input_buffer_status != 0x1d) && (input_buffer_status != 0x16)) {\n                *(ushort *)(output_buffer + 6) = *(ushort *)(output_buffer + 6) | 0x40;\n                return 0xffffffff;\n            }\n            *(ushort *)(output_buffer + 6) = *(ushort *)(output_buffer + 6) & 0xf7ff;\n            *output_buffer = output_buffer[4];\n            output_buffer[1] = 0;\n            goto LAB_00083a00;\n        }\n        buffer_size = *(ushort *)(output_buffer + 6) & 0xf7ff;\n        output_buffer[1] = 0;\n        *(ushort *)(output_buffer + 6) = buffer_size;\n        *output_buffer = output_buffer[4];\n    }\n    else {\n        buffer_size = *(ushort *)(output_buffer + 6) & 0xf7ff;\n        *output_buffer = output_buffer[4];\n        *(ushort *)(output_buffer + 6) = buffer_size;\n        output_buffer[1] = 0;\n    }\n\n    if ((int)((uint)buffer_size << 0x13) < 0) {\n        output_buffer[20] = bytes_processed;\n    }\n\nLAB_00083a00:\n    current_output_buffer = (int *)output_buffer[12];\n    *input_buffer = current_input_buffer_start;\n\n    if (current_output_buffer == NULL) {\n        return 0;\n    }\n\n    if (current_output_buffer != output_buffer + 16) {\n        free_data(input_buffer);\n    }\n\n    output_buffer[12] = 0;\n    return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "process_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00082438(piVar9,param_2);\n      }\n      FUN_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_byte_at_offset_000803d4",
                "param_1": "offset",
                "iVar1": "i"
            },
            "code": "int check_byte_at_offset_000803d4(int offset) {\n  int i = 0;\n  if ((int)((uint)*(byte *)(offset + 10) << 0x18) < 0) {\n    *(short *)(offset + 0x54) += 1;\n    return 0xfb;\n  }\n  while (i != 8) {\n    if (PTR_DAT_0008040c[i] == *(byte *)(offset + 10)) {\n      return 0;\n    }\n    i += 1;\n  }\n  *(short *)(offset + 0x54) += 1;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_byte_at_offset_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "check_param_0008043e",
                "param_1": "param_list",
                "cVar1": "result",
                "uVar2": "ret_val",
                "piVar3": "ptr",
                "iVar4": "ret_val_2",
                "unaff_r6": "byte_49",
                "thunk_FUNC_00081714": "thunk_func",
                "FUN_000801b0": "function_1",
                "FUN_000803d4": "function_2"
            },
            "code": "int check_param_0008043e(int **param_list)\n{\n    char result = 0;\n    char byte_5 = *(byte *)((int)param_list + 5);\n    uint ret_val = 0;\n    int *ptr = (int *)thunk_FUNC_00081714();\n    uint byte_49 = *(byte *)((int)param_list + 0x49);\n\n    if (byte_5 < 4) {\n        ret_val = (**(code **)(**param_list + 8))() & 0xff;\n    }\n    if (param_list[0x17] < ptr) {\n        *(undefined *)(param_list + 2) = 0xff;\n        *(undefined *)((int)param_list + 7) = 0;\n        *(short *)(param_list + 0x15) = *(short *)(param_list + 0x15) + 1;\n    }\n    else if (7 < byte_49) {\n        FUN_000801b0(param_list);\n        int ret_val_2 = FUN_000803d4(param_list);\n        if (ret_val_2 == 0) {\n            if (*(byte *)((int)param_list + 10) - 3 < 2) {\n                FUN_00080410(param_list);\n            }\n            *(undefined *)((int)param_list + 7) = 0;\n            result = byte_49;\n        }\n        else {\n            *(undefined *)((int)param_list + 7) = 0;\n            result = (char)ret_val_2;\n        }\n    }\n    return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_param_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_param_values_0008160c",
                "*param_1": "*param_array",
                "FUN_00081e04": "execute_reset",
                "param_1[2]": "param_array[2]",
                "param_1[1]": "param_array[1]"
            },
            "code": "void reset_param_values_0008160c(int *param_array)\n{\n    if (*param_array != 0) {\n        execute_reset();\n    }\n    *param_array = 0;\n    param_array[2] = 0;\n    param_array[1] = 0;\n    return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_param_values_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_character_00080e18",
                "param_1": "character",
                "uVar1": "mask"
            },
            "code": "int check_character_00080e18(uint character) {\n  uint mask;\n  if (character < 45) {\n    if (character < 32) {\n      mask = 1 << (character & 0xff);\n      if ((mask & *(uint *)(DAT_00080e58 + 0x18)) != mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = mask;\n      }\n    }\n    else {\n      mask = 1 << (character - 32 & 0xff);\n      if ((mask & *(uint *)(DAT_00080e58 + 0x108)) != mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_character_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "int32_t return_zero_00081184(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "return_zero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "get_data_at_ptr": "get_data_at_ptr",
                "DAT_000842a0": "data_ptr",
                "FUN_00084298": "get_data_at_ptr_00084298"
            },
            "code": "int get_data_at_ptr_00084298() {\n  return *DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_data_at_ptr_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_parameter_to_max_00081066",
                "param_1": "parameter"
            },
            "code": "void set_parameter_to_max_00081066(int parameter)\n{\n  *(unsigned int *)(parameter + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_parameter_to_max_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "calculate_value_00081cd0",
                "param_1": "input_value",
                "uVar1": "shift_amount_2",
                "uVar2": "uVar2",
                "shift_amount": "shift_amount",
                "shift_amount_2": "shift_amount_2",
                "shifted_value": "shifted_value"
            },
            "code": "uint calculate_value_00081cd0(uint input_value) {\n  uint shift_amount = input_value << 1;\n  if (shift_amount < 0x7f000000) {\n    return 0;\n  }\n  uint shift_amount_2 = shift_amount >> 0x18;\n  uint uVar2 = 0x9e - shift_amount_2;\n  if (shift_amount_2 < 0x9f && uVar2 != 0) {\n    uint shifted_value = (input_value << 8 | 0x80000000) >> (uVar2 & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((uVar2 == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_value_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "call_function_with_pointer_00081df4",
                "param_1": "parameter",
                "FUNC_00081e14": "function_pointer",
                "*DAT_00081e00": "pointer_to_function"
            },
            "code": "void call_function_with_pointer_00081df4(void* *DAT_00081e00, void* parameter){\n  FUNC_00081e14 = **DAT_00081e00;\n  FUNC_00081e14(parameter);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "call_function_with_pointer_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data_ptr",
                "param_2": "byte_val",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "iVar2": "ptr_offset",
                "bVar3": "byte_index",
                "uVar4": "byte_index",
                "iVar5": "int_ptr"
            },
            "code": "void process_data_00080410(int data_ptr, uint8_t byte_val, uint32_t param_3, uint32_t param_4)\n{\n  uint8_t byte_index = 0;\n  while(byte_index < (*(uint8_t *)(data_ptr + 0xb) >> 1)) {\n    uint32_t ptr_offset = (byte_index * 2 + 3 & 0xff) + data_ptr;\n    uint32_t int_ptr = *(uint32_t *)(data_ptr + 0x4c);\n    uint16_t result = process_byte(*(uint8_t *)(ptr_offset + 9), *(uint8_t *)(ptr_offset + 10), ptr_offset, *(uint8_t *)(data_ptr + 0xb), param_4);\n    *(uint16_t *)(int_ptr + byte_index * 2) = result;\n    byte_index++;\n  }\n  return;\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_input_00080da0",
                "param_1": "input_ptr",
                "param_2": "input_type",
                "param_3": "input_value",
                "param_4": "input_flag",
                "bVar1": "flag"
            },
            "code": "int process_input_00080da0(int input_ptr, int input_type, int input_value, unsigned int input_flag) {\n    bool flag;\n    switch(input_type) {\n        case 1:\n        case 2:\n            (*PTR_input_handler)(input_ptr, input_type, input_value);\n            flag = (int)(input_flag << 0x1f) < 0;\n            *(int *)(input_ptr + 0x44) = input_value;\n            if (flag) {\n                *(int *)(input_ptr + 100) = input_value;\n            }\n            if (!flag) {\n                *(int *)(input_ptr + 0x60) = input_value;\n            }\n            break;\n        case 3:\n            (*PTR_another_handler)(input_ptr, input_value, input_flag, PTR_another_handler, input_ptr);\n            break;\n        case 4:\n        case 5:\n            (*PTR_yet_another_handler)(input_ptr, input_value, input_type == 5, (input_flag << 0x1d) >> 0x1f, input_flag & 1, input_type, input_value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080d2e",
                "FUN_00080d54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "process_input_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "process_data_00080258",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "index",
                "uVar2": "result",
                "iVar3": "status"
            },
            "code": "void process_data_00080258(int **data, uint8_t data_size, uint32_t param_3, uint32_t param_4) {\n    uint8_t index = *(uint8_t *)((int)data + 0x49);\n    uint16_t result = calculate_result(data, index, data_size, param_3, param_4);\n    *(char *)((int)data + index + 9) = (char)(result >> 8);\n    *(char *)((int)data + ((index + 1) & 0xff) + 9) = (char)result;\n    *(uint8_t *)((int)data + 0x49) = index + 2;\n    if (data_size > 1) {\n        call_function_with_param(*(uint8_t *)((int)data + 6), 1);\n    }\n    if (data_size < 4) {\n        (**(code **)(**data + 4))(*data, (int)data + 9, *(undefined *)((int)data + 0x49));\n    }\n    if (data_size > 1) {\n        call_function_with_param(*(uint8_t *)((int)data + 6), 0);\n    }\n    if (data_size < 4) {\n        int status;\n        do {\n            status = (**(code **)(**data + 0xc))();\n        } while (status >= 0);\n    }\n    *(undefined *)((int)data + 0x49) = 0;\n    int new_address = get_new_address();\n    data[0x17] = (int *)(new_address + (uint16_t)*(uint16_t *)((int)data + 0x56));\n    *(uint16_t *)((int)data + 0x52) = *(uint16_t *)((int)data + 0x52) + 1;\n    return;\n}",
            "called": [
                "FUN_0008021c",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "process_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "update_param_and_index_00081622",
                "param_1": "param_ptr",
                "param_2": "new_param_value",
                "iVar1": "updated_param_value",
                "FUN_000825a0": "update_param",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "int update_param_and_index_00081622(int *param_ptr, int new_param_value, undefined4 param_3, undefined4 param_4)\n{\n  int updated_param_value;\n  updated_param_value = update_param(*param_ptr, new_param_value + 1, param_3, param_4, param_4);\n  if (updated_param_value != 0) {\n    *param_ptr = updated_param_value;\n    param_ptr[1] = new_param_value;\n    updated_param_value = 1;\n  }\n  return updated_param_value;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "update_param_and_index_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "start",
                "param_2": "end",
                "param_3": "size",
                "puVar2": "start_copy",
                "puVar3": "end_copy",
                "puVar4": "current_ptr",
                "uVar5": "remainder",
                "puVar6": "current_byte_ptr",
                "iVar1": "count"
            },
            "code": "void reverse_copy_00082438(undefined4 *start, undefined4 *end, uint size)\n{\n  int count;\n  undefined4 *start_copy;\n  undefined4 *end_copy;\n  undefined4 *current_ptr;\n  uint remainder;\n  undefined *current_byte_ptr;\n  \n  if ((end < start) && (end_copy = (undefined4 *)((int)end + size), start < end_copy)) {\n    current_byte_ptr = (undefined *)((int)start + size);\n    count = size - 1;\n    if (size != 0) {\n      do {\n        end_copy = (undefined4 *)((int)end_copy + -1);\n        count = count + -1;\n        current_byte_ptr = current_byte_ptr + -1;\n        *current_byte_ptr = *(undefined *)end_copy;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)start | (uint)end) & 3) == 0) {\n    end_copy = start;\n    start_copy = end;\n    do {\n      current_ptr = end_copy + 4;\n      *end_copy = *start_copy;\n      end_copy[1] = start_copy[1];\n      end_copy[2] = start_copy[2];\n      end_copy[3] = start_copy[3];\n      end_copy = current_ptr;\n      start_copy = start_copy + 4;\n    } while (current_ptr != (undefined4 *)((int)start + (size - 0x10 & 0xfffffff0) + 0x10));\n    count = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    end = end + count * 4;\n    start = start + count * 4;\n    size = remainder;\n    end_copy = start;\n    start_copy = end;\n    if (3 < remainder) {\n      do {\n        remainder = remainder - 4;\n        *end_copy = *start_copy;\n        end_copy = end_copy + 1;\n        start_copy = start_copy + 1;\n      } while (3 < remainder);\n      count = (size - 4 & 0xfffffffc) + 4;\n      start = (undefined4 *)((int)start + count);\n      end = (undefined4 *)((int)end + count);\n      size = size & 3;\n    }\n    if (size == 0) {\n      return;\n    }\n  }\n  current_byte_ptr = (undefined *)start;\n  do {\n    end_copy = (undefined4 *)((int)current_byte_ptr + 1);\n    *(undefined *)current_byte_ptr = *(undefined *)end;\n    end = (undefined4 *)((int)end + 1);\n    current_byte_ptr = (undefined *)end_copy;\n  } while (end_copy != (undefined4 *)(size + (int)start));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "set_up_data_00081508",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "flag",
                "puVar1": "data_size_ptr",
                "iVar2": "var1",
                "puVar3": "data_address_ptr"
            },
            "code": "void set_up_data_00081508(int data_address, uint data_size, undefined4 flag)\n{\n  uint *data_size_ptr;\n  int var1;\n  undefined4 *data_address_ptr;\n  \n  initialize_data(*(undefined4 *)(data_address + 0x20));\n  data_address_ptr = *(undefined4 **)(data_address + 0x18);\n  data_address_ptr[0x48] = 0x202;\n  *data_address_ptr = 0xac;\n  data_size_ptr = PTR_DAT_00081570;\n  data_address_ptr[1] = flag;\n  data_address_ptr[8] = *data_size_ptr / data_size >> 4;\n  data_address_ptr[3] = 0xffffffff;\n  data_address_ptr[2] = 0x61;\n  *(int *)(PTR_DAT_00081574 + ((uint)(int)(char)*(byte *)(data_address + 0x1c) >> 5) * 4) =\n       1 << (uint)(*(byte *)(data_address + 0x1c) & 0x1f);\n  var1 = *(int *)(data_address + 0x10);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  var1 = *(int *)(data_address + 0x14);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  *data_address_ptr = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "set_up_data_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "check_and_update_00083808",
                "param_1": "status",
                "param_2": "info",
                "uVar1": "status_shifted_anded",
                "iVar2": "info_4",
                "uVar3": "status_shifted",
                "uVar4": "status_value"
            },
            "code": "int check_and_update_00083808(uint16_t *status, int *info)\n{\n  uint16_t status_value = *(status + 3);\n  uint32_t status_shifted = (uint32_t)status_value;\n  int info_4 = info[4];\n\n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n\n  if ((int)(status_shifted << 0x1c) < 0) {\n    info_4 = info[4];\n  }\n  else {\n    if (-1 < (int)(status_shifted << 0x1b)) {\n      *status = 9;\n      *(status + 3) = status_value | 0x40;\n      return -1;\n    }\n    if ((int)(status_shifted << 0x1d) < 0) {\n      if ((int *)info[0xc] != (int *)0x0) {\n        if ((int *)info[0xc] != info + 0x10) {\n          FUN_00083d9c(status);\n          status_value = *(status + 3);\n        }\n        info[0xc] = 0;\n      }\n      info[0] = info_4;\n      info[1] = 0;\n      status_value = status_value & 0xffdb;\n    }\n    else {\n      info_4 = info[4];\n    }\n    *(status + 3) = status_value | 8;\n    status_shifted = (uint32_t)(status_value | 8);\n  }\n\n  if ((info_4 == 0) && ((status_shifted & 0x280) != 0x200)) {\n    FUN_000842a4(status, info);\n    status_shifted = (uint32_t)*(status + 3);\n    info_4 = info[4];\n  }\n\n  uint32_t status_shifted_anded = status_shifted & 1;\n  if (status_shifted_anded == 0) {\n    if (-1 < (int)(status_shifted << 0x1e)) {\n      status_shifted_anded = info[5];\n    }\n    info[2] = status_shifted_anded;\n  }\n  else {\n    info[6] = -info[5];\n    info[2] = 0;\n  }\n\n  if ((info_4 == 0) && ((int)(status_shifted << 0x18) < 0)) {\n    *(status + 3) = *(status + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "imported": false,
            "current_name": "check_and_update_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "*(int *)(base_address + 0x14)"
            },
            "code": "void set_bit_at_position_0008105c(int base_address, uint8_t bit_position) {\n    uint8_t bit_mask = 1 << (bit_position & 0xff);\n    *(int *)(base_address + 0x14) = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "data_buffer",
                "param_2": "buffer_size",
                "param_3": "data_type",
                "param_4": "output_buffer",
                "uVar1": "data_processing_result",
                "iVar2": "processing_status",
                "pcVar3": "data_processor",
                "auStack_24": "unused_stack_space"
            },
            "code": "void process_data_0008456c(int* data_buffer, int buffer_size, int data_type, int* output_buffer) {\n    code* data_processor = *(code**)PTR_DATA_PROCESSOR;\n    undefined4 data_processing_result = FUN_PROCESS_DATA();\n    int processing_status = (*data_processor)(data_buffer, buffer_size, data_type, data_processing_result, output_buffer);\n    if (processing_status == -1) {\n        *output_buffer = 0;\n        *data_buffer = 0x8a;\n    }\n    return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_flag_000811b4",
                "param_1": "data",
                "param_2": "flag",
                "*(undefined4 *)(param_2 + 4)": "*(data + 1)"
            },
            "code": "int set_flag_000811b4(int* data, int flag) {\n    *(data + 1) = 0x2000;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_flag_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_data_to_0x8000_000816d4",
                "DAT_000816dc": "data_address"
            },
            "code": "void set_data_to_0x8000_000816d4(void)\n{\n  int* data_ptr = (int*)(DAT_000816dc + 4);\n  *data_ptr = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_data_to_0x8000_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = FUN_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_0008234c",
                "FUN_00084384",
                "FUN_00082438",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_data_at_indexes_00080d7a",
                "param_1": "data_array",
                "param_2": "data",
                "param_3": "index1",
                "param_4": "index2",
                "param_5": "index3",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_data_at_indexes_00080d7a(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_data_at_indexes_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_data_00080e9c",
                "puVar1": "data_pointer",
                "iVar2": "data_offset",
                "DAT_00080f08": "data",
                "DAT_00080f0c": "data_offset",
                "DAT_00080f10": "initial_value_2",
                "DAT_00080f14": "initial_value_1",
                "DAT_00080f18": "initial_value_3",
                "DAT_00080f1c": "initial_value_4",
                "DAT_00080f20": "data_end_pointer"
            },
            "code": "void initialize_data_00080e9c()\n{\n  int* DAT_00080f08_pointer = DAT_00080f08;\n  *DAT_00080f08_pointer = 0x400;\n  DAT_00080f08_pointer[0x80] = 0x400;\n  int DAT_00080f0c = DAT_00080f08 + 0x0c;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(int *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    while (-1 < *(int *)(DAT_00080f0c + 0x68) << 0x1f);\n  }\n  *(int *)(DAT_00080f0c + 0x20) = DAT_00080f10;\n  while (-1 < *(int *)(DAT_00080f0c + 0x68) << 0xf);\n  *(unsigned int *)(DAT_00080f0c + 0x30) = *(unsigned int *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(DAT_00080f0c + 0x68) << 0x1c);\n  *(int *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  while (-1 < *(int *)(DAT_00080f0c + 0x68) << 0x1e);\n  *(unsigned int *)(DAT_00080f0c + 0x30) = 0x11;\n  while (-1 < *(int *)(DAT_00080f0c + 0x68) << 0x1c);\n  *(unsigned int *)(DAT_00080f0c + 0x30) = 0x12;\n  while (-1 < *(int *)(DAT_00080f0c + 0x68) << 0x1c);\n  *DAT_00080f20 = DAT_00080f1c;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_data_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar4": "input_ushort",
                "sVar1": "input_short",
                "puVar2": "data_pointer",
                "iVar3": "result"
            },
            "code": "void process_data_00084464(int *output, int input, undefined4 arg1, undefined4 arg2)\n{\n  short input_short = *(short *)(input + 0xe);\n  ushort input_ushort = *(ushort *)(input + 0xc);\n  if ((int)((uint)input_ushort << 0x17) < 0) {\n    FUN_00084700(output, input_short, 0, 2);\n    input_ushort = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = input_ushort & 0xefff;\n  undefined *data_pointer = PTR_DAT_000845fc;\n  *(undefined4 *)data_pointer = 0;\n  int result = FUN_000811cc((int)input_short, arg1, arg2, arg2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_max_unsigned_int_value_000811ae"
            },
            "code": "define unsigned int return_max_unsigned_int_value_000811ae(void) { return 0xffffffff; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "return_max_unsigned_int_value_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "new_value",
                "puVar1": "data_pointer",
                "iVar2": "current_sum"
            },
            "code": "int calculate_sum_0008118c(int new_value) {\n  undefined *data_pointer = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  int current_sum = *(int *)data_pointer;\n  *(int *)data_pointer = new_value + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "calculate_sum_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_from_uint_00082a50",
                "param_1": "input",
                "iVar1": "byte_count",
                "puVar2": "input_ptr",
                "uVar3": "current_word",
                "bVar4": "zero_byte_found"
            },
            "code": "int count_bytes_from_uint_00082a50(uint input) {\n  int byte_count = 0;\n  uint *input_ptr = (uint *)(input & 0xfffffffc);\n  int padding = -(input & 3);\n  uint current_word = *input_ptr;\n  if ((input & 3) != 0) {\n    current_word |= 0xffffffffU >> ((padding + 4U & 0x1f) << 3);\n  }\n  while (input_ptr++, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n    byte_count += 4;\n    current_word = *input_ptr;\n  }\n  bool zero_byte_found = (current_word & 0xff) == 0;\n  if (!zero_byte_found) {\n    byte_count++;\n    zero_byte_found = (current_word & 0xff00) == 0;\n  }\n  if (!zero_byte_found) {\n    byte_count++;\n    zero_byte_found = (current_word & 0xff0000) == 0;\n  }\n  if (!zero_byte_found) {\n    byte_count++;\n  }\n  return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "count_bytes_from_uint_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_param_at_offset_0008106e",
                "param_1": "base_address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)"
            },
            "code": "void set_param_at_offset_0008106e(int base_address, int offset, int value) {\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_param_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "return_zero_000811c2"
            },
            "code": "int32_t return_zero_000811c2(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "return_zero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "calculate_result_000811c6"
            },
            "code": "int calculate_result_000811c6(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "calculate_result_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "starting_address",
                "param_2": "size",
                "iVar1": "base_address",
                "puVar2": "new_ptr",
                "iVar3": "new_size",
                "uVar4": "aligned_size",
                "iVar5": "aligned_address"
            },
            "code": "int allocate_memory_00083d00(uint32_t starting_address, int size)\n{\n  int base_address = DAT_00083d90;\n  do_nothing_00082598();\n  uint32_t aligned_size = (*(uint32_t *)(*(int *)(base_address + 8) + 4) & 0xfffffffc);\n  int aligned_address = ((aligned_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < aligned_address) {\n    int allocated_address = FUN_00082970(starting_address,0);\n    if (allocated_address == *(int *)(base_address + 8) + aligned_size) {\n      allocated_address = FUN_00082970(starting_address,-aligned_address);\n      undefined *new_ptr = PTR_DAT_00083d94;\n      if (allocated_address != -1) {\n        int new_size = *(int *)PTR_DAT_00083d94;\n        *(uint32_t *)(*(int *)(base_address + 8) + 4) = aligned_size - aligned_address | 1;\n        *(int *)new_ptr = new_size - aligned_address;\n        do_nothing_0008259c(starting_address);\n        return 1;\n      }\n      aligned_address = FUN_00082970(starting_address,0);\n      new_ptr = PTR_DAT_00083d94;\n      uint32_t new_size = aligned_address - *(int *)(base_address + 8);\n      if (0xf < (int)new_size) {\n        int old_size = *DAT_00083d98;\n        *(uint32_t *)(*(int *)(base_address + 8) + 4) = new_size | 1;\n        *(int *)new_ptr = aligned_address - old_size;\n      }\n    }\n  }\n  do_nothing_0008259c(starting_address);\n  return 0;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083d00"
        }
    },
    "used_tokens": 102588,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00082ac0",
            "FUN_00080ce0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081c94",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_000846a4",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00081454",
            "FUN_00084728",
            "FUN_00083c40",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00083d9c",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00080d2e",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "FUN_00083974",
            "FUN_00084700",
            "thunk_FUN_00081714",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081e04",
            "FUN_00084750",
            "FUN_00080ae4",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_000803d4",
            "FUN_0008043e",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_00083d00"
        ]
    ],
    "locked_functions": []
}