{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_structures_00080164",
            "code": "\nvoid initializeDataStructures_00080164(int **dataStructure)\n\n{\n  int returnValue;\n  \n  *dataStructure = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataStructure + 6)) {\n    FUN_00081210(*(byte *)((int)dataStructure + 6),1);\n    FUN_00081318(*(undefined *)((int)dataStructure + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataStructure + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataStructure + 0x49) = 0;\n  *(undefined *)((int)dataStructure + 0x4a) = 0;\n  *(undefined2 *)(dataStructure + 0x15) = 0;\n  *(undefined2 *)((int)dataStructure + 0x52) = 0;\n  *(undefined2 *)(dataStructure + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_structures_00080164",
                "param_1": "dataStructure",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **inputArray)\n\n{\n  bool isOverflow;\n  undefined result;\n  char counter;\n  int status;\n  byte previousCounterValue;\n  \n  if (1 < *(byte *)((int)inputArray + 6)) {\n    FUN_00081318(*(byte *)((int)inputArray + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)inputArray + 0x49) = 0;\n  if (*(byte *)((int)inputArray + 5) < 4) {\n    while (status = (**(code **)(**inputArray + 8))(), status != 0) {\n      previousCounterValue = *(byte *)((int)inputArray + 0x49);\n      result = (**(code **)(**inputArray + 0xc))();\n      counter = *(char *)((int)inputArray + 0x49);\n      *(undefined *)((int)inputArray + previousCounterValue + 9) = result;\n      previousCounterValue = counter + 1;\n      *(byte *)((int)inputArray + 0x49) = previousCounterValue;\n      if (0x3f < previousCounterValue) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(inputArray + 0x14) = *(short *)(inputArray + 0x14) + 1;\n  if (isOverflow) {\n    counter = -3;\n    *(short *)(inputArray + 0x15) = *(short *)(inputArray + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)inputArray + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "inputArray",
                "bVar1": "isOverflow",
                "uVar2": "result",
                "cVar3": "counter",
                "iVar4": "status",
                "bVar5": "previousCounterValue"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_xor_checksum_0008021c",
            "code": "\nuint calculate_xor_checksum_0008021c(int start_index,uint length)\n\n{\n  int current_index;\n  uint checksum;\n  char loop_counter;\n  uint bit_value;\n  \n  checksum = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    loop_counter = '\\b';\n    do {\n      bit_value = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_value != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      loop_counter = loop_counter + -1;\n    } while (loop_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_xor_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "loop_counter",
                "uVar4": "bit_value"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_param1_00080258",
            "code": "\nvoid updateParam1_00080258(int **paramArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVar;\n  undefined2 ushortVar;\n  int intVar;\n  uint uintVar;\n  \n  byteVar = *(byte *)((int)paramArray + 0x49);\n  uintVar = (uint)byteVar;\n  ushortVar = FUN_0008021c(paramArray,uintVar,param3,param4,param4);\n  *(char *)((int)paramArray + uintVar + 9) = (char)((ushort)ushortVar >> 8);\n  *(char *)((int)paramArray + (uintVar + 1 & 0xff) + 9) = (char)ushortVar;\n  *(byte *)((int)paramArray + 0x49) = byteVar + 2;\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),1);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    (**(code **)(**paramArray + 4))(*paramArray,(int)paramArray + 9,*(undefined *)((int)paramArray + 0x49));\n  }\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),0);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    do {\n      intVar = (**(code **)(**paramArray + 0xc))();\n    } while (-1 < intVar);\n  }\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  intVar = thunk_FUN_00081714();\n  paramArray[0x17] = (int *)(intVar + (uint)*(ushort *)((int)paramArray + 0x56));\n  *(short *)((int)paramArray + 0x52) = *(short *)((int)paramArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_param1_00080258",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVar",
                "uVar2": "ushortVar",
                "iVar3": "intVar",
                "uVar4": "uintVar"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "initialize_device_000802da",
            "code": "\nint initializeDevice_000802da(int deviceAddress,uint configData,uint mode,ushort *dataPtr)\n\n{\n  char errorCode;\n  byte tempByte;\n  undefined tempUndefined;\n  ushort tempUshort;\n  uint tempUint;\n  ushort *tempUshortPtr;\n  undefined tempByte1;\n  undefined tempByte2;\n  ushort tempUshort1;\n  \n  tempByte1 = (undefined)configData;\n  tempByte2 = (undefined)(configData >> 8);\n  tempUshort1 = (ushort)mode;\n  tempUint = mode & 0xffff;\n  if (*(char *)(deviceAddress + 4) != '\\0') {\n    errorCode = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(deviceAddress + 7) != '\\0') {\n    errorCode = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((configData & 0xff) - 1 & 0xff)) {\n    errorCode = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(deviceAddress + 9) = tempByte1;\n  *(undefined *)(deviceAddress + 10) = tempByte2;\n  *(ushort **)(deviceAddress + 0x4c) = dataPtr;\n  *(char *)(deviceAddress + 0xb) = (char)(configData >> 0x18);\n  *(char *)(deviceAddress + 0xc) = (char)(configData >> 0x10);\n  tempUndefined = (undefined)(mode >> 8);\n  switch(tempByte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(deviceAddress + 0xd) = tempUndefined;\n    break;\n  case 5:\n    tempUshort = *dataPtr;\n    if (tempUshort != 0) {\n      tempUshort = 1;\n    }\n    *(char *)(deviceAddress + 0xd) = -(char)tempUshort;\n    tempUint = 0;\n    break;\n  case 6:\n    *(char *)(deviceAddress + 0xd) = (char)(*dataPtr >> 8);\n    tempUint = (uint)*dataPtr;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    tempByte = (byte)(tempUshort1 >> 3) & 0xfe;\n    if ((mode & 0xf) != 0) {\n      tempByte = tempByte + 1;\n    }\n    *(char *)(deviceAddress + 0xe) = (char)mode;\n    *(undefined *)(deviceAddress + 0xd) = tempUndefined;\n    *(byte *)(deviceAddress + 0xf) = tempByte;\n    tempUndefined = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(deviceAddress + 0xd) = tempUndefined;\n    *(char *)(deviceAddress + 0xe) = (char)mode;\n    dataPtr = dataPtr + -1;\n    *(char *)(deviceAddress + 0xf) = (char)tempUint * '\\x02';\n    *(undefined *)(deviceAddress + 0x49) = 7;\n    tempUshortPtr = dataPtr + tempUint;\n    while (dataPtr != tempUshortPtr) {\n      tempByte = *(byte *)(deviceAddress + 0x49);\n      *(char *)(deviceAddress + (uint)tempByte + 9) = (char)(dataPtr[1] >> 8);\n      tempUint = tempByte + 1 & 0xff;\n      *(char *)(deviceAddress + 0x49) = (char)tempUint;\n      dataPtr = dataPtr + 1;\n      *(char *)(tempUint + deviceAddress + 9) = (char)*dataPtr;\n      *(byte *)(deviceAddress + 0x49) = tempByte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(deviceAddress + 0xe) = (char)tempUint;\n  tempUndefined = 6;\nLAB_0008034a:\n  *(undefined *)(deviceAddress + 0x49) = tempUndefined;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(deviceAddress);\n  *(undefined *)(deviceAddress + 7) = 1;\n  errorCode = '\\0';\nLAB_000803cc:\n  return (int)errorCode;\n}\n\n",
            "renaming": {
                "FUN_000802da": "initialize_device_000802da",
                "param_1": "deviceAddress",
                "param_2": "configData",
                "param_3": "mode",
                "param_4": "dataPtr",
                "cVar1": "errorCode",
                "bVar2": "tempByte",
                "uVar3": "tempUndefined",
                "uVar4": "tempUshort",
                "uVar5": "tempUint",
                "puVar6": "tempUshortPtr",
                "local_1c": "tempByte1",
                "local_1b": "tempByte2",
                "local_18": "tempUshort1"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int tempVar1;\n  byte counter;\n  uint convertedCounter;\n  int tempVar2;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPointer + 0xb) >> 1 <= convertedCounter) break;\n    tempVar1 = (convertedCounter * 2 + 3 & 0xff) + dataPointer;\n    tempVar2 = *(int *)(dataPointer + 0x4c);\n    result = FUN_000815f8(*(undefined *)(tempVar1 + 9),*(undefined *)(tempVar1 + 10),tempVar1,\n                         *(byte *)(dataPointer + 0xb),param4);\n    *(undefined2 *)(tempVar2 + convertedCounter * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "tempVar1",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "tempVar2"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_update_value_0008043e",
            "code": "\nint check_and_update_value_0008043e(int **input_param)\n\n{\n  char result;\n  uint status;\n  int *thunk_result;\n  int comparison_result;\n  uint unaff_r6;\n  \n  if (*(byte *)((int)input_param + 5) < 4) {\n    status = (**(code **)(**input_param + 8))();\n    unaff_r6 = status & 0xff;\n  }\n  thunk_result = (int *)thunk_FUN_00081714();\n  if (input_param[0x17] < thunk_result) {\n    *(undefined *)(input_param + 2) = 0xff;\n    *(undefined *)((int)input_param + 7) = 0;\n    *(short *)(input_param + 0x15) = *(short *)(input_param + 0x15) + 1;\n  }\n  else if (7 < unaff_r6) {\n    FUN_000801b0(input_param);\n    comparison_result = FUN_000803d4(input_param);\n    if (comparison_result == 0) {\n      if (*(byte *)((int)input_param + 10) - 3 < 2) {\n        FUN_00080410(input_param);\n      }\n      *(undefined *)((int)input_param + 7) = 0;\n      result = *(char *)((int)input_param + 0x49);\n    }\n    else {\n      *(undefined *)((int)input_param + 7) = 0;\n      result = (char)comparison_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_update_value_0008043e",
                "param_1": "input_param",
                "cVar1": "result",
                "uVar2": "status",
                "piVar3": "thunk_result",
                "iVar4": "comparison_result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int result;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  result = thunk_FUN_00081714();\n  DAT_200709e0 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070a48 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070934 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_200708c0 = result + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    trigger_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "software_interrupt": "trigger_software_interrupt",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "extract_data_000805d0",
            "code": "\n\n\nvoid extractData_000805d0(void)\n\n{\n  uint threshold;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int counter;\n  uint *ptr1;\n  undefined4 *ptr2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    threshold = thunk_FUN_00081714();\n    if (DAT_200708c8 < threshold) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptr2,ptr2[1],ptr2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (threshold = thunk_FUN_00081714(), DAT_200708c0 < threshold))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      counter = thunk_FUN_00081714();\n      DAT_200708c0 = counter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      threshold = thunk_FUN_00081714();\n      if (DAT_200708c0 < threshold) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      threshold = thunk_FUN_00081714();\n      if (DAT_200708c0 < threshold) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  threshold = thunk_FUN_00081714();\n  if (DAT_200709e0 < threshold) {\n    result1 = FUN_0008189c(DAT_20070940);\n    result2 = FUN_00081730(result1,DAT_200709c8);\n    result1 = DAT_200708c4;\n    DAT_20070930 = result2;\n    result3 = FUN_00081734(result2,DAT_200708c4);\n    result3 = FUN_00081944(result3,DAT_2007094c);\n    result3 = FUN_00081734(result3,DAT_20070914);\n    DAT_2007094c = result3;\n    result1 = FUN_00081730(result2,result1);\n    result1 = FUN_00081944(result1,DAT_200709c4);\n    result1 = FUN_00081730(result1,DAT_2007096c);\n    DAT_200709c4 = result1;\n    result4 = FUN_00081944(result2,DAT_20070a4c);\n    result4 = FUN_00081734(result4,result3);\n    FUN_00081734(result4,result1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = result2;\n    DAT_20070914 = result3;\n    DAT_2007096c = result1;\n    counter = thunk_FUN_00081714();\n    DAT_200709e0 = counter + DAT_20070970;\n  }\n  result1 = FUN_0008189c(DAT_20070970);\n  counter = FUN_00081ca8(DAT_2007091c,result1);\n  if (counter != 0) {\n    DAT_2007091c = result1;\n  }\n  counter = FUN_00081c94(DAT_2007091c,0);\n  if (counter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "extract_data_000805d0",
                "uVar1": "threshold",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "iVar6": "counter",
                "puVar7": "ptr1",
                "puVar8": "ptr2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_devices_00080c0c",
            "code": "\nvoid initializeDevices_00080c0c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,arg3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_devices_00080c0c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid checkAndExecuteFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_config_00080d2e",
            "code": "\nvoid updateConfig_00080d2e(int configPtr,undefined4 mode,uint newValue)\n\n{\n  uint result;\n  \n  *(uint *)(configPtr + 0x44) = newValue;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(configPtr + 0x70) & *(uint *)(configPtr + 0x70) & ~newValue;\n    break;\n  case 2:\n    result = *(uint *)(configPtr + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(configPtr + 0x70) = result;\nswitchD_00080d34_caseD_6:\n  *(uint *)(configPtr + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_config_00080d2e",
                "param_1": "configPtr",
                "param_2": "mode",
                "param_3": "newValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_function_parameters_00080d54",
            "code": "\nvoid setFunctionParameters_00080d54(undefined4 *outputArray,undefined4 valueToSet,uint flags)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = valueToSet;\n  if (isFlagSet) {\n    outputArray[0x19] = valueToSet;\n  }\n  if (!isFlagSet) {\n    outputArray[0x18] = valueToSet;\n  }\n  isFlagSet = (flags & 10) != 0;\n  if (isFlagSet) {\n    outputArray[8] = valueToSet;\n  }\n  if (!isFlagSet) {\n    outputArray[9] = valueToSet;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = valueToSet;\n  }\n  outputArray[5] = valueToSet;\n  *outputArray = valueToSet;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_function_parameters_00080d54",
                "param_1": "outputArray",
                "param_2": "valueToSet",
                "param_3": "flags",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_params_00080d7a",
            "code": "\nvoid updateParams_00080d7a(undefined4 *paramArray,undefined4 newValue,int condition1,int condition2,int condition3)\n\n{\n  paramArray[0x11] = newValue;\n  if (condition3 == 0) {\n    paramArray[0x18] = newValue;\n  }\n  else {\n    paramArray[0x19] = newValue;\n  }\n  if (condition2 == 0) {\n    paramArray[0x15] = newValue;\n  }\n  else {\n    paramArray[0x14] = newValue;\n  }\n  if (condition1 == 0) {\n    paramArray[0xd] = newValue;\n  }\n  else {\n    paramArray[0xc] = newValue;\n  }\n  paramArray[4] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_params_00080d7a",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_values_based_on_input_00080da0",
            "code": "\nundefined4 updateValuesBasedOnInput_00080da0(int objectPtr,int inputType,undefined4 newValue,uint inputBitmask)\n\n{\n  bool isNegative;\n  \n  switch(inputType) {\n  case 1:\n  case 2:\n    FUN_00080d2e(objectPtr,inputType,newValue);\n    isNegative = (int)(inputBitmask << 0x1f) < 0;\n    *(undefined4 *)(objectPtr + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(objectPtr + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(objectPtr + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_00080d54(objectPtr,newValue,inputBitmask,0x80d55,objectPtr);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(objectPtr,newValue,inputType == 5,(inputBitmask << 0x1d) >> 0x1f,inputBitmask & 1,inputType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_values_based_on_input_00080da0",
                "param_1": "objectPtr",
                "param_2": "inputType",
                "param_3": "newValue",
                "param_4": "inputBitmask",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint checkBitwiseIntersection_00080e04(int dataPointer,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(dataPointer + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(dataPointer + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "dataPointer",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_memory_location_00080f9c",
            "code": "\nundefined4 calculateMemoryLocation_00080f9c(undefined4 *memoryLocation,uint totalSize,int unitSize,int threshold)\n\n{\n  uint numUnits;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *memoryLocation = 1;\n  memoryLocation[1] = 0;\n  memoryLocation[0x48] = 0x202;\n  memoryLocation[0x41] = 0;\n  memoryLocation[0x45] = 0;\n  numUnits = totalSize / (uint)(unitSize * 2);\n  if (totalSize == unitSize * 2 * numUnits) {\n    numUnits = numUnits - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(threshold * (int)(((ulonglong)totalSize / (ulonglong)((numUnits + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      memoryLocation[1] = (index & 0xf) << 0x10 | (numUnits & 0xff) << 8 | memoryLocation[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_memory_location_00080f9c",
                "param_1": "memoryLocation",
                "param_2": "totalSize",
                "param_3": "unitSize",
                "param_4": "threshold",
                "uVar1": "numUnits",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_parameter_00081034",
            "code": "\nvoid updateParameter_00081034(int address,uint value,uint bitFlag)\n\n{\n  *(uint *)(address + 4) = value | *(uint *)(address + 4) | (bitFlag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_parameter_00081034",
                "param_1": "address",
                "param_2": "value",
                "param_3": "bitFlag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid updateFlags_00081042(int flagsAddress,uint mask,uint value1,uint value2)\n\n{\n  *(uint *)(flagsAddress + 4) =\n       value1 | *(uint *)(flagsAddress + 4) | (mask & 0xf) << 0x18 | (value2 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "flagsAddress",
                "param_2": "mask",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_at_index_0008105c",
            "code": "\nvoid setBitAtIndex_0008105c(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_at_index_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_to_maximum_00081066",
            "code": "\nvoid initializeValueToMaximum_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_to_maximum_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int object,undefined4 value)\n\n{\n  *(undefined4 *)(object + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "object",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nundefined4 initialize_00081184(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184",
                "return": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputNumber)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = inputNumber + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputNumber",
                "iVar1": "previousSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_value_000811ae",
            "code": "\nundefined4 get_default_value_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_value_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_application_000811be",
            "code": "\nundefined4 initializeApplication_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_application_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_application_000811c2",
            "code": "\nundefined4 initializeApplication_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_application_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_000811c6",
            "code": "\nundefined4 initialize_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_and_clear_bits_000811cc",
            "code": "\n\n\nuint copyAndClearBits_000811cc(undefined4 param_1,int source_address,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source_address + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_and_clear_bits_000811cc",
                "param_2": "source_address",
                "param_3": "num_bytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_variable_thunk_00081714",
            "code": "\nundefined4 getGlobalVariable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_params_00081210",
            "code": "\n\n\nint processParams_00081210(int input,int mode)\n\n{\n  int output;\n  uint uVar2;\n  undefined4 uVar3;\n  uint temp3;\n  byte byteValue1;\n  byte byteValue2;\n  int index1;\n  int index2;\n  \n  output = input;\n  if ((&DAT_00084d24)[input * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[input] & 0xf) == 4) {\n      output = FUN_0008105c(0x400c0000,(&DAT_00084d31)[input * 0x1c]);\n    }\n    byteValue2 = (&DAT_20070d94)[input];\n    byteValue1 = byteValue2 & 0xf;\n    if ((byteValue1 < 3) && (byteValue2 != 0)) {\n      if (byteValue1 == 2) {\n        if (mode == 0) {\n          return output;\n        }\n      }\n      else if (byteValue1 == 1) {\n        if (mode == 2) {\n          return output;\n        }\n      }\n      else if (byteValue1 == 3) {\n        if (mode == 1) {\n          return output;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        output = input * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + output));\n        output = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + output),3,\n                             *(undefined4 *)(&DAT_00084d1c + output),0);\n        byteValue2 = (&DAT_20070d94)[input] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return output;\n        }\n        output = input * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + output));\n        output = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + output),3,\n                             *(undefined4 *)(&DAT_00084d1c + output),1);\n        byteValue2 = (&DAT_20070d94)[input] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[input] = byteValue2;\n      return output;\n    }\n    index1 = input * 0x1c;\n    index2 = *(int *)(&DAT_00084d18 + index1);\n    if (byteValue2 >> 4 == 0) {\n      uVar3 = 4;\n    }\n    else {\n      uVar3 = 5;\n    }\n    output = FUN_00080da0(index2,uVar3,*(undefined4 *)(&DAT_00084d1c + index1),\n                         *(undefined4 *)(&DAT_00084d28 + index1));\n    (&DAT_20070d94)[input] = (&DAT_20070d94)[input] & 0xf0 | 3;\n    if (*(int *)(index2 + 0x18) == -1) {\n      uVar2 = *(uint *)(&DAT_00084d20 + index1);\n      if (0x2c < uVar2) {\n        return 1;\n      }\n      if (uVar2 < 0x20) {\n        uVar2 = 1 << (uVar2 & 0xff);\n        temp3 = _DAT_400e0618 & uVar2;\n        if (temp3 == uVar2) {\n          _DAT_400e0614 = temp3;\n        }\n      }\n      else {\n        uVar2 = 1 << (uVar2 - 0x20 & 0xff);\n        temp3 = _DAT_400e0708 & uVar2;\n        if (temp3 == uVar2) {\n          _DAT_400e0704 = temp3;\n        }\n      }\n      return 0;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00081210": "process_params_00081210",
                "param_1": "input",
                "param_2": "mode",
                "iVar1": "output",
                "uVar4": "temp3",
                "bVar5": "byteValue1",
                "bVar6": "byteValue2",
                "iVar7": "index1",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_settings_00081318",
            "code": "\nvoid updateSettings_00081318(int deviceIndex,int settingValue,undefined4 settingData)\n\n{\n  int result;\n  undefined4 settingValueCopy;\n  int settingAddress;\n  \n  if ((&DAT_00084d24)[deviceIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[deviceIndex] & 0xf) == 5) {\n      FUN_00081210(deviceIndex,1,settingData,5,deviceIndex,settingValue,settingData);\n    }\n    (&DAT_20070d94)[deviceIndex] = (&DAT_20070d94)[deviceIndex] & 0xf | (byte)(settingValue << 4);\n    settingAddress = *(int *)(&DAT_00084d18 + deviceIndex * 0x1c);\n    settingValueCopy = *(undefined4 *)(&DAT_00084d1c + deviceIndex * 0x1c);\n    result = FUN_00080e04(settingAddress,settingValueCopy);\n    if (result == 0) {\n      if (settingValue != 0) {\n        *(undefined4 *)(settingAddress + 100) = settingValueCopy;\n        return;\n      }\n      *(undefined4 *)(settingAddress + 0x60) = settingValueCopy;\n      return;\n    }\n    FUN_00080d7a(settingAddress,settingValueCopy,settingValue,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_settings_00081318",
                "param_1": "deviceIndex",
                "param_2": "settingValue",
                "param_3": "settingData",
                "iVar1": "result",
                "uVar2": "settingValueCopy",
                "iVar3": "settingAddress"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_is_zero_00081388",
            "code": "\nvoid execute_if_r_info_is_zero_00081388(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(code *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_param_000813a8",
            "code": "\nint initializeParam_000813a8(int param)\n\n{\n  FUN_00082504(param,0,0x80);\n  *(undefined4 *)(param + 0x80) = 0;\n  *(undefined4 *)(param + 0x84) = 0;\n  return param;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_param_000813a8",
                "param_1": "param"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_buffer_with_check_000813c2",
            "code": "\nvoid updateBufferWithCheck_000813c2(int buffer,undefined value)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = value;\n    *(uint *)(buffer + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_buffer_with_check_000813c2",
                "param_1": "buffer",
                "param_2": "value",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_result_000813e4",
            "code": "\nuint calculateResult_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_result_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPtr,undefined4 newValue)\n\n{\n  int ptrOffset;\n  uint updatedValue;\n  \n  ptrOffset = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrOffset + 0x84) == *(int *)(ptrOffset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptrOffset + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrOffset + 0x84) == updatedValue);\n    *(char *)(ptrOffset + *(int *)(ptrOffset + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "ptrOffset",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *functionParams,undefined4 param2,undefined param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  functionParams[1] = 0;\n  functionParams[2] = 1000;\n  functionParams[6] = param2;\n  *functionParams = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(functionParams + 7) = param3;\n  functionParams[4] = param5;\n  functionParams[8] = param4;\n  functionParams[5] = param6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "functionParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_memory_00081508",
            "code": "\nvoid initializeMemory_00081508(int baseAddress,uint pageSize,undefined4 initialValue)\n\n{\n  int tempVar1;\n  undefined4 *dataPtr;\n  \n  FUN_00080e18(*(undefined4 *)(baseAddress + 0x20));\n  dataPtr = *(undefined4 **)(baseAddress + 0x18);\n  dataPtr[0x48] = 0x202;\n  *dataPtr = 0xac;\n  dataPtr[1] = initialValue;\n  dataPtr[8] = relocationArray[6].r_offset / pageSize >> 4;\n  dataPtr[3] = 0xffffffff;\n  dataPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(baseAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(baseAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(baseAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(baseAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *dataPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_memory_00081508",
                "param_1": "baseAddress",
                "param_2": "pageSize",
                "param_3": "initialValue",
                "iVar1": "tempVar1",
                "puVar2": "dataPtr",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_pointer_000815d4",
            "code": "\nundefined4 * initializePointer_000815d4(undefined4 *outputPointer,undefined4 inputValue)\n\n{\n  FUN_000814e4();\n  *outputPointer = &PTR_FUN_00081454_1_000857d8;\n  outputPointer[9] = inputValue;\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_pointer_000815d4",
                "param_1": "outputPointer",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "execute_function_000815fe",
            "code": "\nundefined4 * executeFunction_000815fe(undefined4 *functionPointer)\n\n{\n  FUN_00081e04(*functionPointer);\n  return functionPointer;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "execute_function_000815fe",
                "param_1": "functionPointer"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_param_values_0008160c",
            "code": "\nvoid resetParamValues_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    FUN_00081e04();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_param_values_0008160c",
                "param_1": "param",
                "param_1[1]": "param[1]",
                "param_1[2]": "param[2]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_param_and_return_result_00081622",
            "code": "\nint updateParamAndReturnResult_00081622(int *paramArray,int paramValue,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*paramArray,paramValue + 1,param3,param4,param4);\n  if (result != 0) {\n    *paramArray = result;\n    paramArray[1] = paramValue;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_param_and_return_result_00081622",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_validity_0008163a",
            "code": "\nundefined4 checkValidity_0008163a(int *inputArray,uint valueToCompare)\n\n{\n  int result;\n  \n  if ((*inputArray == 0) || ((uint)inputArray[1] < valueToCompare)) {\n    result = FUN_00081622(inputArray);\n    if (result == 0) {\n      return 0;\n    }\n    if (inputArray[2] == 0) {\n      *(undefined *)*inputArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_validity_0008163a",
                "param_1": "inputArray",
                "param_2": "valueToCompare",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_array_0008165c",
            "code": "\nundefined4 * updateArray_0008165c(undefined4 *array,undefined4 value,undefined4 newValue)\n\n{\n  int checkResult;\n  \n  checkResult = FUN_0008163a(array,newValue);\n  if (checkResult == 0) {\n    FUN_0008160c(array);\n  }\n  else {\n    array[2] = newValue;\n    FUN_00082994(*array,value);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_array_0008165c",
                "param_1": "array",
                "param_2": "value",
                "param_3": "newValue",
                "iVar1": "checkResult"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_data_00081682",
            "code": "\nundefined4 * initializeData_00081682(undefined4 *data,int value)\n\n{\n  undefined4 result;\n  \n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  if (value != 0) {\n    result = FUN_00082a50(value);\n    FUN_0008165c(data,value,result);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_data_00081682",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_continuous_loop_000816a8",
            "code": "\nvoid runContinuousLoop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_continuous_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_000816d4",
            "code": "\n\n\nvoid initializeMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_data_value_00081714",
            "code": "\nundefined4 getGlobalDataValue_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_data_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculate_float_00081730(uint input_value,uint flag,undefined4 undefined,uint output_value)\n\n{\n  int shift_amount;\n  int temp_var;\n  uint input_xor_flag;\n  uint temp_var1;\n  uint input_shifted;\n  uint shifted_var;\n  uint difference;\n  bool is_equal;\n  \n  input_xor_flag = flag ^ 0x80000000;\n  input_shifted = input_value << 1;\n  is_equal = input_shifted == 0;\n  if (!is_equal) {\n    output_value = flag << 1;\n    is_equal = output_value == 0;\n  }\n  if (!is_equal) {\n    is_equal = input_shifted == output_value;\n  }\n  shift_amount = (int)input_shifted >> 0x18;\n  if (!is_equal) {\n    is_equal = shift_amount == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)output_value >> 0x18 == -1;\n  }\n  if (is_equal) {\n    temp_var = (int)(flag << 1) >> 0x18;\n    if (shift_amount == -1 || temp_var == -1) {\n      input_shifted = input_xor_flag;\n      if (shift_amount == -1) {\n        input_shifted = input_value;\n      }\n      if (shift_amount != -1 || temp_var != -1) {\n        input_xor_flag = input_shifted;\n      }\n      is_equal = (input_shifted & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input_xor_flag & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = input_shifted == input_xor_flag;\n      }\n      if (!is_equal) {\n        input_shifted = input_shifted | 0x400000;\n      }\n      return input_shifted;\n    }\n    if (((input_value ^ input_xor_flag) & 0x7fffffff) != 0) {\n      if (input_shifted == 0) {\n        input_value = input_xor_flag;\n      }\n      return input_value;\n    }\n    if (input_value != input_xor_flag) {\n      return 0;\n    }\n    if ((input_shifted & 0xff000000) == 0) {\n      input_xor_flag = input_value << 1;\n      if ((input_value & 0x80000000) != 0) {\n        input_xor_flag = input_xor_flag | 0x80000000;\n      }\n      return input_xor_flag;\n    }\n    if (input_shifted < 0xfe000000) {\n      return input_value + 0x800000;\n    }\n    input_value = input_value & 0x80000000;\nLAB_0008186a:\n    return input_value | 0x7f800000;\n  }\n  input_shifted = input_shifted >> 0x18;\n  output_value = output_value >> 0x18;\n  difference = output_value - input_shifted;\n  is_equal = difference != 0;\n  shifted_var = input_shifted;\n  if (is_equal && input_shifted <= output_value) {\n    shifted_var = input_shifted + difference;\n  }\n  if (is_equal && input_shifted <= output_value) {\n    input_xor_flag = input_xor_flag ^ input_value;\n  }\n  if (is_equal && input_shifted <= output_value) {\n    input_value = input_value ^ input_xor_flag;\n  }\n  if (is_equal && input_shifted <= output_value) {\n    input_xor_flag = input_xor_flag ^ input_value;\n  }\n  if (output_value < input_shifted) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_value;\n  }\n  input_shifted = input_value & 0xffffff | 0x800000;\n  if ((input_value & 0x80000000) != 0) {\n    input_shifted = -input_shifted;\n  }\n  temp_var1 = input_xor_flag & 0xffffff | 0x800000;\n  if ((input_xor_flag & 0x80000000) != 0) {\n    temp_var1 = -temp_var1;\n  }\n  if (shifted_var == difference) {\n    temp_var1 = temp_var1 ^ 0x800000;\n    if (shifted_var == 0) {\n      input_shifted = input_shifted ^ 0x800000;\n      shifted_var = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  input_shifted = input_shifted + ((int)temp_var1 >> (difference & 0xff));\n  temp_var1 = temp_var1 << (0x20 - difference & 0xff);\n  input_value = input_shifted & 0x80000000;\n  if ((int)input_shifted < 0) {\n    is_equal = temp_var1 != 0;\n    temp_var1 = -temp_var1;\n    input_shifted = -input_shifted - (uint)is_equal;\n  }\n  if (input_shifted < 0x800000) {\n    input_xor_flag = temp_var1 & 0x80000000;\n    temp_var1 = temp_var1 << 1;\n    input_shifted = input_shifted * 2 + (uint)(input_xor_flag != 0);\n    input_xor_flag = shifted_var - 2;\n    if ((input_shifted & 0x800000) == 0) {\n      difference = LZCOUNT(input_shifted) - 8;\n      input_shifted = input_shifted << (difference & 0xff);\n      if ((int)input_xor_flag < (int)difference) {\n        input_shifted = input_shifted >> (-(input_xor_flag - difference) & 0xff);\n      }\n      else {\n        input_shifted = input_shifted + (input_xor_flag - difference) * 0x800000;\n      }\n      return input_shifted | input_value;\n    }\n  }\n  else {\n    input_xor_flag = shifted_var - 1;\n    if (0xffffff < input_shifted) {\n      input_xor_flag = input_shifted & 1;\n      input_shifted = input_shifted >> 1;\n      temp_var1 = (uint)(input_xor_flag != 0) << 0x1f | temp_var1 >> 1;\n      input_xor_flag = shifted_var;\n      if (0xfd < shifted_var) goto LAB_0008186a;\n    }\n  }\n  input_shifted = input_shifted + input_xor_flag * 0x800000 + (uint)(0x7fffffff < temp_var1);\n  if (temp_var1 == 0x80000000) {\n    input_shifted = input_shifted & 0xfffffffe;\n  }\n  return input_shifted | input_value;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input_value",
                "param_2": "flag",
                "param_3": "undefined",
                "param_4": "output_value",
                "iVar1": "shift_amount",
                "iVar2": "temp_var",
                "uVar3": "input_xor_flag",
                "uVar4": "temp_var1",
                "uVar5": "input_shifted",
                "uVar6": "shifted_var",
                "uVar7": "difference",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_value_00081734",
            "code": "\nuint calculateFloatingPointValue_00081734(uint exponentBitsA,uint exponentBitsB,undefined4 signBitA,uint signBitB)\n\n{\n  int exponentShiftedA;\n  int exponentShiftedB;\n  uint fractionBitsA;\n  uint fractionBitsB;\n  uint difference;\n  uint shiftAmount;\n  bool isZero;\n  \n  fractionBitsB = exponentBitsA << 1;\n  isZero = fractionBitsB == 0;\n  if (!isZero) {\n    signBitB = exponentBitsB << 1;\n    isZero = signBitB == 0;\n  }\n  if (!isZero) {\n    isZero = fractionBitsB == signBitB;\n  }\n  exponentShiftedA = (int)fractionBitsB >> 0x18;\n  if (!isZero) {\n    isZero = exponentShiftedA == -1;\n  }\n  if (!isZero) {\n    isZero = (int)signBitB >> 0x18 == -1;\n  }\n  if (isZero) {\n    exponentShiftedB = (int)(exponentBitsB << 1) >> 0x18;\n    if (exponentShiftedA == -1 || exponentShiftedB == -1) {\n      fractionBitsB = exponentBitsB;\n      if (exponentShiftedA == -1) {\n        fractionBitsB = exponentBitsA;\n      }\n      if (exponentShiftedA != -1 || exponentShiftedB != -1) {\n        exponentBitsB = fractionBitsB;\n      }\n      isZero = (fractionBitsB & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (exponentBitsB & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = fractionBitsB == exponentBitsB;\n      }\n      if (!isZero) {\n        fractionBitsB = fractionBitsB | 0x400000;\n      }\n      return fractionBitsB;\n    }\n    if (((exponentBitsA ^ exponentBitsB) & 0x7fffffff) != 0) {\n      if (fractionBitsB == 0) {\n        exponentBitsA = exponentBitsB;\n      }\n      return exponentBitsA;\n    }\n    if (exponentBitsA != exponentBitsB) {\n      return 0;\n    }\n    if ((fractionBitsB & 0xff000000) == 0) {\n      fractionBitsB = exponentBitsA << 1;\n      if ((exponentBitsA & 0x80000000) != 0) {\n        fractionBitsB = fractionBitsB | 0x80000000;\n      }\n      return fractionBitsB;\n    }\n    if (fractionBitsB < 0xfe000000) {\n      return exponentBitsA + 0x800000;\n    }\n    exponentBitsA = exponentBitsA & 0x80000000;\nLAB_0008186a:\n    return exponentBitsA | 0x7f800000;\n  }\n  fractionBitsB = fractionBitsB >> 0x18;\n  signBitB = signBitB >> 0x18;\n  shiftAmount = signBitB - fractionBitsB;\n  isZero = shiftAmount != 0;\n  difference = fractionBitsB;\n  if (isZero && fractionBitsB <= signBitB) {\n    difference = fractionBitsB + shiftAmount;\n  }\n  if (isZero && fractionBitsB <= signBitB) {\n    exponentBitsB = exponentBitsB ^ exponentBitsA;\n  }\n  if (isZero && fractionBitsB <= signBitB) {\n    exponentBitsA = exponentBitsA ^ exponentBitsB;\n  }\n  if (isZero && fractionBitsB <= signBitB) {\n    exponentBitsB = exponentBitsB ^ exponentBitsA;\n  }\n  if (signBitB < fractionBitsB) {\n    shiftAmount = -shiftAmount;\n  }\n  if (0x19 < shiftAmount) {\n    return exponentBitsA;\n  }\n  fractionBitsB = exponentBitsA & 0xffffff | 0x800000;\n  if ((exponentBitsA & 0x80000000) != 0) {\n    fractionBitsB = -fractionBitsB;\n  }\n  fractionBitsA = exponentBitsB & 0xffffff | 0x800000;\n  if ((exponentBitsB & 0x80000000) != 0) {\n    fractionBitsA = -fractionBitsA;\n  }\n  if (difference == shiftAmount) {\n    fractionBitsA = fractionBitsA ^ 0x800000;\n    if (difference == 0) {\n      fractionBitsB = fractionBitsB ^ 0x800000;\n      difference = 1;\n    }\n    else {\n      shiftAmount = shiftAmount - 1;\n    }\n  }\n  fractionBitsB = fractionBitsB + ((int)fractionBitsA >> (shiftAmount & 0xff));\n  fractionBitsA = fractionBitsA << (0x20 - shiftAmount & 0xff);\n  exponentBitsA = fractionBitsB & 0x80000000;\n  if ((int)fractionBitsB < 0) {\n    isZero = fractionBitsA != 0;\n    fractionBitsA = -fractionBitsA;\n    fractionBitsB = -fractionBitsB - (uint)isZero;\n  }\n  if (fractionBitsB < 0x800000) {\n    shiftAmount = fractionBitsA & 0x80000000;\n    fractionBitsA = fractionBitsA << 1;\n    fractionBitsB = fractionBitsB * 2 + (uint)(shiftAmount != 0);\n    shiftAmount = difference - 2;\n    if ((fractionBitsB & 0x800000) == 0) {\n      difference = LZCOUNT(fractionBitsB) - 8;\n      fractionBitsB = fractionBitsB << (difference & 0xff);\n      if ((int)shiftAmount < (int)difference) {\n        fractionBitsB = fractionBitsB >> (-(shiftAmount - difference) & 0xff);\n      }\n      else {\n        fractionBitsB = fractionBitsB + (shiftAmount - difference) * 0x800000;\n      }\n      return fractionBitsB | exponentBitsA;\n    }\n  }\n  else {\n    shiftAmount = difference - 1;\n    if (0xffffff < fractionBitsB) {\n      shiftAmount = fractionBitsB & 1;\n      fractionBitsB = fractionBitsB >> 1;\n      fractionBitsA = (uint)(shiftAmount != 0) << 0x1f | fractionBitsA >> 1;\n      shiftAmount = difference;\n      if (0xfd < difference) goto LAB_0008186a;\n    }\n  }\n  fractionBitsB = fractionBitsB + shiftAmount * 0x800000 + (uint)(0x7fffffff < fractionBitsA);\n  if (fractionBitsA == 0x80000000) {\n    fractionBitsB = fractionBitsB & 0xfffffffe;\n  }\n  return fractionBitsB | exponentBitsA;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_value_00081734",
                "param_1": "exponentBitsA",
                "param_2": "exponentBitsB",
                "param_3": "signBitA",
                "param_4": "signBitB",
                "iVar1": "exponentShiftedA",
                "iVar2": "exponentShiftedB",
                "uVar3": "fractionBitsA",
                "uVar4": "fractionBitsB",
                "uVar5": "difference",
                "uVar6": "shiftAmount",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_bitwise_value_00081894",
            "code": "\nuint calculateBitwiseValue_00081894(uint input)\n\n{\n  uint updatedResult;\n  uint shiftAmount;\n  int constant;\n  uint result;\n  \n  if (input == 0) {\n    return 0;\n  }\n  updatedResult = LZCOUNT(input);\n  shiftAmount = updatedResult - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < updatedResult) {\n    result = 0 << (shiftAmount & 0xff);\n    updatedResult = constant + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < result);\n    if (result == 0x80000000) {\n      updatedResult = updatedResult & 0xfffffffe;\n    }\n    return updatedResult;\n  }\n  shiftAmount = input << updatedResult + 0x18;\n  updatedResult = constant + ((input >> (0x20 - (updatedResult + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    updatedResult = updatedResult & ~(shiftAmount >> 0x1f);\n  }\n  return updatedResult;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_bitwise_value_00081894",
                "param_1": "input",
                "uVar1": "updatedResult",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "count_leading_zeros_0008189c",
            "code": "\nuint countLeadingZeros_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftValue = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    signBit = result + (input << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftValue = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftValue >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "count_leading_zeros_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "signBit",
                "iVar4": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "float_to_binary_00081944",
            "code": "\nuint floatToBinary_00081944(uint floatA,uint floatB,undefined4 undefined4,uint floatFlag)\n\n{\n  longlong longValue;\n  uint finalResult;\n  uint floatFlagA;\n  int sum;\n  int difference;\n  uint tempResult;\n  int flag;\n  uint tempResult2;\n  bool flagA;\n  bool flagB;\n  \n  floatFlagA = floatA >> 0x17 & 0xff;\n  flagA = floatFlagA == 0;\n  if (!flagA) {\n    floatFlag = floatB >> 0x17 & 0xff;\n    flagA = floatFlag == 0;\n  }\n  if (!flagA) {\n    flagA = floatFlagA == 0xff;\n  }\n  if (!flagA) {\n    flagA = floatFlag == 0xff;\n  }\n  if (flagA) {\n    floatFlag = floatB >> 0x17 & 0xff;\n    if (floatFlagA == 0xff || floatFlag == 0xff) {\n      flagA = floatA == 0 || floatA == 0x80000000;\n      finalResult = floatB;\n      if (floatA != 0 && floatA != 0x80000000) {\n        flagA = floatB == 0;\n        finalResult = floatA;\n      }\n      if (!flagA) {\n        flagA = floatB == 0x80000000;\n      }\n      tempResult2 = finalResult;\n      if (((flagA) || ((floatFlagA == 0xff && ((finalResult & 0x7fffff) != 0)))) ||\n         ((floatFlag == 0xff && (tempResult2 = floatB, (floatB & 0x7fffff) != 0)))) {\n        return tempResult2 | 0x7fc00000;\n      }\n      finalResult = finalResult ^ floatB;\n      goto LAB_00081a94;\n    }\n    flagA = (floatA & 0x7fffffff) == 0;\n    if (!flagA) {\n      flagA = (floatB & 0x7fffffff) == 0;\n    }\n    if (flagA) {\n      return (floatA ^ floatB) & 0x80000000;\n    }\n    flagA = floatFlagA == 0;\n    finalResult = floatA & 0x80000000;\n    while( true ) {\n      if (flagA) {\n        floatA = floatA << 1;\n        flagA = (floatA & 0x800000) == 0;\n      }\n      if (!flagA) break;\n      floatFlagA = floatFlagA - 1;\n    }\n    floatA = floatA | finalResult;\n    flagA = floatFlag == 0;\n    finalResult = floatB & 0x80000000;\n    while( true ) {\n      if (flagA) {\n        floatB = floatB << 1;\n        flagA = (floatB & 0x800000) == 0;\n      }\n      if (!flagA) break;\n      floatFlag = floatFlag - 1;\n    }\n    floatB = floatB | finalResult;\n  }\n  sum = floatFlagA + floatFlag;\n  tempResult2 = floatA ^ floatB;\n  floatFlagA = floatA << 9;\n  flagA = floatFlagA == 0;\n  if (!flagA) {\n    floatB = floatB << 9;\n    flagA = floatB == 0;\n  }\n  if (flagA) {\n    if (floatFlagA == 0) {\n      floatB = floatB << 9;\n    }\n    finalResult = tempResult2 & 0x80000000 | floatA & 0x7fffff | floatB >> 9;\n    flagB = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    flagA = difference == 0;\n    flag = difference;\n    if (!flagA && 0x7e < sum) {\n      flagB = SBORROW4(0xff,difference);\n      flag = 0xff - difference;\n      flagA = difference == 0xff;\n    }\n    if (!flagA && flag < 0 == flagB) {\n      finalResult = finalResult | difference * 0x800000;\n    }\n    if (!flagA && flag < 0 == flagB) {\n      return finalResult;\n    }\n    finalResult = finalResult | 0x800000;\n    tempResult = 0;\n    flagB = SBORROW4(difference,1);\n    tempResult2 = sum - 0x80;\n    flagA = tempResult2 == 0;\n    floatFlagA = tempResult2;\n  }\n  else {\n    longValue = (ulonglong)(floatFlagA >> 5 | 0x8000000) * (ulonglong)(floatB >> 5 | 0x8000000);\n    tempResult = (uint)longValue;\n    finalResult = (uint)((ulonglong)longValue >> 0x20);\n    flagA = finalResult < 0x800000;\n    if (flagA) {\n      finalResult = finalResult << 1;\n    }\n    if (flagA) {\n      finalResult = finalResult | tempResult >> 0x1f;\n      tempResult = tempResult << 1;\n    }\n    finalResult = tempResult2 & 0x80000000 | finalResult;\n    tempResult2 = (sum + -0x7f) - (uint)flagA;\n    flagB = SBORROW4(tempResult2,0xfd);\n    flagA = tempResult2 == 0xfd;\n    floatFlagA = tempResult2 - 0xfd;\n    if (tempResult2 < 0xfe) {\n      finalResult = finalResult + tempResult2 * 0x800000 + (uint)(0x7fffffff < tempResult);\n      if (tempResult == 0x80000000) {\n        finalResult = finalResult & 0xfffffffe;\n      }\n      return finalResult;\n    }\n  }\n  if (flagA || (int)floatFlagA < 0 != flagB) {\n    flagA = (int)(tempResult2 + 0x19) < 0;\n    if (tempResult2 == 0xffffffe7 || flagA != SCARRY4(tempResult2,0x19)) {\n      finalResult = finalResult & 0x80000000;\n    }\n    if (tempResult2 != 0xffffffe7 && flagA == SCARRY4(tempResult2,0x19)) {\n      floatFlagA = (finalResult << 1) >> (-tempResult2 & 0xff);\n      tempResult2 = finalResult << (tempResult2 + 0x20 & 0xff);\n      floatFlagA = ((uint)((finalResult & 0x80000000) != 0) << 0x1f | floatFlagA >> 1) + (uint)((byte)floatFlagA & 1);\n      if ((tempResult | tempResult2 << 1) == 0) {\n        floatFlagA = floatFlagA & ~(tempResult2 >> 0x1f);\n      }\n      return floatFlagA;\n    }\n    return finalResult;\n  }\nLAB_00081a94:\n  return finalResult & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "float_to_binary_00081944",
                "param_1": "floatA",
                "param_2": "floatB",
                "param_3": "undefined4",
                "param_4": "floatFlag",
                "lVar1": "longValue",
                "uVar2": "finalResult",
                "uVar3": "floatFlagA",
                "uVar6": "tempResult",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "flag",
                "uVar8": "tempResult2",
                "bVar9": "flagA",
                "bVar10": "flagB"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_integer_overflow_00081bf4",
            "code": "\nuint checkIntegerOverflow_00081bf4(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint input1TimesTwo;\n  uint input2TimesTwo;\n  uint maskResult;\n  bool isZero;\n  \n  input1TimesTwo = input1 * 2;\n  input2TimesTwo = input2 * 2;\n  if (((int)input1TimesTwo >> 0x18 == -1 || (int)input2TimesTwo >> 0x18 == -1) &&\n     ((((int)input1TimesTwo >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2TimesTwo >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  maskResult = input1TimesTwo | input2 & 0x7fffffff;\n  isZero = maskResult == 0;\n  if (!isZero) {\n    maskResult = input1 ^ input2;\n    isZero = maskResult == 0;\n  }\n  isNegative = -1 < (int)maskResult;\n  if (isNegative) {\n    input1 = input1TimesTwo + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && input2TimesTwo <= input1TimesTwo) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || input2TimesTwo > input1TimesTwo) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_integer_overflow_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "input1TimesTwo",
                "uVar3": "input2TimesTwo",
                "uVar4": "maskResult",
                "bVar1": "isNegative",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "initialize_parameters_00081c54",
            "code": "\nvoid initializeParameters_00081c54(undefined4 destination,undefined4 source)\n\n{\n  FUN_00081c5c(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "initialize_parameters_00081c54",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_conditions_00081c94",
            "code": "\nbool checkConditions_00081c94(void)\n\n{\n  undefined isZeroFlagSet;\n  undefined isCarryFlagSet;\n  \n  FUN_00081c5c();\n  return !(bool)isCarryFlagSet || (bool)isZeroFlagSet;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_conditions_00081c94",
                "in_ZR": "isZeroFlagSet",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_conditions_00081ca8",
            "code": "\nbool check_conditions_00081ca8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c54();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_conditions_00081ca8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extract_signed_magnitude_00081cd0",
            "code": "\nuint extract_signed_magnitude_00081cd0(uint output_value)\n\n{\n  uint result;\n  uint difference;\n  \n  if (output_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  result = (output_value << 1) >> 0x18;\n  difference = 0x9e - result;\n  if (result < 0x9f && difference != 0) {\n    result = (output_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((output_value & 0x80000000) != 0) {\n      result = -result;\n    }\n    return result;\n  }\n  if ((difference == 0xffffff9f) && ((output_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  output_value = output_value & 0x80000000;\n  if (output_value == 0) {\n    output_value = 0x7fffffff;\n  }\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extract_signed_magnitude_00081cd0",
                "param_1": "output_value",
                "uVar1": "result",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "validate_unsigned_int_00081d1c",
            "code": "\nuint validateUnsignedInt_00081d1c(uint input)\n\n{\n  uint shiftedBits;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftedBits = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shiftedBits) {\n    return (input << 8 | 0x80000000) >> (shiftedBits & 0xff);\n  }\n  if ((shiftedBits == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "validate_unsigned_int_00081d1c",
                "param_1": "input",
                "uVar1": "shiftedBits"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newAddress,dword newValue,dword newOffset)\n\n{\n  dword *relocationEntry;\n  uint entryIndex;\n  uint flag;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)entryIndex) {\n    relocationEntry = (dword *)FUN_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    entryIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  flag = 1 << (entryIndex & 0xff);\n  relocationEntry[entryIndex + 0x22] = newAddress;\n  relocationEntry[0x62] = relocationEntry[0x62] | flag;\n  relocationEntry[entryIndex + 0x42] = newOffset;\n  relocationEntry[99] = flag | relocationEntry[99];\n  relocationEntry[1] = entryIndex + 1;\n  relocationEntry[entryIndex + 2] = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newAddress",
                "param_2": "newValue",
                "param_3": "newOffset",
                "pdVar1": "relocationEntry",
                "uVar2": "entryIndex",
                "uVar3": "flag"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_set_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctionSet_00081d7c(void)\n\n{\n  int counter;\n  code **functionArrayPtr;\n  \n  FUNC_00085858();\n  functionArrayPtr = (code **)0x85860;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    functionArrayPtr = functionArrayPtr + 1;\n    (**functionArrayPtr)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "iVar1": "counter",
                "ppcVar2": "functionArrayPtr"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "initialize_relocation_00081df4",
            "code": "\nvoid initializeRelocation_00081df4(undefined4 param)\n\n{\n  FUN_00081e14(relArray[140].offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "initialize_relocation_00081df4",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "apply_relocation_00081e04",
            "code": "\nvoid applyRelocation_00081e04(undefined4 input)\n\n{\n  FUN_00083d9c(relocationArray[140].r_offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "apply_relocation_00081e04",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *param_ptr,uint size)\n\n{\n  dword first_rel_offset;\n  int temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  int temp_var_4;\n  uint temp_var_5;\n  dword current_rel_offset;\n  uint temp_var_6;\n  int temp_var_7;\n  undefined *temp_pointer_1;\n  dword temp_rel_offset_1;\n  dword temp_rel_offset_2;\n  int temp_var_8;\n  dword *temp_pointer_2;\n  uint aligned_size;\n  undefined *temp_rel_pointer;\n  dword *temp_rel_pointer_2;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *param_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(param_ptr);\n  first_rel_offset = rel_array[142].r_info;\n  if (aligned_size < 0x1f8) {\n    temp_var_8 = *(int *)((int)&rel_array[0x8e].r_offset + aligned_size);\n    if ((temp_var_8 != aligned_size + 0x20070464) ||\n       (temp_var_1 = temp_var_8 + 8, temp_var_8 = *(int *)(temp_var_8 + 0x14), temp_var_1 != temp_var_8)) {\n      temp_var_4 = *(int *)(temp_var_8 + 0xc);\n      temp_var_7 = (*(uint *)(temp_var_8 + 4) & 0xfffffffc) + temp_var_8;\n      aligned_size = *(uint *)(temp_var_7 + 4);\n      temp_var_1 = *(int *)(temp_var_8 + 8);\n      *(int *)(temp_var_1 + 0xc) = temp_var_4;\n      *(int *)(temp_var_4 + 8) = temp_var_1;\n      *(uint *)(temp_var_7 + 4) = aligned_size | 1;\n      FUNC_0008259c(param_ptr);\n      return (int *)(temp_var_8 + 8);\n    }\n    index = (aligned_size >> 3) + 2;\n  }\n  else {\n    index = aligned_size >> 9;\n    if (index == 0) {\n      temp_var_1 = 0x7e;\n      temp_var_8 = 0x3f;\n    }\n    else if (index < 5) {\n      temp_var_8 = (aligned_size >> 6) + 0x38;\n      temp_var_1 = temp_var_8 * 2;\n    }\n    else if (index < 0x15) {\n      temp_var_8 = index + 0x5b;\n      temp_var_1 = temp_var_8 * 2;\n    }\n    else if (index < 0x55) {\n      temp_var_8 = (aligned_size >> 0xc) + 0x6e;\n      temp_var_1 = temp_var_8 * 2;\n    }\n    else if (index < 0x155) {\n      temp_var_8 = (aligned_size >> 0xf) + 0x77;\n      temp_var_1 = temp_var_8 * 2;\n    }\n    else if (index < 0x555) {\n      temp_var_8 = (aligned_size >> 0x12) + 0x7c;\n      temp_var_1 = temp_var_8 * 2;\n    }\n    else {\n      temp_var_1 = 0xfc;\n      temp_var_8 = 0x7e;\n    }\n    for (current_rel_offset = (&rel_array[0x8e].r_offset)[temp_var_1]; temp_var_1 * 4 + 0x20070464U != current_rel_offset\n        ; current_rel_offset = *(dword *)(current_rel_offset + 0xc)) {\n      index = *(uint *)(current_rel_offset + 4) & 0xfffffffc;\n      temp_var_4 = index - aligned_size;\n      if (0xf < temp_var_4) {\n        temp_var_8 = temp_var_8 + -1;\n        break;\n      }\n      if (-1 < temp_var_4) {\n        temp_var_1 = index + current_rel_offset;\n        aligned_size = *(uint *)(temp_var_1 + 4);\n        temp_var_4 = *(int *)(current_rel_offset + 0xc);\n        temp_var_8 = *(int *)(current_rel_offset + 8);\n        *(int *)(temp_var_8 + 0xc) = temp_var_4;\n        *(int *)(temp_var_4 + 8) = temp_var_8;\n        *(uint *)(temp_var_1 + 4) = aligned_size | 1;\n        FUNC_0008259c(param_ptr);\n        return (int *)(current_rel_offset + 8);\n      }\n    }\n    index = temp_var_8 + 1;\n  }\n  current_rel_offset = rel_array[141].r_offset;\n  if (rel_array[142].r_info != 0x2007046c) {\n    temp_var_2 = *(uint *)(rel_array[142].r_info + 4);\n    temp_var_3 = temp_var_2 & 0xfffffffc;\n    temp_var_5 = temp_var_3 - aligned_size;\n    if (0xf < (int)temp_var_5) {\n      current_rel_offset = aligned_size + rel_array[142].r_info;\n      *(uint *)(rel_array[142].r_info + 4) = aligned_size | 1;\n      rel_array[142].r_info = current_rel_offset;\n      rel_array[143].r_offset = current_rel_offset;\n      *(undefined4 *)(current_rel_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_rel_offset + 8) = 0x2007046c;\n      *(uint *)(current_rel_offset + 4) = temp_var_5 | 1;\n      *(uint *)(current_rel_offset + temp_var_5) = temp_var_5;\n      FUNC_0008259c(param_ptr);\n      return (int *)(first_rel_offset + 8);\n    }\n    rel_array[143].r_offset = 0x2007046c;\n    rel_array[142].r_info = 0x2007046c;\n    if (-1 < (int)temp_var_5) {\n      *(uint *)(temp_var_3 + first_rel_offset + 4) = *(uint *)(temp_var_3 + first_rel_offset + 4) | 1;\n      FUNC_0008259c(param_ptr);\n      return (int *)(first_rel_offset + 8);\n    }\n    if (temp_var_3 < 0x200) {\n      temp_var_3 = temp_var_2 & 0xfffffff8;\n      temp_var_8 = *(int *)((int)&rel_array[0x8d].r_info + temp_var_3);\n      current_rel_offset = 1 << ((int)(temp_var_2 >> 3) >> 2 & 0xffU) | rel_array[141].r_offset;\n      *(int *)(first_rel_offset + 8) = temp_var_8;\n      *(uint *)(first_rel_offset + 0xc) = temp_var_3 + 0x20070464;\n      rel_array[141].r_offset = current_rel_offset;\n      *(dword *)((int)&rel_array[0x8d].r_info + temp_var_3) = first_rel_offset;\n      *(dword *)(temp_var_8 + 0xc) = first_rel_offset;\n    }\n    else {\n      temp_var_5 = temp_var_2 >> 9;\n      if (temp_var_5 < 5) {\n        temp_var_1 = (temp_var_2 >> 6) + 0x38;\n        temp_var_8 = temp_var_1 * 2;\n      }\n      else if (temp_var_5 < 0x15) {\n        temp_var_1 = temp_var_5 + 0x5b;\n        temp_var_8 = temp_var_1 * 2;\n      }\n      else if (temp_var_5 < 0x55) {\n        temp_var_1 = (temp_var_2 >> 0xc) + 0x6e;\n        temp_var_8 = temp_var_1 * 2;\n      }\n      else if (temp_var_5 < 0x155) {\n        temp_var_1 = (temp_var_2 >> 0xf) + 0x77;\n        temp_var_8 = temp_var_1 * 2;\n      }\n      else if (temp_var_5 < 0x555) {\n        temp_var_1 = (temp_var_2 >> 0x12) + 0x7c;\n        temp_var_8 = temp_var_1 * 2;\n      }\n      else {\n        temp_var_8 = 0xfc;\n        temp_var_1 = 0x7e;\n      }\n      current_rel_offset = temp_var_8 * 4 + 0x20070464;\n      temp_rel_offset_1 = (&rel_array[0x8d].r_info)[temp_var_8];\n      if (temp_rel_offset_1 == current_rel_offset) {\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << (temp_var_1 >> 2 & 0xffU);\n        temp_rel_offset_2 = temp_rel_offset_1;\n      }\n      else {\n        do {\n          temp_rel_offset_2 = temp_rel_offset_1;\n          if ((*(uint *)(temp_rel_offset_1 + 4) & 0xfffffffc) <= temp_var_3) break;\n          temp_rel_offset_1 = *(dword *)(temp_rel_offset_1 + 8);\n          temp_rel_offset_2 = temp_rel_offset_1;\n        } while (current_rel_offset != temp_rel_offset_1);\n        temp_rel_offset_1 = *(dword *)(temp_rel_offset_2 + 0xc);\n      }\n      current_rel_offset = rel_array[141].r_offset;\n      *(dword *)(first_rel_offset + 0xc) = temp_rel_offset_1;\n      *(dword *)(first_rel_offset + 8) = temp_rel_offset_2;\n      *(dword *)(temp_rel_offset_1 + 8) = first_rel_offset;\n      *(dword *)(temp_rel_offset_2 + 0xc) = first_rel_offset;\n    }\n  }\n  first_rel_offset = rel_array[141].r_info;\n  temp_var_2 = 1 << ((int)index >> 2 & 0xffU);\n  if (temp_var_2 <= current_rel_offset) {\n    if ((current_rel_offset & temp_var_2) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        temp_var_2 = temp_var_2 << 1;\n        index = index + 4;\n      } while ((current_rel_offset & temp_var_2) == 0);\n    }\n    do {\n      temp_rel_pointer_2 = &rel_array[index + 0x8c].r_info;\n      temp_pointer_2 = temp_rel_pointer_2;\n      temp_var_3 = index;\n      do {\n        for (temp_pointer_1 = (undefined *)temp_pointer_2[3]; temp_pointer_2 != (dword *)temp_pointer_1;\n            temp_pointer_1 = *(undefined **)(temp_pointer_1 + 0xc)) {\n          temp_var_5 = *(uint *)(temp_pointer_1 + 4) & 0xfffffffc;\n          temp_var_6 = temp_var_5 - aligned_size;\n          if (0xf < (int)temp_var_6) {\n            temp_var_1 = *(int *)(temp_pointer_1 + 8);\n            temp_var_8 = *(int *)(temp_pointer_1 + 0xc);\n            temp_rel_pointer = temp_pointer_1 + aligned_size;\n            *(uint *)(temp_pointer_1 + 4) = aligned_size | 1;\n            *(int *)(temp_var_1 + 0xc) = temp_var_8;\n            *(int *)(temp_var_8 + 8) = temp_var_1;\n            rel_array[142].r_info = (dword)temp_rel_pointer;\n            rel_array[143].r_offset = (dword)temp_rel_pointer;\n            *(undefined4 *)(temp_rel_pointer + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_rel_pointer + 8) = 0x2007046c;\n            *(uint *)(temp_rel_pointer + 4) = temp_var_6 | 1;\n            *(uint *)(temp_rel_pointer + temp_var_6) = temp_var_6;\n            FUNC_0008259c(param_ptr);\n            return (int *)(temp_pointer_1 + 8);\n          }\n          if (-1 < (int)temp_var_6) {\n            temp_var_8 = *(int *)(temp_pointer_1 + 8);\n            temp_var_1 = *(int *)(temp_pointer_1 + 0xc);\n            *(uint *)(temp_pointer_1 + temp_var_5 + 4) = *(uint *)(temp_pointer_1 + temp_var_5 + 4) | 1;\n            *(int *)(temp_var_8 + 0xc) = temp_var_1;\n            *(int *)(temp_var_1 + 8) = temp_var_8;\n            FUNC_0008259c(param_ptr);\n            return (int *)(temp_pointer_1 + 8);\n          }\n        }\n        temp_var_3 = temp_var_3 + 1;\n        temp_pointer_2 = temp_pointer_2 + 2;\n      } while ((temp_var_3 & 3) != 0);\n      do {\n        temp_var_5 = index & 3;\n        temp_pointer_1 = (undefined *)(temp_rel_pointer_2 + -2);\n        index = index - 1;\n        if (temp_var_5 == 0) {\n          rel_array[141].r_offset = rel_array[141].r_offset & ~temp_var_2;\n          break;\n        }\n        temp_rel_pointer_2 = (dword *)*temp_rel_pointer_2;\n      } while (temp_rel_pointer_2 == (dword *)temp_pointer_1);\n      temp_var_2 = temp_var_2 * 2;\n      if ((rel_array[141].r_offset <= temp_var_2 &&\n           temp_var_2 - rel_array[141].r_offset != 0) || (index = temp_var_3, temp_var_2 == 0))\n      break;\n      for (; (rel_array[141].r_offset & temp_var_2) == 0; temp_var_2 = temp_var_2 << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= index) &&\n     (temp_var_2 = index - aligned_size, current_rel_offset = rel_array[141].r_info, 0xf < (int)temp_var_2))\n  goto LAB_0008211e;\n  temp_var_2 = rel_array[141].r_info + index;\n  if (rel_array[270].r_offset == 0xffffffff) {\n    temp_var_3 = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    temp_var_3 = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  current_rel_offset = FUN_00082970(param_ptr,temp_var_3);\n  if ((current_rel_offset == 0xffffffff) || ((current_rel_offset < temp_var_2 && (first_rel_offset != 0x20070464)))) {\n    index = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n    current_rel_offset = rel_array[141].r_info;\n  }\n  else {\n    temp_var_5 = DAT_20071194 + temp_var_3;\n    DAT_20071194 = temp_var_5;\n    if ((temp_var_2 == current_rel_offset) && ((temp_var_2 & 0xfff) == 0)) {\n      *(uint *)(rel_array[141].r_info + 4) = temp_var_3 + index | 1;\n    }\n    else {\n      temp_rel_offset_1 = current_rel_offset;\n      if (rel_array[270].r_offset != 0xffffffff) {\n        temp_rel_offset_1 = rel_array[270].r_offset;\n        DAT_20071194 = temp_var_5 + (current_rel_offset - temp_var_2);\n      }\n      rel_array[270].r_offset = temp_rel_offset_1;\n      temp_var_2 = current_rel_offset & 7;\n      if (temp_var_2 == 0) {\n        temp_var_8 = 0x1000;\n      }\n      else {\n        current_rel_offset = current_rel_offset + (8 - temp_var_2);\n        temp_var_8 = 0x1008 - temp_var_2;\n      }\n      temp_var_8 = temp_var_8 - (temp_var_3 + current_rel_offset & 0xfff);\n      temp_var_1 = FUN_00082970(param_ptr,temp_var_8);\n      if (temp_var_1 == -1) {\n        temp_var_2 = 1;\n        temp_var_8 = 0;\n      }\n      else {\n        temp_var_2 = (temp_var_1 - current_rel_offset) + temp_var_8 | 1;\n      }\n      temp_var_5 = DAT_20071194 + temp_var_8;\n      rel_array[141].r_info = current_rel_offset;\n      DAT_20071194 = temp_var_5;\n      *(uint *)(current_rel_offset + 4) = temp_var_2;\n      if (first_rel_offset != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(current_rel_offset + 4) = 1;\n          index = 0;\n          goto LAB_00082108;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(first_rel_offset + 4) = index | *(uint *)(first_rel_offset + 4) & 1;\n        *(undefined4 *)(first_rel_offset + index + 4) = 5;\n        *(undefined4 *)(first_rel_offset + index + 8) = 5;\n        if (0xf < index) {\n          FUN_00083d9c(param_ptr,first_rel_offset + 8);\n          temp_var_5 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp_var_5) {\n      DAT_2007118c = temp_var_5;\n    }\n    if (DAT_20071188 < temp_var_5) {\n      DAT_20071188 = temp_var_5;\n    }\n    index = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n    current_rel_offset = rel_array[141].r_info;\n  }\nLAB_00082108:\n  temp_var_2 = index - aligned_size;\n  if ((index < aligned_size) || ((int)temp_var_2 < 0x10)) {\n    FUNC_0008259c(param_ptr);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  rel_array[141].r_info = aligned_size + current_rel_offset;\n  *(uint *)(current_rel_offset + 4) = aligned_size | 1;\n  *(uint *)(rel_array[141].r_info + 4) = temp_var_2 | 1;\n  FUNC_0008259c(param_ptr);\n  return (int *)(current_rel_offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "param_ptr",
                "param_2": "size",
                "dVar1": "first_rel_offset",
                "iVar2": "temp_var_1",
                "uVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "iVar5": "temp_var_4",
                "uVar6": "temp_var_5",
                "dVar7": "current_rel_offset",
                "uVar8": "temp_var_6",
                "iVar9": "temp_var_7",
                "puVar10": "temp_pointer_1",
                "dVar11": "temp_rel_offset_1",
                "dVar12": "temp_rel_offset_2",
                "iVar13": "temp_var_8",
                "pdVar14": "temp_pointer_2",
                "uVar15": "aligned_size",
                "puVar16": "temp_rel_pointer",
                "pdVar17": "temp_rel_pointer_2",
                "uVar18": "index",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *dst,undefined4 *src,uint size)\n\n{\n  undefined4 *dst_ptr;\n  undefined4 *dst_end_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint loop_count;\n  bool is_remaining_size_gt_0;\n  \n  dst_end_ptr = dst;\n  if ((((uint)src | (uint)dst) & 3) != 0) {\n    if (size < 8) {\n      loop_count = size - 4;\n      if (3 < size) {\n        do {\n          dst_ptr = src;\n          src_ptr = dst_end_ptr;\n          is_remaining_size_gt_0 = loop_count != 0;\n          loop_count = loop_count - 1;\n          *(undefined *)src_ptr = *(undefined *)dst_ptr;\n          dst_end_ptr = (undefined4 *)((int)src_ptr + 1);\n          src = (undefined4 *)((int)dst_ptr + 1);\n        } while (is_remaining_size_gt_0);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dst_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dst_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dst_ptr + 3);\n        return dst;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dst & 3) != 0)) {\n      loop_count = 4 - ((uint)dst & 3);\n      size = size - loop_count;\n      dst_ptr = dst;\n      src_ptr = src;\n      if (((uint)dst & 1) != 0) {\n        src_ptr = (undefined4 *)((int)src + 1);\n        dst_ptr = (undefined4 *)((int)dst + 1);\n        *(undefined *)dst = *(undefined *)src;\n      }\n      dst_end_ptr = dst_ptr;\n      src = src_ptr;\n      if ((loop_count & 2) != 0) {\n        src = (undefined4 *)((int)src_ptr + 2);\n        dst_end_ptr = (undefined4 *)((int)dst_ptr + 2);\n        *(undefined2 *)dst_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dst_end_ptr = *src;\n    dst_end_ptr[1] = src[1];\n    dst_end_ptr[2] = src[2];\n    dst_end_ptr[3] = src[3];\n    dst_end_ptr[4] = src[4];\n    dst_end_ptr[5] = src[5];\n    dst_end_ptr[6] = src[6];\n    dst_end_ptr[7] = src[7];\n    dst_end_ptr[8] = src[8];\n    dst_end_ptr[9] = src[9];\n    dst_end_ptr[10] = src[10];\n    dst_end_ptr[0xb] = src[0xb];\n    dst_end_ptr[0xc] = src[0xc];\n    dst_end_ptr[0xd] = src[0xd];\n    dst_end_ptr[0xe] = src[0xe];\n    dst_end_ptr[0xf] = src[0xf];\n    dst_end_ptr = dst_end_ptr + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dst_end_ptr = *src;\n      dst_end_ptr[1] = src[1];\n      dst_end_ptr[2] = src[2];\n      dst_end_ptr[3] = src[3];\n      dst_end_ptr = dst_end_ptr + 4;\n      src = src + 4;\n      is_remaining_size_gt_0 = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_remaining_size_gt_0);\n  }\n  loop_count = remaining_size + 0xc;\n  src_ptr = dst_end_ptr;\n  dst_ptr = src;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      src = dst_ptr + 1;\n      *src_ptr = *dst_ptr;\n      is_remaining_size_gt_0 = 3 < loop_count;\n      loop_count = loop_count - 4;\n      dst_end_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dst_ptr = src;\n    } while (is_remaining_size_gt_0);\n  }\nLAB_000823d0:\n  if (loop_count + 4 != 0) {\n    dst_ptr = dst_end_ptr;\n    src_ptr = src;\n    if ((loop_count & 1) != 0) {\n      src_ptr = (undefined4 *)((int)src + 1);\n      dst_ptr = (undefined4 *)((int)dst_end_ptr + 1);\n      *(undefined *)dst_end_ptr = *(undefined *)src;\n    }\n    if ((loop_count + 4 & 2) != 0) {\n      *(undefined2 *)dst_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return dst;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dst_ptr",
                "puVar2": "dst_end_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "loop_count",
                "bVar6": "is_remaining_size_gt_0"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *endPtr;\n  uint count;\n  undefined *destEndPtr;\n  uint remainingSize;\n  \n  if ((source < destination) && (endPtr = (undefined4 *)((int)source + size), destination < endPtr)) {\n    destEndPtr = (undefined *)((int)destination + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        endPtr = (undefined4 *)((int)endPtr + -1);\n        index = index + -1;\n        destEndPtr = destEndPtr + -1;\n        *destEndPtr = *(undefined *)endPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    endPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = endPtr + 4;\n      *endPtr = *srcPtr;\n      endPtr[1] = srcPtr[1];\n      endPtr[2] = srcPtr[2];\n      endPtr[3] = srcPtr[3];\n      endPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainingSize = size & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    count = remainingSize;\n    endPtr = destination;\n    srcPtr = source;\n    if (3 < remainingSize) {\n      do {\n        count = count - 4;\n        *endPtr = *srcPtr;\n        endPtr = endPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < count);\n      index = (remainingSize - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      remainingSize = size & 3;\n    }\n    size = remainingSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  endPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)endPtr + 1);\n    *(undefined *)endPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    endPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "endPtr",
                "uVar5": "count",
                "puVar6": "destEndPtr",
                "uVar7": "remainingSize"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "expand_memory_00082504",
            "code": "\nvoid expandMemory_00082504(undefined4 *memory,undefined value,uint size)\n\n{\n  undefined4 *current;\n  undefined4 *next;\n  undefined4 pattern;\n  uint remaining;\n  bool isZero;\n  \n  if (((uint)memory & 3) != 0) {\n    isZero = size == 0;\n    current = memory;\n    size = size - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      memory = (undefined4 *)((int)current + 1);\n      *(undefined *)current = value;\n      if (((uint)memory & 3) == 0) break;\n      isZero = size == 0;\n      current = memory;\n      size = size - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining = size;\n    current = memory;\n    if (0xf < size) {\n      remaining = size - 0x10;\n      do {\n        *current = pattern;\n        current[1] = pattern;\n        current[2] = pattern;\n        current[3] = pattern;\n        current = current + 4;\n      } while (current != (undefined4 *)((int)memory + (remaining & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      memory = memory + ((remaining >> 4) + 1) * 4;\n      remaining = size;\n      current = memory;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *memory = pattern;\n      memory = memory + 1;\n    } while (3 < size);\n    memory = (undefined4 *)((int)current + (remaining - 4 & 0xfffffffc) + 4);\n    size = remaining & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    current = memory;\n    do {\n      next = (undefined4 *)((int)current + 1);\n      *(undefined *)current = value;\n      current = next;\n    } while (next != (undefined4 *)(size + (int)memory));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "expand_memory_00082504",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current",
                "puVar2": "next",
                "uVar3": "pattern",
                "uVar4": "remaining",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "execute_relocation_000825a0",
            "code": "\nvoid executeRelocation_000825a0(undefined4 param_1,undefined4 param_2)\n\n{\n  FUN_000825b0(relocationTable[140].r_offset,param_1,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "execute_relocation_000825a0",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "resize_array_000825b0",
            "code": "\nint * resizeArray_000825b0(undefined4 *param_out,int *old_array,uint new_size)\n\n{\n  dword temp_var1;\n  int *new_array;\n  uint temp_var2;\n  int temp_var3;\n  uint array_size;\n  int temp_var4;\n  int *temp_ptr1;\n  uint new_array_size;\n  uint aligned_size;\n  int *temp_ptr2;\n  \n  if (old_array == (int *)0x0) {\n    new_array = (int *)FUN_00081e14(param_out,new_size);\n    return new_array;\n  }\n  FUNC_00082598();\n  array_size = old_array[-1];\n  new_array_size = array_size & 0xfffffffc;\n  new_array = old_array + -2;\n  if (new_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = new_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < new_size) {\nLAB_0008267c:\n    *param_out = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)new_array_size < (int)aligned_size) {\n    temp_var1 = (int)new_array + new_array_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_var1) {\n      temp_var2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_var1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp_var2 + new_array_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_array + aligned_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_var2 + new_array_size) - aligned_size | 1;\n        old_array[-1] = aligned_size | old_array[-1] & 1U;\n        FUNC_0008259c(param_out);\n        return old_array;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_var2 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp_var2 + new_array_size)) {\n        temp_var4 = *(int *)(temp_var1 + 0xc);\n        temp_var3 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var4;\n        *(int *)(temp_var4 + 8) = temp_var3;\n        new_array_size = temp_var2 + new_array_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_var2 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(array_size << 0x1f)) {\n      temp_ptr2 = (int *)((int)new_array - old_array[-2]);\n      array_size = (temp_ptr2[1] & 0xfffffffcU) + new_array_size;\n      if (temp_var1 != 0) {\n        if (temp_var1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp_var2 + array_size)) {\n            new_array = temp_ptr2 + 2;\n            temp_var3 = *new_array;\n            temp_var4 = temp_ptr2[3];\n            new_array_size = new_array_size - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var4;\n            *(int *)(temp_var4 + 8) = temp_var3;\n            if (new_array_size < 0x25) {\n              temp_ptr1 = new_array;\n              if (0x13 < new_array_size) {\n                temp_ptr2[2] = *old_array;\n                temp_ptr2[3] = old_array[1];\n                if (new_array_size < 0x1c) {\n                  old_array = old_array + 2;\n                  temp_ptr1 = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = old_array[2];\n                  temp_ptr2[5] = old_array[3];\n                  if (new_array_size == 0x24) {\n                    temp_ptr2[6] = old_array[4];\n                    temp_ptr1 = old_array + 5;\n                    old_array = old_array + 6;\n                    temp_ptr2[7] = *temp_ptr1;\n                    temp_ptr1 = temp_ptr2 + 8;\n                  }\n                  else {\n                    old_array = old_array + 4;\n                    temp_ptr1 = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *old_array;\n              temp_ptr1[1] = old_array[1];\n              temp_ptr1[2] = old_array[2];\n            }\n            else {\n              FUN_00082438(new_array,old_array);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_ptr2 + aligned_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_var2 + array_size) - aligned_size | 1;\n            temp_ptr2[1] = aligned_size | temp_ptr2[1] & 1U;\n            FUNC_0008259c(param_out);\n            return new_array;\n          }\n        }\n        else {\n          temp_var2 = temp_var2 + array_size;\n          if ((int)aligned_size <= (int)temp_var2) {\n            temp_var4 = *(int *)(temp_var1 + 0xc);\n            temp_var3 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var4;\n            *(int *)(temp_var4 + 8) = temp_var3;\n            temp_ptr1 = temp_ptr2 + 2;\n            temp_var3 = *temp_ptr1;\n            temp_var4 = temp_ptr2[3];\n            array_size = new_array_size - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var4;\n            *(int *)(temp_var4 + 8) = temp_var3;\n            new_array_size = temp_var2;\n            if (array_size < 0x25) {\n              new_array = temp_ptr1;\n              if (0x13 < array_size) {\n                temp_ptr2[2] = *old_array;\n                temp_ptr2[3] = old_array[1];\n                if (array_size < 0x1c) {\n                  old_array = old_array + 2;\n                  new_array = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = old_array[2];\n                  temp_ptr2[5] = old_array[3];\n                  if (array_size == 0x24) {\n                    temp_ptr2[6] = old_array[4];\n                    new_array = old_array + 5;\n                    old_array = old_array + 6;\n                    temp_ptr2[7] = *new_array;\n                    new_array = temp_ptr2 + 8;\n                  }\n                  else {\n                    old_array = old_array + 4;\n                    new_array = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *new_array = *old_array;\n              new_array[1] = old_array[1];\n              new_array[2] = old_array[2];\n              array_size = temp_ptr2[1];\n              new_array = temp_ptr2;\n              old_array = temp_ptr1;\n            }\n            else {\n              FUN_00082438(temp_ptr1,old_array);\n              array_size = temp_ptr2[1];\n              new_array = temp_ptr2;\n              old_array = temp_ptr1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)array_size) {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp_var3 = *temp_ptr1;\n        temp_var4 = temp_ptr2[3];\n        temp_var2 = new_array_size - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var4;\n        *(int *)(temp_var4 + 8) = temp_var3;\n        new_array_size = array_size;\n        if (temp_var2 < 0x25) {\n          new_array = temp_ptr1;\n          if (0x13 < temp_var2) {\n            temp_ptr2[2] = *old_array;\n            temp_ptr2[3] = old_array[1];\n            if (temp_var2 < 0x1c) {\n              old_array = old_array + 2;\n              new_array = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = old_array[2];\n              temp_ptr2[5] = old_array[3];\n              if (temp_var2 == 0x24) {\n                temp_ptr2[6] = old_array[4];\n                new_array = old_array + 5;\n                old_array = old_array + 6;\n                temp_ptr2[7] = *new_array;\n                new_array = temp_ptr2 + 8;\n              }\n              else {\n                old_array = old_array + 4;\n                new_array = temp_ptr2 + 6;\n              }\n            }\n          }\n          *new_array = *old_array;\n          new_array[1] = old_array[1];\n          new_array[2] = old_array[2];\n          array_size = temp_ptr2[1];\n          new_array = temp_ptr2;\n          old_array = temp_ptr1;\n        }\n        else {\n          FUN_00082438(temp_ptr1,old_array);\n          array_size = temp_ptr2[1];\n          new_array = temp_ptr2;\n          old_array = temp_ptr1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr2 = (int *)FUN_00081e14(param_out,new_size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000826a4;\n    array_size = old_array[-1];\n    if (temp_ptr2 + -2 != (int *)((array_size & 0xfffffffe) + (int)new_array)) {\n      new_array_size = new_array_size - 4;\n      if (new_array_size < 0x25) {\n        new_array = old_array;\n        temp_ptr1 = temp_ptr2;\n        if (0x13 < new_array_size) {\n          *temp_ptr2 = *old_array;\n          temp_ptr2[1] = old_array[1];\n          if (new_array_size < 0x1c) {\n            new_array = old_array + 2;\n            temp_ptr1 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = old_array[2];\n            temp_ptr2[3] = old_array[3];\n            if (new_array_size == 0x24) {\n              temp_ptr2[4] = old_array[4];\n              temp_ptr2[5] = old_array[5];\n              new_array = old_array + 6;\n              temp_ptr1 = temp_ptr2 + 6;\n            }\n            else {\n              new_array = old_array + 4;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *new_array;\n        temp_ptr1[1] = new_array[1];\n        temp_ptr1[2] = new_array[2];\n      }\n      else {\n        FUN_00082438(temp_ptr2,old_array);\n      }\n      FUN_00083d9c(param_out,old_array);\n      goto LAB_000826a4;\n    }\n    new_array_size = new_array_size + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_var2 = new_array_size - aligned_size;\n  temp_ptr2 = old_array;\n  if (temp_var2 < 0x10) {\n    new_array[1] = array_size & 1 | new_array_size;\n    *(uint *)((int)new_array + new_array_size + 4) = *(uint *)((int)new_array + new_array_size + 4) | 1;\n  }\n  else {\n    new_array[1] = array_size & 1 | aligned_size;\n    *(uint *)((int)new_array + aligned_size + 4) = temp_var2 | 1;\n    *(uint *)((int)new_array + temp_var2 + aligned_size + 4) = *(uint *)((int)new_array + temp_var2 + aligned_size + 4) | 1;\n    FUN_00083d9c(param_out,(int)new_array + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(param_out);\n  return temp_ptr2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "resize_array_000825b0",
                "param_1": "param_out",
                "param_2": "old_array",
                "param_3": "new_size",
                "dVar1": "temp_var1",
                "piVar2": "new_array",
                "uVar3": "temp_var2",
                "iVar4": "temp_var3",
                "uVar5": "array_size",
                "iVar6": "temp_var4",
                "piVar7": "temp_ptr1",
                "uVar8": "new_array_size",
                "uVar9": "aligned_size",
                "piVar10": "temp_ptr2"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_and_assign_value_00082970",
            "code": "\nvoid checkAndAssignValue_00082970(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_0008118c(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_and_assign_value_00082970",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "string_copy_00082994",
            "code": "\nvoid stringCopy_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *tempPointer;\n  uint currentUint;\n  uint shiftedUint;\n  uint *destinationPointer;\n  bool isZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    tempPointer = source;\n    if (((uint)source & 1) != 0) {\n      tempPointer = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = tempPointer;\n    if (((uint)tempPointer & 2) != 0) {\n      source = (uint *)((int)tempPointer + 2);\n      currentShort = *(ushort *)tempPointer;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  currentUint = *source;\n  tempPointer = source + 1;\n  destinationPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) goto LAB_000829f8;\n    destinationPointer = destination + 1;\n    *destination = currentUint;\n    tempPointer = source + 2;\n    currentUint = source[1];\n  }\n  while( true ) {\n    nextPointer = tempPointer + 1;\n    shiftedUint = *tempPointer;\n    destination = destinationPointer;\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) break;\n    destination = destinationPointer + 1;\n    *destinationPointer = currentUint;\n    currentUint = shiftedUint;\n    if ((shiftedUint + 0xfefefeff & ~shiftedUint & 0x80808080) != 0) break;\n    tempPointer = tempPointer + 2;\n    currentUint = *nextPointer;\n    destinationPointer = destinationPointer + 2;\n    *destination = shiftedUint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentUint;\n    shiftedUint = currentUint & 0xff;\n    currentUint = currentUint >> 8 | currentUint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (shiftedUint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "string_copy_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "tempPointer",
                "uVar5": "currentUint",
                "uVar6": "shiftedUint",
                "puVar7": "destinationPointer",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "reverse_binary_function_00082ac0",
            "code": "\nint reverseBinaryFunction_00082ac0(undefined4 param_1,int inputParam,int **nestedArrays)\n\n{\n  int *currentArray;\n  int returnValue;\n  int *currentSubArray;\n  uint innerLoopCounter;\n  undefined4 *currentElement;\n  uint arraySize;\n  uint shiftedSize;\n  \n  if (-1 < *(int *)(inputParam + 100) << 0x12) {\n    returnValue = FUN_00083f34();\n    nestedArrays[2] = (int *)0x0;\n    nestedArrays[1] = (int *)0x0;\n    return returnValue;\n  }\n  currentSubArray = nestedArrays[2];\n  currentArray = *nestedArrays;\n  while (currentSubArray != (int *)0x0) {\n    arraySize = currentArray[1];\n    shiftedSize = arraySize >> 2;\n    if (shiftedSize != 0) {\n      currentElement = (undefined4 *)(*currentArray + -4);\n      innerLoopCounter = 0;\n      do {\n        currentElement = currentElement + 1;\n        returnValue = FUN_00083c40(param_1,*currentElement,inputParam);\n        innerLoopCounter = innerLoopCounter + 1;\n        if (returnValue == -1) goto LAB_00082b00;\n      } while (shiftedSize != innerLoopCounter);\n      currentSubArray = nestedArrays[2];\n    }\n    currentSubArray = (int *)((int)currentSubArray - (arraySize & 0xfffffffc));\n    nestedArrays[2] = currentSubArray;\n    currentArray = currentArray + 2;\n  }\n  returnValue = 0;\nLAB_00082b00:\n  nestedArrays[2] = (int *)0x0;\n  nestedArrays[1] = (int *)0x0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "reverse_binary_function_00082ac0",
                "param_2": "inputParam",
                "param_3": "nestedArrays",
                "piVar1": "currentArray",
                "iVar2": "returnValue",
                "piVar3": "currentSubArray",
                "uVar4": "innerLoopCounter",
                "puVar5": "currentElement",
                "uVar6": "arraySize",
                "uVar7": "shiftedSize"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_00082b38(int inputStringAddr,int formatStringAddr,int *******argsAddr,int **argBuffersAddr)\n\n{\n  bool isLeftJustified;\n  bool hasSign;\n  bool hasAlternateForm;\n  char conversionSpecifier;\n  bool isZeroPadded;\n  int ********formatStackPtr;\n  int *fmtWidthPtr;\n  int result;\n  char conversionChar;\n  int *******curFormatCharPtr;\n  uint tempVal1;\n  int **bufferArrayPtr;\n  uint curFlags;\n  uint curChar;\n  int tempVal2;\n  int ********ppppppppiVar16;\n  int tempVal3;\n  int *******tempFormatPtr1;\n  int *widthPtr;\n  int *******pppppppiVar20;\n  uint tempVal4;\n  int *isNegativePtr;\n  int *******pppppptempFormatPtr2;\n  undefined4 tempVal5;\n  int ********ppppppppiVar25;\n  bool isShort;\n  longlong combinedVal;\n  int *******maxWidth;\n  int *******combinedWidth;\n  int **curArgPtr;\n  int resultLength;\n  char *hexTable;\n  char paddingChar;\n  undefined hexPrefix;\n  undefined isHex;\n  int ********formatStackBase;\n  int formatStackIndex;\n  int *******combinedFmtWidth;\n  undefined paddingWidth;\n  char tempChar;\n  undefined tempBool1;\n  undefined formatBuffers [4];\n  int *******tempFormatArr [16];\n  \n  if ((inputStringAddr != 0) && (*(int *)(inputStringAddr + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  curFlags = (uint)*(ushort *)(formatStringAddr + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(formatStringAddr + 0xc) << 0x12)) {\n    curFlags = curFlags | 0x2000;\n    *(short *)(formatStringAddr + 0xc) = (short)curFlags;\n    *(uint *)(formatStringAddr + 100) = *(uint *)(formatStringAddr + 100) & 0xffffdfff;\n  }\n  if (((int)(curFlags << 0x1c) < 0) && (*(int *)(formatStringAddr + 0x10) != 0)) {\n    if ((curFlags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(inputStringAddr,formatStringAddr);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(formatStringAddr + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(formatStringAddr + 0xe)) {\n    result = FUN_0008378c(inputStringAddr,formatStringAddr,argsAddr,argBuffersAddr);\n    return result;\n  }\nLAB_00082b8a:\n  hexTable = (char *)0x0;\n  combinedFmtWidth = (int *******)0x0;\n  formatStackIndex = 0;\n  resultLength = 0;\n  formatStackPtr = (int ********)formatBuffers;\n  curArgPtr = argBuffersAddr;\n  formatStackBase = (int ********)formatBuffers;\nLAB_00082b9e:\n  curFormatCharPtr = argsAddr;\n  if ((*(char *)argsAddr != '\\0') && (*(char *)argsAddr != '%')) {\n    do {\n      curFormatCharPtr = (int *******)((int)curFormatCharPtr + 1);\n      if (*(char *)curFormatCharPtr == '\\0') break;\n    } while (*(char *)curFormatCharPtr != '%');\n    pppppppiVar20 = (int *******)((int)curFormatCharPtr - (int)argsAddr);\n    if (pppppppiVar20 != (int *******)0x0) {\n      formatStackIndex = formatStackIndex + 1;\n      combinedFmtWidth = (int *******)((int)combinedFmtWidth + (int)pppppppiVar20);\n      *formatStackPtr = argsAddr;\n      formatStackPtr[1] = pppppppiVar20;\n      if (formatStackIndex < 8) {\n        formatStackPtr = formatStackPtr + 2;\n      }\n      else {\n        if (combinedFmtWidth == (int *******)0x0) {\n          resultLength = resultLength + (int)pppppppiVar20;\n          formatStackIndex = 0;\n          formatStackPtr = (int ********)formatBuffers;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n        formatStackPtr = (int ********)formatBuffers;\n        if (result != 0) goto LAB_000833de;\n      }\n      resultLength = resultLength + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)curFormatCharPtr != '\\0') {\n    paddingChar = '\\0';\n    curChar = (uint)*(byte *)((int)curFormatCharPtr + 1);\n    curFlags = 0;\n    isZeroPadded = false;\n    hasSign = false;\n    isLeftJustified = false;\n    hasAlternateForm = false;\n    isShort = false;\n    pppppppiVar20 = (int *******)0x0;\n    combinedWidth = (int *******)0xffffffff;\n    argsAddr = (int *******)((int)curFormatCharPtr + 1);\nLAB_00082c12:\n    argsAddr = (int *******)((int)argsAddr + 1);\nLAB_00082c16:\n    switch(curChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (curChar != 0) {\n        maxWidth = (int *******)0x1;\n        combinedWidth = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&paddingWidth;\n        paddingWidth = (char)curChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      hasAlternateForm = true;\n      curChar = (uint)*(byte *)argsAddr;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*curArgPtr;\n      curArgPtr = curArgPtr + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      curChar = (uint)*(byte *)argsAddr;\n      goto LAB_00082c12;\n    case 0x2b:\n      curChar = (uint)*(byte *)argsAddr;\n      paddingChar = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      curFlags = curFlags | 4;\n      curChar = (uint)*(byte *)argsAddr;\n      goto LAB_00082c12;\n    case 0x2e:\n      curChar = (uint)*(byte *)argsAddr;\n      curFormatCharPtr = (int *******)((int)argsAddr + 1);\n      if (curChar == 0x2a) {\n        curChar = (uint)*(byte *)((int)argsAddr + 1);\n        combinedWidth = (int *******)*curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        argsAddr = curFormatCharPtr;\n        if ((int)combinedWidth < 0) {\n          combinedWidth = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      tempVal1 = curChar - 0x30;\n      if (tempVal1 < 10) {\n        tempVal4 = 0;\n        do {\n          argsAddr = (int *******)((int)curFormatCharPtr + 1);\n          curChar = (uint)*(byte *)curFormatCharPtr;\n          tempVal4 = tempVal1 + tempVal4 * 10;\n          tempVal1 = curChar - 0x30;\n          curFormatCharPtr = argsAddr;\n        } while (tempVal1 < 10);\n        combinedWidth = (int *******)(tempVal4 | (int)tempVal4 >> 0x1f);\n      }\n      else {\n        combinedWidth = (int *******)0x0;\n        argsAddr = curFormatCharPtr;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      curFlags = curFlags | 0x80;\n      curChar = (uint)*(byte *)argsAddr;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      hasSign = true;\n      if (isLeftJustified == false) goto LAB_00083028;\nLAB_00082e98:\n      curArgPtr = (int **)((int)curArgPtr + 7U & 0xfffffff8);\n      widthPtr = *curArgPtr;\n      isNegativePtr = curArgPtr[1];\n      curArgPtr = curArgPtr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      hasSign = true;\n      if (isLeftJustified != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)hasSign << 4;\n      tempVal2 = (uint)isLeftJustified << 5;\n      if ((hasSign == 0) && (tempVal2 = (uint)isShort << 6, isShort != 0)) {\n        widthPtr = (int *)(uint)*(ushort *)curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        isNegativePtr = (int *)0x0;\n      }\n      else {\n        result = tempVal2;\n        widthPtr = *curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        isNegativePtr = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      hasSign = true;\n      if (isLeftJustified != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((hasSign) || (isShort == false)) {\n        result = 1;\n        widthPtr = *curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        isNegativePtr = (int *)0x0;\n      }\n      else {\n        isNegativePtr = (int *)0x0;\n        widthPtr = (int *)(uint)*(ushort *)curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexTable = \"0123456789ABCDEF\";\n      if (isLeftJustified == false) goto LAB_00083196;\nLAB_00082fb6:\n      bufferArrayPtr = (int **)((int)curArgPtr + 7U & 0xfffffff8);\n      curArgPtr = bufferArrayPtr + 2;\n      widthPtr = *bufferArrayPtr;\n      isNegativePtr = bufferArrayPtr[1];\n      goto LAB_00082fca;\n    case 99:\n      widthPtr = *curArgPtr;\n      curArgPtr = curArgPtr + 1;\n      maxWidth = (int *******)0x1;\n      paddingWidth = SUB41(widthPtr,0);\n      combinedWidth = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&paddingWidth;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLeftJustified != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((hasSign == false) && (isShort != false)) {\n        widthPtr = (int *)(int)*(short *)curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        isNegativePtr = (int *)((int)widthPtr >> 0x1f);\n      }\n      else {\n        widthPtr = *curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        isNegativePtr = (int *)((int)widthPtr >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)isNegativePtr < 0) {\n        isShort = widthPtr != (int *)0x0;\n        widthPtr = (int *)-(int)widthPtr;\n        isNegativePtr = (int *)(-(int)isNegativePtr - (uint)isShort);\n        paddingChar = '-';\n        conversionSpecifier = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)combinedWidth) {\n        curFlags = curFlags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      curChar = (uint)widthPtr | (uint)isNegativePtr;\n      result = 1;\n      conversionSpecifier = paddingChar;\n      goto joined_r0x00082d78;\n    case 0x68:\n      isShort = true;\n      curChar = (uint)*(byte *)argsAddr;\n      goto LAB_00082c12;\n    case 0x6c:\n      curChar = (uint)*(byte *)argsAddr;\n      if (curChar == 0x6c) {\n        isLeftJustified = true;\n        curChar = (uint)*(byte *)((int)argsAddr + 1);\n        argsAddr = (int *******)((int)argsAddr + 1);\n      }\n      else {\n        hasSign = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLeftJustified == false) {\n        if (hasSign == false) {\n          if (isShort) {\n            widthPtr = *curArgPtr;\n            curArgPtr = curArgPtr + 1;\n            *(short *)widthPtr = (short)resultLength;\n          }\n          else {\n            widthPtr = *curArgPtr;\n            curArgPtr = curArgPtr + 1;\n            *widthPtr = resultLength;\n          }\n        }\n        else {\n          widthPtr = *curArgPtr;\n          curArgPtr = curArgPtr + 1;\n          *widthPtr = resultLength;\n        }\n      }\n      else {\n        widthPtr = *curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        *widthPtr = resultLength;\n        widthPtr[1] = resultLength >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLeftJustified == false) goto LAB_00082f2a;\nLAB_00082d42:\n      bufferArrayPtr = (int **)((int)curArgPtr + 7U & 0xfffffff8);\n      curArgPtr = bufferArrayPtr + 2;\n      widthPtr = *bufferArrayPtr;\n      isNegativePtr = bufferArrayPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      widthPtr = *curArgPtr;\n      curArgPtr = curArgPtr + 1;\n      isHex = 0x78;\n      isZeroPadded = true;\n      isNegativePtr = (int *)0x0;\n      hexPrefix = 0x30;\n      hexTable = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLeftJustified = true;\n      curChar = (uint)*(byte *)argsAddr;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*curArgPtr;\n      paddingChar = '\\0';\n      curArgPtr = curArgPtr + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)combinedWidth < 0) {\n          combinedWidth = (int *******)FUN_00082a50(ppppppppiVar25);\n          curFormatCharPtr = (int *******)0x0;\n          conversionSpecifier = paddingChar;\n        }\n        else {\n          result = FUN_00084384(ppppppppiVar25,0,combinedWidth);\n          conversionSpecifier = paddingChar;\n          if (result == 0) {\n            curFormatCharPtr = (int *******)0x0;\n          }\n          else {\n            tempFormatPtr1 = (int *******)(result - (int)ppppppppiVar25);\n            if ((int)combinedWidth <= (int)(int *******)(result - (int)ppppppppiVar25)) {\n              tempFormatPtr1 = combinedWidth;\n            }\n            curFormatCharPtr = (int *******)0x0;\n            combinedWidth = tempFormatPtr1;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < combinedWidth) {\n        combinedWidth = (int *******)0x6;\n      }\n      maxWidth = (int *******)((uint)combinedWidth & ~((int)combinedWidth >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      paddingChar = '\\0';\n      curFormatCharPtr = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLeftJustified) goto LAB_00082f7c;\nLAB_00082e62:\n      bufferArrayPtr = (int **)((int)curArgPtr + 7U & 0xfffffff8);\n      curArgPtr = bufferArrayPtr + 2;\n      widthPtr = *bufferArrayPtr;\n      isNegativePtr = bufferArrayPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexTable = \"0123456789abcdef\";\n      if (isLeftJustified != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((hasSign == false) && (isShort != false)) {\n        isNegativePtr = (int *)0x0;\n        widthPtr = (int *)(uint)*(ushort *)curArgPtr;\n        curArgPtr = curArgPtr + 1;\n      }\n      else {\n        widthPtr = *curArgPtr;\n        curArgPtr = curArgPtr + 1;\n        isNegativePtr = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((hasAlternateForm) && (((uint)widthPtr | (uint)isNegativePtr) != 0)) {\n        isZeroPadded = true;\n        hexPrefix = 0x30;\n        result = 2;\n        isHex = (char)curChar;\n      }\n      else {\n        result = 2;\n      }\n    }\n    paddingChar = '\\0';\n    conversionSpecifier = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)combinedWidth) {\n      curFlags = curFlags & 0xffffff7f;\n    }\n    curChar = (uint)widthPtr | (uint)isNegativePtr;\njoined_r0x00082d78:\n    combinedVal = CONCAT44(isNegativePtr,widthPtr);\n    curFormatCharPtr = combinedWidth;\n    if ((curChar == 0) && (combinedWidth == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)formatBuffers;\n      if ((result != 0) || (!hasAlternateForm)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&tempChar + 1);\n      tempBool1 = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (isNegativePtr != (int *)0x0 || (int *)0x9 < widthPtr) {\n        ppppppppiVar16 = (int ********)(&tempChar + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          tempVal5 = (undefined4)((ulonglong)combinedVal >> 0x20);\n          conversionChar = '\\n';\n          FUN_00084750((int)combinedVal,tempVal5,10,0);\n          *(char *)ppppppppiVar25 = conversionChar + '0';\n          combinedVal = FUN_00084750((int)combinedVal,tempVal5,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (combinedVal != 0);\n        combinedWidth = (int *******)((int)formatBuffers - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      tempBool1 = (char)widthPtr + '0';\n      ppppppppiVar25 = (int ********)(&tempChar + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&tempChar + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      curChar = (uint)widthPtr & 0xf;\n      widthPtr = (int *)((uint)widthPtr >> 4 | (int)isNegativePtr << 0x1c);\n      isNegativePtr = (int *)((uint)isNegativePtr >> 4);\n      *(char *)ppppppppiVar25 = hexTable[curChar];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)widthPtr | (uint)isNegativePtr) != 0);\n    combinedWidth = (int *******)((int)formatBuffers - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (combinedFmtWidth != (int *******)0x0) {\n    FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(formatStringAddr + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return resultLength;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    fmtWidthPtr = (int *)((uint)widthPtr >> 3 | (int)isNegativePtr << 0x1d);\n    isNegativePtr = (int *)((uint)isNegativePtr >> 3);\n    result = ((uint)widthPtr & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)result;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    widthPtr = fmtWidthPtr;\n  } while (((uint)fmtWidthPtr | (uint)isNegativePtr) != 0);\n  if (hasAlternateForm) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      combinedWidth = (int *******)((int)formatBuffers - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      combinedWidth = (int *******)((int)formatBuffers - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    combinedWidth = (int *******)((int)formatBuffers - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  maxWidth = combinedWidth;\n  if ((int)combinedWidth < (int)curFormatCharPtr) {\n    maxWidth = curFormatCharPtr;\n  }\n  if (conversionSpecifier != '\\0') {\n    maxWidth = (int *******)((int)maxWidth + 1);\n  }\nLAB_00082dba:\n  if (isZeroPadded) {\n    maxWidth = (int *******)((int)maxWidth + 2);\n  }\n  if ((curFlags == 0) &&\n     (tempFormatPtr1 = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)tempFormatPtr1)) {\n    if ((int)tempFormatPtr1 < 0x11) {\n      formatStackIndex = formatStackIndex + 1;\n    }\n    else {\n      do {\n        pppppptempFormatPtr2 = tempFormatPtr1;\n        result = formatStackIndex + 1;\n        combinedFmtWidth = combinedFmtWidth + 4;\n        *formatStackPtr = (int *******)0x85808;\n        formatStackPtr[1] = (int *******)0x10;\n        if (result < 8) {\n          tempVal2 = formatStackIndex + 2;\n          formatStackPtr = formatStackPtr + 2;\n          formatStackIndex = result;\n        }\n        else if (combinedFmtWidth == (int *******)0x0) {\n          tempVal2 = 1;\n          formatStackPtr = (int ********)formatBuffers;\n          formatStackIndex = 0;\n        }\n        else {\n          formatStackIndex = result;\n          result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n          if (result != 0) goto LAB_000833de;\n          tempVal2 = formatStackIndex + 1;\n          formatStackPtr = (int ********)formatBuffers;\n        }\n        tempFormatPtr1 = pppppptempFormatPtr2 + -4;\n      } while (0x10 < (int)tempFormatPtr1);\n      tempFormatPtr1 = pppppptempFormatPtr2 + -4;\n      formatStackIndex = tempVal2;\n    }\n    combinedFmtWidth = (int *******)((int)combinedFmtWidth + (int)tempFormatPtr1);\n    *formatStackPtr = (int *******)0x85808;\n    formatStackPtr[1] = tempFormatPtr1;\n    if (formatStackIndex < 8) {\n      result = formatStackIndex + 1;\n      formatStackPtr = formatStackPtr + 2;\n    }\n    else if (combinedFmtWidth == (int *******)0x0) {\n      result = 1;\n      formatStackIndex = 0;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n    else {\n      result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n      if (result != 0) goto LAB_000833de;\n      result = formatStackIndex + 1;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n  }\n  else {\n    result = formatStackIndex + 1;\n  }\n  tempVal2 = result;\n  if (paddingChar != '\\0') {\n    combinedFmtWidth = (int *******)((int)combinedFmtWidth + 1);\n    tempVal2 = 1;\n    *formatStackPtr = (int *******)&paddingChar;\n    formatStackPtr[1] = (int *******)0x1;\n    formatStackIndex = result;\n    if (result < 8) {\n      tempVal2 = result + 1;\n      formatStackPtr = formatStackPtr + 2;\n    }\n    else if (combinedFmtWidth == (int *******)0x0) {\n      formatStackIndex = 0;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n    else {\n      result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n      if (result != 0) goto LAB_000833de;\n      tempVal2 = formatStackIndex + 1;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n  }\n  result = tempVal2;\n  tempVal3 = formatStackIndex;\n  if (isZeroPadded) {\n    combinedFmtWidth = (int *******)((int)combinedFmtWidth + 2);\n    *formatStackPtr = (int *******)&hexPrefix;\n    formatStackPtr[1] = (int *******)0x2;\n    if (tempVal2 < 8) {\n      result = tempVal2 + 1;\n      tempVal3 = tempVal2;\n      formatStackPtr = formatStackPtr + 2;\n    }\n    else if (combinedFmtWidth == (int *******)0x0) {\n      result = 1;\n      tempVal3 = 0;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n    else {\n      formatStackIndex = tempVal2;\n      result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n      if (result != 0) goto LAB_000833de;\n      result = formatStackIndex + 1;\n      tempVal3 = formatStackIndex;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n  }\n  formatStackIndex = tempVal3;\n  if ((curFlags == 0x80) &&\n     (tempFormatPtr1 = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)tempFormatPtr1)) {\n    if (0x10 < (int)tempFormatPtr1) {\n      do {\n        while( true ) {\n          pppppptempFormatPtr2 = tempFormatPtr1;\n          formatStackIndex = tempVal3 + 1;\n          combinedFmtWidth = combinedFmtWidth + 4;\n          *formatStackPtr = (int *******)&DAT_00085848;\n          formatStackPtr[1] = (int *******)0x10;\n          if (7 < formatStackIndex) break;\n          result = tempVal3 + 2;\n          formatStackPtr = formatStackPtr + 2;\nLAB_0008348e:\n          tempVal3 = formatStackIndex;\n          tempFormatPtr1 = pppppptempFormatPtr2 + -4;\n          if ((int)(pppppptempFormatPtr2 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (combinedFmtWidth != (int *******)0x0) {\n          result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n          if (result == 0) {\n            result = formatStackIndex + 1;\n            formatStackPtr = (int ********)formatBuffers;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        tempVal3 = 0;\n        tempFormatPtr1 = pppppptempFormatPtr2 + -4;\n        formatStackPtr = (int ********)formatBuffers;\n      } while (0x10 < (int)(pppppptempFormatPtr2 + -4));\nLAB_000834b4:\n      tempFormatPtr1 = pppppptempFormatPtr2 + -4;\n    }\n    combinedFmtWidth = (int *******)((int)combinedFmtWidth + (int)tempFormatPtr1);\n    *formatStackPtr = (int *******)&DAT_00085848;\n    formatStackPtr[1] = tempFormatPtr1;\n    formatStackIndex = result;\n    if (result < 8) {\n      result = result + 1;\n      formatStackPtr = formatStackPtr + 2;\n    }\n    else if (combinedFmtWidth == (int *******)0x0) {\n      result = 1;\n      formatStackIndex = 0;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n    else {\n      result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n      if (result != 0) goto LAB_000833de;\n      result = formatStackIndex + 1;\n      formatStackPtr = (int ********)formatBuffers;\n    }\n  }\n  curFormatCharPtr = (int *******)((int)curFormatCharPtr - (int)combinedWidth);\n  ppppppppiVar16 = (int ********)formatBuffers;\n  if ((int)curFormatCharPtr < 1) {\nLAB_000832c6:\n    combinedFmtWidth = (int *******)((int)combinedFmtWidth + (int)combinedWidth);\n    *formatStackPtr = (int *******)ppppppppiVar25;\n    formatStackPtr[1] = combinedWidth;\n    combinedWidth = combinedFmtWidth;\n    formatStackIndex = result;\n    if (result < 8) goto LAB_0008345a;\n    if (combinedFmtWidth == (int *******)0x0) {\n      formatStackIndex = 0;\n    }\n    else {\n      result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    tempVal2 = formatStackIndex;\n    if (0x10 < (int)curFormatCharPtr) {\n      do {\n        while( true ) {\n          tempFormatPtr1 = curFormatCharPtr;\n          formatStackIndex = tempVal2 + 1;\n          combinedFmtWidth = combinedFmtWidth + 4;\n          *formatStackPtr = (int *******)&DAT_00085848;\n          formatStackPtr[1] = (int *******)0x10;\n          if (7 < formatStackIndex) break;\n          result = tempVal2 + 2;\n          formatStackPtr = formatStackPtr + 2;\nLAB_00083282:\n          tempVal2 = formatStackIndex;\n          curFormatCharPtr = tempFormatPtr1 + -4;\n          if ((int)(tempFormatPtr1 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (combinedFmtWidth != (int *******)0x0) {\n          result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n          if (result == 0) {\n            result = formatStackIndex + 1;\n            formatStackPtr = (int ********)formatBuffers;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formatStackPtr = (int ********)formatBuffers;\n        tempVal2 = 0;\n        curFormatCharPtr = tempFormatPtr1 + -4;\n      } while (0x10 < (int)(tempFormatPtr1 + -4));\nLAB_000832aa:\n      curFormatCharPtr = tempFormatPtr1 + -4;\n    }\n    combinedFmtWidth = (int *******)((int)combinedFmtWidth + (int)curFormatCharPtr);\n    *formatStackPtr = (int *******)&DAT_00085848;\n    formatStackPtr[1] = curFormatCharPtr;\n    if (result < 8) {\n      result = result + 1;\n      formatStackPtr = formatStackPtr + 2;\n      goto LAB_000832c6;\n    }\n    if (combinedFmtWidth != (int *******)0x0) {\n      formatStackIndex = result;\n      result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n      if (result != 0) goto LAB_000833de;\n      result = formatStackIndex + 1;\n      formatStackPtr = (int ********)formatBuffers;\n      goto LAB_000832c6;\n    }\n    tempFormatArr[0] = combinedWidth;\n    formatStackIndex = 1;\n    formatStackPtr = (int ********)formatBuffers;\n    formatBuffers = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = formatStackPtr + 2;\n    combinedFmtWidth = combinedWidth;\n  }\n  if (((curFlags & 4) != 0) &&\n     (curFormatCharPtr = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)curFormatCharPtr)) {\n    result = formatStackIndex;\n    if ((int)curFormatCharPtr < 0x11) {\n      tempVal2 = formatStackIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          formatStackIndex = result + 1;\n          combinedFmtWidth = combinedFmtWidth + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < formatStackIndex) break;\n          tempVal2 = result + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          curFormatCharPtr = curFormatCharPtr + -4;\n          result = formatStackIndex;\n          if ((int)curFormatCharPtr < 0x11) goto LAB_0008333e;\n        }\n        if (combinedFmtWidth != (int *******)0x0) {\n          result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n          if (result == 0) {\n            tempVal2 = formatStackIndex + 1;\n            ppppppppiVar16 = (int ********)formatBuffers;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        curFormatCharPtr = curFormatCharPtr + -4;\n        tempVal2 = 1;\n        result = 0;\n        ppppppppiVar16 = (int ********)formatBuffers;\n      } while (0x10 < (int)curFormatCharPtr);\n    }\nLAB_0008333e:\n    combinedFmtWidth = (int *******)((int)combinedFmtWidth + (int)curFormatCharPtr);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = curFormatCharPtr;\n    formatStackIndex = tempVal2;\n    if (7 < tempVal2) {\n      if (combinedFmtWidth == (int *******)0x0) {\n        if ((int)maxWidth < (int)pppppppiVar20) {\n          maxWidth = pppppppiVar20;\n        }\n        resultLength = resultLength + (int)maxWidth;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)maxWidth < (int)pppppppiVar20) {\n    maxWidth = pppppppiVar20;\n  }\n  resultLength = resultLength + (int)maxWidth;\n  if ((combinedFmtWidth != (int *******)0x0) &&\n     (result = FUN_00082ac0(inputStringAddr,formatStringAddr,&formatStackBase), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  formatStackIndex = 0;\n  formatStackPtr = (int ********)formatBuffers;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  tempVal1 = curChar - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  curFormatCharPtr = argsAddr;\n  do {\n    argsAddr = (int *******)((int)curFormatCharPtr + 1);\n    curChar = (uint)*(byte *)curFormatCharPtr;\n    pppppppiVar20 = (int *******)(tempVal1 + (int)pppppppiVar20 * 10);\n    tempVal1 = curChar - 0x30;\n    curFormatCharPtr = argsAddr;\n  } while (tempVal1 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  curChar = (uint)*(byte *)argsAddr;\n  if (paddingChar == '\\0') {\n    paddingChar = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "param_1": "inputStringAddr",
                "param_2": "formatStringAddr",
                "param_3": "argsAddr",
                "param_4": "argBuffersAddr",
                "bVar1": "isLeftJustified",
                "bVar2": "hasSign",
                "bVar3": "hasAlternateForm",
                "cVar4": "conversionSpecifier",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "formatStackPtr",
                "piVar7": "fmtWidthPtr",
                "iVar8": "result",
                "cVar9": "conversionChar",
                "pppppppiVar10": "curFormatCharPtr",
                "uVar11": "tempVal1",
                "ppiVar12": "bufferArrayPtr",
                "uVar13": "curFlags",
                "uVar14": "curChar",
                "iVar15": "tempVal2",
                "iVar17": "tempVal3",
                "pppppppiVar18": "tempFormatPtr1",
                "piVar19": "widthPtr",
                "piVar22": "isNegativePtr",
                "piVar23": "tempFormatPtr2",
                "uVar21": "tempVal4",
                "uVar24": "tempVal5",
                "bVar26": "isShort",
                "lVar27": "combinedVal",
                "local_dc": "maxWidth",
                "local_d4": "combinedWidth",
                "local_c8": "curArgPtr",
                "local_c4": "resultLength",
                "local_c0": "hexTable",
                "local_a1": "paddingChar",
                "local_a0": "hexPrefix",
                "local_9f": "isHex",
                "local_9c": "formatStackBase",
                "local_98": "formatStackIndex",
                "local_94": "combinedFmtWidth",
                "local_90": "paddingWidth",
                "cStack_6a": "tempChar",
                "local_69": "tempBool1",
                "local_68": "formatBuffers",
                "local_64": "tempFormatArr"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "decode_and_check_0008378c",
            "code": "\nint decode_and_check_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int check_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort modified_flag;\n  undefined2 short_value;\n  undefined *buffer;\n  undefined4 buffer_size_copy;\n  undefined4 zero;\n  undefined4 value;\n  undefined4 value_copy;\n  undefined4 param2_copy;\n  undefined stack_buffer [1024];\n  \n  param2_copy = *(undefined4 *)(param2 + 100);\n  value = *(undefined4 *)(param2 + 0x1c);\n  short_value = *(undefined2 *)(param2 + 0xe);\n  value_copy = *(undefined4 *)(param2 + 0x24);\n  buffer_array[0] = stack_buffer;\n  modified_flag = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_copy = 0x400;\n  zero = 0;\n  buffer = buffer_array[0];\n  result = FUN_00082b38(param1,buffer_array);\n  if ((-1 < result) && (check_result = FUN_00083adc(param1,buffer_array), check_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)modified_flag << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "decode_and_check_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "check_result",
                "local_488": "buffer_array",
                "local_480": "buffer_size",
                "local_47c": "modified_flag",
                "local_47a": "short_value",
                "local_478": "buffer",
                "local_474": "buffer_size_copy",
                "local_470": "zero",
                "local_46c": "value",
                "local_464": "value_copy",
                "local_424": "param2_copy",
                "auStack_420": "stack_buffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_data_00083808",
            "code": "\nundefined4 processData_00083808(undefined4 *output,int *input)\n\n{\n  int value1;\n  int value2;\n  uint temp;\n  ushort tempValue;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  tempValue = *(ushort *)(input + 3);\n  temp = (uint)tempValue;\n  if ((int)(temp << 0x1c) < 0) {\n    value2 = input[4];\n  }\n  else {\n    if (-1 < (int)(temp << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = tempValue | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          FUN_00083d9c(output);\n          tempValue = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      value2 = input[4];\n      tempValue = tempValue & 0xffdb;\n      *input = value2;\n      input[1] = 0;\n    }\n    else {\n      value2 = input[4];\n    }\n    *(ushort *)(input + 3) = tempValue | 8;\n    temp = (uint)(tempValue | 8);\n  }\n  if ((value2 == 0) && ((temp & 0x280) != 0x200)) {\n    FUN_000842a4(output,input);\n    temp = (uint)*(ushort *)(input + 3);\n    value2 = input[4];\n  }\n  if ((temp & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp << 0x1e)) {\n      value1 = input[5];\n    }\n    input[2] = value1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *ptr_input,int *ptr_output)\n\n{\n  int *input_ptr1;\n  int var1;\n  ushort var2;\n  uint var3;\n  int var4;\n  code *func_ptr;\n  undefined4 unaff_val1;\n  int var5;\n  \n  if ((ptr_input != (int *)0x0) && (ptr_input[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(ptr_output + 3) == 0) {\n    return 0;\n  }\n  var2 = *(ushort *)(ptr_output + 3);\n  if ((int)((uint)var2 << 0x1c) < 0) {\n    var5 = ptr_output[4];\n    if (var5 == 0) {\n      return 0;\n    }\n    var1 = *ptr_output;\n    if ((var2 & 3) == 0) {\n      var4 = ptr_output[5];\n    }\n    else {\n      var4 = 0;\n    }\n    *ptr_output = var5;\n    var1 = var1 - var5;\n    ptr_output[2] = var4;\n    do {\n      if (var1 < 1) {\n        return 0;\n      }\n      var4 = (*(code *)ptr_output[9])(ptr_input,ptr_output[7],var5,var1,unaff_val1);\n      var1 = var1 - var4;\n      var5 = var5 + var4;\n    } while (0 < var4);\nLAB_00083a54:\n    *(ushort *)(ptr_output + 3) = *(ushort *)(ptr_output + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(ptr_output + 3) = var2 | 0x800;\n  if ((ptr_output[1] < 1) && (ptr_output[0xf] < 1)) {\n    return 0;\n  }\n  func_ptr = (code *)ptr_output[10];\n  if (func_ptr == (code *)0x0) {\n    return 0;\n  }\n  var3 = (uint)(var2 | 0x800);\n  var5 = *ptr_input;\n  *ptr_input = 0;\n  if ((var2 & 0x1000) == 0) {\n    var1 = (*func_ptr)(ptr_input,ptr_output[7],var3 & 0x1000,1);\n    if ((var1 == -1) && (var4 = *ptr_input, var4 != 0)) {\n      if ((var4 == 0x1d) || (var4 == 0x16)) {\n        *ptr_input = var5;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    var3 = (uint)*(ushort *)(ptr_output + 3);\n    func_ptr = (code *)ptr_output[10];\n  }\n  else {\n    var1 = ptr_output[0x14];\n  }\n  if (((int)(var3 << 0x1d) < 0) && (var1 = var1 - ptr_output[1], ptr_output[0xc] != 0)) {\n    var1 = var1 - ptr_output[0xf];\n  }\n  var1 = (*func_ptr)(ptr_input,ptr_output[7],var1,0);\n  if (var1 == -1) {\n    var4 = *ptr_input;\n    if (var4 != 0) {\n      if ((var4 != 0x1d) && (var4 != 0x16)) {\n        *(ushort *)(ptr_output + 3) = *(ushort *)(ptr_output + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(ptr_output + 3) = *(ushort *)(ptr_output + 3) & 0xf7ff;\n      *ptr_output = ptr_output[4];\n      ptr_output[1] = 0;\n      goto LAB_00083a00;\n    }\n    var2 = *(ushort *)(ptr_output + 3) & 0xf7ff;\n    ptr_output[1] = 0;\n    *(ushort *)(ptr_output + 3) = var2;\n    *ptr_output = ptr_output[4];\n  }\n  else {\n    var2 = *(ushort *)(ptr_output + 3) & 0xf7ff;\n    *ptr_output = ptr_output[4];\n    *(ushort *)(ptr_output + 3) = var2;\n    ptr_output[1] = 0;\n  }\n  if ((int)((uint)var2 << 0x13) < 0) {\n    ptr_output[0x14] = var1;\n  }\nLAB_00083a00:\n  input_ptr1 = (int *)ptr_output[0xc];\n  *ptr_input = var5;\n  if (input_ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (input_ptr1 != ptr_output + 0x10) {\n    FUN_00083d9c(ptr_input);\n  }\n  ptr_output[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "ptr_input",
                "param_2": "ptr_output",
                "piVar1": "input_ptr1",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "iVar5": "var4",
                "pcVar6": "func_ptr",
                "unaff_r4": "unaff_val1",
                "iVar7": "var5"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int data)\n\n{\n  undefined4 *pointer1;\n  undefined4 *pointer2;\n  \n  if (*(int *)(data + 0x38) == 0) {\n    pointer1 = *(undefined4 **)(data + 4);\n    *(undefined **)(data + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(data + 0x2e4) = 3;\n    *(int *)(data + 0x2e8) = data + 0x2ec;\n    *(undefined4 *)(data + 0x2e0) = 0;\n    *(undefined2 *)(pointer1 + 3) = 4;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    *(undefined2 *)((int)pointer1 + 0xe) = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    FUN_00082504(pointer1 + 0x17,0,8);\n    pointer2 = *(undefined4 **)(data + 8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)pointer2 + 0xe) = 1;\n    *(undefined2 *)(pointer2 + 3) = 9;\n    *pointer2 = 0;\n    pointer2[1] = 0;\n    pointer2[2] = 0;\n    pointer2[0x19] = 0;\n    pointer2[4] = 0;\n    pointer2[5] = 0;\n    pointer2[6] = 0;\n    FUN_00082504(pointer2 + 0x17,0,8);\n    pointer1 = *(undefined4 **)(data + 0xc);\n    pointer2[7] = pointer2;\n    pointer2[8] = &LAB_00084440_1;\n    pointer2[9] = 0x84465;\n    pointer2[10] = 0x8449d;\n    pointer2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(pointer1 + 3) = 0x12;\n    *(undefined2 *)((int)pointer1 + 0xe) = 2;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    FUN_00082504(pointer1 + 0x17,0,8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(data + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data",
                "puVar1": "pointer1",
                "puVar2": "pointer2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int index;\n  uint result;\n  uint currentByte;\n  byte *dataPtr;\n  uint counter;\n  byte tempByte;\n  byte buffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  index = FUN_00084298();\n  if ((index == 1) && (param2 - 1 < 0xff)) {\n    currentByte = param2 & 0xff;\n    tempByte = (byte)currentByte;\n    result = 1;\n  }\n  else {\n    result = FUN_0008456c(param1,&tempByte,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    currentByte = (uint)tempByte;\n  }\n  counter = 0;\n  do {\n    dataPtr = param3[2] + -1;\n    param3[2] = dataPtr;\n    if ((int)dataPtr < 0) {\n      if ((int)param3[6] <= (int)dataPtr) {\n        **param3 = (byte)currentByte;\n        dataPtr = *param3;\n        currentByte = (uint)*dataPtr;\n        if (currentByte != 10) goto LAB_00083c90;\n      }\n      index = FUN_000844c4(param1,currentByte,param3);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentByte;\n      dataPtr = *param3;\nLAB_00083c90:\n      *param3 = dataPtr + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    currentByte = (uint)buffer[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "index",
                "uVar2": "result",
                "uVar3": "currentByte",
                "pbVar4": "dataPtr",
                "uVar5": "counter",
                "local_1c": "tempByte",
                "abStack_1b": "buffer"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "perform_memory_operation_00083d00",
            "code": "\nundefined4 performMemoryOperation_00083d00(undefined4 memoryAddress,int blockOffset)\n\n{\n  int result;\n  uint relOffset;\n  int adjustedOffset;\n  \n  FUNC_00082598();\n  relOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((relOffset - blockOffset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = FUN_00082970(memoryAddress,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relOffset) {\n      result = FUN_00082970(memoryAddress,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relOffset - adjustedOffset | 1;\n        FUNC_0008259c(memoryAddress);\n        return 1;\n      }\n      adjustedOffset = FUN_00082970(memoryAddress,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(memoryAddress);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "perform_memory_operation_00083d00",
                "param_1": "memoryAddress",
                "param_2": "blockOffset",
                "iVar1": "result",
                "uVar2": "relOffset",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "relocate_symbols_00083d9c",
            "code": "\nvoid relocateSymbols_00083d9c(undefined4 arg1,int arg2)\n\n{\n  int tmp1;\n  bool isSpecial;\n  uint ptr1;\n  dword ptr2;\n  int tmp2;\n  uint size1;\n  dword ptr3;\n  uint size2;\n  dword ptr4;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  ptr1 = *(uint *)(arg2 + -4);\n  ptr3 = arg2 - 8;\n  size1 = ptr1 & 0xfffffffe;\n  ptr2 = ptr3 + size1;\n  size2 = *(uint *)(ptr2 + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == ptr2) {\n    size2 = size2 + size1;\n    if (-1 < (int)(ptr1 << 0x1f)) {\n      ptr3 = ptr3 - *(int *)(arg2 + -8);\n      tmp2 = *(int *)(ptr3 + 0xc);\n      tmp1 = *(int *)(ptr3 + 8);\n      size2 = size2 + *(int *)(arg2 + -8);\n      *(int *)(tmp1 + 0xc) = tmp2;\n      *(int *)(tmp2 + 8) = tmp1;\n    }\n    ptr2 = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(ptr3 + 4) = size2 | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = ptr3;\n    if (ptr2 <= size2) {\n      FUN_00083d00(arg1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(ptr2 + 4) = size2;\n    if ((ptr1 & 1) == 0) {\n      ptr3 = ptr3 - *(int *)(arg2 + -8);\n      tmp1 = *(int *)(ptr3 + 8);\n      size1 = size1 + *(int *)(arg2 + -8);\n      if (tmp1 == 0x2007046c) {\n        isSpecial = true;\n      }\n      else {\n        tmp2 = *(int *)(ptr3 + 0xc);\n        *(int *)(tmp1 + 0xc) = tmp2;\n        *(int *)(tmp2 + 8) = tmp1;\n        isSpecial = false;\n      }\n    }\n    else {\n      isSpecial = false;\n    }\n    if (-1 < *(int *)(ptr2 + size2 + 4) << 0x1f) {\n      size1 = size1 + size2;\n      tmp1 = *(int *)(ptr2 + 8);\n      if ((!isSpecial) && (tmp1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = ptr3;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = ptr3;\n        *(undefined4 *)(ptr3 + 0xc) = 0x2007046c;\n        *(undefined4 *)(ptr3 + 8) = 0x2007046c;\n        *(uint *)(ptr3 + 4) = size1 | 1;\n        *(uint *)(ptr3 + size1) = size1;\n        goto LAB_00083e30;\n      }\n      tmp2 = *(int *)(ptr2 + 0xc);\n      *(int *)(tmp1 + 0xc) = tmp2;\n      *(int *)(tmp2 + 8) = tmp1;\n    }\n    *(uint *)(ptr3 + 4) = size1 | 1;\n    *(uint *)(ptr3 + size1) = size1;\n    if (!isSpecial) {\n      if (size1 < 0x200) {\n        ptr1 = size1 & 0xfffffff8;\n        tmp1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + ptr1);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(size1 >> 3) >> 2 & 0xffU);\n        *(int *)(ptr3 + 8) = tmp1;\n        *(uint *)(ptr3 + 0xc) = ptr1 + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + ptr1) = ptr3;\n        *(dword *)(tmp1 + 0xc) = ptr3;\n        FUNC_0008259c(arg1);\n        return;\n      }\n      ptr1 = size1 >> 9;\n      if (ptr1 < 5) {\n        tmp1 = (size1 >> 6) + 0x38;\n        tmp2 = tmp1 * 2;\n      }\n      else if (ptr1 < 0x15) {\n        tmp1 = ptr1 + 0x5b;\n        tmp2 = tmp1 * 2;\n      }\n      else if (ptr1 < 0x55) {\n        tmp1 = (size1 >> 0xc) + 0x6e;\n        tmp2 = tmp1 * 2;\n      }\n      else if (ptr1 < 0x155) {\n        tmp1 = (size1 >> 0xf) + 0x77;\n        tmp2 = tmp1 * 2;\n      }\n      else if (ptr1 < 0x555) {\n        tmp1 = (size1 >> 0x12) + 0x7c;\n        tmp2 = tmp1 * 2;\n      }\n      else {\n        tmp2 = 0xfc;\n        tmp1 = 0x7e;\n      }\n      ptr4 = tmp2 * 4 + 0x20070464;\n      ptr2 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tmp2];\n      if (ptr2 == ptr4) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (tmp1 >> 2 & 0xffU);\n        ptr4 = ptr2;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr2 + 4) & 0xfffffffc) <= size1) break;\n          ptr2 = *(dword *)(ptr2 + 8);\n        } while (ptr4 != ptr2);\n        ptr4 = *(dword *)(ptr2 + 0xc);\n      }\n      *(dword *)(ptr3 + 0xc) = ptr4;\n      *(dword *)(ptr3 + 8) = ptr2;\n      *(dword *)(ptr4 + 8) = ptr3;\n      *(dword *)(ptr2 + 0xc) = ptr3;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "relocate_symbols_00083d9c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "tmp1",
                "bVar2": "isSpecial",
                "uVar3": "ptr1",
                "dVar4": "ptr2",
                "iVar5": "tmp2",
                "uVar6": "size1",
                "dVar7": "ptr3",
                "uVar8": "size2",
                "dVar9": "ptr4"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "decode_and_process_data_00083f34",
            "code": "\nundefined4 decodeAndProcessData_00083f34(undefined4 *outputBuffer,uint *inputData,uint **paramArray)\n\n{\n  int result;\n  uint flag1;\n  uint flag2;\n  ushort tempFlag;\n  uint flag3;\n  uint *ptr1;\n  uint *ptr2;\n  uint count;\n  uint size;\n  uint temp;\n  uint temp2;\n  uint localFlag;\n  \n  if (paramArray[2] != (uint *)0x0) {\n    tempFlag = *(ushort *)(inputData + 3);\n    flag3 = (uint)tempFlag;\n    if (((int)(flag3 << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *paramArray;\n    }\n    else {\n      result = FUN_00083808(outputBuffer,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      tempFlag = *(ushort *)(inputData + 3);\n      flag3 = (uint)tempFlag;\n      ptr2 = *paramArray;\n    }\n    if ((tempFlag & 2) == 0) {\n      flag1 = flag3 & 2;\n      temp = flag1;\n      count = flag1;\n      localFlag = flag1;\n      if ((flag3 & 1) == 0) {\n        flag1 = 0;\n        temp = 0;\n        while( true ) {\n          while (flag1 == 0) {\n            temp = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            flag1 = *ptr1;\n          }\n          count = inputData[2];\n          if ((int)(flag3 << 0x16) < 0) {\n            if (flag1 < count) {\n              flag3 = *inputData;\n              count = flag1;\n            }\n            else if ((flag3 & 0x480) == 0) {\n              flag3 = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              count = result + 1 + flag1;\n              size = (int)(inputData[5] * 3) / 2;\n              if (count <= size) {\n                count = size;\n              }\n              if ((int)(flag3 << 0x15) < 0) {\n                size = FUN_00081e14(outputBuffer,count);\n                if (size == 0) {\n                  *outputBuffer = 0xc;\n                  tempFlag = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(size,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = FUN_000825b0(outputBuffer);\n                if (size == 0) {\n                  FUN_00083d9c(outputBuffer,inputData[4]);\n                  tempFlag = *(ushort *)(inputData + 3) & 0xff7f;\n                  *outputBuffer = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              flag3 = size + result;\n              inputData[4] = size;\n              inputData[5] = count;\n              *inputData = flag3;\n              inputData[2] = count - result;\n              count = flag1;\n            }\n            FUN_00082438(flag3,temp,count);\n            inputData[2] = inputData[2] - count;\n            *inputData = *inputData + count;\n            count = flag1;\n          }\n          else if ((inputData[4] < *inputData) || (flag3 = inputData[5], flag1 < flag3)) {\n            if (flag1 < count) {\n              count = flag1;\n            }\n            FUN_00082438(*inputData,temp,count);\n            flag3 = inputData[2];\n            inputData[2] = flag3 - count;\n            *inputData = *inputData + count;\n            if ((flag3 - count == 0) && (result = FUN_00083adc(outputBuffer,inputData), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            count = 0x7fffffff;\n            if (flag1 < 0x7fffffff) {\n              count = flag1;\n            }\n            count = (*(code *)inputData[9])(outputBuffer,inputData[7],temp,(count / flag3) * flag3);\n            if ((int)count < 1) goto LAB_0008402e;\n          }\n          ptr1 = paramArray[2];\n          temp = temp + count;\n          flag1 = flag1 - count;\n          paramArray[2] = (uint *)((int)ptr1 - count);\n          if ((uint *)((int)ptr1 - count) == (uint *)0x0) break;\n          flag3 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (flag1 == 0) {\n            count = *ptr2;\n            flag1 = ptr2[1];\n            localFlag = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localFlag == 0) {\n            result = FUN_00084384(count,10,flag1);\n            if (result == 0) {\n              temp = flag1 + 1;\n              localFlag = 1;\n            }\n            else {\n              temp = (result + 1) - count;\n              localFlag = 1;\n            }\n          }\n          size = *inputData;\n          flag3 = temp;\n          if (flag1 <= temp) {\n            flag3 = flag1;\n          }\n          flag2 = inputData[5];\n          if ((inputData[4] < size) && (temp2 = inputData[2] + flag2, (int)temp2 < (int)flag3)) {\n            FUN_00082438(size,count,temp2);\n            *inputData = *inputData + temp2;\n            result = FUN_00083adc(outputBuffer,inputData);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)flag3 < (int)flag2) {\n            FUN_00082438(size,count,flag3);\n            inputData[2] = inputData[2] - flag3;\n            *inputData = flag3 + *inputData;\n            temp2 = flag3;\n          }\n          else {\n            temp2 = (*(code *)inputData[9])(outputBuffer,inputData[7],count,flag2);\n            if ((int)temp2 < 1) goto LAB_0008402e;\n          }\n          temp = temp - temp2;\n          if (temp == 0) {\n            result = FUN_00083adc(outputBuffer,inputData);\n            if (result != 0) goto LAB_0008402e;\n            localFlag = 0;\n          }\n          ptr1 = paramArray[2];\n          count = count + temp2;\n          flag1 = flag1 - temp2;\n          paramArray[2] = (uint *)((int)ptr1 - temp2);\n        } while ((uint *)((int)ptr1 - temp2) != (uint *)0x0);\n      }\n    }\n    else {\n      flag1 = 0;\n      flag3 = 0;\n      do {\n        while( true ) {\n          temp = flag3;\n          if (0x7ffffbff < flag3) {\n            temp = 0x7ffffc00;\n          }\n          if (flag3 != 0) break;\n          flag1 = *ptr2;\n          flag3 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(outputBuffer,inputData[7],flag1,temp);\n        if (result < 1) {\nLAB_0008402e:\n          tempFlag = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = tempFlag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = paramArray[2];\n        flag1 = flag1 + result;\n        flag3 = flag3 - result;\n        paramArray[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "decode_and_process_data_00083f34",
                "param_1": "outputBuffer",
                "param_2": "inputData",
                "param_3": "paramArray",
                "iVar1": "result",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "tempFlag",
                "uVar5": "flag3",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "count",
                "uVar9": "size",
                "uVar10": "temp",
                "uVar11": "temp2",
                "local_2c": "localFlag"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocation_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000[274].r_info": "relocation_info"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "update_flags_and_values_000842a4",
            "code": "\nvoid updateFlagsAndValues_000842a4(int inputParam,int *outputParam)\n\n{\n  ushort value1;\n  int result1;\n  int result2;\n  uint value2;\n  bool isConditionMet;\n  undefined auxStack [4];\n  uint localValue;\n  \n  value1 = *(ushort *)(outputParam + 3);\n  value2 = (uint)value1;\n  if ((int)(value2 << 0x1e) < 0) {\n    *outputParam = (int)outputParam + 0x43;\n    outputParam[4] = (int)outputParam + 0x43;\n    outputParam[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)outputParam + 0xe)) {\n    result1 = FUN_000846b4(inputParam,(int)*(short *)((int)outputParam + 0xe),auxStack);\n    if (-1 < result1) {\n      isConditionMet = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (outputParam[10] == 0x8449d)) {\n        result1 = 0x400;\n        *(ushort *)(outputParam + 3) = *(ushort *)(outputParam + 3) | 0x400;\n        outputParam[0x13] = 0x400;\n      }\n      else {\n        result1 = 0x400;\n        *(ushort *)(outputParam + 3) = *(ushort *)(outputParam + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value1 = *(ushort *)(outputParam + 3);\n    value2 = (uint)value1;\n  }\n  *(ushort *)(outputParam + 3) = value1 | 0x800;\n  if ((value2 & 0x80) == 0) {\n    result1 = 0x400;\n  }\n  else {\n    result1 = 0x40;\n  }\n  isConditionMet = false;\nLAB_00084300:\n  result2 = FUN_00081e14(inputParam,result1);\n  value1 = *(ushort *)(outputParam + 3);\n  if (result2 == 0) {\n    if (-1 < (int)((uint)value1 << 0x16)) {\n      *(ushort *)(outputParam + 3) = value1 | 2;\n      *outputParam = (int)outputParam + 0x43;\n      outputParam[4] = (int)outputParam + 0x43;\n      outputParam[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(inputParam + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(outputParam + 3) = value1 | 0x80;\n    *outputParam = result2;\n    outputParam[4] = result2;\n    outputParam[5] = result1;\n    if ((isConditionMet) && (result1 = FUN_000846dc(inputParam,(int)*(short *)((int)outputParam + 0xe)), result1 != 0))\n    {\n      *(ushort *)(outputParam + 3) = *(ushort *)(outputParam + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "update_flags_and_values_000842a4",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "uVar1": "value1",
                "iVar2": "result1",
                "iVar3": "result2",
                "uVar4": "value2",
                "bVar5": "isConditionMet",
                "auStack_54": "auxStack",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_next_byte_00084384",
            "code": "\nuint * find_next_byte_00084384(uint *data_ptr,char target_byte,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool is_last_byte;\n  \n  if (((uint)data_ptr & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      current_ptr = data_ptr;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(target_byte,target_byte),CONCAT11(target_byte,target_byte));\n        data_ptr = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        data_ptr = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data_ptr = (uint *)0x0;\n    }\n    else if (*(char *)data_ptr != target_byte) {\n      index = 0;\n      do {\n        data_ptr = (uint *)((int)data_ptr + 1);\n        is_last_byte = index == length - 1;\n        index = index + 1;\n        if (is_last_byte) goto LAB_000843dc;\n      } while (*(char *)data_ptr != target_byte);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    data_ptr = (uint *)0x0;\n  }\n  else if (*(char *)data_ptr != target_byte) {\n    current_ptr = (uint *)((int)data_ptr + 1);\n    length = length - 1;\n    do {\n      data_ptr = current_ptr;\n      if (((uint)data_ptr & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      current_ptr = (uint *)((int)data_ptr + 1);\n      length = length - 1;\n    } while (*(char *)data_ptr != target_byte);\n  }\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_next_byte_00084384",
                "param_1": "data_ptr",
                "param_2": "target_byte",
                "param_3": "length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_last_byte"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *output,int input,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  ushort value;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  undefined4 unusedVar4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = FUN_000811cc((int)*(short *)(input + 0xe),param1,param2,param2,unusedVar1,unusedVar2,\n                       unusedVar3,unusedVar4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "unaff_r6": "unusedVar3",
                "in_lr": "unusedVar4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_status_0008449c",
            "code": "\nvoid updateStatus_0008449c(undefined4 arg1,int arg2)\n\n{\n  int status;\n  ushort updatedValue;\n  \n  status = FUN_00084700(arg1,(int)*(short *)(arg2 + 0xe));\n  if (status == -1) {\n    updatedValue = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (status != -1) {\n    *(int *)(arg2 + 0x50) = status;\n  }\n  *(ushort *)(arg2 + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_status_0008449c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "status",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int inputBuffer,uint inputLength,undefined4 *outputBuffer,undefined4 additionalData)\n\n{\n  ushort tempValue;\n  uint convertedValue;\n  undefined *tempPtr;\n  int tempInt;\n  \n  if ((inputBuffer != 0) && (*(int *)(inputBuffer + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  tempValue = *(ushort *)(outputBuffer + 3);\n  convertedValue = (uint)tempValue;\n  outputBuffer[2] = outputBuffer[6];\n  if ((-1 < (int)(convertedValue << 0x1c)) || (tempInt = outputBuffer[4], tempInt == 0)) {\n    tempInt = FUN_00083808(inputBuffer,outputBuffer,tempValue,convertedValue,additionalData);\n    if (tempInt != 0) {\n      return 0xffffffff;\n    }\n    tempValue = *(ushort *)(outputBuffer + 3);\n    tempInt = outputBuffer[4];\n    convertedValue = (uint)tempValue;\n  }\n  inputLength = inputLength & 0xff;\n  if ((int)(convertedValue << 0x12) < 0) {\n    tempPtr = (undefined *)*outputBuffer;\n    tempInt = (int)tempPtr - tempInt;\n    if (tempInt < (int)outputBuffer[5]) {\nLAB_000844f6:\n      tempInt = tempInt + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    outputBuffer[0x19] = outputBuffer[0x19] & 0xffffdfff;\n    tempPtr = (undefined *)*outputBuffer;\n    *(ushort *)(outputBuffer + 3) = tempValue | 0x2000;\n    tempInt = (int)tempPtr - tempInt;\n    if (tempInt < (int)outputBuffer[5]) goto LAB_000844f6;\n  }\n  tempInt = FUN_00083adc(inputBuffer,outputBuffer);\n  if (tempInt != 0) {\n    return 0xffffffff;\n  }\n  tempPtr = (undefined *)*outputBuffer;\n  tempInt = 1;\nLAB_000844f8:\n  outputBuffer[2] = outputBuffer[2] + -1;\n  *outputBuffer = tempPtr + 1;\n  *tempPtr = (char)inputLength;\n  if (((outputBuffer[5] == tempInt) ||\n      (((int)((uint)*(ushort *)(outputBuffer + 3) << 0x1f) < 0 && (inputLength == 10)))) &&\n     (tempInt = FUN_00083adc(inputBuffer,outputBuffer), tempInt != 0)) {\n    return 0xffffffff;\n  }\n  return inputLength;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "inputBuffer",
                "param_2": "inputLength",
                "param_3": "outputBuffer",
                "param_4": "additionalData",
                "uVar1": "tempValue",
                "uVar2": "convertedValue",
                "puVar3": "tempPtr",
                "iVar4": "tempInt"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_function_0008456c",
            "code": "\nvoid executeFunction_0008456c(undefined4 *outputData,int inputSize,undefined4 inputData,undefined4 *status)\n\n{\n  functionPointer *functionPointer;\n  undefined4 result;\n  int returnValue;\n  undefined tempData [12];\n  \n  functionPointer = DAT_20070898;\n  if (inputSize == 0) {\n    result = FUN_00084290();\n    returnValue = (*functionPointer)(outputData,tempData,0,result,status);\n  }\n  else {\n    result = FUN_00084290();\n    returnValue = (*functionPointer)(outputData,inputSize,inputData,result,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *outputData = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_function_0008456c",
                "param_1": "outputData",
                "param_2": "inputSize",
                "param_3": "inputData",
                "param_4": "status",
                "code": "functionPointer",
                "pcVar1": "functionPointer",
                "uVar2": "result",
                "iVar3": "returnValue",
                "auStack_24": "tempData"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "set_data_value_000845bc",
            "code": "\nundefined4 setDataValue_000845bc(undefined4 *output,undefined *buffer,uint value)\n\n{\n  if (buffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (char)value;\n    return 1;\n  }\n  *output = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "set_data_value_000845bc",
                "param_1": "output",
                "param_2": "buffer",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_parameter_000846a4",
            "code": "\nundefined4 processParameter_000846a4(int parameter)\n\n{\n  dword rOffset;\n  undefined4 returnValue;\n  int result;\n  \n  rOffset = relArray[140].r_offset;\n  if (parameter != 0) {\n    if ((relArray[140].r_offset != 0) &&\n       (*(int *)(relArray[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(parameter + 0xc) != 0) {\n      returnValue = FUN_00083adc(rOffset,parameter);\n      if ((*(functionPointer **)(parameter + 0x2c) != (functionPointer *)0x0) &&\n         (result = (**(functionPointer **)(parameter + 0x2c))(rOffset,*(undefined4 *)(parameter + 0x1c)), result < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(parameter + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(rOffset,*(undefined4 *)(parameter + 0x10));\n      }\n      if (*(int *)(parameter + 0x30) != 0) {\n        if (*(int *)(parameter + 0x30) != parameter + 0x40) {\n          FUN_00083d9c(rOffset);\n        }\n        *(undefined4 *)(parameter + 0x30) = 0;\n      }\n      if (*(int *)(parameter + 0x44) != 0) {\n        FUN_00083d9c(rOffset);\n        *(undefined4 *)(parameter + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(parameter + 0xc) = 0;\n      FUNC_00083c0c();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_parameter_000846a4",
                "param_1": "parameter",
                "dVar1": "rOffset",
                "uVar2": "returnValue",
                "iVar3": "result",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "code": "functionPointer"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_and_assign_value_000846b4",
            "code": "\nvoid check_and_assign_value_000846b4(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_and_assign_value_000846b4",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "get_return_value_if_needed_000846dc",
            "code": "\nvoid getReturnValueIfNeeded_000846dc(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "get_return_value_if_needed_000846dc",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_assign_value_00084700",
            "code": "\nvoid checkAndAssignValue_00084700(int *outputVariable,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int iVar1;\n  \n  DAT_200711bc = 0;\n  iVar1 = FUN_000811c2(inputParam1,inputParam2,inputParam3);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *outputVariable = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_assign_value_00084700",
                "param_1": "outputVariable",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "process_data_00084728",
            "code": "\nvoid processData_00084728(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "process_data_00084728",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_params_00084750",
            "code": "\nint checkParams_00084750(int input1,int input2,int flag1,int flag2)\n\n{\n  int result;\n  \n  if ((flag2 == 0) && (flag1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_params_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_store_0008477c",
            "code": "\nvoid subtract_and_store_0008477c(uint input_value,int int_value,undefined4 param_3_value,undefined4 param_4_value,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_000847e0();\n  product = product * CONCAT44(param_4_value,param_3_value);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (int_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_store_0008477c",
                "param_1": "input_value",
                "param_2": "int_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_values_000847ac",
            "code": "\nvoid subtract_values_000847ac(uint input_value,int subtractor,undefined4 multiplier_low,undefined4 multiplier_high,int *output_array)\n\n{\n  uint result_low;\n  longlong result;\n  \n  result = FUN_00084a80();\n  result = result * CONCAT44(multiplier_high,multiplier_low);\n  result_low = (uint)result;\n  *output_array = input_value - result_low;\n  difference_2 = (subtractor - (int)((ulonglong)result >> 0x20)) - (uint)(input_value < result_low);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_values_000847ac",
                "param_1": "input_value",
                "param_2": "subtractor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "output_array",
                "uVar1": "result_low",
                "lVar2": "result",
                "param_5[1]": "difference_2"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "calculate_division_000847e0",
            "code": "\nundefined8 calculateDivision_000847e0(uint dividend,uint dividendLowerBits,uint divisor,uint divisorLowerBits)\n\n{\n  longlong quotient;\n  uint quotientLowerBits;\n  uint temp;\n  uint shiftedDivisor;\n  uint quotientMultiplier;\n  int leadingZeros;\n  uint tmp1;\n  uint tmp2;\n  uint sign;\n  uint tmp3;\n  uint temp2;\n  uint temp3;\n  bool carryFlag;\n  \n  if ((int)dividendLowerBits < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    dividendLowerBits = -dividendLowerBits - (uint)carryFlag;\n    sign = 0xffffffff;\n  }\n  else {\n    sign = 0;\n  }\n  if ((int)divisorLowerBits < 0) {\n    sign = ~sign;\n    carryFlag = divisor != 0;\n    divisor = -divisor;\n    divisorLowerBits = -divisorLowerBits - (uint)carryFlag;\n  }\n  if (divisorLowerBits == 0) {\n    if (dividendLowerBits < divisor) {\n      leadingZeros = LZCOUNT(divisor);\n      if (leadingZeros != 0) {\n        temp = dividend >> (0x20U - leadingZeros & 0xff);\n        divisor = divisor << leadingZeros;\n        dividend = dividend << leadingZeros;\n        dividendLowerBits = dividendLowerBits << leadingZeros | temp;\n      }\n      quotientLowerBits = divisor >> 0x10;\n      shiftedDivisor = dividendLowerBits / quotientLowerBits;\n      tmp1 = (divisor & 0xffff) * shiftedDivisor;\n      tmp3 = dividend >> 0x10 | (dividendLowerBits - quotientLowerBits * shiftedDivisor) * 0x10000;\n      temp = shiftedDivisor;\n      if (tmp3 <= tmp1 && tmp1 - tmp3 != 0) {\n        carryFlag = CARRY4(tmp3,divisor);\n        tmp3 = tmp3 + divisor;\n        temp = shiftedDivisor - 1;\n        if ((carryFlag == false) && (tmp3 <= tmp1 && tmp1 - tmp3 != 0)) {\n          temp = shiftedDivisor - 2;\n          tmp3 = tmp3 + divisor;\n        }\n      }\n      tmp2 = (tmp3 - tmp1) / quotientLowerBits;\n      shiftedDivisor = (divisor & 0xffff) * tmp2;\n      tmp1 = dividend & 0xffff | ((tmp3 - tmp1) - quotientLowerBits * tmp2) * 0x10000;\n      quotientLowerBits = tmp2;\n      if (tmp1 <= shiftedDivisor && shiftedDivisor - tmp1 != 0) {\n        quotientLowerBits = tmp2 - 1;\n        if ((CARRY4(tmp1,divisor) == false) &&\n           (tmp1 + divisor <= shiftedDivisor && shiftedDivisor - (tmp1 + divisor) != 0)) {\n          quotientLowerBits = tmp2 - 2;\n        }\n      }\n      quotientLowerBits = quotientLowerBits | temp << 0x10;\n      temp = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      leadingZeros = LZCOUNT(divisor);\n      if (leadingZeros == 0) {\n        dividendLowerBits = dividendLowerBits - divisor;\n        shiftedDivisor = divisor >> 0x10;\n        temp3 = divisor & 0xffff;\n        temp = 1;\n      }\n      else {\n        divisor = divisor << leadingZeros;\n        temp = dividendLowerBits >> (0x20U - leadingZeros & 0xff);\n        shiftedDivisor = divisor >> 0x10;\n        tmp3 = temp / shiftedDivisor;\n        temp3 = divisor & 0xffff;\n        tmp1 = temp3 * tmp3;\n        tmp2 = dividend >> (0x20U - leadingZeros & 0xff) | dividendLowerBits << leadingZeros;\n        temp = tmp2 >> 0x10 | (temp - shiftedDivisor * tmp3) * 0x10000;\n        dividend = dividend << leadingZeros;\n        quotientLowerBits = tmp3;\n        if (temp <= tmp1 && tmp1 - temp != 0) {\n          carryFlag = CARRY4(temp,divisor);\n          temp = temp + divisor;\n          quotientLowerBits = tmp3 - 1;\n          if ((carryFlag == false) && (temp <= tmp1 && tmp1 - temp != 0)) {\n            quotientLowerBits = tmp3 - 2;\n            temp = temp + divisor;\n          }\n        }\n        quotientMultiplier = (temp - tmp1) / shiftedDivisor;\n        tmp3 = temp3 * quotientMultiplier;\n        dividendLowerBits = tmp2 & 0xffff | ((temp - tmp1) - shiftedDivisor * quotientMultiplier) * 0x10000;\n        temp = quotientMultiplier;\n        if (dividendLowerBits <= tmp3 && tmp3 - dividendLowerBits != 0) {\n          carryFlag = CARRY4(dividendLowerBits,divisor);\n          dividendLowerBits = dividendLowerBits + divisor;\n          temp = quotientMultiplier - 1;\n          if ((carryFlag == false) && (dividendLowerBits <= tmp3 && tmp3 - dividendLowerBits != 0)) {\n            temp = quotientMultiplier - 2;\n            dividendLowerBits = dividendLowerBits + divisor;\n          }\n        }\n        dividendLowerBits = dividendLowerBits - tmp3;\n        temp = temp | quotientLowerBits << 0x10;\n      }\n      quotientLowerBits = dividendLowerBits / shiftedDivisor;\n      tmp3 = temp3 * quotientLowerBits;\n      tmp2 = dividend >> 0x10 | (dividendLowerBits - shiftedDivisor * quotientLowerBits) * 0x10000;\n      tmp1 = quotientLowerBits;\n      if (tmp2 <= tmp3 && tmp3 - tmp2 != 0) {\n        carryFlag = CARRY4(tmp2,divisor);\n        tmp2 = tmp2 + divisor;\n        tmp1 = quotientLowerBits - 1;\n        if ((carryFlag == false) && (tmp2 <= tmp3 && tmp3 - tmp2 != 0)) {\n          tmp1 = quotientLowerBits - 2;\n          tmp2 = tmp2 + divisor;\n        }\n      }\n      quotientMultiplier = (tmp2 - tmp3) / shiftedDivisor;\n      temp3 = temp3 * quotientMultiplier;\n      shiftedDivisor = dividend & 0xffff | ((tmp2 - tmp3) - shiftedDivisor * quotientMultiplier) * 0x10000;\n      quotientLowerBits = quotientMultiplier;\n      if (shiftedDivisor <= temp3 && temp3 - shiftedDivisor != 0) {\n        quotientLowerBits = quotientMultiplier - 1;\n        if ((CARRY4(shiftedDivisor,divisor) == false) &&\n           (shiftedDivisor + divisor <= temp3 && temp3 - (shiftedDivisor + divisor) != 0)) {\n          quotientLowerBits = quotientMultiplier - 2;\n        }\n      }\n      quotientLowerBits = quotientLowerBits | tmp1 << 0x10;\n    }\n  }\n  else if (dividendLowerBits < divisorLowerBits) {\n    temp = 0;\n    quotientLowerBits = 0;\n  }\n  else {\n    leadingZeros = LZCOUNT(divisorLowerBits);\n    if (leadingZeros == 0) {\n      if ((divisorLowerBits < dividendLowerBits) || (divisor <= dividend)) {\n        temp = 0;\n        quotientLowerBits = 1;\n      }\n      else {\n        quotientLowerBits = 0;\n        temp = 0;\n      }\n    }\n    else {\n      temp = 0x20 - leadingZeros;\n      shiftedDivisor = dividendLowerBits >> (temp & 0xff);\n      temp3 = divisor >> (temp & 0xff) | divisorLowerBits << leadingZeros;\n      tmp3 = temp3 >> 0x10;\n      quotientLowerBits = shiftedDivisor / tmp3;\n      tmp2 = (temp3 & 0xffff) * quotientLowerBits;\n      tmp1 = dividendLowerBits << leadingZeros | dividend >> (temp & 0xff);\n      shiftedDivisor = tmp1 >> 0x10 | (shiftedDivisor - tmp3 * quotientLowerBits) * 0x10000;\n      temp = quotientLowerBits;\n      if (shiftedDivisor <= tmp2 && tmp2 - shiftedDivisor != 0) {\n        carryFlag = CARRY4(shiftedDivisor,temp3);\n        shiftedDivisor = shiftedDivisor + temp3;\n        temp = quotientLowerBits - 1;\n        if ((carryFlag == false) && (shiftedDivisor <= tmp2 && tmp2 - shiftedDivisor != 0)) {\n          temp = quotientLowerBits - 2;\n          shiftedDivisor = shiftedDivisor + temp3;\n        }\n      }\n      quotientMultiplier = (shiftedDivisor - tmp2) / tmp3;\n      temp2 = (temp3 & 0xffff) * quotientMultiplier;\n      shiftedDivisor = tmp1 & 0xffff | ((shiftedDivisor - tmp2) - tmp3 * quotientMultiplier) * 0x10000;\n      quotientLowerBits = quotientMultiplier;\n      if (shiftedDivisor <= temp2 && temp2 - shiftedDivisor != 0) {\n        carryFlag = CARRY4(shiftedDivisor,temp3);\n        shiftedDivisor = shiftedDivisor + temp3;\n        quotientLowerBits = quotientMultiplier - 1;\n        if ((carryFlag == false) && (shiftedDivisor <= temp2 && temp2 - shiftedDivisor != 0)) {\n          quotientLowerBits = quotientMultiplier - 2;\n          shiftedDivisor = shiftedDivisor + temp3;\n        }\n      }\n      quotientLowerBits = quotientLowerBits | temp << 0x10;\n      quotient = (ulonglong)quotientLowerBits * (ulonglong)(divisor << leadingZeros);\n      tmp1 = (uint)((ulonglong)quotient >> 0x20);\n      temp = 0;\n      if ((shiftedDivisor - temp2 < tmp1) ||\n         ((shiftedDivisor - temp2 == tmp1 && (dividend << leadingZeros < (uint)quotient)))) {\n        quotientLowerBits = quotientLowerBits - 1;\n        temp = 0;\n      }\n    }\n  }\n  if (sign != 0) {\n    carryFlag = quotientLowerBits != 0;\n    quotientLowerBits = -quotientLowerBits;\n    temp = -temp - (uint)carryFlag;\n  }\n  return CONCAT44(temp,quotientLowerBits);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "calculate_division_000847e0",
                "param_1": "dividend",
                "param_2": "dividendLowerBits",
                "param_3": "divisor",
                "param_4": "divisorLowerBits",
                "lVar1": "quotient",
                "uVar2": "quotientLowerBits",
                "uVar3": "temp",
                "uVar4": "shiftedDivisor",
                "uVar5": "quotientMultiplier",
                "iVar6": "leadingZeros",
                "uVar7": "tmp1",
                "uVar8": "tmp2",
                "uVar9": "sign",
                "uVar10": "tmp3",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "bVar13": "carryFlag"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_quotient_00084a80",
            "code": "\nulonglong calculateQuotient_00084a80(uint dividend,uint divisor,uint temp3,uint temp4)\n\n{\n  longlong quotient;\n  uint highQuotient;\n  uint tempDivisor;\n  uint tempQuotient;\n  uint tempProduct;\n  uint temp;\n  uint remainder;\n  uint lowerQuotient;\n  uint product;\n  int shift;\n  bool carryFlag;\n  \n  if (temp4 == 0) {\n    if (temp3 <= divisor) {\n      if (temp3 == 0) {\n        temp3 = 1 / 0;\n      }\n      shift = LZCOUNT(temp3);\n      if (shift == 0) {\n        divisor = divisor - temp3;\n        tempDivisor = temp3 >> 0x10;\n        tempProduct = temp3 & 0xffff;\n        highQuotient = 1;\n      }\n      else {\n        temp3 = temp3 << shift;\n        lowerQuotient = divisor >> (0x20U - shift & 0xff);\n        tempDivisor = temp3 >> 0x10;\n        product = lowerQuotient / tempDivisor;\n        tempProduct = temp3 & 0xffff;\n        highQuotient = tempProduct * product;\n        temp = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        tempQuotient = temp >> 0x10 | (lowerQuotient - tempDivisor * product) * 0x10000;\n        dividend = dividend << shift;\n        lowerQuotient = product;\n        if (tempQuotient <= highQuotient && highQuotient - tempQuotient != 0) {\n          carryFlag = CARRY4(tempQuotient,temp3);\n          tempQuotient = tempQuotient + temp3;\n          lowerQuotient = product - 1;\n          if ((carryFlag == false) && (tempQuotient <= highQuotient && highQuotient - tempQuotient != 0)) {\n            lowerQuotient = product - 2;\n            tempQuotient = tempQuotient + temp3;\n          }\n        }\n        remainder = (tempQuotient - highQuotient) / tempDivisor;\n        product = tempProduct * remainder;\n        divisor = temp & 0xffff | ((tempQuotient - highQuotient) - tempDivisor * remainder) * 0x10000;\n        highQuotient = remainder;\n        if (divisor <= product && product - divisor != 0) {\n          carryFlag = CARRY4(divisor,temp3);\n          divisor = divisor + temp3;\n          highQuotient = remainder - 1;\n          if ((carryFlag == false) && (divisor <= product && product - divisor != 0)) {\n            highQuotient = remainder - 2;\n            divisor = divisor + temp3;\n          }\n        }\n        divisor = divisor - product;\n        highQuotient = highQuotient | lowerQuotient << 0x10;\n      }\n      product = divisor / tempDivisor;\n      tempQuotient = tempProduct * product;\n      temp = dividend >> 0x10 | (divisor - tempDivisor * product) * 0x10000;\n      lowerQuotient = product;\n      if (temp <= tempQuotient && tempQuotient - temp != 0) {\n        carryFlag = CARRY4(temp,temp3);\n        temp = temp + temp3;\n        lowerQuotient = product - 1;\n        if ((carryFlag == false) && (temp <= tempQuotient && tempQuotient - temp != 0)) {\n          lowerQuotient = product - 2;\n          temp = temp + temp3;\n        }\n      }\n      product = (temp - tempQuotient) / tempDivisor;\n      tempProduct = tempProduct * product;\n      temp = dividend & 0xffff | ((temp - tempQuotient) - tempDivisor * product) * 0x10000;\n      tempDivisor = product;\n      if (temp <= tempProduct && tempProduct - temp != 0) {\n        tempDivisor = product - 1;\n        if ((CARRY4(temp,temp3) == false) &&\n           (temp + temp3 <= tempProduct && tempProduct - (temp + temp3) != 0)) {\n          tempDivisor = product - 2;\n        }\n      }\n      return CONCAT44(highQuotient,tempDivisor | lowerQuotient << 0x10);\n    }\n    shift = LZCOUNT(temp3);\n    if (shift != 0) {\n      lowerQuotient = dividend >> (0x20U - shift & 0xff);\n      temp3 = temp3 << shift;\n      dividend = dividend << shift;\n      divisor = lowerQuotient | divisor << shift;\n    }\n    highQuotient = temp3 >> 0x10;\n    tempDivisor = divisor / highQuotient;\n    tempProduct = (temp3 & 0xffff) * tempDivisor;\n    product = dividend >> 0x10 | (divisor - highQuotient * tempDivisor) * 0x10000;\n    lowerQuotient = tempDivisor;\n    if (product <= tempProduct && tempProduct - product != 0) {\n      carryFlag = CARRY4(product,temp3);\n      product = product + temp3;\n      lowerQuotient = tempDivisor - 1;\n      if ((carryFlag == false) && (product <= tempProduct && tempProduct - product != 0)) {\n        lowerQuotient = tempDivisor - 2;\n        product = product + temp3;\n      }\n    }\n    temp = (product - tempProduct) / highQuotient;\n    tempDivisor = (temp3 & 0xffff) * temp;\n    tempProduct = dividend & 0xffff | ((product - tempProduct) - highQuotient * temp) * 0x10000;\n    highQuotient = temp;\n    if (tempProduct <= tempDivisor && tempDivisor - tempProduct != 0) {\n      highQuotient = temp - 1;\n      if ((CARRY4(tempProduct,temp3) == false) &&\n         (tempProduct + temp3 <= tempDivisor && tempDivisor - (tempProduct + temp3) != 0)) {\n        highQuotient = temp - 2;\n      }\n    }\n    highQuotient = highQuotient | lowerQuotient << 0x10;\n  }\n  else {\n    if (divisor < temp4) {\n      return 0;\n    }\n    shift = LZCOUNT(temp4);\n    if (shift == 0) {\n      if ((temp4 < divisor) || (temp3 <= dividend)) {\n        return 1;\n      }\n      highQuotient = 0;\n    }\n    else {\n      highQuotient = 0x20 - shift;\n      lowerQuotient = divisor >> (highQuotient & 0xff);\n      tempDivisor = temp4 << shift | temp3 >> (highQuotient & 0xff);\n      tempProduct = tempDivisor >> 0x10;\n      tempQuotient = lowerQuotient / tempProduct;\n      product = (tempDivisor & 0xffff) * tempQuotient;\n      temp = dividend >> (highQuotient & 0xff) | divisor << shift;\n      highQuotient = temp >> 0x10 | (lowerQuotient - tempProduct * tempQuotient) * 0x10000;\n      lowerQuotient = tempQuotient;\n      if (highQuotient <= product && product - highQuotient != 0) {\n        carryFlag = CARRY4(highQuotient,tempDivisor);\n        highQuotient = highQuotient + tempDivisor;\n        lowerQuotient = tempQuotient - 1;\n        if ((carryFlag == false) && (highQuotient <= product && product - highQuotient != 0)) {\n          lowerQuotient = tempQuotient - 2;\n          highQuotient = highQuotient + tempDivisor;\n        }\n      }\n      tempQuotient = (highQuotient - product) / tempProduct;\n      remainder = (tempDivisor & 0xffff) * tempQuotient;\n      tempProduct = temp & 0xffff | ((highQuotient - product) - tempProduct * tempQuotient) * 0x10000;\n      highQuotient = tempQuotient;\n      if (tempProduct <= remainder && remainder - tempProduct != 0) {\n        carryFlag = CARRY4(tempProduct,tempDivisor);\n        tempProduct = tempProduct + tempDivisor;\n        highQuotient = tempQuotient - 1;\n        if ((carryFlag == false) && (tempProduct <= remainder && remainder - tempProduct != 0)) {\n          highQuotient = tempQuotient - 2;\n          tempProduct = tempProduct + tempDivisor;\n        }\n      }\n      highQuotient = highQuotient | lowerQuotient << 0x10;\n      quotient = (ulonglong)highQuotient * (ulonglong)(temp3 << shift);\n      lowerQuotient = (uint)((ulonglong)quotient >> 0x20);\n      if ((tempProduct - remainder < lowerQuotient) || ((tempProduct - remainder == lowerQuotient && (dividend << shift < (uint)quotient)))\n         ) {\n        highQuotient = highQuotient - 1;\n      }\n    }\n  }\n  return (ulonglong)highQuotient;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_quotient_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "temp3",
                "param_4": "temp4",
                "lVar1": "quotient",
                "uVar2": "highQuotient",
                "uVar3": "tempDivisor",
                "uVar4": "tempQuotient",
                "uVar5": "tempProduct",
                "uVar6": "temp",
                "uVar7": "remainder",
                "uVar8": "lowerQuotient",
                "uVar9": "product",
                "iVar10": "shift",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 103824,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}