{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "initialize_and_execute_system_000816a8",
                "set_dat_offset_to_0x8000_000816d4": "set_data_offset_to",
                "initialize_and_execute_system_00080ae4": "initialize_system",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "do_nothing_with_parameter",
                "initialize_data_000804a8": "initialize_data",
                "FUNC_000805d0": "execute_function",
                "DAT_000816d0": "data_offset",
                "check_differences_00080ce0": "check_differences"
            },
            "code": "void initialize_and_execute_system_000816a8(void)\n{\n    set_dat_offset_to_0x8000_000816d4(0x800000);\n    initialize_and_execute_system_000816a8_00080ae4();\n    do_nothing_000816a6();\n    do_nothing_0008120c(1);\n    initialize_data_000804a8();\n    while (true)\n    {\n        FUNC_000805d0();\n        if (DAT_000816d0() != 0)\n        {\n            check_differences_00080ce0();\n        }\n    }\n}",
            "called": [
                "FUN_00080ae4",
                "FUN_000804a8",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_00080ce0",
                "FUN_000805d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_system_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "update_data_00081042",
                "param_1": "data_block",
                "param_2": "new_value",
                "param_3": "mask",
                "param_4": "shift_amount",
                "PTR_": "data_block",
                "DAT_": "value"
            },
            "code": "void update_data_00081042(uint32_t *PTR_, uint32_t new_DAT_, uint32_t mask, uint32_t shift_amount) {\n    uint32_t current_DAT_ = *(PTR_ + 1);\n    uint32_t masked_new_DAT_ = new_DAT_ & mask;\n    uint32_t shifted_new_DAT_ = masked_new_DAT_ << shift_amount;\n    uint32_t updated_DAT_ = current_DAT_ | shifted_new_DAT_;\n    *(PTR_ + 1) = updated_DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_data_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_data_and_return_result_00082ac0",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "data_ptr_array",
                "piVar1": "current_data_ptr",
                "iVar2": "result",
                "piVar3": "current_data_size_ptr",
                "uVar4": "current_data_word_index",
                "puVar5": "current_data",
                "uVar6": "current_data_size",
                "uVar7": "current_data_size_words"
            },
            "code": "int process_data_and_return_result_00082ac0(void* data, int data_size, int **data_ptr_array)\n{\n  int *current_data_ptr;\n  int result;\n  int *current_data_size_ptr;\n  uint current_data_size;\n  undefined4 *current_data;\n  uint current_data_size_words;\n  uint current_data_word_index;\n  \n  if (-1 < *(int *)(data_size + 100) << 0x12) {\n    result = FUNC_00083f34();\n    data_ptr_array[2] = (int *)0x0;\n    data_ptr_array[1] = (int *)0x0;\n    return result;\n  }\n  current_data_size_ptr = data_ptr_array[2];\n  current_data_ptr = *data_ptr_array;\n  while (current_data_size_ptr != (int *)0x0) {\n    current_data_size = current_data_ptr[1];\n    current_data_size_words = current_data_size >> 2;\n    if (current_data_size_words != 0) {\n      current_data = (undefined4 *)(*current_data_ptr + -4);\n      current_data_word_index = 0;\n      do {\n        current_data++;\n        result = process_data_00083c40(data, *current_data, data_size);\n        current_data_word_index++;\n        if (result == -1) goto LAB_00082b00;\n      } while (current_data_size_words != current_data_word_index);\n      current_data_size_ptr = data_ptr_array[2];\n    }\n    current_data_size_ptr = (int *)((int)current_data_size_ptr - (current_data_size & 0xfffffffc));\n    data_ptr_array[2] = current_data_size_ptr;\n    current_data_ptr = current_data_ptr + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data_ptr_array[2] = (int *)0x0;\n  data_ptr_array[1] = (int *)0x0;\n  return result;\n}",
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_and_return_result_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_differences_00080ce0",
                "calculate_difference_000813e4": "calculate_difference",
                "do_nothing_00080aa8": "do_nothing_1",
                "do_nothing_00080ab8": "do_nothing_2",
                "do_nothing_00080aba": "do_nothing_3",
                "do_nothing_00080abc": "do_nothing_4"
            },
            "code": "void check_differences_00080ce0(void)\n{\n    int difference;\n    difference = calculate_difference(PTR_DAT_00080d14);\n    if (difference != 0) {\n        do_nothing_1();\n    }\n    difference = calculate_difference(PTR_DAT_00080d18);\n    if (difference != 0) {\n        do_nothing_2();\n    }\n    difference = calculate_difference(PTR_DAT_00080d1c);\n    if (difference != 0) {\n        do_nothing_3();\n    }\n    difference = calculate_difference(PTR_DAT_00080d20);\n    if (difference != 0) {\n        do_nothing_4();\n    }\n    return;\n}",
            "called": [
                "FUN_000813e4",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_differences_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_word_stats_00081682",
                "param_1": "word_stats",
                "param_2": "word",
                "uVar1": "byte_count",
                "count_bytes_in_word_00082a50": "count_bytes_in_word",
                "update_value_if_valid_0008165c": "update_word_stats_if_valid"
            },
            "code": "undefined4* initialize_word_stats_00081682(undefined4* word_stats, int word) {\n    word_stats[0] = 0;\n    word_stats[1] = 0;\n    word_stats[2] = 0;\n    if (word != 0) {\n        undefined4 byte_count = count_bytes_in_word_00082a50(word);\n        update_value_if_valid_0008165c(word_stats, word, byte_count);\n    }\n    return word_stats;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_word_stats_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "allocate_memory_block_and_return_pointer_to_it": "allocate_memory_block_and_return_pointer_to_it",
                "param_1": "size_of_block",
                "*param_1": "*size_of_block",
                "allocate_memory_block_00081e04": "allocate_memory_block",
                "FUN_000815fe": "allocate_memory_block_and_return_pointer_to_it_000815fe"
            },
            "code": "undefined4 *allocate_memory_block_and_return_pointer_to_it_000815fe(undefined4 *size_of_block)\n{\n  allocate_memory_block_00081e04(*size_of_block);\n  return size_of_block;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "allocate_memory_block_and_return_pointer_to_it_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "limit_uint_00081d1c",
                "param_1": "input",
                "uVar1": "exponent",
                "limit": "limit",
                "sign_bit": "sign_bit",
                "exponent_mask": "exponent_mask",
                "mantissa_mask": "mantissa_mask",
                "exponent_shift": "exponent_shift",
                "exponent_bias": "exponent_bias",
                "shifted_input": "shifted_input",
                "shifted_output": "shifted_output"
            },
            "code": "uint limit_uint_00081d1c(uint input) {\n  uint limit = 0x7f000000;\n  uint sign_bit = 0x80000000;\n  uint exponent_mask = 0xff;\n  uint mantissa_mask = 0x7fffff;\n  uint exponent_shift = 0x18;\n  uint exponent_bias = 0x9e;\n\n  if ((input & sign_bit) || (input << 1 < limit)) {\n    return 0;\n  }\n\n  uint exponent = exponent_bias - ((input << 1) >> exponent_shift);\n  if (exponent < 0) {\n    if ((exponent == 0xffffff9f) && ((input & mantissa_mask) != 0)) {\n      return 0;\n    }\n    return 0xffffffff;\n  }\n\n  uint shifted_input = input << 8 | sign_bit;\n  uint shifted_output = shifted_input >> (exponent & exponent_mask);\n  return shifted_output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "limit_uint_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "lower_bits",
                "param_4": "higher_bits",
                "param_5": "difference",
                "lVar2": "product",
                "uVar1": "lower_product"
            },
            "code": "void calculate_difference_000847ac(uint first_value, int second_value, uint32_t lower_bits, uint32_t higher_bits, int *difference)\n{\n  longlong product = multiply(lower_bits, higher_bits);\n  uint lower_product = (uint)product;\n  difference[0] = first_value - lower_product;\n  difference[1] = second_value - (int)(product >> 0x20) - (uint)(first_value < lower_product);\n  return;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_valid_00080118",
                "param_1": "param_1",
                "param_2": "data",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_00080134": "should_use_default_data",
                "PTR_DAT_0008013c": "default_data_pointer",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "function"
            },
            "code": "void execute_function_if_valid_00080118(int param_1, char* data, int param_3, int param_4)\n{\n  if (DAT_00080134 != 0) {\n    data = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, data, param_3, DAT_00080144, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "execute_function_if_valid_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_concatenated_integers_00081c94",
                "in_ZR": "zero_register",
                "in_CY": "carry_flag"
            },
            "code": "bool check_concatenated_integers_00081c94(void)\n{\n  undefined zero_register;\n  undefined carry_flag;\n  concatenate_integers();\n  return !(bool)carry_flag || (bool)zero_register;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_concatenated_integers_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "input_data",
                "puVar1": "ptr_1",
                "uVar2": "constant_1",
                "puVar3": "ptr_2",
                "puVar4": "ptr_3",
                "puVar5": "ptr_4",
                "puVar6": "ptr_5",
                "PTR_LAB_00083b08_1_00083bf4": "ptr_6",
                "DAT_00083bfc": "constant_2",
                "PTR_LAB_00084440_1_00083bf8": "ptr_7",
                "PTR_LAB_000844bc_1_00083c04": "ptr_8",
                "PTR_FUN_0008449c_1_00083c00": "ptr_9",
                "fill_buffer_with_constant_value_00082504": "fill_buffer"
            },
            "code": "void initialize_data_structures_00083b14(int input_data)\n{\n    undefined *ptr_1;\n    undefined4 constant_1;\n    undefined *ptr_2;\n    undefined *ptr_3;\n    undefined4 *ptr_4;\n    undefined4 *ptr_5;\n    if (*(int *)(input_data + 0x38) == 0) {\n        ptr_4 = *(undefined4 **)(input_data + 4);\n        *(undefined **)(input_data + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n        *(undefined4 *)(input_data + 0x2e4) = 3;\n        *(int *)(input_data + 0x2e8) = input_data + 0x2ec;\n        *(undefined4 *)(input_data + 0x2e0) = 0;\n        *(undefined2 *)(ptr_4 + 3) = 4;\n        *ptr_4 = 0;\n        ptr_4[1] = 0;\n        ptr_4[2] = 0;\n        ptr_4[0x19] = 0;\n        *(undefined2 *)((int)ptr_4 + 0xe) = 0;\n        ptr_4[4] = 0;\n        ptr_4[5] = 0;\n        ptr_4[6] = 0;\n        fill_buffer_with_constant_value_00082504(ptr_4 + 0x17, 0, 8);\n        ptr_3 = PTR_LAB_000844bc_1_00083c04;\n        ptr_2 = PTR_process_result_and_update_status_0008449c_1_00083c00;\n        constant_1 = DAT_00083bfc;\n        ptr_1 = PTR_LAB_00084440_1_00083bf8;\n        ptr_5 = *(undefined4 **)(input_data + 8);\n        ptr_4[7] = ptr_4;\n        ptr_4[8] = ptr_1;\n        ptr_4[9] = constant_1;\n        ptr_4[10] = ptr_2;\n        ptr_4[0xb] = ptr_3;\n        *(undefined2 *)((int)ptr_5 + 0xe) = 1;\n        *(undefined2 *)(ptr_5 + 3) = 9;\n        *ptr_5 = 0;\n        ptr_5[1] = 0;\n        ptr_5[2] = 0;\n        ptr_5[0x19] = 0;\n        ptr_5[4] = 0;\n        ptr_5[5] = 0;\n        ptr_5[6] = 0;\n        fill_buffer_with_constant_value_00082504(ptr_5 + 0x17, 0, 8);\n        ptr_4 = *(undefined4 **)(input_data + 0xc);\n        ptr_5[7] = ptr_5;\n        ptr_5[8] = ptr_1;\n        ptr_5[9] = constant_1;\n        ptr_5[10] = ptr_2;\n        ptr_5[0xb] = ptr_3;\n        *(undefined2 *)(ptr_4 + 3) = 0x12;\n        *(undefined2 *)((int)ptr_4 + 0xe) = 2;\n        *ptr_4 = 0;\n        ptr_4[1] = 0;\n        ptr_4[2] = 0;\n        ptr_4[0x19] = 0;\n        ptr_4[4] = 0;\n        ptr_4[5] = 0;\n        ptr_4[6] = 0;\n        fill_buffer_with_constant_value_00082504(ptr_4 + 0x17, 0, 8);\n        ptr_4[7] = ptr_4;\n        ptr_4[8] = ptr_1;\n        ptr_4[9] = constant_1;\n        ptr_4[10] = ptr_2;\n        ptr_4[0xb] = ptr_3;\n        *(undefined4 *)(input_data + 0x38) = 1;\n    }\n    return;\n}\n",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00083adc",
                "FUN_000844c4",
                "FUN_00083808",
                "FUN_00082b38",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data",
                "param_2": "data_array",
                "uVar1": "flag",
                "iVar2": "flag_set",
                "iVar3": "flag_check_2",
                "uVar4": "flag_value",
                "bVar5": "flag_check",
                "auStack_54": "stack_data",
                "local_50": "local_data"
            },
            "code": "void process_data_000842a4(int data, int *data_array)\n{\n  ushort flag = *(ushort *)(data_array + 3);\n  uint flag_value = (uint)flag;\n  bool flag_check;\n  undefined stack_data[4];\n  uint local_data;\n  \n  if ((int)(flag_value << 0x1e) < 0) {\n    *data_array = (int)data_array + 0x43;\n    data_array[4] = (int)data_array + 0x43;\n    data_array[5] = 1;\n    return;\n  }\n  \n  if (-1 < *(short *)((int)data_array + 0xe)) {\n    int flag_set = set_flag_and_return_value_if_failed(data,(int)*(short *)((int)data_array + 0xe),stack_data);\n    if (-1 < flag_set) {\n      flag_check = (local_data & 0xf000) == 0x2000;\n      if (((local_data & 0xf000) == 0x8000) &&\n         ((undefined *)data_array[10] == PTR_FUN_0008449c_1_00084380)) {\n        flag_set = 0x400;\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x400;\n        data_array[0x13] = 0x400;\n      }\n      else {\n        flag_set = 0x400;\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    flag = *(ushort *)(data_array + 3);\n    flag_value = (uint)flag;\n  }\n  \n  *(ushort *)(data_array + 3) = flag | 0x800;\n  if ((flag_value & 0x80) == 0) {\n    flag_set = 0x400;\n  }\n  else {\n    flag_set = 0x40;\n  }\n  flag_check = false;\n  \n  LAB_00084300:\n  int flag_check_2 = check_data(data,flag_set);\n  flag = *(ushort *)(data_array + 3);\n  \n  if (flag_check_2 == 0) {\n    if (-1 < (int)((uint)flag << 0x16)) {\n      *(ushort *)(data_array + 3) = flag | 2;\n      *data_array = (int)data_array + 0x43;\n      data_array[4] = (int)data_array + 0x43;\n      data_array[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n    *(ushort *)(data_array + 3) = flag | 0x80;\n    *data_array = flag_check_2;\n    data_array[4] = flag_check_2;\n    data_array[5] = flag_set;\n    if ((flag_check) && (flag_set = process_integer(data,(int)*(short *)((int)data_array + 0xe)), flag_set != 0))\n    {\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000846b4",
                "FUN_000846dc",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "process_data_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data_ptr",
                "iVar3": "data_structure_ptr",
                "uVar1": "result",
                "iVar2": "temp_var"
            },
            "code": "undefined4 process_data_000846a4(int data_ptr) {\n  undefined4 result;\n  int data_structure_ptr;\n  int temp_var;\n  \n  data_structure_ptr = *DATA_STRUCTURE_PTR;\n  if (data_ptr != 0) {\n    if ((data_structure_ptr != 0) && (*(int *)(data_structure_ptr + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(data_ptr + 0xc) != 0) {\n      result = process_data_000846a4_structure(data_structure_ptr, data_ptr);\n      if ((*(code **)(data_ptr + 0x2c) != (code *)0x0) && (temp_var = (**(code **)(data_ptr + 0x2c))(data_structure_ptr, *(undefined4 *)(data_ptr + 0x1c)), temp_var < 0)) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x18) < 0) {\n        allocate_memory_block(data_structure_ptr, *(undefined4 *)(data_ptr + 0x10));\n      }\n      if (*(int *)(data_ptr + 0x30) != 0) {\n        if (*(int *)(data_ptr + 0x30) != data_ptr + 0x40) {\n          allocate_memory_block(data_structure_ptr);\n        }\n        *(undefined4 *)(data_ptr + 0x30) = 0;\n      }\n      if (*(int *)(data_ptr + 0x44) != 0) {\n        allocate_memory_block(data_structure_ptr);\n        *(undefined4 *)(data_ptr + 0x44) = 0;\n      }\n      do_nothing_1();\n      *(undefined2 *)(data_ptr + 0xc) = 0;\n      do_nothing_2();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083c08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "clear_memory_and_call_function_00080f24",
                "puVar1": "rel_array_ptr",
                "puVar2": "data_ptr",
                "puVar4": "dat_ptr",
                "iVar3": "i",
                "PTR_Elf32_Rel_ARRAY_00080f80": "rel_array_ptr",
                "DAT_00080f7c": "data_ptr",
                "PTR_DAT_00080f84": "dat_ptr",
                "PTR_DAT_00080f90": "data_ptr_2",
                "DAT_00080f94": "DAT_00080f94",
                "*DAT_00080f98": "*DAT_00080f98"
            },
            "code": "void clear_memory_and_call_function_00080f24(void)\n{\n  undefined *PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n  undefined *DAT_00080f7c = DAT_00080f7c;\n  int i = 0;\n  undefined4 *PTR_DAT_00080f84 = (undefined4 *)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (; PTR_Elf32_Rel_ARRAY_00080f80 + i < PTR_DAT_00080f88; i = i + 4) {\n      *(undefined4 *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(undefined4 *)(DAT_00080f7c + i);\n    }\n  }\n  for (; PTR_DAT_00080f84 < DAT_00080f8c; PTR_DAT_00080f84 = PTR_DAT_00080f84 + 1) {\n    *PTR_DAT_00080f84 = 0;\n  }\n  undefined *PTR_DAT_00080f90 = PTR_DAT_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_DAT_00080f90 & 0x1fffff80;\n  if (PTR_DAT_00080f90 < (undefined *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) = *(uint *)(DAT_00080f94 + 8) | 0x20000000;\n  }\n  (*DAT_00080f98)();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "clear_memory_and_call_function_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bits_set_in_both_00080e04",
                "param_1": "data",
                "param_2": "mask",
                "uVar1": "bits_set_in_data_and_mask"
            },
            "code": "uint check_bits_set_in_both_00080e04(uint data, uint mask) {\n  uint bits_set_in_data_and_mask = *(uint *)(data + 8) & mask;\n  if (bits_set_in_data_and_mask != 0) {\n    if ((mask & *(uint *)(data + 0x18)) == 0) {\n      bits_set_in_data_and_mask = 0;\n    }\n    else {\n      bits_set_in_data_and_mask = 1;\n    }\n  }\n  return bits_set_in_data_and_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bits_set_in_both_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_data_000804a8",
                "puVar1": "data_pointer_1",
                "puVar2": "data_pointer_2",
                "puVar3": "data_pointer_3",
                "puVar4": "data_pointer_4",
                "uVar5": "function_result",
                "iVar6": "integer_variable_1"
            },
            "code": "int initialize_data_000804a8(void)\n{\n  int *data_pointer_1;\n  int *data_pointer_2;\n  int *data_pointer_3;\n  int *data_pointer_4;\n  int function_result;\n  int integer_variable_1;\n  \n  process_data(1, 0);\n  process_data(6, 1);\n  process_data(0, 1);\n  process_data(1, 1);\n  process_data_2(0, 0);\n  process_data_2(1, 0);\n  data_pointer_1 = PTR_DAT_000805a8;\n  data_pointer_2 = PTR_DAT_000805ac;\n  *(short *)(PTR_DAT_000805a8 + 0xe) = 19;\n  *(short *)(data_pointer_1 + 0x10) = 10;\n  *(int **)(data_pointer_1 + 0x14) = data_pointer_2 + 0x26;\n  data_pointer_1[1] = 3;\n  data_pointer_1[0x19] = 3;\n  *(short *)(data_pointer_1 + 0x1a) = 20;\n  *(short *)(data_pointer_1 + 0x28) = 3;\n  *(short *)(data_pointer_1 + 4) = 16;\n  *(int **)(data_pointer_1 + 8) = data_pointer_2;\n  data_pointer_1[0xd] = 16;\n  *(short *)(data_pointer_1 + 0x1c) = 12;\n  data_pointer_1[0x25] = 16;\n  *(short *)(data_pointer_1 + 0x34) = 8;\n  data_pointer_3 = PTR_DAT_000805b0;\n  *(short *)(data_pointer_1 + 0x26) = 28;\n  *(int **)(data_pointer_1 + 0x2c) = data_pointer_2 + 0x38;\n  data_pointer_4 = PTR_DAT_000805b4;\n  data_pointer_1[0x30] = 2;\n  data_pointer_1[0x31] = 2;\n  *(int **)(data_pointer_1 + 0x38) = data_pointer_3;\n  data_pointer_1[0x3c] = 2;\n  *data_pointer_1 = 1;\n  data_pointer_1[0xc] = 1;\n  data_pointer_1[0x18] = 1;\n  data_pointer_1[0x24] = 1;\n  *(short *)(data_pointer_1 + 0x3e) = 1;\n  *(short *)(data_pointer_1 + 0x40) = 1;\n  *(short *)(data_pointer_1 + 2) = 0;\n  *(int **)(data_pointer_1 + 0x20) = data_pointer_2 + 0x28;\n  *(short *)(data_pointer_1 + 0x32) = 0;\n  data_pointer_1[0x3d] = 5;\n  *(int **)(data_pointer_1 + 0x44) = data_pointer_3 + 2;\n  process_data_3(data_pointer_4, 19200);\n  *(short *)(data_pointer_4 + 0x56) = 2000;\n  function_result = thunk_get_pointer_data();\n  *(int *)PTR_DAT_000805b8 = function_result;\n  integer_variable_1 = thunk_get_pointer_data();\n  *(int *)PTR_DAT_000805bc = integer_variable_1 + 1000;\n  integer_variable_1 = thunk_get_pointer_data();\n  *(int *)PTR_DAT_000805c0 = integer_variable_1 + 1000;\n  integer_variable_1 = thunk_get_pointer_data();\n  *(int *)PTR_DAT_000805c4 = integer_variable_1 + 1000;\n  integer_variable_1 = thunk_get_pointer_data();\n  *(int *)PTR_DAT_000805c8 = integer_variable_1 + 1000;\n  *PTR_DAT_000805cc = 0;\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(63);\n    return 1;\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_00081210",
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_data_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_data_000802da",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_array",
                "cVar1": "error_code",
                "bVar2": "byte_value",
                "uVar3": "undefined_value",
                "uVar4": "ushort_value",
                "uVar5": "uint_value",
                "puVar6": "ushort_pointer",
                "local_1c": "local_char_value",
                "local_1b": "local_undefined_value",
                "local_1a": "local_ushort_value"
            },
            "code": "int validate_data_000802da(int data_ptr, ushort data_length, ushort *data_array)\n{\n  char error_code;\n  byte byte_value;\n  undefined undefined_value;\n  ushort ushort_value;\n  uint uint_value;\n  ushort *ushort_pointer;\n  char local_char_value;\n  undefined local_undefined_value;\n  ushort local_ushort_value;\n  uint data_length_uint = (uint)data_length;\n  if (*(char *)(data_ptr + 4) != '\\0') {\n    error_code = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data_ptr + 7) != '\\0') {\n    error_code = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < (byte)(local_char_value - 1U)) {\n    error_code = -3;\n    goto LAB_000803cc;\n  }\n  *(char *)(data_ptr + 9) = local_char_value;\n  *(undefined *)(data_ptr + 10) = local_undefined_value;\n  *(ushort **)(data_ptr + 0x4c) = data_array;\n  *(char *)(data_ptr + 0xb) = (char)((uint)local_ushort_value >> 8);\n  *(char *)(data_ptr + 0xc) = (char)local_ushort_value;\n  error_code = (char)data_length;\n  undefined_value = (undefined)(data_length_uint >> 8);\n  switch(local_undefined_value) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data_ptr + 0xd) = undefined_value;\n    break;\n  case 5:\n    ushort_value = *data_array;\n    if (ushort_value != 0) {\n      ushort_value = 1;\n    }\n    *(char *)(data_ptr + 0xd) = -(char)ushort_value;\n    data_length_uint = 0;\n    break;\n  case 6:\n    *(char *)(data_ptr + 0xd) = (char)((uint)*data_array >> 8);\n    data_length_uint = (uint)*data_array;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_value = (byte)(data_length >> 3) & 0xfe;\n    if ((data_length & 0xf) != 0) {\n      byte_value = byte_value + 1;\n    }\n    *(char *)(data_ptr + 0xe) = error_code;\n    *(undefined *)(data_ptr + 0xd) = undefined_value;\n    *(byte *)(data_ptr + 0xf) = byte_value;\n    undefined_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data_ptr + 0xd) = undefined_value;\n    *(char *)(data_ptr + 0xe) = error_code;\n    data_array = data_array + -1;\n    *(char *)(data_ptr + 0xf) = error_code * '\\x02';\n    *(undefined *)(data_ptr + 0x49) = 7;\n    ushort_pointer = data_array + data_length_uint;\n    while (data_array != ushort_pointer) {\n      byte_value = *(byte *)(data_ptr + 0x49);\n      *(char *)(data_ptr + (uint)byte_value + 9) = (char)((uint)data_array[1] >> 8);\n      data_length_uint = byte_value + 1 & 0xff;\n      *(char *)(data_ptr + 0x49) = (char)data_length_uint;\n      data_array = data_array + 1;\n      *(char *)(data_length_uint + data_ptr + 9) = (char)*data_array;\n      *(byte *)(data_ptr + 0x49) = byte_value + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data_ptr + 0xe) = (char)data_length_uint;\n  undefined_value = 6;\nLAB_0008034a:\n  *(undefined *)(data_ptr + 0x49) = undefined_value;\nswitchD_0008031e_caseD_7:\n  calculate_checksum_and_update_data_00080258(data_ptr);\n  *(undefined *)(data_ptr + 7) = 1;\n  error_code = '\\0';\nLAB_000803cc:\n  return (int)error_code;\n}",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_data_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_threshold_00080f9c",
                "param_1": "output",
                "param_2": "input_size",
                "param_3": "multiplier",
                "param_4": "divisor",
                "local_58": "thresholds",
                "uVar1": "num_intervals",
                "uVar2": "i"
            },
            "code": "uint32_t find_threshold_00080f9c(uint32_t *output, uint32_t input_size, int multiplier, int divisor) {\n  uint32_t thresholds[16];\n  thresholds[0] = *(uint32_t *)PTR_DAT_0008102c;\n  thresholds[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  thresholds[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  thresholds[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  thresholds[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  thresholds[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  thresholds[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  thresholds[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  thresholds[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  thresholds[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  thresholds[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  thresholds[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  thresholds[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  thresholds[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  thresholds[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  thresholds[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  output[0] = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  uint32_t num_intervals = input_size / (uint32_t)(multiplier * 2);\n  if (input_size == multiplier * 2 * num_intervals) {\n    num_intervals--;\n  }\n  uint32_t i = 0;\n  while (i != 0x10) {\n    if ((uint32_t)(divisor * (int)(((uint64_t)input_size / (uint64_t)((num_intervals + 1) * 2)) / (uint64_t)DAT_00081030)) <= thresholds[i]) {\n      output[1] = (i & 0xf) << 0x10 | (num_intervals & 0xff) << 8 | output[1];\n      return 0;\n    }\n    i++;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "find_threshold_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "data_index",
                "param_2": "data_type",
                "puVar1": "characters",
                "puVar2": "data",
                "iVar3": "result",
                "uVar4": "data_size",
                "uVar5": "data_type_value",
                "uVar6": "uVar7",
                "bVar7": "data_type_value",
                "bVar8": "data_value",
                "iVar9": "data_index_offset",
                "iVar10": "data_value_offset"
            },
            "code": "int process_data_00081210(int data_index, int data_type, int data_size, int param_2){\n  undefined *characters = PTR_DAT_0008130c;\n  undefined *data = PTR_DAT_00081310;\n  int result = data_index;\n  if(characters[data_index * 0x1c + 0xc] != '\\0'){\n    if((data[data_index] & 0xf) == 4){\n      result = set_bit_at_position(DAT_00081314, characters[data_index * 0x1c + 0x19]);\n    }\n    byte data_value = data[data_index];\n    byte data_type_value = data_value & 0xf;\n    if(data_type_value < 3 && data_value != 0){\n      if(data_type_value == 2){\n        if(param_2 == 0){\n          return result;\n        }\n      }\n      else if(data_type_value == 1){\n        if(param_2 == 2){\n          return result;\n        }\n      }\n      else if(data_type_value == 3){\n        if(param_2 == 1){\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if(param_2 != 1){\nLAB_0008126c:\n      if(param_2 == 0){\n        int data_index_offset = data_index * 0x1c;\n        check_character_00080e18(*(undefined4 *)(characters + data_index_offset + 8));\n        result = process_data_00081210_00080da0(*(undefined4 *)(characters + data_index_offset), 3, *(undefined4 *)(characters + data_index_offset + 4), 0);\n        data_value = data[data_index] & 0xf0 | 2;\n      }\n      else{\n        if(param_2 != 2){\n          return result;\n        }\n        int data_index_offset = data_index * 0x1c;\n        check_character_00080e18(*(undefined4 *)(characters + data_index_offset + 8));\n        result = process_data_00081210_00080da0(*(undefined4 *)(characters + data_index_offset), 3, *(undefined4 *)(characters + data_index_offset + 4), 1);\n        data_value = data[data_index] & 0xf0 | 1;\n      }\n      data[data_index] = data_value;\n      return result;\n    }\n    int data_index_offset = data_index * 0x1c;\n    int data_value_offset = *(int *)(characters + data_index_offset);\n    if(data_value >> 4 == 0){\n      data_type = 4;\n    }\n    else{\n      data_type = 5;\n    }\n    result = process_data_00081210_00080da0(data_value_offset, data_type, *(undefined4 *)(characters + data_index_offset + 4), *(undefined4 *)(characters + data_index_offset + 0x10));\n    data[data_index] = data[data_index] & 0xf0 | 3;\n    if(*(int *)(data_value_offset + 0x18) == -1){\n      uint data_size_value = *(uint *)(characters + data_index_offset + 8);\n      if(data_size_value > 0x2c){\n        return 1;\n      }\n      if(data_size_value < 0x20){\n        data_size_value = 1 << (data_size_value & 0xff);\n        uint uVar7 = *(uint *)(DAT_00080e98 + 0x18) & data_size_value;\n        if(uVar7 == data_size_value){\n          *(uint *)(DAT_00080e98 + 0x14) = uVar7;\n        }\n      }\n      else{\n        data_size_value = 1 << (data_size_value - 0x20 & 0xff);\n        uint uVar7 = *(uint *)(DAT_00080e98 + 0x108) & data_size_value;\n        if(uVar7 == data_size_value){\n          *(uint *)(DAT_00080e98 + 0x104) = uVar7;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00080da0",
                "FUN_00080e18",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "process_data_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_to_buffer_00081454",
                "param_1": "buffer_ptr",
                "param_2": "value",
                "iVar1": "buffer",
                "uVar2": "buffer_mask",
                "buffer_header": "buffer_header",
                "buffer_size": "buffer_size",
                "buffer_write_index": "buffer_write_index",
                "buffer_read_index": "buffer_read_index"
            },
            "code": "int write_to_buffer_00081454(int buffer_ptr, int value) {\n    int buffer = *(int *)(buffer_ptr + 0x14);\n    int buffer_header = *(int *)(buffer_ptr + 0x18);\n    int buffer_size = *(int *)(buffer_header + 0x14);\n    int buffer_write_index = *(int *)(buffer + 0x80);\n    int buffer_read_index = *(int *)(buffer + 0x84);\n    int buffer_mask = DAT_000814a4;\n\n    if ((buffer_size << 0x1e >= 0) || (*(int *)(buffer + 0x84) != buffer_mask & *(int *)(buffer + 0x80) + 1U)) {\n        do {\n        } while (*(uint *)(buffer + 0x84) == buffer_mask & *(int *)(buffer + 0x80) + 1U);\n        *(char *)(buffer + buffer_write_index) = (char)value;\n        *(uint *)(buffer + 0x80) = (buffer_mask & *(int *)(buffer + 0x80) + 1U) - (buffer_mask & *(int *)(buffer + 0x80) + 1U >> 31 & 0x80) + 1;\n        *(int *)(buffer_header + 8) = 2;\n    }\n    else {\n        *(int *)(buffer_header + 0x1c) = value;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "update_param_if_zero_00084728",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "zero_ptr",
                "iVar2": "zero_return"
            },
            "code": "void update_param_if_zero_00084728(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n    undefined *zero_ptr = PTR_DAT_0008474c;\n    *(undefined4 *)PTR_DAT_0008474c = 0;\n    int zero_return = return_zero_000811c6(param_2, param_3, param_4);\n    if (zero_return == -1 && *(int *)zero_ptr != 0) {\n        *result = *(int *)zero_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "update_param_if_zero_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param_1",
                "param_2": "data_size",
                "param_3": "data_ptr",
                "uVar1": "value1",
                "iVar2": "result",
                "uVar3": "data_byte",
                "uVar5": "i",
                "pbVar4": "data",
                "abStack_1b": "abStack_1b",
                "local_1c": "data_byte",
                "FUN_00084298": "get_value_from_pointer",
                "process_data_0008456c": "process_data_0008456c",
                "process_data_000844c4": "process_data_000844c4"
            },
            "code": "uint process_data_00083c40(uint param_1, uint data_size, byte** data_ptr)\n{\n    uint value1 = get_value_from_pointer();\n    byte data_byte;\n    uint value2;\n    if (value1 == 1 && data_size - 1 < 0xff) {\n        value2 = data_size & 0xff;\n        data_byte = (byte)value2;\n    }\n    else {\n        value1 = process_data_00083c40_0008456c(param_1, &data_byte, data_size, data_ptr + 0x17);\n        if (value1 == 0xffffffff) {\n            *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n            return 0xffffffff;\n        }\n        if (value1 == 0) {\n            return data_size;\n        }\n        value2 = (uint)data_byte;\n    }\n    uint i = 0;\n    byte* data = data_ptr[2];\n    byte* output = *data_ptr;\n    byte* output_end = *data_ptr + data_size;\n    while (true) {\n        data--;\n        if (data < data_ptr[6]) {\n            *output = (byte)value2;\n            data = *data_ptr;\n            value2 = (uint)*data;\n            if (value2 != 10) {\n                goto LAB_00083c90;\n            }\n            int result = process_data_00083c40_000844c4(param_1, value2, data_ptr);\n            if (result == -1) {\n                return 0xffffffff;\n            }\n        }\n        else {\n            *output = (byte)value2;\n            output++;\n        }\n        if (value1 <= i + 1) {\n            return data_size;\n        }\n        value2 = (uint)abStack_1b[i];\n        i++;\n    }\n}\n",
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = thunk_get_pointer_data();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = thunk_get_pointer_data();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = thunk_get_pointer_data();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = thunk_get_pointer_data();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = thunk_get_pointer_data();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = thunk_get_pointer_data();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = thunk_get_pointer_data();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = calculate_hash_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = check_range_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = calculate_hash_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = thunk_get_pointer_data();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = calculate_hash_0008189c(*(undefined4 *)puVar2);\n  iVar15 = check_concatenated_integers_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = check_concatenated_integers_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = limit_uint_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081730",
                "FUN_00081894",
                "FUN_00081ca8",
                "FUN_00081d1c",
                "FUN_00081734",
                "FUN_00081c94",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_0008189c",
                "FUN_0008043e",
                "FUN_00081cd0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value",
                "*(int *)(param_1 + 0x10)": "ptr_1",
                "*(int *)(ptr_1 + 0x80)": "ptr_2",
                "*(int *)(ptr_1 + 0x84)": "ptr_3",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_2",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_3",
                "difference": "difference"
            },
            "code": "uint calculate_difference_000813e4(int input_value)\n{\n    int* ptr_1 = *(int *)(input_value + 0x10);\n    int* ptr_2 = *(int *)(ptr_1 + 0x80);\n    int* ptr_3 = *(int *)(ptr_1 + 0x84);\n    int difference = *ptr_2 - *ptr_3;\n    return difference & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_data_value_00084290",
                "DAT_00084294": "data_value"
            },
            "code": "int get_data_value_00084290(void)\n{\n  return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_data_value_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "set_flag_and_return_value_if_failed_000846b4",
                "param_1": "return_value",
                "param_2": "first_param",
                "param_3": "second_param",
                "param_4": "third_param",
                "puVar1": "data_pointer",
                "iVar2": "flag_set_result"
            },
            "code": "void set_flag_and_return_value_if_failed_000846b4(int* return_value, int first_param, int second_param, int third_param)\n{\n    undefined* data_pointer = PTR_DAT_000846d8;\n    *(int*)PTR_DAT_000846d8 = 0;\n    int flag_set_result = set_flag_at_offset_000811b4(first_param, second_param, second_param, 0, third_param);\n    if (flag_set_result == -1 && *(int*)data_pointer != 0)\n    {\n        *return_value = *(int*)data_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "set_flag_and_return_value_if_failed_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "fill_buffer_with_zeros_and_return_000813a8",
                "param_1": "buffer_address",
                "fill_buffer_with_constant_value_00082504": "fill_buffer_with_constant_value",
                "0": "start_index",
                "0x80": "buffer_size",
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + BUFFER_SIZE)",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + BUFFER_SIZE + 4)",
                "return param_1": "return buffer_address"
            },
            "code": "int fill_buffer_with_zeros_and_return_000813a8(int buffer_address)\n{\n    const int BUFFER_SIZE = 128;\n    fill_buffer_with_constant_value(buffer_address, 0, BUFFER_SIZE);\n    *(int *)(buffer_address + BUFFER_SIZE) = 0;\n    *(int *)(buffer_address + BUFFER_SIZE + 4) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_zeros_and_return_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_block_00083d9c",
                "param_1": "base_address",
                "param_2": "size",
                "iVar1": "current_block_address",
                "uVar2": "current_block_size",
                "iVar3": "previous_block_address",
                "uVar4": "is_current_block_allocated",
                "iVar5": "free_block_address",
                "uVar7": "is_next_block_allocated",
                "iVar8": "index_of_free_list",
                "do_nothing_00082598": "do_nothing",
                "DAT_00083f24": "index_of_free_list",
                "PTR_DAT_00083f30": "unknown_parameter"
            },
            "code": "void allocate_memory_block_00083d9c(int base_address, int size)\n{\n  int current_block_address;\n  uint current_block_size, next_block_size;\n  int previous_block_address;\n  uint is_current_block_allocated;\n  int free_block_address;\n  uint is_next_block_allocated;\n  int DAT_00083f24;\n\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  DAT_00083f24 = DAT_00083f24;\n  current_block_size = *(uint *)(size + -4);\n  previous_block_address = size + -8;\n  current_block_size &= 0xfffffffe;\n  current_block_address = previous_block_address + current_block_size;\n  next_block_size = *(uint *)(current_block_address + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == current_block_address) {\n    next_block_size += current_block_size;\n    if (-1 < (int)(current_block_size << 0x1f)) {\n      previous_block_address = previous_block_address - *(int *)(size + -8);\n      int previous_block_next = *(int *)(previous_block_address + 0xc);\n      int previous_block_prev = *(int *)(previous_block_address + 8);\n      next_block_size += *(int *)(size + -8);\n      *(int *)(previous_block_prev + 0xc) = previous_block_next;\n      *(int *)(previous_block_next + 8) = previous_block_prev;\n    }\n    uint *free_list_head = *DAT_00083f2c;\n    *(uint *)(previous_block_address + 4) = next_block_size | 1;\n    *(int *)(DAT_00083f24 + 8) = previous_block_address;\n    if (free_list_head <= next_block_size) {\n      calculate_and_set_value_of_param(param_1,*(undefined4 *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    current_block_size = current_block_size & 1;\n    *(uint *)(current_block_address + 4) = next_block_size;\n    if (current_block_size == 0) {\n      previous_block_address = previous_block_address - *(int *)(size + -8);\n      int previous_block_next = *(int *)(previous_block_address + 8);\n      free_block_address = *(int *)(previous_block_address + 0xc);\n      uint is_previous_block_free = (previous_block_next == DAT_00083f24 + 8);\n      if (is_previous_block_free) {\n        current_block_size = 1;\n      }\n      else {\n        int previous_block_prev = *(int *)(previous_block_address + 0xc);\n        *(int *)(previous_block_next + 0xc) = previous_block_prev;\n        *(int *)(previous_block_prev + 8) = previous_block_next;\n      }\n    }\n    else {\n      current_block_size = 0;\n    }\n    if (-1 < *(int *)(current_block_address + next_block_size + 4) << 0x1f) {\n      next_block_size += current_block_size;\n      int next_block_prev = *(int *)(current_block_address + 8);\n      if ((current_block_size == 0) && (next_block_prev == DAT_00083f28)) {\n        *(int *)(DAT_00083f24 + 0x14) = previous_block_address;\n        *(int *)(DAT_00083f24 + 0x10) = previous_block_address;\n        int next_block_next = *(int *)(previous_block_address + 0xc);\n        *(int *)(previous_block_address + 0xc) = next_block_prev;\n        *(int *)(previous_block_address + 8) = next_block_prev;\n        *(uint *)(previous_block_address + 4) = next_block_size | 1;\n        *(uint *)(previous_block_address + next_block_size) = next_block_size;\n        goto LAB_00083e30;\n      }\n      int next_block_next = *(int *)(current_block_address + 0xc);\n      *(int *)(next_block_prev + 0xc) = next_block_next;\n      *(int *)(next_block_next + 8) = next_block_prev;\n    }\n    *(uint *)(previous_block_address + 4) = next_block_size | 1;\n    *(uint *)(previous_block_address + next_block_size) = next_block_size;\n    if (current_block_size == 0) {\n      if (next_block_size < 0x200) {\n        uint free_list_bitmap = *(uint *)(DAT_00083f24 + 4);\n        int free_list_index = DAT_00083f24 + (next_block_size & 0xfffffff8);\n        int free_block_next = *(int *)(free_list_index + 8);\n        *(int *)(previous_block_address + 8) = free_block_next;\n        *(int *)(previous_block_address + 0xc) = free_list_index;\n        *(uint *)(DAT_00083f24 + 4) = free_list_bitmap | 1 << ((int)(next_block_size >> 3) >> 2 & 0xffU);\n        *(int *)(free_list_index + 8) = previous_block_address;\n        *(int *)(free_block_next + 0xc) = previous_block_address;\n        do_nothing_0008259c(param_1);\n        return;\n      }\n      uint free_list_index = next_block_size >> 9;\n      if (free_list_index < 5) {\n        int free_list_index = (next_block_size >> 6) + 0x38;\n        int free_block_index = free_list_index * 2;\n      }\n      else if (free_list_index < 0x15) {\n        int free_list_index = free_list_index + 0x5b;\n        int free_block_index = free_list_index * 2;\n      }\n      else if (free_list_index < 0x55) {\n        int free_list_index = (next_block_size >> 0xc) + 0x6e;\n        int free_block_index = free_list_index * 2;\n      }\n      else if (free_list_index < 0x155) {\n        int free_list_index = (next_block_size >> 0xf) + 0x77;\n        int free_block_index = free_list_index * 2;\n      }\n      else if (free_list_index < 0x555) {\n        int free_list_index = (next_block_size >> 0x12) + 0x7c;\n        int free_block_index = free_list_index * 2;\n      }\n      else {\n        int free_block_index = 0xfc;\n        int free_list_index = 0x7e;\n      }\n      int *free_list_head = DAT_00083f24 + free_list_index * 4;\n      int free_block_next = *(int *)(free_list_head + 8);\n      if (free_block_next == *free_list_head) {\n        *(uint *)(DAT_00083f24 + 4) = *(uint *)(DAT_00083f24 + 4) | 1 << (free_list_index >> 2 & 0xffU);\n        free_block_next = free_block_next;\n      }\n      else {\n        do {\n          if ((*(uint *)(free_block_next + 4) & 0xfffffffc) <= next_block_size) break;\n          free_block_next = *(int *)(free_block_next + 8);\n        } while (*free_list_head != free_block_next);\n        free_block_next = *(int *)(free_block_next + 0xc);\n      }\n      *(int *)(previous_block_address + 0xc) = free_block_next;\n      *(int *)(previous_block_address + 8) = free_block_next;\n      *(int *)(free_block_next + 8) = previous_block_address;\n      *(int *)(free_block_next + 0xc) = previous_block_address;\n    }\n  }\nLAB_00083e30:\n  do_nothing_0008259c(param_1);\n  return;\n}",
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_00083f34",
                "FUN_00081e14",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "double_num1",
                "uVar3": "double_num2",
                "uVar4": "combined_nums",
                "bVar1": "is_neg",
                "bVar5": "is_zero"
            },
            "code": "uint check_overflow_00081bf4(uint num1, uint num2) {\n    uint double_num1 = num1 * 2;\n    uint double_num2 = num2 * 2;\n\n    if (((int)double_num1 >> 0x18 == -1 || (int)double_num2 >> 0x18 == -1) && ((((int)double_num1 >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) || (((int)double_num2 >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n\n    uint combined_nums = double_num1 | num2 & 0x7fffffff;\n    bool is_zero = combined_nums == 0;\n\n    if (!is_zero) {\n        combined_nums = num1 ^ num2;\n        is_zero = combined_nums == 0;\n    }\n    bool is_neg = -1 < (int)combined_nums;\n\n    if (is_neg) {\n        num1 = double_num1 + num2 * -2;\n        is_zero = num1 == 0;\n    }\n\n    if (is_neg && double_num2 <= double_num1 && !is_zero) {\n        num1 = (int)num2 >> 0x1f;\n    }\n\n    if (!is_neg || double_num2 > double_num1) {\n        num1 = ~((int)num2 >> 0x1f);\n    }\n\n    if (!is_zero) {\n        num1 = num1 | 1;\n    }\n    return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "check_overflow_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "PTR_DAT_00081dbc": "NUM_FUNCTION_PTRS",
                "PTR_DAT_00081dc0": "FUNCTION_PTRS",
                "PTR_DAT_00081dc8": "END_DATA_PTR",
                "PTR_LAB_00081dc4": "START_DATA_PTR",
                "do_nothing_00085858": "do_nothing",
                "puVar1": "end_data_ptr",
                "puVar2": "start_data_ptr",
                "iVar3": "i",
                "iVar5": "num_function_ptrs",
                "ppcVar4": "function_ptrs"
            },
            "code": "void execute_functions_00081d7c(void)\n{\n  int num_function_ptrs = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_function_ptrs != 0) {\n    code **function_ptrs = (code **)(PTR_DAT_00081dc0 - 4);\n    int i = 0;\n    do {\n      i++;\n      function_ptrs++;\n      (**function_ptrs)();\n    } while (num_function_ptrs != i);\n  }\n  undefined *end_data_ptr = PTR_DAT_00081dc8;\n  undefined *start_data_ptr = PTR_LAB_00081dc4;\n  do_nothing();\n  int num_data_ptrs = (int)start_data_ptr - (int)end_data_ptr >> 2;\n  if (num_data_ptrs != 0) {\n    code **data_ptrs = (code **)(end_data_ptr - 4);\n    int i = 0;\n    do {\n      i++;\n      data_ptrs++;\n      (**data_ptrs)();\n    } while (num_data_ptrs != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_functions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_integers_00081c5c",
                "param_1": "first_integer",
                "param_2": "second_integer",
                "CONCAT44": "bitwise_concatenation",
                "check_overflow_00081bf4": "check_overflow"
            },
            "code": "uint64_t concatenate_integers_00081c5c(uint32_t first_integer, uint32_t second_integer) {\n    check_overflow();\n    return ((uint64_t) second_integer << 32) | first_integer;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "imported": false,
            "current_name": "concatenate_integers_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "*DAT_000813a0": "*PTR_000813a0",
                "*DAT_000813a4": "*PTR_000813a4",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n  int count = *DAT_000813a0;\n  if (count != -1) {\n    count--;\n    *DAT_000813a0 = count;\n    if (count == 0) {\n      (*DAT_000813a4)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr",
                "puVar4": "next_source_ptr",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "puVar7": "destination_ptr",
                "bVar8": "is_null"
            },
            "code": "void copy_string_00082994(uint *destination, uint *source)\n{\n  char current_char;\n  ushort current_short;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_uint;\n  uint next_uint;\n  uint *next_source_ptr;\n  bool is_null;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    source_ptr = source;\n    if (((uint)source & 1) != 0) {\n      source_ptr = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = source_ptr;\n    if (((uint)source_ptr & 2) != 0) {\n      source = (uint *)((int)source_ptr + 2);\n      current_short = *(ushort *)source_ptr;\n      is_null = (current_short & 0xff) == 0;\n      if (is_null) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_null = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_null) {\n        return;\n      }\n    }\n  }\n  current_uint = *source;\n  next_source_ptr = source + 1;\n  destination_ptr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    destination_ptr = destination + 1;\n    *destination = current_uint;\n    next_source_ptr = source + 2;\n    current_uint = source[1];\n  }\n  while( true ) {\n    source_ptr = next_source_ptr + 1;\n    next_uint = *next_source_ptr;\n    destination = destination_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    destination = destination_ptr + 1;\n    *destination_ptr = current_uint;\n    current_uint = next_uint;\n    if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) break;\n    next_source_ptr = next_source_ptr + 2;\n    current_uint = *source_ptr;\n    destination_ptr = destination_ptr + 2;\n    *destination = next_uint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)current_uint;\n    next_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (next_uint != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "fill_and_write_buffers_00080c0c",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "param_3",
                "puVar1": "first_buffer",
                "puVar2": "second_buffer",
                "puVar3": "third_buffer",
                "puVar4": "fourth_buffer",
                "puVar5": "fifth_buffer",
                "puVar6": "sixth_buffer",
                "PTR_DAT_00080ca0": "first_buffer",
                "PTR_DAT_00080ca4": "second_buffer",
                "PTR_DAT_00080cac": "third_buffer",
                "PTR_DAT_00080cb8": "fourth_buffer",
                "PTR_DAT_00080cb4": "fifth_buffer",
                "PTR_DAT_00080cbc": "sixth_buffer",
                "PTR_DAT_00080cd8": "seventh_buffer",
                "PTR_DAT_00080cdc": "eighth_buffer"
            },
            "code": "void fill_and_write_buffers_00080c0c(undefined4 buffer1, undefined4 buffer2, undefined4 param_3) {\n  undefined *PTR_DAT_00080ca0 = PTR_DAT_00080ca0;\n  undefined *PTR_DAT_00080ca4 = PTR_DAT_00080ca4;\n  undefined *PTR_DAT_00080cac = PTR_DAT_00080cac;\n  undefined *PTR_DAT_00080cb8 = PTR_DAT_00080cb8;\n  undefined *PTR_DAT_00080cb4 = PTR_DAT_00080cb4;\n  undefined *PTR_DAT_00080cbc = PTR_DAT_00080cbc;\n  undefined *PTR_DAT_00080cd8 = PTR_DAT_00080cd8;\n  undefined *PTR_DAT_00080cdc = PTR_DAT_00080cdc;\n  fill_buffer_with_zeros_and_return_000813a8(PTR_DAT_00080ca0);\n  fill_buffer_with_zeros_and_return_000813a8(PTR_DAT_00080ca4);\n  initialize_parameters_000814e4(PTR_DAT_00080cb0, DAT_00080ca8, 8, 8, PTR_DAT_00080ca0, PTR_DAT_00080ca4, param_3);\n  fill_buffer_with_zeros_and_return_000813a8(PTR_DAT_00080cd8);\n  fill_buffer_with_zeros_and_return_000813a8(PTR_DAT_00080cac);\n  fill_buffer_with_zeros_and_return_000813a8(PTR_DAT_00080cb4);\n  fill_buffer_with_zeros_and_return_000813a8(PTR_DAT_00080cdc);\n  fill_buffer_with_zeros_and_return_000813a8(PTR_DAT_00080cb8);\n  write_to_buffer_000815d4(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, PTR_DAT_00080cd8, PTR_DAT_00080cdc);\n  write_to_buffer_000815d4(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, PTR_DAT_00080cac, PTR_DAT_00080cb8);\n  write_to_buffer_000815d4(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, PTR_DAT_00080cb4, PTR_DAT_00080cbc);\n}\n",
            "called": [
                "FUN_000814e4",
                "FUN_000815d4",
                "FUN_000813a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "fill_and_write_buffers_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_data_00080d2e",
                "param_1": "data_address",
                "param_2": "mode",
                "param_3": "data_value",
                "uVar1": "updated_value"
            },
            "code": "void update_data_00080d2e(int data_address, uint32_t mode, uint32_t data_value) {\n  uint32_t updated_value;\n  *(uint32_t *)(data_address + 0x44) = data_value;\n  switch(mode) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      updated_value = *(uint32_t *)(data_address + 0x70) & *(uint32_t *)(data_address + 0x70) & ~data_value;\n      break;\n    case 2:\n      updated_value = *(uint32_t *)(data_address + 0x70) | data_value;\n      break;\n    default:\n      goto switch_case_6;\n  }\n  *(uint32_t *)(data_address + 0x70) = updated_value;\nswitch_case_6:\n  *(uint32_t *)(data_address + 4) = data_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_data_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "data_ptr",
                "param_2": "input_value",
                "param_3": "data_struct_ptr",
                "param_4": "data_value",
                "uVar1": "input_ushort",
                "uVar2": "input_uint",
                "puVar3": "data_ptr_undefined",
                "iVar4": "process_result",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "process_data_00083808": "process_data_internal",
                "decompress_data": "process_data_internal_2"
            },
            "code": "uint process_data_000844c4(int data_ptr, uint input_value, undefined4 *data_struct_ptr, undefined4 data_value)\n{\n  ushort input_ushort;\n  uint input_uint;\n  undefined *data_ptr_undefined;\n  int process_result;\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  input_ushort = *(ushort *)(data_struct_ptr + 3);\n  input_uint = (uint)input_ushort;\n  data_struct_ptr[2] = data_struct_ptr[6];\n  if ((-1 < (int)(input_uint << 0x1c)) || (process_result = data_struct_ptr[4], process_result == 0)) {\n    process_result = process_data_000844c4_00083808(data_ptr, data_struct_ptr, input_ushort, input_uint, data_value);\n    if (process_result != 0) {\n      return 0xffffffff;\n    }\n    input_ushort = *(ushort *)(data_struct_ptr + 3);\n    process_result = data_struct_ptr[4];\n    input_uint = (uint)input_ushort;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(input_uint << 0x12) < 0) {\n    data_ptr_undefined = (undefined *)*data_struct_ptr;\n    process_result = (int)data_ptr_undefined - process_result;\n    if (process_result < (int)data_struct_ptr[5]) {\nLAB_000844f6:\n      process_result = process_result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_struct_ptr[0x19] = data_struct_ptr[0x19] & 0xffffdfff;\n    data_ptr_undefined = (undefined *)*data_struct_ptr;\n    *(ushort *)(data_struct_ptr + 3) = input_ushort | 0x2000;\n    process_result = (int)data_ptr_undefined - process_result;\n    if (process_result < (int)data_struct_ptr[5]) goto LAB_000844f6;\n  }\n  process_result = process_data_000844c4_00083808_2(data_ptr, data_struct_ptr);\n  if (process_result != 0) {\n    return 0xffffffff;\n  }\n  data_ptr_undefined = (undefined *)*data_struct_ptr;\n  process_result = 1;\nLAB_000844f8:\n  data_struct_ptr[2] = data_struct_ptr[2] + -1;\n  *data_struct_ptr = data_ptr_undefined + 1;\n  *data_ptr_undefined = (char)input_value;\n  if (((data_struct_ptr[5] == process_result) ||\n      (((int)((uint)*(ushort *)(data_struct_ptr + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (process_result = process_data_000844c4_00083808_2(data_ptr, data_struct_ptr), process_result != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}\n",
            "called": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00083b14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "uVar2": "shift_amount",
                "uVar3": "hash_value",
                "iVar1": "leading_zeroes_count",
                "iVar4": "sign_bit",
                "uVar5": "high_bits",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_0008189c(uint input)\n{\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint sign_bit = input & 0x80000000;\n  uint absolute_value = input;\n  if ((int)sign_bit < 0) {\n    absolute_value = -input;\n  }\n  if (absolute_value == 0) {\n    return 0;\n  }\n  uint hash_value;\n  if (leading_zeroes_count > 7) {\n    uint shift_amount = leading_zeroes_count - 8;\n    uint high_bits = 0 << (shift_amount & 0xff);\n    hash_value = ((sign_bit | 0x4b000000) - 0x800000) + (absolute_value << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < high_bits);\n    if (high_bits == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n  }\n  else {\n    uint shift_amount = leading_zeroes_count + 0x18U;\n    uint high_bits = absolute_value << shift_amount & 0x80000000;\n    hash_value = ((sign_bit | 0x4b000000) - 0x800000) + ((absolute_value >> (0x20 - shift_amount & 0xff)) - ((int)(absolute_value << (leading_zeroes_count + 0x18U & 0xff)) >> 0x1f));\n    if ((absolute_value << (leading_zeroes_count + 0x18U & 0xff)) & 0x7fffffff == 0) {\n      hash_value = hash_value & ~(high_bits >> 0x1f);\n    }\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_hash_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dst_aligned",
                "puVar2": "dst",
                "puVar3": "src_aligned",
                "uVar4": "remaining_unaligned_size",
                "uVar5": "remaining_size",
                "bVar6": "loop_condition"
            },
            "code": "undefined4 copy_memory_0008234c(undefined4 *destination, undefined4 *source, uint size)\n{\n    undefined4 *dst = destination;\n    undefined4 *src = source;\n    uint remaining_size = size;\n    if ((((uint)source | (uint)destination) & 3) != 0) {\n        if (size < 8) {\n            uint remaining_unaligned_size = size - 4;\n            if (3 < size) {\n                do {\n                    *(undefined *)dst = *(undefined *)src;\n                    dst = (undefined4 *)((int)dst + 1);\n                    src = (undefined4 *)((int)src + 1);\n                    remaining_unaligned_size--;\n                } while (remaining_unaligned_size != 0);\n                *(undefined *)(undefined4 *)((int)dst + 1) = *(undefined *)(undefined4 *)((int)src + 1);\n                *(undefined *)((int)dst + 2) = *(undefined *)((int)src + 2);\n                *(undefined *)((int)dst + 3) = *(undefined *)((int)src + 3);\n                return destination;\n            }\n            goto LAB_000823d0;\n        }\n        if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n            uint remaining_unaligned_size = 4 - ((uint)destination & 3);\n            remaining_size = size - remaining_unaligned_size;\n            undefined4 *dst_aligned = destination;\n            undefined4 *src_aligned = source;\n            if (((uint)destination & 1) != 0) {\n                src_aligned = (undefined4 *)((int)source + 1);\n                dst_aligned = (undefined4 *)((int)destination + 1);\n                *(undefined *)destination = *(undefined *)source;\n            }\n            dst = dst_aligned;\n            src = src_aligned;\n            if ((remaining_unaligned_size & 2) != 0) {\n                src = (undefined4 *)((int)src_aligned + 2);\n                dst = (undefined4 *)((int)dst_aligned + 2);\n                *(undefined2 *)dst_aligned = *(undefined2 *)src_aligned;\n            }\n        }\n    }\n    while (0x3f < remaining_size) {\n        *dst = *src;\n        dst[1] = src[1];\n        dst[2] = src[2];\n        dst[3] = src[3];\n        dst[4] = src[4];\n        dst[5] = src[5];\n        dst[6] = src[6];\n        dst[7] = src[7];\n        dst[8] = src[8];\n        dst[9] = src[9];\n        dst[10] = src[10];\n        dst[0xb] = src[0xb];\n        dst[0xc] = src[0xc];\n        dst[0xd] = src[0xd];\n        dst[0xe] = src[0xe];\n        dst[0xf] = src[0xf];\n        dst += 0x10;\n        src += 0x10;\n        remaining_size -= 0x40;\n    }\n    uint remaining_unaligned_size = remaining_size - 0x10;\n    if (0xffffffcf < remaining_size - 0x40) {\n        do {\n            *dst = *src;\n            dst[1] = src[1];\n            dst[2] = src[2];\n            dst[3] = src[3];\n            dst += 4;\n            src += 4;\n            remaining_unaligned_size -= 0x10;\n        } while (0xf < remaining_unaligned_size);\n    }\n    uint remaining_bytes = remaining_unaligned_size + 0xc;\n    undefined4 *dst_remaining = dst;\n    undefined4 *src_remaining = src;\n    if (0xfffffff3 < remaining_unaligned_size) {\n        do {\n            src = src_remaining + 1;\n            *dst_remaining = *src_remaining;\n            remaining_bytes -= 4;\n            dst = dst_remaining + 1;\n            dst_remaining = dst_remaining + 1;\n            src_remaining = src;\n        } while (0x3 < remaining_bytes);\n    }\nLAB_000823d0:\n    if (remaining_bytes + 4 != 0) {\n        dst_remaining = dst;\n        src_remaining = src;\n        if ((remaining_bytes & 1) != 0) {\n            src_remaining = (undefined4 *)((int)src + 1);\n            dst_remaining = (undefined4 *)((int)dst + 1);\n            *(undefined *)dst = *(undefined *)src;\n        }\n        if ((remaining_bytes + 4 & 2) != 0) {\n            *(undefined2 *)dst_remaining = *(undefined2 *)src_remaining;\n        }\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_word_statistics_and_add_data_to_buffer_00080a68",
                "puVar1": "word_stats_ptr"
            },
            "code": "void initialize_word_statistics_and_add_data_to_buffer_00080a68(void)\n{\n    undefined *word_stats_ptr;\n    word_stats_ptr = PTR_DAT_00080a94;\n    initialize_word_stats(word_stats_ptr, PTR_s__00080a98);\n    add_data_to_buffer(word_stats_ptr, DAT_00080aa0, DAT_00080a9c);\n    word_stats_ptr = PTR_DAT_00080aa4;\n    PTR_DAT_00080aa4[4] = 0;\n    word_stats_ptr[5] = 0;\n    word_stats_ptr[6] = 6;\n    *(undefined2 *)(word_stats_ptr + 0x56) = 1000;\n    return;\n}",
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_word_statistics_and_add_data_to_buffer_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "update_value_if_valid_0008165c",
                "param_1": "ptr_array",
                "param_2": "new_value",
                "param_3": "array_size",
                "iVar1": "is_valid",
                "reset_memory_0008160c": "reset_array",
                "copy_string_00082994": "copy_string"
            },
            "code": "undefined4 update_value_if_valid_0008165c(undefined4 *ptr_array, undefined4 new_value, undefined4 array_size)\n{\n    int is_valid = check_and_update_value(ptr_array, array_size, new_value);\n    if (is_valid == 0) {\n        reset_memory_0008160c(ptr_array);\n    }\n    else {\n        ptr_array[2] = new_value;\n        copy_string_00082994(*ptr_array, new_value);\n    }\n    return ptr_array;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "update_value_if_valid_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint16_t combine_values_000815f8(int value1, uint8_t value2) {\n    return value2 | (value1 << 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer_start",
                "param_2": "target_char",
                "param_3": "buffer_end",
                "puVar1": "current_ptr",
                "uVar2": "current_value",
                "pcVar3": "current_char_ptr",
                "pcVar4": "buffer_end_char_ptr",
                "bVar5": "found_target_char"
            },
            "code": "uint* find_char_in_buffer_00084384(uint* buffer_start, char target_char, uint* buffer_end)\n{\n  uint* current_ptr;\n  uint current_value;\n  char* current_char_ptr;\n  char* buffer_end_char_ptr;\n  bool found_target_char;\n  \n  if (((uint)buffer_start & 3) == 0) {\n    current_ptr = buffer_start;\n    if ((uint*)0x3 < buffer_end) {\n      do {\n        current_value = *buffer_start ^ CONCAT22(CONCAT11(target_char, target_char), CONCAT11(target_char, target_char));\n        current_ptr = buffer_start;\n        if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n        buffer_end = buffer_end - 1;\n        current_ptr = buffer_start + 1;\n        buffer_start = buffer_start + 1;\n      } while ((uint*)0x3 < buffer_end);\n    }\n    buffer_start = buffer_end;\n    buffer_end_char_ptr = (char*)((int)buffer_start - 1);\n    if ((buffer_start != (uint*)0x0) && (*buffer_start != target_char)) {\n      current_char_ptr = (char*)0x0;\n      do {\n        buffer_start = (uint*)((int)buffer_start + 1);\n        found_target_char = current_char_ptr == buffer_end_char_ptr;\n        current_char_ptr = current_char_ptr + 1;\n        if (found_target_char) goto LAB_000843dc;\n      } while (*(char*)buffer_start != target_char);\n    }\n  }\n  else if (buffer_end == (uint*)0x0) {\n    buffer_start = (uint*)0x0;\n  }\n  else if (*buffer_start != target_char) {\n    current_ptr = (uint*)((int)buffer_start + 1);\n    buffer_end = (uint*)((int)buffer_end - 1);\n    do {\n      buffer_start = current_ptr;\n      if (((uint)buffer_start & 3) == 0) goto LAB_000843b4;\n      if (buffer_end == (uint*)0x0) goto LAB_000843dc;\n      current_ptr = (uint*)((int)buffer_start + 1);\n      buffer_end = (uint*)((int)buffer_end - 1);\n    } while (*(char*)buffer_start != target_char);\n  }\n  return buffer_start;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_value_at_address_00081034",
                "param_1": "address",
                "param_2": "value_to_update",
                "param_3": "bit_to_set",
                "PTR_": "uint8_t*",
                "DAT_": "uint32_t",
                "*(uint *)(param_1 + 4)": "*(uint32_t*)(address + 4)"
            },
            "code": "void update_value_at_address_00081034(PTR_ address, DAT_ value_to_update, DAT_ bit_to_set) {\n\tDAT_* current_value = (DAT_*)(address + 4);\n\t*current_value |= value_to_update | ((bit_to_set & 1) << 7);\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_value_at_address_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_data_to_buffer_00083974",
                "param_1": "input_data",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr",
                "iVar3": "buffer_index",
                "iVar4": "buffer_start"
            },
            "code": "undefined4 add_data_to_buffer_00083974(undefined4 input_data)\n{\n    undefined *data_ptr;\n    undefined4 *buffer_ptr;\n    int buffer_index;\n    int buffer_start;\n\n    data_ptr = PTR_DAT_00083984;\n    if (DAT_00083980 == 0) {\n        return input_data;\n    }\n    buffer_start = *(int *)PTR_DAT_0008396c;\n    buffer_ptr = *(undefined4 **)(buffer_start + 0x148);\n    if (buffer_ptr == (undefined4 *)0x0) {\n        buffer_ptr = (undefined4 *)(buffer_start + 0x14c);\n        *(undefined4 **)(buffer_start + 0x148) = buffer_ptr;\n    }\n    buffer_index = buffer_ptr[1];\n    if (0x1f < buffer_index) {\n        if ((DAT_00083970 == 0) || (buffer_ptr = (undefined4 *)call_function_with_param_00081df4(400), buffer_ptr == (undefined4 *)0x0)) {\n            return 0xffffffff;\n        }\n        *buffer_ptr = *(undefined4 *)(buffer_start + 0x148);\n        buffer_ptr[1] = 0;\n        buffer_index = 0;\n        *(undefined4 **)(buffer_start + 0x148) = buffer_ptr;\n        buffer_ptr[0x62] = 0;\n        buffer_ptr[99] = 0;\n    }\n    buffer_ptr[1] = buffer_index + 1;\n    buffer_ptr[buffer_index + 2] = data_ptr;\n    return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_data_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "process_result_00084700",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "res",
                "PTR_DAT_00084724": "ptr"
            },
            "code": "void process_result_00084700(int* result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined* PTR_DAT_00084724 = PTR_DAT_00084724;\n  *(undefined4*)PTR_DAT_00084724 = 0;\n  int res = calculate_result(arg1, arg2, arg3);\n  if (res == -1 && *(int*)PTR_DAT_00084724 != 0) {\n    *result = *(int*)PTR_DAT_00084724;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "process_result_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_get_pointer_data": "get_value_from_pointer",
                "PTR_DAT_0008171c": "pointer_to_data",
                "undefined4": "int",
                "*": "*",
                "return": "return",
                "thunk_FUN_00081714": "thunk_get_pointer_data_thunk_00081714"
            },
            "code": "int thunk_get_pointer_data_thunk_00081714() {\n    int* pointer_to_value = (int*) PTR_DAT_0008171c;\n    return *pointer_to_value;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_00080258",
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "thunk_get_pointer_data_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_concatenated_integers_00081ca8",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "concatenate_integers_together_00081c54": "concatenate_integers"
            },
            "code": "bool check_concatenated_integers_00081ca8(void)\n{\n  bool is_CY_zero = false;\n  bool is_ZR_nonzero = false;\n  concatenate_integers();\n  return is_CY_zero || !is_ZR_nonzero;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_concatenated_integers_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "process_data_00081318",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "bits_set",
                "uVar4": "data_ptr_4",
                "iVar5": "data_ptr_3",
                "PTR_DAT_00081384": "data_ptr_2",
                "PTR_DAT_00081380": "data_ptr_1",
                "check_bits_set_in_both_00080e04": "check_bits_set_in_both",
                "process_data_00081210": "process_data_00081210",
                "update_parameters_00080d7a": "update_parameters"
            },
            "code": "void process_data_00081318(int data_index, int param_2, undefined4 param_3) {\n  undefined *PTR_DAT_00081384 = PTR_DAT_00081384;\n  undefined *PTR_DAT_00081380 = PTR_DAT_00081380;\n  if (PTR_DAT_00081380[data_index * 0x1c + 0xc] != 0) {\n    if ((PTR_DAT_00081384[data_index] & 0xf) == 5) {\n      process_data_00081318_00081210(data_index, 1, param_3, 5, data_index, param_2, param_3);\n    }\n    PTR_DAT_00081384[data_index] = PTR_DAT_00081384[data_index] & 0xf | (byte)(param_2 << 4);\n    int data_ptr_3 = *(int *)(PTR_DAT_00081380 + data_index * 0x1c);\n    undefined4 data_ptr_4 = *(undefined4 *)(PTR_DAT_00081380 + data_index * 0x1c + 4);\n    int bits_set = check_bits_set_in_both(data_ptr_3, data_ptr_4);\n    if (bits_set == 0) {\n      if (param_2 != 0) {\n        *(undefined4 *)(data_ptr_3 + 100) = data_ptr_4;\n        return;\n      }\n      *(undefined4 *)(data_ptr_3 + 0x60) = data_ptr_4;\n      return;\n    }\n    update_parameters(data_ptr_3, data_ptr_4, param_2, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00080e04",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_00080ae4",
                "FUN_00080258",
                "FUN_000801b0",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "process_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "get_pointer_data": "get_pointer_data",
                "undefined4": "int",
                "PTR_DAT_0008171c": "pointer_data",
                "FUN_00081714": "get_pointer_data_00081714"
            },
            "code": "int get_pointer_data_00081714() {\n    int* pointer = (int*)PTR_DAT_0008171c;\n    return *pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_pointer_data_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "process_result_and_update_status_0008449c",
                "param_1": "result",
                "param_2": "status",
                "iVar1": "processed_result",
                "uVar2": "status_flags"
            },
            "code": "void process_result_and_update_status_0008449c(int result, int* status) {\n  int processed_result = process_result(param_1, (int)*(short *)(status + 0xe));\n  ushort status_flags;\n  if (processed_result == -1) {\n    status_flags = *(ushort *)(status + 0xc) & 0xefff;\n  }\n  else {\n    status_flags = *(ushort *)(status + 0xc) | 0x1000;\n  }\n  if (processed_result != -1) {\n    *(int *)(status + 0x50) = processed_result;\n  }\n  *(ushort *)(status + 0xc) = status_flags;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "process_result_and_update_status_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value",
                "param_2": "input_int",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "output_array",
                "lVar2": "product",
                "uVar1": "lower_bits"
            },
            "code": "void calculate_difference_0008477c(uint64_t input_value, int input_int, uint32_t param_3, uint32_t param_4, int *output_array)\n{\n  uint64_t product = multiply(input_value, param_3, param_4);\n  uint32_t lower_bits = (uint32_t)product;\n  output_array[0] = input_value - lower_bits;\n  output_array[1] = input_int - ((product >> 32) + (input_value < lower_bits));\n  return;\n}\n\nuint64_t multiply(uint64_t value, uint32_t param_3, uint32_t param_4)\n{\n  return value * ((uint64_t)param_4 << 32 | param_3);\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_and_return_length_000801b0",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "value",
                "cVar3": "length_return_value",
                "iVar4": "result",
                "bVar5": "index"
            },
            "code": "int process_and_return_length_000801b0(int **data)\n{\n    bool is_overflow = false;\n    int length = *(byte *)((int)data + 6);\n    if (length > 1)\n        process_data_00081318(length, 0);\n    *(undefined *)((int)data + 0x49) = 0;\n    if (*(byte *)((int)data + 5) < 4)\n    {\n        while (true)\n        {\n            int result = (**(code **)(**data + 8))();\n            if (result == 0)\n                break;\n            byte index = *(byte *)((int)data + 0x49);\n            undefined value = (**(code **)(**data + 0xc))();\n            *(undefined *)((int)data + index + 9) = value;\n            index++;\n            *(byte *)((int)data + 0x49) = index;\n            if (index > 0x3f)\n                is_overflow = true;\n        }\n    }\n    *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n    int length_return_value;\n    if (is_overflow)\n    {\n        length_return_value = -3;\n        *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    }\n    else\n    {\n        length_return_value = *(char *)((int)data + 0x49);\n    }\n    return length_return_value;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_and_return_length_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "next_index",
                "*(int *)(param_1 + 0x80)": "current_index",
                "*(uint *)(param_1 + 0x84)": "unused_variable"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined new_value)\n{\n  uint next_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  uint current_index = *(uint *)(buffer_address + 0x84);\n  if (next_index != current_index) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x80) = next_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "*param_1": "parameters",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3",
                "param_5": "parameter_4",
                "param_6": "parameter_5",
                "puVar1": "pointer_1"
            },
            "code": "void initialize_parameters_000814e4(uint32_t *parameters, uint32_t parameter_1, uint8_t parameter_2, uint32_t parameter_3, uint32_t parameter_4, uint32_t parameter_5)\n{\n    uint8_t *pointer_1;\n    parameters[0] = PTR_PTR_FUNCTION_00081454_1_00081504;\n    parameters[1] = 0;\n    parameters[2] = 1000;\n    parameters[3] = parameter_4;\n    parameters[4] = parameter_5;\n    parameters[5] = parameter_2;\n    parameters[6] = parameter_1;\n    pointer_1 = (uint8_t *)&parameters[7];\n    *pointer_1 = parameter_3;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_parameters_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "set_params_00080d54",
                "param_1": "param_array",
                "param_2": "value",
                "param_3": "control_bits",
                "bVar1": "is_bit_set",
                "0x11": "17",
                "0x19": "25",
                "0x18": "24",
                "8": "8",
                "9": "9",
                "0x20": "32",
                "5": "5"
            },
            "code": "void set_params_00080d54(uint32_t *param_array, uint32_t value, uint32_t control_bits) {\n    bool is_bit_set;\n    \n    is_bit_set = (int)(control_bits << 0x1f) < 0;\n    param_array[17] = value;\n    if (is_bit_set) {\n        param_array[25] = value;\n    }\n    if (!is_bit_set) {\n        param_array[24] = value;\n    }\n    is_bit_set = (control_bits & 10) != 0;\n    if (is_bit_set) {\n        param_array[8] = value;\n    }\n    if (!is_bit_set) {\n        param_array[9] = value;\n    }\n    if (((int)(control_bits << 0x1e) < 0) || ((int)(control_bits << 0x1c) < 0)) {\n        param_array[32] = value;\n    }\n    param_array[5] = value;\n    *param_array = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_params_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "data_start_index",
                "param_2": "data_length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_index",
                "uVar4": "lsb"
            },
            "code": "uint calculate_checksum_0008021c(int data_start_index, uint data_length) {\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = data_start_index; (current_index - data_start_index & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint lsb = checksum & 1;\n      checksum = checksum >> 1;\n      if (lsb != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index = bit_index - 1;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = process_data_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_data_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_in_word_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_char_in_buffer_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_difference_if_not_zero_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_difference_if_not_zero_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_data_and_return_result_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008378c",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082ac0",
                "FUN_00082a50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "allocate_memory_block_00081e04",
                "param_1": "block_size",
                "*DAT_00081e10": "memory_block"
            },
            "code": "void allocate_memory_block_00081e04(void* *DAT_00081e10, size_t block_size)\n{\n    allocate_memory_block_00081e04_00083d9c(**DAT_00081e10, block_size);\n    return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "calculate_difference_if_not_zero_00084750",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "iVar1": "difference"
            },
            "code": "int calculate_difference_if_not_zero_00084750(int first_value, int second_value, int third_value, int fourth_value) {\n  int difference;\n  if (fourth_value == 0 && third_value == 0) {\n    if (second_value != 0 || first_value != 0) {\n      first_value = -1;\n    }\n    return first_value;\n  }\n  difference = calculate_difference_000847ac();\n  return difference;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "calculate_difference_if_not_zero_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_and_execute_system_00080ae4",
                "puVar1": "system_time_ptr",
                "puVar2": "data_ptr",
                "iVar3": "data_ptr_1",
                "iVar4": "data_ptr_4",
                "iVar5": "data_ptr_2",
                "iVar6": "data_ptr_3",
                "iVar7": "index",
                "iVar8": "num_iterations"
            },
            "code": "void initialize_and_execute_system_00080ae4(void)\n{\n  uint *system_time_ptr;\n  undefined4 *data_ptr;\n  int index;\n  int num_iterations;\n  int data_ptr_1;\n  int data_ptr_2;\n  int data_ptr_3;\n  int data_ptr_4;\n  \n  system_time_ptr = system_time;\n  initialize_system();\n  data_ptr = data;\n  data[1] = *system_time_ptr / 1000 - 1;\n  *(undefined *)(data + 0x23) = 0xf0;\n  data[2] = 0;\n  *data = 7;\n  execute_functions();\n  index = 0;\n  num_iterations = 0x4f;\n  do {\n    index++;\n    process_data(index, 0);\n    data_ptr_3 = data_3;\n    data_ptr_2 = data_2;\n    data_ptr_1 = data_1;\n    data_ptr_4 = data_4;\n  } while (index != num_iterations);\n  *(undefined4 *)(data_1 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_2 + 0xa0) = 0xffffffff;\n  process_data(data_ptr_1, 1, 0x300, 0);\n  process_data(0, 1);\n  process_data(data_ptr_1, 1, 0xc00, 0);\n  process_data(data_ptr_1, 1, 0x3000, 0);\n  process_data(data_ptr_2, 2, 0x30, 0);\n  process_data(data_ptr_4, 1, 0xc00, 0);\n  process_data(data_ptr_1, 1, 3, 0);\n  process_data(data_ptr_4, 1, 0xc000, 0);\n  check_character(0x25);\n  find_threshold(data_5, *system_time_ptr, data_6, 0xc);\n  update_data(data_5, 0, 0x300000, 1);\n  update_value_at_address(data_5, 0, 0);\n  set_param_value(data_5, 0xffffffff);\n  set_value_to_65535(data_5);\n  return;\n}",
            "called": [
                "FUN_00081034",
                "FUN_00080f9c",
                "FUN_00080da0",
                "FUN_00081042",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00081d7c",
                "FUN_00081066"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "add_data_to_buffer_00081d5c",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_index",
                "iVar3": "buffer_start_index",
                "uVar4": "buffer_mask"
            },
            "code": "uint32_t add_data_to_buffer_00081d5c(uint32_t data_1, uint32_t data_2, uint32_t data_3)\n{\n    uint32_t *buffer_ptr;\n    uint32_t buffer_index;\n    uint32_t buffer_mask;\n    int buffer_start_index = *(int *)PTR_DAT_0008396c;\n    buffer_ptr = *(uint32_t **)(buffer_start_index + 0x148);\n    if (buffer_ptr == (uint32_t *)0x0) {\n        buffer_ptr = (uint32_t *)(buffer_start_index + 0x14c);\n        *(uint32_t **)(buffer_start_index + 0x148) = buffer_ptr;\n    }\n    buffer_index = buffer_ptr[1];\n    if (buffer_index > 0x1f) {\n        if ((DAT_00083970 == 0) || ((buffer_ptr = (uint32_t *)allocate_memory(400)) == (uint32_t *)0x0)) {\n            return 0xffffffff;\n        }\n        *buffer_ptr = *(uint32_t *)(buffer_start_index + 0x148);\n        buffer_ptr[1] = 0;\n        buffer_index = 0;\n        *(uint32_t **)(buffer_start_index + 0x148) = buffer_ptr;\n        buffer_ptr[0x62] = 0;\n        buffer_ptr[99] = 0;\n    }\n    buffer_mask = 1 << (buffer_index & 0xff);\n    buffer_ptr[buffer_index + 0x22] = data_1;\n    buffer_ptr[0x62] |= buffer_mask;\n    buffer_ptr[buffer_index + 0x42] = data_3;\n    buffer_ptr[99] |= buffer_mask;\n    buffer_ptr[1] = buffer_index + 1;\n    buffer_ptr[buffer_index + 2] = data_2;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "add_data_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "calculate_sum_and_set_if_valid_00082970",
                "*param_1": "*output_sum",
                "param_2": "input_num",
                "puVar1": "ptr_data",
                "iVar2": "sum"
            },
            "code": "void calculate_sum_and_set_if_valid_00082970(int *output_sum, undefined4 input_num)\n{\n  undefined *ptr_data = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  int sum = calculate_sum(input_num);\n  if ((sum == -1) && (*(int *)ptr_data != 0)) {\n    *output_sum = *(int *)ptr_data;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "calculate_sum_and_set_if_valid_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be"
            },
            "code": "int return_one_000811be(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "concatenate_integers_together_00081c54",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "code": "void concatenate_integers_together_00081c54(int second_integer, int first_integer)\n{\n    concatenate_integers_00081c5c(second_integer, first_integer);\n    return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "concatenate_integers_together_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "check_and_update_value_0008163a",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "iVar1": "update_result"
            },
            "code": "int check_and_update_value_0008163a(int *data_ptr, uint data_len) {\n    int update_result;\n    if ((data_ptr[0] == 0) || ((uint)data_ptr[1] < data_len)) {\n        update_result = check_and_update_value_0008163a_00081622(data_ptr);\n        if (update_result == 0) {\n            return 0;\n        }\n        if (data_ptr[2] == 0) {\n            *(undefined *)*data_ptr = 0;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "check_and_update_value_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "call_function_with_params_000825a0",
                "param_1": "param_1",
                "param_2": "param_2",
                "DAT_000825ac": "function_ptr",
                "*DAT_000825ac": "*function_ptr"
            },
            "code": "void call_function_with_params_000825a0(int* DAT_000825ac, int param_1, int param_2)\n{\n  DAT_000825ac(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "call_function_with_params_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "write_to_buffer_000815d4",
                "param_1": "buffer",
                "param_2": "data",
                "initialize_parameters_000814e4": "initialize_parameters",
                "*param_1": "*buffer",
                "PTR_PTR_write_to_buffer_00081454_1_000815f4": "PTR_PTR_write_to_buffer_1"
            },
            "code": "undefined4* write_to_buffer_000815d4(undefined4* buffer, undefined4 data){\n    initialize_parameters();\n    *buffer = PTR_PTR_write_to_buffer_000815d4_00081454_1_000815f4;\n    buffer[9] = data;\n    return buffer;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "write_to_buffer_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = calculate_sum_and_set_if_valid_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = calculate_sum_and_set_if_valid_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_block_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00081df4",
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "param_1": "data_ptr",
                "puVar1": "ptr_to_data",
                "iVar2": "result"
            },
            "code": "void process_data_00080164(int **data_ptr)\n{\n  undefined *ptr_to_data;\n  int result;\n  \n  ptr_to_data = PTR_DAT_000801ac;\n  *data_ptr = (int *)PTR_DAT_000801ac;\n  (**(code **)(*(int *)ptr_to_data + 0x18))(PTR_DAT_000801ac);\n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    process_data_00080164_00081210(*(byte *)((int)data_ptr + 6),1);\n    process_data_00080164_00081318(*(undefined *)((int)data_ptr + 6),0);\n  }\n  do {\n    result = (**(code **)(**data_ptr + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  *(undefined *)((int)data_ptr + 0x4a) = 0;\n  *(undefined2 *)(data_ptr + 0x15) = 0;\n  *(undefined2 *)((int)data_ptr + 0x52) = 0;\n  *(undefined2 *)(data_ptr + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "process_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "count_bytes_000811cc",
                "param_1": "data",
                "param_2": "size",
                "param_3": "count",
                "DAT_000811ec": "PTR_DATA",
                "iVar1": "i"
            },
            "code": "uint count_bytes_000811cc(uint8_t *data, int size, uint count)\n{\n  int i;\n  for (i = 0; i < (int)count; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(data + i);\n  }\n  return count & ~((int)count >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "count_bytes_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "process_integer_000846dc",
                "param_1": "output_number",
                "param_2": "input_number",
                "puVar1": "ptr_data",
                "iVar2": "return_value"
            },
            "code": "void process_integer_000846dc(int *output_number, undefined4 input_number) {\n    undefined *ptr_data = PTR_DAT_000846fc;\n    *(undefined4 *)PTR_DAT_000846fc = 0;\n    int return_value = return_one_000811be(input_number);\n    if ((return_value == -1) && (*(int *)ptr_data != 0)) {\n        *output_number = *(int *)ptr_data;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_integer_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_hash_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "multiplier",
                "uVar4": "shifted_input",
                "0U": "shifted_zeroes",
                "sum": "shifted_multiplier"
            },
            "code": "uint calculate_hash_00081894(uint input){\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(input);\n  uint shift = leading_zeroes - 8;\n  int multiplier = shift * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shift_masked = shift & 0xff;\n    uint shifted_input = input << shift_masked;\n    uint shifted_zeroes = 0U >> (0x20 - shift_masked);\n    uint sum = multiplier + shifted_input + shifted_zeroes + (uint)(0x7fffffff < 0);\n    if ((0 << shift_masked) == 0x80000000) {\n      sum = sum & 0xfffffffe;\n    }\n    return sum;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_multiplier = multiplier + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    shifted_multiplier = shifted_multiplier & ~(shifted_input >> 0x1f);\n  }\n  return shifted_multiplier;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_hash_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "set_value_if_valid_000845bc",
                "param_1": "output_buffer",
                "param_2": "value_to_set",
                "param_3": "buffer_size",
                "*param_1": "*output_buffer",
                "*param_2": "*value_to_set",
                "undefined4": "int",
                "undefined": "uint8_t",
                "uint": "uint32_t",
                "char": "uint8_t",
                "0x0": "NULL",
                "0x100": "256",
                "0x8a": "138",
                "return 0xffffffff;": "return -1;"
            },
            "code": "int set_value_if_valid_000845bc(uint8_t *output_buffer, uint8_t value_to_set, uint32_t buffer_size) {\n    if (output_buffer == NULL) {\n        return 0;\n    }\n    if (buffer_size < 256) {\n        *output_buffer = (uint8_t)value_to_set;\n        return 1;\n    }\n    *output_buffer = 0x8a;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "set_value_if_valid_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_buffer_with_constant_value_00082504",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "buffer_size",
                "puVar1": "buffer_ptr_1",
                "puVar2": "buffer_ptr_2",
                "uVar3": "constant_value",
                "uVar4": "buffer_size_remaining",
                "bVar5": "buffer_size_is_zero"
            },
            "code": "void fill_buffer_with_constant_value_00082504(undefined4 *buffer, undefined value, uint buffer_size)\n{\n    undefined4 *buffer_ptr_1;\n    undefined4 *buffer_ptr_2;\n    undefined4 constant_value;\n    uint buffer_size_remaining;\n    bool buffer_size_is_zero;\n    \n    if (((uint)buffer & 3) != 0) {\n        buffer_size_is_zero = buffer_size == 0;\n        buffer_ptr_1 = buffer;\n        buffer_size = buffer_size - 1;\n        if (buffer_size_is_zero) {\n            return;\n        }\n        while (true) {\n            buffer = (undefined4 *)((int)buffer_ptr_1 + 1);\n            *(undefined *)buffer_ptr_1 = value;\n            if (((uint)buffer & 3) == 0) {\n                break;\n            }\n            buffer_size_is_zero = buffer_size == 0;\n            buffer_ptr_1 = buffer;\n            buffer_size = buffer_size - 1;\n            if (buffer_size_is_zero) {\n                return;\n            }\n        }\n    }\n    if (3 < buffer_size) {\n        constant_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n        buffer_size_remaining = buffer_size;\n        buffer_ptr_1 = buffer;\n        if (0xf < buffer_size) {\n            buffer_size_remaining = buffer_size - 0x10;\n            do {\n                *buffer_ptr_1 = constant_value;\n                buffer_ptr_1[1] = constant_value;\n                buffer_ptr_1[2] = constant_value;\n                buffer_ptr_1[3] = constant_value;\n                buffer_ptr_1 = buffer_ptr_1 + 4;\n            } while (buffer_ptr_1 != (undefined4 *)((int)buffer + (buffer_size_remaining & 0xfffffff0) + 0x10));\n            buffer_size = buffer_size & 0xf;\n            buffer = buffer + ((buffer_size_remaining >> 4) + 1) * 4;\n            buffer_size_remaining = buffer_size;\n            buffer_ptr_1 = buffer;\n            if (buffer_size < 4) {\n                goto LAB_00082580;\n            }\n        }\n        do {\n            buffer_size_remaining = buffer_size_remaining - 4;\n            *buffer = constant_value;\n            buffer = buffer + 1;\n        } while (3 < buffer_size_remaining);\n        buffer = (undefined4 *)((int)buffer_ptr_1 + (buffer_size - 4 & 0xfffffffc) + 4);\n        buffer_size_remaining = buffer_size & 3;\n    }\nLAB_00082580:\n    if (buffer_size_remaining != 0) {\n        buffer_ptr_1 = buffer;\n        do {\n            buffer_ptr_2 = (undefined4 *)((int)buffer_ptr_1 + 1);\n            *(undefined *)buffer_ptr_1 = value;\n            buffer_ptr_1 = buffer_ptr_2;\n        } while (buffer_ptr_2 != (undefined4 *)(buffer_size_remaining + (int)buffer));\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_constant_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_and_return_value_if_not_set_000800f4",
                "param_1": "value_to_return",
                "PTR_DAT_0008010c": "PTR_DATA_FLAG",
                "DAT_00080110": "DATA_FLAG_VALUE",
                "DAT_00080114": "DATA_VALUE"
            },
            "code": "int check_and_return_value_if_not_set_000800f4(int value_to_return) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      value_to_return = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return value_to_return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_value_if_not_set_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "data",
                "param_2": "data_size",
                "iVar1": "result",
                "iVar2": "func_result_2",
                "local_488": "stack_array",
                "local_480": "stack_var_1",
                "local_47c": "data_flag",
                "local_47a": "data_flag_2",
                "local_478": "stack_var_2",
                "local_474": "stack_var_4",
                "local_470": "stack_var_3",
                "local_46c": "stack_var_5",
                "local_464": "stack_var_6",
                "local_424": "stack_var_7",
                "auStack_420": "stack_array_2"
            },
            "code": "int process_data_0008378c(undefined4 data, int data_size) {\n    int result = 0;\n    int func_result_1 = 0;\n    int func_result_2 = 0;\n    undefined *stack_array[2];\n    undefined4 stack_var_1;\n    ushort data_flag;\n    undefined2 data_flag_2;\n    undefined *stack_var_2;\n    undefined4 stack_var_3;\n    undefined4 stack_var_4;\n    undefined4 stack_var_5;\n    undefined4 stack_var_6;\n    undefined4 stack_var_7;\n    undefined stack_array_2[1024];\n    \n    stack_var_7 = *(undefined4 *)(data_size + 100);\n    stack_var_5 = *(undefined4 *)(data_size + 0x1c);\n    data_flag_2 = *(undefined2 *)(data_size + 0xe);\n    stack_var_6 = *(undefined4 *)(data_size + 0x24);\n    stack_array[0] = stack_array_2;\n    data_flag = *(ushort *)(data_size + 0xc) & 0xfffd;\n    stack_var_1 = 0x400;\n    stack_var_4 = 0x400;\n    stack_var_3 = 0;\n    stack_var_2 = stack_array[0];\n    \n    func_result_1 = get_data(data, stack_array);\n    if ((-1 < func_result_1) && (func_result_2 = process_data_0008378c(data, stack_array), func_result_2 != 0)) {\n        result = -1;\n    }\n    if ((int)((uint)data_flag << 0x19) < 0) {\n        *(ushort *)(data_size + 0xc) = *(ushort *)(data_size + 0xc) | 0x40;\n    }\n    return result;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "decompress_data": "decompress_data",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "data_offset",
                "iVar2": "compressed_data_size",
                "uVar3": "flags",
                "uVar4": "flags_and_size",
                "iVar5": "uncompressed_data_size",
                "pcVar6": "decompressor",
                "unaff_r4": "result",
                "iVar7": "bytes_written",
                "PTR_00083d9c": "allocate_memory_block",
                "PTR_00083b14": "initialize_data_structures",
                "FUN_00083adc": "decompress_data_00083adc"
            },
            "code": "undefined4 decompress_data_00083adc(int *input_buffer, int *output_buffer)\n{\n  int *data_offset;\n  int compressed_data_size;\n  ushort flags;\n  uint flags_and_size;\n  int uncompressed_data_size;\n  code *decompressor;\n  undefined4 result;\n  int bytes_written;\n  int input_buffer_size;\n  int *memory_block;\n\n  if ((input_buffer != NULL) && (input_buffer[14] == 0)) {\n    PTR_00083b14();\n  }\n  if (*(short *)(output_buffer + 6) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_buffer + 6);\n  flags_and_size = (uint)flags << 28;\n  if ((int)flags_and_size < 0) {\n    compressed_data_size = output_buffer[4];\n    if (compressed_data_size == 0) {\n      return 0;\n    }\n    uncompressed_data_size = *output_buffer;\n    if ((flags & 3) == 0) {\n      data_offset = output_buffer + 5;\n    }\n    else {\n      data_offset = NULL;\n    }\n    *output_buffer = compressed_data_size;\n    uncompressed_data_size -= compressed_data_size;\n    bytes_written = 0;\n    do {\n      if (uncompressed_data_size < 1) {\n        return 0;\n      }\n      bytes_written = (*(code *)output_buffer[9])(input_buffer, output_buffer[7], compressed_data_size, uncompressed_data_size, result);\n      uncompressed_data_size -= bytes_written;\n      compressed_data_size += bytes_written;\n    } while (bytes_written > 0);\n    *(ushort *)(output_buffer + 6) = flags | 0x40;\n    return -1;\n  }\n  *(ushort *)(output_buffer + 6) = flags | 0x800;\n  if ((output_buffer[1] < 1) && (output_buffer[15] < 1)) {\n    return 0;\n  }\n  decompressor = (code *)output_buffer[10];\n  if (decompressor == NULL) {\n    return 0;\n  }\n  flags_and_size |= (uint)output_buffer[6];\n  input_buffer_size = *input_buffer;\n  *input_buffer = 0;\n  if ((flags & 0x1000) == 0) {\n    bytes_written = (*decompressor)(input_buffer, output_buffer[7], flags_and_size & 0x1000, 1);\n    if ((bytes_written == -1) && (*input_buffer != 0)) {\n      if ((*input_buffer == 29) || (*input_buffer == 22)) {\n        *input_buffer = input_buffer_size;\n        return 0;\n      }\n      *(ushort *)(output_buffer + 6) |= 0x40;\n      return -1;\n    }\n    flags = *(ushort *)(output_buffer + 6);\n    decompressor = (code *)output_buffer[10];\n  }\n  else {\n    bytes_written = output_buffer[20];\n  }\n  if (((int)(flags_and_size << 19) < 0) && (bytes_written = bytes_written - output_buffer[1], output_buffer[12] != 0)) {\n    bytes_written = bytes_written - output_buffer[15];\n  }\n  bytes_written = (*decompressor)(input_buffer, output_buffer[7], bytes_written, 0);\n  if (bytes_written == -1) {\n    if (*input_buffer != 0) {\n      if ((*input_buffer != 29) && (*input_buffer != 22)) {\n        *(ushort *)(output_buffer + 6) |= 0x40;\n        return -1;\n      }\n      *(ushort *)(output_buffer + 6) &= 0xf7ff;\n      *output_buffer = output_buffer[4];\n      output_buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_buffer + 6) & 0xf7ff;\n    output_buffer[1] = 0;\n    *(ushort *)(output_buffer + 6) = flags;\n    *output_buffer = output_buffer[4];\n  }\n  else {\n    flags = *(ushort *)(output_buffer + 6) & 0xf7ff;\n    *output_buffer = output_buffer[4];\n    *(ushort *)(output_buffer + 6) = flags;\n    output_buffer[1] = 0;\n  }\n  if ((int)(flags_and_size << 19) < 0) {\n    output_buffer[20] = bytes_written;\n  }\nLAB_00083a00:\n  memory_block = output_buffer[12];\n  *input_buffer = input_buffer_size;\n  if (memory_block == NULL) {\n    return 0;\n  }\n  if (memory_block != output_buffer + 16) {\n    PTR_00083d9c(input_buffer);\n  }\n  output_buffer[12] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "decompress_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00082438(piVar9,param_2);\n      }\n      allocate_memory_block_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_block_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_byte_at_offset_10_000803d4",
                "param_1": "mem_address",
                "iVar1": "index",
                "is_negative": "is_negative",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c"
            },
            "code": "int check_byte_at_offset_10_000803d4(int mem_address)\n{\n  int index = 0;\n  int is_negative = (int)((uint)*(byte *)(mem_address + 10) << 0x18) < 0;\n  if (is_negative) {\n    *(short *)(mem_address + 0x54) = *(short *)(mem_address + 0x54) + 1;\n    return 0xfb;\n  }\n  while (index != 8) {\n    if (PTR_DAT_0008040c[index] == *(byte *)(mem_address + 10)) {\n      return 0;\n    }\n    index++;\n  }\n  *(short *)(mem_address + 0x54) = *(short *)(mem_address + 0x54) + 1;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_byte_at_offset_10_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "value1",
                "piVar3": "value2",
                "iVar4": "value3",
                "unaff_r6": "value4"
            },
            "code": "int process_data_0008043e(int **data)\n{\n  char result;\n  uint value1;\n  int *value2;\n  int value3;\n  uint value4;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    value1 = (**(code **)(**data + 8))();\n    value4 = value1 & 0xff;\n  }\n  value2 = (int *)thunk_get_pointer_data();\n  if (data[23] < value2) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 21) = *(short *)(data + 21) + 1;\n  }\n  else if (7 < value4) {\n    process_and_return_length(data);\n    value3 = check_byte_at_offset_10(data);\n    if (value3 == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        combine_values(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 73);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)value3;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "process_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_memory_0008160c",
                "param_1": "ptr_param_1",
                "allocate_memory_block_00081e04": "allocate_memory_block"
            },
            "code": "void reset_memory_0008160c(int *ptr_param_1)\n{\n  if (*ptr_param_1 != 0) {\n    allocate_memory_block();\n  }\n  *ptr_param_1 = 0;\n  ptr_param_1[2] = 0;\n  ptr_param_1[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_memory_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_character_00080e18",
                "param_1": "character",
                "uVar1": "mask",
                "DAT_00080e58": "PTR_DAT_00080e58"
            },
            "code": "uint8_t check_character_00080e18(uint8_t character)\n{\n    uint32_t mask;\n    if (character < 0x2d)\n    {\n        if (character < 0x20)\n        {\n            mask = 1 << (character & 0xff);\n            if ((mask & *(uint32_t *)(DAT_00080e58 + 0x18)) != mask)\n            {\n                *(uint32_t *)(DAT_00080e58 + 0x10) = mask;\n            }\n        }\n        else\n        {\n            mask = 1 << (character - 0x20 & 0xff);\n            if ((mask & *(uint32_t *)(DAT_00080e58 + 0x108)) != mask)\n            {\n                *(uint32_t *)(DAT_00080e58 + 0x100) = mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_character_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "int32_t return_zero_00081184(void) { return 0; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "return_zero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_value_from_pointer_00084298",
                "*DAT_000842a0": "value_pointer"
            },
            "code": "get_value_from_pointer_00084298() {\n  return **DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_value_to_65535_00081066",
                "param_1": "memory_address"
            },
            "code": "void set_value_to_65535_00081066(int memory_address){\n    *(undefined4 *)(memory_address + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_value_to_65535_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "check_range_00081cd0",
                "param_1": "input_value",
                "uVar1": "shift_value",
                "uVar2": "shift_diff",
                "shifted_input": "shifted_input"
            },
            "code": "uint check_range_00081cd0(uint input_value) {\n  uint shift_value;\n  uint shift_diff;\n  uint shifted_input;\n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shift_value = (input_value << 1) >> 0x18;\n  shift_diff = 0x9e - shift_value;\n  if (shift_value < 0x9f && shift_diff != 0) {\n    shifted_input = (input_value << 8 | 0x80000000) >> (shift_diff & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_input = -shifted_input;\n    }\n    return shifted_input;\n  }\n  if ((shift_diff == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_range_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "call_function_with_param_00081df4",
                "param_1": "param",
                "FUNC_00081e14": "func_with_param",
                "*DAT_00081e00": "ptr_to_func"
            },
            "code": "void call_function_with_param_00081df4(int* *DAT_00081e00, int param){\n  func_with_param(**DAT_00081e00, param);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "combine_values_00080410",
                "param_1": "start_index",
                "param_2": "shift_value",
                "param_3": "param_3",
                "param_4": "output_array",
                "bVar3": "index",
                "uVar4": "index",
                "iVar2": "current_index",
                "iVar5": "output_index",
                "uVar1": "combined_value",
                "combine_values_000815f8": "combine_values_helper"
            },
            "code": "void combine_values_00080410(int start_index, uint8_t shift_value, uint32_t param_3, uint32_t output_array[]) {\n  uint8_t index = 0;\n  while (true) {\n    if ((*(uint8_t *)(start_index + 0xb) >> 1) <= index) {\n      return;\n    }\n    uint32_t current_index = (index * 2 + 3 & 0xff) + start_index;\n    uint32_t output_index = *(uint32_t *)(start_index + 0x4c);\n    uint16_t combined_value = combine_values_00080410_helper(*(uint8_t *)(current_index + 9), *(uint8_t *)(current_index + 10), current_index, *(uint8_t *)(start_index + 0xb), shift_value);\n    *(uint16_t *)(output_index + index * 2) = combined_value;\n    index++;\n  }\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "combine_values_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flags",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080da0(int data_ptr, int data_type, int data_value, uint32_t data_flags) {\n  bool is_negative_flag = (int)(data_flags << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*PTR_FUNC_00080df8)(data_ptr, data_type, data_value);\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative_flag) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*PTR_FUNC_00080dfc)(data_ptr, data_value, data_flags, PTR_DAT_00080dfc, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*PTR_FUNC_00080e00)(data_ptr, data_value, data_type == 5, (data_flags << 0x1d) >> 0x1f, data_flags & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "calculate_checksum_and_update_data_00080258",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "data_offset",
                "uVar2": "checksum",
                "iVar3": "loop_var"
            },
            "code": "void calculate_checksum_and_update_data_00080258(int **data_ptr, uint8_t data_len, uint32_t param_3, uint32_t param_4)\n{\n  uint8_t data_offset = *(uint8_t *)((int)data_ptr + 0x49);\n  uint32_t checksum = calculate_checksum(data_ptr, data_offset, data_len, param_3, param_4);\n  *(char *)((int)data_ptr + data_offset + 9) = (char)((checksum >> 8) & 0xFF);\n  *(char *)((int)data_ptr + ((data_offset + 1) & 0xFF) + 9) = (char)(checksum & 0xFF);\n  *(uint8_t *)((int)data_ptr + 0x49) = data_offset + 2;\n  if (data_ptr[0][5] < 4) {\n    (**(code **)(**data_ptr + 4))(*data_ptr, (int)data_ptr + 9, *(undefined *)((int)data_ptr + 0x49));\n  }\n  if (data_ptr[0][6] > 1) {\n    process_data(*(uint8_t *)((int)data_ptr + 6), 1);\n  }\n  if (data_ptr[0][5] < 4) {\n    do {\n      iVar3 = (**(code **)(**data_ptr + 0xc))();\n    } while (-1 < iVar3);\n  }\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  int thunk_result = thunk_get_pointer_data();\n  data_ptr[0x17] = (int *)(thunk_result + (uint)*(ushort *)((int)data_ptr + 0x56));\n  *(short *)((int)data_ptr + 0x52) = *(short *)((int)data_ptr + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "calculate_checksum_and_update_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "check_and_update_value_00081622",
                "param_1": "value_ptr",
                "param_2": "value",
                "iVar1": "result"
            },
            "code": "int check_and_update_value_00081622(int *value_ptr, int value, undefined4 param_3, undefined4 param_4) {\n  int result = call_function_with_params(*value_ptr, value + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *value_ptr = result;\n    value_ptr[1] = value;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "check_and_update_value_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "i",
                "puVar2": "dest",
                "puVar3": "src",
                "puVar4": "byte_dest",
                "uVar5": "remaining_bytes",
                "puVar6": "byte_dest"
            },
            "code": "void reverse_copy_00082438(uint32_t *destination, uint32_t *source, uint32_t size) {\n    if (source < destination && destination < source + size) {\n        uint8_t *byte_dest = (uint8_t *)destination + size;\n        int i = size - 1;\n        if (size != 0) {\n            do {\n                byte_dest--;\n                i--;\n                *byte_dest = *(uint8_t *)(source + i);\n            } while (i != -1);\n        }\n        return;\n    }\n    if (size < 16) {\n        if (size == 0) {\n            return;\n        }\n    }\n    else if ((((uint32_t)source | (uint32_t)destination) & 3) == 0) {\n        uint32_t *dest = destination;\n        uint32_t *src = source;\n        do {\n            dest += 4;\n            *destination = *source;\n            destination[1] = source[1];\n            destination[2] = source[2];\n            destination[3] = source[3];\n            destination = dest;\n            source += 4;\n        } while (dest != (uint32_t *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n        int iterations = (size - 0x10 >> 4) + 1;\n        uint32_t remaining_bytes = size & 0xf;\n        source = source + iterations * 4;\n        destination = destination + iterations * 4;\n        uint32_t *dest = destination;\n        uint32_t *src = source;\n        if (remaining_bytes > 3) {\n            do {\n                remaining_bytes -= 4;\n                *destination = *source;\n                destination++;\n                source++;\n            } while (remaining_bytes > 3);\n            int padding = (size - 4 * (iterations + 1)) + 4;\n            destination = (uint32_t *)((int)destination + padding);\n            source = (uint32_t *)((int)source + padding);\n            remaining_bytes = size & 3;\n        }\n        size = remaining_bytes;\n        if (size == 0) {\n            return;\n        }\n    }\n    uint32_t *dest = destination;\n    do {\n        uint32_t *next_dest = dest + 1;\n        *(uint8_t *)dest = *(uint8_t *)source;\n        source = (uint32_t *)((int)source + 1);\n        dest = next_dest;\n    } while (dest != (uint32_t *)(size + (int)destination));\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_data_structure_00081508",
                "param_1": "data_structure_address",
                "param_2": "divisor",
                "param_3": "initialization_value",
                "puVar1": "data_structure_pointer",
                "iVar2": "integer_variable",
                "puVar3": "address_of_first_element"
            },
            "code": "void initialize_data_structure_00081508(int data_structure_address, uint divisor, undefined4 initialization_value) {\n  uint *data_structure_pointer;\n  int integer_variable;\n  undefined4 *address_of_first_element;\n  check_character(*(undefined4 *)(data_structure_address + 0x20));\n  address_of_first_element = *(undefined4 **)(data_structure_address + 0x18);\n  address_of_first_element[0x48] = 0x202;\n  *address_of_first_element = 0xac;\n  data_structure_pointer = PTR_DAT_00081570;\n  address_of_first_element[1] = initialization_value;\n  address_of_first_element[8] = *data_structure_pointer / divisor >> 4;\n  address_of_first_element[3] = 0xffffffff;\n  address_of_first_element[2] = 0x61;\n  *(int *)(DAT_00081574 + ((uint)(int)(char)*(byte *)(data_structure_address + 0x1c) >> 5) * 4) = 1 << (uint)(*(byte *)(data_structure_address + 0x1c) & 0x1f);\n  integer_variable = *(int *)(data_structure_address + 0x10);\n  *(undefined4 *)(integer_variable + 0x84) = 0;\n  *(undefined4 *)(integer_variable + 0x80) = 0;\n  integer_variable = *(int *)(data_structure_address + 0x14);\n  *(undefined4 *)(integer_variable + 0x84) = 0;\n  *(undefined4 *)(integer_variable + 0x80) = 0;\n  *address_of_first_element = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structure_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "result",
                "param_2": "data",
                "uVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "code": "int process_data_00083808(uint32_t *result, int *data)\n{\n  uint32_t uVar1;\n  int iVar2;\n  uint32_t uVar3;\n  uint16_t uVar4;\n  \n  if ((*PTR_DAT_000838c8 != 0) && (*(int *)(*PTR_DAT_000838c8 + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  uVar4 = *(uint16_t *)(data + 3);\n  uVar3 = (uint32_t)uVar4;\n  if ((int32_t)(uVar3 << 0x1c) < 0) {\n    iVar2 = data[4];\n  }\n  else {\n    if (-1 < (int32_t)(uVar3 << 0x1b)) {\n      *result = 9;\n      *(uint16_t *)(data + 3) = uVar4 | 0x40;\n      return -1;\n    }\n    if ((int32_t)(uVar3 << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          allocate_memory_block(result);\n          uVar4 = *(uint16_t *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      iVar2 = data[4];\n      uVar4 = uVar4 & 0xffdb;\n      *data = iVar2;\n      data[1] = 0;\n    }\n    else {\n      iVar2 = data[4];\n    }\n    *(uint16_t *)(data + 3) = uVar4 | 8;\n    uVar3 = (uint32_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    process_data_00083808(result, data);\n    uVar3 = (uint32_t)*(uint16_t *)(data + 3);\n    iVar2 = data[4];\n  }\n  uVar1 = uVar3 & 1;\n  if (uVar1 == 0) {\n    if (-1 < (int32_t)(uVar3 << 0x1e)) {\n      uVar1 = data[5];\n    }\n    data[2] = uVar1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int32_t)((uint32_t)*(uint16_t *)(data + 3) << 0x18) < 0)) {\n    *(uint16_t *)(data + 3) = *(uint16_t *)(data + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_000844c4",
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "memory_address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "memory_location",
                "1 << (param_2 & 0xff)": "bit_value"
            },
            "code": "void set_bit_at_position_0008105c(int memory_address, uint8_t bit_position) {\n    int* memory_location = (int*)(memory_address + 0x14);\n    int bit_value = 1 << (bit_position & 0xff);\n    *memory_location = bit_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "data_buffer",
                "param_2": "buffer_size",
                "param_3": "data_value",
                "param_4": "output_buffer",
                "uVar1": "result_value",
                "iVar2": "function_result",
                "pcVar3": "function_pointer",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008456c(undefined4 *data_buffer, int buffer_size, undefined4 data_value, undefined4 *output_buffer)\n{\n  undefined4 result_value;\n  int function_result;\n  code *function_pointer;\n  undefined stack_buffer[12];\n  \n  if (buffer_size == 0) {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    result_value = get_data_value_00084290();\n    function_result = (*function_pointer)(data_buffer, stack_buffer, 0, result_value, output_buffer);\n  }\n  else {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    result_value = get_data_value_00084290();\n    function_result = (*function_pointer)(data_buffer, buffer_size, data_value, result_value, output_buffer);\n  }\n  if (function_result == -1) {\n    *output_buffer = 0;\n    *data_buffer = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_flag_at_offset_000811b4",
                "param_1": "offset",
                "param_2": "flag",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(offset + 4)"
            },
            "code": "int set_flag_at_offset_000811b4(int offset, int flag) {\n  *(int *)(offset + 4) = flag;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_flag_at_offset_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_dat_offset_to_0x8000_000816d4",
                "DAT_000816dc": "dat_offset"
            },
            "code": "void set_dat_offset_to_0x8000_000816d4(void)\n{\n  *(undefined4 *)(DAT_000816dc + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_dat_offset_to_0x8000_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = process_data_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_block_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = decompress_data(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_char_in_buffer_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = decompress_data(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = decompress_data(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083adc",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008234c",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1": "parameters",
                "param_2": "new_value",
                "param_3": "is_param_5_zero",
                "param_4": "is_param_4_zero",
                "param_5": "is_param_3_zero",
                "param_1[0x11]": "parameters[17]",
                "param_1[0x18]": "parameters[24]",
                "param_1[0x19]": "parameters[25]",
                "param_1[0x15]": "parameters[21]",
                "param_1[0x14]": "parameters[20]",
                "param_1[0xd]": "parameters[13]",
                "param_1[0xc]": "parameters[12]"
            },
            "code": "void update_parameters_00080d7a(int *parameters, int new_value, int is_param_5_zero, int is_param_4_zero, int is_param_3_zero){\n  parameters[17] = new_value;\n  if (is_param_5_zero == 0) {\n    parameters[24] = new_value;\n  }\n  else {\n    parameters[25] = new_value;\n  }\n  if (is_param_4_zero == 0) {\n    parameters[21] = new_value;\n  }\n  else {\n    parameters[20] = new_value;\n  }\n  if (is_param_3_zero == 0) {\n    parameters[13] = new_value;\n  }\n  else {\n    parameters[12] = new_value;\n  }\n  parameters[4] = new_value;\n  *parameters = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "update_parameters_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_00080e9c",
                "puVar1": "status_register",
                "iVar2": "control_register",
                "DAT_00080f08": "system_status_register_address",
                "*DAT_00080f08": "system_status_register_initial_value",
                "DAT_00080f0c": "system_control_register_address",
                "*(int *)(DAT_00080f0c + 0x20)": "system_control_register_value_1",
                "DAT_00080f14": "system_control_register_value_1",
                "*(int *)(iVar2 + 0x68)": "*timer_register",
                "*(undefined4 *)(iVar2 + 0x20)": "system_control_register_value_2",
                "DAT_00080f10": "system_control_register_value_2",
                "*(unsigned int *)(DAT_00080f0c + 0x30)": "system_interrupt_control_register",
                "system_interrupt_control_register & 0xfffffffc | 1": "system_interrupt_control_register_masked_value",
                "*(undefined4 *)(DAT_00080f0c + 0x28)": "system_control_register_value_3",
                "DAT_00080f18": "system_control_register_value_3",
                "*DAT_00080f20": "system_interrupt_register_address",
                "DAT_00080f1c": "system_interrupt_register_initial_value"
            },
            "code": "void initialize_system_00080e9c(void)\n{\n  int *status_register = (int *)(DAT_00080f08);\n  int *control_register = (int *)(DAT_00080f0c);\n  int *timer_register = (int *)(system_timer_register_address);\n\n  *status_register = *DAT_00080f08;\n  *(control_register + 0x80) = system_control_register_initial_value;\n\n  if (*timer_register << 7 > -1) {\n    *(control_register + 0x20) = *(int *)(DAT_00080f0c + 0x20);\n    while (*timer_register << 0x1f > -1);\n  }\n  *(control_register + 0x20) = DAT_00080f10;\n  while (*timer_register << 0xf > -1);\n  *(unsigned int *)(DAT_00080f0c + 0x30) = (*(unsigned int *)(DAT_00080f0c + 0x30) & 0xfffffffc) | 1;\n  while (*timer_register << 0x1c > -1);\n  *(control_register + 0x28) = *(undefined4 *)(DAT_00080f0c + 0x28);\n  while (*timer_register << 0x1e > -1);\n  *(unsigned int *)(DAT_00080f0c + 0x30) = 0x11;\n  while (*timer_register << 0x1c > -1);\n  *(unsigned int *)(DAT_00080f0c + 0x30) = 0x12;\n  while (*timer_register << 0x1c > -1);\n  **DAT_00080f20 = DAT_00080f1c;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_system_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "data",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data_short",
                "puVar2": "data_ptr",
                "iVar3": "byte_count",
                "uVar4": "data_ushort"
            },
            "code": "void process_data_00084464(int *result, int data, undefined4 arg1, undefined4 arg2) {\n  short data_short = *(short *)(data + 0xe);\n  ushort data_ushort = *(ushort *)(data + 0xc);\n  if ((int)((uint)data_ushort << 0x17) < 0) {\n    process_result(result, (int)data_short, 0, 2);\n    data_ushort = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = data_ushort & 0xefff;\n  undefined *data_ptr = PTR_DAT_000845fc;\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  int byte_count = count_bytes((int)data_short, arg1, arg2, arg2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((byte_count == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_code_000811ae"
            },
            "code": "int32_t return_error_code_000811ae(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input_value",
                "puVar1": "data_pointer",
                "iVar2": "current_sum"
            },
            "code": "int calculate_sum_0008118c(int input_value)\n{\n  undefined *data_pointer;\n  int current_sum;\n  data_pointer = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  current_sum = *(int *)data_pointer;\n  *(int *)data_pointer = input_value + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "calculate_sum_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_in_word_00082a50",
                "param_1": "word",
                "iVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "current_word",
                "bVar4": "is_zero_byte"
            },
            "code": "int count_bytes_in_word_00082a50(uint32_t word){\n    int byte_count = 0;\n    uint32_t *word_ptr = (uint32_t *)(word & 0xfffffffc);\n    int offset = -(word & 3);\n    uint32_t current_word = *word_ptr;\n    \n    if ((word & 3) != 0) {\n        current_word |= 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n    }\n    \n    while (word_ptr++, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n        offset += 4;\n        current_word = *word_ptr;\n    }\n    \n    bool is_zero_byte = (current_word & 0xff) == 0;\n    if (!is_zero_byte) {\n        offset += 1;\n        is_zero_byte = (current_word & 0xff00) == 0;\n    }\n    if (!is_zero_byte) {\n        offset += 1;\n        is_zero_byte = (current_word & 0xff0000) == 0;\n    }\n    if (!is_zero_byte) {\n        offset += 1;\n    }\n    return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "count_bytes_in_word_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "obj_ptr",
                "param_2": "new_value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(obj_ptr + 0x28)"
            },
            "code": "void set_param_value_0008106e(int obj_ptr, int new_value) {\n  *(int *)(obj_ptr + 0x28) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_param_value_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "calculate_result": "calculate_result",
                "FUN_000811c2": "calculate_result_000811c2"
            },
            "code": "int calculate_result_000811c2() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "calculate_result_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "return_zero_000811c6"
            },
            "code": "int return_zero_000811c6(void)\n{\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "return_zero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "calculate_and_set_value_of_param_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "var1",
                "puVar2": "ptr1",
                "iVar3": "var2",
                "uVar4": "var3",
                "iVar5": "var4"
            },
            "code": "undefined4 calculate_and_set_value_of_param_00083d00(int param1, int param2)\n{\n    int var1;\n    undefined *ptr1;\n    int var2;\n    uint32_t var3;\n    int var4;\n    var1 = DAT_00083d90;\n    do_nothing_00082598();\n    var3 = *(uint *)(*(int *)(var1 + 8) + 4) & 0xfffffffc;\n    var4 = ((var3 - param2) + 0xfef & 0xfffff000) - 0x1000;\n    if (0xfff < var4)\n    {\n        int var5 = calculate_sum_and_set_if_valid_00082970(param1, 0);\n        if (var5 == *(int *)(var1 + 8) + var3)\n        {\n            int var6 = calculate_sum_and_set_if_valid_00082970(param1, -var4);\n            ptr1 = PTR_DAT_00083d94;\n            if (var6 != -1)\n            {\n                var6 = *(int *)PTR_DAT_00083d94;\n                *(uint *)(*(int *)(var1 + 8) + 4) = var3 - var4 | 1;\n                *(int *)ptr1 = var6 - var4;\n                do_nothing_0008259c(param1);\n                return 1;\n            }\n            var4 = calculate_sum_and_set_if_valid_00082970(param1, 0);\n            ptr1 = PTR_DAT_00083d94;\n            var3 = var4 - *(int *)(var1 + 8);\n            if (0xf < (int)var3)\n            {\n                var6 = *DAT_00083d98;\n                *(uint *)(*(int *)(var1 + 8) + 4) = var3 | 1;\n                *(int *)ptr1 = var4 - var6;\n            }\n        }\n    }\n    do_nothing_0008259c(param1);\n    return 0;\n}",
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "calculate_and_set_value_of_param_00083d00"
        }
    },
    "used_tokens": 93307,
    "layers": [
        [
            "FUN_00081042",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_00080f9c",
            "FUN_00081454",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080d2e",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "thunk_FUN_00081714",
            "FUN_00081714",
            "FUN_0008477c",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081d5c",
            "FUN_000811be",
            "FUN_000825a0",
            "FUN_000811cc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_000803d4",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080da0",
            "FUN_00082438",
            "FUN_0008105c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6"
        ],
        [
            "FUN_00080ce0",
            "FUN_00083b14",
            "FUN_00081210",
            "FUN_00084728",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00081c5c",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00084750",
            "FUN_00082970",
            "FUN_000815d4",
            "FUN_000846dc",
            "FUN_00080410",
            "FUN_00081622",
            "FUN_00081508",
            "FUN_0008456c"
        ],
        [
            "FUN_00081c94",
            "FUN_000842a4",
            "FUN_00080c0c",
            "FUN_00081318",
            "FUN_0008449c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00084464",
            "FUN_00083d00"
        ],
        [
            "FUN_00083d9c",
            "FUN_00081ca8",
            "FUN_000801b0",
            "FUN_00080ae4",
            "FUN_00080164",
            "FUN_00080258"
        ],
        [
            "FUN_000816a8",
            "FUN_00081e04",
            "FUN_00083adc"
        ],
        [
            "FUN_00081682",
            "FUN_000846a4",
            "FUN_00083c40",
            "FUN_0008378c"
        ],
        [
            "FUN_00082ac0",
            "FUN_00080a68"
        ]
    ],
    "locked_functions": []
}