{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000800f4": {
                    "1": "initialize_variable",
                    "20": "initialize_flag",
                    "2": "set_flag_if_not_set"
                },
                "param_1": {
                    "13": "input",
                    "1": "flag_value",
                    "10": "input_value",
                    "3": "value",
                    "2": "input_param"
                },
                "DAT_2007089c": {
                    "15": "flag",
                    "1": "flag_variable"
                }
            }
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initialize_data_00080164(int **data_pointer)\n\n{\n  int return_value;\n  \n  *data_pointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data_pointer + 6)) {\n    update_function(*(byte *)((int)data_pointer + 6),1);\n    update_parameter(*(undefined *)((int)data_pointer + 6),0);\n  }\n  do {\n    return_value = (**(code **)(**data_pointer + 0xc))();\n  } while (-1 < return_value);\n  *(undefined *)((int)data_pointer + 0x49) = 0;\n  *(undefined *)((int)data_pointer + 0x4a) = 0;\n  *(undefined2 *)(data_pointer + 0x15) = 0;\n  *(undefined2 *)((int)data_pointer + 0x52) = 0;\n  *(undefined2 *)(data_pointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data_pointer",
                "iVar1": "return_value",
                "update_function_00081210": "update_function",
                "update_parameter_00081318": "update_parameter"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080164": {
                    "1": "initialize_function",
                    "3": "initialize_data_structure",
                    "4": "initialize_data_structures",
                    "21": "initialize_data"
                },
                "param_1": {
                    "6": "data",
                    "1": "param",
                    "3": "data_structure",
                    "4": "data_ptr",
                    "10": "data_pointer"
                },
                "iVar1": {
                    "1": "loop_variable",
                    "11": "result",
                    "16": "return_value",
                    "2": "loop_result"
                },
                "update_function_00081210": {
                    "1": "update_value",
                    "9": "update_function"
                },
                "update_parameter_00081318": {
                    "10": "update_parameter",
                    "1": "update_parameter_b"
                },
                "DAT_20070b60": {
                    "1": "data"
                },
                "*(byte *)((int)param_1 + 6)": {
                    "1": "param_value"
                },
                "(**param_1)": {
                    "1": "data_func"
                },
                "(**param_1 + 0xc)": {
                    "1": "sub_function"
                }
            }
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint process_data_000801b0(int **data)\n\n{\n  bool is_overflow;\n  undefined result;\n  char counter;\n  int return_value;\n  byte byte_value;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameter(*(byte *)((int)data + 6),0);\n  }\n  is_overflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (return_value = (**(func_pointer1 **)(**data + 8))(), return_value != 0) {\n      byte_value = *(byte *)((int)data + 0x49);\n      result = (**(func_pointer1 **)(**data + 0xc))();\n      counter = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + byte_value + 9) = result;\n      byte_value = counter + 1;\n      *(byte *)((int)data + 0x49) = byte_value;\n      if (0x3f < byte_value) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_overflow) {\n    counter = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)data + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "result",
                "cVar3": "counter",
                "iVar4": "return_value",
                "bVar5": "byte_value",
                "update_parameter_00081318": "update_parameter",
                "code": "func_pointer1"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000801b0": {
                    "6": "process_parameter",
                    "1": "update_and_count_chars",
                    "21": "process_data"
                },
                "param_1": {
                    "2": "param",
                    "16": "data",
                    "1": "input_data",
                    "3": "parameter"
                },
                "bVar1": {
                    "1": "is_max_reached",
                    "4": "exceeded_limit",
                    "2": "overflow_flag",
                    "18": "is_overflow"
                },
                "uVar2": {
                    "1": "new_data",
                    "6": "updated_value",
                    "2": "parameter_value",
                    "9": "result"
                },
                "cVar3": {
                    "3": "char_value",
                    "1": "overflow_count",
                    "5": "count",
                    "14": "counter",
                    "2": "current_value"
                },
                "iVar4": {
                    "13": "result",
                    "18": "return_value"
                },
                "bVar5": {
                    "1": "char_index",
                    "3": "count",
                    "2": "current_index",
                    "5": "index",
                    "6": "byte_value"
                },
                "update_parameter_00081318": {
                    "3": "update_parameter"
                },
                "**param_1": {
                    "1": "pointer_to_pointer"
                },
                "code": {
                    "1": "func_pointer1"
                },
                "8": {
                    "1": "offset1"
                },
                "0xc": {
                    "1": "offset2"
                },
                "**(code **)(**param_1 + 8)": {
                    "1": "funcptr1"
                },
                "**(code **)(**param_1 + 0xc)": {
                    "1": "funcptr2"
                },
                "PTR_x": {
                    "1": "ptr_x"
                },
                "DAT_y": {
                    "1": "dat_y"
                }
            }
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int start_address,uint data_length)\n\n{\n  int current_address;\n  uint checksum;\n  char bit_counter;\n  uint bit_value;\n  \n  checksum = 0xffff;\n  for (current_address = start_address; (current_address - start_address & 0xffU) < data_length; current_address = current_address + 1) {\n    checksum = checksum ^ *(byte *)(current_address + 9);\n    bit_counter = '\\b';\n    do {\n      bit_value = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_value != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_address",
                "param_2": "data_length",
                "iVar1": "current_address",
                "uVar2": "checksum",
                "cVar3": "bit_counter",
                "uVar4": "bit_value"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008021c": {
                    "3": "reverse_checksum",
                    "1": "crc_calculation",
                    "24": "calculate_checksum"
                },
                "param_1": {
                    "2": "data",
                    "1": "input_pointer",
                    "6": "data_start",
                    "4": "data_address",
                    "9": "start_address",
                    "3": "data_start_index"
                },
                "param_2": {
                    "1": "size",
                    "2": "input_length",
                    "14": "data_length",
                    "10": "length"
                },
                "iVar1": {
                    "14": "current_address",
                    "11": "current_index",
                    "1": "current_position",
                    "2": "index"
                },
                "uVar2": {
                    "1": "crc_value",
                    "2": "result",
                    "23": "checksum"
                },
                "cVar3": {
                    "10": "bit_count",
                    "1": "shift_count",
                    "3": "counter"
                },
                "uVar4": {
                    "1": "lsb_bit",
                    "14": "bit_value",
                    "9": "bit",
                    "2": "lsb"
                },
                "uVar2 ^ *(byte *)(iVar1 + 9)": {
                    "2": "xor_result",
                    "1": "byte_xor"
                },
                "uVar2 ^ 0xa001": {
                    "1": "xor_value"
                },
                "uVar2_temp": {
                    "1": "temp_checksum"
                },
                "cVar3 + -1": {
                    "1": "bit_counter_decrement"
                },
                "uVar2 & 0xff": {
                    "2": "lower_byte",
                    "1": "checksum_lower_byte"
                },
                "uVar2 >> 8": {
                    "2": "upper_byte",
                    "1": "checksum_upper_byte"
                },
                "uVar2 & 1": {
                    "1": "bit_masked_checksum"
                },
                "uVar2 >> 1": {
                    "1": "shifted_checksum"
                },
                "(uVar2 & 0xff) << 8 | uVar2 >> 8": {
                    "1": "reversed_checksum"
                }
            }
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_parameters_00080258",
            "code": "\nvoid update_checksum_and_parameters_00080258(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byte_value;\n  undefined2 checksum;\n  int result;\n  uint byte_value_converted;\n  \n  byte_value = *(byte *)((int)data + 0x49);\n  byte_value_converted = (uint)byte_value;\n  checksum = calculate_checksum(data,byte_value_converted,param3,param4,param4);\n  *(char *)((int)data + byte_value_converted + 9) = (char)((ushort_value)checksum >> 8);\n  *(char *)((int)data + (byte_value_converted + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)data + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameter(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameter(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = get_global_variable();\n  data[0x17] = (int *)(result + (uint)*(ushort_value *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_parameters_00080258",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byte_value",
                "uVar2": "checksum",
                "iVar3": "result",
                "uVar4": "byte_value_converted",
                "update_parameter_00081318": "update_parameter",
                "get_global_variable_thunk_00081714": "get_global_variable",
                "calculate_checksum_0008021c": "calculate_checksum",
                "ushort": "ushort_value"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080258": {
                    "9": "update_checksum",
                    "1": "calculate_checksum",
                    "4": "calculate_checksum_and_update",
                    "2": "update_checksum_and_variables",
                    "10": "update_checksum_and_parameters"
                },
                "param_1": {
                    "1": "param",
                    "10": "data",
                    "3": "parameter",
                    "2": "input_data"
                },
                "param_2": {
                    "24": "param2",
                    "1": "param_a",
                    "2": "param_2"
                },
                "param_3": {
                    "3": "param_3",
                    "1": "param_b",
                    "25": "param3"
                },
                "param_4": {
                    "3": "param_4",
                    "25": "param4",
                    "1": "param_c"
                },
                "bVar1": {
                    "2": "byte_var",
                    "1": "current_byte",
                    "6": "checksum_byte",
                    "17": "byte_value",
                    "4": "byte_val"
                },
                "uVar2": {
                    "2": "checksum_value",
                    "1": "partial_checksum",
                    "27": "checksum"
                },
                "iVar3": {
                    "1": "iteration_count",
                    "9": "return_value",
                    "15": "result"
                },
                "uVar4": {
                    "1": "byte_value_uint",
                    "2": "byte_value_as_uint",
                    "3": "byte_value_converted"
                },
                "update_parameter_00081318": {
                    "5": "update_parameter"
                },
                "get_global_variable_thunk_00081714": {
                    "1": "get_global_variable_thunk",
                    "4": "get_global_variable"
                },
                "calculate_checksum_0008021c": {
                    "5": "calculate_checksum"
                },
                "ushort": {
                    "1": "ushort_value"
                },
                "inputData[0x17]": {
                    "1": "global_variable"
                },
                "*(ushort *)((int)inputData + 0x56)": {
                    "1": "offset_value"
                }
            }
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_parameters_000802da",
            "code": "\nint validate_parameters_000802da(int input_buffer,uint value1,uint value2,ushort *data)\n\n{\n  char result;\n  byte temp_byte;\n  undefined temp_value;\n  ushort ushort_var;\n  uint temp_uint;\n  ushort *temp_ptr;\n  undefined temp1;\n  undefined temp2;\n  ushort temp3;\n  \n  temp1 = (undefined)value1;\n  temp2 = (undefined)(value1 >> 8);\n  temp3 = (ushort)value2;\n  temp_uint = value2 & 0xffff;\n  if (*(char *)(input_buffer + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(input_buffer + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((value1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(input_buffer + 9) = temp1;\n  *(undefined *)(input_buffer + 10) = temp2;\n  *(ushort **)(input_buffer + 0x4c) = data;\n  *(char *)(input_buffer + 0xb) = (char)(value1 >> 0x18);\n  *(char *)(input_buffer + 0xc) = (char)(value1 >> 0x10);\n  temp_value = (undefined)(value2 >> 8);\n  switch(temp2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(input_buffer + 0xd) = temp_value;\n    break;\n  case 5:\n    ushort_var = *data;\n    if (ushort_var != 0) {\n      ushort_var = 1;\n    }\n    *(char *)(input_buffer + 0xd) = -(char)ushort_var;\n    temp_uint = 0;\n    break;\n  case 6:\n    *(char *)(input_buffer + 0xd) = (char)(*data >> 8);\n    temp_uint = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    temp_byte = (byte)(temp3 >> 3) & 0xfe;\n    if ((value2 & 0xf) != 0) {\n      temp_byte = temp_byte + 1;\n    }\n    *(char *)(input_buffer + 0xe) = (char)value2;\n    *(undefined *)(input_buffer + 0xd) = temp_value;\n    *(byte *)(input_buffer + 0xf) = temp_byte;\n    temp_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(input_buffer + 0xd) = temp_value;\n    *(char *)(input_buffer + 0xe) = (char)value2;\n    data = data + -1;\n    *(char *)(input_buffer + 0xf) = (char)temp_uint * '\\x02';\n    *(undefined *)(input_buffer + 0x49) = 7;\n    temp_ptr = data + temp_uint;\n    while (data != temp_ptr) {\n      temp_byte = *(byte *)(input_buffer + 0x49);\n      *(char *)(input_buffer + (uint)temp_byte + 9) = (char)(data[1] >> 8);\n      temp_uint = temp_byte + 1 & 0xff;\n      *(char *)(input_buffer + 0x49) = (char)temp_uint;\n      data = data + 1;\n      *(char *)(temp_uint + input_buffer + 9) = (char)*data;\n      *(byte *)(input_buffer + 0x49) = temp_byte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(input_buffer + 0xe) = (char)temp_uint;\n  temp_value = 6;\nLAB_0008034a:\n  *(undefined *)(input_buffer + 0x49) = temp_value;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_parameters(input_buffer);\n  *(undefined *)(input_buffer + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_parameters_000802da",
                "param_1": "input_buffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "cVar1": "result",
                "bVar2": "temp_byte",
                "uVar3": "temp_value",
                "uVar4": "ushort_var",
                "uVar5": "temp_uint",
                "puVar6": "temp_ptr",
                "local_1c": "temp1",
                "local_1b": "temp2",
                "local_18": "temp3",
                "update_checksum_and_parameters_00080258": "update_checksum_and_parameters"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000802da": {
                    "1": "update_data",
                    "2": "update_parameters",
                    "3": "initialize_data",
                    "7": "validate_parameters"
                },
                "param_1": {
                    "4": "input_buffer",
                    "1": "data_structure",
                    "2": "buffer",
                    "3": "data_address"
                },
                "param_2": {
                    "3": "flags",
                    "1": "input_param",
                    "4": "config_value",
                    "8": "value1"
                },
                "param_3": {
                    "1": "second_param",
                    "2": "data_size",
                    "5": "value",
                    "3": "length",
                    "8": "value2"
                },
                "param_4": {
                    "11": "data",
                    "4": "data_ptr",
                    "2": "buffer",
                    "1": "array1",
                    "3": "data_pointer"
                },
                "cVar1": {
                    "14": "result",
                    "5": "return_value",
                    "1": "error",
                    "11": "error_code"
                },
                "bVar2": {
                    "9": "byte_var",
                    "1": "temp",
                    "10": "temp_byte",
                    "8": "byte_value",
                    "3": "byte_val"
                },
                "uVar3": {
                    "1": "temp2",
                    "7": "temp_value",
                    "5": "undefined_var",
                    "2": "temp_byte2",
                    "3": "temp_undefined"
                },
                "uVar4": {
                    "4": "temp_ushort",
                    "1": "temp_variable2",
                    "2": "temp_u_short",
                    "5": "ushort_var",
                    "3": "temp_value2"
                },
                "uVar5": {
                    "1": "updated_param_3_value",
                    "5": "uint_var",
                    "2": "temp_value3",
                    "4": "temp3"
                },
                "puVar6": {
                    "1": "ptr_data",
                    "2": "ushort_ptr",
                    "7": "temp_pointer",
                    "3": "ushort_pointer"
                },
                "local_1c": {
                    "2": "byte1",
                    "1": "value1_low_byte",
                    "3": "temp1"
                },
                "local_1b": {
                    "1": "upper_byte_param_value_1",
                    "2": "param2_high",
                    "3": "temp2"
                },
                "local_18": {
                    "1": "temp_value3",
                    "2": "temp3"
                },
                "new_parameter_name_1": {
                    "1": "first_param"
                },
                "new_parameter_name_2": {
                    "1": "second_param"
                },
                "new_parameter_name_n": {
                    "1": "data_array"
                },
                "new_variable_name_1": {
                    "1": "lower_byte_first_param"
                },
                "new_variable_name_2": {
                    "1": "upper_byte_first_param"
                },
                "new_variable_name_n": {
                    "1": "lower_word_second_param"
                },
                "update_checksum_and_parameters_00080258": {
                    "1": "update_checksum_and_parameters"
                }
            }
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 check_and_update_value_000803d4(int input_value)\n\n{\n  int index;\n  \n  if ((int)((uint)*(check_value *)(input_value + 10) << 0x18) < 0) {\n    *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(check_value *)(input_value + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "input_value",
                "iVar1": "index",
                "byte": "check_value"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000803d4": {
                    "6": "check_and_update_value",
                    "1": "check_and_increment_value",
                    "2": "check_and_increment",
                    "3": "check_byte_value"
                },
                "param_1": {
                    "10": "input",
                    "3": "data",
                    "11": "input_value",
                    "1": "input_param",
                    "5": "value"
                },
                "iVar1": {
                    "2": "i",
                    "27": "index"
                },
                "*(byte *)(param_1 + 10)": {
                    "4": "value",
                    "7": "byte_value",
                    "1": "byte_val"
                },
                "&DAT_00084d10": {
                    "1": "comparison_array",
                    "3": "data_array",
                    "2": "byte_array"
                },
                "*(short *)(param_1 + 0x54)": {
                    "1": "counter_value",
                    "11": "counter"
                },
                "param_1 + 10": {
                    "1": "data_offset"
                },
                "10": {
                    "1": "offset"
                },
                "0x18": {
                    "1": "shift"
                },
                "0xfb": {
                    "1": "failure_return_value"
                },
                "0x54": {
                    "2": "counter"
                },
                "DAT_00084d10": {
                    "1": "byte_array"
                },
                "byte": {
                    "1": "check_value"
                },
                "(uint)*(byte *)(param_1 + 10) << 0x18": {
                    "1": "shifted_byte_value"
                },
                "short * (param_1 + 0x54)": {
                    "1": "value_pointer"
                },
                "0": {
                    "1": "success_code"
                },
                "8": {
                    "1": "array_size"
                },
                "*PTR_0008435c": {
                    "1": "byte_array"
                }
            }
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid process_data_00080410(int data_address,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combined_value;\n  int offset;\n  byte counter;\n  uint converted_counter;\n  int array_address;\n  \n  counter = 0;\n  while( true ) {\n    converted_counter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data_address + 0xb) >> 1 <= converted_counter) break;\n    offset = (converted_counter * 2 + 3 & 0xff) + data_address;\n    array_address = *(int *)(data_address + 0x4c);\n    combined_value = combine_values_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(data_address + 0xb),param4);\n    *(undefined2 *)(array_address + converted_counter * 2) = combined_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combined_value",
                "iVar2": "offset",
                "bVar3": "counter",
                "uVar4": "converted_counter",
                "iVar5": "array_address"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080410": {
                    "1": "extract_values_and_combine",
                    "3": "process_values",
                    "16": "process_data",
                    "2": "convert_values"
                },
                "param_1": {
                    "1": "array_address",
                    "2": "data_pointer",
                    "3": "input_data",
                    "4": "data_ptr",
                    "9": "data_address"
                },
                "param_2": {
                    "15": "param2",
                    "1": "value_2",
                    "5": "value1",
                    "2": "param_2"
                },
                "param_3": {
                    "15": "param3",
                    "1": "value_3",
                    "2": "param_3",
                    "5": "value2"
                },
                "param_4": {
                    "1": "var2",
                    "15": "param4",
                    "2": "input_value",
                    "5": "value3"
                },
                "uVar1": {
                    "31": "combined_value"
                },
                "iVar2": {
                    "2": "updated_index",
                    "1": "current_value",
                    "3": "modified_address",
                    "9": "offset",
                    "4": "index"
                },
                "bVar3": {
                    "1": "byte_index",
                    "2": "count",
                    "21": "counter",
                    "3": "index"
                },
                "uVar4": {
                    "1": "byte_value",
                    "8": "converted_counter",
                    "2": "current_index",
                    "3": "index"
                },
                "iVar5": {
                    "1": "array_index",
                    "2": "array_ptr",
                    "11": "array_address"
                }
            }
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint process_data_0008043e(int **data)\n\n{\n  char result;\n  uint function_result;\n  int *global_variable;\n  int check_result;\n  uint value;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    function_result = (**(code **)(**data + 8))();\n    value = function_result & 0xff;\n  }\n  global_variable = (int *)get_global_variable();\n  if (data[0x17] < global_variable) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < value) {\n    process_data_0008043e(data);\n    check_result = check_and_update_value(data);\n    if (check_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        process_data_0008043e2(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "function_result",
                "piVar3": "global_variable",
                "iVar4": "check_result",
                "unaff_r6": "value",
                "process_data_000801b0": "process_data",
                "check_and_update_value_000803d4": "check_and_update_value",
                "process_data_00080410": "process_data2",
                "get_global_variable_thunk_00081714": "get_global_variable"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008043e": {
                    "1": "check_input_data",
                    "16": "process_data",
                    "2": "check_and_update_data",
                    "3": "process_function"
                },
                "param_1": {
                    "11": "data",
                    "1": "param",
                    "5": "data_ptr",
                    "3": "input_array",
                    "7": "input_data"
                },
                "cVar1": {
                    "6": "return_value",
                    "1": "output",
                    "22": "result"
                },
                "uVar2": {
                    "8": "return_value",
                    "1": "callback_result",
                    "9": "function_result",
                    "5": "result"
                },
                "piVar3": {
                    "1": "global_value",
                    "8": "global_var",
                    "21": "global_variable"
                },
                "iVar4": {
                    "5": "check_value",
                    "1": "result",
                    "2": "value_check",
                    "20": "check_result"
                },
                "unaff_r6": {
                    "2": "byte_value",
                    "1": "parameter_value",
                    "6": "value"
                },
                "process_data_000801b0": {
                    "2": "process_data_helper",
                    "7": "process_data"
                },
                "check_and_update_value_000803d4": {
                    "9": "check_and_update_value"
                },
                "process_data_00080410": {
                    "2": "process_data_again",
                    "1": "process_data_sub",
                    "3": "process_data2"
                },
                "get_global_variable_thunk_00081714": {
                    "2": "get_global_variable"
                }
            }
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int updated_value;\n  \n  update_function(1,0);\n  update_function(6,1);\n  update_function(0,1);\n  update_function(1,1);\n  update_parameter(0,0);\n  update_parameter(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_data(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_variable();\n  updated_value = get_global_variable();\n  DAT_200709e0 = updated_value + 1000;\n  updated_value = get_global_variable();\n  DAT_20070a48 = updated_value + 1000;\n  updated_value = get_global_variable();\n  DAT_20070934 = updated_value + 1000;\n  updated_value = get_global_variable();\n  DAT_200708c0 = updated_value + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    perform_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "update_function_00081210": "update_function",
                "update_parameter_00081318": "update_parameter",
                "initialize_data_00080164": "initialize_data",
                "get_global_variable_thunk_00081714": "get_global_variable",
                "software_interrupt": "perform_software_interrupt",
                "iVar1": "updated_value"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000804a8": {
                    "1": "initialize_system_settings",
                    "3": "initialize_and_configure",
                    "8": "initialize_system",
                    "5": "initialize_and_update",
                    "6": "initialize_and_update_data"
                },
                "update_function_00081210": {
                    "30": "update_function",
                    "1": "update_function_parameter"
                },
                "update_parameter_00081318": {
                    "30": "update_parameter",
                    "1": "update_parameter_value"
                },
                "initialize_data_00080164": {
                    "31": "initialize_data"
                },
                "get_global_variable_thunk_00081714": {
                    "6": "get_global_variable_thunk",
                    "1": "get_variable_value",
                    "23": "get_global_variable"
                },
                "software_interrupt": {
                    "1": "interrupt",
                    "2": "handle_software_interrupt",
                    "11": "perform_software_interrupt",
                    "10": "trigger_software_interrupt"
                },
                "iVar1": {
                    "1": "ret_value"
                }
            }
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid process_data_000805d0(void)\n\n{\n  uint global_var1;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int temp_var;\n  uint *ptr_var1;\n  undefined4 *ptr_var2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    global_var1 = get_global_variable();\n    if (DAT_200708c8 < global_var1) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = calculate_result(DAT_200708d8);\n      DAT_2007094c = count_leading_zeros(DAT_200708da / 10);\n      DAT_200709c4 = calculate_result(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable();\n    }\n    break;\n  case '\\x03':\n    process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr_var2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_parameters(&DAT_200709e4,*ptr_var2,ptr_var2[1],ptr_var2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_data_000805d0(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr_var2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_variable();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr_var1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr_var1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (global_var1 = get_global_variable(), DAT_200708c0 < global_var1))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      temp_var = get_global_variable();\n      DAT_200708c0 = temp_var + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      global_var1 = get_global_variable();\n      if (DAT_200708c0 < global_var1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var = get_global_variable();\n        DAT_200708c0 = temp_var + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr_var1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      global_var1 = get_global_variable();\n      if (DAT_200708c0 < global_var1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var = get_global_variable();\n        DAT_200708c0 = temp_var + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  global_var1 = get_global_variable();\n  if (DAT_200709e0 < global_var1) {\n    result1 = count_leading_zeros(DAT_20070940);\n    result2 = calculate_float(result1,DAT_200709c8);\n    result1 = DAT_200708c4;\n    DAT_20070930 = result2;\n    result3 = calculate_float_00081734(result2,DAT_200708c4);\n    result3 = calculate_floating_point(result3,DAT_2007094c);\n    result3 = calculate_float_00081734(result3,DAT_20070914);\n    DAT_2007094c = result3;\n    result1 = calculate_float(result2,result1);\n    result1 = calculate_floating_point(result1,DAT_200709c4);\n    result1 = calculate_float(result1,DAT_2007096c);\n    DAT_200709c4 = result1;\n    result4 = calculate_floating_point(result2,DAT_20070a4c);\n    result4 = calculate_float_00081734(result4,result3);\n    calculate_float_00081734(result4,result1);\n    DAT_20070910 = convert_to_signed_integer();\n    DAT_2007091c = count_leading_zeros();\n    DAT_2007092c = 0;\n    DAT_200708c4 = result2;\n    DAT_20070914 = result3;\n    DAT_2007096c = result1;\n    temp_var = get_global_variable();\n    DAT_200709e0 = temp_var + DAT_20070970;\n  }\n  result1 = count_leading_zeros(DAT_20070970);\n  temp_var = check_concatenation_result(DAT_2007091c,result1);\n  if (temp_var != 0) {\n    DAT_2007091c = result1;\n  }\n  temp_var = check_concatenation_result(DAT_2007091c,0);\n  if (temp_var != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = reverse_bits(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "global_var1",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "iVar6": "temp_var",
                "puVar7": "ptr_var1",
                "puVar8": "ptr_var2",
                "validate_parameters_000802da": "validate_parameters",
                "calculate_result_00081894": "calculate_result",
                "count_leading_zeros_0008189c": "count_leading_zeros",
                "get_global_variable_thunk_00081714": "get_global_variable",
                "process_data_0008043e": "process_data",
                "calculate_float_00081730": "calculate_float",
                "calculate_floating_point_00081944": "calculate_floating_point",
                "convert_to_signed_integer_00081cd0": "convert_to_signed_integer",
                "check_concatenation_result_00081ca8": "check_concatenation_result",
                "check_concatenation_result_00081c94": "check_concatenation_result",
                "reverse_bits_00081d1c": "reverse_bits"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000805d0": {
                    "1": "process_and_calculate",
                    "25": "process_data",
                    "2": "process_and_validate_data"
                },
                "_DAT_20070950": {
                    "1": "previous_width"
                },
                "_DAT_2007090c": {
                    "1": "previous_height"
                },
                "_DAT_20070960": {
                    "1": "iteration_count"
                },
                "_DAT_20070964": {
                    "1": "current_width"
                },
                "_DAT_20070968": {
                    "1": "current_height"
                },
                "_DAT_20070920": {
                    "1": "animation_type"
                },
                "_DAT_20070938": {
                    "1": "animation_speed"
                },
                "_DAT_2007092c": {
                    "1": "iteration_counter"
                },
                "_DAT_2007093c": {
                    "1": "is_odd_iteration"
                },
                "_DAT_200708f6": {
                    "1": "reversed_bits"
                },
                "uVar1": {
                    "1": "value",
                    "7": "global_variable1",
                    "15": "global_var1",
                    "4": "global_var"
                },
                "uVar2": {
                    "1": "leading_zeros_count",
                    "3": "float_var1",
                    "17": "result1",
                    "2": "temp_var1"
                },
                "uVar3": {
                    "3": "float_var2",
                    "1": "float_calc_result",
                    "2": "temp_var2",
                    "17": "result2"
                },
                "uVar4": {
                    "2": "temp_var3",
                    "3": "float_var3",
                    "1": "result_float3",
                    "17": "result3"
                },
                "uVar5": {
                    "1": "converted_float4",
                    "3": "float_var4",
                    "17": "result4",
                    "2": "temp_var4"
                },
                "iVar6": {
                    "2": "temp_var1",
                    "1": "int_value",
                    "14": "temp_var",
                    "4": "counter"
                },
                "puVar7": {
                    "1": "ptr_data",
                    "4": "pointer_var1",
                    "8": "ptr_var1",
                    "5": "ptr_var"
                },
                "puVar8": {
                    "5": "pointer2",
                    "1": "ptr_array",
                    "12": "ptr_var2",
                    "4": "pointer_var2"
                },
                "validate_parameters_000802da": {
                    "2": "validate_parameters"
                },
                "calculate_result_00081894": {
                    "2": "calculate_result"
                },
                "count_leading_zeros_0008189c": {
                    "2": "count_leading_zeros"
                },
                "get_global_variable_thunk_00081714": {
                    "2": "get_global_variable"
                },
                "process_data_0008043e": {
                    "2": "process_data"
                },
                "calculate_float_00081730": {
                    "2": "calculate_float"
                },
                "calculate_floating_point_00081944": {
                    "2": "calculate_floating_point"
                },
                "convert_to_signed_integer_00081cd0": {
                    "2": "convert_to_signed_integer"
                },
                "check_concatenation_result_00081ca8": {
                    "2": "check_concatenation_result"
                },
                "check_concatenation_result_00081c94": {
                    "2": "check_concatenation_result"
                },
                "reverse_bits_00081d1c": {
                    "2": "reverse_bits"
                }
            }
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_function_00080a68",
            "code": "\nvoid initialize_function_00080a68(void)\n\n{\n  initialize_param_array(&DAT_20070954,\"\");\n  update_relocation_entry(&DAT_20070954,0data815ff,0data2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_function_00080a68",
                "initialize_param_array_00081682": "initialize_param_array",
                "update_relocation_entry_00081d5c": "update_relocation_entry",
                "x": "data",
                "y": "value",
                "z": "offset"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080a68": {
                    "2": "initialize_data",
                    "5": "initialize_function",
                    "1": "initialize_and_configure",
                    "4": "initialize_parameters"
                },
                "initialize_param_array_00081682": {
                    "18": "initialize_param_array",
                    "3": "initialize_parameters",
                    "8": "initialize_parameter_array",
                    "1": "initialize_params"
                },
                "update_relocation_entry_00081d5c": {
                    "1": "entry",
                    "29": "update_relocation_entry"
                },
                "new_variable_name_1": {
                    "1": "parameter_array"
                },
                "new_variable_name_2": {
                    "1": "index_offset",
                    "2": "relocation_address"
                },
                "new_variable_name_3": {
                    "1": "relocation_value"
                },
                "new_variable_name_4": {
                    "1": "secondary_value"
                },
                "initialize_relocation_data": {
                    "1": "relocation_data"
                },
                "initialize_parameter_array": {
                    "1": "parameter_array"
                },
                "update_relocation_entry": {
                    "1": "relocation_entry",
                    "2": "update_relocation_entry"
                },
                "0x815ff": {
                    "1": "relocation_entry",
                    "5": "relocation_address"
                },
                "0x2007002c": {
                    "1": "data_address",
                    "3": "relocation_data"
                },
                "DAT_200709e8": {
                    "1": "value1",
                    "3": "variable1"
                },
                "DAT_200709e9": {
                    "1": "flag2",
                    "3": "variable2"
                },
                "DAT_200709ea": {
                    "1": "constant_value",
                    "3": "variable3"
                },
                "DAT_20070a3a": {
                    "1": "time_delay",
                    "3": "variable4"
                },
                "initialize_param_array_00081682_IN": {
                    "1": "param_array"
                },
                "initialize_param_array_00081682_INITIAL_VALUE": {
                    "1": "initial_value"
                },
                "update_relocation_entry_00081d5c_PARAM_ARRAY": {
                    "1": "param_array"
                },
                "update_relocation_entry_00081d5c_POSITION": {
                    "1": "position"
                },
                "update_relocation_entry_00081d5c_VALUE": {
                    "1": "value"
                },
                "initialize_function_parameters_PARAM_ARRAY": {
                    "1": "param_array"
                },
                "initialize_function_parameters_POSITION": {
                    "1": "position"
                },
                "initialize_function_parameters_VALUE": {
                    "1": "value"
                },
                "initialize_function_parameters_INITIAL_VALUE": {
                    "1": "initial_value"
                },
                "DAT_20070954": {
                    "1": "param_array",
                    "2": "parameter_array"
                },
                "initializeDefaults": {
                    "1": "initialize_defaults"
                },
                "updateRelocationEntry": {
                    "1": "relocation_entry",
                    "7": "update_relocation_entry"
                },
                "initializeParamArray": {
                    "6": "initialize_param_array",
                    "1": "void"
                },
                "initialize_configuration": {
                    "1": "initialize_configuration"
                },
                "initialize_param_array": {
                    "1": "init_param_array"
                },
                "0": {
                    "1": "zero"
                },
                "6": {
                    "1": "six"
                },
                "1000": {
                    "1": "one_thousand"
                },
                "initializeProgram": {
                    "1": "void"
                },
                "": {
                    "1": "param_array"
                },
                "initializeParameters": {
                    "1": "new_parameters",
                    "2": "initialize_parameters"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "x": {
                    "1": "data"
                },
                "y": {
                    "1": "value"
                },
                "z": {
                    "1": "offset"
                },
                "initializeVariable": {
                    "1": "initialize_variable"
                },
                "initializeConstant": {
                    "1": "initialize_constant"
                },
                "PTR_20070954": {
                    "1": "parameter_array"
                },
                "initialize_and_update_param_array_param_1": {
                    "1": "param_array"
                },
                "initialize_and_update_param_array_param_2": {
                    "1": "relocation_start"
                },
                "initialize_and_update_param_array_param_3": {
                    "1": "relocation_end"
                },
                "initialize_param_array_00081682_param_1": {
                    "2": "param_array"
                },
                "update_relocation_entry_00081d5c_param_1": {
                    "1": "param_array"
                },
                "update_relocation_entry_00081d5c_param_2": {
                    "2": "start_address"
                },
                "update_relocation_entry_00081d5c_param_3": {
                    "1": "end_address"
                },
                "initialize_and_update_param_array_var_1": {
                    "1": "initial_value"
                },
                "initialize_and_update_param_array_var_2": {
                    "1": "default_value"
                },
                "initialize_and_update_param_array_var_3": {
                    "1": "number_of_entries"
                },
                "initialize_and_update_param_array_var_4": {
                    "1": "timeout"
                },
                "initialize_and_update_param_array_var_5": {
                    "1": "max_value"
                },
                "0x20070954": {
                    "2": "parameter_array"
                },
                "0x200709e8": {
                    "1": "var1"
                },
                "0x200709e9": {
                    "1": "var2"
                },
                "0x200709ea": {
                    "1": "count3"
                },
                "0x20070a3a": {
                    "1": "var4"
                },
                "initializeApplication": {
                    "1": "initialize_application"
                },
                "initializeParameterArray": {
                    "1": "initialize_array"
                },
                "new_variable_name_5": {
                    "1": "timeout"
                },
                "initializeAndSetParametersParam1": {
                    "1": "param_array"
                },
                "initializeAndSetParametersParam2": {
                    "1": "relocation_entry1"
                },
                "initializeAndSetParametersParam3": {
                    "1": "relocation_entry2"
                },
                "initializeAndSetParametersVariable1": {
                    "1": "num1"
                },
                "initializeAndSetParametersVariable2": {
                    "1": "num2"
                },
                "initializeAndSetParametersVariable3": {
                    "1": "num3"
                },
                "initializeAndSetParametersVariable4": {
                    "1": "num4"
                },
                "params": {
                    "1": "parameter_array"
                },
                "relocation_offset": {
                    "1": "0x815ff"
                },
                "relocation_value": {
                    "1": "0x2007002c"
                },
                "initialized_data_1": {
                    "1": "0"
                },
                "initialized_data_2": {
                    "1": "0"
                },
                "initialized_data_3": {
                    "1": "6"
                },
                "initialized_data_4": {
                    "1": "1000"
                },
                "initializeFunction": {
                    "1": "initialize_function"
                },
                "initializeParameterArray_00081682": {
                    "1": "array"
                }
            }
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_and_configure_00080ae4",
            "code": "\n\n\nvoid initialize_and_configure_00080ae4(void)\n\n{\n  int index;\n  int next_index;\n  \n  initialize_memory();\n  _DAT_e000e014 = elf_relocation_array[6]r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set();\n  index = 0;\n  do {\n    next_index = index + 1;\n    update_parameter(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameters(0x400e0e00,1,0x300,0);\n  update_parameter(0,1);\n  update_parameters(0x400e0e00,1,0xc00,0);\n  update_parameters(0x400e0e00,1,0x3000,0);\n  update_parameters(0x400e1400,2,0x30,0);\n  update_parameters(0x400e1000,1,0xc00,0);\n  update_parameters(0x400e0e00,1,3,0);\n  update_parameters(0x400e1000,1,0xc000,0);\n  check_and_set_bit(0x25);\n  calculate_threshold(0x400c0000,elf_relocation_array[6]r_offset,20000000,0xc);\n  update_flags_1(0x400c0000,0,0x300000,1);\n  update_flags_2(0x400c0000,0,0);\n  set_param_value(0x400c0000,0xffffffff);\n  set_default_value(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_and_configure_00080ae4",
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array",
                "initialize_memory_00080e9c": "initialize_memory",
                "execute_function_set_00081d7c": "execute_function_set",
                "update_parameter_00081318": "update_parameter",
                "update_parameters_00080da0": "update_parameters",
                "check_and_set_bit_00080e18": "check_and_set_bit",
                "calculate_threshold_00080f9c": "calculate_threshold",
                "update_flags_00081042": "update_flags_1",
                "update_flags_00081034": "update_flags_2",
                "set_param_value_0008106e": "set_param_value",
                "set_default_value_00081066": "set_default_value",
                "iVar1": "index",
                "iVar2": "next_index",
                ".r_offset": "r_offset",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080ae4": {
                    "8": "initialize_and_update_parameters",
                    "2": "initialize_function",
                    "3": "initialize_parameters",
                    "1": "initialize_device",
                    "4": "initialize_and_configure_system",
                    "9": "initialize_and_configure"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "symbol_table",
                    "6": "elf_relocation_array",
                    "2": "relocation_array"
                },
                "initialize_memory_00080e9c": {
                    "13": "initialize_memory"
                },
                "execute_function_set_00081d7c": {
                    "23": "execute_function_set"
                },
                "update_parameter_00081318": {
                    "24": "update_parameter"
                },
                "_DAT_400e0ea0": {
                    "1": "memory_address_1",
                    "2": "flag1"
                },
                "_DAT_400e10a0": {
                    "1": "variable2",
                    "2": "flag2"
                },
                "_DAT_400e12a0": {
                    "1": "variable3",
                    "2": "memory_value_3"
                },
                "_DAT_400e14a0": {
                    "2": "memory_value_4",
                    "1": "variable_d"
                },
                "update_parameters_00080da0": {
                    "24": "update_parameters"
                },
                "check_and_set_bit_00080e18": {
                    "24": "check_and_set_bit"
                },
                "calculate_threshold_00080f9c": {
                    "24": "calculate_threshold"
                },
                "update_flags_00081042": {
                    "4": "update_flags1",
                    "9": "update_flags",
                    "1": "update_flags_a"
                },
                "update_flags_00081034": {
                    "12": "update_flags_2",
                    "1": "update_flags",
                    "6": "update_flags2"
                },
                "set_param_value_0008106e": {
                    "19": "set_param_value",
                    "5": "set_parameter_value"
                },
                "set_default_value_00081066": {
                    "1": "set_defaultvalue",
                    "23": "set_default_value"
                },
                "_DAT_e000e014": {
                    "2": "offset_divided_by_1000",
                    "1": "memory_offset",
                    "3": "offset"
                },
                "DAT_e000ed23": {
                    "2": "default_value",
                    "1": "value_0xf0",
                    "9": "constant_value"
                },
                "_DAT_e000e018": {
                    "2": "flag",
                    "1": "value_0",
                    "3": "variable_1"
                },
                "_DAT_e000e010": {
                    "2": "loop_counter",
                    "1": "another_variable",
                    "3": "variable_2"
                },
                "_DAT_400e0e00": {
                    "1": "memory_address_parameter_1",
                    "2": "param1"
                },
                "_DAT_400e1400": {
                    "2": "param2",
                    "1": "data_2"
                },
                "_DAT_400e1000": {
                    "1": "device3",
                    "2": "param3"
                },
                "iVar1": {
                    "3": "index",
                    "1": "iteration_count",
                    "2": "counter"
                },
                "iVar2": {
                    "3": "next_counter",
                    "1": "iteration_variable_2"
                },
                ".r_offset": {
                    "1": "r_offset"
                },
                "_DAT_e000e00c": {
                    "1": "parameter1"
                },
                "_DAT_e000e01c": {
                    "1": "parameter2"
                },
                "_DAT_e000e030": {
                    "1": "parameter3"
                },
                "_DAT_e000e044": {
                    "1": "parameter4"
                },
                "_DAT_400c0000": {
                    "1": "param_3"
                },
                "r_offset": {
                    "1": "offset"
                }
            }
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_memory_and_data_00080c0c",
            "code": "\nvoid initialize_memory_and_data_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory(&DAT_20070b84);\n  initialize_memory(&DAT_20070ad8);\n  initialize_parameters(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initialize_memory(&DAT_20070de4);\n  initialize_memory(&DAT_20070e6c);\n  initialize_memory(&DAT_20070ef4);\n  initialize_memory(&DAT_20070a50);\n  initialize_memory(&DAT_20070c84);\n  initialize_memory(&DAT_20070d0c);\n  initialize_and_set_data(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_set_data(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_set_data(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_memory_and_data_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "initialize_memory_000813a8": "initialize_memory",
                "initialize_parameters_000814e4": "initialize_parameters",
                "initialize_and_set_data_000815d4": "initialize_and_set_data"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080c0c": {
                    "15": "initialize_memory_and_data",
                    "1": "initialize_all_data",
                    "2": "initialize_data_structures",
                    "4": "initialize_and_set_data"
                },
                "param_1": {
                    "1": "unknown_param_1",
                    "2": "unused_param_1",
                    "5": "param_1",
                    "10": "param1"
                },
                "param_2": {
                    "2": "arg2",
                    "10": "param2",
                    "1": "unused_param2",
                    "5": "param_2"
                },
                "param_3": {
                    "2": "arg3",
                    "1": "mem3_param",
                    "10": "param3",
                    "7": "param_3"
                },
                "initialize_memory_000813a8": {
                    "20": "initialize_memory"
                },
                "initialize_parameters_000814e4": {
                    "20": "initialize_parameters"
                },
                "initialize_and_set_data_000815d4": {
                    "1": "data",
                    "19": "initialize_and_set_data"
                },
                "&DAT_20070b84": {
                    "1": "memory_block_1",
                    "2": "memory1"
                },
                "&DAT_20070ad8": {
                    "1": "memory_block_2",
                    "2": "memory2"
                },
                "&DAT_20070b60": {
                    "1": "parameters"
                },
                "&DAT_20070de4": {
                    "1": "memory_block3",
                    "2": "memory3"
                },
                "&DAT_20070e6c": {
                    "2": "memory4",
                    "1": "memory_block4"
                },
                "&DAT_20070ef4": {
                    "2": "memory5",
                    "1": "memory_block_5"
                },
                "&DAT_20070a50": {
                    "2": "memory6",
                    "1": "memory_block_6"
                },
                "&DAT_20070c84": {
                    "1": "memory_block_7",
                    "2": "memory7"
                },
                "&DAT_20070d0c": {
                    "2": "memory8",
                    "1": "memory_block8"
                },
                "&DAT_20070c0c": {
                    "2": "data1",
                    "1": "data_block1"
                },
                "&DAT_20070c34": {
                    "1": "data_block_2",
                    "2": "data2"
                },
                "&DAT_20070c5c": {
                    "2": "data3",
                    "1": "data_block_3"
                },
                "initialize_data_structures": {
                    "1": "initialize_data_structures"
                },
                "initialize_memory": {
                    "1": "initialize_memory"
                },
                "initialize_parameters": {
                    "1": "initialize_parameters"
                },
                "initialize_and_set_data": {
                    "1": "initialize_and_set_data"
                },
                "DAT_20070b84": {
                    "1": "data_memory_1"
                },
                "DAT_20070ad8": {
                    "1": "data_memory_2"
                },
                "DAT_20070b60": {
                    "1": "parameters_1"
                },
                "DAT_20070de4": {
                    "1": "data_memory_3"
                },
                "DAT_20070e6c": {
                    "1": "data_memory_4"
                },
                "DAT_20070ef4": {
                    "1": "data_memory_5"
                },
                "DAT_20070a50": {
                    "1": "data_memory_6"
                },
                "DAT_20070c84": {
                    "1": "data_memory_7"
                },
                "DAT_20070d0c": {
                    "1": "data_memory_8"
                },
                "DAT_20070c0c": {
                    "1": "data_1"
                },
                "DAT_20070c34": {
                    "1": "data_2"
                },
                "DAT_20070c5c": {
                    "1": "data_3"
                },
                "initializeMemory_000813a8": {
                    "1": "memory1"
                },
                "initializeParameters_000814e4": {
                    "1": "parameters"
                },
                "memory1": {
                    "1": "mem1"
                },
                "memory2": {
                    "1": "mem2"
                },
                "data1": {
                    "1": "data_ptr_1"
                },
                "data2": {
                    "1": "data2"
                },
                "data3": {
                    "1": "data_ptr_3"
                },
                "initialize_memory_and_data": {
                    "1": "initialize_memory_and_data"
                },
                "ptr1": {
                    "1": "memory_ptr_1"
                },
                "ptr2": {
                    "1": "memory_ptr_2"
                },
                "ptr3": {
                    "1": "memory_ptr_3"
                },
                "ptr4": {
                    "1": "memory_ptr_4"
                },
                "ptr5": {
                    "1": "memory_ptr_5"
                },
                "ptr6": {
                    "1": "memory_ptr_6"
                },
                "ptr7": {
                    "1": "memory_ptr_7"
                },
                "ptr8": {
                    "1": "memory_ptr_8"
                }
            }
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid check_and_execute_functions_00080ce0(void)\n\n{\n  int result;\n  \n  result = calculate_difference(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = calculate_difference(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = calculate_difference(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = calculate_difference(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "result",
                "calculate_difference_000813e4": "calculate_difference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080ce0": {
                    "1": "calculate_and_display_differences",
                    "2": "check_and_execute_calculations",
                    "3": "calculate_differences",
                    "10": "check_and_execute_functions"
                },
                "iVar1": {
                    "16": "result",
                    "3": "difference_result",
                    "4": "difference"
                },
                "calculate_difference_000813e4": {
                    "26": "calculate_difference"
                },
                "FUNC_00080aa8": {
                    "1": "execute_function1",
                    "3": "handle_difference_1",
                    "5": "execute_function_a",
                    "4": "execute_function_1"
                },
                "FUNC_00080ab8": {
                    "1": "execute_function_i_var1",
                    "3": "handle_difference_2",
                    "5": "execute_function_b",
                    "4": "execute_function_2"
                },
                "FUNC_00080aba": {
                    "5": "execute_function_c",
                    "1": "call_function_c",
                    "4": "execute_function_3",
                    "3": "handle_difference_3"
                },
                "FUNC_00080abc": {
                    "1": "execute_function4",
                    "5": "execute_function_d",
                    "3": "handle_difference_4",
                    "4": "execute_function_4"
                }
            }
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_00080d2e",
            "code": "\nvoid update_parameter_00080d2e(int base_address,undefined4 operation_type,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(operation_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\nswitchD_00080d34_caseD_6:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_00080d2e",
                "param_1": "base_address",
                "param_2": "operation_type",
                "param_3": "new_value",
                "uVar1": "updated_value"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d2e": {
                    "1": "update_register_value",
                    "4": "update_memory",
                    "3": "update_parameter_value",
                    "2": "update_param_values",
                    "11": "update_parameter"
                },
                "param_1": {
                    "1": "configuration",
                    "3": "object_address",
                    "18": "base_address",
                    "2": "memory_address"
                },
                "param_2": {
                    "2": "case_type",
                    "1": "code_type",
                    "4": "operation",
                    "3": "mode",
                    "9": "operation_type"
                },
                "param_3": {
                    "1": "new_data",
                    "15": "new_value",
                    "9": "value"
                },
                "uVar1": {
                    "1": "modified_value",
                    "22": "updated_value",
                    "4": "result"
                }
            }
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_parameters_00080d54",
            "code": "\nvoid update_parameters_00080d54(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[17] = value;\n  if (is_negative) {\n    array[25] = value;\n  }\n  if (!is_negative) {\n    array[24] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = value;\n  }\n  if (!is_negative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[32] = value;\n  }\n  param_array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "param_1[0x11]": "array[17]",
                "param_1[0x19]": "array[25]",
                "param_1[0x18]": "array[24]",
                "param_1[8]": "array[8]",
                "param_1[9]": "array[9]",
                "param_1[0x20]": "array[32]",
                "param_1[5]": "param_array[5]"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d54": {
                    "1": "set_flags_and_values",
                    "4": "set_values",
                    "3": "update_data",
                    "2": "set_param_values",
                    "6": "update_parameters"
                },
                "param_1": {
                    "5": "param_array",
                    "7": "array",
                    "2": "data_array",
                    "3": "parameters",
                    "1": "destination_array"
                },
                "param_2": {
                    "17": "value",
                    "12": "new_value",
                    "1": "input_value"
                },
                "param_3": {
                    "5": "flag",
                    "1": "param_value",
                    "3": "bitmask",
                    "22": "flags"
                },
                "bVar1": {
                    "1": "is_negative_flags",
                    "16": "is_negative",
                    "4": "is_flag_negative",
                    "6": "is_negative_flag",
                    "3": "is_flag_set"
                },
                "param_1[0x11]": {
                    "1": "param1_value1",
                    "3": "array[17]",
                    "2": "param_array[17]"
                },
                "param_1[0x19]": {
                    "1": "parameter_array[25]",
                    "3": "array[25]",
                    "2": "param_array[25]"
                },
                "param_1[0x18]": {
                    "1": "param1_value3",
                    "3": "array[24]",
                    "2": "param_array[24]"
                },
                "param_1[8]": {
                    "1": "output_array[8]",
                    "2": "param_array[8]",
                    "3": "array[8]"
                },
                "param_1[9]": {
                    "1": "config_array[9]",
                    "2": "param_array[9]",
                    "3": "array[9]"
                },
                "param_1[0x20]": {
                    "2": "param_array[32]",
                    "3": "array[32]",
                    "1": "param1_value6"
                },
                "param_1[5]": {
                    "1": "param1_value7",
                    "2": "array[5]"
                },
                "0x11": {
                    "5": "index1",
                    "1": "param_index1",
                    "2": "first_index"
                },
                "0x19": {
                    "4": "index2",
                    "1": "param_index2",
                    "2": "third_index"
                },
                "0x18": {
                    "1": "array_index3",
                    "4": "index3",
                    "2": "second_index"
                },
                "8": {
                    "1": "param_index4",
                    "4": "index4",
                    "2": "fourth_index"
                },
                "9": {
                    "1": "index_b",
                    "4": "index5",
                    "2": "fifth_index"
                },
                "0x20": {
                    "1": "array_index6",
                    "5": "index6",
                    "2": "sixth_index"
                },
                "5": {
                    "5": "index7",
                    "2": "seventh_index",
                    "1": "array_index7"
                },
                "((int)(param_3 << 0x1e) < 0) || ((int)(param_3 << 0x1c) < 0)": {
                    "1": "is_negative_shift(flags)"
                },
                "*param_1": {
                    "1": "param_array[0]",
                    "2": "array[0]"
                },
                "0x1c": {
                    "1": "shift_amount1"
                },
                "0x1e": {
                    "1": "shift_amount2"
                },
                "0x1f": {
                    "1": "shift_amount3"
                }
            }
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_parameters_00080d7a",
            "code": "\nvoid set_parameters_00080d7a(undefined4 *output_array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  output_array[0x11] = value;\n  if (condition3 == 0) {\n    output_array[0x18] = value;\n  }\n  else {\n    output_array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    output_array[0x15] = value;\n  }\n  else {\n    output_array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    output_array[0xd] = value;\n  }\n  else {\n    output_array[0xc] = value;\n  }\n  output_array[4] = value;\n  *output_array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_parameters_00080d7a",
                "param_1": "output_array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d7a": {
                    "2": "set_params",
                    "1": "set_values",
                    "6": "set_parameters",
                    "3": "update_param_values",
                    "5": "update_parameters"
                },
                "param_1": {
                    "6": "array",
                    "4": "param_array",
                    "2": "parameter_array",
                    "1": "result",
                    "5": "parameters"
                },
                "param_2": {
                    "2": "param_value",
                    "7": "new_value",
                    "1": "new_pointer",
                    "19": "value"
                },
                "param_3": {
                    "11": "condition1",
                    "1": "check_param3",
                    "7": "flag1",
                    "3": "is_param3_zero",
                    "5": "condition_1"
                },
                "param_4": {
                    "11": "condition2",
                    "1": "is_zero2",
                    "3": "is_param4_zero",
                    "5": "condition_2",
                    "7": "flag2"
                },
                "param_5": {
                    "3": "is_param5_zero",
                    "1": "option3",
                    "7": "flag3",
                    "11": "condition3",
                    "5": "condition_3"
                },
                "0x11": {
                    "1": "index11"
                },
                "0x15": {
                    "1": "index15"
                },
                "0x14": {
                    "1": "index14"
                },
                "0xd": {
                    "1": "index_d"
                },
                "0xc": {
                    "1": "index_c"
                }
            }
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameters_00080da0",
            "code": "\nundefined4 update_parameters_00080da0(int device,int parameter_type,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  switch(parameter_type) {\n  case 1:\n  case 2:\n    update_parameter(device,parameter_type,value);\n    is_negative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = value;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = value;\n    }\n    break;\n  case 3:\n    update_parameters_00080da0(device,value,flags,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    set_parameters(device,value,parameter_type == 5,(flags << 0x1d) >> 0x1f,flags & 1,parameter_type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameters_00080da0",
                "param_1": "device",
                "param_2": "parameter_type",
                "param_3": "value",
                "param_4": "flags",
                "bVar1": "is_negative",
                "update_parameter_00080d2e": "update_parameter",
                "update_parameters_00080d54": "update_parameters",
                "set_parameters_00080d7a": "set_parameters"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080da0": {
                    "1": "update_parameter_and_return_status",
                    "11": "update_parameter",
                    "3": "update_and_set_parameters",
                    "2": "update_parameter_value",
                    "12": "update_parameters"
                },
                "param_1": {
                    "1": "context",
                    "4": "object_address",
                    "16": "device",
                    "3": "object"
                },
                "param_2": {
                    "8": "parameter_type",
                    "6": "mode",
                    "3": "param_type",
                    "1": "param_index"
                },
                "param_3": {
                    "3": "param_value",
                    "19": "value",
                    "8": "new_value",
                    "1": "parameter_value"
                },
                "param_4": {
                    "11": "flag",
                    "1": "bit_mask",
                    "17": "flags"
                },
                "bVar1": {
                    "20": "is_negative",
                    "1": "is_negative_flag_on",
                    "7": "is_negative_flag",
                    "2": "is_flag_set"
                },
                "update_parameter_00080d2e": {
                    "1": "update_parameter_function",
                    "3": "update_parameter_values",
                    "8": "update_parameter"
                },
                "update_parameters_00080d54": {
                    "1": "update_parameters_with_flags",
                    "2": "update_parameters_with_flag",
                    "9": "update_parameters"
                },
                "set_parameters_00080d7a": {
                    "17": "set_parameters",
                    "1": "set_advanced_parameters"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "param_value1"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "object_property2"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "object_property3"
                },
                "PTR_undefined4": {
                    "1": "undefined4_ptr"
                },
                "PTR_00080d2e": {
                    "1": "update_parameter_helper"
                },
                "PTR_00080d54": {
                    "1": "update_parameters_helper"
                },
                "PTR_00080d7a": {
                    "1": "set_parameters_helper"
                },
                "(param_4 << 0x1f)": {
                    "1": "flag_shifted_left"
                },
                "(param_4 << 0x1d) >> 0x1f": {
                    "1": "is_secondary_flag"
                },
                "(param_4 & 1)": {
                    "1": "is_tertiary_flag"
                },
                "param_1 + 0x44": {
                    "1": "param_ptr_offset1"
                },
                "param_1 + 100": {
                    "1": "param_ptr_offset2"
                },
                "param_1 + 0x60": {
                    "1": "param_ptr_offset3"
                },
                "updateParameter": {
                    "1": "update_parameter"
                },
                "updateParametersWithFlag": {
                    "1": "update_parameters_with_flag"
                },
                "setParameters": {
                    "1": "set_parameters"
                }
            }
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_intersection_00080e04",
            "code": "\nuint check_intersection_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_intersection_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e04": {
                    "3": "check_bitwise_conditions",
                    "2": "check_permissions",
                    "1": "check_flags",
                    "7": "check_intersection",
                    "4": "check_bitwise_intersection"
                },
                "param_1": {
                    "3": "input_address",
                    "1": "object1",
                    "5": "input_value",
                    "2": "offset",
                    "4": "base_address"
                },
                "param_2": {
                    "14": "mask",
                    "1": "access_permissions",
                    "2": "bit_mask",
                    "3": "bitmask"
                },
                "uVar1": {
                    "28": "result",
                    "3": "intersection_result"
                }
            }
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e18": {
                    "1": "initialize_bit",
                    "6": "check_and_update_bit",
                    "16": "check_and_set_bit",
                    "2": "check_bit_and_set"
                },
                "param_1": {
                    "6": "input_value",
                    "1": "position",
                    "10": "bit_position",
                    "3": "bit_index",
                    "4": "value"
                },
                "uVar1": {
                    "2": "mask",
                    "28": "bit_mask",
                    "1": "bitmask"
                }
            }
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initialize_memory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e9c": {
                    "1": "set_values",
                    "2": "initialize_registers",
                    "18": "initialize_memory",
                    "5": "initialize_data"
                },
                "_DAT_400e0a00": {
                    "1": "initial_memory_value1",
                    "2": "memory_start_address",
                    "3": "memory_size1"
                },
                "_DAT_400e0c00": {
                    "2": "memory_end_address",
                    "1": "base_value2",
                    "3": "memory_size2"
                },
                "_DAT_400e0620": {
                    "1": "memory_address",
                    "2": "offset",
                    "8": "shifted_value"
                },
                "_DAT_400e0668": {
                    "1": "comparison_memory_value",
                    "4": "temp_value",
                    "2": "temp",
                    "3": "temporary_value"
                },
                "_DAT_400e0628": {
                    "1": "data_value"
                },
                "_DAT_400e0630": {
                    "1": "value2",
                    "2": "constant2"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "symbol_table",
                    "3": "elf_relocation_array",
                    "4": "rel_array",
                    "7": "relocation_array",
                    "2": "elf_rel_array"
                },
                "_FUN_00080e9c": {
                    "1": "initialize_memory"
                },
                "ELF_SECTION_20070000": {
                    "1": "relocation_section"
                },
                "_original_function_name": {
                    "1": "initialize_memory"
                },
                "_original_variable_name_1": {
                    "1": "memory_location_1"
                },
                "_original_variable_name_2": {
                    "1": "memory_location_2"
                },
                "_original_variable_name_3": {
                    "1": "counter"
                },
                "_original_variable_name_4": {
                    "1": "data"
                },
                "_original_variable_name_5": {
                    "1": "index"
                },
                "_original_variable_name_6": {
                    "1": "delay"
                }
            }
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main_loop_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *result,uint input_size,int block_size,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint threshold_values [16];\n  \n  threshold_values[0] = 0;\n  threshold_values[1] = 8;\n  threshold_values[2] = 0x10;\n  threshold_values[3] = 0x18;\n  threshold_values[4] = 0x40;\n  threshold_values[5] = 0x50;\n  threshold_values[6] = 0x60;\n  threshold_values[7] = 0x70;\n  threshold_values[8] = 0x200;\n  threshold_values[9] = 0x240;\n  threshold_values[10] = 0x280;\n  threshold_values[11] = 0x2c0;\n  threshold_values[12] = 0x300;\n  threshold_values[13] = 0x340;\n  threshold_values[14] = 0x380;\n  threshold_values[15] = 0x3c0;\n  *result = 1;\n  output_array[1] = 0;\n  output_array[72] = 0x202;\n  output_array[65] = 0;\n  output_array[69] = 0;\n  quotient = input_size / (uint)(block_size * 2);\n  if (input_size == block_size * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        threshold_values[index]) {\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "result",
                "param_2": "input_size",
                "param_3": "block_size",
                "param_4": "multiplier",
                "local_58": "threshold_values",
                "uVar1": "quotient",
                "uVar2": "index",
                "param_1[1]": "output_array[1]",
                "param_1[0x48]": "output_array[72]",
                "param_1[0x41]": "output_array[65]",
                "param_1[0x45]": "output_array[69]",
                "local_58[0]": "threshold_values[0]",
                "local_58[1]": "threshold_values[1]",
                "local_58[2]": "threshold_values[2]",
                "local_58[3]": "threshold_values[3]",
                "local_58[4]": "threshold_values[4]",
                "local_58[5]": "threshold_values[5]",
                "local_58[6]": "threshold_values[6]",
                "local_58[7]": "threshold_values[7]",
                "local_58[8]": "threshold_values[8]",
                "local_58[9]": "threshold_values[9]",
                "local_58[10]": "threshold_values[10]",
                "local_58[11]": "threshold_values[11]",
                "local_58[12]": "threshold_values[12]",
                "local_58[13]": "threshold_values[13]",
                "local_58[14]": "threshold_values[14]",
                "local_58[15]": "threshold_values[15]"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080f9c": {
                    "3": "calculate_index",
                    "1": "calculate_index_value",
                    "15": "calculate_threshold"
                },
                "param_1": {
                    "7": "result",
                    "6": "output_array",
                    "1": "output_buffer",
                    "3": "output"
                },
                "param_2": {
                    "1": "total",
                    "5": "data_size",
                    "4": "total_size",
                    "9": "input_size"
                },
                "param_3": {
                    "1": "param_multiplier",
                    "4": "divisor",
                    "2": "scale_factor",
                    "5": "block_size"
                },
                "param_4": {
                    "4": "threshold",
                    "1": "scaling_factor",
                    "2": "time_limit",
                    "6": "multiplier"
                },
                "local_58": {
                    "1": "lookup_array",
                    "9": "thresholds",
                    "12": "threshold_values",
                    "2": "threshold_table",
                    "6": "threshold_array"
                },
                "uVar1": {
                    "5": "num_blocks",
                    "1": "num_buffers",
                    "3": "divisor",
                    "13": "quotient"
                },
                "uVar2": {
                    "1": "current_index",
                    "2": "i",
                    "23": "index"
                },
                "uVar3": {
                    "1": "temp"
                },
                "uVar4": {
                    "1": "multiplier"
                },
                "*param_1": {
                    "1": "output[0]"
                },
                "param_1[1]": {
                    "1": "output[1]"
                },
                "param_1[0x48]": {
                    "1": "result[72]"
                },
                "param_1[0x41]": {
                    "1": "output[65]"
                },
                "param_1[0x45]": {
                    "1": "output[69]"
                },
                "local_58[0]": {
                    "1": "threshold_values[0]"
                },
                "local_58[1]": {
                    "1": "threshold_values[1]"
                },
                "local_58[2]": {
                    "1": "threshold_values[2]"
                },
                "local_58[3]": {
                    "1": "threshold_values[3]"
                },
                "local_58[4]": {
                    "1": "threshold_values[4]"
                },
                "local_58[5]": {
                    "1": "threshold_values[5]"
                },
                "local_58[6]": {
                    "1": "threshold_values[6]"
                },
                "local_58[7]": {
                    "1": "threshold_values[7]"
                },
                "local_58[8]": {
                    "1": "threshold_values[8]"
                },
                "local_58[9]": {
                    "1": "threshold_values[9]"
                },
                "local_58[10]": {
                    "1": "threshold_values[10]"
                },
                "local_58[11]": {
                    "1": "threshold_values[11]"
                },
                "local_58[12]": {
                    "1": "threshold_values[12]"
                },
                "local_58[13]": {
                    "1": "threshold_values[13]"
                },
                "local_58[14]": {
                    "1": "threshold_values[14]"
                },
                "local_58[15]": {
                    "1": "threshold_values[15]"
                },
                "return 0": {
                    "1": "return_success"
                },
                "return 0xffffffff": {
                    "1": "return_failure"
                }
            }
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_flags_00081034",
            "code": "\nvoid update_flags_00081034(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081034": {
                    "1": "update_value_with_mask",
                    "4": "update_parameter_value",
                    "2": "update_parameters",
                    "6": "update_flags"
                },
                "param_1": {
                    "1": "parameter_pointer",
                    "2": "data_address",
                    "16": "base_address"
                },
                "param_2": {
                    "1": "flag_value",
                    "6": "new_value",
                    "8": "value",
                    "3": "value_to_set"
                },
                "param_3": {
                    "11": "flag",
                    "4": "bit_mask",
                    "1": "flag_value",
                    "3": "value2"
                },
                "*(uint *)(param_1 + 4)": {
                    "2": "flags",
                    "1": "original_value",
                    "11": "current_value"
                },
                "(param_3 & 1) << 7": {
                    "1": "bit_shifted_mask",
                    "4": "masked_value",
                    "2": "masked_flag"
                },
                "(param_1 + 4)": {
                    "1": "address_to_update"
                },
                "(param_3 & 1)": {
                    "1": "flag_bit"
                },
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "combined_value",
                    "2": "updated_value"
                },
                "param_4": {
                    "1": "shift_amount"
                },
                "param_5": {
                    "1": "bit_shift"
                },
                "param_6": {
                    "1": "bit_offset"
                },
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "2": "new_value",
                    "1": "updated_value"
                },
                "param_1 + 4": {
                    "1": "updated_data_pointer"
                },
                "param_3 & 1": {
                    "1": "bit"
                },
                "flag << 7": {
                    "1": "flag_shifted"
                },
                "param_2 | *(uint *)(param_1 + 4)": {
                    "1": "updated_value"
                },
                "1 << 7": {
                    "1": "shifted_bit"
                },
                "*(uint *)(param_1 + 4) = param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "update_statement"
                }
            }
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid update_flags_00081042(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081042": {
                    "1": "merge_values",
                    "2": "update_register_bits",
                    "6": "update_flags"
                },
                "param_1": {
                    "2": "data_address",
                    "1": "base_pointer",
                    "5": "register_address",
                    "11": "base_address",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "input1",
                    "2": "data",
                    "3": "input_value1",
                    "12": "value1"
                },
                "param_3": {
                    "2": "register_value",
                    "1": "current_value",
                    "3": "mask1",
                    "12": "value2"
                },
                "param_4": {
                    "3": "input_value3",
                    "2": "value2",
                    "1": "flag_value",
                    "12": "value3"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "current_value"
                },
                "param_2 & 0xf": {
                    "1": "masked_bits_to_set"
                },
                "param_4 & 3": {
                    "1": "masked_flags",
                    "2": "masked_mask"
                },
                "(param_2 & 0xf) << 0x18": {
                    "1": "shifted_new_bits"
                },
                "(param_4 & 3) << 0x1c": {
                    "1": "new_flag"
                },
                "param_3 | *(uint *)(param_1 + 4)": {
                    "1": "updated_value"
                },
                "param_1 + 4": {
                    "1": "register_address_offset"
                },
                "(param_1 + 4)": {
                    "1": "field_pointer"
                },
                "(param_2 & 0xf)": {
                    "1": "masked_value"
                },
                "(param_4 & 3)": {
                    "1": "shifted_flag"
                }
            }
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid set_bit_0008105c(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008105c": {
                    "11": "set_bit",
                    "1": "set_bitmask",
                    "3": "set_bit_at_position",
                    "4": "set_bit_value",
                    "2": "set_bit_in_integer"
                },
                "param_1": {
                    "5": "memory_address",
                    "19": "base_address",
                    "1": "integer_address"
                },
                "param_2": {
                    "2": "bit_offset",
                    "1": "index",
                    "20": "bit_position",
                    "6": "bit_index"
                },
                "param_2 & 0xff": {
                    "1": "index_masked"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "set_bit"
                },
                "PTR_<variable>": {
                    "1": "<new_variable_name_1>"
                },
                "param_1 + 0x14": {
                    "1": "target_address"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                }
            }
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_default_value_00081066",
            "code": "\nvoid set_default_value_00081066(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081066": {
                    "1": "set_variable_to_max_value",
                    "16": "set_default_value",
                    "2": "initialize_value"
                },
                "param_1": {
                    "2": "parameter",
                    "1": "param",
                    "3": "object_address",
                    "9": "base_address"
                },
                "*(undefined4 *)(param_1 + 0x14)": {
                    "2": "value",
                    "3": "default_value",
                    "1": "pointer_value"
                },
                "0xffff": {
                    "1": "max_value"
                },
                "(param_1 + 0x14)": {
                    "1": "value_address"
                },
                "0x14": {
                    "1": "default_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                }
            }
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid set_param_value_0008106e(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008106e": {
                    "9": "set_parameter_value",
                    "3": "set_param",
                    "1": "set_data_to_offset",
                    "2": "set_parameter",
                    "13": "set_param_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "18": "object_address",
                    "6": "base_address",
                    "2": "target_address",
                    "3": "obj_ptr"
                },
                "param_2": {
                    "7": "param_value",
                    "11": "new_value",
                    "4": "value",
                    "1": "value_to_set",
                    "8": "parameter_value"
                },
                "28": {
                    "1": "offset"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "pointer_address"
                }
            }
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nvoid initialize_00081184(void)\n\n{\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184",
                "undefined4": "void",
                "return": "status"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081184": {
                    "12": "initialize",
                    "5": "get_default_value",
                    "1": "initialize_data",
                    "2": "get_zero",
                    "4": "get_return_value"
                },
                "PTR_1": {
                    "1": "new_ptr_1"
                },
                "undefined4": {
                    "1": "int",
                    "10": "void"
                },
                "return": {
                    "1": "status"
                },
                "return_value": {
                    "1": "result"
                },
                "0": {
                    "1": ""
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculate_sum_0008118c(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previous_value = DAT_20071180;\n  DAT_20071180 = input_value + DAT_20071180;\n  return previous_value;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input_value",
                "iVar1": "previous_value"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008118c": {
                    "11": "calculate_sum",
                    "1": "calculate_running_sum",
                    "7": "calculate_new_value",
                    "2": "calculate_result"
                },
                "param_1": {
                    "23": "input_value",
                    "2": "number",
                    "3": "input_number",
                    "1": "num"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "old_sum",
                    "7": "previous_sum",
                    "12": "previous_value"
                },
                "DAT_20071180": {
                    "1": "current_value"
                }
            }
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_error_code_000811ae",
            "code": "\nuint32_t get_error_code_000811ae(void)\n\n{\n  return_value 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "undefined4": "uint32_t",
                "return": "return_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811ae": {
                    "8": "get_default_value",
                    "13": "get_error_code",
                    "3": "get_negative_one",
                    "1": "reset_return_value",
                    "4": "get_return_value"
                },
                "undefined4 return": {
                    "1": "default_value"
                },
                "undefined4": {
                    "3": "int",
                    "1": "unsigned_int",
                    "6": "uint32_t"
                },
                "0xffffffff": {
                    "2": "default_value",
                    "1": "error_code"
                },
                "return": {
                    "2": "return_value"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "return value": {
                    "1": "negative_one"
                }
            }
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initialize_memory_000811b4(undefined4 param1,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "address"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811b4": {
                    "1": "initialize_memory_layout",
                    "7": "set_memory_value",
                    "3": "set_memory_page_size",
                    "13": "initialize_memory",
                    "4": "set_memory_flag"
                },
                "param_1": {
                    "2": "data_pointer",
                    "1": "destination_address",
                    "8": "param1",
                    "5": "result",
                    "4": "param"
                },
                "param_2": {
                    "9": "address",
                    "3": "param2",
                    "2": "buffer",
                    "1": "arg2",
                    "8": "memory_address"
                },
                "0x2000": {
                    "1": "memory_flag"
                },
                "param_2 + 4": {
                    "1": "page_address"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_protection",
                    "4": "memory_value"
                },
                "param_2 + 8": {
                    "1": "buffer_size"
                }
            }
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "get_one_000811be",
            "code": "\nint get_one_000811be(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "get_one_000811be",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811be": {
                    "1": "count_elements",
                    "2": "return_one",
                    "3": "initialize",
                    "4": "get_return_value"
                },
                "undefined4": {
                    "10": "int",
                    "1": "unsigned_int"
                },
                "PTR_": {
                    "1": "(unchanged)"
                },
                "DAT_": {
                    "1": "(unchanged)"
                },
                "result": {
                    "1": "new_result"
                },
                "return": {
                    "1": "value",
                    "6": "result"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<original_parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "return value": {
                    "1": "status"
                },
                "retVal": {
                    "1": "return_code"
                },
                "<parameters>": {
                    "1": "<parameters>"
                },
                "<variable_1>": {
                    "1": "<variable_1>"
                },
                "<variable_2>": {
                    "1": "<variable_2>"
                },
                "<variable_n>": {
                    "1": "<variable_n>"
                },
                "RETURN_VALUE": {
                    "1": "return_value"
                }
            }
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_zero_000811c2",
            "code": "\nvoid get_zero_000811c2(void)\n\n{\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_zero_000811c2",
                "undefined4": "void",
                "return": "status"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811c2": {
                    "1": "calculate_result",
                    "5": "get_return_value",
                    "2": "initialize_function",
                    "6": "get_zero"
                },
                "undefined4": {
                    "4": "int",
                    "1": "uint32_t",
                    "5": "void"
                },
                "return": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "4": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "4": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "4": "<new_variable_name_n>"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<unnamed return variable>": {
                    "1": "result"
                },
                "DAT_000811c2_01": {
                    "1": "error_code"
                }
            }
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_000811c6",
            "code": "\nvoid initialize_000811c6(void)\n\n{\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_000811c6",
                "undefined4": "void",
                "return": "status"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811c6": {
                    "1": "initialize_value",
                    "13": "initialize",
                    "8": "get_default_value",
                    "4": "get_return_value",
                    "2": "get_zero"
                },
                "return value": {
                    "1": "status"
                },
                "undefined4": {
                    "8": "void"
                },
                "return": {
                    "1": "status"
                },
                "PTR_FUN_000811c6": {
                    "1": "ptr_function_result"
                },
                "fun_ret_val": {
                    "1": "result"
                },
                "PTR_xxx": {
                    "1": "xxx"
                },
                "DAT_yyy": {
                    "1": "yyy"
                }
            }
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "process_data_000811cc",
            "code": "\n\n\nuint process_data_000811cc(undefined4 param1,int source,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "num_bytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811cc": {
                    "1": "copy_byte_array",
                    "12": "process_data",
                    "8": "copy_bytes",
                    "3": "copy_bytes_to_memory"
                },
                "param_1": {
                    "2": "param",
                    "3": "dest",
                    "1": "dst_ptr",
                    "6": "param1"
                },
                "param_2": {
                    "1": "source_address",
                    "3": "src",
                    "4": "source"
                },
                "param_3": {
                    "8": "num_bytes",
                    "2": "buffer_size",
                    "4": "data_size",
                    "1": "length",
                    "6": "size"
                },
                "iVar1": {
                    "1": "current_index",
                    "6": "i",
                    "19": "index"
                },
                "<original_function_name>": {
                    "1": "decode_and_store_bytes"
                },
                "<param_1>": {
                    "1": "param1"
                },
                "<param_2>": {
                    "1": "byte_array_address"
                },
                "<param_3>": {
                    "1": "num_bytes"
                }
            }
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_variable_thunk_00081714",
            "code": "\nunsigned_integer get_global_variable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_thunk_00081714",
                "undefined4": "unsigned_integer"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_00081714": {
                    "1": "get_base_address",
                    "9": "get_global_variable",
                    "3": "get_global_data",
                    "5": "get_global_value",
                    "8": "get_data_value",
                    "2": "get_data"
                },
                "DAT_20071184": {
                    "2": "global_variable_value",
                    "8": "global_variable",
                    "3": "global_value",
                    "1": "data_value"
                },
                "undefined4": {
                    "1": "unsigned_integer"
                }
            }
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_function_00081210",
            "code": "\n\n\nint update_function_00081210(int index,int value)\n\n{\n  int result;\n  uint bit_mask;\n  undefined4 update_type;\n  uint bit_mask;\n  byte lower_nibble;\n  byte byte_value;\n  int offset;\n  int param_address;\n  \n  result = index;\n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 4) {\n      result = set_bit(0x400c0000,(&DAT_00084d31)[index * 0x1c]);\n    }\n    byte_value = (&DAT_20070d94)[index];\n    lower_nibble = byte_value & 0xf;\n    if ((lower_nibble < 3) && (byte_value != 0)) {\n      if (lower_nibble == 2) {\n        if (value == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (value == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (value == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (value != 1) {\nLAB_0008126c:\n      if (value == 0) {\n        result = index * 0x1c;\n        check_and_set_bit(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameters(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        byte_value = (&DAT_20070d94)[index] & 0xf0 | 2;\n      }\n      else {\n        if (value != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        check_and_set_bit(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameters(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        byte_value = (&DAT_20070d94)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[index] = byte_value;\n      return result;\n    }\n    offset = index * 0x1c;\n    param_address = *(int *)(&DAT_00084d18 + offset);\n    if (byte_value >> 4 == 0) {\n      update_type = 4;\n    }\n    else {\n      update_type = 5;\n    }\n    result = update_parameters(param_address,update_type,*(undefined4 *)(&DAT_00084d1c + offset),\n                         *(undefined4 *)(&DAT_00084d28 + offset));\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf0 | 3;\n    if (*(int *)(param_address + 0x18) == -1) {\n      bit_mask = *(uint *)(&DAT_00084d20 + offset);\n      if (0x2c < bit_mask) {\n        return 1;\n      }\n      if (bit_mask < 0x20) {\n        bit_mask = 1 << (bit_mask & 0xff);\n        bit_mask = _DAT_400e0618 & bit_mask;\n        if (bit_mask == bit_mask) {\n          _DAT_400e0614 = bit_mask;\n        }\n      }\n      else {\n        bit_mask = 1 << (bit_mask - 0x20 & 0xff);\n        bit_mask = _DAT_400e0708 & bit_mask;\n        if (bit_mask == bit_mask) {\n          _DAT_400e0704 = bit_mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_function_00081210",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "result",
                "iVar7": "offset",
                "iVar8": "param_address",
                "uVar2": "bit_mask",
                "uVar3": "update_type",
                "uVar4": "bit_mask",
                "bVar5": "lower_nibble",
                "bVar6": "byte_value",
                "check_and_set_bit_00080e18": "check_and_set_bit",
                "update_parameters_00080da0": "update_parameters",
                "set_bit_0008105c": "set_bit"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081210": {
                    "1": "update_device_settings",
                    "2": "update_parameters",
                    "5": "update_parameter_value",
                    "6": "update_function"
                },
                "param_1": {
                    "1": "device_id",
                    "7": "device_index",
                    "2": "input_index",
                    "11": "index",
                    "8": "input_param"
                },
                "param_2": {
                    "2": "option",
                    "1": "parameter_value",
                    "3": "parameter_type",
                    "5": "value",
                    "4": "mode"
                },
                "iVar1": {
                    "1": "output",
                    "20": "result",
                    "10": "return_value"
                },
                "iVar7": {
                    "1": "array_index",
                    "2": "param_index",
                    "7": "offset",
                    "3": "temp_var4",
                    "4": "temp_var1"
                },
                "iVar8": {
                    "3": "temp_var5",
                    "4": "temp_var2",
                    "1": "updated_value",
                    "2": "parameter_address"
                },
                "uVar2": {
                    "2": "param_value",
                    "1": "value2",
                    "4": "bit_position",
                    "3": "temp_var1",
                    "11": "bit_mask"
                },
                "uVar3": {
                    "1": "temp2",
                    "3": "temp_var2",
                    "2": "update_mode",
                    "10": "update_type"
                },
                "uVar4": {
                    "1": "bit_var",
                    "4": "check_result",
                    "2": "temp_mask",
                    "6": "bit_mask"
                },
                "bVar5": {
                    "2": "parameter_type",
                    "1": "bit_mask_var1",
                    "9": "lower_nibble"
                },
                "bVar6": {
                    "1": "complete_bits",
                    "3": "byte_value"
                },
                "check_and_set_bit_00080e18": {
                    "9": "check_and_set_bit",
                    "1": "set_bit"
                },
                "update_parameters_00080da0": {
                    "1": "update_parameters_helper",
                    "2": "update_params",
                    "6": "update_parameters"
                },
                "DAT_20070d94": {
                    "1": "device_info_array"
                },
                "DAT_00084d24": {
                    "1": "function_status_array"
                },
                "DAT_00084d31": {
                    "1": "function_code_array"
                },
                "DAT_00084d20": {
                    "1": "bitfield_array"
                },
                "DAT_00084d18": {
                    "1": "param_address_array"
                },
                "DAT_00084d1c": {
                    "1": "param_range_array"
                },
                "DAT_00084d28": {
                    "1": "param_value_array"
                },
                "_DAT_400e0618": {
                    "1": "register_1_mask",
                    "2": "register1"
                },
                "DAT_400e0614": {
                    "1": "bitfield_a_value"
                },
                "_DAT_400e0708": {
                    "1": "register_2_mask",
                    "2": "register2"
                },
                "DAT_400e0704": {
                    "1": "bitfield_b_value"
                },
                "_DAT_400e0614": {
                    "1": "updated_register1"
                },
                "_DAT_400e0704": {
                    "1": "updated_register2"
                },
                "set_bit_0008105c": {
                    "2": "set_bit"
                }
            }
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_parameter_00081318",
            "code": "\nvoid update_parameter_00081318(int index,int value,undefined4 param)\n\n{\n  int intersection_result;\n  undefined4 param_value;\n  int address;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      update_function(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084d18 + index * 0x1c);\n    param_value = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    intersection_result = check_intersection(address,param_value);\n    if (intersection_result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = param_value;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = param_value;\n      return;\n    }\n    set_parameters(address,param_value,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_parameter_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "intersection_result",
                "uVar2": "param_value",
                "iVar3": "address",
                "update_function_00081210": "update_function",
                "check_intersection_00080e04": "check_intersection",
                "set_parameters_00080d7a": "set_parameters"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081318": {
                    "1": "update_parameter_value",
                    "3": "update_intersection_data",
                    "8": "update_data",
                    "4": "update_intersection"
                },
                "param_1": {
                    "1": "entity_index",
                    "29": "index"
                },
                "param_2": {
                    "2": "flag",
                    "27": "value",
                    "1": "collision_type"
                },
                "param_3": {
                    "7": "data",
                    "1": "value",
                    "2": "extra_param",
                    "18": "param"
                },
                "iVar1": {
                    "2": "intersection",
                    "4": "intersection_check_result",
                    "1": "intersection_status",
                    "14": "intersection_result",
                    "8": "result"
                },
                "uVar2": {
                    "6": "param_value",
                    "5": "parameter_value",
                    "2": "value_to_update",
                    "1": "data_value"
                },
                "iVar3": {
                    "2": "data_ptr",
                    "1": "parameter_ptr",
                    "3": "data_address",
                    "4": "address"
                },
                "update_function_00081210": {
                    "1": "update_data",
                    "3": "update_function"
                },
                "check_intersection_00080e04": {
                    "7": "check_intersection"
                },
                "set_parameters_00080d7a": {
                    "6": "set_parameters",
                    "1": "set_param_values"
                },
                "update_param_and_check_intersection": {
                    "1": "update_param_and_check_intersection"
                },
                "index": {
                    "1": "index"
                },
                "value": {
                    "1": "value"
                },
                "param_value": {
                    "1": "param_value"
                },
                "param_value_2": {
                    "1": "param_value_2"
                },
                "pointer": {
                    "1": "pointer"
                },
                "intersection_check_result": {
                    "1": "intersection_check_result"
                }
            }
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_function_if_r_info_is_zero_00081388",
            "code": "\nvoid execute_function_if_r_info_is_zero_00081388(void)\n\n{\n  if ((relocation_info != 0xffffffff) &&\n     (relocation_info = relocation_info - 1,\n     relocation_info == 0)) {\n    (*(function_ptr *)((int)&rel_array[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_function_if_r_info_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset",
                "code": "function_ptr",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "relocation_info"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081388": {
                    "1": "execute_offset_function",
                    "5": "execute_function_if_r_info_is_zero",
                    "2": "execute_if_r_info_is_zero",
                    "4": "execute_if_r_info_zero"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_records",
                    "3": "relocation_table",
                    "10": "relocation_array",
                    "14": "rel_array"
                },
                "r_info": {
                    "14": "relocation_info",
                    "1": "relocation_entry_count",
                    "10": "info",
                    "3": "rel_info"
                },
                "r_offset": {
                    "1": "offset_function",
                    "2": "rel_offset",
                    "13": "relocation_offset",
                    "12": "offset"
                },
                "code": {
                    "1": "function_pointer"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_info": {
                    "1": "relocation_info"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "relocation_offset"
                }
            }
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initialize_memory_000813a8(int memory_address)\n\n{\n  clear_memory(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memory_address",
                "memset_00082504": "clear_memory"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000813a8": {
                    "3": "initialize_buffer",
                    "4": "clear_memory",
                    "1": "clear_buffer",
                    "23": "initialize_memory"
                },
                "param_1": {
                    "7": "memory_address",
                    "4": "memory_pointer",
                    "2": "memory_buffer",
                    "6": "buffer",
                    "1": "memory_ptr"
                },
                "memset_00082504": {
                    "14": "clear_memory",
                    "1": "initialize_block",
                    "2": "memset",
                    "5": "clear_buffer"
                },
                "param_1 + 0x80": {
                    "1": "data_pointer",
                    "2": "end_of_memory"
                },
                "param_1 + 0x84": {
                    "1": "data_end_address"
                },
                "0x80": {
                    "2": "memory_size",
                    "1": "buffer_size"
                },
                "0": {
                    "1": "initial_value"
                },
                "*(undefined4 *)(param_1 + 0x80)": {
                    "1": "set_pointer_to_null",
                    "2": "set_pointer1"
                },
                "*(undefined4 *)(param_1 + 0x84)": {
                    "1": "set_second_value",
                    "2": "set_pointer2"
                },
                "0x84": {
                    "1": "offset"
                },
                "*(undefined4 *)(buffer + 0x80)": {
                    "1": "set_buffer_end_marker"
                },
                "*(undefined4 *)(buffer + 0x84)": {
                    "1": "set_buffer_start_marker"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "(*(undefined4 *)(param_1 + 0x80))": {
                    "1": "set_default_value1"
                },
                "(*(undefined4 *)(param_1 + 0x84))": {
                    "1": "set_default_value2"
                }
            }
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_buffer_000813c2",
            "code": "\nvoid update_buffer_000813c2(int buffer,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000813c2": {
                    "2": "update_pointer_and_value",
                    "1": "store_param_in_buffer",
                    "15": "update_buffer",
                    "3": "update_and_store_value"
                },
                "param_1": {
                    "1": "param_base_address",
                    "6": "base_address",
                    "2": "pointer",
                    "7": "buffer_address",
                    "10": "buffer"
                },
                "param_2": {
                    "4": "data",
                    "17": "new_value",
                    "1": "value_to_store",
                    "3": "value",
                    "5": "new_data"
                },
                "uVar1": {
                    "2": "current_index",
                    "1": "updated_value",
                    "11": "updated_index",
                    "5": "next_index",
                    "7": "new_index"
                },
                "*(int *)(buffer_address + 0x80)": {
                    "1": "current_index"
                },
                "*(uint *)(buffer_address + 0x84)": {
                    "1": "buffer_size"
                }
            }
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000813e4": {
                    "1": "calculate_difference_and_mask",
                    "26": "calculate_difference",
                    "2": "calculate_result"
                },
                "param_1": {
                    "4": "input",
                    "1": "data_address",
                    "25": "input_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "first_address",
                    "2": "pointer_1"
                },
                "*(int *)(param_1 + 0x10) + 0x80": {
                    "1": "first_array_element",
                    "2": "pointer_2"
                },
                "*(int *)(param_1 + 0x10) + 0x84": {
                    "1": "ptr_value_offset_2",
                    "2": "pointer_3"
                },
                "var1": {
                    "1": "pointer1"
                },
                "var2": {
                    "1": "base_ptr"
                },
                "var3": {
                    "1": "offset1"
                },
                "*(int *)(value1_address)": {
                    "1": "value1"
                },
                "*(int *)(value2_address)": {
                    "1": "value2"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "var4": {
                    "1": "offset2"
                },
                "var5": {
                    "1": "result"
                },
                "*(int *)(pointer_2) - *(int *)(pointer_3)": {
                    "2": "difference"
                },
                "0x7f": {
                    "1": "bitwise_mask"
                },
                "*(int *)(ptr1 + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(ptr1 + 0x84)": {
                    "1": "value2"
                },
                "*(*(input_value + 0x10) + 0x80)": {
                    "1": "ptr_offset_1"
                },
                "*(*(input_value + 0x10) + 0x84)": {
                    "1": "ptr_offset_2"
                },
                "*(int *)(ptrOffset1 + 0x80)": {
                    "1": "addr1"
                },
                "*(int *)(ptrOffset1 + 0x84)": {
                    "1": "addr2"
                },
                "0x10": {
                    "1": "offset_1",
                    "2": "offset"
                },
                "0x80": {
                    "1": "offset_1",
                    "2": "first_value_offset"
                },
                "0x84": {
                    "2": "second_value_offset",
                    "1": "second_offset"
                },
                "*(int *)(pointer + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(pointer + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": {
                    "3": "first_value",
                    "1": "ptr2_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "ptr3_value",
                    "3": "second_value"
                },
                "PTR_1": {
                    "1": "data_ptr"
                },
                "PTR_2": {
                    "1": "data_offset_ptr"
                },
                "PTR_3": {
                    "1": "data_offset_ptr2"
                },
                "*(int *)(derived_ptr + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(derived_ptr + 0x84)": {
                    "1": "second_value"
                },
                "*(*(param_1 + 0x10) + 0x80)": {
                    "1": "first_value"
                },
                "*(*(param_1 + 0x10) + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(first_address + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(first_address + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(ptr + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(ptr + 0x84)": {
                    "1": "value2"
                },
                "*(*(int *)(param_1 + 0x10) + 0x80)": {
                    "1": "first_value"
                },
                "*(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "second_value"
                },
                "param_1 + 0x10": {
                    "1": "ptr_offset"
                }
            }
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 update_data_00081454(int data_ptr,undefined4 new_value)\n\n{\n  int data_offset;\n  uint new_index;\n  \n  data_offset = *(int *)(data_ptr + 0x14);\n  if ((*(int *)(*(int *)(data_ptr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_offset + 0x84) == *(int *)(data_offset + 0x80))) {\n    *(undefined4 *)(*(int *)(data_ptr + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    new_index = *(int *)(data_offset + 0x80) + 1U & 0x8000007f;\n    if ((int)new_index < 0) {\n      new_index = (new_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_offset + 0x84) == new_index);\n    *(char *)(data_offset + *(int *)(data_offset + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_ptr + 0x14) + 0x80) = new_index;\n    *(undefined4 *)(*(int *)(data_ptr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "iVar1": "data_offset",
                "uVar2": "new_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081454": {
                    "1": "handle_parameter_update",
                    "8": "update_value",
                    "17": "update_data"
                },
                "param_1": {
                    "2": "data_offset",
                    "1": "src",
                    "4": "data_struct",
                    "7": "data_ptr",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "arg2",
                    "23": "new_value",
                    "2": "value",
                    "4": "new_data"
                },
                "iVar1": {
                    "1": "ptr_data",
                    "4": "data_pointer",
                    "6": "data_offset",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "3": "new_value",
                    "1": "current_value",
                    "2": "incremented_value",
                    "8": "updated_value",
                    "10": "new_index"
                },
                "PTR_xxxxx": {
                    "1": "unchanged_variable"
                },
                "PTR_PARAM_1_18": {
                    "1": "ptr2"
                },
                "PTR_PARAM_1_14": {
                    "1": "ptr3"
                },
                "param_1 + 0x14": {
                    "1": "data_pointer"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "data_value"
                },
                "param_1 + 0x18": {
                    "1": "status_pointer"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "status_value"
                },
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": {
                    "1": "ptr3"
                },
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14) << 0x1e": {
                    "1": "status_data_value_shifted"
                },
                "*(int *)(iVar1 + 0x84)": {
                    "1": "data_status"
                },
                "*(int *)(iVar1 + 0x80)": {
                    "1": "data_offset_previous"
                },
                "*(int *)(*(int *)(param_1 + 0x14) + 0x80)": {
                    "1": "data_offset_new"
                },
                "*(char *)(iVar1 + *(int *)(iVar1 + 0x80))": {
                    "1": "struct1_byte_value"
                },
                "*(uint *)(iVar1 + 0x84)": {
                    "1": "struct1_field1_value"
                },
                "*(int *)(param_1 + 0x18) + 0x14": {
                    "1": "struct2_field"
                },
                "*(int *)(param_1 + 0x18) + 0x1c": {
                    "1": "struct2_field2"
                },
                "*(int *)(iVar1 + 0x80) + 1U & 0x8000007f": {
                    "1": "new_field_value"
                },
                "*(uint *)(*(int *)(param_1 + 0x14) + 0x80)": {
                    "1": "struct1_field2_value"
                },
                "*(undefined4 *)(*(int *)(param_1 + 0x18) + 8)": {
                    "1": "struct2_field3"
                }
            }
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initialize_parameters_000814e4(undefined4 *parameters,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  param_list[1] = 0;\n  param_list[2] = 1000;\n  param_list[6] = value2;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = value3;\n  param_list[4] = value5;\n  param_list[8] = value4;\n  param_list[5] = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6",
                "param_1[1]": "param_list[1]",
                "param_1[2]": "param_list[2]",
                "param_1[6]": "param_list[6]",
                "param_1[8]": "param_list[8]",
                "param_1[4]": "param_list[4]",
                "param_1[5]": "param_list[5]"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000814e4": {
                    "8": "initialize_params",
                    "18": "initialize_parameters",
                    "2": "initialize_param",
                    "1": "initialize_function"
                },
                "param_1": {
                    "2": "output_buffer",
                    "3": "params",
                    "4": "param_array",
                    "1": "output_parameters",
                    "11": "parameters"
                },
                "param_2": {
                    "1": "param2_value",
                    "3": "input_value",
                    "2": "value",
                    "9": "value1",
                    "11": "value2"
                },
                "param_3": {
                    "5": "flag",
                    "1": "input_byte",
                    "11": "value3",
                    "2": "value_2",
                    "9": "value2"
                },
                "param_4": {
                    "1": "param_value3",
                    "2": "value_3",
                    "9": "value3",
                    "3": "value1",
                    "11": "value4"
                },
                "param_5": {
                    "2": "param5",
                    "11": "value5",
                    "1": "constant",
                    "9": "value4",
                    "3": "value2"
                },
                "param_6": {
                    "1": "value2",
                    "9": "value5",
                    "2": "param6_value",
                    "3": "value3",
                    "11": "value6"
                },
                "param_1[1]": {
                    "1": "params[1]"
                },
                "param_1[2]": {
                    "1": "params[2]"
                },
                "param_1[6]": {
                    "1": "output_array[6]"
                },
                "param_1[7]": {
                    "1": "output_array[7]"
                },
                "param_1[8]": {
                    "1": "output_array[8]"
                },
                "param_1[4]": {
                    "1": "output_array[4]"
                },
                "param_1[5]": {
                    "1": "output_buffer[5]"
                },
                "PTR_FUN_00081454_1_000857a8": {
                    "1": "function_pointer"
                },
                "*param_1": {
                    "1": "function_pointer"
                },
                "&PTR_FUN_00081454_1_000857a8": {
                    "2": "function_pointer"
                }
            }
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "set_configuration_00081508",
            "code": "\nvoid set_configuration_00081508(int config_ptr,uint divisor,undefined4 value)\n\n{\n  int offset;\n  undefined4 *config_ptr;\n  \n  check_and_set_bit_00080e18(*(undefined4 *)(config_ptr + 0x20));\n  config_ptr = *(undefined4 **)(config_ptr + 0x18);\n  config_ptr[0x48] = 0x202;\n  *config_ptr = 0xac;\n  config_ptr[1] = value;\n  config_ptr[8] = relocation_table[6].offset / divisor >> 4;\n  config_ptr[3] = 0xffffffff;\n  config_ptr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(config_ptr + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(config_ptr + 0x1c) & 0x1f);\n  offset = *(int *)(config_ptr + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(config_ptr + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *config_ptr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "set_configuration_00081508",
                "param_1": "config_ptr",
                "param_2": "divisor",
                "param_3": "value",
                "iVar1": "offset",
                "puVar2": "config_ptr",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081508": {
                    "2": "initialize_data_structure",
                    "1": "initialize_device",
                    "7": "set_configuration",
                    "4": "initialize_module"
                },
                "param_1": {
                    "1": "data_structure_pointer",
                    "2": "input_parameter",
                    "3": "config_ptr"
                },
                "param_2": {
                    "7": "divisor",
                    "2": "param_size",
                    "1": "param_2",
                    "3": "size"
                },
                "param_3": {
                    "3": "param_value",
                    "1": "param_c",
                    "2": "rel_offset",
                    "6": "initial_value",
                    "10": "value"
                },
                "iVar1": {
                    "1": "section_index",
                    "2": "temp_var",
                    "4": "var1",
                    "6": "offset"
                },
                "puVar2": {
                    "2": "module_data",
                    "1": "pointer_1",
                    "3": "data_ptr",
                    "5": "config_ptr"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "module_relocation_array",
                    "2": "relocation_array"
                },
                "r_offset": {
                    "1": "relocation_offset"
                },
                "configAddress": {
                    "1": "config_addr"
                },
                "configData": {
                    "1": "config_data"
                },
                "relocationTable": {
                    "1": "relocation_table"
                },
                "subAddress": {
                    "1": "sub_addr"
                },
                "*((uint)(int)(char)*(byte *)(moduleOffset + 0x1c) >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_set_data_000815d4",
            "code": "\nundefined4 * initialize_and_set_data_000815d4(undefined4 *output_array,undefined4 input_value)\n\n{\n  initialize_parameters();\n  *output_array = &PTR_data_to_update;\n  output_ptr[9] = input_value;\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_set_data_000815d4",
                "param_1": "output_array",
                "param_2": "input_value",
                "initialize_parameters_000814e4": "initialize_parameters",
                "param_1[9]": "output_ptr[9]",
                "update_data_00081454_1_000857d8": "data_to_update"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815d4": {
                    "2": "initialize_and_assign_data",
                    "1": "initialize_and_set_parameters",
                    "4": "initialize_and_update_data",
                    "5": "initialize_and_set_data"
                },
                "param_1": {
                    "8": "output_array",
                    "3": "data_array",
                    "1": "output_buffer",
                    "2": "output_parameters",
                    "5": "output"
                },
                "param_2": {
                    "5": "input_parameter",
                    "4": "input",
                    "1": "parameter_value",
                    "9": "input_value",
                    "2": "input_param",
                    "6": "input_data"
                },
                "initialize_parameters_000814e4": {
                    "2": "initialize_params",
                    "1": "initialize_data",
                    "8": "initialize_parameters"
                },
                "PTR_update_data_00081454_1_000857d8": {
                    "1": "data_update_pointer",
                    "3": "update_data_ptr",
                    "4": "update_data"
                },
                "param_1[9]": {
                    "1": "params_output[9]",
                    "2": "output_ptr[9]"
                },
                "update_data_00081454_1_000857d8": {
                    "1": "data_to_update"
                },
                "*param_1": {
                    "3": "output_ptr",
                    "1": "output_pointer_value",
                    "2": "data_array_pointer"
                },
                "&PTR_update_data_00081454_1_000857d8": {
                    "1": "update_data_array_ptr"
                }
            }
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combine_values_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815f8": {
                    "2": "combine_params",
                    "1": "combine_param_and_shift_left",
                    "15": "combine_values"
                },
                "param_1": {
                    "2": "input_value1",
                    "1": "input1",
                    "7": "input_value",
                    "4": "shifted_value",
                    "10": "value1"
                },
                "param_2": {
                    "1": "bit_mask",
                    "2": "flags",
                    "4": "original_value",
                    "10": "value2"
                },
                "param_3": {
                    "4": "result",
                    "1": "combined_value",
                    "2": "shifted_value"
                },
                "return_value": {
                    "2": "combined_value"
                },
                "param_1 << 8": {
                    "2": "shifted_value"
                },
                "<original_function_name>": {
                    "1": "merge_values"
                },
                "param_4": {
                    "1": "new_param_name_2"
                },
                "param_2 | param_1 << 8": {
                    "1": "combined_values"
                }
            }
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "relocate_and_return_param_000815fe",
            "code": "\nundefined4 * relocate_and_return_param_000815fe(undefined4 *param)\n\n{\n  relocate_function(*param);\n  return param;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "relocate_and_return_param_000815fe",
                "param_1": "param",
                "relocate_function_00081e04": "relocate_function"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815fe": {
                    "4": "relocate_function",
                    "11": "relocate_and_return_param",
                    "3": "relocate",
                    "1": "relocate_param",
                    "5": "relocate_and_return"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input_pointer",
                    "4": "param",
                    "3": "input_param"
                },
                "*param_1": {
                    "1": "dereferenced_argument"
                },
                "relocate_function_00081e04": {
                    "2": "relocate_function",
                    "1": "relocate"
                }
            }
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_parameters_0008160c",
            "code": "\nvoid reset_parameters_0008160c(int *parameters)\n\n{\n  if (*parameters != 0) {\n    relocate_function();\n  }\n  *parameters = 0;\n  variable2 = 0;\n  variable1 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_parameters_0008160c",
                "param_1": "parameters",
                "param_1[1]": "variable1",
                "param_1[2]": "variable2",
                "relocate_function_00081e04": "relocate_function"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008160c": {
                    "1": "reset_values",
                    "11": "reset_parameters",
                    "4": "reset_function",
                    "2": "reset_params",
                    "7": "reset_variables"
                },
                "param_1": {
                    "3": "param",
                    "1": "input_ptr",
                    "9": "parameters"
                },
                "param_1[1]": {
                    "1": "variables[1]",
                    "2": "variable1"
                },
                "param_1[2]": {
                    "1": "data[2]",
                    "2": "variable2"
                },
                "relocate_function_00081e04": {
                    "8": "relocate_function"
                },
                "*param_1": {
                    "2": "value",
                    "1": "parameters[0]"
                }
            }
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "relocate_and_copy_symbols_00081622",
            "code": "\nint relocate_and_copy_symbols_00081622(int *symbol_table,int symbol_count,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = relocate_and_copy_symbols_00081622_000825a0(*symbol_table,symbol_count + 1,param3,param4,param4);\n  if (result != 0) {\n    *symbol_table = result;\n    symbol_table[1] = symbol_count;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "relocate_and_copy_symbols_00081622",
                "param_1": "symbol_table",
                "param_2": "symbol_count",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081622": {
                    "1": "relocate_symbols_and_copy",
                    "2": "relocate_and_copy",
                    "25": "relocate_and_copy_symbols"
                },
                "param_1": {
                    "1": "symbol_address",
                    "4": "symbols",
                    "3": "symbol_array",
                    "2": "symbol_list",
                    "12": "symbol_table"
                },
                "param_2": {
                    "1": "symbol_size",
                    "14": "symbol_count",
                    "5": "num_symbols",
                    "8": "size"
                },
                "param_3": {
                    "13": "param3",
                    "1": "param",
                    "2": "param1",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "arg2",
                    "2": "destination_address",
                    "13": "param4",
                    "7": "param_4"
                },
                "iVar1": {
                    "29": "result",
                    "1": "error_code"
                }
            }
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "relocate_and_copy_symbols_0008163a",
            "code": "\nundefined4 relocate_and_copy_symbols_0008163a(int *symbols,uint size)\n\n{\n  int result;\n  \n  if ((*symbols == 0) || ((uint)symbols[1] < size)) {\n    result = relocate_and_copy_symbols_0008163a_00081622(symbols);\n    if (result == 0) {\n      return 0;\n    }\n    if (symbols[2] == 0) {\n      *(undefined *)*symbols = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "relocate_and_copy_symbols_0008163a",
                "param_1": "symbols",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008163a": {
                    "2": "check_and_copy_symbols",
                    "1": "copy_if_null_or_short",
                    "3": "check_and_relocate",
                    "7": "relocate_and_copy_symbols"
                },
                "param_1": {
                    "1": "input_parameters",
                    "4": "symbols",
                    "2": "buffer",
                    "3": "symbol_table"
                },
                "param_2": {
                    "5": "threshold",
                    "1": "symbol_size",
                    "4": "length",
                    "2": "buffer_size",
                    "7": "size"
                },
                "iVar1": {
                    "1": "copy_result",
                    "22": "result",
                    "4": "relocation_result",
                    "2": "relocation_success"
                }
            }
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "relocate_and_copy_symbols_0008165c",
            "code": "\nundefined4 * relocate_and_copy_symbols_0008165c(undefined4 *symbol_table,undefined4 source_string,undefined4 symbol)\n\n{\n  int result;\n  \n  result = relocate_and_copy_symbols_0008165c_0008163a(symbol_table,symbol);\n  if (result == 0) {\n    reset_parameters(symbol_table);\n  }\n  else {\n    symbol_table[2] = symbol;\n    copy_string(*symbol_table,source_string);\n  }\n  return symbol_table;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "relocate_and_copy_symbols_0008165c",
                "param_1": "symbol_table",
                "param_2": "source_string",
                "param_3": "symbol",
                "iVar1": "result",
                "reset_parameters_0008160c": "reset_parameters",
                "copy_string_00082994": "copy_string"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008165c": {
                    "1": "process_symbols",
                    "3": "relocate_symbols_and_copy",
                    "2": "process_and_copy_symbols",
                    "15": "relocate_and_copy_symbols"
                },
                "param_1": {
                    "3": "symbol_array",
                    "2": "output",
                    "1": "output_buffer",
                    "6": "result",
                    "8": "symbol_table"
                },
                "param_2": {
                    "2": "source",
                    "21": "source_string",
                    "3": "string",
                    "1": "param"
                },
                "param_3": {
                    "4": "destination_string",
                    "2": "new_symbol",
                    "3": "target_string",
                    "1": "length",
                    "12": "symbol"
                },
                "iVar1": {
                    "1": "relocation_result",
                    "3": "error_code",
                    "2": "result_code",
                    "17": "result"
                },
                "reset_parameters_0008160c": {
                    "1": "reset_parameters"
                },
                "copy_string_00082994": {
                    "1": "copy_string"
                }
            }
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_param_array_00081682",
            "code": "\nundefined4 * initialize_param_array_00081682(undefined4 *result_array,int input_value)\n\n{\n  undefined4 leading_zeros_count;\n  \n  *result_array = 0;\n  result_array[1] = 0;\n  result_array[2] = 0;\n  if (input_value != 0) {\n    leading_zeros_count = count_leading_zeros(input_value);\n    relocate_and_copy_symbols(result_array,input_value,leading_zeros_count);\n  }\n  return result_array;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_param_array_00081682",
                "param_1": "result_array",
                "param_2": "input_value",
                "uVar1": "leading_zeros_count",
                "count_leading_zeros_00082a50": "count_leading_zeros",
                "relocate_and_copy_symbols_0008165c": "relocate_and_copy_symbols"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081682": {
                    "1": "relocate_and_copy_symbols",
                    "3": "initialize_and_copy",
                    "4": "initialize_and_copy_symbols",
                    "2": "copy_symbols_and_count_zeros",
                    "6": "initialize_param_array"
                },
                "param_1": {
                    "7": "result_array",
                    "2": "result",
                    "1": "array_ptr",
                    "3": "param_array"
                },
                "param_2": {
                    "1": "input_param",
                    "24": "input_value",
                    "2": "value"
                },
                "uVar1": {
                    "2": "leading_zeroes_count",
                    "7": "leading_zeros",
                    "1": "count_of_leading_zeros",
                    "16": "leading_zeros_count"
                },
                "count_leading_zeros_00082a50": {
                    "4": "count_leading_zeros"
                },
                "relocate_and_copy_symbols_0008165c": {
                    "4": "relocate_and_copy_symbols",
                    "1": "copy_symbols"
                }
            }
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "main_loop_000816a8",
            "code": "\nvoid main_loop_000816a8(void)\n\n{\n  initialize_data();\n  initialize_and_configure();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initialize_system();\n  do {\n    process_data();\n    check_and_execute_functions();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "main_loop_000816a8",
                "initialize_data_000816d4": "initialize_data",
                "initialize_and_configure_00080ae4": "initialize_and_configure",
                "initialize_system_000804a8": "initialize_system",
                "process_data_000805d0": "process_data",
                "check_and_execute_functions_00080ce0": "check_and_execute_functions"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000816a8": {
                    "4": "run_main_loop",
                    "1": "initialize_and_process_data",
                    "10": "main_loop",
                    "7": "process_data_loop",
                    "3": "continuous_data_processing"
                },
                "initialize_data_000816d4": {
                    "28": "initialize_data",
                    "1": "initialize_data_structures"
                },
                "initialize_and_configure_00080ae4": {
                    "26": "initialize_and_configure",
                    "3": "initialize_and_configure_system",
                    "1": "initialize_and_configure_components"
                },
                "FUNC_000816a6": {
                    "1": "perform_initialization",
                    "3": "process_data",
                    "2": "execute_initialization"
                },
                "FUNC_0008120c": {
                    "1": "set_process_mode",
                    "12": "set_mode",
                    "3": "set_parameter",
                    "2": "set_initial_value"
                },
                "initialize_system_000804a8": {
                    "31": "initialize_system"
                },
                "process_data_000805d0": {
                    "31": "process_data"
                },
                "check_and_execute_functions_00080ce0": {
                    "2": "execute_functions",
                    "27": "check_and_execute_functions"
                }
            }
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initialize_data_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000816d4": {
                    "1": "initialize_value",
                    "3": "initialize_default_settings",
                    "8": "initialize_memory",
                    "12": "initialize_data",
                    "2": "set_initial_value"
                },
                "_DAT_400e1a54": {
                    "1": "base_memory_address",
                    "3": "memory_address",
                    "2": "memory_pointer"
                },
                "PTR_400e1a54": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_value_00081714",
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081714": {
                    "1": "get_global_data_value",
                    "4": "get_data",
                    "3": "get_global_value",
                    "10": "get_data_value",
                    "2": "get_dat_value"
                },
                "DAT_20071184": {
                    "4": "global_value",
                    "1": "data_from_memory",
                    "3": "global_variable"
                }
            }
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculate_float_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint xor_result;\n  uint temp2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool is_equal;\n  \n  xor_result = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  is_equal = result1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result1 == input4;\n  }\n  shifted_input1 = (int)result1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result1 = xor_result;\n      if (shifted_input1 == -1) {\n        result1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        xor_result = result1;\n      }\n      is_equal = (result1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (xor_result & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result1 == xor_result;\n      }\n      if (!is_equal) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ xor_result) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = xor_result;\n      }\n      return input1;\n    }\n    if (input1 != xor_result) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      xor_result = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        xor_result = xor_result | 0x80000000;\n      }\n      return xor_result;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  is_equal = difference != 0;\n  result2 = result1;\n  if (is_equal && result1 <= input4) {\n    result2 = result1 + difference;\n  }\n  if (is_equal && result1 <= input4) {\n    xor_result = xor_result ^ input1;\n  }\n  if (is_equal && result1 <= input4) {\n    input1 = input1 ^ xor_result;\n  }\n  if (is_equal && result1 <= input4) {\n    xor_result = xor_result ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  temp2 = xor_result & 0xffffff | 0x800000;\n  if ((xor_result & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (result2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    result1 = -result1 - (uint)is_equal;\n  }\n  if (result1 < 0x800000) {\n    xor_result = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result1 = result1 * 2 + (uint)(xor_result != 0);\n    xor_result = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = leading_zeros_count(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)xor_result < (int)difference) {\n        result1 = result1 >> (-(xor_result - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (xor_result - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    xor_result = result2 - 1;\n    if (0xffffff < result1) {\n      xor_result = result1 & 1;\n      result1 = result1 >> 1;\n      temp2 = (uint)(xor_result != 0) << 0x1f | temp2 >> 1;\n      xor_result = result2;\n      if (0xfd < result2) goto LAB_0008186a;\n    }\n  }\n  result1 = result1 + xor_result * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "xor_result",
                "uVar4": "temp2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "is_equal",
                "LZCOUNT": "leading_zeros_count"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081730": {
                    "1": "calculate_result",
                    "2": "calculate_floating_point_value",
                    "9": "calculate_float",
                    "8": "calculate_floating_point"
                },
                "param_1": {
                    "5": "input_value",
                    "1": "multiplier",
                    "2": "input_1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "input_float2",
                    "2": "input_2",
                    "3": "mask",
                    "7": "input2"
                },
                "param_3": {
                    "1": "modifier",
                    "2": "unused",
                    "6": "input3"
                },
                "param_4": {
                    "1": "mantissa_b",
                    "5": "result",
                    "2": "shift_amount",
                    "6": "input4"
                },
                "iVar1": {
                    "1": "shifted_multiplier",
                    "2": "left_shifted_value",
                    "3": "shift_amount1",
                    "4": "shifted_input1"
                },
                "iVar2": {
                    "1": "upper_bits_shifted",
                    "4": "shifted_input2",
                    "3": "shift_amount2"
                },
                "uVar3": {
                    "1": "shifted_value_xor",
                    "3": "temp1",
                    "2": "masked_input1"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "result2",
                    "3": "temp2"
                },
                "uVar5": {
                    "1": "u_var5",
                    "3": "result1",
                    "2": "result"
                },
                "uVar6": {
                    "1": "temp_result_3",
                    "2": "shift_amount",
                    "3": "result2"
                },
                "uVar7": {
                    "1": "u_var7",
                    "2": "shift_difference",
                    "22": "difference"
                },
                "bVar8": {
                    "1": "is_zero_or_negative",
                    "4": "is_zero",
                    "3": "is_condition_met",
                    "2": "is_true",
                    "10": "is_equal"
                },
                "uVar9": {
                    "1": "temp1"
                },
                "uVar10": {
                    "1": "temp2"
                },
                "uVar3_temp": {
                    "1": "temp_result1"
                },
                "uVar4_temp": {
                    "1": "temp_result2"
                },
                "uVar5_temp": {
                    "1": "temp_abs_operand1"
                },
                "uVar3_final": {
                    "1": "final_result1"
                },
                "uVar4_final": {
                    "1": "final_result2"
                },
                "LZCOUNT": {
                    "1": "leading_zero_bit_count",
                    "2": "leading_zeros_count"
                },
                "new_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "new_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "new_variable_name_n": {
                    "1": "new_variable_name_n"
                }
            }
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_float_00081734",
            "code": "\nuint calculate_float_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint temp2;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == input4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result2;\n  is_zero = difference != 0;\n  temp2 = result2;\n  if (is_zero && result2 <= input4) {\n    temp2 = result2 + difference;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp2 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = temp2 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp2 = leading_zero_count(result2) - 8;\n      result2 = result2 << (temp2 & 0xff);\n      if ((int)difference < (int)temp2) {\n        result2 = result2 >> (-(difference - temp2) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - temp2) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = temp2 - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp2",
                "uVar6": "difference",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081734": {
                    "1": "check_float_equality",
                    "3": "reverse_bits",
                    "2": "calculate_float_value",
                    "14": "calculate_float",
                    "5": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_float_a",
                    "2": "value1",
                    "4": "num1",
                    "13": "input1"
                },
                "param_2": {
                    "1": "second_float",
                    "13": "input2",
                    "2": "value2",
                    "4": "num2"
                },
                "param_3": {
                    "1": "value1",
                    "2": "value3",
                    "10": "input3"
                },
                "param_4": {
                    "1": "input2_shift",
                    "2": "result",
                    "10": "input4"
                },
                "uVar3": {
                    "1": "bitmask1",
                    "9": "result1",
                    "3": "result"
                },
                "uVar4": {
                    "1": "shifted_num1_copy",
                    "2": "shifted_num1",
                    "3": "temp1",
                    "5": "result2"
                },
                "uVar5": {
                    "1": "difference",
                    "2": "count",
                    "3": "temp2"
                },
                "uVar6": {
                    "1": "new_abs_diff",
                    "3": "diff",
                    "18": "difference"
                },
                "bVar7": {
                    "1": "check",
                    "19": "is_zero",
                    "6": "is_equal"
                },
                "iVar1": {
                    "1": "shift_amount",
                    "3": "shifted_value1",
                    "8": "shifted_input1",
                    "2": "shifted_num1"
                },
                "iVar2": {
                    "1": "input_shifted2",
                    "3": "shifted_value2",
                    "2": "shifted_num2",
                    "8": "shifted_input2"
                },
                "LZCOUNT": {
                    "6": "leading_zero_count"
                },
                "uVar8": {
                    "1": "result"
                }
            }
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_result_00081894",
            "code": "\nuint calculate_result_00081894(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_result_00081894",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081894": {
                    "1": "calculate_modified_value",
                    "2": "reverse_bits",
                    "6": "calculate_result"
                },
                "param_1": {
                    "11": "input",
                    "16": "input_value",
                    "2": "input_number",
                    "1": "input_data"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "2": "num_bits",
                    "3": "leading_zero_count",
                    "9": "leading_zeros",
                    "6": "result"
                },
                "uVar2": {
                    "2": "shifted_input",
                    "1": "new_temp",
                    "18": "shift_amount"
                },
                "iVar3": {
                    "3": "result",
                    "1": "multiplier",
                    "6": "offset",
                    "7": "constant",
                    "2": "constant_value"
                },
                "uVar4": {
                    "1": "conditional_value",
                    "9": "mask",
                    "4": "carry"
                },
                "uVarX": {
                    "1": "result"
                },
                "uVar3": {
                    "1": "result"
                },
                "uVar1_temp": {
                    "1": "tmp1"
                },
                "uVar2_temp": {
                    "1": "tmp2"
                },
                "uVar3_temp": {
                    "1": "tmp3"
                },
                "uVar4_temp": {
                    "1": "tmp4"
                },
                "uVar1_final": {
                    "1": "result1"
                },
                "uVar2_final": {
                    "1": "result2"
                },
                "uVar5": {
                    "2": "mask",
                    "1": "shifted_value"
                },
                "uVar6": {
                    "2": "temp",
                    "1": "shifted_offset"
                },
                "uVar7": {
                    "1": "shifted_input"
                },
                "uVar8": {
                    "1": "mask2"
                },
                "uVar2 & 0xff": {
                    "1": "shift_value1"
                },
                "uVar1 & 0xff": {
                    "1": "shift_amount_mod"
                },
                "uVar2 * -0x800000 + 0x4a800000": {
                    "1": "calculation"
                },
                "param_1 << (uVar1 + 0x18)": {
                    "1": "shifted_value1"
                },
                "param_1 >> (0x20 - (uVar1 + 0x18) & 0xff)": {
                    "1": "shifted_value2"
                },
                "uVar2 >> 0x1f": {
                    "1": "right_shift"
                },
                "int(uVar2 << 0x01)": {
                    "1": "shifted_value3"
                },
                "uVar1 & ~(uVar2 >> 0x1f)": {
                    "1": "result1"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_temp_value_zero"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_mask_full"
                },
                "uVar1 > 7": {
                    "1": "is_greater_than7"
                },
                "uVar1 <= 7": {
                    "1": "is_less_than_or_equal7"
                },
                "0x20 - uVar2 & 0xff": {
                    "1": "shift_value2"
                },
                "param_1 << (uVar2 & 0xff)": {
                    "1": "shifted_input1"
                },
                "(0U >> (0x20 - uVar2 & 0xff))": {
                    "1": "shifted_zero"
                },
                "0x7fffffff < uVar4": {
                    "1": "is_overflow"
                },
                "uVar1 = uVar1 & 0xfffffffe": {
                    "1": "mask_even"
                },
                "(param_1 >> (0x20 - (uVar1 + 0x18) & 0xff))": {
                    "1": "shifted_input2"
                },
                "uVar1 = iVar3 + ...": {
                    "1": "result"
                },
                "uVar2 = param_1 << ...": {
                    "1": "temp_value"
                },
                "uVar1_new": {
                    "1": "leading_zero_count_shifted"
                },
                "uVar2_new": {
                    "1": "shifted_input"
                },
                "uVar1_update": {
                    "1": "leading_zero_count_updated"
                },
                "uVar4_check": {
                    "1": "partial_result_check"
                },
                "uVar2_update": {
                    "1": "shifted_input_updated"
                },
                "uVar2_bitwise": {
                    "1": "shifted_input_bitwise"
                },
                "uVar2_check": {
                    "1": "shifted_input_check"
                },
                "uVar2_mask": {
                    "1": "shifted_input_mask"
                }
            }
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "count_leading_zeros_0008189c",
            "code": "\nuint count_leading_zeros_0008189c(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeroes(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "count_leading_zeros_0008189c",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeroes"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008189c": {
                    "1": "calculate_integer_value",
                    "2": "decode_integer",
                    "3": "count_leading_zeros"
                },
                "param_1": {
                    "12": "input",
                    "1": "unsigned_value",
                    "7": "input_value",
                    "3": "value",
                    "2": "input_number",
                    "4": "number"
                },
                "uVar1": {
                    "1": "bit_count",
                    "4": "leading_zeroes",
                    "20": "leading_zeros",
                    "2": "leading_zero_count"
                },
                "uVar2": {
                    "1": "shifted_bits",
                    "4": "shifted_value",
                    "23": "shift_amount",
                    "2": "shift"
                },
                "uVar3": {
                    "1": "result",
                    "21": "sign_bit",
                    "5": "is_negative",
                    "2": "sign"
                },
                "iVar4": {
                    "1": "multiplier",
                    "4": "adjusted_value",
                    "3": "offset",
                    "18": "result"
                },
                "uVar1_1": {
                    "1": "leading_zeros_minus8"
                },
                "uVar1_2": {
                    "1": "leading_zeros_minus8_and_mask"
                },
                "uVar3_1": {
                    "1": "shifted_input"
                },
                "uVar3_2": {
                    "1": "shifted_input_with_carry"
                },
                "uVar3_3": {
                    "1": "shifted_input_with_carry_with_check"
                },
                "uVar3_4": {
                    "1": "shifted_input_with_mask"
                },
                "uVar3_5": {
                    "1": "adjusted_result"
                },
                "uVar1_updated": {
                    "1": "leading_zeros_minus_8"
                },
                "uVar3_updated": {
                    "1": "modified_sign_bit"
                },
                "uVar1_shifted": {
                    "1": "shifted_leading_zeros"
                },
                "uVar3_with_shifted_leading_zeros": {
                    "1": "adjusted_sign_bit"
                },
                "uVar3_with_cleared_bit": {
                    "1": "cleared_bit_in_adjusted_sign_bit"
                },
                "uVar2_shifted": {
                    "1": "shifted_input"
                },
                "uVar3_without_cleared_bit": {
                    "1": "result_without_cleared_bit"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeroes"
                }
            }
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculate_floating_point_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint temp1;\n  int sum;\n  int diff;\n  uint product;\n  int temp5;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  temp1 = input1 >> 0x17 & 0xff;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (temp1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((temp1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = temp1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      temp1 = temp1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = temp1 + param4;\n  temp_result = input1 ^ input2;\n  temp1 = input1 << 9;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (temp1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    is_zero = diff == 0;\n    temp5 = diff;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,diff);\n      temp5 = 0xff - diff;\n      is_zero = diff == 0xff;\n    }\n    if (!is_zero && temp5 < 0 == is_negative) {\n      result = result | diff * 0x800000;\n    }\n    if (!is_zero && temp5 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(diff,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    temp1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(temp1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    temp1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)temp1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == SCARRY4(temp_result,0x19)) {\n      temp1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      temp1 = ((uint)((result & 0x80000000) != 0) << 0x1f | temp1 >> 1) + (uint)((byte)temp1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        temp1 = temp1 & ~(temp_result >> 0x1f);\n      }\n      return temp1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "temp1",
                "uVar6": "product",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "temp5",
                "uVar8": "temp_result",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "lVar1": "product"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081944": {
                    "1": "float_to_u_int",
                    "2": "calculate_float_value",
                    "7": "calculate_float",
                    "11": "calculate_floating_point"
                },
                "param_1": {
                    "1": "first_integer",
                    "2": "input_value1",
                    "5": "value1",
                    "11": "input1"
                },
                "param_2": {
                    "11": "input2",
                    "2": "input_2",
                    "1": "second_operand",
                    "5": "value2"
                },
                "param_3": {
                    "1": "param",
                    "7": "param3",
                    "2": "precision",
                    "3": "input3"
                },
                "param_4": {
                    "1": "carry_flag",
                    "2": "input4",
                    "7": "param4"
                },
                "uVar2": {
                    "1": "result_1",
                    "3": "result1",
                    "24": "result"
                },
                "uVar3": {
                    "1": "first_integer_shifted",
                    "3": "temp1",
                    "2": "shift1"
                },
                "uVar6": {
                    "1": "low_bits1",
                    "2": "product_low",
                    "3": "multiplied_result",
                    "8": "product"
                },
                "iVar4": {
                    "1": "shift_count_sum",
                    "2": "temp3",
                    "12": "sum"
                },
                "iVar5": {
                    "1": "adjusted_exponent",
                    "2": "temp4",
                    "6": "diff"
                },
                "iVar7": {
                    "1": "temp3",
                    "2": "difference",
                    "3": "temp5"
                },
                "uVar8": {
                    "3": "temp_result",
                    "1": "result_2",
                    "2": "result2"
                },
                "bVar9": {
                    "1": "is_zero_1",
                    "3": "condition1",
                    "12": "is_zero",
                    "5": "is_zero1"
                },
                "bVar10": {
                    "1": "is_zero_2",
                    "10": "is_negative",
                    "4": "is_negative1",
                    "3": "is_overflow"
                },
                "lVar1": {
                    "1": "mul_result64",
                    "2": "mul_product",
                    "4": "product"
                },
                "bVar15": {
                    "1": "is_sum_negative"
                },
                "uVar16": {
                    "1": "temp_shifted_result1"
                },
                "uVar17": {
                    "1": "temp_shifted_result2"
                }
            }
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_00081bf4",
            "code": "\nuint check_overflow_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081bf4": {
                    "11": "check_overflow",
                    "1": "check_param_conditions",
                    "5": "calculate_result",
                    "2": "check_overflow_and_sign"
                },
                "param_1": {
                    "10": "input1",
                    "1": "output_number",
                    "2": "num1",
                    "5": "result"
                },
                "param_2": {
                    "11": "input2",
                    "1": "value2",
                    "3": "num2",
                    "2": "result",
                    "12": "input_2"
                },
                "bVar1": {
                    "19": "is_negative",
                    "1": "is_positive",
                    "3": "is_negative_result",
                    "2": "is_overflow"
                },
                "uVar2": {
                    "1": "value1_times_2",
                    "2": "double_input1",
                    "4": "input_1_times_2",
                    "3": "input1_times2"
                },
                "uVar3": {
                    "1": "num2_times_2",
                    "2": "double_input2",
                    "4": "input_2_times_2",
                    "3": "input2_times2"
                },
                "uVar4": {
                    "1": "combined_params",
                    "2": "combined_num",
                    "6": "combined_input",
                    "7": "combined_inputs",
                    "3": "combined"
                },
                "bVar5": {
                    "1": "flag2",
                    "3": "is_zero_result",
                    "22": "is_zero"
                },
                "param_1_times_neg2": {
                    "1": "result_times_neg2"
                },
                "return": {
                    "1": "result"
                },
                "param_1 & 0x7fffff": {
                    "1": "input_1_without_sign"
                },
                "param_2 & 0x7fffff": {
                    "1": "num2_lower_bits"
                },
                "param_1 ^ param_2": {
                    "1": "xor_inputs"
                },
                "param_1 + param_2 * -2": {
                    "1": "sum_double_input_1_negative_double_input_2"
                }
            }
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_params_00081c54",
            "code": "\nvoid concatenate_params_00081c54(undefined4 destination,undefined4 source)\n\n{\n  concatenate_params_00081c54_00081c5c(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_params_00081c54",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081c54": {
                    "17": "concatenate_params",
                    "13": "concatenate_parameters"
                },
                "param_1": {
                    "1": "input1",
                    "7": "destination",
                    "3": "dest",
                    "6": "source_param",
                    "4": "first_parameter",
                    "5": "first_param"
                },
                "param_2": {
                    "1": "source_param",
                    "3": "target_param",
                    "8": "source",
                    "5": "second_param",
                    "4": "second_parameter",
                    "2": "src"
                },
                "<original_function_name>": {
                    "1": "concatenate_params"
                },
                "<param_1>": {
                    "1": "source_param"
                },
                "<param_2>": {
                    "1": "target_param"
                }
            }
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 first_param,undefined4 second_param)\n\n{\n  check_overflow_00081bf4();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081c5c": {
                    "1": "concatenate_integers",
                    "14": "concatenate_params",
                    "6": "concatenate_parameters",
                    "2": "concatenate_values"
                },
                "param_1": {
                    "1": "lower32_bits",
                    "2": "value1",
                    "9": "first_parameter",
                    "12": "first_param"
                },
                "param_2": {
                    "1": "higher_32_bits",
                    "12": "second_param",
                    "9": "second_parameter",
                    "2": "value2"
                }
            }
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_concatenation_result_00081c94",
            "code": "\nbool check_concatenation_result_00081c94(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  concatenate_params();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_concatenation_result_00081c94",
                "in_ZR": "is_zero",
                "in_CY": "is_carry",
                "concatenate_params_00081c5c": "concatenate_params"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081c94": {
                    "1": "check_inverted_flags",
                    "2": "is_concatenation_successful",
                    "10": "check_concatenation_result"
                },
                "in_ZR": {
                    "7": "is_zero_result",
                    "1": "concatenation_result_zero",
                    "10": "is_zero",
                    "3": "is_zero_return",
                    "6": "zero_flag"
                },
                "in_CY": {
                    "11": "is_carry",
                    "2": "is_carry_set",
                    "1": "is_not_carry",
                    "3": "is_carry_result",
                    "7": "carry_flag"
                },
                "FUM_00081c94": {
                    "1": "check_concatenation_result"
                },
                "concatenate_params_00081c5c": {
                    "1": "concatenate_params"
                }
            }
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_concatenation_result_00081ca8",
            "code": "\nbool check_concatenation_result_00081ca8(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  concatenate_parameters();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_concatenation_result_00081ca8",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry",
                "concatenate_params_00081c54": "concatenate_parameters"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081ca8": {
                    "1": "check_conditions_and_concatenate",
                    "11": "check_concatenation_result",
                    "2": "check_condition",
                    "3": "check_concatenated_params"
                },
                "in_ZR": {
                    "1": "is_zero_return",
                    "7": "is_zero",
                    "2": "concatenation_result_zero",
                    "4": "zero_flag"
                },
                "in_CY": {
                    "1": "is_carry_check_result",
                    "4": "carry_flag",
                    "7": "is_carry",
                    "3": "is_carry_flag_set",
                    "2": "concatenation_result_is_carry"
                },
                "concatenate_params_00081c54": {
                    "1": "concatenate_parameters"
                }
            }
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_to_signed_integer_00081cd0",
            "code": "\nuint convert_to_signed_integer_00081cd0(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_integer_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081cd0": {
                    "1": "convert_negative_to_positive",
                    "2": "decode_signed_integer",
                    "5": "convert_to_signed_integer",
                    "3": "convert_to_signed_int"
                },
                "param_1": {
                    "7": "input",
                    "2": "unsigned_value",
                    "14": "input_value",
                    "1": "unsigned_int"
                },
                "uVar1": {
                    "1": "shift_count",
                    "17": "shifted_value",
                    "3": "result",
                    "5": "shifted_input"
                },
                "uVar2": {
                    "1": "bit_shift",
                    "3": "shift_amount",
                    "22": "difference"
                },
                "uVar3": {
                    "1": "shifted_num",
                    "5": "result"
                },
                "uVar1_2": {
                    "1": "shifted_value_2"
                },
                "param_1_2": {
                    "1": "signed_value"
                },
                "uVar4": {
                    "1": "result"
                },
                "uVar1_temp": {
                    "1": "shifted_and_masked_input"
                },
                "param_1_temp": {
                    "1": "mask"
                },
                "result": {
                    "1": "decoded_value"
                },
                "uVar5": {
                    "1": "output"
                }
            }
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "reverse_bits_00081d1c",
            "code": "\nuint reverse_bits_00081d1c(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "reverse_bits_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081d1c": {
                    "4": "extract_bits",
                    "1": "decode_bits",
                    "3": "calculate_shifted_value",
                    "6": "reverse_bits"
                },
                "param_1": {
                    "10": "input",
                    "14": "input_value",
                    "1": "param",
                    "4": "input_number"
                },
                "uVar1": {
                    "7": "shifted_value",
                    "1": "shift",
                    "17": "shift_amount",
                    "2": "result"
                },
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0x7f000000": {
                    "1": "max_threshold"
                },
                "0x9e": {
                    "1": "shift_constant"
                },
                "0x18": {
                    "1": "bit_shift"
                },
                "0xff": {
                    "1": "mask"
                },
                "0xffffff9f": {
                    "1": "exception_value"
                },
                "0x7fffff": {
                    "1": "lower_bits_mask"
                },
                "0xffffffff": {
                    "1": "error_flag"
                }
            }
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 update_relocation_entry_00081d5c(dword new_value1,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  \n  if (current_relocation.offset == 0) {\n    current_relocation.offset = 0x20070184;\n  }\n  index = *(uint *)(current_relocation.offset + 4);\n  relocation_entry = (dword *)current_relocation.offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)relocate_symbols_00081df4(400);\n    if (relocation_entry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocation_entry = current_relocation.offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    current_relocation.offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_value1;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "pdVar1": "relocation_entry",
                "uVar2": "index",
                "uVar3": "bit_mask",
                "Elf32_Rel_ARRAY_20070000[48]": "current_relocation",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081d5c": {
                    "1": "update_rel_array_entry",
                    "3": "update_relocation_table",
                    "16": "update_relocation_entry",
                    "2": "process_relocation"
                },
                "param_1": {
                    "7": "address",
                    "4": "new_value",
                    "8": "new_value1",
                    "5": "target_address",
                    "2": "new_address",
                    "1": "input_value1"
                },
                "param_2": {
                    "6": "new_value",
                    "1": "new_offset",
                    "8": "new_value2",
                    "5": "value",
                    "3": "source_address",
                    "2": "value2"
                },
                "param_3": {
                    "5": "flag",
                    "8": "new_value3",
                    "1": "input_value3",
                    "2": "value2",
                    "4": "offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "reloc_table",
                    "8": "relocation_entries",
                    "6": "relocation_table",
                    "3": "rel_array"
                },
                "pdVar1": {
                    "1": "relocated_entry",
                    "7": "current_entry",
                    "12": "relocation_entry",
                    "2": "entry"
                },
                "uVar2": {
                    "6": "entry_index",
                    "1": "offset",
                    "19": "index",
                    "2": "current_index"
                },
                "uVar3": {
                    "1": "value2",
                    "2": "bit_shifted_value",
                    "3": "bitmask",
                    "21": "bit_mask"
                },
                "Elf32_Rel_ARRAY_20070000[48]": {
                    "1": "current_relocation"
                },
                "currentRelocation.r_offset": {
                    "1": "offset"
                },
                "r_offset": {
                    "3": "offset"
                },
                "FUN_00081df4": {
                    "1": "allocate_memory"
                },
                "0x20070184": {
                    "1": "default_offset"
                },
                "400": {
                    "1": "memory_size"
                }
            }
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_set_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_function_set_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  FUNC_00085858();\n  function_pointers = (code **)0x85860;\n  iteration_count = 0;\n  while {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "ppcVar2": "function_pointers",
                "iVar1": "iteration_count",
                "do": "while"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081d7c": {
                    "9": "execute_function_set",
                    "1": "execute_callback_functions",
                    "3": "execute_function_chain",
                    "7": "execute_functions",
                    "4": "execute_function_sequence",
                    "2": "execute_four_functions"
                },
                "ppcVar2": {
                    "7": "function_pointers",
                    "5": "function_pointer",
                    "2": "function_pointer_array",
                    "1": "function_set_ptr",
                    "6": "function_array"
                },
                "iVar1": {
                    "1": "index",
                    "4": "counter",
                    "23": "iteration_count"
                },
                "FUC_00081d7c": {
                    "1": "execute_function_sequence"
                },
                "FUNC_00085858": {
                    "1": "initialize",
                    "3": "initialize_functions"
                },
                "do": {
                    "1": "while"
                },
                "ppvVar1": {
                    "1": "function_array"
                },
                "iVar2": {
                    "1": "iteration_counter"
                }
            }
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "relocate_symbols_00081df4",
            "code": "\nvoid relocate_symbols_00081df4(undefined4 input_param)\n\n{\n  apply_relocation(symbol_offset,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "relocate_symbols_00081df4",
                "param_1": "input_param",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "relocate_symbols_00081e14": "apply_relocation",
                "r_offset": "offset",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "symbol_offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081df4": {
                    "30": "relocate_symbols",
                    "1": "relocate_and_apply_symbols"
                },
                "param_1": {
                    "3": "symbol_table",
                    "2": "symbol_address",
                    "1": "symbol_offset",
                    "4": "param",
                    "9": "input_param"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocations_array",
                    "8": "relocation_table",
                    "2": "symbol_table",
                    "4": "rel_array"
                },
                "relocate_symbols_00081e14": {
                    "1": "apply_relocation"
                },
                "r_offset": {
                    "3": "offset",
                    "2": "symbol_offset",
                    "1": "relocation_offset"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "3": "symbol_offset"
                }
            }
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "relocate_function_00081e04",
            "code": "\nvoid relocate_function_00081e04(undefined4 input_param)\n\n{\n  relocate_function_00081e04_00083d9c(relocation_offset,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "relocate_function_00081e04",
                "param_1": "input_param",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_offset": "relocation_offset",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocation_offset"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081e04": {
                    "21": "relocate_function",
                    "1": "relocate_memory",
                    "2": "relocate_elf_symbol"
                },
                "param_1": {
                    "1": "offset_param",
                    "2": "input",
                    "5": "input_param",
                    "4": "relocation_address"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "8": "relocation_array",
                    "2": "rel_array"
                },
                "r_offset": {
                    "1": "relocation_offset"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "2": "relocation_offset"
                }
            }
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "relocate_symbols_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocate_symbols_00081e14(undefined4 *param_array,uint param_size)\n\n{\n  dword temp1;\n  int index;\n  uint mask;\n  uint temp_var3;\n  int temp5;\n  uint temp_var5;\n  dword temp_var6;\n  uint u_var8;\n  int temp9;\n  undefined *ptr;\n  dword temp_var9;\n  dword temp11;\n  int index;\n  dword *pointer2;\n  uint aligned_size;\n  undefined *pointer3;\n  dword *pointer4;\n  uint temp_var13;\n  \n  if (param_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < param_size) goto return_invalid_size;\n  }\n  else {\n    aligned_size = param_size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < param_size)) {\nreturn_invalid_size:\n      *param_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(param_array);\n  temp1 = relocation_table[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&relocation_table[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (index = index + 8, index = *(int *)(index + 0x14), index != index)) {\n      temp5 = *(int *)(index + 0xc);\n      temp9 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(temp9 + 4);\n      index = *(int *)(index + 8);\n      *(int *)(index + 0xc) = temp5;\n      *(int *)(temp5 + 8) = index;\n      *(uint *)(temp9 + 4) = aligned_size | 1;\n      FUNC_0008259c(param_array);\n      return (int *)(index + 8);\n    }\n    temp_var13 = (aligned_size >> 3) + 2;\n  }\n  else {\n    temp_var13 = aligned_size >> 9;\n    if (temp_var13 == 0) {\n      index = 0x7e;\n      index = 0x3f;\n    }\n    else if (temp_var13 < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      index = index * 2;\n    }\n    else if (temp_var13 < 0x15) {\n      index = temp_var13 + 0x5b;\n      index = index * 2;\n    }\n    else if (temp_var13 < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      index = index * 2;\n    }\n    else if (temp_var13 < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      index = index * 2;\n    }\n    else if (temp_var13 < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      index = index * 2;\n    }\n    else {\n      index = 0xfc;\n      index = 0x7e;\n    }\n    for (temp_var6 = (&relocation_table[0x8e].r_offset)[index]; index * 4 + 0x20070464U != temp_var6\n        ; temp_var6 = *(dword *)(temp_var6 + 0xc)) {\n      temp_var13 = *(uint *)(temp_var6 + 4) & 0xfffffffc;\n      temp5 = temp_var13 - aligned_size;\n      if (0xf < temp5) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        index = temp_var13 + temp_var6;\n        aligned_size = *(uint *)(index + 4);\n        temp5 = *(int *)(temp_var6 + 0xc);\n        index = *(int *)(temp_var6 + 8);\n        *(int *)(index + 0xc) = temp5;\n        *(int *)(temp5 + 8) = index;\n        *(uint *)(index + 4) = aligned_size | 1;\n        FUNC_0008259c(param_array);\n        return (int *)(temp_var6 + 8);\n      }\n    }\n    temp_var13 = index + 1;\n  }\n  temp_var6 = relocation_table[141].r_offset;\n  if (relocation_table[142].r_info != 0x2007046c) {\n    mask = *(uint *)(relocation_table[142].r_info + 4);\n    temp_var3 = mask & 0xfffffffc;\n    temp_var5 = temp_var3 - aligned_size;\n    if (0xf < (int)temp_var5) {\n      temp_var6 = aligned_size + relocation_table[142].r_info;\n      *(uint *)(relocation_table[142].r_info + 4) = aligned_size | 1;\n      relocation_table[142].r_info = temp_var6;\n      relocation_table[143].r_offset = temp_var6;\n      *(undefined4 *)(temp_var6 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp_var6 + 8) = 0x2007046c;\n      *(uint *)(temp_var6 + 4) = temp_var5 | 1;\n      *(uint *)(temp_var6 + temp_var5) = temp_var5;\n      FUNC_0008259c(param_array);\n      return (int *)(temp1 + 8);\n    }\n    relocation_table[143].r_offset = 0x2007046c;\n    relocation_table[142].r_info = 0x2007046c;\n    if (-1 < (int)temp_var5) {\n      *(uint *)(temp_var3 + temp1 + 4) = *(uint *)(temp_var3 + temp1 + 4) | 1;\n      FUNC_0008259c(param_array);\n      return (int *)(temp1 + 8);\n    }\n    if (temp_var3 < 0x200) {\n      temp_var3 = mask & 0xfffffff8;\n      index = *(int *)((int)&relocation_table[0x8d].r_info + temp_var3);\n      temp_var6 = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | relocation_table[141].r_offset;\n      *(int *)(temp1 + 8) = index;\n      *(uint *)(temp1 + 0xc) = temp_var3 + 0x20070464;\n      relocation_table[141].r_offset = temp_var6;\n      *(dword *)((int)&relocation_table[0x8d].r_info + temp_var3) = temp1;\n      *(dword *)(index + 0xc) = temp1;\n    }\n    else {\n      temp_var5 = mask >> 9;\n      if (temp_var5 < 5) {\n        index = (mask >> 6) + 0x38;\n        index = index * 2;\n      }\n      else if (temp_var5 < 0x15) {\n        index = temp_var5 + 0x5b;\n        index = index * 2;\n      }\n      else if (temp_var5 < 0x55) {\n        index = (mask >> 0xc) + 0x6e;\n        index = index * 2;\n      }\n      else if (temp_var5 < 0x155) {\n        index = (mask >> 0xf) + 0x77;\n        index = index * 2;\n      }\n      else if (temp_var5 < 0x555) {\n        index = (mask >> 0x12) + 0x7c;\n        index = index * 2;\n      }\n      else {\n        index = 0xfc;\n        index = 0x7e;\n      }\n      temp_var6 = index * 4 + 0x20070464;\n      temp_var9 = (&relocation_table[0x8d].r_info)[index];\n      if (temp_var9 == temp_var6) {\n        relocation_table[141].r_offset =\n             relocation_table[141].r_offset | 1 << (index >> 2 & 0xffU);\n        temp11 = temp_var9;\n      }\n      else {\n        do {\n          temp11 = temp_var9;\n          if ((*(uint *)(temp_var9 + 4) & 0xfffffffc) <= temp_var3) break;\n          temp_var9 = *(dword *)(temp_var9 + 8);\n          temp11 = temp_var9;\n        } while (temp_var6 != temp_var9);\n        temp_var9 = *(dword *)(temp11 + 0xc);\n      }\n      temp_var6 = relocation_table[141].r_offset;\n      *(dword *)(temp1 + 0xc) = temp_var9;\n      *(dword *)(temp1 + 8) = temp11;\n      *(dword *)(temp_var9 + 8) = temp1;\n      *(dword *)(temp11 + 0xc) = temp1;\n    }\n  }\n  temp1 = relocation_table[141].r_info;\n  mask = 1 << ((int)temp_var13 >> 2 & 0xffU);\n  if (mask <= temp_var6) {\n    if ((temp_var6 & mask) == 0) {\n      temp_var13 = temp_var13 & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        temp_var13 = temp_var13 + 4;\n      } while ((temp_var6 & mask) == 0);\n    }\n    do {\n      pointer4 = &relocation_table[temp_var13 + 0x8c].r_info;\n      pointer2 = pointer4;\n      temp_var3 = temp_var13;\n      do {\n        for (ptr = (undefined *)pointer2[3]; pointer2 != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          temp_var5 = *(uint *)(ptr + 4) & 0xfffffffc;\n          u_var8 = temp_var5 - aligned_size;\n          if (0xf < (int)u_var8) {\n            index = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            pointer3 = ptr + aligned_size;\n            *(uint *)(ptr + 4) = aligned_size | 1;\n            *(int *)(index + 0xc) = index;\n            *(int *)(index + 8) = index;\n            relocation_table[142].r_info = (dword)pointer3;\n            relocation_table[143].r_offset = (dword)pointer3;\n            *(undefined4 *)(pointer3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(pointer3 + 8) = 0x2007046c;\n            *(uint *)(pointer3 + 4) = u_var8 | 1;\n            *(uint *)(pointer3 + u_var8) = u_var8;\n            FUNC_0008259c(param_array);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)u_var8) {\n            index = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + temp_var5 + 4) = *(uint *)(ptr + temp_var5 + 4) | 1;\n            *(int *)(index + 0xc) = index;\n            *(int *)(index + 8) = index;\n            FUNC_0008259c(param_array);\n            return (int *)(ptr + 8);\n          }\n        }\n        temp_var3 = temp_var3 + 1;\n        pointer2 = pointer2 + 2;\n      } while ((temp_var3 & 3) != 0);\n      do {\n        temp_var5 = temp_var13 & 3;\n        ptr = (undefined *)(pointer4 + -2);\n        temp_var13 = temp_var13 - 1;\n        if (temp_var5 == 0) {\n          relocation_table[141].r_offset = relocation_table[141].r_offset & ~mask;\n          break;\n        }\n        pointer4 = (dword *)*pointer4;\n      } while (pointer4 == (dword *)ptr);\n      mask = mask * 2;\n      if ((relocation_table[141].r_offset <= mask &&\n           mask - relocation_table[141].r_offset != 0) || (temp_var13 = temp_var3, mask == 0))\n      break;\n      for (; (relocation_table[141].r_offset & mask) == 0; mask = mask << 1) {\n        temp_var13 = temp_var13 + 4;\n      }\n    } while( true );\n  }\n  temp_var13 = *(uint *)(relocation_table[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= temp_var13) &&\n     (mask = temp_var13 - aligned_size, temp_var6 = relocation_table[141].r_info, 0xf < (int)mask))\n  goto LAB_0008211e;\n  mask = relocation_table[141].r_info + temp_var13;\n  if (relocation_table[270].r_offset == 0xffffffff) {\n    temp_var3 = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    temp_var3 = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  temp_var6 = calculate_and_assign_sum(param_array,temp_var3);\n  if ((temp_var6 == 0xffffffff) || ((temp_var6 < mask && (temp1 != 0x20070464)))) {\n    temp_var13 = *(uint *)(relocation_table[141].r_info + 4) & 0xfffffffc;\n    temp_var6 = relocation_table[141].r_info;\n  }\n  else {\n    temp_var5 = DAT_20071194 + temp_var3;\n    DAT_20071194 = temp_var5;\n    if ((mask == temp_var6) && ((mask & 0xfff) == 0)) {\n      *(uint *)(relocation_table[141].r_info + 4) = temp_var3 + temp_var13 | 1;\n    }\n    else {\n      temp_var9 = temp_var6;\n      if (relocation_table[270].r_offset != 0xffffffff) {\n        temp_var9 = relocation_table[270].r_offset;\n        DAT_20071194 = temp_var5 + (temp_var6 - mask);\n      }\n      relocation_table[270].r_offset = temp_var9;\n      mask = temp_var6 & 7;\n      if (mask == 0) {\n        index = 0x1000;\n      }\n      else {\n        temp_var6 = temp_var6 + (8 - mask);\n        index = 0x1008 - mask;\n      }\n      index = index - (temp_var3 + temp_var6 & 0xfff);\n      index = calculate_and_assign_sum(param_array,index);\n      if (index == -1) {\n        mask = 1;\n        index = 0;\n      }\n      else {\n        mask = (index - temp_var6) + index | 1;\n      }\n      temp_var5 = DAT_20071194 + index;\n      relocation_table[141].r_info = temp_var6;\n      DAT_20071194 = temp_var5;\n      *(uint *)(temp_var6 + 4) = mask;\n      if (temp1 != 0x20070464) {\n        if (temp_var13 < 0x10) {\n          *(undefined4 *)(temp_var6 + 4) = 1;\n          temp_var13 = 0;\n          goto LAB_00082108;\n        }\n        temp_var13 = temp_var13 - 0xc & 0xfffffff8;\n        *(uint *)(temp1 + 4) = temp_var13 | *(uint *)(temp1 + 4) & 1;\n        *(undefined4 *)(temp1 + temp_var13 + 4) = 5;\n        *(undefined4 *)(temp1 + temp_var13 + 8) = 5;\n        if (0xf < temp_var13) {\n          relocate_function(param_array,temp1 + 8);\n          temp_var5 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp_var5) {\n      DAT_2007118c = temp_var5;\n    }\n    if (DAT_20071188 < temp_var5) {\n      DAT_20071188 = temp_var5;\n    }\n    temp_var13 = *(uint *)(relocation_table[141].r_info + 4) & 0xfffffffc;\n    temp_var6 = relocation_table[141].r_info;\n  }\nLAB_00082108:\n  mask = temp_var13 - aligned_size;\n  if ((temp_var13 < aligned_size) || ((int)mask < 0x10)) {\n    FUNC_0008259c(param_array);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  relocation_table[141].r_info = aligned_size + temp_var6;\n  *(uint *)(temp_var6 + 4) = aligned_size | 1;\n  *(uint *)(relocation_table[141].r_info + 4) = mask | 1;\n  FUNC_0008259c(param_array);\n  return (int *)(temp_var6 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "relocate_symbols_00081e14",
                "param_1": "param_array",
                "param_2": "param_size",
                "dVar1": "temp1",
                "iVar2": "index",
                "uVar3": "mask",
                "uVar4": "temp_var3",
                "iVar5": "temp5",
                "uVar6": "temp_var5",
                "dVar7": "temp_var6",
                "uVar8": "u_var8",
                "iVar9": "temp9",
                "puVar10": "ptr",
                "dVar11": "temp_var9",
                "dVar12": "temp11",
                "iVar13": "index",
                "pdVar14": "pointer2",
                "uVar15": "aligned_size",
                "puVar16": "pointer3",
                "pdVar17": "pointer4",
                "uVar18": "temp_var13",
                "calculate_and_assign_sum_00082970": "calculate_and_assign_sum",
                "relocate_function_00083d9c": "relocate_function",
                "dVar14": "index_offset",
                "LAB_00081e7a": "return_invalid_size",
                "Elf32_Rel_ARRAY_20070000": "relocation_table"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081e14": {
                    "1": "allocate_memory",
                    "2": "relocate_symbols"
                },
                "param_1": {
                    "1": "input_param",
                    "4": "param_pointer",
                    "8": "param_array",
                    "3": "param",
                    "2": "parameter_1"
                },
                "param_2": {
                    "4": "array_length",
                    "1": "memory_size",
                    "10": "param_size",
                    "9": "size",
                    "2": "parameter_2"
                },
                "dVar1": {
                    "1": "info",
                    "2": "result",
                    "3": "temp1"
                },
                "iVar2": {
                    "1": "curr_offset",
                    "3": "i_var2",
                    "2": "temp1"
                },
                "uVar3": {
                    "2": "temp3",
                    "1": "temp85",
                    "6": "mask",
                    "3": "temp_var2"
                },
                "uVar4": {
                    "3": "u_var4",
                    "1": "difference",
                    "2": "temp4"
                },
                "iVar5": {
                    "4": "i_var5",
                    "1": "value4",
                    "2": "tmp_var",
                    "3": "temp2"
                },
                "uVar6": {
                    "1": "var_3",
                    "2": "value7",
                    "3": "u_var6"
                },
                "dVar7": {
                    "1": "result",
                    "2": "temp7",
                    "3": "temp_var6"
                },
                "uVar8": {
                    "1": "difference",
                    "3": "temp_var7",
                    "4": "u_var8",
                    "2": "value4"
                },
                "iVar9": {
                    "1": "ptr",
                    "3": "temp_var8",
                    "4": "temp9",
                    "2": "temp3"
                },
                "puVar10": {
                    "1": "temp_pointer",
                    "2": "ptr1",
                    "3": "pointer1",
                    "4": "ptr"
                },
                "dVar11": {
                    "1": "temp4",
                    "2": "temp_var9"
                },
                "dVar12": {
                    "1": "loop_offset1",
                    "2": "temp11"
                },
                "iVar13": {
                    "1": "array_index",
                    "5": "index",
                    "2": "temp_var11",
                    "3": "i_var13"
                },
                "pdVar14": {
                    "4": "pointer2",
                    "1": "pd_var14"
                },
                "uVar15": {
                    "1": "var_5",
                    "2": "new_size",
                    "6": "aligned_size"
                },
                "puVar16": {
                    "1": "ptr5",
                    "3": "aligned_ptr",
                    "2": "pointer_var2",
                    "4": "pointer3"
                },
                "pdVar17": {
                    "1": "next_rel_array_entry",
                    "2": "pd_var2",
                    "4": "pointer4"
                },
                "uVar18": {
                    "1": "lookup",
                    "2": "u_var18"
                },
                "FUNC_00082598": {
                    "1": "some_function1"
                },
                "FUNC_0008259c": {
                    "1": "some_function2"
                },
                "calculate_and_assign_sum_00082970": {
                    "1": "calculate_and_assign_sum"
                },
                "relocate_function_00083d9c": {
                    "2": "relocate_function"
                },
                "iVar6": {
                    "1": "i_var6"
                },
                "iVar19": {
                    "1": "int_var19"
                },
                "iVar20": {
                    "1": "index_var20"
                },
                "uDVar1": {
                    "1": "offset7"
                },
                "dVar14": {
                    "1": "index_offset"
                },
                "dVar18": {
                    "1": "rel_array_size"
                },
                "uVar20": {
                    "1": "tmp_var3"
                },
                "pvVar16": {
                    "1": "temp_pointer13"
                },
                "LAB_00081e7a": {
                    "1": "return_invalid_size"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_table"
                },
                "FUNCHere0008259c": {
                    "1": "finalize_memory_allocation_and_return"
                },
                "DAT_20071190": {
                    "1": "base_memory_address"
                },
                "DAT_20071194": {
                    "1": "current_memory_address"
                },
                "FUNC_00082970": {
                    "1": "calculate_memory_sum"
                },
                "DAT_2007118c": {
                    "1": "max_memory_address"
                },
                "DAT_20071188": {
                    "1": "min_memory_address"
                },
                "pbVar10": {
                    "1": "ptr6"
                }
            }
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copy_memory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_end;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint temp_size;\n  bool loop_condition;\n  \n  dest_end = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      temp_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = dest_end;\n          loop_condition = temp_size != 0;\n          temp_size = temp_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest_end = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto copy_remaining_bytes;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      temp_size = 4 - ((uint)destination & 3);\n      size = size - temp_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_end = dest_ptr;\n      source = src_ptr;\n      if ((temp_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest_end = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest_end = *source;\n    dest_end[1] = source[1];\n    dest_end[2] = source[2];\n    dest_end[3] = source[3];\n    dest_end[4] = source[4];\n    dest_end[5] = source[5];\n    dest_end[6] = source[6];\n    dest_end[7] = source[7];\n    dest_end[8] = source[8];\n    dest_end[9] = source[9];\n    dest_end[10] = source[10];\n    dest_end[0xb] = source[0xb];\n    dest_end[0xc] = source[0xc];\n    dest_end[0xd] = source[0xd];\n    dest_end[0xe] = source[0xe];\n    dest_end[0xf] = source[0xf];\n    dest_end = dest_end + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest_end = *source;\n      dest_end[1] = source[1];\n      dest_end[2] = source[2];\n      dest_end[3] = source[3];\n      dest_end = dest_end + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  temp_size = remaining_size + 0xc;\n  src_ptr = dest_end;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < temp_size;\n      temp_size = temp_size - 4;\n      dest_end = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ncopy_remaining_bytes:\n  if (temp_size + 4 != 0) {\n    dest_ptr = dest_end;\n    src_ptr = source;\n    if ((temp_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_end + 1);\n      *(undefined *)dest_end = *(undefined *)source;\n    }\n    if ((temp_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_end",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "temp_size",
                "bVar6": "loop_condition",
                "LAB_000823d0": "copy_remaining_bytes"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008234c": {
                    "1": "copy_byte_array",
                    "19": "copy_memory",
                    "6": "copy_data"
                },
                "param_1": {
                    "20": "destination",
                    "1": "source",
                    "10": "dest"
                },
                "param_2": {
                    "1": "destination",
                    "20": "source",
                    "10": "src"
                },
                "param_3": {
                    "1": "count",
                    "9": "length",
                    "21": "size"
                },
                "puVar1": {
                    "1": "source_ptr",
                    "22": "dest_ptr",
                    "2": "dest_pointer",
                    "6": "dst_ptr"
                },
                "puVar2": {
                    "1": "dest_ptr",
                    "5": "dest_end",
                    "4": "src_ptr",
                    "3": "dst_end_ptr"
                },
                "puVar3": {
                    "17": "src_ptr",
                    "2": "source_ptr",
                    "1": "temp_dst_ptr",
                    "3": "temp_dest_ptr",
                    "6": "src"
                },
                "uVar4": {
                    "1": "copy_length",
                    "16": "remaining_size",
                    "7": "remaining_length"
                },
                "uVar5": {
                    "1": "temp_length",
                    "2": "remaining_size",
                    "6": "temp_size",
                    "3": "copy_size"
                },
                "bVar6": {
                    "1": "is_remaining_length_valid",
                    "7": "is_remaining",
                    "8": "loop_condition",
                    "3": "is_looping",
                    "2": "temp_bool"
                },
                "LAB_000823d0": {
                    "1": "copy_remaining"
                }
            }
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copy_memory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  undefined *temp_byte;\n  uint remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    temp_byte = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_byte = temp_byte + -1;\n        *temp_byte = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remaining_size = remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        remaining_size = remaining_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < remaining_size);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "temp_byte",
                "uVar5": "remaining_size",
                "uVar7": "remainder",
                "uVar": "temp_value",
                "uVar2": "temp_value2"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082438": {
                    "1": "reverse_bytes",
                    "2": "reverse_memory_block",
                    "13": "copy_memory",
                    "5": "reverse_copy"
                },
                "param_1": {
                    "2": "source",
                    "9": "destination",
                    "1": "dest_ptr",
                    "14": "dest"
                },
                "param_2": {
                    "2": "destination",
                    "1": "dest",
                    "9": "source",
                    "16": "src"
                },
                "param_3": {
                    "2": "num_bytes",
                    "11": "length",
                    "17": "size"
                },
                "iVar1": {
                    "2": "i",
                    "5": "count",
                    "17": "index",
                    "1": "current_index"
                },
                "puVar2": {
                    "2": "dst_ptr",
                    "1": "destination_pointer",
                    "16": "dest_ptr"
                },
                "puVar3": {
                    "1": "src_iterator",
                    "18": "src_ptr",
                    "2": "dest_ptr"
                },
                "puVar4": {
                    "2": "end_pointer",
                    "1": "temp_pointer",
                    "14": "temp_ptr",
                    "4": "dest_end_ptr"
                },
                "puVar6": {
                    "4": "temp_char",
                    "1": "dest_byte",
                    "3": "dest_end",
                    "5": "temp_byte",
                    "2": "temp_byte_ptr"
                },
                "uVar5": {
                    "1": "copy_count",
                    "6": "temp_size",
                    "2": "remaining_length",
                    "3": "temp_length"
                },
                "uVar7": {
                    "2": "temp_remainder",
                    "1": "temp_size2",
                    "5": "remaining_bytes",
                    "11": "remainder"
                },
                "uVar8": {
                    "1": "num_chunks"
                },
                "uVar9": {
                    "1": "remainder_size"
                },
                "puVar8": {
                    "1": "temp_ptr2"
                },
                "uVar": {
                    "1": "temp_value"
                },
                "uVar2": {
                    "1": "temp_value2"
                },
                "<code>": {
                    "1": "<reverse_copy_memory>"
                },
                "undefined4 *param_1": {
                    "1": "<destination>"
                },
                "undefined4 *param_2": {
                    "1": "<source>"
                },
                "uint param_3": {
                    "1": "<num_bytes>"
                }
            }
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "memset_00082504",
            "code": "\nvoid memset_00082504(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value32;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = destination;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)destination & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = destination;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = destination;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = value32;\n        dest_ptr[1] = value32;\n        dest_ptr[2] = value32;\n        dest_ptr[3] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = destination;\n      if (size < 4) goto copy_remaining_bytes;\n    }\n    do {\n      size = size - 4;\n      *destination = value32;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\ncopy_remaining_bytes:\n  if (size != 0) {\n    dest_ptr = destination;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "memset_00082504",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value32",
                "uVar4": "remaining_size",
                "bVar5": "is_zero",
                "LAB_00082580": "copy_remaining_bytes"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082504": {
                    "1": "fill_memory_with_byte",
                    "2": "initialize_memory",
                    "4": "fill_memory",
                    "10": "memset",
                    "3": "fill_buffer_with_byte"
                },
                "param_1": {
                    "10": "dest",
                    "2": "array",
                    "1": "dest_buffer",
                    "5": "buffer"
                },
                "param_2": {
                    "1": "byte_value",
                    "22": "value",
                    "4": "byte"
                },
                "param_3": {
                    "2": "num_bytes",
                    "1": "num_elements",
                    "3": "count",
                    "14": "size",
                    "9": "length"
                },
                "puVar1": {
                    "1": "dst_ptr",
                    "2": "current_pointer",
                    "3": "ptr",
                    "16": "dest_ptr"
                },
                "puVar2": {
                    "2": "temp_ptr",
                    "11": "next_dest_ptr",
                    "1": "next_dst_ptr",
                    "5": "next_ptr"
                },
                "uVar3": {
                    "1": "value",
                    "2": "pattern",
                    "4": "fill_value",
                    "6": "value32"
                },
                "uVar4": {
                    "3": "remaining",
                    "2": "size_remaining",
                    "1": "length",
                    "12": "remaining_size",
                    "6": "remaining_length"
                },
                "bVar5": {
                    "3": "is_zero_size",
                    "2": "is_zero_length",
                    "1": "is_empty",
                    "5": "is_size_zero",
                    "10": "is_zero"
                },
                "LAB_00082580": {
                    "2": "copy_remaining"
                },
                "<original_function_name>": {
                    "1": "fill_buffer_with_byte"
                },
                "<param_1>": {
                    "1": "buffer"
                },
                "<param_2>": {
                    "1": "byte_value"
                },
                "<param_3>": {
                    "1": "length"
                }
            }
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "relocate_and_copy_symbols_000825a0",
            "code": "\nvoid relocate_and_copy_symbols_000825a0(undefined4 destination,undefined4 source)\n\n{\n  relocate_and_copy_symbols_000825a0_000825b0(relocation_table[140].offset,destination,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "relocate_and_copy_symbols_000825a0",
                "param_1": "destination",
                "param_2": "source",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000825a0": {
                    "30": "relocate_and_copy_symbols",
                    "1": "copy_symbols"
                },
                "param_1": {
                    "1": "input1",
                    "13": "destination",
                    "4": "destination_address",
                    "3": "source"
                },
                "param_2": {
                    "4": "destination_address",
                    "2": "param2",
                    "1": "param",
                    "13": "source"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "3": "relocation_table",
                    "1": "elf_relocation_array"
                },
                "r_offset": {
                    "1": "offset"
                }
            }
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "relocate_and_copy_symbols_000825b0",
            "code": "\nint * relocate_and_copy_symbols_000825b0(undefined4 *symbol_table,int *buffer,uint size)\n\n{\n  dword offset;\n  int *result;\n  uint temp2;\n  int temp_var1;\n  uint temp_var4;\n  int temp_var2;\n  int *temp_ptr1;\n  uint new_size;\n  uint aligned_size;\n  int *temp_ptr2;\n  \n  if (buffer == (int *)0x0) {\n    result = (int *)relocate_symbols(symbol_table,size);\n    return result;\n  }\n  FUNC_00082598();\n  temp_var4 = buffer[-1];\n  new_size = temp_var4 & 0xfffffffc;\n  result = buffer + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *symbol_table = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)new_size < (int)aligned_size) {\n    offset = (int)result + new_size;\n    if (symbol_array[141].r_info == offset) {\n      temp2 = *(uint *)(symbol_array[141].r_info + 4) & 0xfffffffc;\n      offset = symbol_array[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + new_size)) {\n        symbol_array[141].r_info = (int)result + aligned_size;\n        *(uint *)(symbol_array[141].r_info + 4) = (temp2 + new_size) - aligned_size | 1;\n        buffer[-1] = aligned_size | buffer[-1] & 1U;\n        FUNC_0008259c(symbol_table);\n        return buffer;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(offset + 4) & 0xfffffffe) + offset + 4) & 1) == 0) {\n      temp2 = *(uint *)(offset + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + new_size)) {\n        temp_var2 = *(int *)(offset + 0xc);\n        temp_var1 = *(int *)(offset + 8);\n        *(int *)(temp_var1 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var1;\n        new_size = temp2 + new_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      offset = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_ptr2 = (int *)((int)result - buffer[-2]);\n      temp_var4 = (temp_ptr2[1] & 0xfffffffcU) + new_size;\n      if (offset != 0) {\n        if (offset == symbol_array[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + temp_var4)) {\n            result = temp_ptr2 + 2;\n            temp_var1 = *result;\n            temp_var2 = temp_ptr2[3];\n            new_size = new_size - 4;\n            *(int *)(temp_var1 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var1;\n            if (new_size < 0x25) {\n              temp_ptr1 = result;\n              if (0x13 < new_size) {\n                temp_ptr2[2] = *buffer;\n                temp_ptr2[3] = buffer[1];\n                if (new_size < 0x1c) {\n                  buffer = buffer + 2;\n                  temp_ptr1 = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = buffer[2];\n                  temp_ptr2[5] = buffer[3];\n                  if (new_size == 0x24) {\n                    temp_ptr2[6] = buffer[4];\n                    temp_ptr1 = buffer + 5;\n                    buffer = buffer + 6;\n                    temp_ptr2[7] = *temp_ptr1;\n                    temp_ptr1 = temp_ptr2 + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    temp_ptr1 = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *buffer;\n              temp_ptr1[1] = buffer[1];\n              temp_ptr1[2] = buffer[2];\n            }\n            else {\n              copy_memory(result,buffer);\n            }\n            symbol_array[141].r_info = (int)temp_ptr2 + aligned_size;\n            *(uint *)(symbol_array[141].r_info + 4) = (temp2 + temp_var4) - aligned_size | 1;\n            temp_ptr2[1] = aligned_size | temp_ptr2[1] & 1U;\n            FUNC_0008259c(symbol_table);\n            return result;\n          }\n        }\n        else {\n          temp2 = temp2 + temp_var4;\n          if ((int)aligned_size <= (int)temp2) {\n            temp_var2 = *(int *)(offset + 0xc);\n            temp_var1 = *(int *)(offset + 8);\n            *(int *)(temp_var1 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var1;\n            temp_ptr1 = temp_ptr2 + 2;\n            temp_var1 = *temp_ptr1;\n            temp_var2 = temp_ptr2[3];\n            temp_var4 = new_size - 4;\n            *(int *)(temp_var1 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var1;\n            new_size = temp2;\n            if (temp_var4 < 0x25) {\n              result = temp_ptr1;\n              if (0x13 < temp_var4) {\n                temp_ptr2[2] = *buffer;\n                temp_ptr2[3] = buffer[1];\n                if (temp_var4 < 0x1c) {\n                  buffer = buffer + 2;\n                  result = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = buffer[2];\n                  temp_ptr2[5] = buffer[3];\n                  if (temp_var4 == 0x24) {\n                    temp_ptr2[6] = buffer[4];\n                    result = buffer + 5;\n                    buffer = buffer + 6;\n                    temp_ptr2[7] = *result;\n                    result = temp_ptr2 + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    result = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *result = *buffer;\n              result[1] = buffer[1];\n              result[2] = buffer[2];\n              temp_var4 = temp_ptr2[1];\n              result = temp_ptr2;\n              buffer = temp_ptr1;\n            }\n            else {\n              copy_memory(temp_ptr1,buffer);\n              temp_var4 = temp_ptr2[1];\n              result = temp_ptr2;\n              buffer = temp_ptr1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)temp_var4) {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp_var1 = *temp_ptr1;\n        temp_var2 = temp_ptr2[3];\n        temp2 = new_size - 4;\n        *(int *)(temp_var1 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var1;\n        new_size = temp_var4;\n        if (temp2 < 0x25) {\n          result = temp_ptr1;\n          if (0x13 < temp2) {\n            temp_ptr2[2] = *buffer;\n            temp_ptr2[3] = buffer[1];\n            if (temp2 < 0x1c) {\n              buffer = buffer + 2;\n              result = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = buffer[2];\n              temp_ptr2[5] = buffer[3];\n              if (temp2 == 0x24) {\n                temp_ptr2[6] = buffer[4];\n                result = buffer + 5;\n                buffer = buffer + 6;\n                temp_ptr2[7] = *result;\n                result = temp_ptr2 + 8;\n              }\n              else {\n                buffer = buffer + 4;\n                result = temp_ptr2 + 6;\n              }\n            }\n          }\n          *result = *buffer;\n          result[1] = buffer[1];\n          result[2] = buffer[2];\n          temp_var4 = temp_ptr2[1];\n          result = temp_ptr2;\n          buffer = temp_ptr1;\n        }\n        else {\n          copy_memory(temp_ptr1,buffer);\n          temp_var4 = temp_ptr2[1];\n          result = temp_ptr2;\n          buffer = temp_ptr1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr2 = (int *)relocate_symbols(symbol_table,size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000826a4;\n    temp_var4 = buffer[-1];\n    if (temp_ptr2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)result)) {\n      new_size = new_size - 4;\n      if (new_size < 0x25) {\n        result = buffer;\n        temp_ptr1 = temp_ptr2;\n        if (0x13 < new_size) {\n          *temp_ptr2 = *buffer;\n          temp_ptr2[1] = buffer[1];\n          if (new_size < 0x1c) {\n            result = buffer + 2;\n            temp_ptr1 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = buffer[2];\n            temp_ptr2[3] = buffer[3];\n            if (new_size == 0x24) {\n              temp_ptr2[4] = buffer[4];\n              temp_ptr2[5] = buffer[5];\n              result = buffer + 6;\n              temp_ptr1 = temp_ptr2 + 6;\n            }\n            else {\n              result = buffer + 4;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *result;\n        temp_ptr1[1] = result[1];\n        temp_ptr1[2] = result[2];\n      }\n      else {\n        copy_memory(temp_ptr2,buffer);\n      }\n      relocate_function(symbol_table,buffer);\n      goto LAB_000826a4;\n    }\n    new_size = new_size + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = new_size - aligned_size;\n  temp_ptr2 = buffer;\n  if (temp2 < 0x10) {\n    result[1] = temp_var4 & 1 | new_size;\n    *(uint *)((int)result + new_size + 4) = *(uint *)((int)result + new_size + 4) | 1;\n  }\n  else {\n    result[1] = temp_var4 & 1 | aligned_size;\n    *(uint *)((int)result + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)result + temp2 + aligned_size + 4) = *(uint *)((int)result + temp2 + aligned_size + 4) | 1;\n    relocate_function(symbol_table,(int)result + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(symbol_table);\n  return temp_ptr2;\n}\n\n",
            "renaming": {
                "param_1": "symbol_table",
                "param_2": "buffer",
                "param_3": "size",
                "dVar1": "offset",
                "piVar2": "result",
                "uVar3": "temp2",
                "iVar4": "temp_var1",
                "uVar5": "temp_var4",
                "iVar6": "temp_var2",
                "piVar7": "temp_ptr1",
                "uVar8": "new_size",
                "uVar9": "aligned_size",
                "piVar10": "temp_ptr2",
                "FUN_000825b0": "relocate_and_copy_symbols_000825b0",
                "Elf32_Rel_ARRAY_20070000": "symbol_array",
                "relocate_symbols_00081e14": "relocate_symbols",
                "copy_memory_00082438": "copy_memory",
                "relocate_function_00083d9c": "relocate_function"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_param",
                    "2": "symbols",
                    "6": "param_array",
                    "11": "symbol_table"
                },
                "param_2": {
                    "1": "original_data",
                    "2": "data_array",
                    "3": "input_array"
                },
                "param_3": {
                    "1": "function_parameter_3",
                    "3": "symbol_count",
                    "2": "block_size",
                    "8": "size"
                },
                "dVar1": {
                    "1": "relocation_entry",
                    "3": "temp1",
                    "8": "offset",
                    "4": "temp_var1"
                },
                "piVar2": {
                    "1": "new_data",
                    "3": "result_ptr",
                    "2": "output_array",
                    "10": "result"
                },
                "uVar3": {
                    "2": "size",
                    "1": "relocated_data_size",
                    "4": "temp2",
                    "3": "temp_var2"
                },
                "iVar4": {
                    "3": "temp_var3",
                    "1": "temp_int1",
                    "5": "temp_var1",
                    "2": "temp_var",
                    "4": "temp3"
                },
                "uVar5": {
                    "3": "temp_var4",
                    "1": "u_var5",
                    "2": "temp4"
                },
                "iVar6": {
                    "2": "temp4",
                    "1": "temp_var6",
                    "3": "temp_var5",
                    "4": "temp_var2"
                },
                "piVar7": {
                    "2": "temp_array",
                    "1": "temp_array_ptr",
                    "6": "temp_ptr1",
                    "3": "temp_ptr"
                },
                "uVar8": {
                    "1": "var_3",
                    "2": "temp_var6",
                    "5": "new_size"
                },
                "uVar9": {
                    "2": "new_size",
                    "1": "copy_size",
                    "10": "aligned_size"
                },
                "piVar10": {
                    "1": "temporary_variable_4",
                    "2": "relocated_function",
                    "6": "temp_ptr2",
                    "3": "relocated_buffer"
                },
                "FUN_000825b0": {
                    "1": "relocate_and_resize",
                    "3": "relocate_and_copy_symbols",
                    "2": "relocated_symbols"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "relocate_symbols_00081e14": {
                    "2": "relocate_symbols"
                },
                "FUNC_00082598": {
                    "1": "do_something"
                },
                "FUNC_0008259c": {
                    "1": "function_b"
                },
                "copy_memory_00082438": {
                    "2": "copy_memory"
                },
                "relocate_function_00083d9c": {
                    "2": "relocate_function"
                }
            }
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "calculate_and_assign_sum_00082970",
            "code": "\nvoid calculate_and_assign_sum_00082970(int *result,undefined4 input_value)\n\n{\n  int sum;\n  \n  DAT_200711bc = 0;\n  sum = calculate_sum(input_value);\n  if ((sum == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "calculate_and_assign_sum_00082970",
                "param_1": "result",
                "param_2": "input_value",
                "iVar1": "sum",
                "calculate_sum_0008118c": "calculate_sum"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082970": {
                    "1": "validate_and_assign_sum",
                    "3": "calculate_and_set_sum",
                    "8": "calculate_and_assign_sum",
                    "5": "calculate_and_store_sum"
                },
                "param_1": {
                    "1": "modified_value",
                    "5": "result_pointer",
                    "2": "output",
                    "16": "result"
                },
                "param_2": {
                    "8": "input",
                    "18": "input_value",
                    "3": "value",
                    "1": "input_data"
                },
                "iVar1": {
                    "5": "sum_result",
                    "1": "calculated_sum",
                    "23": "sum"
                },
                "calculate_sum_0008118c": {
                    "4": "calculate_sum"
                },
                "DAT_200711bc": {
                    "1": "error_code"
                }
            }
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copy_string_00082994(uint *dest,uint *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_source;\n  uint *temp_ptr2;\n  uint current_word;\n  uint temp_word;\n  uint *dest_ptr;\n  bool is_zero;\n  \n  if ((((uint)dest ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)dest = current_char;\n      source = (uint *)((int)source + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    temp_ptr2 = source;\n    if (((uint)source & 1) != 0) {\n      temp_ptr2 = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = temp_ptr2;\n    if (((uint)temp_ptr2 & 2) != 0) {\n      source = (uint *)((int)temp_ptr2 + 2);\n      current_short = *(ushort *)temp_ptr2;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *source;\n  temp_ptr2 = source + 1;\n  dest_ptr = dest;\n  if (((uint)source & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto check_alignment;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    temp_ptr2 = source + 2;\n    current_word = source[1];\n  }\n  while( true ) {\n    next_source = temp_ptr2 + 1;\n    temp_word = *temp_ptr2;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp_word;\n    if ((temp_word + 0xfefefeff & ~temp_word & 0x80808080) != 0) break;\n    temp_ptr2 = temp_ptr2 + 2;\n    current_word = *next_source;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp_word;\n  }\ncheck_alignment:\n  do {\n    *(char *)dest = (char)current_word;\n    temp_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_word != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_source",
                "puVar4": "temp_ptr2",
                "uVar5": "current_word",
                "uVar6": "temp_word",
                "puVar7": "dest_ptr",
                "bVar8": "is_zero",
                "LAB_000829f8": "check_alignment"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082994": {
                    "27": "copy_string",
                    "2": "copy_string_with_alignment_check",
                    "1": "copy_and_terminate_string"
                },
                "param_1": {
                    "1": "dst",
                    "15": "destination"
                },
                "param_2": {
                    "16": "source",
                    "15": "src"
                },
                "cVar1": {
                    "2": "char_value",
                    "1": "character",
                    "27": "current_char"
                },
                "uVar2": {
                    "26": "current_short",
                    "2": "ushort_value",
                    "1": "value"
                },
                "puVar3": {
                    "1": "temp_ptr1",
                    "2": "source_ptr",
                    "3": "next_uint_ptr",
                    "4": "next_pointer",
                    "5": "next_source"
                },
                "puVar4": {
                    "1": "next_u_int_aligned",
                    "2": "temp_pointer",
                    "4": "temp_ptr2",
                    "3": "next_dest"
                },
                "uVar5": {
                    "1": "current_data",
                    "14": "current_word",
                    "5": "current_uint",
                    "2": "current_u_int"
                },
                "uVar6": {
                    "1": "current_data_alt",
                    "5": "temp_word",
                    "3": "temp_value",
                    "4": "temp",
                    "2": "current_byte"
                },
                "puVar7": {
                    "3": "dest_pointer",
                    "2": "current_dest",
                    "1": "dst_ptr",
                    "9": "dest_ptr",
                    "5": "next_destination"
                },
                "bVar8": {
                    "8": "is_zero_byte",
                    "1": "is_zero_char",
                    "11": "is_zero",
                    "6": "is_short_zero"
                },
                "LAB_000829f8": {
                    "1": "end_loop"
                }
            }
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint count_leading_zeros_00082a50(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leading_zeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082a50": {
                    "1": "calculate_leading_zeroes",
                    "2": "count_trailing_zeros",
                    "17": "count_leading_zeros",
                    "3": "count_leading_zeroes"
                },
                "param_1": {
                    "19": "input",
                    "1": "input_data",
                    "3": "input_value",
                    "2": "num"
                },
                "iVar1": {
                    "1": "index",
                    "4": "leading_zeros_count",
                    "2": "leading_zeroes",
                    "16": "leading_zeros"
                },
                "puVar2": {
                    "2": "p_input",
                    "1": "ptr_to_word",
                    "12": "ptr"
                },
                "uVar3": {
                    "3": "word",
                    "1": "current_value",
                    "17": "value"
                },
                "bVar4": {
                    "1": "is_word_zero",
                    "25": "is_zero"
                }
            }
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint process_data_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *current_data;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *current_value;\n  uint value;\n  uint shifted_value;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = process_data_00082ac0_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = param3[2];\n  current_data = *param3;\n  while (remaining_data != (int *)0x0) {\n    value = current_data[1];\n    shifted_value = value >> 2;\n    if (shifted_value != 0) {\n      current_value = (undefined4 *)(*current_data + -4);\n      counter = 0;\n      do {\n        current_value = current_value + 1;\n        result = process_data_00082ac0_00083c40(param1,*current_value,param2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (shifted_value != counter);\n      remaining_data = param3[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (value & 0xfffffffc));\n    param3[2] = remaining_data;\n    current_data = current_data + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "current_data",
                "iVar2": "result",
                "piVar3": "remaining_data",
                "uVar4": "counter",
                "puVar5": "current_value",
                "uVar6": "value",
                "uVar7": "shifted_value"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082ac0": {
                    "1": "process_input_data",
                    "28": "process_data"
                },
                "param_1": {
                    "4": "input",
                    "5": "data",
                    "1": "input_param",
                    "2": "param",
                    "7": "param1"
                },
                "param_2": {
                    "7": "arg2",
                    "1": "length",
                    "2": "input_2"
                },
                "param_3": {
                    "1": "output",
                    "6": "arg3",
                    "7": "param3",
                    "2": "data_ptr"
                },
                "piVar1": {
                    "1": "p_data_ptr",
                    "8": "data_ptr",
                    "3": "ptr1",
                    "11": "current_data"
                },
                "iVar2": {
                    "28": "result",
                    "2": "return_value",
                    "1": "result_code"
                },
                "piVar3": {
                    "1": "data_pointer2",
                    "2": "current_array",
                    "3": "current_pointer",
                    "7": "remaining_data"
                },
                "uVar4": {
                    "2": "iteration_count",
                    "4": "index",
                    "1": "u_var4",
                    "7": "count",
                    "14": "counter"
                },
                "puVar5": {
                    "1": "ptr_value",
                    "3": "ptr",
                    "2": "ptr3",
                    "5": "current_value"
                },
                "uVar6": {
                    "1": "current_value",
                    "2": "element_value",
                    "3": "temp1",
                    "7": "value",
                    "4": "value1"
                },
                "uVar7": {
                    "1": "u_var7",
                    "12": "shifted_value",
                    "3": "temp2",
                    "4": "value2"
                }
            }
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = initialize_and_relocate_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_first_occurrence_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_result_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_result_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint process_data_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int process_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort modified_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined stack_buffer [1024];\n  \n  value3 = *(undefined4 *)(param2 + 100);\n  value1 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  value2 = *(undefined4 *)(param2 + 0x24);\n  array = stack_buffer;\n  modified_value = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  zero = 0;\n  buffer = array;\n  result = FUNC_00082b38(param1,buffer_array);\n  if ((-1 < result) && (process_result = process_data_0008378c_00083adc(param1,buffer_array), process_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)modified_value << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "local_488": "buffer_array",
                "local_480": "buffer_size",
                "local_47c": "modified_value",
                "local_47a": "value",
                "local_478": "buffer",
                "local_474": "buffer_size2",
                "local_470": "zero",
                "local_46c": "value1",
                "local_464": "value2",
                "local_424": "value3",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "process_result",
                "local_488[0]": "array"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n",
            "additional_data": {
                "FUN_0008378c": {
                    "24": "process_data",
                    "1": "reverse_and_process_data",
                    "2": "process_and_check_data"
                },
                "param_1": {
                    "3": "input_param",
                    "1": "input1",
                    "2": "input_data",
                    "7": "param1"
                },
                "param_2": {
                    "7": "arg2",
                    "4": "data_param",
                    "1": "data_address",
                    "2": "data_buffer"
                },
                "local_488": {
                    "1": "buffer_list",
                    "2": "local_buffers",
                    "7": "buffer_array",
                    "4": "stack_buffer",
                    "5": "buffer"
                },
                "local_480": {
                    "20": "buffer_size",
                    "1": "buffer_size_1",
                    "2": "size1",
                    "3": "buffer_size1"
                },
                "local_47c": {
                    "3": "flags",
                    "1": "local_var1",
                    "6": "masked_value",
                    "2": "value2",
                    "7": "modified_value"
                },
                "local_47a": {
                    "6": "short_value",
                    "2": "value1",
                    "1": "stack_variable3",
                    "11": "value"
                },
                "local_478": {
                    "1": "output_buffer",
                    "2": "buffer_pointer",
                    "6": "buffer_ptr",
                    "12": "buffer"
                },
                "local_474": {
                    "2": "buffer_size1",
                    "1": "size1",
                    "3": "buffer_size_copy",
                    "5": "buffer_size_2",
                    "6": "buffer_size2"
                },
                "local_470": {
                    "1": "local_var3",
                    "2": "value",
                    "4": "zero",
                    "3": "counter"
                },
                "local_46c": {
                    "1": "value2",
                    "2": "value",
                    "3": "value1"
                },
                "local_464": {
                    "1": "var_3",
                    "2": "another_value",
                    "4": "value2"
                },
                "local_424": {
                    "1": "auxiliary_buffer",
                    "3": "value3",
                    "2": "some_value"
                },
                "auStack_420": {
                    "1": "aux_stack",
                    "4": "stack_array",
                    "5": "data_buffer",
                    "7": "stack_buffer",
                    "3": "buffer"
                },
                "iVar1": {
                    "1": "status",
                    "2": "error_code",
                    "21": "result"
                },
                "iVar2": {
                    "15": "process_result",
                    "1": "check_result",
                    "2": "data_processing_result"
                },
                "local_488[0]": {
                    "1": "array"
                },
                "local_420": {
                    "1": "stack_array"
                }
            }
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "initialize_and_relocate_00083808",
            "code": "\nundefined4 initialize_and_relocate_00083808(undefined4 *result,int *input)\n\n{\n  int value1;\n  int value2;\n  uint temp_var3;\n  ushort ushort_value;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  ushort_value = *(ushort *)(input + 3);\n  temp_var3 = (uint)ushort_value;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    value2 = input[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(input + 3) = ushort_value | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          relocate_function(result);\n          ushort_value = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      value2 = input[4];\n      ushort_value = ushort_value & 0xffdb;\n      *input = value2;\n      input[1] = 0;\n    }\n    else {\n      value2 = input[4];\n    }\n    *(ushort *)(input + 3) = ushort_value | 8;\n    temp_var3 = (uint)(ushort_value | 8);\n  }\n  if ((value2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    initialize_and_relocate_00083808(result,input);\n    temp_var3 = (uint)*(ushort *)(input + 3);\n    value2 = input[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      value1 = input[5];\n    }\n    input[2] = value1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "initialize_and_relocate_00083808",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp_var3",
                "uVar4": "ushort_value",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "relocate_function_00083d9c": "relocate_function",
                "initialize_and_relocate_000842a4": "initialize_and_relocate"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083808": {
                    "1": "check_and_initialize_data",
                    "6": "process_data",
                    "8": "initialize_and_relocate",
                    "3": "initialize_data_structures",
                    "2": "initialize_data"
                },
                "param_1": {
                    "1": "first_param",
                    "3": "output_param",
                    "2": "output_status",
                    "4": "output",
                    "12": "result"
                },
                "param_2": {
                    "7": "input",
                    "3": "input_param",
                    "1": "param_2",
                    "5": "input_array",
                    "2": "input_data"
                },
                "iVar1": {
                    "1": "result",
                    "4": "temp_var1",
                    "7": "value1"
                },
                "iVar2": {
                    "1": "data_value_2",
                    "7": "value2",
                    "4": "temp_var2",
                    "2": "temp_var",
                    "3": "value"
                },
                "uVar3": {
                    "3": "temp_var3",
                    "2": "value",
                    "1": "var1"
                },
                "uVar4": {
                    "1": "unsigned_var_2",
                    "2": "ushort_var",
                    "5": "ushort_value",
                    "3": "temp_var4"
                },
                "initialize_data_structures_00083b14": {
                    "3": "initialize_data_structures"
                },
                "relocate_function_00083d9c": {
                    "3": "relocate_function"
                },
                "initialize_and_relocate_000842a4": {
                    "3": "initialize_and_relocate"
                }
            }
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\noutput identity_function_00083974(output input_value)\n\n{\n  output input_value;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input_value",
                "undefined4": "output",
                "return": "output"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083974": {
                    "4": "return_value",
                    "1": "param_to_return",
                    "3": "return_parameter",
                    "5": "copy_value",
                    "2": "copy_parameter",
                    "14": "identity_function"
                },
                "param_1": {
                    "9": "input",
                    "2": "input_param",
                    "1": "value_to_copy",
                    "10": "input_value",
                    "5": "value"
                },
                "undefined4": {
                    "1": "return_value",
                    "3": "output",
                    "2": "return_type"
                },
                "return": {
                    "1": "copied_value"
                }
            }
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 process_data_00083adc(int *data_ptr,int *info_pointer)\n\n{\n  int *temp_ptr;\n  int temp_var;\n  ushort flags;\n  uint temp;\n  int offset;\n  code *function_ptr;\n  undefined4 result;\n  int temp_var;\n  \n  if ((data_ptr != (int *)0x0) && (data_ptr[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(info_pointer + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(info_pointer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var = info_pointer[4];\n    if (temp_var == 0) {\n      return 0;\n    }\n    temp_var = *info_pointer;\n    if ((flags & 3) == 0) {\n      offset = info_pointer[5];\n    }\n    else {\n      offset = 0;\n    }\n    *info_pointer = temp_var;\n    temp_var = temp_var - temp_var;\n    info_pointer[2] = offset;\n    do {\n      if (temp_var < 1) {\n        return 0;\n      }\n      offset = (*(code *)info_pointer[9])(data_ptr,info_pointer[7],temp_var,temp_var,result);\n      temp_var = temp_var - offset;\n      temp_var = temp_var + offset;\n    } while (0 < offset);\nLAB_00083a54:\n    *(ushort *)(info_pointer + 3) = *(ushort *)(info_pointer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info_pointer + 3) = flags | 0x800;\n  if ((info_pointer[1] < 1) && (info_pointer[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)info_pointer[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp_var = *data_ptr;\n  *data_ptr = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var = (*function_ptr)(data_ptr,info_pointer[7],temp & 0x1000,1);\n    if ((temp_var == -1) && (offset = *data_ptr, offset != 0)) {\n      if ((offset == 0x1d) || (offset == 0x16)) {\n        *data_ptr = temp_var;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(info_pointer + 3);\n    function_ptr = (code *)info_pointer[10];\n  }\n  else {\n    temp_var = info_pointer[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (temp_var = temp_var - info_pointer[1], info_pointer[0xc] != 0)) {\n    temp_var = temp_var - info_pointer[0xf];\n  }\n  temp_var = (*function_ptr)(data_ptr,info_pointer[7],temp_var,0);\n  if (temp_var == -1) {\n    offset = *data_ptr;\n    if (offset != 0) {\n      if ((offset != 0x1d) && (offset != 0x16)) {\n        *(ushort *)(info_pointer + 3) = *(ushort *)(info_pointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info_pointer + 3) = *(ushort *)(info_pointer + 3) & 0xf7ff;\n      *info_pointer = info_pointer[4];\n      info_pointer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(info_pointer + 3) & 0xf7ff;\n    info_pointer[1] = 0;\n    *(ushort *)(info_pointer + 3) = flags;\n    *info_pointer = info_pointer[4];\n  }\n  else {\n    flags = *(ushort *)(info_pointer + 3) & 0xf7ff;\n    *info_pointer = info_pointer[4];\n    *(ushort *)(info_pointer + 3) = flags;\n    info_pointer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    info_pointer[0x14] = temp_var;\n  }\nLAB_00083a00:\n  temp_ptr = (int *)info_pointer[0xc];\n  *data_ptr = temp_var;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != info_pointer + 0x10) {\n    relocate_function_00083d9c(data_ptr);\n  }\n  info_pointer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "data_ptr",
                "param_2": "info_pointer",
                "piVar1": "temp_ptr",
                "iVar2": "temp_var",
                "uVar3": "flags",
                "uVar4": "temp",
                "iVar5": "offset",
                "pcVar6": "function_ptr",
                "unaff_r4": "result",
                "iVar7": "temp_var"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083adc": {
                    "1": "decode_data",
                    "27": "process_data"
                },
                "param_1": {
                    "5": "data_pointer",
                    "4": "input_data",
                    "1": "data_arr",
                    "3": "data_buffer",
                    "6": "data_ptr",
                    "2": "input_array"
                },
                "param_2": {
                    "1": "header",
                    "2": "info_array",
                    "3": "struct_ptr",
                    "4": "info"
                },
                "piVar1": {
                    "1": "temp_ptr1",
                    "3": "temp_var1",
                    "5": "ptr",
                    "2": "temp_pointer"
                },
                "iVar2": {
                    "1": "difference",
                    "4": "temp_var",
                    "3": "var2",
                    "2": "index"
                },
                "uVar3": {
                    "6": "flag",
                    "1": "flag_value",
                    "2": "ushort_var",
                    "14": "flags"
                },
                "uVar4": {
                    "1": "temp_variable_2",
                    "2": "uint_var",
                    "3": "temp_var2",
                    "5": "temp"
                },
                "iVar5": {
                    "4": "offset",
                    "1": "length",
                    "2": "var2",
                    "3": "temp2"
                },
                "pcVar6": {
                    "7": "function_pointer",
                    "4": "callback",
                    "3": "callback_func",
                    "13": "function_ptr",
                    "1": "process_data_func"
                },
                "unaff_r4": {
                    "8": "return_value",
                    "1": "unaffected_var4",
                    "2": "status",
                    "12": "result"
                },
                "iVar7": {
                    "2": "int_var7",
                    "1": "index_var7",
                    "5": "temp_var",
                    "3": "var7",
                    "4": "temp_var4"
                }
            }
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initialize_data_structures_00083b14(int data_structures)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data_structures + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data_structures + 4);\n    *(undefined **)(data_structures + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(data_structures + 0x2e4) = 3;\n    *(int *)(data_structures + 0x2e8) = data_structures + 0x2ec;\n    *(undefined4 *)(data_structures + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data_structures + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    memset_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data_structures + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(data_structures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structures",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083b14": {
                    "25": "initialize_data_structures",
                    "4": "initialize_data",
                    "1": "initialize_state"
                },
                "param_1": {
                    "2": "data_structure",
                    "3": "data_struct_ptr",
                    "4": "data_struct",
                    "1": "input_pointer"
                },
                "puVar1": {
                    "1": "data_struct_ptr1",
                    "2": "array1",
                    "12": "ptr1",
                    "4": "data_structure1"
                },
                "puVar2": {
                    "1": "data_structure_ptr2",
                    "2": "array2",
                    "4": "data_structure2",
                    "12": "ptr2"
                }
            }
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint process_data_00083c40(undefined4 param1,uint param2,byte **data)\n\n{\n  int relocation_info;\n  uint result;\n  uint byte_value;\n  byte *current_byte;\n  uint index;\n  byte temp_byte;\n  byte stack_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  relocation_info = get_relocation_info();\n  if ((relocation_info == 1) && (param2 - 1 < 0xff)) {\n    byte_value = param2 & 0xff;\n    temp_byte = (byte)byte_value;\n    result = 1;\n  }\n  else {\n    result = process_data_00083c402(param1,&temp_byte,param2,data + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    byte_value = (uint)temp_byte;\n  }\n  index = 0;\n  do {\n    current_byte = data[2] + -1;\n    data[2] = current_byte;\n    if ((int)current_byte < 0) {\n      if ((int)data[6] <= (int)current_byte) {\n        **data = (byte)byte_value;\n        current_byte = *data;\n        byte_value = (uint)*current_byte;\n        if (byte_value != 10) goto LAB_00083c90;\n      }\n      relocation_info = process_data_00083c403(param1,byte_value,data);\n      if (relocation_info == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)byte_value;\n      current_byte = *data;\nLAB_00083c90:\n      *data = current_byte + 1;\n    }\n    if (result <= index + 1) {\n      return param2;\n    }\n    byte_value = (uint)stack_array[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "iVar1": "relocation_info",
                "uVar2": "result",
                "uVar3": "byte_value",
                "pbVar4": "current_byte",
                "uVar5": "index",
                "local_1c": "temp_byte",
                "abStack_1b": "stack_array",
                "get_relocation_info_00084298": "get_relocation_info",
                "process_data_0008456c": "process_data2",
                "process_data_000844c4": "process_data3"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083c40": {
                    "1": "process_and_write_data",
                    "23": "process_data",
                    "2": "process_input_data"
                },
                "param_1": {
                    "7": "input",
                    "1": "input_param",
                    "3": "arg1",
                    "10": "param1"
                },
                "param_2": {
                    "1": "arg_2",
                    "7": "param2",
                    "5": "data_size",
                    "4": "length",
                    "3": "size",
                    "2": "arg2"
                },
                "param_3": {
                    "9": "data",
                    "2": "arg3",
                    "7": "param3",
                    "3": "data_buffer",
                    "1": "input_data"
                },
                "iVar1": {
                    "28": "relocation_info",
                    "1": "relocation_info_result"
                },
                "uVar2": {
                    "2": "process_result",
                    "1": "status",
                    "26": "result"
                },
                "uVar3": {
                    "2": "processed_data",
                    "1": "current_value",
                    "8": "current_byte",
                    "10": "byte_value"
                },
                "pbVar4": {
                    "1": "new_byte_ptr",
                    "3": "current_ptr",
                    "2": "current_pointer",
                    "4": "ptr",
                    "14": "current_byte"
                },
                "uVar5": {
                    "4": "loop_counter",
                    "15": "index",
                    "2": "count",
                    "9": "counter",
                    "1": "iteration_count"
                },
                "local_1c": {
                    "1": "stored_byte",
                    "2": "data_byte",
                    "3": "current_byte",
                    "4": "current_value"
                },
                "abStack_1b": {
                    "2": "data_stack",
                    "3": "stack_data",
                    "9": "stack_array",
                    "1": "processed_bytes_array",
                    "6": "byte_array"
                },
                "get_relocation_info_00084298": {
                    "1": "get_relocation_info"
                },
                "process_data_0008456c": {
                    "1": "process_data2"
                },
                "process_data_000844c4": {
                    "1": "process_data3"
                }
            }
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "relocate_function_00083d00",
            "code": "\nundefined4 relocate_function_00083d00(undefined4 input_param,int offset)\n\n{\n  int result;\n  uint rel_info;\n  int adjusted_offset;\n  \n  FUNC_00082598();\n  rel_info = *(uint *)(r_info_141 + 4) & 0xfffffffc;\n  adjusted_offset = ((rel_info - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result = calculate_and_assign_sum(input_param,0);\n    if (result == r_info_141 + rel_info) {\n      result = calculate_and_assign_sum(input_param,-adjusted_offset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_offset;\n        *(uint *)(r_info_141 + 4) = rel_info - adjusted_offset | 1;\n        FUNC_0008259c(input_param);\n        return 1;\n      }\n      adjusted_offset = calculate_and_assign_sum(input_param,0);\n      if (0xf < (int)(adjusted_offset - r_info_141)) {\n        DAT_20071194 = adjusted_offset - r_offset_270;\n        *(dword *)(r_info_141 + 4) =\n             adjusted_offset - r_info_141 | 1;\n      }\n    }\n  }\n  FUNC_0008259c(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "relocate_function_00083d00",
                "param_1": "input_param",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "rel_info",
                "iVar3": "adjusted_offset",
                "calculate_and_assign_sum_00082970": "calculate_and_assign_sum",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "r_info_141",
                "Elf32_Rel_ARRAY_20070000[270].r_offset": "r_offset_270"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083d00": {
                    "2": "calculate_and_adjust_offset",
                    "1": "calculate_and_update_offset",
                    "3": "relocate_function"
                },
                "param_1": {
                    "1": "param",
                    "3": "input_value",
                    "2": "input_data",
                    "10": "input_param"
                },
                "param_2": {
                    "1": "memory_offset",
                    "21": "offset",
                    "2": "offset_value",
                    "3": "current_offset"
                },
                "iVar1": {
                    "1": "return_value",
                    "3": "result1",
                    "2": "result_1",
                    "24": "result"
                },
                "uVar2": {
                    "3": "rel_info",
                    "1": "var_1",
                    "2": "info"
                },
                "iVar3": {
                    "1": "var2",
                    "13": "adjusted_offset",
                    "9": "new_offset",
                    "2": "calculated_offset"
                },
                "calculate_and_assign_sum_00082970": {
                    "1": "calculate_new_sum",
                    "4": "calculate_and_assign_sum"
                },
                "DAT_20071194": {
                    "1": "data_offset",
                    "2": "offset_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "3": "rel_array"
                },
                "FUNC_00082598": {
                    "2": "initialize"
                },
                "FUNC_0008259c": {
                    "1": "cleanup"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "r_info_141"
                },
                "Elf32_Rel_ARRAY_20070000[270].r_offset": {
                    "1": "r_offset_270"
                }
            }
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "relocate_function_00083d9c",
            "code": "\nvoid relocate_function_00083d9c(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool is_condition_met;\n  uint var1;\n  dword var2;\n  int index2;\n  uint var3;\n  dword var4;\n  uint var5;\n  dword var6;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  var1 = *(uint *)(param2 + -4);\n  var4 = param2 - 8;\n  var3 = var1 & 0xfffffffe;\n  var2 = var4 + var3;\n  var5 = *(uint *)(var2 + 4) & 0xfffffffc;\n  if (current_offset == var2) {\n    var5 = var5 + var3;\n    if (-1 < (int)(var1 << 0x1f)) {\n      var4 = var4 - *(int *)(param2 + -8);\n      index2 = *(int *)(var4 + 0xc);\n      index1 = *(int *)(var4 + 8);\n      var5 = var5 + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    var2 = relocate_offset;\n    *(uint *)(var4 + 4) = var5 | 1;\n    current_offset = var4;\n    if (var2 <= var5) {\n      relocate_function_00083d9c_00083d00(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(var2 + 4) = var5;\n    if ((var1 & 1) == 0) {\n      var4 = var4 - *(int *)(param2 + -8);\n      index1 = *(int *)(var4 + 8);\n      var3 = var3 + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        is_condition_met = true;\n      }\n      else {\n        index2 = *(int *)(var4 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        is_condition_met = false;\n      }\n    }\n    else {\n      is_condition_met = false;\n    }\n    if (-1 < *(int *)(var2 + var5 + 4) << 0x1f) {\n      var3 = var3 + var5;\n      index1 = *(int *)(var2 + 8);\n      if ((!is_condition_met) && (index1 == 0x2007046c)) {\n        special_offset1 = var4;\n        special_offset2 = var4;\n        *(undefined4 *)(var4 + 0xc) = 0x2007046c;\n        *(undefined4 *)(var4 + 8) = 0x2007046c;\n        *(uint *)(var4 + 4) = var3 | 1;\n        *(uint *)(var4 + var3) = var3;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(var2 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(var4 + 4) = var3 | 1;\n    *(uint *)(var4 + var3) = var3;\n    if (!is_condition_met) {\n      if (var3 < 0x200) {\n        var1 = var3 & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + var1);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(var3 >> 3) >> 2 & 0xffU);\n        *(int *)(var4 + 8) = index1;\n        *(uint *)(var4 + 0xc) = var1 + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + var1) = var4;\n        *(dword *)(index1 + 0xc) = var4;\n        FUNC_0008259c(param1);\n        return;\n      }\n      var1 = var3 >> 9;\n      if (var1 < 5) {\n        index1 = (var3 >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x15) {\n        index1 = var1 + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x55) {\n        index1 = (var3 >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x155) {\n        index1 = (var3 >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x555) {\n        index1 = (var3 >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      var6 = index2 * 4 + 0x20070464;\n      var2 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (var2 == var6) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        var6 = var2;\n      }\n      else {\n        do {\n          if ((*(uint *)(var2 + 4) & 0xfffffffc) <= var3) break;\n          var2 = *(dword *)(var2 + 8);\n        } while (var6 != var2);\n        var6 = *(dword *)(var2 + 0xc);\n      }\n      *(dword *)(var4 + 0xc) = var6;\n      *(dword *)(var4 + 8) = var2;\n      *(dword *)(var6 + 8) = var4;\n      *(dword *)(var2 + 0xc) = var4;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "relocate_function_00083d9c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "is_condition_met",
                "uVar3": "var1",
                "dVar4": "var2",
                "iVar5": "index2",
                "uVar6": "var3",
                "dVar7": "var4",
                "uVar8": "var5",
                "dVar9": "var6",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "current_offset",
                "Elf32_Rel_ARRAY_20070000[269].r_info": "relocate_offset",
                "Elf32_Rel_ARRAY_20070000[142].r_info": "special_offset1",
                "Elf32_Rel_ARRAY_20070000[143].r_offset": "special_offset2"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083d9c": {
                    "23": "relocate_function",
                    "2": "relocate_and_update_function",
                    "1": "relocated_function"
                },
                "param_1": {
                    "1": "context",
                    "6": "arg1",
                    "3": "param_1",
                    "14": "param1",
                    "4": "param"
                },
                "param_2": {
                    "1": "address_to_relocate",
                    "14": "param2",
                    "3": "param_2",
                    "6": "arg2"
                },
                "iVar1": {
                    "10": "index1",
                    "1": "prev_relocated_address",
                    "2": "first_var",
                    "4": "temp_var1"
                },
                "bVar2": {
                    "1": "is_last_entry",
                    "4": "is_special_case",
                    "2": "is_match"
                },
                "uVar3": {
                    "1": "variable1",
                    "2": "offset",
                    "7": "var1",
                    "3": "flags"
                },
                "dVar4": {
                    "1": "entry_addr",
                    "6": "var2",
                    "2": "offset",
                    "3": "address1"
                },
                "iVar5": {
                    "1": "var2",
                    "10": "index2",
                    "2": "temp2"
                },
                "uVar6": {
                    "6": "offset",
                    "1": "new_var6",
                    "2": "adjusted_offset",
                    "3": "value2"
                },
                "dVar7": {
                    "1": "entry",
                    "5": "var4",
                    "3": "address2"
                },
                "uVar8": {
                    "1": "updated_value",
                    "2": "new_value",
                    "3": "new_offset",
                    "5": "var5"
                },
                "dVar9": {
                    "1": "search_ptr",
                    "6": "var6",
                    "3": "new_address"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "current_offset"
                },
                "Elf32_Rel_ARRAY_20070000[269].r_info": {
                    "1": "relocate_offset"
                },
                "Elf32_Rel_ARRAY_20070000[142].r_info": {
                    "1": "special_offset1"
                },
                "Elf32_Rel_ARRAY_20070000[143].r_offset": {
                    "1": "special_offset2"
                }
            }
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 process_data_00083f34(undefined4 *output,uint *data,uint **pointers)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flags;\n  uint count;\n  uint *ptr1;\n  uint *ptr2;\n  uint length;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint local_var;\n  \n  if (pointers[2] != (uint *)0x0) {\n    flags = *(ushort *)(data + 3);\n    count = (uint)flags;\n    if (((int)(count << 0x1c) < 0) && (data[4] != 0)) {\n      ptr2 = *pointers;\n    }\n    else {\n      result = initialize_and_relocate(output,data);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(data + 3);\n      count = (uint)flags;\n      ptr2 = *pointers;\n    }\n    if ((flags & 2) == 0) {\n      value1 = count & 2;\n      temp2 = value1;\n      length = value1;\n      local_var = value1;\n      if ((count & 1) == 0) {\n        value1 = 0;\n        temp2 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            temp2 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          length = data[2];\n          if ((int)(count << 0x16) < 0) {\n            if (value1 < length) {\n              count = *data;\n              length = value1;\n            }\n            else if ((count & 0x480) == 0) {\n              count = *data;\n            }\n            else {\n              result = *data - data[4];\n              length = result + 1 + value1;\n              temp1 = (int)(data[5] * 3) / 2;\n              if (length <= temp1) {\n                length = temp1;\n              }\n              if ((int)(count << 0x15) < 0) {\n                temp1 = relocate_symbols(output,length);\n                if (temp1 == 0) {\n                  *output = 0xc;\n                  flags = *(ushort *)(data + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory(temp1,data[4],result);\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp1 = relocate_and_copy_symbols(output);\n                if (temp1 == 0) {\n                  relocate_function(output,data[4]);\n                  flags = *(ushort *)(data + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              count = temp1 + result;\n              data[4] = temp1;\n              data[5] = length;\n              *data = count;\n              data[2] = length - result;\n              length = value1;\n            }\n            copy_memory(count,temp2,length);\n            data[2] = data[2] - length;\n            *data = *data + length;\n            length = value1;\n          }\n          else if ((data[4] < *data) || (count = data[5], value1 < count)) {\n            if (value1 < length) {\n              length = value1;\n            }\n            copy_memory(*data,temp2,length);\n            count = data[2];\n            data[2] = count - length;\n            *data = *data + length;\n            if ((count - length == 0) && (result = process_data_00083f34(output,data), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            length = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              length = value1;\n            }\n            length = (*(code *)data[9])(output,data[7],temp2,(length / count) * count);\n            if ((int)length < 1) goto LAB_0008402e;\n          }\n          ptr1 = pointers[2];\n          temp2 = temp2 + length;\n          value1 = value1 - length;\n          pointers[2] = (uint *)((int)ptr1 - length);\n          if ((uint *)((int)ptr1 - length) == (uint *)0x0) break;\n          count = (uint)*(ushort *)(data + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            length = *ptr2;\n            value1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_first_occurrence(length,10,value1);\n            if (result == 0) {\n              temp2 = value1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp2 = (result + 1) - length;\n              local_var = 1;\n            }\n          }\n          temp1 = *data;\n          count = temp2;\n          if (value1 <= temp2) {\n            count = value1;\n          }\n          value2 = data[5];\n          if ((data[4] < temp1) && (temp3 = data[2] + value2, (int)temp3 < (int)count)) {\n            copy_memory(temp1,length,temp3);\n            *data = *data + temp3;\n            result = process_data_00083f34(output,data);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)count < (int)value2) {\n            copy_memory(temp1,length,count);\n            data[2] = data[2] - count;\n            *data = count + *data;\n            temp3 = count;\n          }\n          else {\n            temp3 = (*(code *)data[9])(output,data[7],length,value2);\n            if ((int)temp3 < 1) goto LAB_0008402e;\n          }\n          temp2 = temp2 - temp3;\n          if (temp2 == 0) {\n            result = process_data_00083f34(output,data);\n            if (result != 0) goto LAB_0008402e;\n            local_var = 0;\n          }\n          ptr1 = pointers[2];\n          length = length + temp3;\n          value1 = value1 - temp3;\n          pointers[2] = (uint *)((int)ptr1 - temp3);\n        } while ((uint *)((int)ptr1 - temp3) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      count = 0;\n      do {\n        while( true ) {\n          temp2 = count;\n          if (0x7ffffbff < count) {\n            temp2 = 0x7ffffc00;\n          }\n          if (count != 0) break;\n          value1 = *ptr2;\n          count = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)data[9])(output,data[7],value1,temp2);\n        if (result < 1) {\nLAB_0008402e:\n          flags = *(ushort *)(data + 3);\nLAB_00084030:\n          *(ushort *)(data + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = pointers[2];\n        value1 = value1 + result;\n        count = count - result;\n        pointers[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "data",
                "param_3": "pointers",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flags",
                "uVar5": "count",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "length",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "local_2c": "local_var",
                "initialize_and_relocate_00083808": "initialize_and_relocate",
                "relocate_symbols_00081e14": "relocate_symbols",
                "copy_memory_0008234c": "copy_memory",
                "relocate_and_copy_symbols_000825b0": "relocate_and_copy_symbols",
                "relocate_function_00083d9c": "relocate_function",
                "process_data_00083adc": "process_data",
                "copy_memory_00082438": "copy_memory",
                "find_first_occurrence_00084384": "find_first_occurrence"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083f34": {
                    "1": "process_function",
                    "19": "process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "output_buffer",
                    "5": "input_array",
                    "8": "output"
                },
                "param_2": {
                    "4": "data",
                    "3": "input_array",
                    "1": "parameters",
                    "2": "input_data"
                },
                "param_3": {
                    "2": "ptr_array",
                    "1": "info",
                    "3": "memory"
                },
                "iVar1": {
                    "19": "result",
                    "4": "return_value",
                    "7": "error_code"
                },
                "uVar2": {
                    "1": "current_value",
                    "3": "temp_var1",
                    "2": "start",
                    "14": "value1"
                },
                "uVar3": {
                    "3": "temp_var2",
                    "1": "end",
                    "14": "value2",
                    "2": "var2"
                },
                "uVar4": {
                    "8": "flag",
                    "2": "header_flags",
                    "1": "temp_ushort",
                    "12": "flags"
                },
                "uVar5": {
                    "4": "count",
                    "1": "uint_val",
                    "2": "temp",
                    "3": "size"
                },
                "puVar6": {
                    "1": "temp_pointer",
                    "11": "ptr1",
                    "3": "temp_pointer1",
                    "2": "temp_ptr1",
                    "7": "pointer1"
                },
                "puVar7": {
                    "8": "pointer2",
                    "1": "metadata_pointer",
                    "2": "temp_ptr2",
                    "12": "ptr2",
                    "3": "temp_pointer2"
                },
                "uVar8": {
                    "2": "temp1",
                    "1": "limit",
                    "3": "size",
                    "5": "length"
                },
                "uVar9": {
                    "1": "temp_value3",
                    "2": "symbol_count",
                    "3": "size",
                    "4": "temp1"
                },
                "uVar10": {
                    "1": "temp_value3",
                    "2": "temp3",
                    "5": "temp2",
                    "3": "offset"
                },
                "uVar11": {
                    "1": "limit",
                    "3": "temp2",
                    "2": "temp4",
                    "5": "temp3"
                },
                "local_2c": {
                    "2": "temp3",
                    "1": "new_size",
                    "3": "local_variable",
                    "8": "local_var"
                },
                "uVar15": {
                    "1": "symbol_search_index"
                },
                "uVar16": {
                    "1": "temp_symbol_length"
                },
                "uVar17": {
                    "1": "symbol_search_result"
                },
                "uVar18": {
                    "1": "symbol_remaining_length"
                },
                "initialize_and_relocate_00083808": {
                    "1": "init_and_relocate",
                    "2": "initialize_and_relocate"
                },
                "relocate_symbols_00081e14": {
                    "3": "relocate_symbols"
                },
                "copy_memory_0008234c": {
                    "3": "copy_memory"
                },
                "relocate_and_copy_symbols_000825b0": {
                    "3": "relocate_and_copy_symbols"
                },
                "relocate_function_00083d9c": {
                    "3": "relocate_function"
                },
                "process_data_00083adc": {
                    "1": "process_data2",
                    "2": "process_data"
                },
                "copy_memory_00082438": {
                    "1": "copy_memory"
                },
                "find_first_occurrence_00084384": {
                    "3": "find_first_occurrence"
                }
            }
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nuint32_t get_memory_address_00084290(void)\n\n{\n  magic_number 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290",
                "undefined4": "uint32_t",
                "return": "magic_number"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084290": {
                    "2": "get_base_address",
                    "1": "get_constant_value",
                    "7": "get_magic_number",
                    "19": "get_memory_address"
                },
                "return value": {
                    "1": "base_address"
                },
                "DAT_00070874": {
                    "1": "target_memory_address"
                },
                "PTR_FUN_00084290": {
                    "1": "new_memory_address"
                },
                "PTR_FUN_00084290_001": {
                    "1": "next_memory_address"
                },
                "undefined4": {
                    "1": "unsigned_int32",
                    "11": "uint32_t"
                },
                "0x20070874": {
                    "6": "memory_address",
                    "1": "base_address"
                },
                "return": {
                    "1": "magic_number"
                },
                "PTR_20070874": {
                    "1": "constant_value"
                },
                "PTR_xxxxxxx": {
                    "1": "ptr_xxxxxxx"
                },
                "DAT_xxxxxxx": {
                    "1": "dat_xxxxxxx"
                }
            }
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword get_relocation_info_00084298(void)\n\n{\n  return relocation_arraysymbol_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "[274]": "index",
                "r_info": "rel_info",
                "[274].r_info": "symbol_info"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084298": {
                    "1": "get_relocation_type",
                    "2": "get_rel_info",
                    "3": "get_elf_relocation_info",
                    "12": "get_relocation_info"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "3": "elf_rel_array",
                    "1": "symbol_table",
                    "4": "relocation_table",
                    "2": "elf32_rel_array",
                    "9": "relocation_array",
                    "7": "rel_array"
                },
                "274": {
                    "1": "index"
                },
                "[274]": {
                    "1": "index"
                },
                "r_info": {
                    "1": "r_info_value",
                    "2": "relocation_info",
                    "3": "rel_info"
                },
                "[274].r_info": {
                    "1": "symbol_info"
                }
            }
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_and_relocate_000842a4",
            "code": "\nvoid initialize_and_relocate_000842a4(int input_parameter,int *output)\n\n{\n  ushort flags;\n  int result;\n  int relocation_result;\n  uint uint_value;\n  bool is_condition_met;\n  undefined memory_buffer [4];\n  uint local_value;\n  \n  flags = *(ushort *)(output + 3);\n  uint_value = (uint)flags;\n  if ((int)(uint_value << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = initialize_memory(input_parameter,(int)*(short *)((int)output + 0xe),memory_buffer);\n    if (-1 < result) {\n      is_condition_met = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    flags = *(ushort *)(output + 3);\n    uint_value = (uint)flags;\n  }\n  *(ushort *)(output + 3) = flags | 0x800;\n  if ((uint_value & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  is_condition_met = false;\nLAB_00084300:\n  relocation_result = relocate_symbols(input_parameter,result);\n  flags = *(ushort *)(output + 3);\n  if (relocation_result == 0) {\n    if (-1 < (int)((uint)flags << 0x16)) {\n      *(ushort *)(output + 3) = flags | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input_parameter + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = flags | 0x80;\n    *output = relocation_result;\n    output[4] = relocation_result;\n    output[5] = result;\n    if ((is_condition_met) && (result = process_data(input_parameter,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_and_relocate_000842a4",
                "param_1": "input_parameter",
                "param_2": "output",
                "uVar1": "flags",
                "iVar2": "result",
                "iVar3": "relocation_result",
                "uVar4": "uint_value",
                "bVar5": "is_condition_met",
                "auStack_54": "memory_buffer",
                "local_50": "local_value",
                "initialize_memory_000846b4": "initialize_memory",
                "relocate_symbols_00081e14": "relocate_symbols",
                "process_data_000846dc": "process_data"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000842a4": {
                    "1": "initialize_function",
                    "2": "process_function",
                    "4": "initialize_and_relocate",
                    "3": "initialize_memory"
                },
                "param_1": {
                    "6": "input_parameter",
                    "4": "input",
                    "1": "context",
                    "2": "param",
                    "3": "input_param"
                },
                "param_2": {
                    "3": "output",
                    "2": "data",
                    "1": "param_2"
                },
                "uVar1": {
                    "1": "data_value1",
                    "6": "ushort_value",
                    "4": "value",
                    "2": "value1",
                    "8": "flags"
                },
                "iVar2": {
                    "2": "memory_result",
                    "1": "result_1",
                    "4": "memory_init_result",
                    "5": "status",
                    "10": "result"
                },
                "iVar3": {
                    "1": "result_2",
                    "3": "symbol_relocation_result",
                    "2": "symbol_relocation",
                    "5": "relocation_result",
                    "4": "relocate_result"
                },
                "uVar4": {
                    "1": "data_value_2",
                    "6": "uint_value",
                    "3": "temp_value",
                    "2": "flag_value"
                },
                "bVar5": {
                    "7": "flag",
                    "1": "is_match",
                    "2": "is_flag_set",
                    "10": "is_condition_met"
                },
                "auStack_54": {
                    "1": "memory_array",
                    "4": "temporary_array",
                    "2": "temp_stack",
                    "5": "memory_buffer",
                    "3": "stack_buffer"
                },
                "local_50": {
                    "1": "more_flags",
                    "14": "local_value",
                    "2": "local_var",
                    "4": "local_variable",
                    "3": "local_flags"
                },
                "initialize_memory_000846b4": {
                    "3": "initialize_memory"
                },
                "relocate_symbols_00081e14": {
                    "3": "relocate_symbols"
                },
                "process_data_000846dc": {
                    "3": "process_data"
                }
            }
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool found;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      current_ptr = array;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    current_ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      current_ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "found"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084384": {
                    "2": "find_character_in_buffer",
                    "1": "find_first_instance",
                    "5": "find_char_in_array",
                    "3": "find_character",
                    "9": "find_first_occurrence"
                },
                "param_1": {
                    "3": "sequence",
                    "19": "array",
                    "1": "input_string",
                    "4": "input_array",
                    "2": "buffer"
                },
                "param_2": {
                    "5": "target_char",
                    "9": "target",
                    "3": "target_value",
                    "1": "target_byte",
                    "2": "value"
                },
                "param_3": {
                    "9": "array_length",
                    "1": "array_size",
                    "2": "sequence_length",
                    "3": "size",
                    "13": "length"
                },
                "uVar1": {
                    "14": "xor_result",
                    "1": "current_value",
                    "8": "temp",
                    "3": "result"
                },
                "iVar2": {
                    "1": "iteration",
                    "29": "index"
                },
                "puVar3": {
                    "9": "current_ptr",
                    "5": "current_element",
                    "1": "current_sequence",
                    "3": "current",
                    "2": "current_position",
                    "8": "ptr"
                },
                "bVar4": {
                    "7": "found",
                    "1": "comparison_result",
                    "6": "is_last_iteration",
                    "2": "is_last_index",
                    "3": "is_last_char",
                    "5": "is_last_element"
                }
            }
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid process_data_00084464(int *output,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    extract_zero(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = process_data_00084464_000811cc((int)*(short *)(input + 0xe),param_a,param_b,param_b,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4",
                "extract_zero_from_binary_00084700": "extract_zero"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084464": {
                    "4": "process_extracted_data",
                    "16": "process_data",
                    "1": "extract_and_process_data",
                    "3": "process_binary_data"
                },
                "param_1": {
                    "3": "output_array",
                    "6": "result",
                    "12": "output",
                    "2": "output_buffer"
                },
                "param_2": {
                    "11": "input",
                    "5": "input_data",
                    "2": "data_pointer",
                    "1": "input_data_ptr",
                    "3": "input_array"
                },
                "param_3": {
                    "1": "value1",
                    "6": "param3",
                    "3": "arg1",
                    "4": "param_3",
                    "12": "param_a"
                },
                "param_4": {
                    "4": "param_4",
                    "6": "param4",
                    "1": "value2",
                    "12": "param_b",
                    "3": "arg2"
                },
                "iVar1": {
                    "1": "result_code",
                    "5": "return_value",
                    "2": "status",
                    "21": "result"
                },
                "uVar2": {
                    "5": "extracted_value",
                    "17": "value",
                    "4": "ushort_value",
                    "1": "bit_shifted_value",
                    "2": "data_value"
                },
                "unaff_r4": {
                    "1": "register_4",
                    "9": "unused1",
                    "5": "unused_var1",
                    "2": "unaff_value1"
                },
                "unaff_r5": {
                    "1": "unaff_r5",
                    "2": "unaff_value2",
                    "5": "unused_var2",
                    "9": "unused2"
                },
                "unaff_r6": {
                    "1": "temp3",
                    "9": "unused3",
                    "5": "unused_var3",
                    "2": "unaff_value3"
                },
                "in_lr": {
                    "3": "return_address",
                    "1": "last_register_value",
                    "4": "link_register",
                    "5": "unused_var4",
                    "8": "unused4"
                },
                "extract_zero_from_binary_00084700": {
                    "1": "extract_zero"
                },
                "DAT_200711bc": {
                    "1": "global_data"
                }
            }
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "extract_and_update_value_0008449c",
            "code": "\nvoid extract_and_update_value_0008449c(undefined4 binary_data,int data)\n\n{\n  int extracted_value;\n  ushort updated_value;\n  \n  extracted_value = extract_zero_from_binary_00084700(binary_data,(int)*(short *)(data + 0xe));\n  if (extracted_value == -1) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (extracted_value != -1) {\n    *(int *)(data + 0x50) = extracted_value;\n  }\n  *(ushort *)(data + 0xc) = updated_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "extract_and_update_value_0008449c",
                "param_1": "binary_data",
                "param_2": "data",
                "iVar1": "extracted_value",
                "uVar2": "updated_value"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008449c": {
                    "1": "update_control_status",
                    "3": "update_parameter_value",
                    "2": "update_value_based_on_condition",
                    "4": "extract_and_update_value"
                },
                "param_1": {
                    "7": "binary_data",
                    "1": "input_data",
                    "2": "param1",
                    "3": "param"
                },
                "param_2": {
                    "2": "arg2",
                    "10": "data",
                    "1": "context"
                },
                "iVar1": {
                    "22": "extracted_value",
                    "1": "extracted_result",
                    "5": "result"
                },
                "uVar2": {
                    "1": "updated_parameter_value",
                    "17": "updated_value",
                    "2": "flags",
                    "3": "updated_flag"
                }
            }
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint process_data_000844c4(int input,uint data,undefined4 *data_array,undefined4 param)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data_var2, index == 0)) {\n    index = initialize_and_relocate(input,data_array,ushort_value,uint_value,param);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    index = data_var2;\n    uint_value = (uint)ushort_value;\n  }\n  data = data & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*data_array;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    ptr = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) goto LAB_000844f6;\n  }\n  index = process_data_000844c4(input,data_array);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*data_array;\n  index = 1;\nLAB_000844f8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = ptr + 1;\n  *ptr = (char)data;\n  if (((data_array[5] == index) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (data == 10)))) &&\n     (index = process_data_000844c4(input,data_array), index != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "data_array",
                "param_4": "param",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "ptr",
                "iVar4": "index",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "initialize_and_relocate_00083808": "initialize_and_relocate",
                "process_data_00083adc": "process_data",
                "param_3[4]": "data_var2"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000844c4": {
                    "2": "process_and_validate_data",
                    "3": "process_and_update_data",
                    "17": "process_data",
                    "1": "process_and_initialize_data"
                },
                "param_1": {
                    "6": "input",
                    "1": "input1",
                    "2": "input_data",
                    "5": "data_ptr",
                    "3": "input_param"
                },
                "param_2": {
                    "2": "character",
                    "9": "data",
                    "1": "byte_param",
                    "4": "input_value",
                    "5": "value"
                },
                "param_3": {
                    "2": "data_ptr",
                    "7": "data_array",
                    "1": "input_data",
                    "3": "data_structures",
                    "6": "data_struct"
                },
                "param_4": {
                    "1": "info",
                    "7": "param",
                    "2": "size",
                    "4": "value"
                },
                "uVar1": {
                    "1": "info_array_third_value",
                    "13": "ushort_value",
                    "4": "value",
                    "2": "ushort_var"
                },
                "uVar2": {
                    "12": "uint_value",
                    "2": "uint_var",
                    "1": "uint_val"
                },
                "puVar3": {
                    "4": "byte_ptr",
                    "1": "ptr_var",
                    "2": "pointer_value",
                    "7": "pointer",
                    "8": "ptr"
                },
                "iVar4": {
                    "1": "data_offset",
                    "2": "int_var",
                    "4": "offset",
                    "9": "index",
                    "6": "result"
                },
                "initialize_data_structures_00083b14": {
                    "7": "initialize_data_structures"
                },
                "initialize_and_relocate_00083808": {
                    "7": "initialize_and_relocate"
                },
                "process_data_00083adc": {
                    "7": "process_data"
                },
                "param_3 + 6": {
                    "1": "data_params_ptr_offset"
                },
                "param_3[4]": {
                    "1": "data_var2"
                },
                "param_3 + 5": {
                    "1": "data_params_ptr_offset2"
                }
            }
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid process_data_0008456c(undefined4 *output_buffer,int size,undefined4 input_value,undefined4 *result)\n\n{\n  code *function_pointer;\n  undefined4 memory_address;\n  int return_value;\n  undefined temporary_buffer [12];\n  \n  function_pointer = DAT_20070898;\n  if (size == 0) {\n    memory_address = get_memory_address_00084290();\n    return_value = (*function_pointer)(output_buffer,temporary_buffer,0,memory_address,result);\n  }\n  else {\n    memory_address = get_memory_address_00084290();\n    return_value = (*function_pointer)(output_buffer,size,input_value,memory_address,result);\n  }\n  if (return_value == -1) {\n    *result = 0;\n    *output_buffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "output_buffer",
                "param_2": "size",
                "param_3": "input_value",
                "param_4": "result",
                "pcVar1": "function_pointer",
                "uVar2": "memory_address",
                "iVar3": "return_value",
                "auStack_24": "temporary_buffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008456c": {
                    "18": "process_data",
                    "1": "execute_operation",
                    "4": "process_memory",
                    "2": "process_function"
                },
                "param_1": {
                    "2": "function_pointer",
                    "1": "input_pointer",
                    "4": "result",
                    "3": "output",
                    "10": "output_buffer"
                },
                "param_2": {
                    "1": "option_flag",
                    "11": "size"
                },
                "param_3": {
                    "2": "constant_value",
                    "7": "input_value",
                    "1": "input_data",
                    "6": "value",
                    "3": "param"
                },
                "param_4": {
                    "1": "output",
                    "2": "result_pointer",
                    "9": "status",
                    "11": "result"
                },
                "pcVar1": {
                    "11": "function_ptr",
                    "18": "function_pointer",
                    "1": "execute_callback"
                },
                "uVar2": {
                    "1": "memory_addr",
                    "27": "memory_address"
                },
                "iVar3": {
                    "1": "operation_result",
                    "11": "result",
                    "18": "return_value"
                },
                "auStack_24": {
                    "1": "buffer",
                    "3": "stack_data",
                    "2": "stack_buffer",
                    "4": "auxiliary_stack",
                    "6": "temporary_buffer"
                }
            }
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_number_to_byte_000845bc",
            "code": "\nunsigned_integer convert_number_to_byte_000845bc(unsigned_integer *destination,char *buffer,uint value)\n\n{\n  if (buffer == (char *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = converted_byte;\n    return 1;\n  }\n  *destination = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_number_to_byte_000845bc",
                "param_1": "destination",
                "param_2": "buffer",
                "param_3": "value",
                "undefined4": "unsigned_integer",
                "char": "byte",
                "undefined": "char",
                "(char)param_3": "converted_byte"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000845bc": {
                    "1": "convert_integer_to_byte",
                    "3": "decode_value",
                    "2": "convert_value_to_byte"
                },
                "param_1": {
                    "5": "output",
                    "4": "output_value",
                    "1": "output_buffer",
                    "3": "result"
                },
                "param_2": {
                    "3": "input_ptr",
                    "1": "input_data",
                    "2": "output",
                    "6": "buffer",
                    "5": "output_buffer"
                },
                "param_3": {
                    "2": "byte_value",
                    "1": "encoded_value",
                    "6": "input_value",
                    "12": "value",
                    "4": "number"
                },
                "undefined4": {
                    "1": "int"
                },
                "char": {
                    "1": "uint8",
                    "3": "byte"
                },
                "undefined": {
                    "1": "char"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "(undefined *)0x0": {
                    "3": "null"
                },
                "0x100": {
                    "1": "max_memory_size",
                    "2": "256"
                },
                "(char)param_3": {
                    "1": "decoded_character"
                },
                "0x8a": {
                    "1": "error_value",
                    "3": "error_code"
                },
                "0xffffffff": {
                    "1": "error_code"
                },
                "0x0": {
                    "1": "null_ptr",
                    "2": "null"
                },
                "output": {
                    "1": "converted_value"
                },
                "value": {
                    "1": "byte_value"
                },
                "(undefined)param_3": {
                    "1": "(char)number"
                },
                "param_2 == (undefined *)0x0": {
                    "1": "memory_source_is_null"
                },
                "param_3 < 0x100": {
                    "1": "value_to_copy_less_than_256"
                },
                "*param_2 = (char)param_3": {
                    "1": "copy_value_to_memory"
                },
                "*param_1 = 0x8a": {
                    "1": "set_error_code"
                }
            }
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_and_relocate_data_000846a4",
            "code": "\nundefined4 process_and_relocate_data_000846a4(int data)\n\n{\n  dword relocation_offset;\n  undefined4 result;\n  int return_value;\n  \n  relocation_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (data != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures;\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      result = process_data(relocation_offset,data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) &&\n         (return_value = (**(code **)(data + 0x2c))(relocation_offset,*(undefined4 *)(data + 0x1c)), return_value < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        relocate_function(relocation_offset,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          relocate_function(relocation_offset);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        relocate_function(relocation_offset);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(data + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_and_relocate_data_000846a4",
                "param_1": "data",
                "dVar1": "relocation_offset",
                "uVar2": "result",
                "iVar3": "return_value",
                "initialize_data_structures_00083b14()": "initialize_data_structures",
                "process_data_00083adc": "process_data",
                "relocate_function_00083d9c": "relocate_function",
                "initialize_data_structures_00083b14": "initialize_data_structures"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000846a4": {
                    "1": "process_and_relocate_function",
                    "9": "process_data",
                    "5": "process_and_relocate",
                    "2": "process_function",
                    "12": "process_and_relocate_data"
                },
                "param_1": {
                    "3": "data_address",
                    "10": "data",
                    "1": "data_pointer",
                    "4": "input_param"
                },
                "dVar1": {
                    "5": "offset",
                    "1": "reloc_offset",
                    "13": "relocation_offset",
                    "4": "r_offset",
                    "2": "data_offset"
                },
                "uVar2": {
                    "27": "result",
                    "4": "return_value"
                },
                "iVar3": {
                    "4": "process_result",
                    "1": "relocate_result",
                    "10": "return_value",
                    "3": "status",
                    "2": "process_return_value"
                },
                "initialize_data_structures_00083b14()": {
                    "1": "initialize_data_structures"
                },
                "process_data_00083adc": {
                    "3": "process_data"
                },
                "relocate_function_00083d9c": {
                    "3": "relocate_function"
                },
                "FUNC_00083c08": {
                    "1": "cleanup_1"
                },
                "FUNC_00083c0c": {
                    "1": "cleanup_2"
                },
                "initialize_data_structures_00083b14": {
                    "2": "initialize_data_structures"
                }
            }
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_memory_000846b4",
            "code": "\nvoid initialize_memory_000846b4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = initialize_memory_000846b4_000811b4(arg1,arg2,arg2,0,arg3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_memory_000846b4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000846b4": {
                    "1": "initialize_memory_and_get_result",
                    "2": "initialize_and_check_memory",
                    "22": "initialize_memory"
                },
                "param_1": {
                    "3": "output_ptr",
                    "1": "output_value",
                    "7": "output",
                    "16": "result",
                    "2": "result_pointer"
                },
                "param_2": {
                    "3": "input1",
                    "2": "param1",
                    "8": "arg1",
                    "1": "input_a"
                },
                "param_3": {
                    "2": "input_2",
                    "3": "value2",
                    "1": "arg3",
                    "8": "arg2"
                },
                "param_4": {
                    "2": "param3",
                    "1": "value2",
                    "3": "input3",
                    "8": "arg3"
                },
                "iVar1": {
                    "1": "result_code",
                    "2": "status",
                    "3": "initialize_result",
                    "4": "init_result",
                    "8": "result"
                }
            }
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "process_data_000846dc",
            "code": "\nvoid process_data_000846dc(int *output,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = find_index_in_data_array(input_value);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "process_data_000846dc",
                "param_1": "output",
                "param_2": "input_value",
                "iVar1": "result",
                "get_one_000811be": "find_index_in_data_array"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000846dc": {
                    "1": "copy_value_if_not_negative",
                    "5": "process_data",
                    "2": "extract_and_assign_value"
                },
                "param_1": {
                    "1": "output_value_ptr",
                    "3": "output_value",
                    "11": "output",
                    "9": "result",
                    "2": "result_pointer"
                },
                "param_2": {
                    "13": "input",
                    "14": "input_value",
                    "1": "input_param"
                },
                "iVar1": {
                    "2": "return_value",
                    "3": "error_code",
                    "1": "index",
                    "5": "status",
                    "18": "result"
                },
                "get_one_000811be": {
                    "1": "retrieve_value"
                },
                "DAT_200711bc": {
                    "1": "valid_result"
                }
            }
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "extract_zero_from_binary_00084700",
            "code": "\nvoid extract_zero_from_binary_00084700(int *result,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = find_zero_value(input_1,input_2,input_3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "extract_zero_from_binary_00084700",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "iVar1": "result",
                "get_zero_000811c2": "find_zero_value"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084700": {
                    "1": "find_zero_or_value",
                    "3": "extract_zero_from_binary",
                    "2": "find_valid_value"
                },
                "param_1": {
                    "2": "output_ptr",
                    "1": "output_pointer",
                    "5": "output_value",
                    "4": "result_ptr",
                    "6": "output",
                    "13": "result"
                },
                "param_2": {
                    "8": "input1",
                    "1": "input_param_1",
                    "3": "value_1",
                    "2": "input_param1",
                    "5": "arg1"
                },
                "param_3": {
                    "8": "input_2",
                    "1": "value2",
                    "2": "input_param2",
                    "3": "value_2",
                    "5": "arg2"
                },
                "param_4": {
                    "8": "input3",
                    "2": "input_param3",
                    "1": "input_var_3",
                    "5": "arg3",
                    "3": "value_3"
                },
                "iVar1": {
                    "1": "zero_index",
                    "2": "check_result",
                    "3": "zero_value",
                    "13": "result"
                },
                "DAT_200711bc": {
                    "1": "found_zero"
                },
                "get_zero_000811c2": {
                    "1": "get_zero_value"
                }
            }
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "initialize_and_check_00084728",
            "code": "\nvoid initialize_and_check_00084728(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_200711bc = 0;\n  init_result = initialize_000811c6(arg1,arg2,arg3);\n  if ((init_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "initialize_and_check_00084728",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "init_result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084728": {
                    "16": "initialize_and_check",
                    "6": "initialize_and_check_result",
                    "1": "initialize_and_check_results",
                    "5": "initialize_and_check_error"
                },
                "param_1": {
                    "1": "output_error_code",
                    "3": "result_ptr",
                    "4": "output",
                    "16": "result",
                    "2": "result_pointer"
                },
                "param_2": {
                    "3": "param_2",
                    "1": "input_param_1",
                    "13": "arg1"
                },
                "param_3": {
                    "3": "input_2",
                    "1": "value2",
                    "13": "arg2"
                },
                "param_4": {
                    "3": "input3",
                    "1": "config_param_3",
                    "13": "arg3"
                },
                "iVar1": {
                    "3": "initialization_result",
                    "1": "result_status",
                    "2": "status",
                    "16": "init_result",
                    "5": "result"
                },
                "DAT_200711bc": {
                    "1": "error_code"
                }
            }
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculate_result_00084750(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = subtract_and_adjust_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084750": {
                    "1": "perform_operation",
                    "4": "process_parameters",
                    "6": "calculate_result"
                },
                "param_1": {
                    "1": "input_value1",
                    "10": "input1",
                    "2": "input_value_1",
                    "3": "first_param"
                },
                "param_2": {
                    "10": "input_2",
                    "1": "value2",
                    "2": "input_value_2",
                    "3": "second_param"
                },
                "param_3": {
                    "8": "input_3",
                    "1": "check_condition1",
                    "2": "flag1",
                    "3": "third_param",
                    "5": "input3"
                },
                "param_4": {
                    "8": "input_4",
                    "3": "fourth_param",
                    "2": "input_value_4",
                    "1": "flag_param_2",
                    "5": "input4"
                },
                "iVar1": {
                    "29": "result",
                    "2": "adjusted_result"
                }
            }
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint input_value,int value2,undefined4 lower_part,undefined4 upper_part,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = perform_division_and_get_remainder();\n  product = product * concatenate_values(upper_part,lower_part);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (value2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value",
                "param_2": "value2",
                "param_5": "result_array",
                "divide_with_remainder_000847e0": "perform_division_and_get_remainder",
                "uVar1": "result",
                "lVar2": "product",
                "param_3": "lower_part",
                "param_4": "upper_part",
                "CONCAT44": "concatenate_values"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008477c": {
                    "1": "subtract_and_calculate_remainder",
                    "2": "subtract_values",
                    "5": "subtract_and_store",
                    "8": "calculate_difference",
                    "3": "subtract_and_adjust"
                },
                "param_1": {
                    "19": "input_value",
                    "2": "num1",
                    "1": "original_value",
                    "5": "value1"
                },
                "param_2": {
                    "1": "subtraction_value",
                    "2": "second_param",
                    "5": "value2",
                    "4": "offset"
                },
                "param_5": {
                    "11": "output_array",
                    "1": "output_array_ptr",
                    "13": "result_array",
                    "4": "result"
                },
                "divide_with_remainder_000847e0": {
                    "1": "divide_with_remainder"
                },
                "uVar1": {
                    "2": "temp_result",
                    "1": "result_as_uint",
                    "6": "calculated_value",
                    "13": "result",
                    "3": "quotient"
                },
                "lVar2": {
                    "1": "temp_result_extended",
                    "6": "multiplied_value",
                    "17": "product"
                },
                "concatenated_params": {
                    "1": "concatenated_values"
                },
                "param_3": {
                    "2": "lower_part",
                    "1": "low_part_multiplier"
                },
                "param_4": {
                    "1": "high_part_multiplier",
                    "2": "upper_part"
                },
                "CONCAT44": {
                    "1": "concatenate_values"
                }
            }
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_adjust_000847ac",
            "code": "\nvoid subtract_and_adjust_000847ac(uint input_value,int divisor,undefined4 multiplier_low,undefined4 multiplier_high,int *result_array)\n\n{\n  uint quotient;\n  longlong division_result;\n  \n  division_result = calculate_division();\n  division_result = division_result * product;\n  quotient = (uint)division_result;\n  *result_array = input_value - quotient;\n  result_array[1] = (divisor - (int)((ulonglong)division_result >> 0x20)) - (uint)(input_value < quotient);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_adjust_000847ac",
                "param_1": "input_value",
                "param_2": "divisor",
                "param_5": "result_array",
                "lVar2": "division_result",
                "uVar1": "quotient",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "CONCAT44(param_4,param_3)": "product",
                "calculate_division_00084a80": "calculate_division"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000847ac": {
                    "4": "subtract_and_update",
                    "1": "subtract_and_update_values",
                    "2": "subtract_values",
                    "6": "calculate_difference",
                    "9": "subtract_and_adjust"
                },
                "param_1": {
                    "15": "input_value",
                    "2": "input1",
                    "10": "dividend",
                    "1": "input_param"
                },
                "param_2": {
                    "2": "subtrahend",
                    "1": "second_param_value",
                    "9": "divisor"
                },
                "param_5": {
                    "6": "output_array",
                    "1": "output_buffer",
                    "5": "result",
                    "12": "result_array"
                },
                "lVar2": {
                    "1": "result",
                    "15": "division_result",
                    "9": "product"
                },
                "uVar1": {
                    "1": "casted_division_result",
                    "2": "division_result",
                    "3": "unsigned_result",
                    "8": "quotient"
                },
                "param_3": {
                    "1": "upper_value"
                },
                "param_4": {
                    "1": "lower_value"
                },
                "CONCAT44(param_4,param_3)": {
                    "1": "product"
                },
                "calculate_division_00084a80": {
                    "1": "calculate_division"
                }
            }
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_with_remainder_000847e0",
            "code": "\nundefined8 divide_with_remainder_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint is_divisor_negative;\n  uint temp3;\n  uint temp4;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividend_high / quotient;\n      temp1 = (divisor & 0xffff) * temp1;\n      is_divisor_negative = dividend >> 0x10 | (dividend_high - quotient * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0) {\n        carry_flag = carry_check(is_divisor_negative,divisor);\n        is_divisor_negative = is_divisor_negative + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0)) {\n          quotient_high = temp1 - 2;\n          is_divisor_negative = is_divisor_negative + divisor;\n        }\n      }\n      temp2 = (is_divisor_negative - temp1) / quotient;\n      temp1 = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((is_divisor_negative - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((carry_check(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp1 && temp1 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        temp4 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        is_divisor_negative = quotient_high / temp1;\n        temp4 = divisor & 0xffff;\n        temp1 = temp4 * is_divisor_negative;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp2 >> 0x10 | (quotient_high - temp1 * is_divisor_negative) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = is_divisor_negative;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = carry_check(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = is_divisor_negative - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient = is_divisor_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp1) / temp1;\n        is_divisor_negative = temp4 * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0) {\n          carry_flag = carry_check(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_divisor_negative;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / temp1;\n      is_divisor_negative = temp4 * quotient;\n      temp2 = dividend >> 0x10 | (dividend_high - temp1 * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0) {\n        carry_flag = carry_check(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((carry_flag == false) && (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - is_divisor_negative) / temp1;\n      temp4 = temp4 * temp2;\n      temp1 = dividend & 0xffff | ((temp2 - is_divisor_negative) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((carry_check(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp4 && temp4 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_amount = leading_zero_count(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      temp4 = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      is_divisor_negative = temp4 >> 0x10;\n      quotient = temp1 / is_divisor_negative;\n      temp2 = (temp4 & 0xffff) * quotient;\n      temp1 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp1 >> 0x10 | (temp1 - is_divisor_negative * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = carry_check(temp1,temp4);\n        temp1 = temp1 + temp4;\n        quotient_high = quotient - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          quotient_high = quotient - 2;\n          temp1 = temp1 + temp4;\n        }\n      }\n      temp2 = (temp1 - temp2) / is_divisor_negative;\n      temp3 = (temp4 & 0xffff) * temp2;\n      temp1 = temp1 & 0xffff | ((temp1 - temp2) - is_divisor_negative * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp3 && temp3 - temp1 != 0) {\n        carry_flag = carry_check(temp1,temp4);\n        temp1 = temp1 + temp4;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp3 && temp3 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + temp4;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n      temp1 = (uint)((ulonglong)product >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp3 < temp1) ||\n         ((temp1 - temp3 == temp1 && (dividend << shift_amount < (uint)product)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar9": "is_dividend_negative",
                "bVar13": "carry_flag",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar10": "is_divisor_negative",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "iVar6": "shift_amount",
                "lVar1": "product",
                "uVar1": "is_negative_dividend",
                "CARRY4": "carry_check",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000847e0": {
                    "1": "div_with_check",
                    "7": "divide_with_remainder",
                    "3": "divide_unsigned",
                    "5": "divide_unsigned_integers"
                },
                "param_1": {
                    "2": "dividend_high",
                    "28": "dividend"
                },
                "param_2": {
                    "1": "numerator",
                    "3": "dividend_upper",
                    "4": "dividend_low",
                    "6": "divisor",
                    "7": "dividend_high",
                    "2": "dividend_remainder"
                },
                "param_3": {
                    "4": "divisor_high",
                    "19": "divisor",
                    "6": "quotient",
                    "1": "divisor_upper"
                },
                "param_4": {
                    "1": "divisor_high_part",
                    "3": "divisor_upper",
                    "6": "remainder",
                    "2": "divisor"
                },
                "uVar9": {
                    "1": "divisor_negative",
                    "2": "is_negative",
                    "12": "is_dividend_negative",
                    "3": "negative_dividend",
                    "5": "is_negative_dividend"
                },
                "bVar13": {
                    "2": "is_temp_negative",
                    "4": "is_carry",
                    "1": "is_negative_dividend",
                    "7": "carry_flag"
                },
                "uVar2": {
                    "1": "quotient_part_1",
                    "2": "quotient_partial1",
                    "5": "quotient_low",
                    "6": "quotient",
                    "4": "quotient_high"
                },
                "uVar3": {
                    "3": "remainder",
                    "1": "quotient",
                    "2": "quotient_partial2",
                    "4": "quotient_low",
                    "5": "quotient_high"
                },
                "uVar4": {
                    "1": "temp_divisor_part1",
                    "3": "temp1"
                },
                "uVar5": {
                    "1": "quotient_low",
                    "2": "quotient_divisor_low",
                    "4": "temp2"
                },
                "uVar7": {
                    "1": "temp3",
                    "2": "temp4",
                    "4": "temp1"
                },
                "uVar8": {
                    "1": "u_dividend_low",
                    "4": "temp2",
                    "2": "temp_high"
                },
                "uVar10": {
                    "1": "dividend_quotient_partial",
                    "5": "is_divisor_negative"
                },
                "uVar11": {
                    "1": "temp_quotient",
                    "2": "quotient_high",
                    "3": "temp3"
                },
                "uVar12": {
                    "1": "combined_remainder",
                    "2": "temp4"
                },
                "iVar6": {
                    "1": "bit_count",
                    "3": "leading_zeros",
                    "7": "shift_amount",
                    "6": "shift_count"
                },
                "lVar1": {
                    "1": "long_multiplication",
                    "4": "product",
                    "2": "quotient"
                },
                "uVar1": {
                    "1": "is_negative_dividend"
                },
                "uVar6": {
                    "1": "shift_count",
                    "2": "temp3"
                },
                "uVar15": {
                    "1": "quotient"
                },
                "uVar16": {
                    "1": "partial2"
                },
                "uVar17": {
                    "1": "quotient"
                },
                "uVar18": {
                    "1": "temp7"
                },
                "uVar14": {
                    "1": "dividend_quotient_final"
                },
                "CARRY4": {
                    "1": "carry_check"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "uVar13": {
                    "1": "carry_flag"
                },
                "uVar19": {
                    "1": "temp8"
                },
                "uVar20": {
                    "1": "temp8"
                },
                "uVar21": {
                    "1": "temp10"
                },
                "uVar22": {
                    "1": "temp10"
                },
                "uVar23": {
                    "1": "temp11"
                },
                "uVar24": {
                    "1": "temp12"
                },
                "uVar25": {
                    "1": "temp14"
                },
                "uVar26": {
                    "1": "temp14"
                },
                "uVar27": {
                    "1": "temp16"
                },
                "uVar28": {
                    "1": "temp16"
                },
                "uVar29": {
                    "1": "temp17"
                },
                "uVar30": {
                    "1": "temp19"
                },
                "uVar31": {
                    "1": "temp20"
                },
                "uVar32": {
                    "1": "temp21"
                },
                "uVar33": {
                    "1": "temp21"
                },
                "uVar34": {
                    "1": "temp22"
                },
                "uVar35": {
                    "1": "temp23"
                },
                "uVar36": {
                    "1": "temp25"
                },
                "uVar37": {
                    "1": "temp26"
                },
                "uVar38": {
                    "1": "temp27"
                },
                "uVar39": {
                    "1": "temp27"
                },
                "uVar40": {
                    "1": "temp28"
                },
                "uVar41": {
                    "1": "temp29"
                },
                "uVar42": {
                    "1": "temp30"
                },
                "uVar43": {
                    "1": "temp31"
                },
                "uVar44": {
                    "1": "temp32"
                },
                "uVar45": {
                    "1": "temp33"
                },
                "uVar46": {
                    "1": "temp34"
                },
                "uVar47": {
                    "1": "temp35"
                },
                "uVar48": {
                    "1": "temp36"
                },
                "uVar49": {
                    "1": "temp37"
                },
                "uVar50": {
                    "1": "temp38"
                },
                "uVar51": {
                    "1": "temp39"
                },
                "uVar52": {
                    "1": "temp40"
                },
                "uVar53": {
                    "1": "temp41"
                },
                "uVar54": {
                    "1": "temp42"
                },
                "uVar55": {
                    "1": "temp43"
                },
                "uVar56": {
                    "1": "temp44"
                },
                "uVar57": {
                    "1": "temp45"
                },
                "uVar58": {
                    "1": "temp46"
                },
                "uVar59": {
                    "1": "temp47"
                },
                "uVar60": {
                    "1": "temp48"
                },
                "uVar61": {
                    "1": "temp49"
                },
                "uVar62": {
                    "1": "temp50"
                },
                "uVar63": {
                    "1": "temp51"
                },
                "uVar64": {
                    "1": "temp52"
                },
                "uVar65": {
                    "1": "temp53"
                },
                "uVar66": {
                    "1": "temp54"
                },
                "uVar67": {
                    "1": "temp55"
                },
                "uVar68": {
                    "1": "temp56"
                },
                "uVar69": {
                    "1": "temp57"
                },
                "uVar70": {
                    "1": "temp58"
                },
                "uVar71": {
                    "1": "temp59"
                },
                "uVar72": {
                    "1": "temp60"
                },
                "uVar73": {
                    "1": "temp61"
                },
                "uVar74": {
                    "1": "temp62"
                },
                "uVar75": {
                    "1": "temp63"
                },
                "uVar76": {
                    "1": "temp64"
                },
                "uVar77": {
                    "1": "temp65"
                },
                "uVar78": {
                    "1": "temp66"
                },
                "uVar79": {
                    "1": "temp67"
                },
                "uVar80": {
                    "1": "temp68"
                },
                "uVar81": {
                    "1": "temp69"
                },
                "uVar82": {
                    "1": "temp70"
                },
                "uVar83": {
                    "1": "temp71"
                },
                "uVar84": {
                    "1": "temp72"
                },
                "bVar14": {
                    "1": "carry_flag"
                },
                "iVar15": {
                    "1": "zero_flag"
                },
                "iVar16": {
                    "1": "shift_count"
                },
                "iVar17": {
                    "1": "leading_zeros_count"
                },
                "lVar18": {
                    "1": "product"
                },
                "uVar9_edited": {
                    "1": "is_dividend_positive"
                },
                "uVar10_edited": {
                    "1": "is_divisor_positive"
                },
                "param_1_edited": {
                    "1": "absolute_dividend"
                },
                "param_2_edited": {
                    "1": "absolute_divisor"
                },
                "param_3_edited": {
                    "1": "quotient_result"
                },
                "param_4_edited": {
                    "1": "remainder_result"
                }
            }
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_division_00084a80",
            "code": "\nulonglong calculate_division_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint quotient;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_amount = LZCOUNT(quotient);\n      if (shift_amount == 0) {\n        divisor = divisor - quotient;\n        temp1 = quotient >> 0x10;\n        temp3 = quotient & 0xffff;\n        quotient = 1;\n      }\n      else {\n        quotient = quotient << shift_amount;\n        temp5 = divisor >> (0x20U - shift_amount & 0xff);\n        temp1 = quotient >> 0x10;\n        temp6 = temp5 / temp1;\n        temp3 = quotient & 0xffff;\n        quotient = temp3 * temp6;\n        temp3 = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        temp2 = temp3 >> 0x10 | (temp5 - temp1 * temp6) * 0x10000;\n        dividend = dividend << shift_amount;\n        temp5 = temp6;\n        if (temp2 <= quotient && quotient - temp2 != 0) {\n          carry_flag = CARRY4(temp2,quotient);\n          temp2 = temp2 + quotient;\n          temp5 = temp6 - 1;\n          if ((carry_flag == false) && (temp2 <= quotient && quotient - temp2 != 0)) {\n            temp5 = temp6 - 2;\n            temp2 = temp2 + quotient;\n          }\n        }\n        temp4 = (temp2 - quotient) / temp1;\n        temp6 = temp3 * temp4;\n        divisor = temp3 & 0xffff | ((temp2 - quotient) - temp1 * temp4) * 0x10000;\n        quotient = temp4;\n        if (divisor <= temp6 && temp6 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient = temp4 - 1;\n          if ((carry_flag == false) && (divisor <= temp6 && temp6 - divisor != 0)) {\n            quotient = temp4 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp6;\n        quotient = quotient | temp5 << 0x10;\n      }\n      temp6 = divisor / temp1;\n      temp2 = temp3 * temp6;\n      temp3 = dividend >> 0x10 | (divisor - temp1 * temp6) * 0x10000;\n      temp5 = temp6;\n      if (temp3 <= temp2 && temp2 - temp3 != 0) {\n        carry_flag = CARRY4(temp3,quotient);\n        temp3 = temp3 + quotient;\n        temp5 = temp6 - 1;\n        if ((carry_flag == false) && (temp3 <= temp2 && temp2 - temp3 != 0)) {\n          temp5 = temp6 - 2;\n          temp3 = temp3 + quotient;\n        }\n      }\n      temp6 = (temp3 - temp2) / temp1;\n      temp3 = temp3 * temp6;\n      temp3 = dividend & 0xffff | ((temp3 - temp2) - temp1 * temp6) * 0x10000;\n      temp1 = temp6;\n      if (temp3 <= temp3 && temp3 - temp3 != 0) {\n        temp1 = temp6 - 1;\n        if ((CARRY4(temp3,quotient) == false) &&\n           (temp3 + quotient <= temp3 && temp3 - (temp3 + quotient) != 0)) {\n          temp1 = temp6 - 2;\n        }\n      }\n      return combine_result(quotient,temp1 | temp5 << 0x10);\n    }\n    shift_amount = LZCOUNT(quotient);\n    if (shift_amount != 0) {\n      temp5 = dividend >> (0x20U - shift_amount & 0xff);\n      quotient = quotient << shift_amount;\n      dividend = dividend << shift_amount;\n      divisor = temp5 | divisor << shift_amount;\n    }\n    quotient = quotient >> 0x10;\n    temp1 = divisor / quotient;\n    temp3 = (quotient & 0xffff) * temp1;\n    temp6 = dividend >> 0x10 | (divisor - quotient * temp1) * 0x10000;\n    temp5 = temp1;\n    if (temp6 <= temp3 && temp3 - temp6 != 0) {\n      carry_flag = CARRY4(temp6,quotient);\n      temp6 = temp6 + quotient;\n      temp5 = temp1 - 1;\n      if ((carry_flag == false) && (temp6 <= temp3 && temp3 - temp6 != 0)) {\n        temp5 = temp1 - 2;\n        temp6 = temp6 + quotient;\n      }\n    }\n    temp3 = (temp6 - temp3) / quotient;\n    temp1 = (quotient & 0xffff) * temp3;\n    temp3 = dividend & 0xffff | ((temp6 - temp3) - quotient * temp3) * 0x10000;\n    quotient = temp3;\n    if (temp3 <= temp1 && temp1 - temp3 != 0) {\n      quotient = temp3 - 1;\n      if ((CARRY4(temp3,quotient) == false) &&\n         (temp3 + quotient <= temp1 && temp1 - (temp3 + quotient) != 0)) {\n        quotient = temp3 - 2;\n      }\n    }\n    quotient = quotient | temp5 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_amount = LZCOUNT(remainder);\n    if (shift_amount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shift_amount;\n      temp5 = divisor >> (quotient & 0xff);\n      temp1 = remainder << shift_amount | quotient >> (quotient & 0xff);\n      temp3 = temp1 >> 0x10;\n      temp2 = temp5 / temp3;\n      temp6 = (temp1 & 0xffff) * temp2;\n      temp3 = dividend >> (quotient & 0xff) | divisor << shift_amount;\n      quotient = temp3 >> 0x10 | (temp5 - temp3 * temp2) * 0x10000;\n      temp5 = temp2;\n      if (quotient <= temp6 && temp6 - quotient != 0) {\n        carry_flag = CARRY4(quotient,temp1);\n        quotient = quotient + temp1;\n        temp5 = temp2 - 1;\n        if ((carry_flag == false) && (quotient <= temp6 && temp6 - quotient != 0)) {\n          temp5 = temp2 - 2;\n          quotient = quotient + temp1;\n        }\n      }\n      temp2 = (quotient - temp6) / temp3;\n      temp4 = (temp1 & 0xffff) * temp2;\n      temp3 = temp3 & 0xffff | ((quotient - temp6) - temp3 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp3 <= temp4 && temp4 - temp3 != 0) {\n        carry_flag = CARRY4(temp3,temp1);\n        temp3 = temp3 + temp1;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (temp3 <= temp4 && temp4 - temp3 != 0)) {\n          quotient = temp2 - 2;\n          temp3 = temp3 + temp1;\n        }\n      }\n      quotient = quotient | temp5 << 0x10;\n      temp = (ulonglong)quotient * (ulonglong)(quotient << shift_amount);\n      temp5 = (uint)((ulonglong)temp >> 0x20);\n      if ((temp3 - temp4 < temp5) || ((temp3 - temp4 == temp5 && (dividend << shift_amount < (uint)temp)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_division_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar10": "shift_amount",
                "uVar2": "quotient",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "lVar1": "temp",
                "bVar11": "carry_flag",
                "CONCAT44": "combine_result",
                "uVar": "result"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084a80": {
                    "1": "calculate_quotient_and_remainder",
                    "3": "divide_with_remainder",
                    "2": "calculate_quotient_remainder",
                    "5": "calculate_division"
                },
                "param_1": {
                    "31": "dividend"
                },
                "param_2": {
                    "1": "remainder",
                    "25": "divisor",
                    "2": "dividend_high"
                },
                "param_3": {
                    "1": "quotient_high",
                    "6": "divisor",
                    "17": "quotient"
                },
                "param_4": {
                    "1": "temp2",
                    "2": "divisor_high",
                    "17": "remainder"
                },
                "iVar10": {
                    "1": "common_bit_count",
                    "15": "shift_amount",
                    "10": "shift_count",
                    "2": "shift"
                },
                "uVar2": {
                    "1": "quotient_upper_bits",
                    "3": "result",
                    "2": "current_quotient",
                    "6": "quotient"
                },
                "uVar3": {
                    "1": "temp3",
                    "4": "temp1",
                    "2": "quotient2"
                },
                "uVar4": {
                    "1": "temp4",
                    "2": "partial_product",
                    "3": "remainder1",
                    "4": "temp2"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp1",
                    "4": "temp3",
                    "3": "temp2"
                },
                "uVar6": {
                    "1": "q5",
                    "2": "remainder2",
                    "3": "temp4"
                },
                "uVar7": {
                    "1": "q6",
                    "2": "quotient2",
                    "3": "temp4"
                },
                "uVar8": {
                    "1": "temp4",
                    "3": "temp6"
                },
                "uVar9": {
                    "1": "temp9",
                    "2": "temp2",
                    "3": "temp7"
                },
                "uVar11": {
                    "1": "carry_flag"
                },
                "bVar12": {
                    "2": "carry_flag"
                },
                "lVar1": {
                    "1": "result_long",
                    "2": "result",
                    "4": "temp"
                },
                "bVar11": {
                    "2": "is_carry",
                    "19": "carry_flag",
                    "3": "carry",
                    "1": "check_carry"
                },
                "uVar10": {
                    "1": "remainder4"
                },
                "iVar11": {
                    "1": "num_leading_zeros"
                },
                "CONCAT44": {
                    "1": "combine_result"
                },
                "uVar12": {
                    "1": "new_u_var2"
                },
                "uVar13": {
                    "1": "new_u_var3"
                },
                "uVar14": {
                    "1": "new_u_var4"
                },
                "uVar15": {
                    "1": "new_u_var5"
                },
                "uVar16": {
                    "1": "new_u_var6"
                },
                "uVar17": {
                    "1": "new_u_var7"
                },
                "uVar18": {
                    "1": "new_u_var8"
                },
                "uVar19": {
                    "1": "new_u_var9"
                },
                "uVar": {
                    "1": "result"
                }
            }
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 421155,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}