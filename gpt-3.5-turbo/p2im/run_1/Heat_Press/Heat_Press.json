{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_if_zero_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlagIfZero_000800f4(undefined4 inputParam)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_zero_000800f4",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initialize_data_00080164(int **data_ptr)\n\n{\n  int result;\n  \n  *data_ptr = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    update_memory(*(byte *)((int)data_ptr + 6),1);\n    update_memory_status(*(undefined *)((int)data_ptr + 6),0);\n  }\n  do {\n    result = (**(code **)(**data_ptr + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  *(undefined *)((int)data_ptr + 0x4a) = 0;\n  *(undefined2 *)(data_ptr + 0x15) = 0;\n  *(undefined2 *)((int)data_ptr + 0x52) = 0;\n  *(undefined2 *)(data_ptr + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data_ptr",
                "iVar1": "result",
                "update_memory_00081210": "update_memory",
                "update_memory_status_00081318": "update_memory_status"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_param_000801b0",
            "code": "\nint processParam_000801b0(int **paramArray)\n\n{\n  bool isOverflow;\n  undefined result;\n  char charVar;\n  int returnValue;\n  byte byteVal;\n  \n  if (1 < *(byte *)((int)paramArray + 6)) {\n    update_memory_status_00081318(*(byte *)((int)paramArray + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    while (returnValue = (**(code **)(**paramArray + 8))(), returnValue != 0) {\n      byteVal = *(byte *)((int)paramArray + 0x49);\n      result = (**(code **)(**paramArray + 0xc))();\n      charVar = *(char *)((int)paramArray + 0x49);\n      *(undefined *)((int)paramArray + byteVal + 9) = result;\n      byteVal = charVar + 1;\n      *(byte *)((int)paramArray + 0x49) = byteVal;\n      if (0x3f < byteVal) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(paramArray + 0x14) = *(short *)(paramArray + 0x14) + 1;\n  if (isOverflow) {\n    charVar = -3;\n    *(short *)(paramArray + 0x15) = *(short *)(paramArray + 0x15) + 1;\n  }\n  else {\n    charVar = *(char *)((int)paramArray + 0x49);\n  }\n  return (int)charVar;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_param_000801b0",
                "param_1": "paramArray",
                "bVar1": "isOverflow",
                "uVar2": "result",
                "cVar3": "charVar",
                "iVar4": "returnValue",
                "bVar5": "byteVal"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int currentIndex;\n  uint checksum;\n  char bitCounter;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentIndex = data_start; (currentIndex - data_start & 0xffU) < data_length; currentIndex = currentIndex + 1) {\n    checksum = checksum ^ *(byte *)(currentIndex + 9);\n    bitCounter = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCounter = bitCounter + -1;\n    } while (bitCounter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "data_start",
                "param_2": "data_length",
                "iVar1": "currentIndex",
                "uVar2": "checksum",
                "cVar3": "bitCounter",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_memory_00080258",
            "code": "\nvoid updateChecksumAndMemory_00080258(int **param,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVar;\n  undefined2 checksum;\n  int result;\n  uint byteVal;\n  \n  byteVar = *(byte *)((int)param + 0x49);\n  byteVal = (uint)byteVar;\n  checksum = calculate_checksum_0008021c(param,byteVal,param3,param4,param4);\n  *(char *)((int)param + byteVal + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)param + (byteVal + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)param + 0x49) = byteVar + 2;\n  if (1 < *(byte *)((int)param + 6)) {\n    update_memory_status_00081318(*(byte *)((int)param + 6),1);\n  }\n  if (*(byte *)((int)param + 5) < 4) {\n    (**(code **)(**param + 4))(*param,(int)param + 9,*(undefined *)((int)param + 0x49));\n  }\n  if (1 < *(byte *)((int)param + 6)) {\n    update_memory_status_00081318(*(byte *)((int)param + 6),0);\n  }\n  if (*(byte *)((int)param + 5) < 4) {\n    do {\n      result = (**(code **)(**param + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)param + 0x49) = 0;\n  result = get_global_variable_thunk_00081714();\n  param[0x17] = (int *)(result + (uint)*(ushort *)((int)param + 0x56));\n  *(short *)((int)param + 0x52) = *(short *)((int)param + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_memory_00080258",
                "param_1": "param",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVar",
                "uVar2": "checksum",
                "iVar3": "result",
                "uVar4": "byteVal"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_parameters_000802da",
            "code": "\nint validate_parameters_000802da(int function_data,uint input_data,uint size_of_data,ushort *data_array)\n\n{\n  char error_code;\n  byte temp_byte;\n  undefined temp_undefined;\n  ushort temp_ushort;\n  uint temp_uint;\n  ushort *temp_pointer;\n  undefined input_high_byte;\n  undefined input_low_byte;\n  ushort temp_ushort_2;\n  \n  input_high_byte = (undefined)input_data;\n  input_low_byte = (undefined)(input_data >> 8);\n  temp_ushort_2 = (ushort)size_of_data;\n  temp_uint = size_of_data & 0xffff;\n  if (*(char *)(function_data + 4) != '\\0') {\n    error_code = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(function_data + 7) != '\\0') {\n    error_code = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((input_data & 0xff) - 1 & 0xff)) {\n    error_code = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(function_data + 9) = input_high_byte;\n  *(undefined *)(function_data + 10) = input_low_byte;\n  *(ushort **)(function_data + 0x4c) = data_array;\n  *(char *)(function_data + 0xb) = (char)(input_data >> 0x18);\n  *(char *)(function_data + 0xc) = (char)(input_data >> 0x10);\n  temp_undefined = (undefined)(size_of_data >> 8);\n  switch(input_low_byte) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(function_data + 0xd) = temp_undefined;\n    break;\n  case 5:\n    temp_ushort = *data_array;\n    if (temp_ushort != 0) {\n      temp_ushort = 1;\n    }\n    *(char *)(function_data + 0xd) = -(char)temp_ushort;\n    temp_uint = 0;\n    break;\n  case 6:\n    *(char *)(function_data + 0xd) = (char)(*data_array >> 8);\n    temp_uint = (uint)*data_array;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    temp_byte = (byte)(temp_ushort_2 >> 3) & 0xfe;\n    if ((size_of_data & 0xf) != 0) {\n      temp_byte = temp_byte + 1;\n    }\n    *(char *)(function_data + 0xe) = (char)size_of_data;\n    *(undefined *)(function_data + 0xd) = temp_undefined;\n    *(byte *)(function_data + 0xf) = temp_byte;\n    temp_undefined = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(function_data + 0xd) = temp_undefined;\n    *(char *)(function_data + 0xe) = (char)size_of_data;\n    data_array = data_array + -1;\n    *(char *)(function_data + 0xf) = (char)temp_uint * '\\x02';\n    *(undefined *)(function_data + 0x49) = 7;\n    temp_pointer = data_array + temp_uint;\n    while (data_array != temp_pointer) {\n      temp_byte = *(byte *)(function_data + 0x49);\n      *(char *)(function_data + (uint)temp_byte + 9) = (char)(data_array[1] >> 8);\n      temp_uint = temp_byte + 1 & 0xff;\n      *(char *)(function_data + 0x49) = (char)temp_uint;\n      data_array = data_array + 1;\n      *(char *)(temp_uint + function_data + 9) = (char)*data_array;\n      *(byte *)(function_data + 0x49) = temp_byte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(function_data + 0xe) = (char)temp_uint;\n  temp_undefined = 6;\nLAB_0008034a:\n  *(undefined *)(function_data + 0x49) = temp_undefined;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_memory_00080258(function_data);\n  *(undefined *)(function_data + 7) = 1;\n  error_code = '\\0';\nLAB_000803cc:\n  return (int)error_code;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_parameters_000802da",
                "param_1": "function_data",
                "param_2": "input_data",
                "param_3": "size_of_data",
                "param_4": "data_array",
                "cVar1": "error_code",
                "bVar2": "temp_byte",
                "uVar3": "temp_undefined",
                "uVar4": "temp_ushort",
                "uVar5": "temp_uint",
                "puVar6": "temp_pointer",
                "local_1c": "input_high_byte",
                "local_1b": "input_low_byte",
                "local_18": "temp_ushort_2"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_byte_000803d4",
            "code": "\nundefined4 checkByte_000803d4(int input)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input + 10) << 0x18) < 0) {\n    *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_byte_000803d4",
                "param_1": "input",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combinedValue;\n  int combinedValueAddress;\n  byte counter;\n  uint counterAsUInt;\n  int arrayAddress;\n  \n  counter = 0;\n  while( true ) {\n    counterAsUInt = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataAddress + 0xb) >> 1 <= counterAsUInt) break;\n    combinedValueAddress = (counterAsUInt * 2 + 3 & 0xff) + dataAddress;\n    arrayAddress = *(int *)(dataAddress + 0x4c);\n    combinedValue = combine_values_000815f8(*(undefined *)(combinedValueAddress + 9),*(undefined *)(combinedValueAddress + 10),combinedValueAddress,\n                         *(byte *)(dataAddress + 0xb),param4);\n    *(undefined2 *)(arrayAddress + counterAsUInt * 2) = combinedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedValue",
                "iVar2": "combinedValueAddress",
                "bVar3": "counter",
                "uVar4": "counterAsUInt",
                "iVar5": "arrayAddress"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_validation_0008043e",
            "code": "\nint process_data_validation_0008043e(int **input_data)\n\n{\n  char result;\n  uint validation_result;\n  int *global_variable;\n  int check_result;\n  uint byte_threshold;\n  \n  if (*(byte *)((int)input_data + 5) < 4) {\n    validation_result = (**(code **)(**input_data + 8))();\n    byte_threshold = validation_result & 0xff;\n  }\n  global_variable = (int *)get_global_variable_thunk_00081714();\n  if (input_data[0x17] < global_variable) {\n    *(undefined *)(input_data + 2) = 0xff;\n    *(undefined *)((int)input_data + 7) = 0;\n    *(short *)(input_data + 0x15) = *(short *)(input_data + 0x15) + 1;\n  }\n  else if (7 < byte_threshold) {\n    process_param_000801b0(input_data);\n    check_result = check_byte_000803d4(input_data);\n    if (check_result == 0) {\n      if (*(byte *)((int)input_data + 10) - 3 < 2) {\n        process_data_00080410(input_data);\n      }\n      *(undefined *)((int)input_data + 7) = 0;\n      result = *(char *)((int)input_data + 0x49);\n    }\n    else {\n      *(undefined *)((int)input_data + 7) = 0;\n      result = (char)check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_validation_0008043e",
                "param_1": "input_data",
                "cVar1": "result",
                "uVar2": "validation_result",
                "piVar3": "global_variable",
                "iVar4": "check_result",
                "unaff_r6": "byte_threshold"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_memory_000804a8",
            "code": "\nundefined8 initialize_memory_000804a8(void)\n\n{\n  int iVar1;\n  \n  update_memory(1,0);\n  update_memory(6,1);\n  update_memory(0,1);\n  update_memory(1,1);\n  update_memory_status(0,0);\n  update_memory_status(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_data(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_variable();\n  iVar1 = get_global_variable();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = get_global_variable();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = get_global_variable();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = get_global_variable();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_memory_000804a8",
                "update_memory_00081210": "update_memory",
                "update_memory_status_00081318": "update_memory_status",
                "initialize_data_00080164": "initialize_data",
                "get_global_variable_thunk_00081714": "get_global_variable"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "validate_data_and_calculate_result_000805d0",
            "code": "\n\n\nvoid validateDataAndCalculateResult_000805d0(void)\n\n{\n  uint globalVariable;\n  undefined4 resultVar1;\n  undefined4 resultVar2;\n  undefined4 resultVar3;\n  undefined4 resultVar4;\n  int counter;\n  uint *pointerVar;\n  undefined4 *pointerVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    globalVariable = get_global_variable_thunk_00081714();\n    if (DAT_200708c8 < globalVariable) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_data_validation_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = count_leading_zeros_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_result_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = count_leading_zeros_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_data_validation_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    process_data_validation_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_data_validation_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      pointerVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_parameters_000802da(&DAT_200709e4,*pointerVar2,pointerVar2[1],pointerVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_data_validation_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      pointerVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_data_validation_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_variable_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointerVar = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointerVar = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (globalVariable = get_global_variable_thunk_00081714(), DAT_200708c0 < globalVariable))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      counter = get_global_variable_thunk_00081714();\n      DAT_200708c0 = counter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      globalVariable = get_global_variable_thunk_00081714();\n      if (DAT_200708c0 < globalVariable) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = get_global_variable_thunk_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointerVar = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      globalVariable = get_global_variable_thunk_00081714();\n      if (DAT_200708c0 < globalVariable) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = get_global_variable_thunk_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  globalVariable = get_global_variable_thunk_00081714();\n  if (DAT_200709e0 < globalVariable) {\n    resultVar1 = calculate_result_0008189c(DAT_20070940);\n    resultVar2 = calculate_floating_point_00081730(resultVar1,DAT_200709c8);\n    resultVar1 = DAT_200708c4;\n    DAT_20070930 = resultVar2;\n    resultVar3 = calculate_float_from_ints_00081734(resultVar2,DAT_200708c4);\n    resultVar3 = calculate_float_00081944(resultVar3,DAT_2007094c);\n    resultVar3 = calculate_float_from_ints_00081734(resultVar3,DAT_20070914);\n    DAT_2007094c = resultVar3;\n    resultVar1 = calculate_floating_point_00081730(resultVar2,resultVar1);\n    resultVar1 = calculate_float_00081944(resultVar1,DAT_200709c4);\n    resultVar1 = calculate_floating_point_00081730(resultVar1,DAT_2007096c);\n    DAT_200709c4 = resultVar1;\n    resultVar4 = calculate_float_00081944(resultVar2,DAT_20070a4c);\n    resultVar4 = calculate_float_from_ints_00081734(resultVar4,resultVar3);\n    calculate_float_from_ints_00081734(resultVar4,resultVar1);\n    DAT_20070910 = convert_unsigned_integer_00081cd0();\n    DAT_2007091c = calculate_result_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = resultVar2;\n    DAT_20070914 = resultVar3;\n    DAT_2007096c = resultVar1;\n    counter = get_global_variable_thunk_00081714();\n    DAT_200709e0 = counter + DAT_20070970;\n  }\n  resultVar1 = calculate_result_0008189c(DAT_20070970);\n  counter = check_conditional_values_00081ca8(DAT_2007091c,resultVar1);\n  if (counter != 0) {\n    DAT_2007091c = resultVar1;\n  }\n  counter = check_concatenation_result_00081c94(DAT_2007091c,0);\n  if (counter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = check_shifted_value_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "validate_data_and_calculate_result_000805d0",
                "uVar1": "globalVariable",
                "uVar2": "resultVar1",
                "uVar3": "resultVar2",
                "uVar4": "resultVar3",
                "uVar5": "resultVar4",
                "iVar6": "counter",
                "puVar7": "pointerVar",
                "puVar8": "pointerVar2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_function_settings_00080a68",
            "code": "\nvoid initializeFunctionSettings_00080a68(void)\n\n{\n  initializeParameterWithLeadingZeroes(&DAT_20070954,\"\");\n  updateRelocationEntry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_function_settings_00080a68",
                "initialize_param_with_leading_zeroes_00081682": "initializeParameterWithLeadingZeroes",
                "update_relocation_entry_00081d5c": "updateRelocationEntry"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_memory_and_update_status_00080ae4",
            "code": "\n\n\nvoid initialize_memory_and_update_status_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  initialize_memory_00080e9c();\n  _DAT_e000e014 = elfRelArray[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_functions_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    update_memory_status(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_memory_00080da0(0x400e0e00,1,0x300,0);\n  update_memory_status(0,1);\n  update_memory_00080da0(0x400e0e00,1,0xc00,0);\n  update_memory_00080da0(0x400e0e00,1,0x3000,0);\n  update_memory_00080da0(0x400e1400,2,0x30,0);\n  update_memory_00080da0(0x400e1000,1,0xc00,0);\n  update_memory_00080da0(0x400e0e00,1,3,0);\n  update_memory_00080da0(0x400e1000,1,0xc000,0);\n  check_and_set_bit(0x25);\n  calculate_threshold(0x400c0000,elfRelArray[6].r_offset,20000000,0xc);\n  update_configuration(0x400c0000,0,0x300000,1);\n  update_value(0x400c0000,0,0);\n  set_param_value(0x400c0000,0xffffffff);\n  initialize_memory(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_memory_and_update_status_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray",
                "update_memory_status_00081318": "update_memory_status",
                "check_and_set_bit_00080e18": "check_and_set_bit",
                "calculate_threshold_00080f9c": "calculate_threshold",
                "update_configuration_00081042": "update_configuration",
                "update_value_00081034": "update_value",
                "set_param_value_0008106e": "set_param_value",
                "initialize_memory_00081066": "initialize_memory"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_and_return_data_00080c0c",
            "code": "\nvoid initialize_and_return_data_00080c0c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  initialize_memory_000813a8(&DAT_20070b84);\n  initialize_memory_000813a8(&DAT_20070ad8);\n  initialize_parameters_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param_3);\n  initialize_memory_000813a8(&DAT_20070de4);\n  initialize_memory_000813a8(&DAT_20070e6c);\n  initialize_memory_000813a8(&DAT_20070ef4);\n  initialize_memory_000813a8(&DAT_20070a50);\n  initialize_memory_000813a8(&DAT_20070c84);\n  initialize_memory_000813a8(&DAT_20070d0c);\n  initialize_and_return_data_00080c0c_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_return_data_00080c0c_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_return_data_00080c0c_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_and_return_data_00080c0c"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_calculation_results_00080ce0",
            "code": "\nvoid checkCalculationResults_00080ce0(void)\n\n{\n  int result;\n  \n  result = calculateResult(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = calculateResult(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = calculateResult(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = calculateResult(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_calculation_results_00080ce0",
                "iVar1": "result",
                "calculation_result_000813e4": "calculateResult"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_memory_00080d2e",
            "code": "\nvoid updateMemory_00080d2e(int address,undefined4 option,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(address + 0x44) = value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(address + 0x70) & *(uint *)(address + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(address + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(address + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(address + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_memory_00080d2e",
                "param_1": "address",
                "param_2": "option",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_values_based_on_flags_00080d54",
            "code": "\nvoid setValuesBasedOnFlags_00080d54(undefined4 *result,undefined4 value,uint flags)\n\n{\n  bool isNegativeFlagSet;\n  \n  isNegativeFlagSet = (int)(flags << 0x1f) < 0;\n  result[0x11] = value;\n  if (isNegativeFlagSet) {\n    result[0x19] = value;\n  }\n  if (!isNegativeFlagSet) {\n    result[0x18] = value;\n  }\n  isNegativeFlagSet = (flags & 10) != 0;\n  if (isNegativeFlagSet) {\n    result[8] = value;\n  }\n  if (!isNegativeFlagSet) {\n    result[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    result[0x20] = value;\n  }\n  result[5] = value;\n  *result = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_values_based_on_flags_00080d54",
                "param_1": "result",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegativeFlagSet"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_pointers_00080d7a",
            "code": "\nvoid updatePointers_00080d7a(undefined4 *pointers,undefined4 new_value,int condition_1,int condition_2,int condition_3)\n\n{\n  pointers[0x11] = new_value;\n  if (condition_3 == 0) {\n    pointers[0x18] = new_value;\n  }\n  else {\n    pointers[0x19] = new_value;\n  }\n  if (condition_2 == 0) {\n    pointers[0x15] = new_value;\n  }\n  else {\n    pointers[0x14] = new_value;\n  }\n  if (condition_1 == 0) {\n    pointers[0xd] = new_value;\n  }\n  else {\n    pointers[0xc] = new_value;\n  }\n  pointers[4] = new_value;\n  *pointers = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_pointers_00080d7a",
                "param_1": "pointers",
                "param_2": "new_value",
                "param_3": "condition_1",
                "param_4": "condition_2",
                "param_5": "condition_3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_memory_00080da0",
            "code": "\nundefined4 updateMemory_00080da0(int memory,int type,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    update_memory_00080d2e(memory,type,value);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(memory + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(memory + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(memory + 0x60) = value;\n    }\n    break;\n  case 3:\n    set_values_based_on_flags_00080d54(memory,value,flags,0x80d55,memory);\n    break;\n  case 4:\n  case 5:\n    update_pointers_00080d7a(memory,value,type == 5,(flags << 0x1d) >> 0x1f,flags & 1,type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_memory_00080da0",
                "param_1": "memory",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_and_return_bitwise_result_00080e04",
            "code": "\nuint check_and_return_bitwise_result_00080e04(int pointer_to_data,uint bitwise_mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(pointer_to_data + 8) & bitwise_mask;\n  if (result != 0) {\n    if ((bitwise_mask & *(uint *)(pointer_to_data + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_and_return_bitwise_result_00080e04",
                "param_1": "pointer_to_data",
                "param_2": "bitwise_mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationTable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_validation_process_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *results,uint total_memory,int unit_memory,int time_interval)\n\n{\n  uint num_units;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *results = 1;\n  results[1] = 0;\n  results[0x48] = 0x202;\n  results[0x41] = 0;\n  results[0x45] = 0;\n  num_units = total_memory / (uint)(unit_memory * 2);\n  if (total_memory == unit_memory * 2 * num_units) {\n    num_units = num_units - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(time_interval * (int)(((ulonglong)total_memory / (ulonglong)((num_units + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      results[1] = (index & 0xf) << 0x10 | (num_units & 0xff) << 8 | results[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "results",
                "param_2": "total_memory",
                "param_3": "unit_memory",
                "param_4": "time_interval",
                "uVar1": "num_units",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_value_00081034",
            "code": "\nvoid updateValue_00081034(int baseAddress,uint newValue,uint flag)\n\n{\n  *(uint *)(baseAddress + 4) = newValue | *(uint *)(baseAddress + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_value_00081034",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_configuration_00081042",
            "code": "\nvoid updateConfiguration_00081042(int baseAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value2 | *(uint *)(baseAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_configuration_00081042",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_memory_00081066",
            "code": "\nvoid initializeMemory_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_memory_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid set_param_value_0008106e(int obj_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(obj_address + 0x28) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "obj_address",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "get_zero_00081184",
            "code": "\nundefined4 getZero_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "get_zero_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputNumber)\n\n{\n  int previousSumValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSumValue = DAT_20071180;\n  DAT_20071180 = inputNumber + DAT_20071180;\n  return previousSumValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputNumber",
                "iVar1": "previousSumValue"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "initialize_return_value_000811ae",
            "code": "\nundefined4 initializeReturnValue_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "initialize_return_value_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "get_return_value_000811be",
            "code": "\nuint32_t getReturnValue_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "get_return_value_000811be",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_return_value_000811c2",
            "code": "\nuint32_t get_return_value_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_return_value_000811c2",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_default_return_value_000811c6",
            "code": "\nundefined4 getDefaultReturnValue_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_default_return_value_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 destination,int source,uint length)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)length; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + i);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_variable_thunk_00081714",
            "code": "\nundefined4 get_global_variable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_memory_00081210",
            "code": "\n\n\nint updateMemory_00081210(int input,int mode)\n\n{\n  int result;\n  uint temp1;\n  undefined4 temp2;\n  uint temp3;\n  byte bit1;\n  byte bit2;\n  int temp4;\n  int temp5;\n  \n  result = input;\n  if ((&DAT_00084d24)[input * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[input] & 0xf) == 4) {\n      result = set_bit_0008105c(0x400c0000,(&DAT_00084d31)[input * 0x1c]);\n    }\n    bit2 = (&DAT_20070d94)[input];\n    bit1 = bit2 & 0xf;\n    if ((bit1 < 3) && (bit2 != 0)) {\n      if (bit1 == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (bit1 == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (bit1 == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = input * 0x1c;\n        check_and_set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_memory_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        bit2 = (&DAT_20070d94)[input] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = input * 0x1c;\n        check_and_set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_memory_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        bit2 = (&DAT_20070d94)[input] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[input] = bit2;\n      return result;\n    }\n    temp4 = input * 0x1c;\n    temp5 = *(int *)(&DAT_00084d18 + temp4);\n    if (bit2 >> 4 == 0) {\n      temp2 = 4;\n    }\n    else {\n      temp2 = 5;\n    }\n    result = update_memory_00080da0(temp5,temp2,*(undefined4 *)(&DAT_00084d1c + temp4),\n                         *(undefined4 *)(&DAT_00084d28 + temp4));\n    (&DAT_20070d94)[input] = (&DAT_20070d94)[input] & 0xf0 | 3;\n    if (*(int *)(temp5 + 0x18) == -1) {\n      temp1 = *(uint *)(&DAT_00084d20 + temp4);\n      if (0x2c < temp1) {\n        return 1;\n      }\n      if (temp1 < 0x20) {\n        temp1 = 1 << (temp1 & 0xff);\n        temp3 = _DAT_400e0618 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0614 = temp3;\n        }\n      }\n      else {\n        temp1 = 1 << (temp1 - 0x20 & 0xff);\n        temp3 = _DAT_400e0708 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0704 = temp3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_memory_00081210",
                "param_1": "input",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "bVar5": "bit1",
                "bVar6": "bit2",
                "iVar7": "temp4",
                "iVar8": "temp5"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_memory_status_00081318",
            "code": "\nvoid updateMemoryStatus_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 memValue;\n  int ptr;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      updateMemory(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084d18 + index * 0x1c);\n    memValue = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = checkBitwiseResult(ptr,memValue);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = memValue;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = memValue;\n      return;\n    }\n    updatePointers(ptr,memValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_memory_status_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "memValue",
                "iVar3": "ptr",
                "update_memory_00081210": "updateMemory",
                "check_and_return_bitwise_result_00080e04": "checkBitwiseResult",
                "update_pointers_00080d7a": "updatePointers"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_relative_info_decreased_to_zero_00081388",
            "code": "\nvoid execute_if_relative_info_decreased_to_zero_00081388(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(code *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_relative_info_decreased_to_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryPtr)\n\n{\n  clearMemory(memoryPtr,0,0x80);\n  *(undefined4 *)(memoryPtr + 0x80) = 0;\n  *(undefined4 *)(memoryPtr + 0x84) = 0;\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryPtr",
                "clear_memory_00082504": "clearMemory"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_pointer_value_000813c2",
            "code": "\nvoid updatePointerValue_000813c2(int baseAddress,undefined newValue)\n\n{\n  uint newPointerValue;\n  \n  newPointerValue = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (newPointerValue != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = newPointerValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_pointer_value_000813c2",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "newPointerValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculation_result_000813e4",
            "code": "\nuint calculationResult_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculation_result_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataAddress,undefined4 newValue)\n\n{\n  int ptrToStruct;\n  uint updatedValue;\n  \n  ptrToStruct = *(int *)(dataAddress + 0x14);\n  if ((*(int *)(*(int *)(dataAddress + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrToStruct + 0x84) == *(int *)(ptrToStruct + 0x80))) {\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptrToStruct + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrToStruct + 0x84) == updatedValue);\n    *(char *)(ptrToStruct + *(int *)(ptrToStruct + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataAddress + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "iVar1": "ptrToStruct",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initializeParameters_000814e4(undefined4 *parameters,undefined4 value,undefined flag,undefined4 data,\n                 undefined4 offset,undefined4 size)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = flag;\n  parameters[4] = offset;\n  parameters[8] = data;\n  parameters[5] = size;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "data",
                "param_5": "offset",
                "param_6": "size"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_component_00081508",
            "code": "\nvoid initializeComponent_00081508(int componentAddress,uint pageSize,undefined4 initialValue)\n\n{\n  int tempVar1;\n  undefined4 *componentDataPtr;\n  \n  check_and_set_bit_00080e18(*(undefined4 *)(componentAddress + 0x20));\n  componentDataPtr = *(undefined4 **)(componentAddress + 0x18);\n  componentDataPtr[0x48] = 0x202;\n  *componentDataPtr = 0xac;\n  componentDataPtr[1] = initialValue;\n  componentDataPtr[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / pageSize >> 4;\n  componentDataPtr[3] = 0xffffffff;\n  componentDataPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(componentAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(componentAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(componentAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(componentAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *componentDataPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_component_00081508",
                "param_1": "componentAddress",
                "param_2": "pageSize",
                "param_3": "initialValue",
                "iVar1": "tempVar1",
                "puVar2": "componentDataPtr"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_return_data_000815d4",
            "code": "\nundefined4 * initializeAndReturnData_000815d4(undefined4 *dataPointer,undefined4 inputValue)\n\n{\n  initializeParameters();\n  *dataPointer = &PTR_update_data_00081454_1_000857d8;\n  dataPointer[9] = inputValue;\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_return_data_000815d4",
                "param_1": "dataPointer",
                "param_2": "inputValue",
                "initialize_parameters_000814e4": "initializeParameters"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int inputValue,uint flag)\n\n{\n  return flag | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "inputValue",
                "param_2": "flag"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "update_relocation_entry_000815fe",
            "code": "\nundefined4 * update_relocation_entry_000815fe(undefined4 *relocation_entry)\n\n{\n  update_relocation_entry_000815fe_00081e04(*relocation_entry);\n  return relocation_entry;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "update_relocation_entry_000815fe",
                "param_1": "relocation_entry"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_relocation_entry_0008160c",
            "code": "\nvoid resetRelocationEntry_0008160c(int *relocationEntry)\n\n{\n  if (*relocationEntry != 0) {\n    updateRelocationEntry();\n  }\n  *relocationEntry = 0;\n  relocationEntry[2] = 0;\n  relocationEntry[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_relocation_entry_0008160c",
                "param_1": "relocationEntry",
                "update_relocation_entry_00081e04()": "updateRelocationEntry()",
                "param_1[2]": "relocationEntry[2]",
                "param_1[1]": "relocationEntry[1]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "relocate_and_set_entries_00081622",
            "code": "\nint relocateAndSetEntries_00081622(int *entryPointer,int numEntries,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  \n  result = relocate_entries_000825a0(*entryPointer,numEntries + 1,param1,param2,param2);\n  if (result != 0) {\n    *entryPointer = result;\n    entryPointer[1] = numEntries;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "relocate_and_set_entries_00081622",
                "param_1": "entryPointer",
                "param_2": "numEntries",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "validate_and_relocate_0008163a",
            "code": "\nundefined4 validate_and_relocate_0008163a(int *ptr,uint size)\n\n{\n  int result;\n  \n  if ((*ptr == 0) || ((uint)ptr[1] < size)) {\n    result = relocate_and_set_entries_00081622(ptr);\n    if (result == 0) {\n      return 0;\n    }\n    if (ptr[2] == 0) {\n      *(undefined *)*ptr = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "validate_and_relocate_0008163a",
                "param_1": "ptr",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "relocate_and_copy_string_0008165c",
            "code": "\nundefined4 * relocateAndCopyString_0008165c(undefined4 *relocationEntry,undefined4 sourceString,undefined4 targetString)\n\n{\n  int validationResult;\n  \n  validationResult = validate_and_relocate_0008163a(relocationEntry,targetString);\n  if (validationResult == 0) {\n    reset_relocation_entry_0008160c(relocationEntry);\n  }\n  else {\n    relocationEntry[2] = targetString;\n    copy_string_with_alignment_00082994(*relocationEntry,sourceString);\n  }\n  return relocationEntry;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "relocate_and_copy_string_0008165c",
                "param_1": "relocationEntry",
                "param_2": "sourceString",
                "param_3": "targetString",
                "iVar1": "validationResult"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_param_with_leading_zeroes_00081682",
            "code": "\nundefined4 * initializeParamWithLeadingZeroes_00081682(undefined4 *resultArray,int inputValue)\n\n{\n  undefined4 leadingZeroesCount;\n  \n  *resultArray = 0;\n  resultArray[1] = 0;\n  resultArray[2] = 0;\n  if (inputValue != 0) {\n    leadingZeroesCount = count_leading_zeroes_00082a50(inputValue);\n    relocate_and_copy_string_0008165c(resultArray,inputValue,leadingZeroesCount);\n  }\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_param_with_leading_zeroes_00081682",
                "param_1": "resultArray",
                "param_2": "inputValue",
                "uVar1": "leadingZeroesCount"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_validation_process_000816a8",
            "code": "\nvoid runValidationProcess_000816a8(void)\n\n{\n  initializeData();\n  initializeMemoryAndUpdateStatus();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initializeMemory();\n  do {\n    validateAndCalculateResult();\n    checkCalculationResults();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_validation_process_000816a8",
                "initialize_data_000816d4": "initializeData",
                "initialize_memory_and_update_status_00080ae4": "initializeMemoryAndUpdateStatus",
                "initialize_memory_000804a8": "initializeMemory",
                "validate_data_and_calculate_result_000805d0": "validateAndCalculateResult",
                "check_calculation_results_00080ce0": "checkCalculationResults"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initializeData_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_dat_value_00081714",
            "code": "\nundefined4 getDatValue_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_dat_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint inputValue,uint exponent,undefined4 undefined,uint param)\n\n{\n  int signBit1;\n  int signBit2;\n  uint value1;\n  uint value2;\n  uint absValue1;\n  uint absValue2;\n  uint difference;\n  bool isEqual;\n  \n  value1 = exponent ^ 0x80000000;\n  absValue1 = inputValue << 1;\n  isEqual = absValue1 == 0;\n  if (!isEqual) {\n    param = exponent << 1;\n    isEqual = param == 0;\n  }\n  if (!isEqual) {\n    isEqual = absValue1 == param;\n  }\n  signBit1 = (int)absValue1 >> 0x18;\n  if (!isEqual) {\n    isEqual = signBit1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)param >> 0x18 == -1;\n  }\n  if (isEqual) {\n    signBit2 = (int)(exponent << 1) >> 0x18;\n    if (signBit1 == -1 || signBit2 == -1) {\n      absValue1 = value1;\n      if (signBit1 == -1) {\n        absValue1 = inputValue;\n      }\n      if (signBit1 != -1 || signBit2 != -1) {\n        value1 = absValue1;\n      }\n      isEqual = (absValue1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (value1 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = absValue1 == value1;\n      }\n      if (!isEqual) {\n        absValue1 = absValue1 | 0x400000;\n      }\n      return absValue1;\n    }\n    if (((inputValue ^ value1) & 0x7fffffff) != 0) {\n      if (absValue1 == 0) {\n        inputValue = value1;\n      }\n      return inputValue;\n    }\n    if (inputValue != value1) {\n      return 0;\n    }\n    if ((absValue1 & 0xff000000) == 0) {\n      value1 = inputValue << 1;\n      if ((inputValue & 0x80000000) != 0) {\n        value1 = value1 | 0x80000000;\n      }\n      return value1;\n    }\n    if (absValue1 < 0xfe000000) {\n      return inputValue + 0x800000;\n    }\n    inputValue = inputValue & 0x80000000;\nLAB_0008186a:\n    return inputValue | 0x7f800000;\n  }\n  absValue1 = absValue1 >> 0x18;\n  param = param >> 0x18;\n  difference = param - absValue1;\n  isEqual = difference != 0;\n  absValue2 = absValue1;\n  if (isEqual && absValue1 <= param) {\n    absValue2 = absValue1 + difference;\n  }\n  if (isEqual && absValue1 <= param) {\n    value1 = value1 ^ inputValue;\n  }\n  if (isEqual && absValue1 <= param) {\n    inputValue = inputValue ^ value1;\n  }\n  if (isEqual && absValue1 <= param) {\n    value1 = value1 ^ inputValue;\n  }\n  if (param < absValue1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputValue;\n  }\n  absValue1 = inputValue & 0xffffff | 0x800000;\n  if ((inputValue & 0x80000000) != 0) {\n    absValue1 = -absValue1;\n  }\n  value2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    value2 = -value2;\n  }\n  if (absValue2 == difference) {\n    value2 = value2 ^ 0x800000;\n    if (absValue2 == 0) {\n      absValue1 = absValue1 ^ 0x800000;\n      absValue2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  absValue1 = absValue1 + ((int)value2 >> (difference & 0xff));\n  value2 = value2 << (0x20 - difference & 0xff);\n  inputValue = absValue1 & 0x80000000;\n  if ((int)absValue1 < 0) {\n    isEqual = value2 != 0;\n    value2 = -value2;\n    absValue1 = -absValue1 - (uint)isEqual;\n  }\n  if (absValue1 < 0x800000) {\n    value1 = value2 & 0x80000000;\n    value2 = value2 << 1;\n    absValue1 = absValue1 * 2 + (uint)(value1 != 0);\n    value1 = absValue2 - 2;\n    if ((absValue1 & 0x800000) == 0) {\n      difference = LZCOUNT(absValue1) - 8;\n      absValue1 = absValue1 << (difference & 0xff);\n      if ((int)value1 < (int)difference) {\n        absValue1 = absValue1 >> (-(value1 - difference) & 0xff);\n      }\n      else {\n        absValue1 = absValue1 + (value1 - difference) * 0x800000;\n      }\n      return absValue1 | inputValue;\n    }\n  }\n  else {\n    value1 = absValue2 - 1;\n    if (0xffffff < absValue1) {\n      value1 = absValue1 & 1;\n      absValue1 = absValue1 >> 1;\n      value2 = (uint)(value1 != 0) << 0x1f | value2 >> 1;\n      value1 = absValue2;\n      if (0xfd < absValue2) goto LAB_0008186a;\n    }\n  }\n  absValue1 = absValue1 + value1 * 0x800000 + (uint)(0x7fffffff < value2);\n  if (value2 == 0x80000000) {\n    absValue1 = absValue1 & 0xfffffffe;\n  }\n  return absValue1 | inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "inputValue",
                "param_2": "exponent",
                "param_3": "undefined",
                "param_4": "param",
                "iVar1": "signBit1",
                "iVar2": "signBit2",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "absValue1",
                "uVar6": "absValue2",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_float_from_ints_00081734",
            "code": "\nuint calculateFloatFromInts_00081734(uint floatValue1,uint floatValue2,undefined4 undefinedVal,uint compValue)\n\n{\n  int shiftedFloatValue1;\n  int shiftedFloatValue2;\n  uint truncatedFloatValue1;\n  uint truncatedFloatValue2;\n  uint tempValue1;\n  uint tempValue2;\n  bool isZero;\n  \n  truncatedFloatValue2 = floatValue1 << 1;\n  isZero = truncatedFloatValue2 == 0;\n  if (!isZero) {\n    compValue = floatValue2 << 1;\n    isZero = compValue == 0;\n  }\n  if (!isZero) {\n    isZero = truncatedFloatValue2 == compValue;\n  }\n  shiftedFloatValue1 = (int)truncatedFloatValue2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedFloatValue1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)compValue >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedFloatValue2 = (int)(floatValue2 << 1) >> 0x18;\n    if (shiftedFloatValue1 == -1 || shiftedFloatValue2 == -1) {\n      truncatedFloatValue2 = floatValue2;\n      if (shiftedFloatValue1 == -1) {\n        truncatedFloatValue2 = floatValue1;\n      }\n      if (shiftedFloatValue1 != -1 || shiftedFloatValue2 != -1) {\n        floatValue2 = truncatedFloatValue2;\n      }\n      isZero = (truncatedFloatValue2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (floatValue2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = truncatedFloatValue2 == floatValue2;\n      }\n      if (!isZero) {\n        truncatedFloatValue2 = truncatedFloatValue2 | 0x400000;\n      }\n      return truncatedFloatValue2;\n    }\n    if (((floatValue1 ^ floatValue2) & 0x7fffffff) != 0) {\n      if (truncatedFloatValue2 == 0) {\n        floatValue1 = floatValue2;\n      }\n      return floatValue1;\n    }\n    if (floatValue1 != floatValue2) {\n      return 0;\n    }\n    if ((truncatedFloatValue2 & 0xff000000) == 0) {\n      truncatedFloatValue2 = floatValue1 << 1;\n      if ((floatValue1 & 0x80000000) != 0) {\n        truncatedFloatValue2 = truncatedFloatValue2 | 0x80000000;\n      }\n      return truncatedFloatValue2;\n    }\n    if (truncatedFloatValue2 < 0xfe000000) {\n      return floatValue1 + 0x800000;\n    }\n    floatValue1 = floatValue1 & 0x80000000;\nLAB_0008186a:\n    return floatValue1 | 0x7f800000;\n  }\n  truncatedFloatValue2 = truncatedFloatValue2 >> 0x18;\n  compValue = compValue >> 0x18;\n  tempValue2 = compValue - truncatedFloatValue2;\n  isZero = tempValue2 != 0;\n  tempValue1 = truncatedFloatValue2;\n  if (isZero && truncatedFloatValue2 <= compValue) {\n    tempValue1 = truncatedFloatValue2 + tempValue2;\n  }\n  if (isZero && truncatedFloatValue2 <= compValue) {\n    floatValue2 = floatValue2 ^ floatValue1;\n  }\n  if (isZero && truncatedFloatValue2 <= compValue) {\n    floatValue1 = floatValue1 ^ floatValue2;\n  }\n  if (isZero && truncatedFloatValue2 <= compValue) {\n    floatValue2 = floatValue2 ^ floatValue1;\n  }\n  if (compValue < truncatedFloatValue2) {\n    tempValue2 = -tempValue2;\n  }\n  if (0x19 < tempValue2) {\n    return floatValue1;\n  }\n  truncatedFloatValue2 = floatValue1 & 0xffffff | 0x800000;\n  if ((floatValue1 & 0x80000000) != 0) {\n    truncatedFloatValue2 = -truncatedFloatValue2;\n  }\n  truncatedFloatValue1 = floatValue2 & 0xffffff | 0x800000;\n  if ((floatValue2 & 0x80000000) != 0) {\n    truncatedFloatValue1 = -truncatedFloatValue1;\n  }\n  if (tempValue1 == tempValue2) {\n    truncatedFloatValue1 = truncatedFloatValue1 ^ 0x800000;\n    if (tempValue1 == 0) {\n      truncatedFloatValue2 = truncatedFloatValue2 ^ 0x800000;\n      tempValue1 = 1;\n    }\n    else {\n      tempValue2 = tempValue2 - 1;\n    }\n  }\n  truncatedFloatValue2 = truncatedFloatValue2 + ((int)truncatedFloatValue1 >> (tempValue2 & 0xff));\n  truncatedFloatValue1 = truncatedFloatValue1 << (0x20 - tempValue2 & 0xff);\n  floatValue1 = truncatedFloatValue2 & 0x80000000;\n  if ((int)truncatedFloatValue2 < 0) {\n    isZero = truncatedFloatValue1 != 0;\n    truncatedFloatValue1 = -truncatedFloatValue1;\n    truncatedFloatValue2 = -truncatedFloatValue2 - (uint)isZero;\n  }\n  if (truncatedFloatValue2 < 0x800000) {\n    tempValue2 = truncatedFloatValue1 & 0x80000000;\n    truncatedFloatValue1 = truncatedFloatValue1 << 1;\n    truncatedFloatValue2 = truncatedFloatValue2 * 2 + (uint)(tempValue2 != 0);\n    tempValue2 = tempValue1 - 2;\n    if ((truncatedFloatValue2 & 0x800000) == 0) {\n      tempValue1 = LZCOUNT(truncatedFloatValue2) - 8;\n      truncatedFloatValue2 = truncatedFloatValue2 << (tempValue1 & 0xff);\n      if ((int)tempValue2 < (int)tempValue1) {\n        truncatedFloatValue2 = truncatedFloatValue2 >> (-(tempValue2 - tempValue1) & 0xff);\n      }\n      else {\n        truncatedFloatValue2 = truncatedFloatValue2 + (tempValue2 - tempValue1) * 0x800000;\n      }\n      return truncatedFloatValue2 | floatValue1;\n    }\n  }\n  else {\n    tempValue2 = tempValue1 - 1;\n    if (0xffffff < truncatedFloatValue2) {\n      tempValue2 = truncatedFloatValue2 & 1;\n      truncatedFloatValue2 = truncatedFloatValue2 >> 1;\n      truncatedFloatValue1 = (uint)(tempValue2 != 0) << 0x1f | truncatedFloatValue1 >> 1;\n      tempValue2 = tempValue1;\n      if (0xfd < tempValue1) goto LAB_0008186a;\n    }\n  }\n  truncatedFloatValue2 = truncatedFloatValue2 + tempValue2 * 0x800000 + (uint)(0x7fffffff < truncatedFloatValue1);\n  if (truncatedFloatValue1 == 0x80000000) {\n    truncatedFloatValue2 = truncatedFloatValue2 & 0xfffffffe;\n  }\n  return truncatedFloatValue2 | floatValue1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_float_from_ints_00081734",
                "param_1": "floatValue1",
                "param_2": "floatValue2",
                "param_3": "undefinedVal",
                "param_4": "compValue",
                "iVar1": "shiftedFloatValue1",
                "iVar2": "shiftedFloatValue2",
                "uVar3": "truncatedFloatValue1",
                "uVar4": "truncatedFloatValue2",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "count_leading_zeros_00081894",
            "code": "\nuint countLeadingZeros_00081894(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftedZeros;\n  int offset;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftedZeros = leadingZeros - 8;\n  offset = shiftedZeros * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftedZeros & 0xff);\n    leadingZeros = offset + (input << (shiftedZeros & 0xff)) +\n            (0U >> (0x20 - shiftedZeros & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftedZeros = input << leadingZeros + 0x18;\n  leadingZeros = offset + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftedZeros >> 0x1f));\n  if ((shiftedZeros & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftedZeros >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "count_leading_zeros_00081894",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftedZeros",
                "iVar3": "offset",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_result_0008189c",
            "code": "\nuint calculateResult_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint isNegative;\n  int result;\n  \n  isNegative = input & 0x80000000;\n  if ((int)isNegative < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    isNegative = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  isNegative = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_result_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_00081944",
            "code": "\nuint calculateFloat_00081944(uint firstFloat,uint secondFloat,undefined4 thirdFloat,uint forthFloat)\n\n{\n  longlong result;\n  uint floatBits;\n  uint firstFloatBits;\n  int firstFloatBitsExp;\n  int firstFloatExp;\n  uint firstFloatBitsTemp;\n  int secondFloatBitsExp;\n  uint resultBits;\n  bool isZero;\n  bool isCarry;\n  \n  firstFloatBits = firstFloat >> 0x17 & 0xff;\n  isZero = firstFloatBits == 0;\n  if (!isZero) {\n    forthFloat = secondFloat >> 0x17 & 0xff;\n    isZero = forthFloat == 0;\n  }\n  if (!isZero) {\n    isZero = firstFloatBits == 0xff;\n  }\n  if (!isZero) {\n    isZero = forthFloat == 0xff;\n  }\n  if (isZero) {\n    forthFloat = secondFloat >> 0x17 & 0xff;\n    if (firstFloatBits == 0xff || forthFloat == 0xff) {\n      isZero = firstFloat == 0 || firstFloat == 0x80000000;\n      floatBits = secondFloat;\n      if (firstFloat != 0 && firstFloat != 0x80000000) {\n        isZero = secondFloat == 0;\n        floatBits = firstFloat;\n      }\n      if (!isZero) {\n        isZero = secondFloat == 0x80000000;\n      }\n      resultBits = floatBits;\n      if (((isZero) || ((firstFloatBits == 0xff && ((floatBits & 0x7fffff) != 0)))) ||\n         ((forthFloat == 0xff && (resultBits = secondFloat, (secondFloat & 0x7fffff) != 0)))) {\n        return resultBits | 0x7fc00000;\n      }\n      floatBits = floatBits ^ secondFloat;\n      goto LAB_00081a94;\n    }\n    isZero = (firstFloat & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (secondFloat & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (firstFloat ^ secondFloat) & 0x80000000;\n    }\n    isZero = firstFloatBits == 0;\n    floatBits = firstFloat & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        firstFloat = firstFloat << 1;\n        isZero = (firstFloat & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      firstFloatBits = firstFloatBits - 1;\n    }\n    firstFloat = firstFloat | floatBits;\n    isZero = forthFloat == 0;\n    floatBits = secondFloat & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        secondFloat = secondFloat << 1;\n        isZero = (secondFloat & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      forthFloat = forthFloat - 1;\n    }\n    secondFloat = secondFloat | floatBits;\n  }\n  firstFloatBitsExp = firstFloatBits + forthFloat;\n  resultBits = firstFloat ^ secondFloat;\n  firstFloatBits = firstFloat << 9;\n  isZero = firstFloatBits == 0;\n  if (!isZero) {\n    secondFloat = secondFloat << 9;\n    isZero = secondFloat == 0;\n  }\n  if (isZero) {\n    if (firstFloatBits == 0) {\n      secondFloat = secondFloat << 9;\n    }\n    floatBits = resultBits & 0x80000000 | firstFloat & 0x7fffff | secondFloat >> 9;\n    isCarry = SBORROW4(firstFloatBitsExp,0x7f);\n    firstFloatExp = firstFloatBitsExp + -0x7f;\n    isZero = firstFloatExp == 0;\n    secondFloatBitsExp = firstFloatExp;\n    if (!isZero && 0x7e < firstFloatBitsExp) {\n      isCarry = SBORROW4(0xff,firstFloatExp);\n      secondFloatBitsExp = 0xff - firstFloatExp;\n      isZero = firstFloatExp == 0xff;\n    }\n    if (!isZero && secondFloatBitsExp < 0 == isCarry) {\n      floatBits = floatBits | firstFloatExp * 0x800000;\n    }\n    if (!isZero && secondFloatBitsExp < 0 == isCarry) {\n      return floatBits;\n    }\n    floatBits = floatBits | 0x800000;\n    firstFloatBitsTemp = 0;\n    isCarry = SBORROW4(firstFloatExp,1);\n    resultBits = firstFloatBitsExp - 0x80;\n    isZero = resultBits == 0;\n    firstFloatBits = resultBits;\n  }\n  else {\n    result = (ulonglong)(firstFloatBits >> 5 | 0x8000000) * (ulonglong)(secondFloat >> 5 | 0x8000000);\n    firstFloatBitsTemp = (uint)result;\n    floatBits = (uint)((ulonglong)result >> 0x20);\n    isZero = floatBits < 0x800000;\n    if (isZero) {\n      floatBits = floatBits << 1;\n    }\n    if (isZero) {\n      floatBits = floatBits | firstFloatBitsTemp >> 0x1f;\n      firstFloatBitsTemp = firstFloatBitsTemp << 1;\n    }\n    floatBits = resultBits & 0x80000000 | floatBits;\n    resultBits = (firstFloatBitsExp + -0x7f) - (uint)isZero;\n    isCarry = SBORROW4(resultBits,0xfd);\n    isZero = resultBits == 0xfd;\n    firstFloatBits = resultBits - 0xfd;\n    if (resultBits < 0xfe) {\n      floatBits = floatBits + resultBits * 0x800000 + (uint)(0x7fffffff < firstFloatBitsTemp);\n      if (firstFloatBitsTemp == 0x80000000) {\n        floatBits = floatBits & 0xfffffffe;\n      }\n      return floatBits;\n    }\n  }\n  if (isZero || (int)firstFloatBits < 0 != isCarry) {\n    isZero = (int)(resultBits + 0x19) < 0;\n    if (resultBits == 0xffffffe7 || isZero != SCARRY4(resultBits,0x19)) {\n      floatBits = floatBits & 0x80000000;\n    }\n    if (resultBits != 0xffffffe7 && isZero == SCARRY4(resultBits,0x19)) {\n      firstFloatBits = (floatBits << 1) >> (-resultBits & 0xff);\n      resultBits = floatBits << (resultBits + 0x20 & 0xff);\n      firstFloatBits = ((uint)((floatBits & 0x80000000) != 0) << 0x1f | firstFloatBits >> 1) + (uint)((byte)firstFloatBits & 1);\n      if ((firstFloatBitsTemp | resultBits << 1) == 0) {\n        firstFloatBits = firstFloatBits & ~(resultBits >> 0x1f);\n      }\n      return firstFloatBits;\n    }\n    return floatBits;\n  }\nLAB_00081a94:\n  return floatBits & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_00081944",
                "param_1": "firstFloat",
                "param_2": "secondFloat",
                "param_3": "thirdFloat",
                "param_4": "forthFloat",
                "lVar1": "result",
                "uVar2": "floatBits",
                "uVar3": "firstFloatBits",
                "uVar6": "firstFloatBitsTemp",
                "iVar4": "firstFloatBitsExp",
                "iVar5": "firstFloatExp",
                "iVar7": "secondFloatBitsExp",
                "uVar8": "resultBits",
                "bVar9": "isZero",
                "bVar10": "isCarry"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_integer_00081bf4",
            "code": "\nuint check_integer_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_integer_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_integers_00081c54",
            "code": "\nvoid concatenateIntegers_00081c54(undefined4 srcInteger,undefined4 dstInteger)\n\n{\n  concatenate_uintegers_00081c5c(dstInteger,srcInteger);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_integers_00081c54",
                "param_1": "srcInteger",
                "param_2": "dstInteger"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_uintegers_00081c5c",
            "code": "\nundefined8 concatenate_uintegers_00081c5c(undefined4 first_integer,undefined4 second_integer)\n\n{\n  check_integer_00081bf4();\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_uintegers_00081c5c",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_concatenation_result_00081c94",
            "code": "\nbool checkConcatenationResult_00081c94(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  concatenateIntegers();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_concatenation_result_00081c94",
                "in_ZR": "isZero",
                "in_CY": "isCarry",
                "concatenate_uintegers_00081c5c": "concatenateIntegers"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_conditional_values_00081ca8",
            "code": "\nbool check_conditional_values_00081ca8(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  concatenate_integers();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_conditional_values_00081ca8",
                "in_ZR": "is_zero",
                "in_CY": "is_carry",
                "concatenate_integers_00081c54": "concatenate_integers"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_unsigned_integer_00081cd0",
            "code": "\nuint convertUnsignedInteger_00081cd0(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = negativeValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_unsigned_integer_00081cd0",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference",
                "-uVar1": "negativeValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_shifted_value_00081d1c",
            "code": "\nuint checkShiftedValue_00081d1c(uint inputValue)\n\n{\n  uint shiftAmount;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (inputValue << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_shifted_value_00081d1c",
                "param_1": "inputValue",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newAddress,dword newValue,dword oldAddress)\n\n{\n  dword *relocationEntryPtr;\n  uint index;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntryPtr = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntryPtr = (dword *)relocate_entry_00081df4(400);\n    if (relocationEntryPtr == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntryPtr = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntryPtr[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntryPtr;\n    relocationEntryPtr[0x62] = 0;\n    relocationEntryPtr[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocationEntryPtr[index + 0x22] = newAddress;\n  relocationEntryPtr[0x62] = relocationEntryPtr[0x62] | bitMask;\n  relocationEntryPtr[index + 0x42] = oldAddress;\n  relocationEntryPtr[99] = bitMask | relocationEntryPtr[99];\n  relocationEntryPtr[1] = index + 1;\n  relocationEntryPtr[index + 2] = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newAddress",
                "param_2": "newValue",
                "param_3": "oldAddress",
                "pdVar1": "relocationEntryPtr",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctions_00081d7c(void)\n\n{\n  int iteration;\n  code **functionPointer;\n  \n  FUNC_00085858();\n  functionPointer = (code **)0x85860;\n  iteration = 0;\n  do {\n    iteration = iteration + 1;\n    functionPointer = functionPointer + 1;\n    (**functionPointer)();\n  } while (iteration != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar1": "iteration",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "relocate_entry_00081df4",
            "code": "\nvoid relocate_entry_00081df4(undefined4 entry_address)\n\n{\n  improve_relocation_entry_00081e14(relocation_table[140].entry_offset,entry_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "relocate_entry_00081df4",
                "param_1": "entry_address",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "entry_offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "update_relocation_entry_00081e04",
            "code": "\nvoid update_relocation_entry_00081e04(undefined4 relocation_offset)\n\n{\n  update_relocation_entry_00081e04_00083d9c(relocation_array[140].r_offset,relocation_offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "update_relocation_entry_00081e04",
                "param_1": "relocation_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "improve_relocation_entry_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * improve_relocation_entry_00081e14(undefined4 *param1,uint param2)\n\n{\n  dword relInfo1;\n  int index;\n  uint mask;\n  uint adjustedSize;\n  int intValue1;\n  uint diff;\n  dword currentRelOffset;\n  uint newValue;\n  int intValue2;\n  undefined *currentPtr;\n  dword prevRelOffset;\n  dword newRelEntry;\n  int relIndex;\n  dword *relEntry;\n  uint alignedSize;\n  undefined *newPtr;\n  dword *relArrayEntry;\n  uint shiftValue;\n  \n  if (param2 + 0xb < 0x17) {\n    alignedSize = 0x10;\n    if (0x10 < param2) goto LAB_00081e7a;\n  }\n  else {\n    alignedSize = param2 + 0xb & 0xfffffff8;\n    if (((int)alignedSize < 0) || (alignedSize < param2)) {\nLAB_00081e7a:\n      *param1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(param1);\n  relInfo1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignedSize < 0x1f8) {\n    relIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignedSize);\n    if ((relIndex != alignedSize + 0x20070464) ||\n       (index = relIndex + 8, relIndex = *(int *)(relIndex + 0x14), index != relIndex)) {\n      intValue1 = *(int *)(relIndex + 0xc);\n      intValue2 = (*(uint *)(relIndex + 4) & 0xfffffffc) + relIndex;\n      alignedSize = *(uint *)(intValue2 + 4);\n      index = *(int *)(relIndex + 8);\n      *(int *)(index + 0xc) = intValue1;\n      *(int *)(intValue1 + 8) = index;\n      *(uint *)(intValue2 + 4) = alignedSize | 1;\n      FUNC_0008259c(param1);\n      return (int *)(relIndex + 8);\n    }\n    shiftValue = (alignedSize >> 3) + 2;\n  }\n  else {\n    shiftValue = alignedSize >> 9;\n    if (shiftValue == 0) {\n      index = 0x7e;\n      relIndex = 0x3f;\n    }\n    else if (shiftValue < 5) {\n      relIndex = (alignedSize >> 6) + 0x38;\n      index = relIndex * 2;\n    }\n    else if (shiftValue < 0x15) {\n      relIndex = shiftValue + 0x5b;\n      index = relIndex * 2;\n    }\n    else if (shiftValue < 0x55) {\n      relIndex = (alignedSize >> 0xc) + 0x6e;\n      index = relIndex * 2;\n    }\n    else if (shiftValue < 0x155) {\n      relIndex = (alignedSize >> 0xf) + 0x77;\n      index = relIndex * 2;\n    }\n    else if (shiftValue < 0x555) {\n      relIndex = (alignedSize >> 0x12) + 0x7c;\n      index = relIndex * 2;\n    }\n    else {\n      index = 0xfc;\n      relIndex = 0x7e;\n    }\n    for (currentRelOffset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[index]; index * 4 + 0x20070464U != currentRelOffset\n        ; currentRelOffset = *(dword *)(currentRelOffset + 0xc)) {\n      shiftValue = *(uint *)(currentRelOffset + 4) & 0xfffffffc;\n      intValue1 = shiftValue - alignedSize;\n      if (0xf < intValue1) {\n        relIndex = relIndex + -1;\n        break;\n      }\n      if (-1 < intValue1) {\n        index = shiftValue + currentRelOffset;\n        alignedSize = *(uint *)(index + 4);\n        intValue1 = *(int *)(currentRelOffset + 0xc);\n        relIndex = *(int *)(currentRelOffset + 8);\n        *(int *)(relIndex + 0xc) = intValue1;\n        *(int *)(intValue1 + 8) = relIndex;\n        *(uint *)(index + 4) = alignedSize | 1;\n        FUNC_0008259c(param1);\n        return (int *)(currentRelOffset + 8);\n      }\n    }\n    shiftValue = relIndex + 1;\n  }\n  currentRelOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    adjustedSize = mask & 0xfffffffc;\n    diff = adjustedSize - alignedSize;\n    if (0xf < (int)diff) {\n      currentRelOffset = alignedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currentRelOffset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currentRelOffset;\n      *(undefined4 *)(currentRelOffset + 0xc) = 0x2007046c;\n      *(undefined4 *)(currentRelOffset + 8) = 0x2007046c;\n      *(uint *)(currentRelOffset + 4) = diff | 1;\n      *(uint *)(currentRelOffset + diff) = diff;\n      FUNC_0008259c(param1);\n      return (int *)(relInfo1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)diff) {\n      *(uint *)(adjustedSize + relInfo1 + 4) = *(uint *)(adjustedSize + relInfo1 + 4) | 1;\n      FUNC_0008259c(param1);\n      return (int *)(relInfo1 + 8);\n    }\n    if (adjustedSize < 0x200) {\n      adjustedSize = mask & 0xfffffff8;\n      relIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize);\n      currentRelOffset = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relInfo1 + 8) = relIndex;\n      *(uint *)(relInfo1 + 0xc) = adjustedSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currentRelOffset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize) = relInfo1;\n      *(dword *)(relIndex + 0xc) = relInfo1;\n    }\n    else {\n      diff = mask >> 9;\n      if (diff < 5) {\n        index = (mask >> 6) + 0x38;\n        relIndex = index * 2;\n      }\n      else if (diff < 0x15) {\n        index = diff + 0x5b;\n        relIndex = index * 2;\n      }\n      else if (diff < 0x55) {\n        index = (mask >> 0xc) + 0x6e;\n        relIndex = index * 2;\n      }\n      else if (diff < 0x155) {\n        index = (mask >> 0xf) + 0x77;\n        relIndex = index * 2;\n      }\n      else if (diff < 0x555) {\n        index = (mask >> 0x12) + 0x7c;\n        relIndex = index * 2;\n      }\n      else {\n        relIndex = 0xfc;\n        index = 0x7e;\n      }\n      currentRelOffset = relIndex * 4 + 0x20070464;\n      prevRelOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[relIndex];\n      if (prevRelOffset == currentRelOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index >> 2 & 0xffU);\n        newRelEntry = prevRelOffset;\n      }\n      else {\n        do {\n          newRelEntry = prevRelOffset;\n          if ((*(uint *)(prevRelOffset + 4) & 0xfffffffc) <= adjustedSize) break;\n          prevRelOffset = *(dword *)(prevRelOffset + 8);\n          newRelEntry = prevRelOffset;\n        } while (currentRelOffset != prevRelOffset);\n        prevRelOffset = *(dword *)(newRelEntry + 0xc);\n      }\n      currentRelOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relInfo1 + 0xc) = prevRelOffset;\n      *(dword *)(relInfo1 + 8) = newRelEntry;\n      *(dword *)(prevRelOffset + 8) = relInfo1;\n      *(dword *)(newRelEntry + 0xc) = relInfo1;\n    }\n  }\n  relInfo1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)shiftValue >> 2 & 0xffU);\n  if (mask <= currentRelOffset) {\n    if ((currentRelOffset & mask) == 0) {\n      shiftValue = shiftValue & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        shiftValue = shiftValue + 4;\n      } while ((currentRelOffset & mask) == 0);\n    }\n    do {\n      relArrayEntry = &Elf32_Rel_ARRAY_20070000[shiftValue + 0x8c].r_info;\n      relEntry = relArrayEntry;\n      adjustedSize = shiftValue;\n      do {\n        for (currentPtr = (undefined *)relEntry[3]; relEntry != (dword *)currentPtr;\n            currentPtr = *(undefined **)(currentPtr + 0xc)) {\n          diff = *(uint *)(currentPtr + 4) & 0xfffffffc;\n          newValue = diff - alignedSize;\n          if (0xf < (int)newValue) {\n            index = *(int *)(currentPtr + 8);\n            relIndex = *(int *)(currentPtr + 0xc);\n            newPtr = currentPtr + alignedSize;\n            *(uint *)(currentPtr + 4) = alignedSize | 1;\n            *(int *)(index + 0xc) = relIndex;\n            *(int *)(relIndex + 8) = index;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newPtr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newPtr;\n            *(undefined4 *)(newPtr + 0xc) = 0x2007046c;\n            *(undefined4 *)(newPtr + 8) = 0x2007046c;\n            *(uint *)(newPtr + 4) = newValue | 1;\n            *(uint *)(newPtr + newValue) = newValue;\n            FUNC_0008259c(param1);\n            return (int *)(currentPtr + 8);\n          }\n          if (-1 < (int)newValue) {\n            relIndex = *(int *)(currentPtr + 8);\n            index = *(int *)(currentPtr + 0xc);\n            *(uint *)(currentPtr + diff + 4) = *(uint *)(currentPtr + diff + 4) | 1;\n            *(int *)(relIndex + 0xc) = index;\n            *(int *)(index + 8) = relIndex;\n            FUNC_0008259c(param1);\n            return (int *)(currentPtr + 8);\n          }\n        }\n        adjustedSize = adjustedSize + 1;\n        relEntry = relEntry + 2;\n      } while ((adjustedSize & 3) != 0);\n      do {\n        diff = shiftValue & 3;\n        currentPtr = (undefined *)(relArrayEntry + -2);\n        shiftValue = shiftValue - 1;\n        if (diff == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        relArrayEntry = (dword *)*relArrayEntry;\n      } while (relArrayEntry == (dword *)currentPtr);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (shiftValue = adjustedSize, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        shiftValue = shiftValue + 4;\n      }\n    } while( true );\n  }\n  shiftValue = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignedSize <= shiftValue) &&\n     (mask = shiftValue - alignedSize, currentRelOffset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto LAB_0008211e;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + shiftValue;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    adjustedSize = alignedSize + DAT_20071190 + 0x10;\n  }\n  else {\n    adjustedSize = alignedSize + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  currentRelOffset = calculate_and_set_sum_00082970(param1,adjustedSize);\n  if ((currentRelOffset == 0xffffffff) || ((currentRelOffset < mask && (relInfo1 != 0x20070464)))) {\n    shiftValue = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentRelOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    diff = DAT_20071194 + adjustedSize;\n    DAT_20071194 = diff;\n    if ((mask == currentRelOffset) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = adjustedSize + shiftValue | 1;\n    }\n    else {\n      prevRelOffset = currentRelOffset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevRelOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = diff + (currentRelOffset - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevRelOffset;\n      mask = currentRelOffset & 7;\n      if (mask == 0) {\n        relIndex = 0x1000;\n      }\n      else {\n        currentRelOffset = currentRelOffset + (8 - mask);\n        relIndex = 0x1008 - mask;\n      }\n      relIndex = relIndex - (adjustedSize + currentRelOffset & 0xfff);\n      index = calculate_and_set_sum_00082970(param1,relIndex);\n      if (index == -1) {\n        mask = 1;\n        relIndex = 0;\n      }\n      else {\n        mask = (index - currentRelOffset) + relIndex | 1;\n      }\n      diff = DAT_20071194 + relIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currentRelOffset;\n      DAT_20071194 = diff;\n      *(uint *)(currentRelOffset + 4) = mask;\n      if (relInfo1 != 0x20070464) {\n        if (shiftValue < 0x10) {\n          *(undefined4 *)(currentRelOffset + 4) = 1;\n          shiftValue = 0;\n          goto LAB_00082108;\n        }\n        shiftValue = shiftValue - 0xc & 0xfffffff8;\n        *(uint *)(relInfo1 + 4) = shiftValue | *(uint *)(relInfo1 + 4) & 1;\n        *(undefined4 *)(relInfo1 + shiftValue + 4) = 5;\n        *(undefined4 *)(relInfo1 + shiftValue + 8) = 5;\n        if (0xf < shiftValue) {\n          update_relocation_entry_00083d9c(param1,relInfo1 + 8);\n          diff = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < diff) {\n      DAT_2007118c = diff;\n    }\n    if (DAT_20071188 < diff) {\n      DAT_20071188 = diff;\n    }\n    shiftValue = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentRelOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  mask = shiftValue - alignedSize;\n  if ((shiftValue < alignedSize) || ((int)mask < 0x10)) {\n    FUNC_0008259c(param1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignedSize + currentRelOffset;\n  *(uint *)(currentRelOffset + 4) = alignedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  FUNC_0008259c(param1);\n  return (int *)(currentRelOffset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "improve_relocation_entry_00081e14",
                "param_1": "param1",
                "param_2": "param2",
                "dVar1": "relInfo1",
                "iVar2": "index",
                "uVar3": "mask",
                "uVar4": "adjustedSize",
                "iVar5": "intValue1",
                "uVar6": "diff",
                "dVar7": "currentRelOffset",
                "uVar8": "newValue",
                "iVar9": "intValue2",
                "puVar10": "currentPtr",
                "dVar11": "prevRelOffset",
                "dVar12": "newRelEntry",
                "iVar13": "relIndex",
                "pdVar14": "relEntry",
                "uVar15": "alignedSize",
                "puVar16": "newPtr",
                "pdVar17": "relArrayEntry",
                "uVar18": "shiftValue"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  uint remaining;\n  uint count;\n  bool loopCondition;\n  \n  destPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      count = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          srcPtr = destPtr;\n          loopCondition = count != 0;\n          count = count - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtr = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      count = 4 - ((uint)destination & 3);\n      length = length - count;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtr = destPtr;\n      source = srcPtr;\n      if ((count & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destPtr = *source;\n    destPtr[1] = source[1];\n    destPtr[2] = source[2];\n    destPtr[3] = source[3];\n    destPtr[4] = source[4];\n    destPtr[5] = source[5];\n    destPtr[6] = source[6];\n    destPtr[7] = source[7];\n    destPtr[8] = source[8];\n    destPtr[9] = source[9];\n    destPtr[10] = source[10];\n    destPtr[0xb] = source[0xb];\n    destPtr[0xc] = source[0xc];\n    destPtr[0xd] = source[0xd];\n    destPtr[0xe] = source[0xe];\n    destPtr[0xf] = source[0xf];\n    destPtr = destPtr + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remaining = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destPtr = *source;\n      destPtr[1] = source[1];\n      destPtr[2] = source[2];\n      destPtr[3] = source[3];\n      destPtr = destPtr + 4;\n      source = source + 4;\n      loopCondition = 0xf < remaining;\n      remaining = remaining - 0x10;\n    } while (loopCondition);\n  }\n  count = remaining + 0xc;\n  srcPtr = destPtr;\n  destPtr = source;\n  if (0xfffffff3 < remaining) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      loopCondition = 3 < count;\n      count = count - 4;\n      destPtr = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (loopCondition);\n  }\nLAB_000823d0:\n  if (count + 4 != 0) {\n    destPtr = destPtr;\n    srcPtr = source;\n    if ((count & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = *(undefined *)source;\n    }\n    if ((count + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "uVar4": "remaining",
                "uVar5": "count",
                "bVar6": "loopCondition"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "reverse_copy_00082438",
            "code": "\nvoid reverseCopy_00082438(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int count;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *copyPtr;\n  uint remaining;\n  undefined *endPtr;\n  uint remainder;\n  \n  if ((src < dest) && (copyPtr = (undefined4 *)((int)src + length), dest < copyPtr)) {\n    endPtr = (undefined *)((int)dest + length);\n    count = length - 1;\n    if (length != 0) {\n      do {\n        copyPtr = (undefined4 *)((int)copyPtr + -1);\n        count = count + -1;\n        endPtr = endPtr + -1;\n        *endPtr = *(undefined *)copyPtr;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    copyPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = copyPtr + 4;\n      *copyPtr = *srcPtr;\n      copyPtr[1] = srcPtr[1];\n      copyPtr[2] = srcPtr[2];\n      copyPtr[3] = srcPtr[3];\n      copyPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    count = (length - 0x10 >> 4) + 1;\n    remainder = length & 0xf;\n    src = src + count * 4;\n    dest = dest + count * 4;\n    remaining = remainder;\n    copyPtr = dest;\n    srcPtr = src;\n    if (3 < remainder) {\n      do {\n        remaining = remaining - 4;\n        *copyPtr = *srcPtr;\n        copyPtr = copyPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < remaining);\n      count = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + count);\n      src = (undefined4 *)((int)src + count);\n      remainder = length & 3;\n    }\n    length = remainder;\n    if (length == 0) {\n      return;\n    }\n  }\n  copyPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)copyPtr + 1);\n    *(undefined *)copyPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    copyPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "count",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "copyPtr",
                "puVar6": "endPtr",
                "uVar5": "remaining",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "clear_memory_00082504",
            "code": "\nvoid clearMemory_00082504(undefined4 *ptr,undefined value,uint length)\n\n{\n  undefined4 *ptr_temp;\n  undefined4 *ptr_temp2;\n  undefined4 value_repeat;\n  uint length_temp;\n  bool is_zero;\n  \n  if (((uint)ptr & 3) != 0) {\n    is_zero = length == 0;\n    ptr_temp = ptr;\n    length = length - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      ptr = (undefined4 *)((int)ptr_temp + 1);\n      *(undefined *)ptr_temp = value;\n      if (((uint)ptr & 3) == 0) break;\n      is_zero = length == 0;\n      ptr_temp = ptr;\n      length = length - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    value_repeat = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    length_temp = length;\n    ptr_temp = ptr;\n    if (0xf < length) {\n      length_temp = length - 0x10;\n      do {\n        *ptr_temp = value_repeat;\n        ptr_temp[1] = value_repeat;\n        ptr_temp[2] = value_repeat;\n        ptr_temp[3] = value_repeat;\n        ptr_temp = ptr_temp + 4;\n      } while (ptr_temp != (undefined4 *)((int)ptr + (length_temp & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      ptr = ptr + ((length_temp >> 4) + 1) * 4;\n      length_temp = length;\n      ptr_temp = ptr;\n      if (length < 4) goto end_of_function_marker;\n    }\n    do {\n      length = length - 4;\n      *ptr = value_repeat;\n      ptr = ptr + 1;\n    } while (3 < length);\n    ptr = (undefined4 *)((int)ptr_temp + (length_temp - 4 & 0xfffffffc) + 4);\n    length = length_temp & 3;\n  }\nend_of_function_marker:\n  if (length != 0) {\n    ptr_temp = ptr;\n    do {\n      ptr_temp2 = (undefined4 *)((int)ptr_temp + 1);\n      *(undefined *)ptr_temp = value;\n      ptr_temp = ptr_temp2;\n    } while (ptr_temp2 != (undefined4 *)(length + (int)ptr));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "clear_memory_00082504",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "ptr_temp",
                "puVar2": "ptr_temp2",
                "uVar3": "value_repeat",
                "uVar4": "length_temp",
                "bVar5": "is_zero",
                "LAB_00082580": "end_of_function_marker"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "relocate_entries_000825a0",
            "code": "\nvoid relocateEntries_000825a0(undefined4 entry1,undefined4 entry2)\n\n{\n  improved_relocation_entry_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,entry1,entry2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "relocate_entries_000825a0",
                "param_1": "entry1",
                "param_2": "entry2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "improved_relocation_entry_000825b0",
            "code": "\nint * improved_relocation_entry_000825b0(undefined4 *param_ptr,int *entry_ptr,uint size)\n\n{\n  dword temp_dVar;\n  int *result_ptr;\n  uint temp_uVar;\n  int temp_iVar1;\n  uint info;\n  int temp_iVar2;\n  int *temp_ptr_1;\n  uint entry_size;\n  uint aligned_size;\n  int *temp_ptr_2;\n  \n  if (entry_ptr == (int *)0x0) {\n    result_ptr = (int *)improve_relocation_entry_00081e14(param_ptr,size);\n    return result_ptr;\n  }\n  FUNC_00082598();\n  info = entry_ptr[-1];\n  entry_size = info & 0xfffffffc;\n  result_ptr = entry_ptr + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)entry_size < (int)aligned_size) {\n    temp_dVar = (int)result_ptr + entry_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_dVar) {\n      temp_uVar = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_dVar = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp_uVar + entry_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)result_ptr + aligned_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uVar + entry_size) - aligned_size | 1;\n        entry_ptr[-1] = aligned_size | entry_ptr[-1] & 1U;\n        FUNC_0008259c(param_ptr);\n        return entry_ptr;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_dVar + 4) & 0xfffffffe) + temp_dVar + 4) & 1) == 0) {\n      temp_uVar = *(uint *)(temp_dVar + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp_uVar + entry_size)) {\n        temp_iVar2 = *(int *)(temp_dVar + 0xc);\n        temp_iVar1 = *(int *)(temp_dVar + 8);\n        *(int *)(temp_iVar1 + 0xc) = temp_iVar2;\n        *(int *)(temp_iVar2 + 8) = temp_iVar1;\n        entry_size = temp_uVar + entry_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_uVar = 0;\n      temp_dVar = 0;\n    }\n    if (-1 < (int)(info << 0x1f)) {\n      temp_ptr_2 = (int *)((int)result_ptr - entry_ptr[-2]);\n      info = (temp_ptr_2[1] & 0xfffffffcU) + entry_size;\n      if (temp_dVar != 0) {\n        if (temp_dVar == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp_uVar + info)) {\n            result_ptr = temp_ptr_2 + 2;\n            temp_iVar1 = *result_ptr;\n            temp_iVar2 = temp_ptr_2[3];\n            entry_size = entry_size - 4;\n            *(int *)(temp_iVar1 + 0xc) = temp_iVar2;\n            *(int *)(temp_iVar2 + 8) = temp_iVar1;\n            if (entry_size < 0x25) {\n              temp_ptr_1 = result_ptr;\n              if (0x13 < entry_size) {\n                temp_ptr_2[2] = *entry_ptr;\n                temp_ptr_2[3] = entry_ptr[1];\n                if (entry_size < 0x1c) {\n                  entry_ptr = entry_ptr + 2;\n                  temp_ptr_1 = temp_ptr_2 + 4;\n                }\n                else {\n                  temp_ptr_2[4] = entry_ptr[2];\n                  temp_ptr_2[5] = entry_ptr[3];\n                  if (entry_size == 0x24) {\n                    temp_ptr_2[6] = entry_ptr[4];\n                    temp_ptr_1 = entry_ptr + 5;\n                    entry_ptr = entry_ptr + 6;\n                    temp_ptr_2[7] = *temp_ptr_1;\n                    temp_ptr_1 = temp_ptr_2 + 8;\n                  }\n                  else {\n                    entry_ptr = entry_ptr + 4;\n                    temp_ptr_1 = temp_ptr_2 + 6;\n                  }\n                }\n              }\n              *temp_ptr_1 = *entry_ptr;\n              temp_ptr_1[1] = entry_ptr[1];\n              temp_ptr_1[2] = entry_ptr[2];\n            }\n            else {\n              reverse_copy_00082438(result_ptr,entry_ptr);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_ptr_2 + aligned_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uVar + info) - aligned_size | 1;\n            temp_ptr_2[1] = aligned_size | temp_ptr_2[1] & 1U;\n            FUNC_0008259c(param_ptr);\n            return result_ptr;\n          }\n        }\n        else {\n          temp_uVar = temp_uVar + info;\n          if ((int)aligned_size <= (int)temp_uVar) {\n            temp_iVar2 = *(int *)(temp_dVar + 0xc);\n            temp_iVar1 = *(int *)(temp_dVar + 8);\n            *(int *)(temp_iVar1 + 0xc) = temp_iVar2;\n            *(int *)(temp_iVar2 + 8) = temp_iVar1;\n            temp_ptr_1 = temp_ptr_2 + 2;\n            temp_iVar1 = *temp_ptr_1;\n            temp_iVar2 = temp_ptr_2[3];\n            info = entry_size - 4;\n            *(int *)(temp_iVar1 + 0xc) = temp_iVar2;\n            *(int *)(temp_iVar2 + 8) = temp_iVar1;\n            entry_size = temp_uVar;\n            if (info < 0x25) {\n              result_ptr = temp_ptr_1;\n              if (0x13 < info) {\n                temp_ptr_2[2] = *entry_ptr;\n                temp_ptr_2[3] = entry_ptr[1];\n                if (info < 0x1c) {\n                  entry_ptr = entry_ptr + 2;\n                  result_ptr = temp_ptr_2 + 4;\n                }\n                else {\n                  temp_ptr_2[4] = entry_ptr[2];\n                  temp_ptr_2[5] = entry_ptr[3];\n                  if (info == 0x24) {\n                    temp_ptr_2[6] = entry_ptr[4];\n                    result_ptr = entry_ptr + 5;\n                    entry_ptr = entry_ptr + 6;\n                    temp_ptr_2[7] = *result_ptr;\n                    result_ptr = temp_ptr_2 + 8;\n                  }\n                  else {\n                    entry_ptr = entry_ptr + 4;\n                    result_ptr = temp_ptr_2 + 6;\n                  }\n                }\n              }\n              *result_ptr = *entry_ptr;\n              result_ptr[1] = entry_ptr[1];\n              result_ptr[2] = entry_ptr[2];\n              info = temp_ptr_2[1];\n              result_ptr = temp_ptr_2;\n              entry_ptr = temp_ptr_1;\n            }\n            else {\n              reverse_copy_00082438(temp_ptr_1,entry_ptr);\n              info = temp_ptr_2[1];\n              result_ptr = temp_ptr_2;\n              entry_ptr = temp_ptr_1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)info) {\n        temp_ptr_1 = temp_ptr_2 + 2;\n        temp_iVar1 = *temp_ptr_1;\n        temp_iVar2 = temp_ptr_2[3];\n        temp_uVar = entry_size - 4;\n        *(int *)(temp_iVar1 + 0xc) = temp_iVar2;\n        *(int *)(temp_iVar2 + 8) = temp_iVar1;\n        entry_size = info;\n        if (temp_uVar < 0x25) {\n          result_ptr = temp_ptr_1;\n          if (0x13 < temp_uVar) {\n            temp_ptr_2[2] = *entry_ptr;\n            temp_ptr_2[3] = entry_ptr[1];\n            if (temp_uVar < 0x1c) {\n              entry_ptr = entry_ptr + 2;\n              result_ptr = temp_ptr_2 + 4;\n            }\n            else {\n              temp_ptr_2[4] = entry_ptr[2];\n              temp_ptr_2[5] = entry_ptr[3];\n              if (temp_uVar == 0x24) {\n                temp_ptr_2[6] = entry_ptr[4];\n                result_ptr = entry_ptr + 5;\n                entry_ptr = entry_ptr + 6;\n                temp_ptr_2[7] = *result_ptr;\n                result_ptr = temp_ptr_2 + 8;\n              }\n              else {\n                entry_ptr = entry_ptr + 4;\n                result_ptr = temp_ptr_2 + 6;\n              }\n            }\n          }\n          *result_ptr = *entry_ptr;\n          result_ptr[1] = entry_ptr[1];\n          result_ptr[2] = entry_ptr[2];\n          info = temp_ptr_2[1];\n          result_ptr = temp_ptr_2;\n          entry_ptr = temp_ptr_1;\n        }\n        else {\n          reverse_copy_00082438(temp_ptr_1,entry_ptr);\n          info = temp_ptr_2[1];\n          result_ptr = temp_ptr_2;\n          entry_ptr = temp_ptr_1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr_2 = (int *)improve_relocation_entry_00081e14(param_ptr,size);\n    if (temp_ptr_2 == (int *)0x0) goto LAB_000826a4;\n    info = entry_ptr[-1];\n    if (temp_ptr_2 + -2 != (int *)((info & 0xfffffffe) + (int)result_ptr)) {\n      entry_size = entry_size - 4;\n      if (entry_size < 0x25) {\n        result_ptr = entry_ptr;\n        temp_ptr_1 = temp_ptr_2;\n        if (0x13 < entry_size) {\n          *temp_ptr_2 = *entry_ptr;\n          temp_ptr_2[1] = entry_ptr[1];\n          if (entry_size < 0x1c) {\n            result_ptr = entry_ptr + 2;\n            temp_ptr_1 = temp_ptr_2 + 2;\n          }\n          else {\n            temp_ptr_2[2] = entry_ptr[2];\n            temp_ptr_2[3] = entry_ptr[3];\n            if (entry_size == 0x24) {\n              temp_ptr_2[4] = entry_ptr[4];\n              temp_ptr_2[5] = entry_ptr[5];\n              result_ptr = entry_ptr + 6;\n              temp_ptr_1 = temp_ptr_2 + 6;\n            }\n            else {\n              result_ptr = entry_ptr + 4;\n              temp_ptr_1 = temp_ptr_2 + 4;\n            }\n          }\n        }\n        *temp_ptr_1 = *result_ptr;\n        temp_ptr_1[1] = result_ptr[1];\n        temp_ptr_1[2] = result_ptr[2];\n      }\n      else {\n        reverse_copy_00082438(temp_ptr_2,entry_ptr);\n      }\n      update_relocation_entry_00083d9c(param_ptr,entry_ptr);\n      goto LAB_000826a4;\n    }\n    entry_size = entry_size + (temp_ptr_2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_uVar = entry_size - aligned_size;\n  temp_ptr_2 = entry_ptr;\n  if (temp_uVar < 0x10) {\n    result_ptr[1] = info & 1 | entry_size;\n    *(uint *)((int)result_ptr + entry_size + 4) = *(uint *)((int)result_ptr + entry_size + 4) | 1;\n  }\n  else {\n    result_ptr[1] = info & 1 | aligned_size;\n    *(uint *)((int)result_ptr + aligned_size + 4) = temp_uVar | 1;\n    *(uint *)((int)result_ptr + temp_uVar + aligned_size + 4) = *(uint *)((int)result_ptr + temp_uVar + aligned_size + 4) | 1;\n    update_relocation_entry_00083d9c(param_ptr,(int)result_ptr + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(param_ptr);\n  return temp_ptr_2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "improved_relocation_entry_000825b0",
                "param_1": "param_ptr",
                "param_2": "entry_ptr",
                "param_3": "size",
                "dVar1": "temp_dVar",
                "piVar2": "result_ptr",
                "uVar3": "temp_uVar",
                "iVar4": "temp_iVar1",
                "uVar5": "info",
                "iVar6": "temp_iVar2",
                "piVar7": "temp_ptr_1",
                "uVar8": "entry_size",
                "uVar9": "aligned_size",
                "piVar10": "temp_ptr_2"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "calculate_and_set_sum_00082970",
            "code": "\nvoid calculateAndSetSum_00082970(int *result,undefined4 value)\n\n{\n  int calculationResult;\n  \n  DAT_200711bc = 0;\n  calculationResult = calculate_sum_0008118c(value);\n  if ((calculationResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "calculate_and_set_sum_00082970",
                "param_1": "result",
                "param_2": "value",
                "iVar1": "calculationResult"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_00082994",
            "code": "\nvoid copyStringWithAlignment_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextSource;\n  uint *nextSourceByte;\n  uint currentValue;\n  uint tempValue;\n  uint *nextDestination;\n  bool isZeroByte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextSourceByte = source;\n    if (((uint)source & 1) != 0) {\n      nextSourceByte = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextSourceByte;\n    if (((uint)nextSourceByte & 2) != 0) {\n      source = (uint *)((int)nextSourceByte + 2);\n      currentShort = *(ushort *)nextSourceByte;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentValue = *source;\n  nextSourceByte = source + 1;\n  nextDestination = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_000829f8;\n    nextDestination = destination + 1;\n    *destination = currentValue;\n    nextSourceByte = source + 2;\n    currentValue = source[1];\n  }\n  while( true ) {\n    nextSource = nextSourceByte + 1;\n    tempValue = *nextSourceByte;\n    destination = nextDestination;\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) break;\n    destination = nextDestination + 1;\n    *nextDestination = currentValue;\n    currentValue = tempValue;\n    if ((tempValue + 0xfefefeff & ~tempValue & 0x80808080) != 0) break;\n    nextSourceByte = nextSourceByte + 2;\n    currentValue = *nextSource;\n    nextDestination = nextDestination + 2;\n    *destination = tempValue;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentValue;\n    tempValue = currentValue & 0xff;\n    currentValue = currentValue >> 8 | currentValue << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (tempValue != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextSource",
                "puVar4": "nextSourceByte",
                "uVar5": "currentValue",
                "uVar6": "tempValue",
                "puVar7": "nextDestination",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeroes_00082a50",
            "code": "\nint countLeadingZeroes_00082a50(uint inputNumber)\n\n{\n  int leadingZerosCount;\n  uint *pUIntVar;\n  uint currentUInt;\n  bool isZeroByte;\n  \n  pUIntVar = (uint *)(inputNumber & 0xfffffffc);\n  leadingZerosCount = -(inputNumber & 3);\n  currentUInt = *pUIntVar;\n  if ((inputNumber & 3) != 0) {\n    currentUInt = currentUInt | 0xffffffffU >> ((leadingZerosCount + 4U & 0x1f) << 3);\n  }\n  while (pUIntVar = pUIntVar + 1, (currentUInt + 0xfefefeff & ~currentUInt & 0x80808080) == 0) {\n    leadingZerosCount = leadingZerosCount + 4;\n    currentUInt = *pUIntVar;\n  }\n  isZeroByte = (currentUInt & 0xff) == 0;\n  if (!isZeroByte) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZeroByte = (currentUInt & 0xff00) == 0;\n  }\n  if (!isZeroByte) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZeroByte = (currentUInt & 0xff0000) == 0;\n  }\n  if (!isZeroByte) {\n    leadingZerosCount = leadingZerosCount + 1;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeroes_00082a50",
                "param_1": "inputNumber",
                "iVar1": "leadingZerosCount",
                "puVar2": "pUIntVar",
                "uVar3": "currentUInt",
                "bVar4": "isZeroByte"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 data,int param,int **ptrArr)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr2;\n  uint count;\n  undefined4 *ptr3;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(param + 100) << 0x12) {\n    result = extract_and_process_data_00083f34();\n    ptrArr[2] = (int *)0x0;\n    ptrArr[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = ptrArr[2];\n  ptr1 = *ptrArr;\n  while (ptr2 != (int *)0x0) {\n    value1 = ptr1[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      count = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        result = process_data_00083c40(data,*ptr3,param);\n        count = count + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (value2 != count);\n      ptr2 = ptrArr[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value1 & 0xfffffffc));\n    ptrArr[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  ptrArr[2] = (int *)0x0;\n  ptrArr[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "data",
                "param_2": "param",
                "param_3": "ptrArr",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr2",
                "uVar4": "count",
                "puVar5": "ptr3",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structure_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = check_and_relocate_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeroes_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_char_in_array_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_result_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_result_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 param1,int param2)\n\n{\n  int returnValue;\n  int dataCheck;\n  undefined *stackArray [2];\n  undefined4 constant1;\n  ushort maskedShort;\n  undefined2 shortValue;\n  undefined *localPointer;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 param2Offset;\n  undefined4 param2Value;\n  undefined4 param2Offset2;\n  undefined dataArray [1024];\n  \n  param2Offset2 = *(undefined4 *)(param2 + 100);\n  param2Offset = *(undefined4 *)(param2 + 0x1c);\n  shortValue = *(undefined2 *)(param2 + 0xe);\n  param2Value = *(undefined4 *)(param2 + 0x24);\n  stackArray[0] = dataArray;\n  maskedShort = *(ushort *)(param2 + 0xc) & 0xfffd;\n  constant1 = 0x400;\n  constant2 = 0x400;\n  constant3 = 0;\n  localPointer = stackArray[0];\n  returnValue = FUNC_00082b38(param1,stackArray);\n  if ((-1 < returnValue) && (dataCheck = process_data_00083adc(param1,stackArray), dataCheck != 0)) {\n    returnValue = -1;\n  }\n  if ((int)((uint)maskedShort << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "returnValue",
                "iVar2": "dataCheck",
                "local_488": "stackArray",
                "local_480": "constant1",
                "local_47c": "maskedShort",
                "local_47a": "shortValue",
                "local_478": "localPointer",
                "local_474": "constant2",
                "local_470": "constant3",
                "local_46c": "param2Offset",
                "local_464": "param2Value",
                "local_424": "param2Offset2",
                "auStack_420": "dataArray"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "check_and_relocate_00083808",
            "code": "\nundefined4 check_and_relocate_00083808(undefined4 *result,int *data)\n\n{\n  int flag;\n  int value;\n  uint temp;\n  ushort mask;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structure_00083b14();\n  }\n  mask = *(ushort *)(data + 3);\n  temp = (uint)mask;\n  if ((int)(temp << 0x1c) < 0) {\n    value = data[4];\n  }\n  else {\n    if (-1 < (int)(temp << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = mask | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          update_relocation_entry_00083d9c(result);\n          mask = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      value = data[4];\n      mask = mask & 0xffdb;\n      *data = value;\n      data[1] = 0;\n    }\n    else {\n      value = data[4];\n    }\n    *(ushort *)(data + 3) = mask | 8;\n    temp = (uint)(mask | 8);\n  }\n  if ((value == 0) && ((temp & 0x280) != 0x200)) {\n    relocate_memory_000842a4(result,data);\n    temp = (uint)*(ushort *)(data + 3);\n    value = data[4];\n  }\n  if ((temp & 1) == 0) {\n    flag = 0;\n    if (-1 < (int)(temp << 0x1e)) {\n      flag = data[5];\n    }\n    data[2] = flag;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((value == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "check_and_relocate_00083808",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "flag",
                "iVar2": "value",
                "uVar3": "temp",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "return_value_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 return_value_00083974(undefined4 input_value)\n\n{\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00083974": "return_value_00083974",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *dataArray,int *infoArray)\n\n{\n  int *pointerVar1;\n  int intVar2;\n  ushort ushortVar3;\n  uint uintVar4;\n  int intVar5;\n  code *functionPtr;\n  undefined4 optionalVar4;\n  int intVar7;\n  \n  if ((dataArray != (int *)0x0) && (dataArray[0xe] == 0)) {\n    initialize_data_structure_00083b14();\n  }\n  if (*(short *)(infoArray + 3) == 0) {\n    return 0;\n  }\n  ushortVar3 = *(ushort *)(infoArray + 3);\n  if ((int)((uint)ushortVar3 << 0x1c) < 0) {\n    intVar7 = infoArray[4];\n    if (intVar7 == 0) {\n      return 0;\n    }\n    intVar2 = *infoArray;\n    if ((ushortVar3 & 3) == 0) {\n      intVar5 = infoArray[5];\n    }\n    else {\n      intVar5 = 0;\n    }\n    *infoArray = intVar7;\n    intVar2 = intVar2 - intVar7;\n    infoArray[2] = intVar5;\n    do {\n      if (intVar2 < 1) {\n        return 0;\n      }\n      intVar5 = (*(code *)infoArray[9])(dataArray,infoArray[7],intVar7,intVar2,optionalVar4);\n      intVar2 = intVar2 - intVar5;\n      intVar7 = intVar7 + intVar5;\n    } while (0 < intVar5);\nLAB_00083a54:\n    *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoArray + 3) = ushortVar3 | 0x800;\n  if ((infoArray[1] < 1) && (infoArray[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)infoArray[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  uintVar4 = (uint)(ushortVar3 | 0x800);\n  intVar7 = *dataArray;\n  *dataArray = 0;\n  if ((ushortVar3 & 0x1000) == 0) {\n    intVar2 = (*functionPtr)(dataArray,infoArray[7],uintVar4 & 0x1000,1);\n    if ((intVar2 == -1) && (intVar5 = *dataArray, intVar5 != 0)) {\n      if ((intVar5 == 0x1d) || (intVar5 == 0x16)) {\n        *dataArray = intVar7;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uintVar4 = (uint)*(ushort *)(infoArray + 3);\n    functionPtr = (code *)infoArray[10];\n  }\n  else {\n    intVar2 = infoArray[0x14];\n  }\n  if (((int)(uintVar4 << 0x1d) < 0) && (intVar2 = intVar2 - infoArray[1], infoArray[0xc] != 0)) {\n    intVar2 = intVar2 - infoArray[0xf];\n  }\n  intVar2 = (*functionPtr)(dataArray,infoArray[7],intVar2,0);\n  if (intVar2 == -1) {\n    intVar5 = *dataArray;\n    if (intVar5 != 0) {\n      if ((intVar5 != 0x1d) && (intVar5 != 0x16)) {\n        *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) & 0xf7ff;\n      *infoArray = infoArray[4];\n      infoArray[1] = 0;\n      goto LAB_00083a00;\n    }\n    ushortVar3 = *(ushort *)(infoArray + 3) & 0xf7ff;\n    infoArray[1] = 0;\n    *(ushort *)(infoArray + 3) = ushortVar3;\n    *infoArray = infoArray[4];\n  }\n  else {\n    ushortVar3 = *(ushort *)(infoArray + 3) & 0xf7ff;\n    *infoArray = infoArray[4];\n    *(ushort *)(infoArray + 3) = ushortVar3;\n    infoArray[1] = 0;\n  }\n  if ((int)((uint)ushortVar3 << 0x13) < 0) {\n    infoArray[0x14] = intVar2;\n  }\nLAB_00083a00:\n  pointerVar1 = (int *)infoArray[0xc];\n  *dataArray = intVar7;\n  if (pointerVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (pointerVar1 != infoArray + 0x10) {\n    update_relocation_entry_00083d9c(dataArray);\n  }\n  infoArray[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "dataArray",
                "param_2": "infoArray",
                "piVar1": "pointerVar1",
                "iVar2": "intVar2",
                "uVar3": "ushortVar3",
                "uVar4": "uintVar4",
                "iVar5": "intVar5",
                "pcVar6": "functionPtr",
                "unaff_r4": "optionalVar4",
                "iVar7": "intVar7"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structure_00083b14",
            "code": "\nvoid initializeDataStructure_00083b14(int dataStructureAddress)\n\n{\n  undefined4 *firstPointer;\n  undefined4 *secondPointer;\n  \n  if (*(int *)(dataStructureAddress + 0x38) == 0) {\n    firstPointer = *(undefined4 **)(dataStructureAddress + 4);\n    *(undefined **)(dataStructureAddress + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructureAddress + 0x2e4) = 3;\n    *(int *)(dataStructureAddress + 0x2e8) = dataStructureAddress + 0x2ec;\n    *(undefined4 *)(dataStructureAddress + 0x2e0) = 0;\n    *(undefined2 *)(firstPointer + 3) = 4;\n    *firstPointer = 0;\n    firstPointer[1] = 0;\n    firstPointer[2] = 0;\n    firstPointer[0x19] = 0;\n    *(undefined2 *)((int)firstPointer + 0xe) = 0;\n    firstPointer[4] = 0;\n    firstPointer[5] = 0;\n    firstPointer[6] = 0;\n    clear_memory_00082504(firstPointer + 0x17,0,8);\n    secondPointer = *(undefined4 **)(dataStructureAddress + 8);\n    firstPointer[7] = firstPointer;\n    firstPointer[8] = &LAB_00084440_1;\n    firstPointer[9] = 0x84465;\n    firstPointer[10] = 0x8449d;\n    firstPointer[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)secondPointer + 0xe) = 1;\n    *(undefined2 *)(secondPointer + 3) = 9;\n    *secondPointer = 0;\n    secondPointer[1] = 0;\n    secondPointer[2] = 0;\n    secondPointer[0x19] = 0;\n    secondPointer[4] = 0;\n    secondPointer[5] = 0;\n    secondPointer[6] = 0;\n    clear_memory_00082504(secondPointer + 0x17,0,8);\n    firstPointer = *(undefined4 **)(dataStructureAddress + 0xc);\n    secondPointer[7] = secondPointer;\n    secondPointer[8] = &LAB_00084440_1;\n    secondPointer[9] = 0x84465;\n    secondPointer[10] = 0x8449d;\n    secondPointer[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(firstPointer + 3) = 0x12;\n    *(undefined2 *)((int)firstPointer + 0xe) = 2;\n    *firstPointer = 0;\n    firstPointer[1] = 0;\n    firstPointer[2] = 0;\n    firstPointer[0x19] = 0;\n    firstPointer[4] = 0;\n    firstPointer[5] = 0;\n    firstPointer[6] = 0;\n    clear_memory_00082504(firstPointer + 0x17,0,8);\n    firstPointer[7] = firstPointer;\n    firstPointer[8] = &LAB_00084440_1;\n    firstPointer[9] = 0x84465;\n    firstPointer[10] = 0x8449d;\n    firstPointer[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructureAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structure_00083b14",
                "param_1": "dataStructureAddress",
                "puVar1": "firstPointer",
                "puVar2": "secondPointer"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint process_data_00083c40(undefined4 arg1,uint data_size,byte **data_ptr)\n\n{\n  int relocation_info;\n  uint execute_result;\n  uint current_byte;\n  byte *pbData;\n  uint byte_counter;\n  byte current_byte_value;\n  byte byte_stack [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x12)) {\n    *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x2000;\n    data_ptr[0x19] = (byte *)((uint)data_ptr[0x19] | 0x2000);\n  }\n  relocation_info = get_relocation_info_00084298();\n  if ((relocation_info == 1) && (data_size - 1 < 0xff)) {\n    current_byte = data_size & 0xff;\n    current_byte_value = (byte)current_byte;\n    execute_result = 1;\n  }\n  else {\n    execute_result = execute_operation_0008456c(arg1,&current_byte_value,data_size,data_ptr + 0x17);\n    if (execute_result == 0xffffffff) {\n      *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (execute_result == 0) {\n      return data_size;\n    }\n    current_byte = (uint)current_byte_value;\n  }\n  byte_counter = 0;\n  do {\n    pbData = data_ptr[2] + -1;\n    data_ptr[2] = pbData;\n    if ((int)pbData < 0) {\n      if ((int)data_ptr[6] <= (int)pbData) {\n        **data_ptr = (byte)current_byte;\n        pbData = *data_ptr;\n        current_byte = (uint)*pbData;\n        if (current_byte != 10) goto LAB_00083c90;\n      }\n      relocation_info = reverse_and_process_data_00083c40_000844c4(arg1,current_byte,data_ptr);\n      if (relocation_info == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data_ptr = (byte)current_byte;\n      pbData = *data_ptr;\nLAB_00083c90:\n      *data_ptr = pbData + 1;\n    }\n    if (execute_result <= byte_counter + 1) {\n      return data_size;\n    }\n    current_byte = (uint)byte_stack[byte_counter];\n    byte_counter = byte_counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "arg1",
                "param_2": "data_size",
                "param_3": "data_ptr",
                "iVar1": "relocation_info",
                "uVar2": "execute_result",
                "uVar3": "current_byte",
                "pbVar4": "pbData",
                "uVar5": "byte_counter",
                "local_1c": "current_byte_value",
                "abStack_1b": "byte_stack"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "calculate_and_update_offset_00083d00",
            "code": "\nundefined4 calculate_and_update_offset_00083d00(undefined4 input_param,int current_offset)\n\n{\n  int result;\n  uint masked_offset;\n  int new_offset;\n  \n  FUNC_00082598();\n  masked_offset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  new_offset = ((masked_offset - current_offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_offset) {\n    result = calculate_and_set_sum_00082970(input_param,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + masked_offset) {\n      result = calculate_and_set_sum_00082970(input_param,-new_offset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - new_offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = masked_offset - new_offset | 1;\n        FUNC_0008259c(input_param);\n        return 1;\n      }\n      new_offset = calculate_and_set_sum_00082970(input_param,0);\n      if (0xf < (int)(new_offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = new_offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             new_offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "calculate_and_update_offset_00083d00",
                "param_1": "input_param",
                "param_2": "current_offset",
                "iVar1": "result",
                "uVar2": "masked_offset",
                "iVar3": "new_offset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_entry_00083d9c",
            "code": "\nvoid updateRelocationEntry_00083d9c(undefined4 param,int relocEntry)\n\n{\n  int index;\n  bool isSymbolic;\n  uint flags;\n  dword currentReloc;\n  int prevIndex;\n  uint offset;\n  dword baseRelocEntry;\n  uint baseRelocOffset;\n  dword newRelocEntry;\n  \n  if (relocEntry == 0) {\n    return;\n  }\n  FUNC_00082598();\n  flags = *(uint *)(relocEntry + -4);\n  baseRelocEntry = relocEntry - 8;\n  offset = flags & 0xfffffffe;\n  currentReloc = baseRelocEntry + offset;\n  baseRelocOffset = *(uint *)(currentReloc + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentReloc) {\n    baseRelocOffset = baseRelocOffset + offset;\n    if (-1 < (int)(flags << 0x1f)) {\n      baseRelocEntry = baseRelocEntry - *(int *)(relocEntry + -8);\n      prevIndex = *(int *)(baseRelocEntry + 0xc);\n      index = *(int *)(baseRelocEntry + 8);\n      baseRelocOffset = baseRelocOffset + *(int *)(relocEntry + -8);\n      *(int *)(index + 0xc) = prevIndex;\n      *(int *)(prevIndex + 8) = index;\n    }\n    currentReloc = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(baseRelocEntry + 4) = baseRelocOffset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = baseRelocEntry;\n    if (currentReloc <= baseRelocOffset) {\n      calculate_and_update_offset_00083d00(param,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentReloc + 4) = baseRelocOffset;\n    if ((flags & 1) == 0) {\n      baseRelocEntry = baseRelocEntry - *(int *)(relocEntry + -8);\n      index = *(int *)(baseRelocEntry + 8);\n      offset = offset + *(int *)(relocEntry + -8);\n      if (index == 0x2007046c) {\n        isSymbolic = true;\n      }\n      else {\n        prevIndex = *(int *)(baseRelocEntry + 0xc);\n        *(int *)(index + 0xc) = prevIndex;\n        *(int *)(prevIndex + 8) = index;\n        isSymbolic = false;\n      }\n    }\n    else {\n      isSymbolic = false;\n    }\n    if (-1 < *(int *)(currentReloc + baseRelocOffset + 4) << 0x1f) {\n      offset = offset + baseRelocOffset;\n      index = *(int *)(currentReloc + 8);\n      if ((!isSymbolic) && (index == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = baseRelocEntry;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = baseRelocEntry;\n        *(undefined4 *)(baseRelocEntry + 0xc) = 0x2007046c;\n        *(undefined4 *)(baseRelocEntry + 8) = 0x2007046c;\n        *(uint *)(baseRelocEntry + 4) = offset | 1;\n        *(uint *)(baseRelocEntry + offset) = offset;\n        goto LAB_00083e30;\n      }\n      prevIndex = *(int *)(currentReloc + 0xc);\n      *(int *)(index + 0xc) = prevIndex;\n      *(int *)(prevIndex + 8) = index;\n    }\n    *(uint *)(baseRelocEntry + 4) = offset | 1;\n    *(uint *)(baseRelocEntry + offset) = offset;\n    if (!isSymbolic) {\n      if (offset < 0x200) {\n        flags = offset & 0xfffffff8;\n        index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(baseRelocEntry + 8) = index;\n        *(uint *)(baseRelocEntry + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags) = baseRelocEntry;\n        *(dword *)(index + 0xc) = baseRelocEntry;\n        FUNC_0008259c(param);\n        return;\n      }\n      flags = offset >> 9;\n      if (flags < 5) {\n        index = (offset >> 6) + 0x38;\n        prevIndex = index * 2;\n      }\n      else if (flags < 0x15) {\n        index = flags + 0x5b;\n        prevIndex = index * 2;\n      }\n      else if (flags < 0x55) {\n        index = (offset >> 0xc) + 0x6e;\n        prevIndex = index * 2;\n      }\n      else if (flags < 0x155) {\n        index = (offset >> 0xf) + 0x77;\n        prevIndex = index * 2;\n      }\n      else if (flags < 0x555) {\n        index = (offset >> 0x12) + 0x7c;\n        prevIndex = index * 2;\n      }\n      else {\n        prevIndex = 0xfc;\n        index = 0x7e;\n      }\n      newRelocEntry = prevIndex * 4 + 0x20070464;\n      currentReloc = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[prevIndex];\n      if (currentReloc == newRelocEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index >> 2 & 0xffU);\n        newRelocEntry = currentReloc;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentReloc + 4) & 0xfffffffc) <= offset) break;\n          currentReloc = *(dword *)(currentReloc + 8);\n        } while (newRelocEntry != currentReloc);\n        newRelocEntry = *(dword *)(currentReloc + 0xc);\n      }\n      *(dword *)(baseRelocEntry + 0xc) = newRelocEntry;\n      *(dword *)(baseRelocEntry + 8) = currentReloc;\n      *(dword *)(newRelocEntry + 8) = baseRelocEntry;\n      *(dword *)(currentReloc + 0xc) = baseRelocEntry;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_entry_00083d9c",
                "param_1": "param",
                "param_2": "relocEntry",
                "iVar1": "index",
                "bVar2": "isSymbolic",
                "uVar3": "flags",
                "dVar4": "currentReloc",
                "iVar5": "prevIndex",
                "uVar6": "offset",
                "dVar7": "baseRelocEntry",
                "uVar8": "baseRelocOffset",
                "dVar9": "newRelocEntry"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "extract_and_process_data_00083f34",
            "code": "\nundefined4 extractAndProcessData_00083f34(undefined4 *outParam,uint *inputData,uint **extraData)\n\n{\n  int result;\n  uint tempValue1;\n  uint tempValue2;\n  ushort flag;\n  uint intValue;\n  uint *ptr1;\n  uint *ptr2;\n  uint tempValue3;\n  uint tempValue4;\n  uint tempValue5;\n  uint tempValue6;\n  uint localValue;\n  \n  if (extraData[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputData + 3);\n    intValue = (uint)flag;\n    if (((int)(intValue << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *extraData;\n    }\n    else {\n      result = check_and_relocate_00083808(outParam,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputData + 3);\n      intValue = (uint)flag;\n      ptr2 = *extraData;\n    }\n    if ((flag & 2) == 0) {\n      tempValue1 = intValue & 2;\n      tempValue5 = tempValue1;\n      tempValue3 = tempValue1;\n      localValue = tempValue1;\n      if ((intValue & 1) == 0) {\n        tempValue1 = 0;\n        tempValue5 = 0;\n        while( true ) {\n          while (tempValue1 == 0) {\n            tempValue5 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            tempValue1 = *ptr1;\n          }\n          tempValue3 = inputData[2];\n          if ((int)(intValue << 0x16) < 0) {\n            if (tempValue1 < tempValue3) {\n              intValue = *inputData;\n              tempValue3 = tempValue1;\n            }\n            else if ((intValue & 0x480) == 0) {\n              intValue = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              tempValue3 = result + 1 + tempValue1;\n              tempValue4 = (int)(inputData[5] * 3) / 2;\n              if (tempValue3 <= tempValue4) {\n                tempValue3 = tempValue4;\n              }\n              if ((int)(intValue << 0x15) < 0) {\n                tempValue4 = improve_relocation_entry_00081e14(outParam,tempValue3);\n                if (tempValue4 == 0) {\n                  *outParam = 0xc;\n                  flag = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(tempValue4,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempValue4 = improved_relocation_entry_000825b0(outParam);\n                if (tempValue4 == 0) {\n                  update_relocation_entry_00083d9c(outParam,inputData[4]);\n                  flag = *(ushort *)(inputData + 3) & 0xff7f;\n                  *outParam = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              intValue = tempValue4 + result;\n              inputData[4] = tempValue4;\n              inputData[5] = tempValue3;\n              *inputData = intValue;\n              inputData[2] = tempValue3 - result;\n              tempValue3 = tempValue1;\n            }\n            reverse_copy_00082438(intValue,tempValue5,tempValue3);\n            inputData[2] = inputData[2] - tempValue3;\n            *inputData = *inputData + tempValue3;\n            tempValue3 = tempValue1;\n          }\n          else if ((inputData[4] < *inputData) || (intValue = inputData[5], tempValue1 < intValue)) {\n            if (tempValue1 < tempValue3) {\n              tempValue3 = tempValue1;\n            }\n            reverse_copy_00082438(*inputData,tempValue5,tempValue3);\n            intValue = inputData[2];\n            inputData[2] = intValue - tempValue3;\n            *inputData = *inputData + tempValue3;\n            if ((intValue - tempValue3 == 0) && (result = process_data_00083adc(outParam,inputData), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            tempValue3 = 0x7fffffff;\n            if (tempValue1 < 0x7fffffff) {\n              tempValue3 = tempValue1;\n            }\n            tempValue3 = (*(code *)inputData[9])(outParam,inputData[7],tempValue5,(tempValue3 / intValue) * intValue);\n            if ((int)tempValue3 < 1) goto LAB_0008402e;\n          }\n          ptr1 = extraData[2];\n          tempValue5 = tempValue5 + tempValue3;\n          tempValue1 = tempValue1 - tempValue3;\n          extraData[2] = (uint *)((int)ptr1 - tempValue3);\n          if ((uint *)((int)ptr1 - tempValue3) == (uint *)0x0) break;\n          intValue = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (tempValue1 == 0) {\n            tempValue3 = *ptr2;\n            tempValue1 = ptr2[1];\n            localValue = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localValue == 0) {\n            result = find_char_in_array_00084384(tempValue3,10,tempValue1);\n            if (result == 0) {\n              tempValue5 = tempValue1 + 1;\n              localValue = 1;\n            }\n            else {\n              tempValue5 = (result + 1) - tempValue3;\n              localValue = 1;\n            }\n          }\n          tempValue4 = *inputData;\n          intValue = tempValue5;\n          if (tempValue1 <= tempValue5) {\n            intValue = tempValue1;\n          }\n          tempValue2 = inputData[5];\n          if ((inputData[4] < tempValue4) && (tempValue6 = inputData[2] + tempValue2, (int)tempValue6 < (int)intValue)) {\n            reverse_copy_00082438(tempValue4,tempValue3,tempValue6);\n            *inputData = *inputData + tempValue6;\n            result = process_data_00083adc(outParam,inputData);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)intValue < (int)tempValue2) {\n            reverse_copy_00082438(tempValue4,tempValue3,intValue);\n            inputData[2] = inputData[2] - intValue;\n            *inputData = intValue + *inputData;\n            tempValue6 = intValue;\n          }\n          else {\n            tempValue6 = (*(code *)inputData[9])(outParam,inputData[7],tempValue3,tempValue2);\n            if ((int)tempValue6 < 1) goto LAB_0008402e;\n          }\n          tempValue5 = tempValue5 - tempValue6;\n          if (tempValue5 == 0) {\n            result = process_data_00083adc(outParam,inputData);\n            if (result != 0) goto LAB_0008402e;\n            localValue = 0;\n          }\n          ptr1 = extraData[2];\n          tempValue3 = tempValue3 + tempValue6;\n          tempValue1 = tempValue1 - tempValue6;\n          extraData[2] = (uint *)((int)ptr1 - tempValue6);\n        } while ((uint *)((int)ptr1 - tempValue6) != (uint *)0x0);\n      }\n    }\n    else {\n      tempValue1 = 0;\n      intValue = 0;\n      do {\n        while( true ) {\n          tempValue5 = intValue;\n          if (0x7ffffbff < intValue) {\n            tempValue5 = 0x7ffffc00;\n          }\n          if (intValue != 0) break;\n          tempValue1 = *ptr2;\n          intValue = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(outParam,inputData[7],tempValue1,tempValue5);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = extraData[2];\n        tempValue1 = tempValue1 + result;\n        intValue = intValue - result;\n        extraData[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "extract_and_process_data_00083f34",
                "param_1": "outParam",
                "param_2": "inputData",
                "param_3": "extraData",
                "iVar1": "result",
                "uVar2": "tempValue1",
                "uVar3": "tempValue2",
                "uVar4": "flag",
                "uVar5": "intValue",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "tempValue3",
                "uVar9": "tempValue4",
                "uVar10": "tempValue5",
                "uVar11": "tempValue6",
                "local_2c": "localValue"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nuint32_t getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword get_relocation_info_00084298(void)\n\n{\n  return relocation_array[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "relocate_memory_000842a4",
            "code": "\nvoid relocateMemory_000842a4(int functionAddress,int *relocationEntry)\n\n{\n  ushort flags;\n  int result;\n  int improvedAddress;\n  uint flagsCopy;\n  bool isInitialized;\n  undefined memoryBuffer [4];\n  uint value;\n  \n  flags = *(ushort *)(relocationEntry + 3);\n  flagsCopy = (uint)flags;\n  if ((int)(flagsCopy << 0x1e) < 0) {\n    *relocationEntry = (int)relocationEntry + 0x43;\n    relocationEntry[4] = (int)relocationEntry + 0x43;\n    relocationEntry[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)relocationEntry + 0xe)) {\n    result = initializeAndCheckMemory(functionAddress,(int)*(short *)((int)relocationEntry + 0xe),memoryBuffer);\n    if (-1 < result) {\n      isInitialized = (value & 0xf000) == 0x2000;\n      if (((value & 0xf000) == 0x8000) && (relocationEntry[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) | 0x400;\n        relocationEntry[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    flags = *(ushort *)(relocationEntry + 3);\n    flagsCopy = (uint)flags;\n  }\n  *(ushort *)(relocationEntry + 3) = flags | 0x800;\n  if ((flagsCopy & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isInitialized = false;\nLAB_00084300:\n  improvedAddress = improveRelocationEntry(functionAddress,result);\n  flags = *(ushort *)(relocationEntry + 3);\n  if (improvedAddress == 0) {\n    if (-1 < (int)((uint)flags << 0x16)) {\n      *(ushort *)(relocationEntry + 3) = flags | 2;\n      *relocationEntry = (int)relocationEntry + 0x43;\n      relocationEntry[4] = (int)relocationEntry + 0x43;\n      relocationEntry[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(functionAddress + 0x3c) = &relocationFailureFunction;\n    *(ushort *)(relocationEntry + 3) = flags | 0x80;\n    *relocationEntry = improvedAddress;\n    relocationEntry[4] = improvedAddress;\n    relocationEntry[5] = result;\n    if ((isInitialized) && (result = processReturnValue(functionAddress,(int)*(short *)((int)relocationEntry + 0xe)), result != 0))\n    {\n      *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "relocate_memory_000842a4",
                "param_1": "functionAddress",
                "param_2": "relocationEntry",
                "uVar1": "flags",
                "iVar2": "result",
                "iVar3": "improvedAddress",
                "uVar4": "flagsCopy",
                "bVar5": "isInitialized",
                "auStack_54": "memoryBuffer",
                "local_50": "value",
                "initialize_and_check_memory_000846b4": "initializeAndCheckMemory",
                "improve_relocation_entry_00081e14": "improveRelocationEntry",
                "process_return_value_000846dc": "processReturnValue",
                "LAB_00083b08_1": "relocationFailureFunction"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_char_in_array_00084384",
            "code": "\nuint * find_char_in_array_00084384(uint *array,char target,uint size)\n\n{\n  uint result;\n  int index;\n  uint *ptr;\n  bool is_last_byte;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < size) {\n      ptr = array;\n      do {\n        result = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        size = size - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < size);\n    }\n    if (size == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_byte = index == size - 1;\n        index = index + 1;\n        if (is_last_byte) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (size == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    size = size - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (size == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)array + 1);\n      size = size - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_char_in_array_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "size",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_byte"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "copy_and_check_data_00084464",
            "code": "\nvoid copyAndCheckData_00084464(int *outputData,int inputData,undefined4 paramA,undefined4 paramB)\n\n{\n  int status;\n  ushort ushortValue;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  ushortValue = *(ushort *)(inputData + 0xc);\n  if ((int)((uint)ushortValue << 0x17) < 0) {\n    checkAndUpdateValue(outputData,(int)*(short *)(inputData + 0xe),0,2);\n    ushortValue = *(ushort *)(inputData + 0xc);\n  }\n  *(ushort *)(inputData + 0xc) = ushortValue & 0xefff;\n  DAT_200711bc = 0;\n  status = copy_bytes_000811cc((int)*(short *)(inputData + 0xe),paramA,paramB,paramB,unused1,unused2,\n                       unused3,unused4);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *outputData = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "copy_and_check_data_00084464",
                "param_1": "outputData",
                "param_2": "inputData",
                "param_3": "paramA",
                "param_4": "paramB",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4",
                "uVar2": "ushortValue",
                "check_return_value_and_update_00084700": "checkAndUpdateValue",
                "iVar1": "status"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_value_based_on_return_0008449c",
            "code": "\nvoid updateValueBasedOnReturn_0008449c(undefined4 ptr1,int ptr2)\n\n{\n  int returnValue;\n  ushort updatedValue;\n  \n  returnValue = check_return_value_and_update_00084700(ptr1,(int)*(short *)(ptr2 + 0xe));\n  if (returnValue == -1) {\n    updatedValue = *(ushort *)(ptr2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(ptr2 + 0xc) | 0x1000;\n  }\n  if (returnValue != -1) {\n    *(int *)(ptr2 + 0x50) = returnValue;\n  }\n  *(ushort *)(ptr2 + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_value_based_on_return_0008449c",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "iVar1": "returnValue",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "reverse_and_process_data_000844c4",
            "code": "\nuint reverse_and_process_data_000844c4(int data_structure,uint input_value,undefined4 *data_array,undefined4 additional_data)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *pointer_value;\n  int temp_variable;\n  \n  if ((data_structure != 0) && (*(int *)(data_structure + 0x38) == 0)) {\n    initialize_data_structure_00083b14();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (temp_variable = data_array[4], temp_variable == 0)) {\n    temp_variable = check_and_relocate_00083808(data_structure,data_array,ushort_value,uint_value,additional_data);\n    if (temp_variable != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    temp_variable = data_array[4];\n    uint_value = (uint)ushort_value;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    pointer_value = (undefined *)*data_array;\n    temp_variable = (int)pointer_value - temp_variable;\n    if (temp_variable < (int)data_array[5]) {\nLAB_000844f6:\n      temp_variable = temp_variable + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    pointer_value = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    temp_variable = (int)pointer_value - temp_variable;\n    if (temp_variable < (int)data_array[5]) goto LAB_000844f6;\n  }\n  temp_variable = process_data_00083adc(data_structure,data_array);\n  if (temp_variable != 0) {\n    return 0xffffffff;\n  }\n  pointer_value = (undefined *)*data_array;\n  temp_variable = 1;\nLAB_000844f8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = pointer_value + 1;\n  *pointer_value = (char)input_value;\n  if (((data_array[5] == temp_variable) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (temp_variable = process_data_00083adc(data_structure,data_array), temp_variable != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "reverse_and_process_data_000844c4",
                "param_1": "data_structure",
                "param_2": "input_value",
                "param_3": "data_array",
                "param_4": "additional_data",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "pointer_value",
                "iVar4": "temp_variable"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_operation_0008456c",
            "code": "\nvoid executeOperation_0008456c(undefined4 *output,int inputSize,undefined4 extraParam,undefined4 *result)\n\n{\n  code *operationFunction;\n  undefined4 memoryAddress;\n  int returnValue;\n  undefined temporaryBuffer [12];\n  \n  operationFunction = DAT_20070898;\n  if (inputSize == 0) {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*operationFunction)(output,temporaryBuffer,0,memoryAddress,result);\n  }\n  else {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*operationFunction)(output,inputSize,extraParam,memoryAddress,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_operation_0008456c",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "extraParam",
                "param_4": "result",
                "pcVar1": "operationFunction",
                "uVar2": "memoryAddress",
                "iVar3": "returnValue",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "copy_byte_to_pointer_000845bc",
            "code": "\nundefined4 copy_byte_to_pointer_000845bc(undefined4 *destination,undefined *source,uint value)\n\n{\n  if (source == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *source = (char)value;\n    return 1;\n  }\n  *destination = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "copy_byte_to_pointer_000845bc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_relocation_entry_000846a4",
            "code": "\nundefined4 process_relocation_entry_000846a4(int entry_address)\n\n{\n  dword relocation_offset;\n  undefined4 result;\n  int process_result;\n  \n  relocation_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (entry_address != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structure_00083b14();\n    }\n    if (*(short *)(entry_address + 0xc) != 0) {\n      result = process_data_00083adc(relocation_offset,entry_address);\n      if ((*(code **)(entry_address + 0x2c) != (code *)0x0) &&\n         (process_result = (**(code **)(entry_address + 0x2c))(relocation_offset,*(undefined4 *)(entry_address + 0x1c)), process_result < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(entry_address + 0xc) << 0x18) < 0) {\n        update_relocation_entry_00083d9c(relocation_offset,*(undefined4 *)(entry_address + 0x10));\n      }\n      if (*(int *)(entry_address + 0x30) != 0) {\n        if (*(int *)(entry_address + 0x30) != entry_address + 0x40) {\n          update_relocation_entry_00083d9c(relocation_offset);\n        }\n        *(undefined4 *)(entry_address + 0x30) = 0;\n      }\n      if (*(int *)(entry_address + 0x44) != 0) {\n        update_relocation_entry_00083d9c(relocation_offset);\n        *(undefined4 *)(entry_address + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(entry_address + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_relocation_entry_000846a4",
                "param_1": "entry_address",
                "dVar1": "relocation_offset",
                "uVar2": "result",
                "iVar3": "process_result"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_and_check_memory_000846b4",
            "code": "\nvoid initializeAndCheckMemory_000846b4(int *resultPointer,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int initResult;\n  \n  DAT_200711bc = 0;\n  initResult = initialize_memory_000811b4(input1,input2,input2,0,input3);\n  if ((initResult == -1) && (DAT_200711bc != 0)) {\n    *resultPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_and_check_memory_000846b4",
                "param_1": "resultPointer",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "process_return_value_000846dc",
            "code": "\nvoid processReturnValue_000846dc(int *result,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = get_return_value_000811be(inputValue);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "process_return_value_000846dc",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_return_value_and_update_00084700",
            "code": "\nvoid checkReturnValueAndUpdate_00084700(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = get_return_value_000811c2(input1,input2,input3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_return_value_and_update_00084700",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "get_result_or_set_default_00084728",
            "code": "\nvoid getResultOrSetDefault_00084728(int *resultPtr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = get_default_return_value_000811c6(arg1,arg2,arg3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *resultPtr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "get_result_or_set_default_00084728",
                "param_1": "resultPtr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculateResult_00084750(int value1,int value2,int value3,int value4)\n\n{\n  int result;\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value1 = -1;\n    }\n    return value1;\n  }\n  result = calculate_and_store_subtraction_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint input_value,int input_parameter,undefined4 constant_1,undefined4 constant_2,int *output_array)\n\n{\n  uint result_integer;\n  longlong intermediate_value;\n  \n  intermediate_value = division_with_remainder_000847e0();\n  intermediate_value = intermediate_value * CONCAT44(constant_2,constant_1);\n  result_integer = (uint)intermediate_value;\n  *output_array = input_value - result_integer;\n  output_array[1] = (input_parameter - (int)((ulonglong)intermediate_value >> 0x20)) - (uint)(input_value < result_integer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value",
                "param_2": "input_parameter",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "param_5": "output_array",
                "uVar1": "result_integer",
                "lVar2": "intermediate_value"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_and_store_subtraction_000847ac",
            "code": "\nvoid calculateAndStoreSubtraction_000847ac(uint dividend,int subtrahend,undefined4 higherHalfProduct,undefined4 lowerHalfProduct,int *resultArray)\n\n{\n  uint quotient;\n  longlong product;\n  \n  product = calculate_quotient_00084a80();\n  product = product * CONCAT44(lowerHalfProduct,higherHalfProduct);\n  quotient = (uint)product;\n  *resultArray = dividend - quotient;\n  resultArray[1] = (subtrahend - (int)((ulonglong)product >> 0x20)) - (uint)(dividend < quotient);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_and_store_subtraction_000847ac",
                "param_1": "dividend",
                "param_2": "subtrahend",
                "param_3": "higherHalfProduct",
                "param_4": "lowerHalfProduct",
                "param_5": "resultArray",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "division_with_remainder_000847e0",
            "code": "\nundefined8 division_with_remainder_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong lVar1;\n  uint quotient_low;\n  uint quotient_high;\n  uint temp_1;\n  uint temp_2;\n  int LZCOUNT_result;\n  uint temp_3;\n  uint temp_4;\n  uint is_dividend_negative;\n  uint is_quotient_negative;\n  uint temp_5;\n  uint temp_6;\n  bool has_remainder;\n  \n  if ((int)dividend_high < 0) {\n    has_remainder = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)has_remainder;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    has_remainder = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)has_remainder;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      LZCOUNT_result = LZCOUNT(divisor);\n      if (LZCOUNT_result != 0) {\n        quotient_high = dividend >> (0x20U - LZCOUNT_result & 0xff);\n        divisor = divisor << LZCOUNT_result;\n        dividend = dividend << LZCOUNT_result;\n        dividend_high = dividend_high << LZCOUNT_result | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      temp_1 = dividend_high / quotient_low;\n      temp_3 = (divisor & 0xffff) * temp_1;\n      is_quotient_negative = dividend >> 0x10 | (dividend_high - quotient_low * temp_1) * 0x10000;\n      quotient_high = temp_1;\n      if (is_quotient_negative <= temp_3 && temp_3 - is_quotient_negative != 0) {\n        has_remainder = CARRY4(is_quotient_negative,divisor);\n        is_quotient_negative = is_quotient_negative + divisor;\n        quotient_high = temp_1 - 1;\n        if ((has_remainder == false) && (is_quotient_negative <= temp_3 && temp_3 - is_quotient_negative != 0)) {\n          quotient_high = temp_1 - 2;\n          is_quotient_negative = is_quotient_negative + divisor;\n        }\n      }\n      temp_4 = (is_quotient_negative - temp_3) / quotient_low;\n      temp_1 = (divisor & 0xffff) * temp_4;\n      temp_3 = dividend & 0xffff | ((is_quotient_negative - temp_3) - quotient_low * temp_4) * 0x10000;\n      quotient_low = temp_4;\n      if (temp_3 <= temp_1 && temp_1 - temp_3 != 0) {\n        quotient_low = temp_4 - 1;\n        if ((CARRY4(temp_3,divisor) == false) &&\n           (temp_3 + divisor <= temp_1 && temp_1 - (temp_3 + divisor) != 0)) {\n          quotient_low = temp_4 - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      LZCOUNT_result = LZCOUNT(divisor);\n      if (LZCOUNT_result == 0) {\n        dividend_high = dividend_high - divisor;\n        temp_1 = divisor >> 0x10;\n        temp_6 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << LZCOUNT_result;\n        quotient_high = dividend_high >> (0x20U - LZCOUNT_result & 0xff);\n        temp_1 = divisor >> 0x10;\n        is_quotient_negative = quotient_high / temp_1;\n        temp_6 = divisor & 0xffff;\n        temp_3 = temp_6 * is_quotient_negative;\n        temp_4 = dividend >> (0x20U - LZCOUNT_result & 0xff) | dividend_high << LZCOUNT_result;\n        quotient_high = temp_4 >> 0x10 | (quotient_high - temp_1 * is_quotient_negative) * 0x10000;\n        dividend = dividend << LZCOUNT_result;\n        quotient_low = is_quotient_negative;\n        if (quotient_high <= temp_3 && temp_3 - quotient_high != 0) {\n          has_remainder = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = is_quotient_negative - 1;\n          if ((has_remainder == false) && (quotient_high <= temp_3 && temp_3 - quotient_high != 0)) {\n            quotient_low = is_quotient_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp_2 = (quotient_high - temp_3) / temp_1;\n        is_quotient_negative = temp_6 * temp_2;\n        dividend_high = temp_4 & 0xffff | ((quotient_high - temp_3) - temp_1 * temp_2) * 0x10000;\n        quotient_high = temp_2;\n        if (dividend_high <= is_quotient_negative && is_quotient_negative - dividend_high != 0) {\n          has_remainder = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp_2 - 1;\n          if ((has_remainder == false) && (dividend_high <= is_quotient_negative && is_quotient_negative - dividend_high != 0)) {\n            quotient_high = temp_2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_quotient_negative;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / temp_1;\n      is_quotient_negative = temp_6 * quotient_low;\n      temp_4 = dividend >> 0x10 | (dividend_high - temp_1 * quotient_low) * 0x10000;\n      temp_3 = quotient_low;\n      if (temp_4 <= is_quotient_negative && is_quotient_negative - temp_4 != 0) {\n        has_remainder = CARRY4(temp_4,divisor);\n        temp_4 = temp_4 + divisor;\n        temp_3 = quotient_low - 1;\n        if ((has_remainder == false) && (temp_4 <= is_quotient_negative && is_quotient_negative - temp_4 != 0)) {\n          temp_3 = quotient_low - 2;\n          temp_4 = temp_4 + divisor;\n        }\n      }\n      temp_2 = (temp_4 - is_quotient_negative) / temp_1;\n      temp_6 = temp_6 * temp_2;\n      temp_1 = dividend & 0xffff | ((temp_4 - is_quotient_negative) - temp_1 * temp_2) * 0x10000;\n      quotient_low = temp_2;\n      if (temp_1 <= temp_6 && temp_6 - temp_1 != 0) {\n        quotient_low = temp_2 - 1;\n        if ((CARRY4(temp_1,divisor) == false) &&\n           (temp_1 + divisor <= temp_6 && temp_6 - (temp_1 + divisor) != 0)) {\n          quotient_low = temp_2 - 2;\n        }\n      }\n      quotient_low = quotient_low | temp_3 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    LZCOUNT_result = LZCOUNT(divisor_high);\n    if (LZCOUNT_result == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - LZCOUNT_result;\n      temp_1 = dividend_high >> (quotient_high & 0xff);\n      temp_6 = divisor >> (quotient_high & 0xff) | divisor_high << LZCOUNT_result;\n      is_quotient_negative = temp_6 >> 0x10;\n      quotient_low = temp_1 / is_quotient_negative;\n      temp_4 = (temp_6 & 0xffff) * quotient_low;\n      temp_3 = dividend_high << LZCOUNT_result | dividend >> (quotient_high & 0xff);\n      temp_1 = temp_3 >> 0x10 | (temp_1 - is_quotient_negative * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (temp_1 <= temp_4 && temp_4 - temp_1 != 0) {\n        has_remainder = CARRY4(temp_1,temp_6);\n        temp_1 = temp_1 + temp_6;\n        quotient_high = quotient_low - 1;\n        if ((has_remainder == false) && (temp_1 <= temp_4 && temp_4 - temp_1 != 0)) {\n          quotient_high = quotient_low - 2;\n          temp_1 = temp_1 + temp_6;\n        }\n      }\n      temp_2 = (temp_1 - temp_4) / is_quotient_negative;\n      temp_5 = (temp_6 & 0xffff) * temp_2;\n      temp_1 = temp_3 & 0xffff | ((temp_1 - temp_4) - is_quotient_negative * temp_2) * 0x10000;\n      quotient_low = temp_2;\n      if (temp_1 <= temp_5 && temp_5 - temp_1 != 0) {\n        has_remainder = CARRY4(temp_1,temp_6);\n        temp_1 = temp_1 + temp_6;\n        quotient_low = temp_2 - 1;\n        if ((has_remainder == false) && (temp_1 <= temp_5 && temp_5 - temp_1 != 0)) {\n          quotient_low = temp_2 - 2;\n          temp_1 = temp_1 + temp_6;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      lVar1 = (ulonglong)quotient_low * (ulonglong)(divisor << LZCOUNT_result);\n      temp_3 = (uint)((ulonglong)lVar1 >> 0x20);\n      quotient_high = 0;\n      if ((temp_1 - temp_5 < temp_3) ||\n         ((temp_1 - temp_5 == temp_3 && (dividend << LZCOUNT_result < (uint)lVar1)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    has_remainder = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)has_remainder;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "division_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "temp_1",
                "uVar5": "temp_2",
                "uVar7": "temp_3",
                "uVar8": "temp_4",
                "uVar9": "is_dividend_negative",
                "uVar10": "is_quotient_negative",
                "uVar11": "temp_5",
                "uVar12": "temp_6",
                "bVar13": "has_remainder",
                "iVar6": "LZCOUNT_result"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_quotient_00084a80",
            "code": "\nulonglong calculateQuotient_00084a80(uint dividend,uint divisor,uint temp_1,uint temp_2)\n\n{\n  longlong result;\n  uint quotient_1;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint remainder_1;\n  uint quotient_2;\n  uint temp_6;\n  uint remainder_2;\n  int shift;\n  bool carry;\n  \n  if (temp_2 == 0) {\n    if (temp_1 <= divisor) {\n      if (temp_1 == 0) {\n        temp_1 = 1 / 0;\n      }\n      shift = leadingZeroCount(temp_1);\n      if (shift == 0) {\n        divisor = divisor - temp_1;\n        temp_3 = temp_1 >> 0x10;\n        temp_5 = temp_1 & 0xffff;\n        quotient_1 = 1;\n      }\n      else {\n        temp_1 = temp_1 << shift;\n        temp_6 = divisor >> (0x20U - shift & 0xff);\n        temp_3 = temp_1 >> 0x10;\n        remainder_2 = temp_6 / temp_3;\n        temp_5 = temp_1 & 0xffff;\n        quotient_1 = temp_5 * remainder_2;\n        remainder_1 = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        temp_4 = remainder_1 >> 0x10 | (temp_6 - temp_3 * remainder_2) * 0x10000;\n        dividend = dividend << shift;\n        temp_6 = remainder_2;\n        if (temp_4 <= quotient_1 && quotient_1 - temp_4 != 0) {\n          carry = CARRY4(temp_4,temp_1);\n          temp_4 = temp_4 + temp_1;\n          temp_6 = remainder_2 - 1;\n          if ((carry == false) && (temp_4 <= quotient_1 && quotient_1 - temp_4 != 0)) {\n            temp_6 = remainder_2 - 2;\n            temp_4 = temp_4 + temp_1;\n          }\n        }\n        quotient_2 = (temp_4 - quotient_1) / temp_3;\n        remainder_2 = temp_5 * quotient_2;\n        divisor = remainder_1 & 0xffff | ((temp_4 - quotient_1) - temp_3 * quotient_2) * 0x10000;\n        quotient_1 = quotient_2;\n        if (divisor <= remainder_2 && remainder_2 - divisor != 0) {\n          carry = CARRY4(divisor,temp_1);\n          divisor = divisor + temp_1;\n          quotient_1 = quotient_2 - 1;\n          if ((carry == false) && (divisor <= remainder_2 && remainder_2 - divisor != 0)) {\n            quotient_1 = quotient_2 - 2;\n            divisor = divisor + temp_1;\n          }\n        }\n        divisor = divisor - remainder_2;\n        quotient_1 = quotient_1 | temp_6 << 0x10;\n      }\n      remainder_2 = divisor / temp_3;\n      temp_4 = temp_5 * remainder_2;\n      remainder_1 = dividend >> 0x10 | (divisor - temp_3 * remainder_2) * 0x10000;\n      temp_6 = remainder_2;\n      if (remainder_1 <= temp_4 && temp_4 - remainder_1 != 0) {\n        carry = CARRY4(remainder_1,temp_1);\n        remainder_1 = remainder_1 + temp_1;\n        temp_6 = remainder_2 - 1;\n        if ((carry == false) && (remainder_1 <= temp_4 && temp_4 - remainder_1 != 0)) {\n          temp_6 = remainder_2 - 2;\n          remainder_1 = remainder_1 + temp_1;\n        }\n      }\n      remainder_2 = (remainder_1 - temp_4) / temp_3;\n      temp_5 = temp_5 * remainder_2;\n      remainder_1 = dividend & 0xffff | ((remainder_1 - temp_4) - temp_3 * remainder_2) * 0x10000;\n      temp_3 = remainder_2;\n      if (remainder_1 <= temp_5 && temp_5 - remainder_1 != 0) {\n        temp_3 = remainder_2 - 1;\n        if ((CARRY4(remainder_1,temp_1) == false) &&\n           (remainder_1 + temp_1 <= temp_5 && temp_5 - (remainder_1 + temp_1) != 0)) {\n          temp_3 = remainder_2 - 2;\n        }\n      }\n      return CONCAT44(quotient_1,temp_3 | temp_6 << 0x10);\n    }\n    shift = leadingZeroCount(temp_1);\n    if (shift != 0) {\n      temp_6 = dividend >> (0x20U - shift & 0xff);\n      temp_1 = temp_1 << shift;\n      dividend = dividend << shift;\n      divisor = temp_6 | divisor << shift;\n    }\n    quotient_1 = temp_1 >> 0x10;\n    temp_3 = divisor / quotient_1;\n    temp_5 = (temp_1 & 0xffff) * temp_3;\n    remainder_2 = dividend >> 0x10 | (divisor - quotient_1 * temp_3) * 0x10000;\n    temp_6 = temp_3;\n    if (remainder_2 <= temp_5 && temp_5 - remainder_2 != 0) {\n      carry = CARRY4(remainder_2,temp_1);\n      remainder_2 = remainder_2 + temp_1;\n      temp_6 = temp_3 - 1;\n      if ((carry == false) && (remainder_2 <= temp_5 && temp_5 - remainder_2 != 0)) {\n        temp_6 = temp_3 - 2;\n        remainder_2 = remainder_2 + temp_1;\n      }\n    }\n    remainder_1 = (remainder_2 - temp_5) / quotient_1;\n    temp_3 = (temp_1 & 0xffff) * remainder_1;\n    temp_5 = dividend & 0xffff | ((remainder_2 - temp_5) - quotient_1 * remainder_1) * 0x10000;\n    quotient_1 = remainder_1;\n    if (temp_5 <= temp_3 && temp_3 - temp_5 != 0) {\n      quotient_1 = remainder_1 - 1;\n      if ((CARRY4(temp_5,temp_1) == false) &&\n         (temp_5 + temp_1 <= temp_3 && temp_3 - (temp_5 + temp_1) != 0)) {\n        quotient_1 = remainder_1 - 2;\n      }\n    }\n    quotient_1 = quotient_1 | temp_6 << 0x10;\n  }\n  else {\n    if (divisor < temp_2) {\n      return 0;\n    }\n    shift = leadingZeroCount(temp_2);\n    if (shift == 0) {\n      if ((temp_2 < divisor) || (temp_1 <= dividend)) {\n        return 1;\n      }\n      quotient_1 = 0;\n    }\n    else {\n      quotient_1 = 0x20 - shift;\n      temp_6 = divisor >> (quotient_1 & 0xff);\n      temp_3 = temp_2 << shift | temp_1 >> (quotient_1 & 0xff);\n      temp_5 = temp_3 >> 0x10;\n      temp_4 = temp_6 / temp_5;\n      remainder_2 = (temp_3 & 0xffff) * temp_4;\n      remainder_1 = dividend >> (quotient_1 & 0xff) | divisor << shift;\n      quotient_1 = remainder_1 >> 0x10 | (temp_6 - temp_5 * temp_4) * 0x10000;\n      temp_6 = temp_4;\n      if (quotient_1 <= remainder_2 && remainder_2 - quotient_1 != 0) {\n        carry = CARRY4(quotient_1,temp_3);\n        quotient_1 = quotient_1 + temp_3;\n        temp_6 = temp_4 - 1;\n        if ((carry == false) && (quotient_1 <= remainder_2 && remainder_2 - quotient_1 != 0)) {\n          temp_6 = temp_4 - 2;\n          quotient_1 = quotient_1 + temp_3;\n        }\n      }\n      temp_4 = (quotient_1 - remainder_2) / temp_5;\n      quotient_2 = (temp_3 & 0xffff) * temp_4;\n      temp_5 = remainder_1 & 0xffff | ((quotient_1 - remainder_2) - temp_5 * temp_4) * 0x10000;\n      quotient_1 = temp_4;\n      if (temp_5 <= quotient_2 && quotient_2 - temp_5 != 0) {\n        carry = CARRY4(temp_5,temp_3);\n        temp_5 = temp_5 + temp_3;\n        quotient_1 = temp_4 - 1;\n        if ((carry == false) && (temp_5 <= quotient_2 && quotient_2 - temp_5 != 0)) {\n          quotient_1 = temp_4 - 2;\n          temp_5 = temp_5 + temp_3;\n        }\n      }\n      quotient_1 = quotient_1 | temp_6 << 0x10;\n      result = (ulonglong)quotient_1 * (ulonglong)(temp_1 << shift);\n      temp_6 = (uint)((ulonglong)result >> 0x20);\n      if ((temp_5 - quotient_2 < temp_6) || ((temp_5 - quotient_2 == temp_6 && (dividend << shift < (uint)result)))\n         ) {\n        quotient_1 = quotient_1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient_1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_quotient_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "temp_1",
                "param_4": "temp_2",
                "lVar1": "result",
                "uVar2": "quotient_1",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "remainder_1",
                "uVar7": "quotient_2",
                "uVar8": "temp_6",
                "uVar9": "remainder_2",
                "iVar10": "shift",
                "bVar11": "carry",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 89885,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}