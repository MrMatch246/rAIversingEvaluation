{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "run_application_000816a8",
                "in_r0": "key_context",
                "init": "initialize",
                "initVariant": "initialize_variant",
                "delay": "delay_execution",
                "setup": "setup_application",
                "loop": "run_application_loop",
                "DAT_000816d0": "should_continue_running_application",
                "serialEventRun": "run_serial_event_handler"
            },
            "code": "int run_application_000816a8(void)\n{\n  EVP_PKEY_CTX *key_context;\n  _watchdogDefaultSetup();\n  initialize(key_context);\n  initialize_variant();\n  delay_execution(1);\n  setup_application();\n  do {\n    do {\n      run_application_000816a8_loop();\n    } while (DAT_000816d0() == 0);\n    run_serial_event_handler();\n  } while( true );\n}",
            "called": [
                "initVariant",
                "delay",
                "setup",
                "_watchdogDefaultSetup",
                "serialEventRun",
                "init",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "run_application_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_register_00081042",
                "param_1": "register_address",
                "param_2": "value_to_set",
                "param_3": "bit_mask",
                "param_4": "bit_shift",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void set_bits_in_register_00081042(uint32_t* register_address, uint32_t value_to_set, uint32_t bit_mask, uint32_t bit_shift) {\n    *register_address = (*register_address & ~bit_mask) | ((value_to_set & bit_mask) << bit_shift);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bits_in_register_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "__sprint_r_part_0": "__sfvwrite_r_part_0",
                "param_1": "stream",
                "param_2": "flags",
                "param_3": "buf",
                "piVar1": "next_buffer",
                "iVar2": "ret_val",
                "piVar3": "current_buffer",
                "uVar4": "wchar_count",
                "puVar5": "wchar_ptr",
                "uVar6": "bytes_left_in_buffer",
                "uVar7": "total_wchar_count",
                "FUN_00082ac0": "__sfvwrite_r_part_0_00082ac0"
            },
            "code": "int __sfvwrite_r_part_0_00082ac0(undefined4 stream, int flags, int **buf) {\n  int *next_buffer;\n  int ret_val;\n  int *current_buffer;\n  uint bytes_left_in_buffer;\n  undefined4 *wchar_ptr;\n  uint wchar_count;\n  uint total_wchar_count;\n  \n  if (-1 < *(int *)(flags + 100) << 0x12) {\n    ret_val = __sfvwrite_r(stream, flags, buf);\n    buf[2] = (int *)0x0;\n    buf[1] = (int *)0x0;\n    return ret_val;\n  }\n  current_buffer = buf[2];\n  next_buffer = *buf;\n  while (current_buffer != (int *)0x0) {\n    bytes_left_in_buffer = current_buffer[1];\n    wchar_count = bytes_left_in_buffer >> 2;\n    if (wchar_count != 0) {\n      wchar_ptr = (undefined4 *)(*current_buffer + -4);\n      total_wchar_count = 0;\n      do {\n        wchar_ptr = wchar_ptr + 1;\n        ret_val = _fputwc_r(stream, *wchar_ptr, flags);\n        total_wchar_count = total_wchar_count + 1;\n        if (ret_val == -1) goto LAB_00082b00;\n      } while (wchar_count != total_wchar_count);\n      current_buffer = buf[2];\n    }\n    current_buffer = (int *)((int)current_buffer - (bytes_left_in_buffer & 0xfffffffc));\n    buf[2] = current_buffer;\n    next_buffer = next_buffer + 2;\n  }\n  ret_val = 0;\nLAB_00082b00:\n  buf[2] = (int *)0x0;\n  buf[1] = (int *)0x0;\n  return ret_val;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "__sfvwrite_r_part_0_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_available_uart_and_call_respective_serial_event_functions_00080ce0",
                "iVar1": "available_bytes"
            },
            "code": "void check_available_uart_and_call_respective_serial_event_functions_00080ce0(void)\n{\n    int available_bytes;\n    available_bytes = UARTClass::available((UARTClass *)PTR_Serial_00080d14);\n    if (available_bytes != 0) {\n        serialEvent();\n    }\n    available_bytes = UARTClass::available((UARTClass *)PTR_Serial1_00080d18);\n    if (available_bytes != 0) {\n        serialEvent1();\n    }\n    available_bytes = UARTClass::available((UARTClass *)PTR_Serial2_00080d1c);\n    if (available_bytes != 0) {\n        serialEvent2();\n    }\n    available_bytes = UARTClass::available((UARTClass *)PTR_Serial3_00080d20);\n    if (available_bytes != 0) {\n        serialEvent3();\n    }\n    return;\n}",
            "called": [
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent3",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_available_uart_and_call_respective_serial_event_functions_00080ce0"
        },
        "FUN_00081164": {
            "renaming": {
                "FUN_00081164": "wait_forever_00081164"
            },
            "code": "void wait_forever_00081164(void)\n{\n  while (true) {\n    // do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081164",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00081164"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682::FUN_00081682": "initialize_string",
                "this": "self",
                "cstr": "input_string",
                "length": "string_length",
                "buffer": "buffer",
                "capacity": "capacity",
                "len": "length",
                "copy": "copy_string",
                "FUN_00081682": "initialize_string_00081682"
            },
            "code": "initialize_string_00081682 * __thiscall initialize_string_00081682(initialize_string_00081682 *this, char *input_string)\n{\n    size_t string_length;\n    this->buffer = (char *)0x0;\n    this->capacity = 0;\n    this->length = 0;\n    if (input_string != (char *)0x0) {\n        string_length = strlen(input_string);\n        copy_string(this, input_string, string_length);\n    }\n    return this;\n}\n",
            "called": [
                "strlen",
                "copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_string_00081682"
        },
        "FUN_00081166": {
            "renaming": {
                "FUN_00081166": "wait_forever_00081166"
            },
            "code": "void wait_forever_00081166(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081166",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_00081166"
        },
        "FUN_00081200": {
            "renaming": {
                "FUN_00081200": "do_nothing_00081200"
            },
            "code": "\nvoid do_nothing_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081200",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081200"
        },
        "FUN_00081202": {
            "renaming": {
                "FUN_00081202": "get_process_id_00081202"
            },
            "code": "__pid_t get_process_id_00081202(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081202",
            "calling": [],
            "imported": false,
            "current_name": "get_process_id_00081202"
        },
        "FUN_000815fe": {
            "renaming": {
                "_String": "string_deallocate_buffer",
                "this": "string_ptr",
                "__in_chrg": "is_charged",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "buffer": "buffer",
                "FUN_000815fe": "string_deallocate_buffer_000815fe"
            },
            "code": "void * string_deallocate_buffer_000815fe(String *string_ptr, int is_charged) {\n    free(string_ptr->buffer);\n    return string_ptr;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "string_deallocate_buffer_000815fe"
        },
        "FUN_00081720": {
            "renaming": {
                "FUN_00081720": "set_flag_00081720",
                "param_1": "memory_address"
            },
            "code": "void set_flag_00081720(int memory_address)\n{\n  *(int *)(memory_address + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081720",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_00081720"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "decode_float_00081d1c",
                "param_1": "float_bits",
                "uVar1": "exponent",
                "normalized_bits": "normalized_bits",
                "shift": "shift"
            },
            "code": "uint decode_float_00081d1c(uint float_bits) {\n  uint exponent = (float_bits << 1) >> 24;\n  if ((float_bits & 0x80000000) || (exponent < 0x7f)) {\n    return 0;\n  }\n  uint normalized_bits = (float_bits << 8) | 0x80000000;\n  if (exponent > 0x9d) {\n    return 0xffffffff;\n  }\n  uint shift = 0x9e - exponent;\n  if ((shift == 0x9e) && (float_bits & 0x7fffff)) {\n    return 0;\n  }\n  return normalized_bits >> shift;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "decode_float_00081d1c"
        },
        "FUN_00083988": {
            "renaming": {
                "FUN_00083988": "register_exit_proc_00083988",
                "__func": "func_ptr",
                "iVar1": "return_value"
            },
            "code": "int register_exit_proc_00083988(__func *func_ptr)\n{\n    int return_value;\n    return_value = __register_exitproc(0, func_ptr, 0, 0);\n    return return_value;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083988",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_00083988"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "factor_lower",
                "param_4": "factor_upper",
                "param_5": "result_array",
                "uVar1": "quotient",
                "lVar2": "product",
                "*param_5": "result_array[0]",
                "param_5[1]": "result_array[1]"
            },
            "code": "void calculate_difference_000847ac(uint dividend, int divisor, uint factor_lower, uint factor_upper, int *result_array) {\n  uint quotient = dividend / divisor;\n  long long product = quotient * ((long long) factor_upper << 32 | factor_lower);\n  uint product_lower = (uint) product;\n  uint product_upper = (uint) (product >> 32);\n  result_array[0] = dividend - product_lower;\n  result_array[1] = divisor - product_upper - (dividend < product_lower);\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_initialized_00080118",
                "param_1": "param1",
                "param_2": "object_ptr",
                "param_3": "param2",
                "param_4": "param3",
                "DAT_00080134": "is_initialized",
                "PTR_object_7862_0008013c": "initialized_object_ptr",
                "PTR__etext_00080140": "end_of_text_symbol_address",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_initialized_00080118(int param1, undefined* object_ptr, int param2, int param3)\n{\n    if (DAT_00080134 != 0) {\n        object_ptr = PTR_object_7862_0008013c;\n    }\n    if ((*(int*)PTR__etext_00080140 != 0) && (DAT_00080144 != (code*)0x0)) {\n        (*DAT_00080144)(PTR__etext_00080140, object_ptr, param2, DAT_00080144, param3);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_initialized_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081208": {
            "renaming": {
                "FUN_00081208": "get_tick_count_00081208",
                "PTR__dwTickCount_0008171c": "tick_count_ptr"
            },
            "code": "uint32_t get_tick_count_00081208(void)\n{\n  uint32_t* PTR__dwTickCount_0008171c = (uint32_t*)PTR__dwTickCount_0008171c;\n  uint32_t tick_count = *PTR__dwTickCount_0008171c;\n  return tick_count;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "poll",
                "setup",
                "sendTxBuffer",
                "loop"
            ],
            "imported": false,
            "current_name": "get_tick_count_00081208"
        },
        "FUN_00081728": {
            "renaming": {
                "FUN_00081728": "FUNC_00081728"
            },
            "code": "\nuint FUNC_00081728(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_0008186a:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081728",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081728"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_for_equal_00081c94",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool check_for_equal_00081c94(void)\n{\n  bool is_CY_zero = __aeabi_cfcmpeq();\n  bool is_ZR_zero = (bool)in_ZR;\n  return !is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_for_equal_00081c94"
        },
        "FUN_000810f4": {
            "renaming": {
                "FUN_000810f4": "process_callbacks_000810f4",
                "uVar1": "leading_zeroes_count",
                "uVar2": "bit_mask"
            },
            "code": "void process_callbacks_000810f4(void)\n{\n  uint32_t bit_mask;\n  uint8_t leading_zeroes_count;\n\n  bit_mask = *(uint32_t *)(DAT_callbacksPioC_00081124 + 0x4c);\n  while( true ) {\n    leading_zeroes_count = count_leading_zeroes(bit_mask);\n    if (leading_zeroes_count > 0x1f) break;\n    leading_zeroes_count = 0x1f - leading_zeroes_count;\n    if (*(code **)(PTR_callbacksPioC_00081128 + leading_zeroes_count * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioC_00081128 + leading_zeroes_count * 4))();\n    }\n    bit_mask = bit_mask & ~(1 << leading_zeroes_count);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810f4",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_000810f4"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structures_start",
                "puVar5": "data_1",
                "puVar6": "data_2",
                "data_1[0x3c]": "data_1[0]",
                "data_1[0x2e4]": "data_1[1]",
                "data_1[0x2e8]": "data_1[2]",
                "data_1[0x2e0]": "data_1[3]",
                "data_2[0x3c]": "data_2[0]",
                "data_2[0x2e4]": "data_2[1]",
                "data_2[0x2e8]": "data_2[2]",
                "data_2[0x2e0]": "data_2[3]",
                "data_3[0x3c]": "data_3[0]",
                "data_3[0x2e4]": "data_3[1]",
                "data_3[0x2e8]": "data_3[2]",
                "data_3[0x2e0]": "data_3[3]",
                "PTR_DAT_00083bf4": "data_1[4]",
                "PTR_DAT_00083bf8": "data_1[8], data_2[8], data_3[8]",
                "PTR_DAT_00083bfc": "data_1[9], data_2[9], data_3[9]",
                "PTR_DAT_00083c00": "data_1[10], data_2[10], data_3[10]",
                "PTR_DAT_00083c04": "data_1[11], data_2[11], data_3[11]"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n    if (*(int *)(param_1 + 0x38) == 0) {\n        undefined4 *data_1 = *(undefined4 **)(param_1 + 4);\n        undefined4 *data_2 = *(undefined4 **)(param_1 + 8);\n        undefined4 *data_3 = *(undefined4 **)(param_1 + 0xc);\n        data_1[0] = 0;\n        data_1[1] = 0;\n        data_1[2] = 0;\n        data_1[3] = 4;\n        PTR_DAT_00083bf4 = 0;\n        data_1[5] = 0;\n        data_1[6] = 0;\n        *(undefined2 *)((int)data_1 + 0xe) = 0;\n        data_1[7] = data_1;\n        data_1[8] = DAT_00083bf8;\n        data_1[9] = DAT_00083bfc;\n        data_1[10] = DAT_00083c00;\n        data_1[11] = DAT_00083c04;\n        memset(data_1 + 0x17, 0, 8);\n        *(undefined2 *)((int)data_2 + 0xe) = 1;\n        data_2[0] = 0;\n        data_2[1] = 0;\n        data_2[2] = 0;\n        data_2[3] = 9;\n        data_2[4] = 0;\n        data_2[5] = 0;\n        data_2[6] = 0;\n        memset(data_2 + 0x17, 0, 8);\n        data_2[7] = data_2;\n        data_2[8] = DAT_00083bf8;\n        data_2[9] = DAT_00083bfc;\n        data_2[10] = DAT_00083c00;\n        data_2[11] = DAT_00083c04;\n        *(undefined2 *)((int)data_3 + 0xe) = 2;\n        data_3[0] = 0;\n        data_3[1] = 0;\n        data_3[2] = 0;\n        data_3[3] = 18;\n        data_3[4] = 0;\n        data_3[5] = 0;\n        data_3[6] = 0;\n        memset(data_3 + 0x17, 0, 8);\n        data_3[7] = data_3;\n        data_3[8] = DAT_00083bf8;\n        data_3[9] = DAT_00083bfc;\n        data_3[10] = DAT_00083c00;\n        data_3[11] = DAT_00083c04;\n        *(undefined4 *)(param_1 + 0x38) = 1;\n    }\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fclose_r",
                "_fflush_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "allocate_memory_000842a4",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "flags",
                "iVar2": "file_status",
                "iVar3": "allocation_size",
                "uVar4": "flags_as_uint",
                "bVar5": "is_regular_file",
                "auStack_54": "NULL",
                "local_50": "N/A"
            },
            "code": "void allocate_memory_000842a4(int file_descriptor, int *memory_block)\n{\n    ushort flags = *(ushort *)(memory_block + 3);\n    uint flags_as_uint = (uint)flags;\n    if ((int)(flags_as_uint << 0x1e) < 0) {\n        *memory_block = (int)memory_block + 0x43;\n        memory_block[4] = (int)memory_block + 0x43;\n        memory_block[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)memory_block + 0xe)) {\n        int file_status = _fstat_r(file_descriptor, (int)*(short *)((int)memory_block + 0xe), NULL);\n        if (-1 < file_status) {\n            bool is_regular_file = (flags_as_uint & 0xf000) == 0x8000;\n            if (is_regular_file && memory_block[10] == PTR_DAT_00084380) {\n                flags |= 0x400;\n                *(ushort *)(memory_block + 3) = flags;\n                memory_block[0x13] = 0x400;\n            }\n            else {\n                flags |= 0x800;\n                *(ushort *)(memory_block + 3) = flags;\n            }\n            goto LAB_00084300;\n        }\n        flags = *(ushort *)(memory_block + 3);\n        flags_as_uint = (uint)flags;\n    }\n    *(ushort *)(memory_block + 3) = flags | 0x800;\n    int allocation_size = (flags_as_uint & 0x80) == 0 ? 0x400 : 0x40;\n    bool is_tty = false;\nLAB_00084300:\n    int *allocated_memory_block = _malloc_r(file_descriptor, allocation_size);\n    flags = *(ushort *)(memory_block + 3);\n    if (allocated_memory_block == 0) {\n        if (-1 < (int)((uint)flags << 0x16)) {\n            *(ushort *)(memory_block + 3) = flags | 2;\n            *memory_block = (int)memory_block + 0x43;\n            memory_block[4] = (int)memory_block + 0x43;\n            memory_block[5] = 1;\n        }\n    }\n    else {\n        *(undefined4 *)(file_descriptor + 0x3c) = PTR_DAT_0008437c;\n        *(ushort *)(memory_block + 3) = flags | 0x80;\n        *memory_block = allocated_memory_block;\n        memory_block[4] = allocated_memory_block;\n        memory_block[5] = allocation_size;\n        if (is_regular_file && _isatty_r(file_descriptor, (int)*(short *)((int)memory_block + 0xe))) {\n            *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_000842a4"
        },
        "FUN_00081dcc": {
            "renaming": {
                "execute_function_with_param": "execute_function_with_param",
                "param_1": "param_value",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uStack_c": "stack_param",
                "uStack_8": "stack_param_two",
                "uStack_4": "stack_param_three",
                "FUN_00081dcc": "execute_function_with_param_00081dcc"
            },
            "code": "void execute_function_with_param_00081dcc(int param_value, int second_param, int third_param, int fourth_param)\n{\n  int stack_param = second_param;\n  int stack_param_two = third_param;\n  int stack_param_three = fourth_param;\n  \n  call_function_with_params(*(int *)PTR__impure_ptr_00081df0,\n               *(int *)(*(int *)PTR__impure_ptr_00081df0 + 8),param_value,&stack_param);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081dcc",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "execute_function_with_param_00081dcc"
        },
        "FUN_0008143c": {
            "renaming": {
                "FUN_0008143c": "wait_for_tx_buffer_empty_0008143c",
                "this": "this",
                "_tx_buffer": "tx_buffer",
                "_iHead": "tx_buffer_head",
                "_iTail": "tx_buffer_tail",
                "_pUart": "uart",
                "UART_SR": "uart_sr"
            },
            "code": "void __thiscall wait_for_tx_buffer_empty_0008143c(UARTClass *this)\n{\n    while (this->tx_buffer_head != this->tx_buffer_tail) {}\n    while ((int)(this->uart->UART_SR << 0x16) > -1) {}\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008143c",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_tx_buffer_empty_0008143c"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "read_file_000846a4",
                "__stream": "__stream",
                "iVar1": "result",
                "_FUN_000846a4_r": "_read_file_r"
            },
            "code": "int read_file_000846a4(FILE *__stream)\n{\n  int result = _read_file_000846a4_r(*(undefined4 *)PTR__impure_ptr_000846b0,__stream);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "read_file_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "copy_memory_and_clear_bss_00080f24",
                "puVar1": "src",
                "puVar2": "dst",
                "puVar4": "p",
                "iVar3": "i",
                "DAT_00080f94": "exception_table"
            },
            "code": "void copy_memory_and_clear_bss_00080f24(){\n  undefined *src = PTR_banzai_00080f80;\n  undefined *dst = PTR__etext_00080f7c;\n  undefined4 *completed = (undefined4 *)PTR_completed_7857_00080f84;\n  if (PTR__etext_00080f7c != PTR_banzai_00080f80) {\n    for (int i = 0; src + i < PTR_completed_7857_00080f88; i += 4) {\n      *(undefined4 *)(src + i) = *(undefined4 *)(dst + i);\n    }\n  }\n  for (undefined4 *p = completed; p < PTR__ebss_00080f8c; p++) {\n    *p = 0;\n  }\n  undefined *DAT_00080f94 = PTR_DAT_00080f94_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_DAT_00080f94_00080f90 & 0x1fffff80;\n  if (DAT_00080f94 < (undefined *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while(true);\n}",
            "called": [
                "banzai",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "copy_memory_and_clear_bss_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_if_param2_is_subset_of_param1_00080e04",
                "param_1": "param1_address",
                "param_2": "param2_value",
                "uVar1": "param1_val"
            },
            "code": "uint check_if_param2_is_subset_of_param1_00080e04(int param_1, uint param_2) {\n  uint param1_val = *(uint *)(param_1 + 8) & param_2;\n  if (param1_val != 0) {\n    if ((param_2 & *(uint *)(param_1 + 0x18)) == 0) {\n      param1_val = 0;\n    }\n    else {\n      param1_val = 1;\n    }\n  }\n  return param1_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_if_param2_is_subset_of_param1_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "puVar1": "telegram_pointer",
                "puVar2": "data_pointer",
                "puVar3": "data8024_pointer",
                "this": "modbus_pointer",
                "uVar4": "current_time",
                "PTR_au16data_000805ac": "data_pointer",
                "PTR_telegram_000805a8": "telegram_pointer",
                "PTR_data8024_000805b0": "data8024_pointer",
                "PTR_master_000805b4": "modbus_pointer",
                "PTR_u32wait_000805b8": "DAT_u32wait_000805b8",
                "PTR_tiempopid1_000805bc": "DAT_tiempopid1_000805bc",
                "PTR_dutyalto1_000805c0": "DAT_dutyalto1_000805c0",
                "PTR_dutybajo1_000805c4": "DAT_dutybajo1_000805c4",
                "PTR_reloj_000805c8": "DAT_reloj_000805c8",
                "PTR_u8state_000805cc": "DAT_u8state_000805cc"
            },
            "code": "void initialize_system_000804a8(void)\n{\n  uint32_t current_time;\n  uint16_t *PTR_au16data_000805ac;\n  uint8_t *PTR_telegram_000805a8;\n  uint8_t *PTR_data8024_000805b0;\n  uint8_t *master_pointer;\n  Modbus *PTR_master_000805b4;\n  uint8_t *state_pointer;\n\n  pinMode(1, OUTPUT);\n  pinMode(6, INPUT);\n  pinMode(0, INPUT_PULLUP);\n  pinMode(1, OUTPUT);\n  digitalWrite(0, LOW);\n  digitalWrite(1, LOW);\n\n  PTR_telegram_000805a8 = DAT_telegram_000805a8;\n  PTR_au16data_000805ac = PTR_au16data_000805ac;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x0E) = 0x13;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x10) = 10;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x14) = PTR_au16data_000805ac + 0x26;\n  PTR_telegram_000805a8[1] = 3;\n  PTR_telegram_000805a8[0x19] = 3;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x1A) = 0x14;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x28) = 3;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x04) = 0x10;\n  *(uint16_t **)(PTR_telegram_000805a8 + 0x08) = PTR_au16data_000805ac;\n  PTR_telegram_000805a8[0x0D] = 0x10;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x1C) = 0xC;\n  PTR_telegram_000805a8[0x25] = 0x10;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x34) = 8;\n  PTR_data8024_000805b0 = DAT_data8024_000805b0;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x26) = 0x1C;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x2C) = PTR_au16data_000805ac + 0x38;\n  PTR_telegram_000805a8[0x30] = 2;\n  PTR_telegram_000805a8[0x31] = 2;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x38) = PTR_data8024_000805b0;\n  PTR_telegram_000805a8[0x3C] = 2;\n  *PTR_telegram_000805a8 = 1;\n  PTR_telegram_000805a8[0x0C] = 1;\n  PTR_telegram_000805a8[0x18] = 1;\n  PTR_telegram_000805a8[0x24] = 1;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x3E) = 1;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x40) = 1;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x02) = 0;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x20) = PTR_au16data_000805ac + 0x28;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x32) = 0;\n  PTR_telegram_000805a8[0x3D] = 5;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x44) = PTR_data8024_000805b0 + 2;\n\n  PTR_master_000805b4 = (Modbus *)PTR_master_000805b4;\n  Modbus::begin(PTR_master_000805b4, 0x4B00);\n  *(uint16_t *)(PTR_master_000805b4 + 0x56) = 2000;\n\n  current_time = millis();\n  *(uint32_t *)PTR_u32wait_000805b8 = current_time;\n  current_time = millis();\n  *(uint32_t *)PTR_tiempopid1_000805bc = current_time + 1000;\n  current_time = millis();\n  *(uint32_t *)PTR_dutyalto1_000805c0 = current_time + 1000;\n  current_time = millis();\n  *(uint32_t *)PTR_dutybajo1_000805c4 = current_time + 1000;\n  current_time = millis();\n  *(uint32_t *)PTR_reloj_000805c8 = current_time + 1000;\n\n  state_pointer = PTR_u8state_000805cc;\n  *state_pointer = 0;\n\n  startForkserver(0);\n}\n",
            "called": [
                "pinMode",
                "startForkserver",
                "digitalWrite",
                "begin",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_00084440": {
            "renaming": {
                "FUN_00084440": "read_data_from_file_and_update_total_bytes_read_00084440",
                "param_1": "file",
                "param_2": "data",
                "iVar1": "bytes_read"
            },
            "code": "void read_data_from_file_and_update_total_bytes_read_00084440(FILE* file, int* data){\n  int bytes_read = _read_r(file, (int)*(short *)(data + 0xe));\n  if (bytes_read >= 0) {\n    *(int *)(data + 0x50) += bytes_read;\n    return;\n  }\n  *(ushort *)(data + 0xc) &= 0xefff;\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084440",
            "calling": [],
            "imported": false,
            "current_name": "read_data_from_file_and_update_total_bytes_read_00084440"
        },
        "FUN_000802da": {
            "renaming": {
                "Modbus::FUN_000802da": "modbus_process_request",
                "this": "modbus",
                "telegram": "request_buffer",
                "uVar1": "byte_value",
                "in_r1": "function_code",
                "bVar3": "coil_value",
                "in_r2": "data",
                "puVar4": "data_ptr",
                "uVar5": "response_length",
                "uVar6": "coil_status",
                "uVar7": "data_length",
                "puVar8": "data_end_ptr",
                "local_1c": "data_length_high_byte",
                "local_1b": "function_code_high_byte",
                "local_1a": "register_value",
                "uVar2": "address_high_byte",
                "sendTxBuffer": "modbus_send_response",
                "FUN_000802da": "modbus_process_request_000802da"
            },
            "code": "int8_t __thiscall modbus_process_request_000802da(Modbus *modbus, modbus_t telegram) {\n  uint16_t function_code;\n  uint16_t address;\n  uint16_t quantity;\n  uint16_t value;\n  uint8_t response_length;\n  uint8_t *response_buffer;\n  uint8_t exception_code;\n  if (modbus->slave_id != 0) {\n    return -2;\n  }\n  if (modbus->state != 0) {\n    return -1;\n  }\n  function_code = telegram[0];\n  address = (telegram[1] << 8) | telegram[2];\n  quantity = (telegram[3] << 8) | telegram[4];\n  value = (telegram[3] << 8) | telegram[4];\n  response_buffer = modbus->response_buffer;\n  switch (function_code) {\n    case 0x01:\n    case 0x02:\n    case 0x03:\n    case 0x04:\n      response_length = quantity * 2;\n      exception_code = modbus_read_registers(modbus, address, quantity, response_buffer);\n      break;\n    case 0x05:\n      response_length = 4;\n      exception_code = modbus_write_single_coil(modbus, address, value, response_buffer);\n      break;\n    case 0x06:\n      response_length = 4;\n      exception_code = modbus_write_single_register(modbus, address, value, response_buffer);\n      break;\n    case 0x0F:\n      response_length = 4;\n      exception_code = modbus_write_multiple_coils(modbus, address, quantity, telegram + 6, response_buffer);\n      break;\n    case 0x10:\n      response_length = 4;\n      exception_code = modbus_write_multiple_registers(modbus, address, quantity, telegram + 6, response_buffer);\n      break;\n    default:\n      return -3;\n  }\n  if (exception_code != 0) {\n    return exception_code;\n  }\n  modbus_send_response(modbus, response_buffer, response_length);\n  modbus->state = 1;\n  return 0;\n}",
            "called": [
                "sendTxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "modbus_process_request_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_index_of_value_00080f9c",
                "param_1": "result",
                "param_2": "value",
                "param_3": "divisor",
                "param_4": "length",
                "local_58": "local_values",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "code": "uint32_t find_index_of_value_00080f9c(uint32_t *result, uint32_t value, int divisor, int length)\n{\n  uint32_t local_values[16];\n  local_values[0] = *(uint32_t *)PTR_DAT_0008102c;\n  local_values[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  local_values[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  local_values[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  local_values[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  local_values[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  local_values[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  local_values[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  local_values[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  local_values[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  local_values[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  local_values[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  local_values[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  local_values[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  local_values[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  local_values[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  uint32_t quotient = value / (uint32_t)(divisor * 2);\n  if (value == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  uint32_t index = 0;\n  while (index != 0x10) {\n    if ((uint32_t)(length * (int)(((uint64_t)value / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_values[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "find_index_of_value_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "puVar1": "pin_description",
                "puVar2": "pin_status",
                "iVar6": "pin_config",
                "iVar7": "pin_description_index",
                "uVar3": "pin_type",
                "bVar4": "current_pin_status",
                "bVar5": "current_pin_status"
            },
            "code": "void configure_pin_00081210(uint32_t pin_number, uint32_t mode)\\n{\\n  uint8_t* pin_status = PTR_g_pinStatus_00081310;\\n  uint8_t* pin_description = PTR_g_APinDescription_0008130c;\\n  if (pin_description[pin_number * 0x1c + 0xc] != \"\\0\") {\\n    if ((pin_status[pin_number] & 0xf) == 4) {\\n      adc_disable_channel(DAT_00081314,pin_description[pin_number * 0x1c + 0x19]);\\n    }\\n    uint8_t current_pin_status = pin_status[pin_number] & 0xf;\\n    if ((current_pin_status < 3) && (pin_status[pin_number] != 0)) {\\n      if (current_pin_status == 2) {\\n        if (mode == 0) {\\n          return;\\n        }\\n      }\\n      else if (current_pin_status == 1) {\\n        if (mode == 2) {\\n          return;\\n        }\\n      }\\n      else if (current_pin_status == 3) {\\n        if (mode == 1) {\\n          return;\\n        }\\n        goto configure_pin_00081210_1;\\n      }\\n    }\\n    if (mode != 1) {\\nconfigure_pin_00081210_1:\\n      if (mode == 0) {\\n        int pin_description_index = pin_number * 0x1c;\\n        pmc_enable_periph_clk(*(uint32_t *)(pin_description + pin_description_index + 8));\\n        PIO_Configure(*(uint32_t *)(pin_description + pin_description_index),3,*(uint32_t *)(pin_description + pin_description_index + 4),0);\\n        current_pin_status = pin_status[pin_number] & 0xf0 | 2;\\n      }\\n      else {\\n        if (mode != 2) {\\n          return;\\n        }\\n        int pin_description_index = pin_number * 0x1c;\\n        pmc_enable_periph_clk(*(uint32_t *)(pin_description + pin_description_index + 8));\\n        PIO_Configure(*(uint32_t *)(pin_description + pin_description_index),3,*(uint32_t *)(pin_description + pin_description_index + 4),1);\\n        current_pin_status = pin_status[pin_number] & 0xf0 | 1;\\n      }\\n      pin_status[pin_number] = current_pin_status;\\n      return;\\n    }\\n    int pin_description_index = pin_number * 0x1c;\\n    int pin_config = *(int *)(pin_description + pin_description_index);\\n    uint32_t pin_type = (pin_status[pin_number] >> 4) == 0 ? 4 : 5;\\n    PIO_Configure(pin_config, pin_type, *(uint32_t *)(pin_description + pin_description_index + 4), *(uint32_t *)(pin_description + pin_description_index + 0x10));\\n    pin_status[pin_number] = pin_status[pin_number] & 0xf0 | 3;\\n    if (*(int *)(pin_config + 0x18) == -1) {\\n      pmc_disable_periph_clk(*(uint32_t *)(pin_description + pin_description_index + 8));\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "setup",
                "digitalWrite",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_00081210"
        },
        "FUN_00083994": {
            "renaming": {
                "FUN_00083994": "decode_data_00083994",
                "param_1": "data_ptr",
                "param_2": "decode_info_ptr",
                "piVar1": "decode_info_data_buffer_ptr",
                "iVar2": "decode_result",
                "iVar5": "decode_info_remaining_data_size",
                "uVar3": "decode_info_flags",
                "uVar4": "decode_info_size_and_flags",
                "iVar7": "original_data_ptr",
                "pcVar6": "decode_function_ptr",
                "remaining_data_size": "remaining_data_size",
                "code": "code"
            },
            "code": "undefined4 decode_data_00083994(int *data_ptr, int *decode_info_ptr)\n{\n  int *code_ptr;\n  int remaining_data_size;\n  ushort decode_info_flags;\n  uint decode_info_size_and_flags;\n  int decode_info_remaining_data_size;\n  code *decode_function_ptr;\n  int decode_result;\n  int original_data_ptr;\n  int *decode_info_data_buffer_ptr;\n\n  decode_info_flags = *(ushort *)(decode_info_ptr + 3);\n  decode_info_size_and_flags = (uint)decode_info_flags << 0x1c;\n  if ((int)decode_info_size_and_flags < 0) {\n    decode_info_remaining_data_size = decode_info_ptr[4];\n    if (decode_info_remaining_data_size == 0) {\n      return 0;\n    }\n    original_data_ptr = *decode_info_ptr;\n    if ((decode_info_flags & 3) == 0) {\n      decode_info_data_buffer_ptr = decode_info_ptr + 5;\n    }\n    else {\n      decode_info_data_buffer_ptr = 0;\n    }\n    *decode_info_ptr = decode_info_remaining_data_size;\n    remaining_data_size = original_data_ptr - decode_info_remaining_data_size;\n    decode_info_ptr[2] = (int)decode_info_data_buffer_ptr;\n    do {\n      if (remaining_data_size < 1) {\n        return 0;\n      }\n      decode_result = (*(code *)decode_info_ptr[9])(data_ptr, decode_info_ptr[7], decode_info_remaining_data_size, remaining_data_size);\n      remaining_data_size = remaining_data_size - decode_result;\n      decode_info_remaining_data_size = decode_info_remaining_data_size + decode_result;\n    } while (0 < decode_result);\n    *(ushort *)(decode_info_ptr + 3) = decode_info_flags | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(decode_info_ptr + 3) = decode_info_flags | 0x800;\n  if ((decode_info_ptr[1] < 1) && (decode_info_ptr[0xf] < 1)) {\n    return 0;\n  }\n  decode_function_ptr = (code *)decode_info_ptr[10];\n  if (decode_function_ptr == (code *)0x0) {\n    return 0;\n  }\n  decode_info_size_and_flags = (uint)(decode_info_flags | 0x800);\n  original_data_ptr = *data_ptr;\n  *data_ptr = 0;\n  if ((decode_info_flags & 0x1000) == 0) {\n    decode_result = (*decode_function_ptr)(data_ptr, decode_info_ptr[7], decode_info_size_and_flags & 0x1000, 1);\n    if ((decode_result == -1) && (decode_info_remaining_data_size = *data_ptr, decode_info_remaining_data_size != 0)) {\n      if ((decode_info_remaining_data_size == 0x1d) || (decode_info_remaining_data_size == 0x16)) {\n        *data_ptr = original_data_ptr;\n        return 0;\n      }\n      *(ushort *)(decode_info_ptr + 3) = decode_info_flags | 0x40;\n      return 0xffffffff;\n    }\n    decode_info_flags = *(ushort *)(decode_info_ptr + 3);\n    decode_function_ptr = (code *)decode_info_ptr[10];\n  }\n  else {\n    decode_result = decode_info_ptr[0x14];\n  }\n  if (((int)(decode_info_size_and_flags << 0x1d) < 0) && (decode_result = decode_result - decode_info_ptr[1], decode_info_ptr[0xc] != 0)) {\n    decode_result = decode_result - decode_info_ptr[0xf];\n  }\n  decode_result = (*decode_function_ptr)(data_ptr, decode_info_ptr[7], decode_result, 0);\n  if (decode_result == -1) {\n    decode_info_remaining_data_size = *data_ptr;\n    if (decode_info_remaining_data_size != 0) {\n      if ((decode_info_remaining_data_size != 0x1d) && (decode_info_remaining_data_size != 0x16)) {\n        *(ushort *)(decode_info_ptr + 3) = decode_info_flags | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(decode_info_ptr + 3) = decode_info_flags & 0xf7ff;\n      *decode_info_ptr = decode_info_ptr[4];\n      decode_info_ptr[1] = 0;\n      goto LAB_00083a00;\n    }\n    decode_info_flags = *(ushort *)(decode_info_ptr + 3) & 0xf7ff;\n    decode_info_ptr[1] = 0;\n    *(ushort *)(decode_info_ptr + 3) = decode_info_flags;\n    *decode_info_ptr = decode_info_ptr[4];\n  }\n  else {\n    decode_info_flags = *(ushort *)(decode_info_ptr + 3) & 0xf7ff;\n    *decode_info_ptr = decode_info_ptr[4];\n    *(ushort *)(decode_info_ptr + 3) = decode_info_flags;\n    decode_info_ptr[1] = 0;\n  }\n  if ((int)((uint)decode_info_flags << 0x13) < 0) {\n    decode_info_ptr[0x14] = decode_result;\n  }\nLAB_00083a00:\n  code_ptr = (int *)decode_info_ptr[0xc];\n  *data_ptr = original_data_ptr;\n  if (code_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (code_ptr != decode_info_ptr + 0x10) {\n    _free_r(data_ptr);\n  }\n  decode_info_ptr[0xc] = 0;\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083994",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_data_00083994"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "transmit_data_00081454",
                "this": "self",
                "uc_data": "data",
                "pRVar1": "tx_buffer",
                "uVar2": "next_head"
            },
            "code": "size_t __thiscall transmit_data_00081454(UARTClass *this, uint8_t data)\n{\n  RingBuffer *tx_buffer = this->_tx_buffer;\n  if (((int)(this->_pUart->UART_SR << 0x1e) < 0) && (tx_buffer->_iTail == tx_buffer->_iHead)) {\n    this->_pUart->UART_THR = (uint)data;\n  }\n  else {\n    uint next_head = DAT_000814a4 & tx_buffer->_iHead + 1U;\n    if ((int)next_head < 0) {\n      next_head = (next_head - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (tx_buffer->_iTail == next_head);\n    tx_buffer->_aucBuffer[tx_buffer->_iHead] = data;\n    tx_buffer->_iHead = next_head;\n    this->_pUart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "transmit_data_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00084600": {
            "renaming": {
                "FUN_00084600": "close_file_00084600",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_00084600(int *error_code, int file_descriptor) {\n    undefined *error_ptr = PTR_errno_00084620;\n    *(undefined4 *)PTR_errno_00084620 = 0;\n    int close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084600",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_00084600"
        },
        "FUN_00081578": {
            "renaming": {
                "FUN_00081578": "initialize_uart_00081578",
                "dwBaudRate": "baud_rate"
            },
            "code": "void __thiscall initialize_uart_00081578(UARTClass *this, uint32_t baud_rate)\n{\n  init(this, baud_rate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081578",
            "calling": [],
            "imported": false,
            "current_name": "initialize_uart_00081578"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "__aeabi_frsub",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "read_data_00084728",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "*puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_data_00084728(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  int read_result = read(file_descriptor, buffer, buffer_size);\n  if (read_result == -1 && *error_code != 0) {\n    *error_code = *PTR_errno_0008474c;\n    return;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_data_00084728"
        },
        "FUN_0008116a": {
            "renaming": {
                "FUN_0008116a": "wait_forever_0008116a"
            },
            "code": "void wait_forever_0008116a(void)\n{\n  while(true);\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116a",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_0008116a"
        },
        "FUN_000813e0": {
            "renaming": {
                "FUN_000813e0": "is_initialized_000813e0"
            },
            "code": "bool __thiscall is_initialized_000813e0(UARTClass *this){\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e0",
            "calling": [],
            "imported": false,
            "current_name": "is_initialized_000813e0"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "encode_string_00083c40",
                "param_1": "encoding_type",
                "param_2": "string_length",
                "param_3": "output_buffer_ptr",
                "uVar1": "locale_mb_cur_max",
                "pbVar4": "buffer_end",
                "uVar3": "current_byte_value",
                "local_1c": "current_byte",
                "abStack_1b": "output_buffer",
                "iVar2": "write_result"
            },
            "code": "uint encode_string_00083c40(undefined4 encoding_type, uint string_length, byte **output_buffer_ptr)\n{\n  uint locale_mb_cur_max = __locale_mb_cur_max();\n  byte current_byte;\n  uint current_byte_value;\n  byte *output_buffer = *output_buffer_ptr;\n\n  if (-1 < (int)((uint)*(ushort *)(output_buffer_ptr + 3) << 0x12)) {\n    *(ushort *)(output_buffer_ptr + 3) = *(ushort *)(output_buffer_ptr + 3) | 0x2000;\n    output_buffer_ptr[0x19] = (byte *)((uint)output_buffer_ptr[0x19] | 0x2000);\n  }\n\n  if ((locale_mb_cur_max == 1) && (string_length - 1 < 0xff)) {\n    current_byte_value = string_length & 0xff;\n    current_byte = (byte)current_byte_value;\n  }\n  else {\n    uint conversion_result = _wcrtomb_r(encoding_type, &current_byte, string_length, output_buffer_ptr + 0x17);\n    if (conversion_result == 0xffffffff) {\n      *(ushort *)(output_buffer_ptr + 3) = *(ushort *)(output_buffer_ptr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (conversion_result == 0) {\n      return string_length;\n    }\n    current_byte_value = (uint)current_byte;\n  }\n\n  uint byte_index = 0;\n  byte *buffer_end = output_buffer_ptr[2] + -1;\n  while (true) {\n    if ((int)buffer_end < 0) {\n      if ((int)output_buffer_ptr[6] <= (int)buffer_end) {\n        **output_buffer_ptr = (byte)current_byte_value;\n        buffer_end = *output_buffer_ptr;\n        current_byte_value = (uint)*buffer_end;\n        if (current_byte_value != 10) {\n          goto END_OF_LINE;\n        }\n      }\n      else {\n        int write_result = __swbuf_r(encoding_type, current_byte_value, output_buffer_ptr);\n        if (write_result == -1) {\n          return 0xffffffff;\n        }\n      }\n    }\n    else {\n      **output_buffer_ptr = (byte)current_byte_value;\n      buffer_end = *output_buffer_ptr;\n    }\n    output_buffer_ptr = &buffer_end + 1;\n    if (locale_mb_cur_max <= byte_index + 1) {\n      return string_length;\n    }\n    current_byte_value = (uint)output_buffer_ptr[byte_index];\n    byte_index++;\n  }\n\n  END_OF_LINE:\n  output_buffer_ptr = &buffer_end + 1;\n  current_byte_value = (uint)output_buffer_ptr[byte_index];\n  byte_index++;\n  goto while_loop;\n}",
            "called": [
                "__locale_mb_cur_max",
                "__swbuf_r",
                "_wcrtomb_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "encode_string_00083c40"
        },
        "FUN_0008116e": {
            "renaming": {
                "FUN_0008116e": "reset_time_tick_if_false_0008116e",
                "iVar1": "is_false"
            },
            "code": "void reset_time_tick_if_false_0008116e(void)\n{\n  int is_false = __false();\n  if (is_false == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "__false",
                "tickReset",
                "TimeTick_Increment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116e",
            "calling": [],
            "imported": false,
            "current_name": "reset_time_tick_if_false_0008116e"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  uint32_t uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  int iVar16;\n  int iVar17;\n  int *piVar18;\n  undefined4 uVar19;\n  int iVar20;\n  \n  puVar7 = PTR_estado_0008089c;\n  puVar9 = PTR_segundos_00080898;\n  puVar8 = PTR_minutos_00080894;\n  puVar3 = PTR_mmt_0008087c;\n  puVar5 = PTR_ssres_00080878;\n  puVar4 = PTR_mmres_00080874;\n  puVar2 = PTR_duty1_00080834;\n  puVar1 = PTR_au16data_00080830;\n  if ((byte)*PTR_u8state_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_u8state_0008082c] * 2))();\n    return;\n  }\n  iVar17 = *(int *)PTR_minutos_00080894;\n  iVar16 = iVar17 - *(int *)PTR_mmres_00080874;\n  if (iVar16 < 0) {\n    iVar16 = iVar16 + 0x3c;\n  }\n  *(int *)PTR_mmt_0008087c = iVar16;\n  puVar6 = PTR_sst_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar16 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_sst_00080880 = iVar16;\n  if (iVar16 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar16 + 0x3c;\n  }\n  iVar16 = *(int *)puVar3;\n  iVar20 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar16;\n  *(short *)(puVar1 + 0x38) = (short)iVar20;\n  if ((iVar16 == 0) && (iVar20 == 0)) {\n    *(undefined4 *)PTR_terminar_ciclo_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_segundosp_00080888;\n  puVar3 = PTR_minutosp_00080884;\n  if (*(int *)PTR_minutosp_00080884 == iVar17) {\n    iVar16 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar16 = 0;\n    }\n    *(int *)PTR_segundosp_00080888 = iVar16;\n    if (iVar16 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar17;\n    puVar3 = PTR_espera_plancha_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_espera_plancha_0008088c;\n  puVar3 = PTR_tiempo_espera_00080860;\n  iVar16 = *(int *)puVar7;\n  if (iVar16 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar18 = (int *)PTR_espera_plancha_0008088c;\nLAB_000808f2:\n    *piVar18 = iVar16;\n  }\n  else {\n    if (iVar16 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_espera_plancha_0008088c < *(int *)PTR_tiempo_espera_00080860) {\n      uVar12 = millis();\n      puVar7 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar7 = uVar12 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_espera_plancha_0008088c = *(int *)puVar3 + 1;\n    piVar18 = (int *)PTR_mmres_00080a20;\n    puVar3 = PTR_ssres_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar12 = millis();\n      puVar3 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar3 = uVar12 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar16 = 0;\n        *(undefined4 *)PTR_ssres_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar12 = millis();\n      puVar8 = PTR_reloj_00080a54;\n      if (*(uint *)PTR_reloj_00080a54 < uVar12) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar8 = uVar12 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_ssres_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar12 = millis();\n  puVar8 = PTR_kia1_00080a60;\n  puVar3 = PTR_incre_00080a5c;\n  puVar5 = PTR_tiempopid1_00080a58;\n  puVar4 = PTR_YN_00080a24;\n  if (*(uint *)PTR_tiempopid1_00080a58 < uVar12) {\n    uVar13 = __floatsisf(*(undefined4 *)PTR_tempe_z1_00080a28);\n    uVar13 = __aeabi_fsub(uVar13,*(undefined4 *)PTR_temperatura1_00080a2c);\n    *(undefined4 *)PTR_e1_00080a30 = uVar13;\n    puVar9 = PTR_ep1_00080a34;\n    uVar19 = *(undefined4 *)PTR_ep1_00080a34;\n    uVar14 = __addsf3(uVar13,uVar19);\n    uVar14 = __aeabi_fmul(uVar14,*(undefined4 *)puVar8);\n    puVar7 = PTR_kip1_00080a64;\n    uVar14 = __addsf3(uVar14,*(undefined4 *)PTR_kip1_00080a64);\n    *(undefined4 *)puVar8 = uVar14;\n    uVar19 = __aeabi_fsub(uVar13,uVar19);\n    uVar19 = __aeabi_fmul(uVar19,*(undefined4 *)PTR_kda1_00080a38);\n    puVar8 = PTR_kdp1_00080a3c;\n    uVar19 = __aeabi_fsub(uVar19,*(undefined4 *)PTR_kdp1_00080a3c);\n    *(undefined4 *)PTR_kda1_00080a38 = uVar19;\n    uVar15 = __aeabi_fmul(uVar13,*(undefined4 *)PTR_kpa1_00080a40);\n    uVar15 = __addsf3(uVar15,uVar14);\n    __addsf3(uVar15,uVar19);\n    uVar15 = __aeabi_f2iz();\n    *(undefined4 *)PTR_pid1_00080a44 = uVar15;\n    uVar15 = __floatsisf();\n    *(undefined4 *)puVar9 = uVar13;\n    *(undefined4 *)puVar4 = uVar15;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar14;\n    *(undefined4 *)puVar8 = uVar19;\n    uVar12 = millis();\n    *(uint32_t *)puVar5 = uVar12 + *(int *)puVar2;\n  }\n  uVar13 = __floatsisf(*(undefined4 *)puVar2);\n  iVar16 = __aeabi_fcmpge(*(undefined4 *)puVar4,uVar13);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = uVar13;\n  }\n  iVar16 = __aeabi_fcmple(*(undefined4 *)puVar4,0);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = 0;\n  }\n  uVar10 = __fixunssfsi(*(undefined4 *)puVar4);\n  iVar16 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar16 + 1;\n  *(uint *)PTR_in1_00080a4c = *(ushort *)PTR_data8024_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "__aeabi_f2iz",
                "__aeabi_fcmple",
                "__fixunssfsi",
                "query",
                "__aeabi_fsub",
                "poll",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "millis",
                "__floatsisf",
                "__floatunsisf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "get_received_bytes_count_000813e4",
                "_rx_buffer": "receive_buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index"
            },
            "code": "int __thiscall get_received_bytes_count_000813e4(UARTClass *this)\n{\n    int head_index = this->_rx_buffer->_iHead;\n    int tail_index = this->_rx_buffer->_iTail;\n    int received_bytes_count = head_index - tail_index & 0x7f;\n    return received_bytes_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "get_received_bytes_count_000813e4"
        },
        "FUN_00081cbc": {
            "renaming": {
                "FUN_00081cbc": "is_end_of_string_00081cbc",
                "in_CY": "input_string"
            },
            "code": "bool is_end_of_string_00081cbc(char input_string) {\n  __aeabi_cfrcmple();\n  return input_string == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cbc",
            "calling": [],
            "imported": false,
            "current_name": "is_end_of_string_00081cbc"
        },
        "FUN_00080aac": {
            "renaming": {
                "FUN_00080aac": "handle_UART_interrupt_00080aac",
                "PTR_Serial_00080ab4": "serial_ptr"
            },
            "code": "void handle_UART_interrupt_00080aac(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial_00080ab4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aac",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080aac"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_charset_00084290",
                "PTR_lc_ctype_charset_00084294": "charset_ptr"
            },
            "code": "get_charset_00084290() {\n  return PTR_lc_ctype_charset_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "stat_error_handler_000846b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_info",
                "puVar1": "error_ptr",
                "iVar2": "stat_result"
            },
            "code": "void stat_error_handler_000846b4(int *error_code, int file_descriptor, stat *file_info) {\n    undefined *error_ptr;\n    int stat_result;\n    error_ptr = PTR_errno_000846d8;\n    *(undefined4 *)PTR_errno_000846d8 = 0;\n    stat_result = _fstat(file_descriptor, file_info);\n    if ((stat_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "stat_error_handler_000846b4"
        },
        "FUN_0008120e": {
            "renaming": {
                "FUN_0008120e": "do_nothing_0008120e"
            },
            "code": "\nvoid do_nothing_0008120e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120e"
        },
        "FUN_000811a8": {
            "renaming": {
                "FUN_000811a8": "calculate_difference_000811a8",
                "cOld_UNUSED": "old_string",
                "cNew_UNUSED": "new_string"
            },
            "code": "int calculate_difference_000811a8(char *old_string, char *new_string) {\n                     return -1;\n                   }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811a8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_000811a8"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUNC_000813a8::FUNC_000813a8": "initialize_queue",
                "this": "queue",
                "memset": "initialize_memory",
                "_iHead": "head",
                "_iTail": "tail",
                "FUN_000813a8": "initialize_queue_000813a8"
            },
            "code": "FUNC_000813a8* __thiscall initialize_queue_000813a8(FUNC_000813a8* queue){\n    memset(queue, 0, 0x80);\n    queue->head = 0;\n    queue->tail = 0;\n    return queue;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initialize_queue_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "FUNC_00083d9c"
            },
            "code": "\nvoid FUNC_00083d9c(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083f24;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083f24 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083f2c;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083f30);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083f28)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083e30;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083f24 + 4) =\n             *(uint *)(PTR___malloc_av__00083f24 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "_malloc_trim_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083d9c",
            "calling": [
                "__sfvwrite_r",
                "__swsetup_r",
                "_fclose_r",
                "_realloc_r",
                "free",
                "__sflush_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "FUNC_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_000818c8": {
            "renaming": {
                "FUN_000818c8": "calculate_product_000818c8",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "multiplier_abs",
                "uVar2": "multiplicand_abs",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "uVar5": "sign_bit_mask",
                "uVar7": "shifted_product",
                "iVar6": "product",
                "bVar8": "multiplicand_is_zero"
            },
            "code": "uint calculate_product_000818c8(uint multiplicand, uint multiplier)\n{\n  uint sign_bit_mask;\n  uint multiplicand_abs;\n  uint multiplier_abs;\n  int leading_zeroes_count;\n  uint shift_amount;\n  uint product;\n  bool multiplicand_is_zero;\n  bool multiplier_is_zero;\n  \n  multiplicand_is_zero = multiplicand == 0;\n  multiplier_is_zero = multiplier == 0;\n  \n  if (multiplicand_is_zero || multiplier_is_zero)\n  {\n    return multiplicand;\n  }\n  \n  sign_bit_mask = multiplier & 0x80000000;\n  if ((int)sign_bit_mask < 0)\n  {\n    multiplicand_abs = -multiplicand;\n    multiplier_abs = -multiplier - (uint)(multiplicand != 0);\n  }\n  else\n  {\n    multiplicand_abs = multiplicand;\n    multiplier_abs = multiplier;\n  }\n  \n  if (multiplier_abs == 0)\n  {\n    product = 0;\n  }\n  else\n  {\n    sign_bit_mask |= 0x5b000000;\n    if (multiplier_abs == 0)\n    {\n      sign_bit_mask += 0xf0000000;\n    }\n    leading_zeroes_count = count_leading_zeroes(multiplier_abs);\n    shift_amount = leading_zeroes_count - 8;\n    product = (sign_bit_mask - 0x800000) + shift_amount * -0x800000;\n    if (leading_zeroes_count < 8)\n    {\n      uint multiplicand_shifted = multiplicand_abs << (leading_zeroes_count + 0x18U & 0xff);\n      uint multiplicand_sign_extended = multiplicand_abs >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff);\n      uint shifted_product = multiplicand_shifted >> 0x1f;\n      product += (multiplier_abs >> (leading_zeroes_count & 0xff) << 1) | multiplicand_shifted;\n      product += (uint)(multiplicand_shifted | multiplicand_sign_extended) == 0 ? 0 : ~(shifted_product);\n    }\n    else\n    {\n      uint multiplicand_shifted = multiplicand_abs << (shift_amount & 0xff);\n      uint multiplicand_sign_extended = multiplicand_abs >> (0x20 - shift_amount & 0xff);\n      uint multiplicand_shifted_msb = multiplicand_shifted >> 0x1f;\n      uint shifted_product = multiplicand_shifted_msb + multiplier_abs >> (leading_zeroes_count - 8 & 0xff);\n      product += multiplicand_shifted + (multiplier_abs << (shift_amount & 0xff));\n      product += (multiplier_abs << (shift_amount & 0xff)) == 0x80000000 ? 0xfffffffe : 0;\n      product += (uint)(0x7fffffff < (multiplicand_abs << shift_amount & 0x80000000)) ? 1 : 0;\n    }\n  }\n  \n  return product;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818c8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_product_000818c8"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "double_num1",
                "uVar3": "double_num2",
                "uVar4": "combined_nums",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint check_overflow_00081bf4(uint num1, uint num2)\n{\n    bool is_negative;\n    uint double_num1 = num1 * 2;\n    uint double_num2 = num2 * 2;\n    \n    if (((int)double_num1 >> 0x18 == -1 || (int)double_num2 >> 0x18 == -1) &&\n        ((((int)double_num1 >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) ||\n         (((int)double_num2 >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    \n    uint combined_nums = double_num1 | num2 & 0x7fffffff;\n    bool is_zero = combined_nums == 0;\n    if (!is_zero) {\n        combined_nums = num1 ^ num2;\n        is_zero = combined_nums == 0;\n    }\n    is_negative = -1 < (int)combined_nums;\n    if (is_negative) {\n        num1 = double_num1 + num2 * -2;\n        is_zero = num1 == 0;\n    }\n    if (is_negative && double_num2 <= double_num1 && !is_zero) {\n        num1 = (int)num2 >> 0x1f;\n    }\n    if (!is_negative || double_num2 > double_num1) {\n        num1 = ~((int)num2 >> 0x1f);\n    }\n    if (!is_zero) {\n        num1 = num1 | 1;\n    }\n    return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "check_overflow_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "initialize_preinit_array_functions_00081d7c",
                "puVar1": "fini_start",
                "puVar2": "fini_end",
                "iVar3": "i",
                "ppcVar4": "function_pointer",
                "iVar5": "num_functions"
            },
            "code": "void initialize_preinit_array_functions_00081d7c(void)\n{\n  int num_functions = (int)PTR___preinit_array_end_00081dbc - (int)PTR___preinit_array_end_00081dc0 >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(PTR___preinit_array_end_00081dc0 + -4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n  }\n  undefined *fini_start = PTR___preinit_array_end_00081dc8;\n  undefined *fini_end = PTR__fini_00081dc4;\n  _init();\n  num_functions = (int)fini_end - (int)fini_start >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(fini_start + -4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_preinit_array_functions_00081d7c"
        },
        "FUN_000810bc": {
            "renaming": {
                "FUN_000810bc": "iterate_callbacks_on_bits_set_000810bc",
                "uVar1": "leading_zeroes",
                "uVar2": "bits_to_check",
                "PTR_callbacksPioB_000810f0": "PTR_callbacksPioB",
                "DAT_000810ec": "DAT",
                "count_leading_zeroes": "count_leading_zeroes",
                "callback": "callback",
                "bit_position": "bit_position"
            },
            "code": "void iterate_callbacks_on_bits_set_000810bc(void)\n{\n  uint bits_to_check = *(uint *)(DAT_000810ec_000810ec + 0x4c);\n  while( true ) {\n    uint leading_zeroes = count_leading_zeroes(bits_to_check);\n    if (leading_zeroes > 0x1f) break;\n    uint bit_position = 0x1f - leading_zeroes;\n    code* callback = *(code **)(PTR_callbacksPioB_000810f0_000810f0 + bit_position * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bits_to_check = bits_to_check & ~(1 << bit_position);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810bc",
            "calling": [],
            "imported": false,
            "current_name": "iterate_callbacks_on_bits_set_000810bc"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "compare_and_concat_00081c5c",
                "param_1": "f1",
                "param_2": "f2"
            },
            "code": "float32_t compare_and_concat_00081c5c(float32_t f1, float32_t f2) {\n  __cmpsf2();\n  return CONCAT44(f2,f1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple"
            ],
            "imported": false,
            "current_name": "compare_and_concat_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "countdown_timer_00081388",
                "iVar1": "remaining_time"
            },
            "code": "void countdown_timer_00081388(void)\n{\n  int remaining_time = *(int *)PTR_ticks_000813a0;\n  if (remaining_time != -1)\n  {\n      remaining_time--;\n      *(int *)PTR_ticks_000813a0 = remaining_time;\n      if (remaining_time == 0)\n      {\n          (*DAT_000813a4)();\n      }\n  }\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "countdown_timer_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr1",
                "puVar4": "source_ptr2",
                "uVar5": "current_uint1",
                "uVar6": "current_uint2",
                "puVar7": "destination_ptr1",
                "puVar8": "destination_ptr2",
                "pcVar9": "destination_ptr",
                "bVar10": "flag"
            },
            "code": "char* copy_string_00082994(char* destination, char* source)\n{\n    char current_char;\n    ushort current_short;\n    uint* source_ptr1;\n    uint* source_ptr2;\n    uint current_uint1;\n    uint current_uint2;\n    uint* destination_ptr1;\n    uint* destination_ptr2;\n    bool flag;\n\n    char* destination_ptr = destination;\n    if ((((uint)destination ^ (uint)source) & 3) != 0)\n    {\n        do\n        {\n            current_char = *source;\n            *destination_ptr = current_char;\n            source = source + 1;\n            destination_ptr = destination_ptr + 1;\n        } while (current_char != '\\0');\n        return destination;\n    }\n    destination_ptr2 = (uint*)destination;\n    if (((uint)source & 3) != 0)\n    {\n        source_ptr2 = (uint*)source;\n        if (((uint)source & 1) != 0)\n        {\n            source_ptr2 = (uint*)(source + 1);\n            current_char = *source;\n            destination_ptr2 = (uint*)(destination + 1);\n            *destination = current_char;\n            if (current_char == '\\0')\n            {\n                return destination;\n            }\n        }\n        source = (char*)source_ptr2;\n        if (((uint)source_ptr2 & 2) != 0)\n        {\n            source = (char*)((int)source_ptr2 + 2);\n            current_short = *(ushort*)source_ptr2;\n            flag = (current_short & 0xff) == 0;\n            if (flag)\n            {\n                *(char*)destination_ptr2 = (char)current_short;\n            }\n            else\n            {\n                *(ushort*)destination_ptr2 = current_short;\n                flag = (current_short & 0xff00) == 0;\n                destination_ptr2 = (uint*)((int)destination_ptr2 + 2);\n            }\n            if (flag)\n            {\n                return destination;\n            }\n        }\n    }\n    current_uint1 = *(uint*)source;\n    source_ptr2 = (uint*)((int)source + 4);\n    destination_ptr1 = destination_ptr2;\n    if (((uint)source & 4) != 0)\n    {\n        if ((current_uint1 + 0xfefefeff & ~current_uint1 & 0x80808080) != 0) goto LAB_000829f8;\n        destination_ptr1 = destination_ptr2 + 1;\n        *destination_ptr2 = current_uint1;\n        source_ptr2 = (uint*)((int)source + 8);\n        current_uint1 = *(uint*)((int)source + 4);\n    }\n    while (true)\n    {\n        source_ptr1 = source_ptr2 + 1;\n        current_uint2 = *source_ptr2;\n        destination_ptr2 = destination_ptr1;\n        if ((current_uint1 + 0xfefefeff & ~current_uint1 & 0x80808080) != 0) break;\n        destination_ptr2 = destination_ptr1 + 1;\n        *destination_ptr1 = current_uint1;\n        current_uint1 = current_uint2;\n        if ((current_uint2 + 0xfefefeff & ~current_uint2 & 0x80808080) != 0) break;\n        source_ptr2 = source_ptr2 + 2;\n        current_uint1 = *source_ptr1;\n        destination_ptr1 = destination_ptr1 + 2;\n        *destination_ptr2 = current_uint2;\n    }\nLAB_000829f8:\n    do\n    {\n        *(char*)destination_ptr2 = (char)current_uint1;\n        current_uint2 = current_uint1 & 0xff;\n        current_uint1 = current_uint1 >> 8 | current_uint1 << 0x18;\n        destination_ptr2 = (uint*)((int)destination_ptr2 + 1);\n    } while (current_uint2 != 0);\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_buffers_and_UARTs_00080c0c",
                "PTR_rx_buffer1_00080ca0": "rx_buffer1",
                "PTR_tx_buffer1_00080ca4": "tx_buffer1",
                "PTR_rx_buffer2_00080cd8": "rx_buffer2",
                "PTR_rx_buffer3_00080cac": "rx_buffer3",
                "PTR_rx_buffer4_00080cb4": "rx_buffer4",
                "PTR_tx_buffer2_00080cdc": "tx_buffer2",
                "PTR_tx_buffer3_00080cb8": "tx_buffer3",
                "PTR_tx_buffer4_00080cbc": "tx_buffer4",
                "PTR_Serial_00080cb0": "serial",
                "PTR_Serial1_00080cc4": "serial1",
                "PTR_Serial2_00080ccc": "serial2",
                "PTR_Serial3_00080cd4": "serial3",
                "DAT_00080ca8": "baud_rate",
                "DAT_00080cc0": "baud_rate1",
                "DAT_00080cc8": "baud_rate2",
                "DAT_00080cd0": "baud_rate3",
                "RingBuffer::RingBuffer": "initialize_buffer",
                "UARTClass::UARTClass": "initialize_UART",
                "USARTClass::USARTClass": "initialize_USART"
            },
            "code": "void initialize_buffers_and_UARTs_00080c0c(void)\n{\n  RingBuffer* PTR_rx_buffer1_00080ca0 = (RingBuffer*) PTR_PTR_rx_buffer1_00080ca0_00080ca0;\n  RingBuffer* PTR_tx_buffer1_00080ca4 = (RingBuffer*) PTR_PTR_tx_buffer1_00080ca4_00080ca4;\n  RingBuffer* PTR_rx_buffer2_00080cd8 = (RingBuffer*) PTR_PTR_rx_buffer2_00080cd8_00080cd8;\n  RingBuffer* PTR_rx_buffer3_00080cac = (RingBuffer*) PTR_PTR_rx_buffer3_00080cac_00080cac;\n  RingBuffer* PTR_rx_buffer4_00080cb4 = (RingBuffer*) PTR_PTR_rx_buffer4_00080cb4_00080cb4;\n  RingBuffer* PTR_tx_buffer2_00080cdc = (RingBuffer*) PTR_PTR_tx_buffer2_00080cdc_00080cdc;\n  RingBuffer* PTR_tx_buffer3_00080cb8 = (RingBuffer*) PTR_PTR_tx_buffer3_00080cb8_00080cb8;\n  RingBuffer* PTR_tx_buffer4_00080cbc = (RingBuffer*) PTR_PTR_tx_buffer4_00080cbc_00080cbc;\n  UARTClass* PTR_Serial_00080cb0 = (UARTClass*) PTR_Serial_00080cb0;\n  USARTClass* PTR_Serial1_00080cc4 = (USARTClass*) PTR_Serial1_00080cc4;\n  USARTClass* PTR_Serial2_00080ccc = (USARTClass*) PTR_Serial2_00080ccc;\n  USARTClass* PTR_Serial3_00080cd4 = (USARTClass*) PTR_Serial3_00080cd4;\n  RingBuffer::RingBuffer(PTR_rx_buffer1_00080ca0);\n  RingBuffer::RingBuffer(PTR_tx_buffer1_00080ca4);\n  UARTClass::UARTClass(PTR_Serial_00080cb0, DAT_00080ca8, UART_IRQn, 8, PTR_rx_buffer1_00080ca0, PTR_tx_buffer1_00080ca4);\n  RingBuffer::RingBuffer(PTR_rx_buffer2_00080cd8);\n  RingBuffer::RingBuffer(PTR_rx_buffer3_00080cac);\n  RingBuffer::RingBuffer(PTR_rx_buffer4_00080cb4);\n  RingBuffer::RingBuffer(PTR_tx_buffer2_00080cdc);\n  RingBuffer::RingBuffer(PTR_tx_buffer3_00080cb8);\n  RingBuffer::RingBuffer(PTR_tx_buffer4_00080cbc);\n  USARTClass::USARTClass(PTR_Serial1_00080cc4, DAT_00080cc0, USART0_IRQn, 0x11, PTR_rx_buffer2_00080cd8, PTR_tx_buffer2_00080cdc);\n  USARTClass::USARTClass(PTR_Serial2_00080ccc, DAT_00080cc8, USART1_IRQn, 0x12, PTR_rx_buffer3_00080cac, PTR_tx_buffer3_00080cb8);\n  USARTClass::USARTClass(PTR_Serial3_00080cd4, DAT_00080cd0, USART3_IRQn, 0x14, PTR_rx_buffer4_00080cb4, PTR_tx_buffer4_00080cbc);\n}\n",
            "called": [
                "USARTClass",
                "RingBuffer",
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_buffers_and_UARTs_00080c0c"
        },
        "FUN_00084418": {
            "renaming": {
                "FUN_00084418": "kill_process_if_running_00084418",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "error_ptr"
            },
            "code": "void kill_process_if_running_00084418(int *error_code, int process_id, int signal) {\n  undefined *error_ptr;\n  error_ptr = PTR_errno_0008443c;\n  *(undefined4 *)PTR_errno_0008443c = 0;\n  _kill(process_id, signal);\n  if ((process_id == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084418",
            "calling": [
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_00084418"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_param_values_00080d2e",
                "param_1": "device_id",
                "param_2": "param_type",
                "new_param_value": "param_value",
                "updated_value": "updated_param_value"
            },
            "code": "void update_param_values_00080d2e(int param_1, undefined4 param_2, uint new_param_value)\n{\n    uint updated_value;\n\n    *(uint *)(param_1 + 0x44) = new_param_value;\n    switch(param_2) {\n        case 0:\n        case 3:\n        case 4:\n        case 5:\n            return;\n        case 1:\n            updated_value = *(uint *)(param_1 + 0x70) & *(uint *)(param_1 + 0x70) & ~new_param_value;\n            break;\n        case 2:\n            updated_value = *(uint *)(param_1 + 0x70) | new_param_value;\n            break;\n        default:\n            goto switchD_00080d34_caseD_6;\n    }\n    *(uint *)(param_1 + 0x70) = updated_value;\nswitchD_00080d34_caseD_6:\n    *(uint *)(param_1 + 4) = new_param_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_param_values_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_2007001c": "data_ptr_1",
                "DAT_20070020": "data_value_1",
                "DAT_20070028": "data_ptr_2",
                "DAT_20070024": "data_value_2"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n  disable_IRQ_interrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n    // Do nothing, infinite loop\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "Reset_Handler",
                "tickReset"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000811f0": {
            "renaming": {
                "FUN_000811f0": "exit_with_status_000811f0",
                "status": "status",
                "PTR_s_Exiting_with_status__d__000811fc": "Exiting_with_status_message"
            },
            "code": "void exit_with_status_000811f0(int status)\n{\n  iprintf(\"Exiting with status %d\\n\", status);\n  while(true) {};\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811f0",
            "calling": [],
            "imported": false,
            "current_name": "exit_with_status_000811f0"
        },
        "FUN_00081704": {
            "renaming": {
                "FUN_00081704": "increment_tick_count_00081704",
                "PTR__dwTickCount_00081710": "tick_count_ptr"
            },
            "code": "void increment_tick_count_00081704(void)\n{\n    int* PTR__dwTickCount_00081710 = (int*)PTR__dwTickCount_00081710;\n    *PTR__dwTickCount_00081710 += 1;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081704",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_tick_count_00081704"
        },
        "FUN_00083c10": {
            "renaming": {
                "FUN_00083c10": "execute_global_destructors_before_main_00083c10",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_array"
            },
            "code": "void execute_global_destructors_before_main_00083c10(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_00083c3c - (int)PTR___do_global_dtors_aux_fini_array_entry_00083c38 >> 2;\n\n  if (num_destructors != 0) {\n    code **destructor_array = (code **)(PTR___do_global_dtors_aux_fini_array_entry_00083c38 + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor_array--;\n      (**destructor_array)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c10",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_before_main_00083c10"
        },
        "FUN_00081bec": {
            "renaming": {
                "FUN_00081bec": "check_overflow_00081bec",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "double_input1",
                "uVar3": "double_input2",
                "uVar4": "temp",
                "bVar1": "temp_is_negative",
                "bVar5": "temp_is_zero"
            },
            "code": "uint check_overflow_00081bec(uint input1, uint input2) {\n    uint double_input1 = input1 * 2;\n    uint double_input2 = input2 * 2;\n    bool input1_overflow = ((int)double_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0));\n    bool input2_overflow = ((int)double_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0));\n    if (input1_overflow || input2_overflow) {\n        return 1;\n    }\n    uint temp = double_input1 | input2 & 0x7fffffff;\n    bool temp_is_zero = temp == 0;\n    if (!temp_is_zero) {\n        temp = input1 ^ input2;\n        temp_is_zero = temp == 0;\n    }\n    bool temp_is_negative = -1 < (int)temp;\n    if (temp_is_negative) {\n        input1 = double_input1 + input2 * -2;\n        temp_is_zero = input1 == 0;\n    }\n    if (temp_is_negative && double_input2 <= double_input1 && !temp_is_zero) {\n        input1 = (int)input2 >> 0x1f;\n    }\n    if (!temp_is_negative || double_input2 > double_input1) {\n        input1 = ~((int)input2 >> 0x1f);\n    }\n    if (!temp_is_zero) {\n        input1 = input1 | 1;\n    }\n    return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bec",
            "calling": [],
            "imported": false,
            "current_name": "check_overflow_00081bec"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "write_to_file_000844c4",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "character_count",
                "uVar2": "character_count_uint",
                "puVar3": "buffer_pointer",
                "iVar4": "setup_result"
            },
            "code": "uint write_to_file_000844c4(int file_descriptor, uint character, undefined4 *buffer, undefined4 buffer_size)\n{\n  ushort character_count;\n  uint character_count_uint;\n  undefined *buffer_pointer;\n  int setup_result;\n  \n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n    __sinit();\n  }\n  character_count = *(ushort *)(buffer + 3);\n  character_count_uint = (uint)character_count;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(character_count_uint << 0x1c)) || (setup_result = buffer[4], setup_result == 0)) {\n    setup_result = __swsetup_r(file_descriptor, buffer, character_count, character_count_uint, buffer_size);\n    if (setup_result != 0) {\n      return 0xffffffff;\n    }\n    character_count = *(ushort *)(buffer + 3);\n    setup_result = buffer[4];\n    character_count_uint = (uint)character_count;\n  }\n  character = character & 0xff;\n  if ((int)(character_count_uint << 0x12) < 0) {\n    buffer_pointer = (undefined *)*buffer;\n    setup_result = (int)buffer_pointer - setup_result;\n    if (setup_result < (int)buffer[5]) {\nLAB_000844f6:\n      setup_result = setup_result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = character_count | 0x2000;\n    setup_result = (int)buffer_pointer - setup_result;\n    if (setup_result < (int)buffer[5]) goto LAB_000844f6;\n  }\n  setup_result = _fflush_r(file_descriptor, buffer);\n  if (setup_result != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*buffer;\n  setup_result = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)character;\n  if (((buffer[5] == setup_result) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (setup_result = _fflush_r(file_descriptor, buffer), setup_result != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_to_file_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "sign_bit",
                "iVar4": "mask",
                "uVar5": "hash_value",
                "count_leading_zeroes": "count_leading_zeroes",
                "DAT_00000004": "0",
                "DAT_00000008": "0x80000000",
                "DAT_0000000c": "0x4b000000",
                "DAT_00000010": "0x800000",
                "DAT_00000014": "-0x800000",
                "DAT_00000018": "0xfffffffe",
                "DAT_0000001c": "0x7fffffff",
                "DAT_00000020": "0x20",
                "DAT_00000024": "0x18",
                "DAT_00000028": "0x1f"
            },
            "code": "uint calculate_hash_0008189c(uint input) {\n  int leading_zeroes_count;\n  uint sign_bit;\n  uint shifted_input;\n  uint hash_value;\n  uint mask;\n  \n  sign_bit = input & DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_000000048;\n  if ((int)sign_bit < DAT_00000004) {\n    input = -input;\n  }\n  if (input == DAT_00000004) {\n    return DAT_00000004;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  mask = DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004c;\n  shifted_input = input << (leading_zeroes_count - 8);\n  mask = (sign_bit | mask) - DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_000000041DAT_00000004;\n  if (leading_zeroes_count > 7) {\n    hash_value = mask + (shifted_input << (leading_zeroes_count - 8)) + (DAT_00000004U >> (DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_000000042DAT_00000004 - (leading_zeroes_count - 8))) + (uint)(DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_000000041c < (DAT_00000004 << (leading_zeroes_count - 8)));\n    if ((DAT_00000004 << (leading_zeroes_count - 8)) == DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_000000048) {\n      hash_value = hash_value & DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_0000000418;\n    }\n    return hash_value;\n  }\n  shifted_input = input << (leading_zeroes_count + DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_0000000424U);\n  hash_value = mask + ((input >> (DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_000000042DAT_00000004 - (leading_zeroes_count + DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_0000000424U))) - ((int)shifted_input >> DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_0000000428));\n  if ((shifted_input & DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_000000041c) == DAT_00000004) {\n    hash_value = hash_value & ~(shifted_input >> DAT_DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_00000004DAT_0000000428);\n  }\n  return hash_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_hash_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "reverse_copy_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dst_byte",
                "puVar2": "dst_aligned",
                "puVar3": "aligned_dst",
                "puVar4": "src_byte",
                "puVar5": "src_aligned",
                "puVar6": "dst_byte",
                "uVar7": "remaining_bytes",
                "uVar8": "unaligned_bytes",
                "bVar9": "loop_condition"
            },
            "code": "void * reverse_copy_0008234c(void *destination, const void *source, size_t num_bytes) {\n    unsigned char *dst = (unsigned char *) destination;\n    const unsigned char *src = (const unsigned char *) source;\n    if ((((unsigned long)src | (unsigned long)dst) & 3) != 0) {\n        if (num_bytes < 8) {\n            while (num_bytes-- != 0) {\n                *dst++ = *src++;\n            }\n            return destination;\n        }\n        if ((((unsigned long)src & 3) != 0) && (((unsigned long)dst & 3) != 0)) {\n            *dst++ = *src++;\n            *dst++ = *src++;\n            *dst++ = *src++;\n            num_bytes -= 3;\n        }\n    }\n    unsigned int *aligned_dst = (unsigned int *) dst;\n    const unsigned int *aligned_src = (const unsigned int *) src;\n    while (num_bytes >= 16) {\n        *aligned_dst++ = *aligned_src++;\n        *aligned_dst++ = *aligned_src++;\n        *aligned_dst++ = *aligned_src++;\n        *aligned_dst++ = *aligned_src++;\n        num_bytes -= 16;\n    }\n    while (num_bytes-- != 0) {\n        *dst++ = *src++;\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_master_data_00080a68",
                "puVar1": "rx_string_ptr",
                "PTR_RxString_00080a94": "rx_string_ptr",
                "PTR_s__00080a98": "string_literal_ptr",
                "__aeabi_atexit": "register_exit_function",
                "DAT_00080aa0": "exit_function_ptr",
                "PTR___dso_handle_00080a9c": "dso_handle_ptr",
                "PTR_master_00080aa4": "master_ptr"
            },
            "code": "void initialize_master_data_00080a68(void)\n{\n  String* PTR_RxString_00080a94 = PTR_RxString_00080a94;\n  String::String(PTR_RxString_00080a94, PTR_s__00080a98);\n  __aeabi_atexit(PTR_RxString_00080a94, DAT_00080aa0, PTR___dso_handle_00080a9c);\n  uint8_t* PTR_master_00080aa4 = PTR_master_00080aa4;\n  PTR_master_00080aa4[4] = 0;\n  PTR_master_00080aa4[5] = 0;\n  PTR_master_00080aa4[6] = 6;\n  *(uint16_t*)(PTR_master_00080aa4 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_master_data_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "String::FUN_0008165c": "string_reserver",
                "this": "this_ptr",
                "cstr": "str",
                "length": "length",
                "uVar1": "reserve_success",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)",
                "FUN_0008165c": "string_reserver_0008165c"
            },
            "code": "String* __thiscall string_reserver_0008165c(String* this_ptr, char* str, uint length) {\\n    uchar reserve_success = reserve(this_ptr, length);\\n    if (reserve_success == \"\\0\") {\\n        invalidate(this_ptr);\\n    }\\n    else {\\n        this_ptr->len = length;\\n        strcpy(this_ptr->buffer, str);\\n    }\\n    return this_ptr;\\n}",
            "called": [
                "strcpy",
                "invalidate",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "string_reserver_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "concatenate_bytes_000815f8",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_000815f8(uint8_t high_byte, uint8_t low_byte)\n{\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "get_FC3"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "reverse_find_char": "reverse_find_char",
                "__s": "input_string",
                "__c": "target_char",
                "__n": "string_length",
                "puVar1": "last_word_start",
                "puVar2": "current_word_start",
                "uVar3": "target_word",
                "uVar4": "current_word",
                "pbVar5": "current_byte",
                "pbVar6": "last_byte",
                "uVar7": "byte_target",
                "bVar8": "found_target",
                "FUN_00084384": "reverse_find_char_00084384"
            },
            "code": "void * reverse_find_char_00084384(void *input_string, int target_char, size_t string_length) {\n  uint *current_word_start;\n  uint *last_word_start;\n  uint target_word;\n  uint current_word;\n  byte *current_byte;\n  byte *last_byte;\n  uint byte_target;\n  bool found_target;\n  target_word = target_char & 0xff;\n  if (((uint)input_string & 3) == 0) {\n    current_word_start = (uint *)input_string;\n    last_word_start = (uint *)string_length;\n    if ((uint *)0x3 < string_length) {\n      byte_target = target_word | target_word << 8 | target_word << 0x10 | target_word << 0x18;\n      do {\n        current_word = *current_word_start ^ byte_target;\n        last_word_start = (uint *)string_length;\n        current_word_start = (uint *)((int)current_word_start + 4);\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n        string_length = string_length + -4;\n      } while ((uint *)0x3 < string_length);\n    }\n    input_string = last_word_start;\n    last_byte = (byte *)((int)last_word_start + -1);\n    if (((uint *)last_word_start != (uint *)0x0) && (*(byte *)current_word_start != target_char)) {\n      current_byte = (byte *)0x0;\n      do {\n        input_string = (void *)((int)input_string + 1);\n        found_target = current_byte == last_byte;\n        current_byte = current_byte + 1;\n        if (found_target) goto LAB_000843dc;\n      } while (*input_string != target_char);\n    }\n  }\n  else if (string_length == 0) {\n    input_string = (uint *)0x0;\n  }\n  else {\n    if (*input_string != target_char) {\n      current_word_start = (uint *)((int)input_string + 1);\n      string_length = (size_t)(string_length - 1);\n      do {\n        input_string = current_word_start;\n        if (((uint)input_string & 3) == 0) goto LAB_000843b4;\n        if ((uint *)string_length == (uint *)0x0) goto LAB_000843dc;\n        current_word_start = (uint *)((int)input_string + 1);\n        string_length = (size_t)(string_length + -1);\n      } while (*input_string != target_char);\n    }\n  }\n  return input_string;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_find_char_00084384"
        },
        "FUN_00082ab0": {
            "renaming": {
                "FUN_00082ab0": "get_signal_00082ab0",
                "__pid": "pid",
                "__sig": "signal",
                "iVar1": "result"
            },
            "code": "int get_signal_00082ab0(__pid_t pid, int signal) {\n  int result = _get_signal_00082ab0_r(*(undefined4 *)PTR__impure_ptr_00082abc, pid, signal);\n  return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ab0",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_00082ab0"
        },
        "FUN_00081c6c": {
            "renaming": {
                "FUN_00081c6c": "is_not_null_char_00081c6c",
                "in_ZR": "character"
            },
            "code": "bool is_not_null_char_00081c6c(char character) {\n  __aeabi_cfcmpeq();\n  return character != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c6c",
            "calling": [],
            "imported": false,
            "current_name": "is_not_null_char_00081c6c"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flag_at_offset_00081034",
                "param_1": "offset",
                "param_2": "flag_value",
                "param_3": "flag_mask",
                "PTR_": "flag_ptr",
                "DAT_": "flag_value"
            },
            "code": "void update_flag_at_offset_00081034(int offset, uint32_t DAT_, uint32_t flag_mask){\n    uint32_t* PTR_ = (uint32_t *)(offset + 4);\n    *PTR_ = DAT_ | *PTR_ | ((flag_mask & 1) << 7);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_flag_at_offset_00081034"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "close_file_descriptor_000844bc",
                "param_1": "stream_pointer",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_000844bc(void *stream_pointer, int file_descriptor_offset) {\n    int file_descriptor = *(short *)(file_descriptor_offset + 0xe);\n    _close_r(stream_pointer, file_descriptor);\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_000844bc"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "check_and_register_exit_handler_00083974",
                "DAT_00083980": "should_register_exit_handler",
                "DAT_00083984": "exit_handler"
            },
            "code": "void check_and_register_exit_handler_00083974(void)\n{\n  if (DAT_00083980) {\n    atexit(DAT_00083984);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_and_register_exit_handler_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "seek_file_00084700",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_00084700(int *error_code, int file_descriptor, int offset, int whence) {\n  undefined *error_ptr = PTR_errno_00084724;\n  *(undefined4 *)PTR_errno_00084724 = 0;\n  int seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_00084700"
        },
        "FUN_00085874": {
            "renaming": {
                "FUN_00085874": "do_nothing_00085874"
            },
            "code": "\nvoid do_nothing_00085874(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085874",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085874"
        },
        "FUN_00080e5c": {
            "renaming": {
                "FUN_00080e5c": "check_bit_00080e5c",
                "param_1": "bit_position",
                "uVar1": "mask",
                "uVar2": "data",
                "DAT_00080e98": "data_pointer"
            },
            "code": "uint8 check_bit_00080e5c(uint8 bit_position)\n{\n  uint32_t mask;\n  uint32_t* data_ptr;\n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      mask = 1 << (bit_position & 0xff);\n      data_ptr = (uint32_t*)(DAT_00080e98 + 0x18);\n      if ((*data_ptr & mask) == mask) {\n        *(uint32_t*)(DAT_00080e98 + 0x14) = mask;\n      }\n    }\n    else {\n      mask = 1 << (bit_position - 0x20 & 0xff);\n      data_ptr = (uint32_t*)(DAT_00080e98 + 0x108);\n      if ((*data_ptr & mask) == mask) {\n        *(uint32_t*)(DAT_00080e98 + 0x104) = mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e5c",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_bit_00080e5c"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_if_float_not_greater_than_or_equal_to_zero_00081ca8",
                "in_CY": "is_nan",
                "in_ZR": "is_zero"
            },
            "code": "bool check_if_float_not_greater_than_or_equal_to_zero_00081ca8(float num)\n{\n  bool is_nan = __aeabi_cfrcmple(num, 0.0f);\n  bool is_zero = num == 0.0f;\n  return !is_nan || is_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_if_float_not_greater_than_or_equal_to_zero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "set_pin_value_00081318",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "puVar1": "pin_description_ptr",
                "puVar2": "pin_status_ptr",
                "iVar3": "output_data_status",
                "uVar4": "pin_description_port",
                "uVar5": "pin_description_addr",
                "uVar6": "new_pin_status"
            },
            "code": "void set_pin_value_00081318(uint32_t pin_number, uint32_t pin_value)\n{\n  uint32_t* pin_status_ptr = PTR_g_pinStatus_00081384;\n  uint32_t* pin_description_ptr = PTR_g_APinDescription_00081380;\n  uint32_t pin_description_offset = pin_number * 0x1c + 0xc;\n  \n  if (pin_description_ptr[pin_description_offset] != \"\\0\") {\n    uint32_t current_pin_status = pin_status_ptr[pin_number];\n    uint32_t new_pin_status = current_pin_status & 0xf | (byte)(pin_value << 4);\n    \n    if ((current_pin_status & 0xf) == 5) {\n      pinMode(pin_number, OUTPUT);\n    }\n    \n    pin_status_ptr[pin_number] = new_pin_status;\n    \n    uint32_t pin_description_addr = (uint32_t)(pin_description_ptr + pin_number * 0x1c);\n    uint32_t pin_description_port = *(uint32_t *)(pin_description_addr);\n    uint32_t pin_description_pin = *(uint32_t *)(pin_description_addr + 4);\n    \n    int output_data_status = PIO_GetOutputDataStatus(pin_description_port, pin_description_pin);\n    \n    if (output_data_status == 0) {\n      PIO_PullUp(pin_description_port, pin_description_pin, pin_value);\n      return;\n    }\n    \n    PIO_SetOutput(pin_description_port, pin_description_pin, pin_value, 0, 1, pin_value);\n  }\n  return;\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "setup",
                "begin",
                "getRxBuffer",
                "init",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "set_pin_value_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_current_tick_count_00081714",
                "PTR__dwTickCount_0008171c": "PTR_current_tick_count"
            },
            "code": "get_current_tick_count_00081714() {\n  return *(undefined4 *)PTR__dwTickCount_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_count_00081714"
        },
        "FUN_00081c80": {
            "renaming": {
                "FUN_00081c80": "is_end_of_string_00081c80",
                "in_CY": "current_character"
            },
            "code": "bool is_end_of_string_00081c80(void)\n{\n  char current_character;\n  __aeabi_cfcmpeq();\n  return current_character == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c80",
            "calling": [],
            "imported": false,
            "current_name": "is_end_of_string_00081c80"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "seek_and_update_0008449c",
                "param_1": "file_descriptor",
                "param_2": "header_info",
                "iVar1": "seek_result",
                "uVar2": "flag"
            },
            "code": "void seek_and_update_0008449c(int file_descriptor, int* header_info)\n{\n  int seek_result;\n  ushort flag;\n  seek_result = _lseek_r(file_descriptor, (int)*(short *)(header_info + 0xe));\n  if (seek_result == -1) {\n    flag = *(ushort *)(header_info + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(header_info + 0xc) | 0x1000;\n  }\n  if (seek_result != -1) {\n    *(int *)(header_info + 0x50) = seek_result;\n  }\n  *(ushort *)(header_info + 0xc) = flag;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "divide_multiply_subtract_0008477c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_array",
                "uVar1": "subtracted_value_1",
                "lVar2": "quotient",
                "CONCAT44": "bitwise_concatenation"
            },
            "code": "void divide_multiply_subtract_0008477c(uint dividend, int divisor, uint multiplier_low, uint multiplier_high, int *result_array)\n{\n  long long quotient = (long long)dividend / (long long)divisor;\n  long long product = quotient * ((long long)multiplier_high << 32 | multiplier_low);\n  uint subtracted_value_1 = (uint)dividend - (uint)product;\n  uint subtracted_value_2 = (uint)((ulonglong)product >> 32) - (uint)(dividend < subtracted_value_1);\n  result_array[0] = (int)subtracted_value_1;\n  result_array[1] = (int)subtracted_value_2 - divisor;\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "divide_multiply_subtract_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "modbus_receive_000801b0",
                "this": "modbus_instance",
                "u8txenpin": "transmission_enable_pin",
                "digitalWrite": "digital_write",
                "u8BufferSize": "buffer_size",
                "u8serno": "serial_port_number",
                "port": "serial_port",
                "code": "function_pointer",
                "u8Buffer": "buffer",
                "u16InCnt": "input_count",
                "u16errCnt": "error_count",
                "bVar1": "buffer_overflow",
                "uVar2": "received_byte",
                "uVar3": "buffer_index",
                "iVar4": "read_result",
                "bVar5": "buffer_size"
            },
            "code": "int8_t __thiscall modbus_receive_000801b0(Modbus *modbus_instance) {\n  bool buffer_overflow = false;\n  uchar received_byte;\n  uint8_t buffer_index;\n  int read_result;\n  byte buffer_size;\n  \n  if (modbus_instance->transmission_enable_pin > 1) {\n    digitalWrite((uint)modbus_instance->transmission_enable_pin,LOW);\n  }\n  modbus_instance->buffer_size = 0;\n  if (modbus_instance->serial_port_number < 4) {\n    do {\n      read_result = (**(code **)(*(int *)modbus_instance->port + 8))();\n      if (read_result != 0) {\n        buffer_size = modbus_instance->buffer_size;\n        received_byte = (**(code **)(*(int *)modbus_instance->port + 0xc))();\n        modbus_instance->buffer[buffer_size] = received_byte;\n        buffer_index = buffer_size + 1;\n        modbus_instance->buffer_size = buffer_index;\n        if (buffer_index > 63) {\n          buffer_overflow = true;\n        }\n      }\n    } while (read_result != 0);\n  }\n  modbus_instance->input_count = modbus_instance->input_count + 1;\n  if (buffer_overflow) {\n    modbus_instance->error_count = modbus_instance->error_count + 1;\n    return 253;\n  }\n  else {\n    return modbus_instance->buffer_size;\n  }\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "modbus_receive_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "ring_buffer_add_item_000813c2",
                "this": "buffer",
                "c": "item",
                "_iHead": "head_index",
                "uVar1": "next_index",
                "_iTail": "tail_index",
                "_aucBuffer": "buffer_array"
            },
            "code": "void __thiscall ring_buffer_add_item_000813c2(RingBuffer *buffer, uint8_t item) {\n    uint next_index = (buffer->_iHead + 1U) & 0x7f;\n    if (next_index != buffer->_iTail) {\n        buffer->_aucBuffer[buffer->_iHead] = item;\n        buffer->_iHead = next_index;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "ring_buffer_add_item_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4::FUN_000814e4": "uart_initialize",
                "this": "instance",
                "pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_00081504": "default_baud_rate",
                "_pUart": "uart",
                "_dwIrq": "irq",
                "_rx_buffer": "rx_buffer",
                "_dwId": "id",
                "_tx_buffer": "tx_buffer",
                "field_0x4": "field_1",
                "field_0x8": "field_2",
                "FUN_000814e4": "uart_initialize_000814e4"
            },
            "code": "uart_initialize_000814e4 * __thiscall uart_initialize_000814e4(uart_initialize_000814e4 *this, Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n  uint32_t PTR_PTR_write_1_00081504 = 1000;\n  this->_pUart = uart;\n  *(uint32_t *)&this->field_0x4 = 0;\n  *(uint32_t *)&this->field_0x8 = PTR_PTR_write_1_00081504;\n  *(RingBuffer **)&this->_rx_buffer = rx_buffer;\n  *(RingBuffer **)&this->_tx_buffer = tx_buffer;\n  this->_dwIrq = irq;\n  this->_dwId = id;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "uart_initialize_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "set_values_based_on_flags_00080d54",
                "param_1": "values",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_flag_set"
            },
            "code": "void set_values_based_on_flags_00080d54(uint32_t *values, uint32_t value, uint32_t flags) {\n    bool is_flag_set;\n    \n    is_flag_set = (int)(flags << 0x1f) < 0;\n    values[17] = value;\n    if (is_flag_set) {\n        values[25] = value;\n    }\n    if (!is_flag_set) {\n        values[24] = value;\n    }\n    is_flag_set = (flags & 0xA) != 0;\n    if (is_flag_set) {\n        values[8] = value;\n    }\n    if (!is_flag_set) {\n        values[9] = value;\n    }\n    if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n        values[32] = value;\n    }\n    values[5] = value;\n    *values = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_values_based_on_flags_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_crc_0008021c",
                "this": "modbus_object",
                "u8length": "message_length",
                "pMVar1": "current_byte",
                "uVar2": "crc",
                "cVar3": "bit",
                "uVar4": "lsb"
            },
            "code": "uint16_t __thiscall calculate_crc_0008021c(Modbus *this,uint8_t message_length)\n{\n  Modbus *current_byte;\n  uint crc = 0xffff;\n  \n  for (current_byte = this; ((int)current_byte - (int)this & 0xffU) < (uint)message_length;\n      current_byte = (Modbus *)((int)&current_byte->port + 1)) {\n    crc = crc ^ current_byte->message[0];\n    char bit = 8;\n    do {\n      uint lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bit = bit - 1;\n    } while (bit != \"\\0\");\n  }\n  return (ushort)(crc << 8) | (ushort)(crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculate_crc_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "__sbprintf",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "__sinit",
                "__aeabi_uldivmod",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00083b08": {
            "renaming": {
                "FUN_00083b08": "walk_file_tree_00083b08",
                "param_1": "fn",
                "DAT_00083b10": "arg"
            },
            "code": "void walk_file_tree_00083b08(void* fn, void* DAT_00083b10) {\n  _fwalk(fn, DAT_00083b10);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b08",
            "calling": [],
            "imported": false,
            "current_name": "walk_file_tree_00083b08"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "call_r_function_with_ptr_00081e04",
                "__ptr": "ptr",
                "_FUN_00081e04_r": "_r_function_call",
                "PTR__impure_ptr_00081e10": "PTR__impure_ptr_00081e10"
            },
            "code": "void call_r_function_with_ptr_00081e04(void *__ptr)\n{\n  _r_function_call(*(undefined4 *)PTR__impure_ptr_00081e10,__ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "~String",
                "invalidate"
            ],
            "imported": false,
            "current_name": "call_r_function_with_ptr_00081e04"
        },
        "FUN_000814a8": {
            "renaming": {
                "FUN_000814a8": "uart_class_receive_000814a8",
                "_rx_buffer": "receive_buffer",
                "_iHead": "receive_buffer_head_index",
                "_iTail": "receive_buffer_tail_index",
                "_dwIrq": "irq_pin_number",
                "_dwId": "peripheral_id",
                "DAT_000814e0": "receive_interrupt_mask"
            },
            "code": "void __thiscall uart_class_receive_000814a8(UARTClass *this)\n{\n  this->receive_buffer_head_index = this->receive_buffer_tail_index;\n  (**(code **)(*(int *)this + 0x14))();\n  *(int *)(DAT_000814e0 + (((uint)(int)this->irq_pin_number >> 5) + 0x20) * 4) =\n       1 << (uint)(byte)(this->irq_pin_number & 0x1f);\n  pmc_disable_periph_clk(this->peripheral_id);\n  return;\n}\n",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814a8",
            "calling": [],
            "imported": false,
            "current_name": "uart_class_receive_000814a8"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "process_callbacks_00081084",
                "uVar1": "callback_index",
                "uVar2": "bit_mask"
            },
            "code": "void process_callbacks_00081084(void)\n{\n  uint32_t bit_mask;\n  uint32_t callback_index;\n\n  bit_mask = *(uint32_t *)(DAT_000810b4 + 0x4c);\n  while( true ) {\n    callback_index = count_leading_zeroes(bit_mask);\n    if (callback_index > 0x1f) break;\n    callback_index = 0x1f - callback_index;\n    if (*(code **)(PTR_callbacksPioA_000810b8 + callback_index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioA_000810b8 + callback_index * 4))();\n    }\n    bit_mask &= ~(1 << callback_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_00081084"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "divide_or_return_error_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void divide_or_return_error_00084750(int dividend, int divisor, int quotient, int remainder) {\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_return_error_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_adc_00080ae4",
                "ctx": "context",
                "puVar1": "clock_frequency_pointer",
                "puVar2": "dat_pointer",
                "iVar3": "dat_00080bf8",
                "iVar4": "dat_00080bfc",
                "iVar5": "dat_00080c00",
                "iVar6": "adc_disable_all_channels_result",
                "ulPin": "pin",
                "uVar7": "next_pin",
                "DAT_00080bec": "dat_pointer",
                "DAT_00080bf0": "dat_00080bf0",
                "DAT_00080bf4": "dat_00080bf4",
                "DAT_00080bf8": "dat_00080bf8",
                "DAT_00080bfc": "dat_00080bfc",
                "DAT_00080c00": "dat_00080c00",
                "DAT_00080c04": "dat_00080c04",
                "DAT_00080c08": "dat_00080c08"
            },
            "code": "int initialize_adc_00080ae4(EVP_PKEY_CTX *context) {\n    uint32_t pin = 0;\n    uint32_t pin_limit = 0x4f;\n    uint32_t periph_clk = 0x25;\n    uint32_t clock_frequency = *(uint *)SystemCoreClock / 1000 - 1;\n    uint32_t timing = 0x300000;\n    uint32_t trigger = 0;\n    uint32_t interrupt = 0xffffffff;\n    uint32_t channels_disabled = 0;\n    uint32_t analog_output_initialized = 0;\n    SystemInit();\n    DAT_00080bec[1] = clock_frequency;\n    *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n    DAT_00080bec[2] = 0;\n    *DAT_00080bec = 7;\n    __libc_initialize_adc_00080ae4_array();\n    while (pin <= pin_limit) {\n        digitalWrite(pin, 0);\n        pin++;\n    }\n    *(undefined4 *)(DAT_00080bf4 + 0xa0) = interrupt;\n    *(undefined4 *)(DAT_00080bf8 + 0xa0) = interrupt;\n    *(undefined4 *)(DAT_00080bfc + 0xa0) = interrupt;\n    *(undefined4 *)(DAT_00080c00 + 0xa0) = interrupt;\n    PIO_Configure(DAT_00080bf4, 1, 0x300, 0);\n    digitalWrite(0, 1);\n    PIO_Configure(DAT_00080bf4, 1, 0xc00, 0);\n    PIO_Configure(DAT_00080bf4, 1, 0x3000, 0);\n    PIO_Configure(DAT_00080bfc, 2, 0x30, 0);\n    PIO_Configure(DAT_00080bf8, 1, 0xc00, 0);\n    PIO_Configure(DAT_00080bf4, 1, 3, 0);\n    PIO_Configure(DAT_00080bf8, 1, 0xc000, 0);\n    pmc_enable_periph_clk(periph_clk);\n    adc_initialize_adc_00080ae4(DAT_00080c08, clock_frequency, DAT_00080c04, 0xc);\n    adc_configure_timing(DAT_00080c08, 0, timing, 1);\n    adc_configure_trigger(DAT_00080c08, 0, trigger);\n    adc_disable_interrupt(DAT_00080c08, interrupt);\n    channels_disabled = adc_disable_all_channel(DAT_00080c08);\n    analog_output_initialized = analogOutputInit();\n    return channels_disabled;\n}",
            "called": [
                "PIO_Configure",
                "adc_init",
                "digitalWrite",
                "adc_disable_all_channel",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "adc_configure_trigger",
                "SystemInit",
                "adc_configure_timing",
                "analogOutputInit",
                "adc_disable_interrupt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "register_atexit_function_00081d5c",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_atexit_function_00081d5c(void (*func)(void), void *arg){\n  __cxa_atexit(func, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "register_atexit_function_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_pointer",
                "pcVar2": "memory_pointer"
            },
            "code": "void allocate_memory_00082970(int *error_code, int size)\n{\n    undefined *error_pointer = PTR_errno_00082990;\n    *(undefined4 *)PTR_errno_00082990 = 0;\n    caddr_t memory_pointer = _sbrk(size);\n    if ((memory_pointer == (caddr_t)0xffffffff) && (*(int *)error_pointer != 0))\n    {\n        *error_code = *(int *)error_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "always_returns_true_000811be",
                "file_UNUSED": "file_unused"
            },
            "code": "int always_returns_true_000811be(int file_unused)\n{\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "always_returns_true_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "call_afl_if_no_hypercall_0008014c",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_00080160": "PTR_noHyperCall_00080160",
                "aflCall": "aflCall"
            },
            "code": "int call_afl_if_no_hypercall_0008014c(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    result = aflCall(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_if_no_hypercall_0008014c"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "compare_values_00081c54",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "void compare_values_00081c54(int value1, int value2)\n{\n    __aeabi_cfcmpeq(value2, value1);\n    return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compare_values_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "String::FUN_0008163a": "string_change_buffer",
                "this": "string",
                "size": "size",
                "uVar1": "success",
                "FUN_0008163a": "string_change_buffer_0008163a"
            },
            "code": "uchar __thiscall string_change_buffer_0008163a(String *string, uint size)\n{\n    uchar success = 0;\n    if ((string->buffer == (char *)0x0) || (string->capacity < size)) {\n        success = changeBuffer(string, size);\n        if (success == 0) {\n            return 0;\n        }\n        if (string->len == 0) {\n            *string->buffer = '\\0';\n        }\n    }\n    return 1;\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "string_change_buffer_0008163a"
        },
        "FUN_00081aac": {
            "renaming": {
                "FUN_00081aac": "FUNC_00081aac"
            },
            "code": "\nuint FUNC_00081aac(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_00081aa2:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_00081ac4;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_00081ac4:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081aac",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081aac"
        },
        "FUN_000825a0": {
            "renaming": {
                "allocate_memory": "allocate_memory",
                "__ptr": "memory_ptr",
                "__size": "memory_size",
                "pvVar1": "allocated_memory",
                "FUN_000825a0": "allocate_memory_000825a0"
            },
            "code": "void * allocate_memory_000825a0(void *memory_ptr, size_t memory_size)\n{\n  void *allocated_memory;\n  allocated_memory = (void *)_allocate_memory_000825a0_r(*(undefined4 *)PTR__impure_ptr_000825ac, memory_ptr, memory_size);\n  return allocated_memory;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUNC_000815d4": "FUNC_UARTClass",
                "this": "this",
                "pUsart": "usart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_000815f4": "PTR_PTR_write_1_000815f4",
                "FUN_000815d4": "FUNC_000815d4_000815d4"
            },
            "code": "FUNC_000815d4_000815d4* __thiscall FUNC_000815d4_000815d4::FUNC_000815d4_000815d4(FUNC_000815d4_000815d4 *this, Usart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  UARTClass::UARTClass(&this->super_UARTClass, (Uart*)usart, irq, id, rx_buffer, tx_buffer);\n  *(undefined **)&this->super_UARTClass = PTR_PTR_write_1_000815f4;\n  this->usart = usart;\n  return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "FUNC_000815d4_000815d4"
        },
        "FUN_00080d24": {
            "renaming": {
                "FUN_00080d24": "set_value_at_offset_00080d24",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "offset",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(data_ptr + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(data_ptr + 0x60)"
            },
            "code": "void set_value_at_offset_00080d24(int data_ptr, int value, int offset)\n{\n  if (offset != 0) {\n    *(int *)(data_ptr + 100) = value;\n    return;\n  }\n  *(int *)(data_ptr + 0x60) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d24",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_00080d24"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00082140;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00082140 + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00082140 + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00082140 + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00082140 + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00082140 + 0x10);\n  puVar12 = PTR___malloc_av__00082140 + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00082140 + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00082140 + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00082348 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00082348 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00082262;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00082262:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00082148;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_0008211e;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00082148 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00082154;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00082154 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00082154 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00082148 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00082154;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00082108;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_0008214c < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_0008214c = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00082150 < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00082150 = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "__sfvwrite_r",
                "malloc",
                "_realloc_r",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_000818b8": {
            "renaming": {
                "FUN_000818b8": "calculate_hash_000818b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "hash_value",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_distance",
                "iVar5": "initial_value",
                "uVar6": "shifted_value"
            },
            "code": "uint calculate_hash_000818b8(uint input_1, uint input_2) {\n  uint hash_value; \n  uint shift_amount; \n  int leading_zeroes; \n\n  if ((input_1 | input_2) == 0) { \n    return input_1; \n  } \n\n  hash_value = input_1; \n  shift_amount = input_2; \n\n  if (input_2 == 0) { \n    hash_value = 0; \n    shift_amount = input_1; \n  } \n\n  int initial_value = 0x5b000000; \n  if (input_2 == 0) { \n    initial_value = 0x4b000000; \n  } \n\n  leading_zeroes = count_leading_zeroes(shift_amount); \n  int shift_distance = leading_zeroes - 8; \n  initial_value = initial_value + -0x800000 + shift_distance * -0x800000; \n\n  if (leading_zeroes < 8) { \n    uint shifted_amount = shift_amount << (leading_zeroes + 0x18U & 0xff); \n    shift_amount = initial_value + ((shift_amount >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_amount >> 0x1f)); \n    if ((hash_value | shifted_amount << 1) == 0) { \n      shift_amount = shift_amount & ~(shifted_amount >> 0x1f); \n    } \n    return shift_amount; \n  } \n\n  uint shifted_value = hash_value << (shift_distance & 0xff); \n  shift_amount = initial_value + (shift_amount << (shift_distance & 0xff)) + (hash_value >> (0x20 - shift_distance & 0xff)) + (uint)(0x7fffffff < shifted_value); \n  if (shifted_value == 0x80000000) { \n    shift_amount = shift_amount & 0xfffffffe; \n  } \n  return shift_amount; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818b8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_000818b8"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "modbus_initialize_00080164",
                "u32speed": "baud_rate",
                "puVar1": "serial_ptr",
                "PTR_Serial_000801ac": "SERIAL_PORT",
                "HardwareSerial": "SERIAL_PORT",
                "u8txenpin": "txen_pin",
                "pinMode": "pinMode",
                "digitalWrite": "digitalWrite",
                "u8BufferSize": "buffer_size",
                "u8lastRec": "last_received",
                "u16errCnt": "error_count",
                "u16OutCnt": "outgoing_count",
                "u16InCnt": "incoming_count",
                "iVar2": "read_status",
                "**code": "**function_pointer",
                "*(int *)": "*type_cast_pointer"
            },
            "code": "void __thiscall modbus_initialize_00080164(Modbus *this, long baud_rate)\n{\n  undefined *serial_ptr;\n  int read_status;\n  \n  serial_ptr = PTR_Serial_000801ac;\n  this->port = (HardwareSerial *)PTR_Serial_000801ac;\n  (**(code **)(*(int *)serial_ptr + SERIAL_BEGIN_OFFSET))(serial_ptr, baud_rate);\n  if (this->txen_pin > 1) {\n    pinMode((uint)this->txen_pin, OUTPUT);\n    digitalWrite((uint)this->txen_pin, LOW);\n  }\n  do {\n    read_status = (**(code **)(*(int *)this->port + SERIAL_READ_OFFSET))();\n  } while (read_status > -1);\n  this->buffer_size = 0;\n  this->last_received = 0;\n  this->error_count = 0;\n  this->outgoing_count = 0;\n  this->incoming_count = 0;\n  return;\n}",
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "modbus_initialize_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "process_buffer_000811cc",
                "file_UNUSED": "file_unused",
                "ptr": "buffer",
                "len": "buffer_len",
                "DAT_000811ec": "DATA_BLOCK",
                "iVar1": "i"
            },
            "code": "int process_buffer_000811cc(int file_unused, char *buffer, int buffer_len)\n{\n  int i = 0;\n  for (i = 0; i < buffer_len; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)(byte)buffer[i];\n  }\n  return buffer_len & ~(buffer_len >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "process_buffer_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "check_terminal_connection_000846dc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_terminal_connection_000846dc(int *error_code, int file_descriptor) {\n    undefined *error_ptr = PTR_errno_000846fc;\n    *(undefined4 *)PTR_errno_000846fc = 0;\n    int is_terminal = _isatty(file_descriptor);\n    if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_terminal_connection_000846dc"
        },
        "FUN_00081be4": {
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "abs_input_1",
                "uVar3": "abs_input_2",
                "uVar4": "sum",
                "bVar1": "is_sum_negative",
                "bVar5": "is_difference_negative"
            },
            "code": "uint calculate_result_00081be4(uint input_1, uint input_2)\n{\n    bool is_negative_1 = input_1 >> 31;\n    bool is_negative_2 = input_2 >> 31;\n    uint abs_input_1 = (input_1 ^ (input_1 >> 31)) - is_negative_1;\n    uint abs_input_2 = (input_2 ^ (input_2 >> 31)) - is_negative_2;\n    if (is_negative_1 || is_negative_2)\n    {\n        return 0xffffffff;\n    }\n    uint sum = abs_input_1 + abs_input_2;\n    bool is_sum_negative = sum >> 31;\n    if (is_sum_negative)\n    {\n        return ~((int)sum >> 31);\n    }\n    uint difference = abs_input_1 - abs_input_2;\n    bool is_difference_negative = difference >> 31;\n    if (is_difference_negative)\n    {\n        return ~((int)difference >> 31);\n    }\n    return (int)difference >> 31 | 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081be4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081be4"
        },
        "FUN_000815ca": {
            "renaming": {
                "FUN_000815ca": "usart_class_init_000815ca",
                "this": "usart",
                "dwBaudRate": "baud_rate",
                "PTR_super_UARTClass": "super_UARTClass",
                "DAT_000008c0": "baud_rate_setting"
            },
            "code": "void __thiscall usart_class_init_000815ca(USARTClass *usart, uint32_t baud_rate)\n{\n  UARTClass::init(&usart->PTR_super_UARTClass, baud_rate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ca",
            "calling": [],
            "imported": false,
            "current_name": "usart_class_init_000815ca"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_square_root_00081894",
                "param_1": "input_num",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_count",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "shift_left": "shift_left",
                "shift_right": "shift_right",
                "result": "result"
            },
            "code": "uint calculate_square_root_00081894(uint input_num)\n{\n  int leading_zeroes_count = count_leading_zeroes(input_num);\n  uint shift_count = leading_zeroes_count - 8;\n  int multiplier = shift_count * -0x800000 + 0x4a800000;\n  if (leading_zeroes_count > 7) {\n    uint shift_left = input_num << (shift_count & 0xff);\n    uint shift_right = 0U >> (0x20 - shift_count & 0xff);\n    uint carry = 0x7fffffff < shift_right;\n    uint result = multiplier + shift_left + shift_right + carry;\n    if (shift_right == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shift_left = input_num << (leading_zeroes_count + 0x18U & 0xff);\n  uint shift_right = (input_num >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shift_left >> 0x1f);\n  uint carry = (shift_left & 0x7fffffff) == 0 ? ~(shift_left >> 0x1f) : 0;\n  uint result = multiplier + shift_right + carry;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_square_root_00081894"
        },
        "FUN_00084248": {
            "renaming": {
                "FUN_00084248": "process_items_00084248",
                "param_1": "item_count",
                "param_2": "callback",
                "uVar1": "callback_result",
                "iVar2": "item",
                "iVar3": "item_length",
                "uVar4": "result",
                "piVar5": "item_ptr"
            },
            "code": "uint process_items_00084248(int item_count, code *callback)\n{\n  uint result = 0;\n  int *item_ptr = (int *)(item_count + 0x2e0);\n  if (item_ptr != (int *)0x0) {\n    do {\n      int item = item_ptr[2];\n      int item_length = item_ptr[1] + -1;\n      if (-1 < item_length) {\n        do {\n          item_length = item_length + -1;\n          if ((1 < *(ushort *)(item + 0xc)) && (*(short *)(item + 0xe) != -1)) {\n            uint callback_result = (*callback)(item);\n            result = result | callback_result;\n          }\n          item = item + 0x68;\n        } while (item_length != -1);\n      }\n      item_ptr = (int *)*item_ptr;\n    } while (item_ptr != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084248",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_items_00084248"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_or_return_error_000845bc",
                "param_1": "destination",
                "param_2": "byte",
                "param_3": "byte_count",
                "*param_2": "*byte",
                "*param_1": "*destination"
            },
            "code": "int write_byte_or_return_error_000845bc(int *destination, unsigned char byte, uint byte_count) {\n  if (destination == NULL) {\n    return 0;\n  }\n  if (byte_count < 256) {\n    *destination = byte;\n    return 1;\n  }\n  *destination = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_000845bc"
        },
        "FUN_00081412": {
            "renaming": {
                "FUN_00081412": "read_byte_00081412",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "bVar1": "byte_to_return",
                "pRVar2": "ring_buffer"
            },
            "code": "ssize_t __thiscall read_byte_00081412(UARTClass *this,int file_descriptor,void *buffer,size_t num_bytes)\n{\n  byte byte_to_return;\n  RingBuffer *ring_buffer;\n  \n  ring_buffer = this->_rx_buffer;\n  if (ring_buffer->_iHead != ring_buffer->_iTail) {\n    byte_to_return = ring_buffer->_aucBuffer[ring_buffer->_iTail];\n    ring_buffer->_iTail = (ring_buffer->_iTail + 1U) & 0x7f;\n    return (uint)byte_to_return;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081412",
            "calling": [],
            "imported": false,
            "current_name": "read_byte_00081412"
        },
        "FUN_000838cc": {
            "renaming": {
                "FUN_000838cc": "add_data_to_list_000838cc",
                "param_1": "data_type",
                "param_2": "data_value",
                "param_3": "list_ptr",
                "param_4": "list_end_ptr",
                "puVar1": "current_node_ptr",
                "uVar2": "node_count",
                "iVar3": "global_ptr",
                "DAT_00083970": "DAT_00083970",
                "malloc": "malloc"
            },
            "code": "undefined4 add_data_to_list_000838cc(int data_type, undefined4 data_value, undefined4 *list_ptr, undefined4 *list_end_ptr)\n{\n    undefined4 *current_node_ptr;\n    uint node_count;\n    int global_ptr = *(int *)PTR__global_impure_ptr_0008396c;\n    current_node_ptr = *(undefined4 **)(global_ptr + 0x148);\n    if (current_node_ptr == (undefined4 *)0x0) {\n        current_node_ptr = (undefined4 *)(global_ptr + 0x14c);\n        *(undefined4 **)(global_ptr + 0x148) = current_node_ptr;\n    }\n    node_count = current_node_ptr[1];\n    if (0x1f < (int)node_count) {\n        if (DAT_00083970 != 0) {\n            current_node_ptr = (undefined4 *)malloc(400);\n            if (current_node_ptr != (undefined4 *)0x0) {\n                *current_node_ptr = *(undefined4 *)(global_ptr + 0x148);\n                current_node_ptr[1] = 0;\n                node_count = 0;\n                *(undefined4 **)(global_ptr + 0x148) = current_node_ptr;\n                current_node_ptr[0x62] = 0;\n                current_node_ptr[99] = 0;\n                goto LAB_00083922;\n            }\n        }\n        return 0xffffffff;\n    }\nLAB_00083922:\n    if (data_type != 0) {\n        uint node_index = 1 << (node_count & 0xff);\n        current_node_ptr[node_count + 0x22] = list_ptr;\n        current_node_ptr[0x62] = current_node_ptr[0x62] | node_index;\n        current_node_ptr[node_count + 0x42] = list_end_ptr;\n        if (data_type == 2) {\n            current_node_ptr[99] = node_index | current_node_ptr[99];\n        }\n    }\n    current_node_ptr[1] = node_count + 1;\n    current_node_ptr[node_count + 2] = data_value;\n    return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000838cc",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_data_to_list_000838cc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "reverse_and_fill_memory_with_char_00082504",
                "__s": "memory_block",
                "__c": "character",
                "__n": "block_size",
                "puVar1": "end_word",
                "puVar2": "current_word",
                "puVar3": "next_word",
                "uVar4": "word_to_fill",
                "uVar5": "temp_size",
                "bVar6": "is_block_size_zero"
            },
            "code": "void * reverse_and_fill_memory_with_char_00082504(void *memory_block, int character, size_t block_size)\n{\n  uint *current_word;\n  uint *end_word;\n  uint *next_word;\n  uint word_to_fill;\n  bool is_block_size_zero;\n  \n  current_word = (uint *)memory_block;\n  if (((uint)memory_block & 3) != 0) {\n    is_block_size_zero = block_size == 0;\n    end_word = (uint *)memory_block;\n    block_size = block_size - 1;\n    if (is_block_size_zero) {\n      return memory_block;\n    }\n    while( true ) {\n      next_word = (uint *)((int)end_word + 1);\n      *(char *)end_word = (char)character;\n      if (((uint)next_word & 3) == 0) break;\n      is_block_size_zero = block_size == 0;\n      end_word = next_word;\n      block_size = block_size - 1;\n      if (is_block_size_zero) {\n        return memory_block;\n      }\n    }\n  }\n  if (3 < block_size) {\n    word_to_fill = character & 0xffU | (character & 0xffU) << 8;\n    word_to_fill = word_to_fill | word_to_fill << 0x10;\n    end_word = current_word;\n    if (0xf < block_size) {\n      block_size = block_size - 0x10;\n      do {\n        *current_word = word_to_fill;\n        current_word[1] = word_to_fill;\n        current_word[2] = word_to_fill;\n        current_word[3] = word_to_fill;\n        current_word = current_word + 4;\n      } while (current_word != (uint *)((int)end_word + (block_size & 0xfffffff0) + 0x10));\n      block_size = block_size & 0xf;\n      end_word = end_word + ((block_size >> 4) + 1) * 4;\n      block_size = block_size & 3;\n      if (block_size < 4) goto LAB_00082580;\n    }\n    do {\n      block_size = block_size - 4;\n      *current_word = word_to_fill;\n      current_word = current_word + 1;\n    } while (3 < block_size);\n    end_word = (uint *)((int)end_word + (block_size - 4 & 0xfffffffc) + 4);\n    block_size = block_size & 3;\n  }\nLAB_00082580:\n  if (block_size != 0) {\n    current_word = end_word;\n    do {\n      next_word = (uint *)((int)current_word + 1);\n      *(char *)current_word = (char)character;\n      current_word = next_word;\n    } while (next_word != (uint *)(block_size + (int)end_word));\n  }\n  return memory_block;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "imported": false,
            "current_name": "reverse_and_fill_memory_with_char_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_completed_000800f4",
                "param_1": "file_content",
                "*PTR_completed_7857_0008010c": "*completed_flag",
                "DAT_00080110": "global_variable",
                "PTR__etext_00080114": "end_of_text_section"
            },
            "code": "char* check_if_completed_000800f4(char* file_content)\\n{\\n  if (*PTR_completed_7857_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      file_content = PTR__etext_00080114;\\n    }\\n    *PTR_completed_7857_0008010c = 1;\\n  }\\n  return file_content;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_completed_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "print_formatted_string_0008378c",
                "param_1": "file_stream",
                "param_2": "data_array",
                "iVar1": "print_result",
                "iVar2": "flush_result",
                "local_488": "buffer_pointer",
                "local_480": "print_length",
                "local_47c": "masked_short",
                "local_47a": "unused_variable",
                "local_478": "unused_variable",
                "local_474": "unused_variable",
                "local_470": "unused_variable",
                "local_46c": "unused_variable",
                "local_464": "unused_variable",
                "local_424": "unused_variable",
                "auStack_420": "stack_buffer"
            },
            "code": "int print_formatted_string_0008378c(FILE* file_stream, int* data_array){\n  int print_result;\n  int flush_result;\n  char stack_buffer[1024];\n  char* buffer_pointer[2];\n  buffer_pointer[0] = stack_buffer;\n  unsigned short masked_short = *(unsigned short *)(data_array + 0xc) & 0xfffd;\n  unsigned int print_length = 0x400;\n  buffer_pointer[1] = NULL;\n  print_result = snprintf(*(buffer_pointer), print_length, \"%.*s\", *(unsigned int *)(data_array + 0x24), *(unsigned int *)(data_array + 0x1c));\n  if ((-1 < print_result) && (flush_result = fflush(file_stream), flush_result != 0)) {\n    print_result = -1;\n  }\n  if ((int)((uint)masked_short << 0x19) < 0) {\n    *(unsigned short *)(data_array + 0xc) = *(unsigned short *)(data_array + 0xc) | 0x40;\n  }\n  return print_result;\n}",
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "flush_buffer_if_not_empty_00083adc",
                "param_1": "buffer_address",
                "param_2": "short_address",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void flush_buffer_if_not_empty_00083adc(int buffer_address, int short_address) {\n\tif ((buffer_address != 0) && (*(int *)(buffer_address + 0x38) == 0)) {\n\t\tinitialize_buffer();\n\t}\n\tif (*(short *)(short_address + 0xc) == 0) {\n\t\treturn;\n\t}\n\tflush_buffer(buffer_address);\n\treturn;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "_fclose_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_buffer_if_not_empty_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__0008296c;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_0008267c;\n  }\n  if (uVar9 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__0008296c + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__0008296c + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000826a4;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "memmove",
                "_free_r",
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_0008112c": {
            "renaming": {
                "FUN_0008112c": "process_callbacks_0008112c",
                "uVar1": "leading_zeroes_count",
                "uVar2": "callbacks_mask",
                "PTR_callbacksPioD_00081160": "PTR_callbacksPioD",
                "DAT_0008115c": "DAT",
                "callback": "callback_func",
                "callback_index": "callback_index"
            },
            "code": "void process_callbacks_0008112c(void) {\n  uint callbacks_mask = *(uint *)(DAT_0008115c_0008115c + 0x4c);\n  while (true) {\n    uint leading_zeroes_count = count_leading_zeroes(callbacks_mask);\n    if (leading_zeroes_count > 0x1f) {\n      break;\n    }\n    uint callback_index = 0x1f - leading_zeroes_count;\n    code* callback = *(code **)(PTR_callbacksPioD_00081160_00081160 + callback_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    callbacks_mask = callbacks_mask & ~(1 << callback_index);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008112c",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_0008112c"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_buffer_000803d4",
                "iVar1": "buffer_index",
                "au8Buffer": "buffer",
                "u16errCnt": "error_count",
                "PTR_fctsupported_0008040c": "supported_functions"
            },
            "code": "uint8_t __thiscall check_buffer_000803d4(Modbus *this)\n{\n  int buffer_index;\n  int buffer_length = 8;\n  int buffer_value = (uint)this->au8Buffer[1] << 0x18;\n\n  if (buffer_value < 0)\n  {\n    this->error_count++;\n    return 0xfb;\n  }\n\n  for (buffer_index = 0; buffer_index < buffer_length; buffer_index++)\n  {\n    if (PTR_fctsupported_0008040c[buffer_index] == this->au8Buffer[1])\n    {\n      return 0x00;\n    }\n  }\n\n  this->error_count++;\n  return 0x01;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "check_buffer_000803d4"
        },
        "FUN_000845d8": {
            "renaming": {
                "FUN_000845d8": "write_to_file_000845d8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "data",
                "param_4": "data_size",
                "puVar1": "error_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000845d8(int *error_code, int file_descriptor, char *data, int data_size) {\n  undefined *error_ptr = PTR_errno_000845fc;\n  *(undefined4 *)PTR_errno_000845fc = 0;\n  int write_result = _write(file_descriptor, data, data_size);\n  if ((write_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845d8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000845d8"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "check_for_response_0008043e",
                "__fds": "read_fds",
                "__nfds": "max_fd",
                "__timeout": "timeout_ms",
                "bVar1": "received_byte",
                "uVar2": "rx_buffer_size",
                "uVar3": "current_time_ms",
                "unaff_r6": "unaff_r6",
                "u8serno": "u8serno",
                "port": "port",
                "u32timeOut": "u32timeOut",
                "u8lastError": "u8lastError",
                "u8state": "u8state",
                "u16errCnt": "u16errCnt",
                "au8Buffer": "rx_buffer",
                "getRxBuffer": "get_rx_buffer",
                "validateAnswer": "validate_answer",
                "get_FC3": "get_FC3",
                "u8BufferSize": "rx_buffer_size"
            },
            "code": "int __thiscall check_for_response_0008043e(Modbus *this, fd_set *read_fds, int max_fd, int timeout_ms) {\\n    byte received_byte;\\n    uint8_t rx_buffer_size;\\n    uint32_t current_time_ms;\\n    uint unaff_r6;\\n\\n    if (this->u8serno < 4) {\\n        received_byte = (**(code **)(*(int *)this->port + 8))();\\n        unaff_r6 = (uint)received_byte;\\n    }\\n    current_time_ms = millis();\\n    if (this->u32timeOut < current_time_ms) {\\n        this->u8lastError = 0xff;\\n        this->u8state = \"\\0\";\\n        this->u16errCnt = this->u16errCnt + 1;\\n    }\\n    else if (7 < unaff_r6) {\\n        get_rx_buffer(this);\\n        uint8_t validation_result = validate_answer(this);\\n        if (validation_result == \"\\0\") {\\n            if (this->rx_buffer[1] - 3 < 2) {\\n                get_FC3(this);\\n            }\\n            this->u8state = \"\\0\";\\n            rx_buffer_size = this->rx_buffer_size;\\n        }\\n        else {\\n            this->u8state = \"\\0\";\\n        }\\n        goto LAB_000804a2;\\n    }\\n    rx_buffer_size = \"\\0\";\\nLAB_000804a2:\\n    return (int)(char)rx_buffer_size;\\n}",
            "called": [
                "get_FC3",
                "validateAnswer",
                "getRxBuffer",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_for_response_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "clear_string_0008160c",
                "this": "self",
                "buffer": "string_buffer",
                "len": "length",
                "capacity": "capacity"
            },
            "code": "void __thiscall clear_string_0008160c(String *this)\n{\n  if (this->buffer != nullptr) {\n    free(this->buffer);\n  }\n  this->buffer = nullptr;\n  this->length = 0;\n  this->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clear_string_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_if_param_less_than_45_00080e18",
                "param_1": "param",
                "uVar1": "bit_shifted_value"
            },
            "code": "uint8 check_if_param_less_than_45_00080e18(uint8 param)\n{\n  uint8 bit_shifted_value;\n  if (param < 45) {\n    if (param < 32) {\n      bit_shifted_value = 1 << (param & 0xff);\n      if ((bit_shifted_value & *(uint *)(DAT_00080e58 + 0x18)) != bit_shifted_value) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_shifted_value;\n      }\n    }\n    else {\n      bit_shifted_value = 1 << (param - 32 & 0xff);\n      if ((bit_shifted_value & *(uint *)(DAT_00080e58 + 0x108)) != bit_shifted_value) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_shifted_value;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "pinMode",
                "init",
                "init"
            ],
            "imported": false,
            "current_name": "check_if_param_less_than_45_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "int return_zero_00081184(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "return_zero_00081184"
        },
        "FUN_00081580": {
            "renaming": {
                "FUN_00081580": "receive_data_00081580",
                "this": "self",
                "pRVar1": "tx_buffer",
                "RVar2": "uart_status",
                "_pUart": "uart_pointer",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void __thiscall receive_data_00081580(UARTClass *this)\n{\n  RingBuffer *rx_buffer = this->_rx_buffer;\n  RoReg uart_status = this->_pUart->UART_SR;\n  if ((int)(uart_status << 31) < 0) {\n    RingBuffer::store_char(rx_buffer, (uint8_t)this->_pUart->UART_RHR);\n  }\n  if ((int)(uart_status << 30) < 0) {\n    RingBuffer *tx_buffer = this->_tx_buffer;\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      this->_pUart->UART_THR = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\n      return;\n    }\n    this->_pUart->UART_IDR = 2;\n  }\n  return;\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081580",
            "calling": [
                "UART_Handler",
                "USART1_Handler",
                "USART0_Handler",
                "USART3_Handler"
            ],
            "imported": false,
            "current_name": "receive_data_00081580"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_max_bytes_per_character_00084298",
                "PTR___mb_cur_max_000842a0": "PTR_max_bytes_per_character"
            },
            "code": "get_max_bytes_per_character_00084298() {\n    return *(undefined4 *)PTR___mb_cur_max_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_max_bytes_per_character_00084298"
        },
        "FUN_00080ac0": {
            "renaming": {
                "FUN_00080ac0": "handle_UART_interrupt_00080ac0",
                "PTR_Serial1_00080ac8": "&Serial1"
            },
            "code": "void handle_UART_interrupt_00080ac0(void)\n{\n  UARTClass::IrqHandler(PTR_Serial1_00080ac8);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ac0",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080ac0"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_param_value_to_max_00081066",
                "param_1": "param_value",
                "*(undefined4 *)(param_1 + 0x14)": "*(unsigned int *)(param_value + 0x14)"
            },
            "code": "void set_param_value_to_max_00081066(int param_value)\n{\n  *(unsigned int *)(param_value + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_param_value_to_max_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_param_to_int_00081cd0",
                "param_1": "param",
                "uVar1": "shift_amount",
                "uVar2": "shift_amount_diff",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint convert_param_to_int_00081cd0(uint param)\n{\n    uint shift_amount = 0x1F - ((param << 1) >> 0x18);\n    if (param << 1 < 0x7F000000)\n    {\n        return 0;\n    }\n    else if (shift_amount > 0x1E)\n    {\n        return (param & 0x80000000) ? 0x80000000 : 0x7FFFFFFF;\n    }\n    else if (shift_amount < 0x1F)\n    {\n        uint shifted_param = (param << 8) | 0x80000000;\n        uint shifted_param_result = shifted_param >> shift_amount;\n        return (param & 0x80000000) ? -shifted_param_result : shifted_param_result;\n    }\n    else if ((param & 0x7FFFFF) != 0)\n    {\n        return 0;\n    }\n    else\n    {\n        return (param & 0x80000000) ? 0x80000000 : 0x7FFFFFFF;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_param_to_int_00081cd0"
        },
        "FUN_00081188": {
            "renaming": {
                "FUN_00081188": "wait_forever_00081188"
            },
            "code": "void wait_forever_00081188(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081188",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_00081188"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "allocated_memory",
                "_FUN_00081df4_r": "allocate_memory_r"
            },
            "code": "void * allocate_memory_00081df4(size_t size)\n{\n    void *allocated_memory;\n    allocated_memory = (void *) allocate_memory_00081df4_r(*(undefined4 *)PTR__impure_ptr_00081e00, size);\n    return allocated_memory;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "decode_modbus_packet_00080410",
                "this": "modbus_obj",
                "uVar1": "data_word",
                "uVar2": "byte_index",
                "bVar3": "byte_count",
                "uVar4": "new_index",
                "puVar5": "data_array",
                "au8Buffer": "packet_buffer",
                "au16regs": "data_array",
                "makeWord": "combine_bytes"
            },
            "code": "void __thiscall decode_modbus_packet_00080410(Modbus *modbus_obj){\n  uint16_t data_word;\n  uint byte_index;\n  uint byte_count;\n  uint16_t *data_array;\n  \n  byte_index = 0;\n  while(true){\n    byte_count = (uint)byte_index;\n    byte_index = byte_index + 1;\n    uint new_index = byte_count * 2 + 3 & 0xff;\n    if (modbus_obj->au8Buffer[2] >> 1 <= byte_count) break;\n    data_array = modbus_obj->au16regs;\n    data_word = makeWord(modbus_obj->au8Buffer[new_index],modbus_obj->au8Buffer[new_index + 1]);\n    data_array[byte_count] = data_word;\n  }\n  return;\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decode_modbus_packet_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_ptr",
                "param_2": "mode",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080da0(int data_ptr, int mode, int value, uint32_t flag) {\n    bool is_negative_flag = (int)(flag << 0x1f) < 0;\n    switch(mode) {\n        case 1:\n        case 2:\n            (*PTR_FUNC_00080df8)(data_ptr, mode, value);\n            *(int *)(data_ptr + 0x44) = value;\n            if (is_negative_flag) {\n                *(int *)(data_ptr + 100) = value;\n            }\n            if (!is_negative_flag) {\n                *(int *)(data_ptr + 0x60) = value;\n            }\n            break;\n        case 3:\n            (*PTR_FUNC_00080dfc)(data_ptr, value, flag, PTR_DAT_00080dfc, data_ptr);\n            break;\n        case 4:\n        case 5:\n            (*PTR_FUNC_00080e00)(data_ptr, value, mode == 5, (flag << 0x1d) >> 0x1f, flag & 1, mode, value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "modbus_send_00080258",
                "u8length": "buffer_length",
                "uVar1": "crc_value",
                "uVar2": "timeout_value",
                "iVar3": "read_result",
                "u8BufferSize": "buffer_size",
                "au8Buffer": "buffer",
                "u8txenpin": "transmit_enable_pin",
                "u8serno": "serial_number",
                "port": "port",
                "u16timeOut": "timeout_duration",
                "u32timeOut": "timeout",
                "u16OutCnt": "output_count"
            },
            "code": "void __thiscall modbus_send_00080258(Modbus *this)\n{\n  byte buffer_length;\n  uint16_t crc_value;\n  uint32_t timeout_value;\n  int read_result;\n  \n  buffer_length = this->buffer_size;\n  crc_value = calculate_crc(this, buffer_length);\n  this->buffer[buffer_length] = (uchar)((uint)crc_value >> 8);\n  this->buffer[(buffer_length + 1) & 0xff] = (uchar)crc_value;\n  this->buffer_size = buffer_length + 2;\n  if (this->transmit_enable_pin > 1) {\n    digitalWrite((uint)this->transmit_enable_pin, 1);\n  }\n  if (this->serial_number < 4) {\n    (**(code **)(*(int *)this->port + 4))(this->port, this->buffer, this->buffer_size);\n  }\n  if (this->transmit_enable_pin > 1) {\n    digitalWrite((uint)this->transmit_enable_pin, 0);\n  }\n  if (this->serial_number < 4) {\n    do {\n      read_result = (**(code **)(*(int *)this->port + 0xc))();\n    } while (-1 < read_result);\n  }\n  this->buffer_size = 0;\n  timeout_value = millis();\n  this->timeout = timeout_value + this->timeout_duration;\n  this->output_count = this->output_count + 1;\n  return;\n}",
            "called": [
                "calcCRC",
                "digitalWrite",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "query"
            ],
            "imported": false,
            "current_name": "modbus_send_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "String::FUN_00081622": "resize_string_buffer",
                "*this": "string",
                "maxStrLen": "max_length",
                "pcVar1": "new_buffer",
                "FUN_00081622": "resize_string_buffer_00081622"
            },
            "code": "uchar __thiscall resize_string_buffer_00081622(String *string, uint max_length) {\n  char *new_buffer = (char *)realloc(string->buffer, max_length + 1);\n  if (new_buffer != NULL) {\n    string->buffer = new_buffer;\n    string->capacity = max_length;\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "resize_string_buffer_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "iVar1": "i",
                "puVar2": "dest_words",
                "puVar3": "src_words",
                "puVar4": "dest_words",
                "puVar5": "dest_bytes",
                "puVar7": "dest_bytes",
                "uVar6": "remaining_bytes",
                "uVar8": "remaining_bytes"
            },
            "code": "void* reverse_copy_00082438(void* destination, const void* source, size_t num_bytes) {\n    int i;\n    uint remaining_bytes;\n    uint num_words;\n    uint* dest_words;\n    uint* src_words;\n    byte* dest_bytes;\n    byte* src_bytes;\n\n    if (source < destination && source + num_bytes > destination) {\n        dest_bytes = (byte*)destination + num_bytes;\n        remaining_bytes = num_bytes - 1;\n        if (num_bytes != 0) {\n            do {\n                src_bytes = (byte*)source + remaining_bytes;\n                dest_bytes--;\n                remaining_bytes--;\n                *dest_bytes = *src_bytes;\n            } while (remaining_bytes != -1);\n        }\n        return destination;\n    }\n\n    dest_words = (uint*)destination;\n    if (num_bytes < 16) {\n        if (num_bytes == 0) {\n            return destination;\n        }\n    } else if ((((uint)destination | (uint)source) & 3) == 0) {\n        num_words = (num_bytes - 16) >> 4;\n        src_words = (uint*)source;\n        do {\n            *dest_words++ = *src_words++;\n            *dest_words++ = *src_words++;\n            *dest_words++ = *src_words++;\n            *dest_words++ = *src_words++;\n        } while (num_words-- != 0);\n        remaining_bytes = num_bytes & 15;\n        if (remaining_bytes == 0) {\n            return destination;\n        }\n        source = (uint*)source + (num_bytes - remaining_bytes) / 4;\n        dest_words = (uint*)destination + (num_bytes - remaining_bytes) / 4;\n    }\n\n    dest_bytes = (byte*)dest_words;\n    src_bytes = (byte*)source;\n    remaining_bytes = num_bytes & 3;\n    for (i = remaining_bytes; i != 0; i--) {\n        *dest_bytes++ = *src_bytes++;\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_uart_00081508",
                "this": "uart_instance",
                "dwBaudRate": "baud_rate",
                "modeReg": "mode_reg",
                "puVar1": "system_clock",
                "pRVar2": "rx_buffer/tx_buffer",
                "pUVar3": "uart",
                "DAT_00081574": "irq_index",
                "_dwId": "dw_id",
                "_pUart": "uart_instance_pointer",
                "_dwIrq": "dw_irq"
            },
            "code": "void __thiscall initialize_uart_00081508(UARTClass *uart_instance, uint32_t baud_rate, uint32_t mode_reg) {\n  pmc_enable_periph_clk(uart_instance->_dwId);\n  Uart *uart = uart_instance->_pUart;\n  uart->UART_PTCR = 0x202;\n  uart->UART_CR = 0xac;\n  uart->UART_MR = mode_reg;\n  uint32_t system_clock = *(uint *)(PTR_SystemCoreClock_00081570);\n  uint32_t baud_value = system_clock / baud_rate >> 4;\n  uart->UART_BRGR = baud_value;\n  uart->UART_IDR = 0xffffffff;\n  uart->UART_IER = 0x61;\n  uint32_t DAT_00081574 = ((uint)(int)uart_instance->_dwIrq >> 5) * 4;\n  *(int *)(DAT_00081574 + DAT_00081574) = 1 << (uint)(byte)(uart_instance->_dwIrq & 0x1f);\n  RingBuffer *rx_buffer = uart_instance->_rx_buffer;\n  rx_buffer->_iTail = 0;\n  rx_buffer->_iHead = 0;\n  RingBuffer *tx_buffer = uart_instance->_tx_buffer;\n  tx_buffer->_iTail = 0;\n  tx_buffer->_iHead = 0;\n  uart->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initialize_uart_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "validate_input_and_initialize_output_buffer": "validate_input_and_initialize_output_buffer",
                "param_1": "output_buffer_status",
                "param_2": "input_buffer",
                "uVar1": "input_value_with_flag_and_shifted_1",
                "iVar2": "output_buffer",
                "uVar3": "input_value_with_flag",
                "uVar4": "input_value",
                "PTR__impure_ptr_000838c8": "PTR_impure_ptr",
                "__sinit": "initialize_all_streams",
                "_free_r": "free_memory_in_r",
                "__smakebuf_r": "make_stream_buffer_r",
                "FUN_00083808": "validate_input_and_initialize_output_buffer_00083808"
            },
            "code": "int validate_input_and_initialize_output_buffer_00083808(int *output_buffer_status, int *input_buffer) {\n    uint16_t input_value = *(uint16_t *)(input_buffer + 3);\n    uint32_t input_value_shifted = (uint32_t)input_value << 0x1c;\n    int output_buffer = input_buffer[4];\n    \n    if ((*(int *)PTR__impure_ptr_000838c8 != 0) && (*(int *)(*(int *)PTR__impure_ptr_000838c8 + 0x38) == 0)) {\n        __sinit();\n    }\n    \n    if (input_value_shifted < 0) {\n        if ((int *)input_buffer[0xc] != (int *)0x0) {\n            if ((int *)input_buffer[0xc] != input_buffer + 0x10) {\n                _free_r(output_buffer_status);\n                input_value = *(uint16_t *)(input_buffer + 3);\n            }\n            input_buffer[0xc] = 0;\n        }\n        input_value = input_value & 0xffdb;\n        *input_buffer = output_buffer;\n        input_buffer[1] = 0;\n    } else if (-1 < (int)(input_value << 0x1b)) {\n        *output_buffer_status = 9;\n        *(uint16_t *)(input_buffer + 3) = input_value | 0x40;\n        return -1;\n    }\n    \n    *(uint16_t *)(input_buffer + 3) = input_value | 8;\n    uint32_t input_value_with_flag = (uint32_t)(input_value | 8);\n    \n    if (output_buffer == 0 && ((input_value_with_flag & 0x280) != 0x200)) {\n        __smakebuf_r(output_buffer_status, input_buffer);\n        input_value_with_flag = (uint32_t)*(uint16_t *)(input_buffer + 3);\n        output_buffer = input_buffer[4];\n    }\n    \n    uint32_t input_value_with_flag_and_shifted = (uint32_t)input_value_with_flag << 0x18;\n    if ((output_buffer == 0) && (int)input_value_with_flag_and_shifted < 0) {\n        *(uint16_t *)(input_buffer + 3) = *(uint16_t *)(input_buffer + 3) | 0x40;\n        return -1;\n    }\n    \n    uint32_t input_value_with_flag_and_shifted_1 = input_value_with_flag_and_shifted & 1;\n    if (input_value_with_flag_and_shifted_1 == 0) {\n        if (-1 < (int)(input_value_with_flag << 0x1e)) {\n            input_value_with_flag_and_shifted_1 = input_buffer[5];\n        }\n        input_buffer[2] = input_value_with_flag_and_shifted_1;\n    } else {\n        input_buffer[6] = -input_buffer[5];\n        input_buffer[2] = 0;\n    }\n    return 0;\n}\n",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "validate_input_and_initialize_output_buffer_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_index_0008105c",
                "param_1": "base_address",
                "param_2": "bit_index",
                "*(int *)(param_1 + 0x14)": "*data_ptr",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_index_0008105c(int base_address, uint8_t bit_index)\n{\n    uint32_t* data_ptr = (uint32_t*)(base_address + 0x14);\n    uint32_t bit_mask = 1 << (bit_index & 0xff);\n    *data_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "convert_wchar_to_mbstring_0008456c",
                "param_1": "mbstring_length",
                "param_2": "wchar_length",
                "param_3": "wchar_char",
                "param_4": "mbstring_char",
                "uVar1": "locale_charset",
                "iVar2": "conversion_result",
                "pcVar3": "conversion_function",
                "auStack_24": "stack_buffer"
            },
            "code": "void convert_wchar_to_mbstring_0008456c(int* mbstring_length, int wchar_length, int wchar_char, int* mbstring_char) {\n  undefined4 uVar1;\n  int conversion_result;\n  code* conversion_function;\n  undefined stack_buffer[12];\n  if (wchar_length == 0) {\n    conversion_function = *(code**)PTR___wctomb_000845b8;\n    uVar1 = __locale_charset();\n    conversion_result = (*conversion_function)(mbstring_length, stack_buffer, 0, uVar1, mbstring_char);\n  } else {\n    conversion_function = *(code**)PTR___wctomb_000845b8;\n    uVar1 = __locale_charset();\n    conversion_result = (*conversion_function)(mbstring_length, wchar_length, wchar_char, uVar1, mbstring_char);\n  }\n  if (conversion_result == -1) {\n    *mbstring_char = 0;\n    *mbstring_length = 138;\n  }\n  return;\n}",
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wchar_to_mbstring_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_file_mode_to_directory_000811b4",
                "file_UNUSED": "unused_file",
                "st": "file_stat",
                "st->st_mode": "file_stat->st_mode"
            },
            "code": "int set_file_mode_to_directory_000811b4(stat *file_stat) {\n    file_stat->st_mode = 0x2000;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_000811b4"
        },
        "FUN_000813f6": {
            "renaming": {
                "FUN_000813f6": "get_last_byte_received_000813f6",
                "this": "self",
                "uVar1": "last_byte_received",
                "pRVar2": "rx_buffer",
                "_rx_buffer": "rx_buffer",
                "_iHead": "_head_index",
                "_iTail": "_tail_index",
                "_aucBuffer": "_buffer"
            },
            "code": "int __thiscall get_last_byte_received_000813f6(UARTClass *this)\n{\n  uint32_t last_byte_received;\n  RingBuffer *rx_buffer = this->_rx_buffer;\n  if (rx_buffer->_iHead == rx_buffer->_iTail) {\n    last_byte_received = 0xffffffff;\n  }\n  else {\n    last_byte_received = (uint32_t)rx_buffer->_aucBuffer[rx_buffer->_iTail];\n  }\n  return last_byte_received;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813f6",
            "calling": [],
            "imported": false,
            "current_name": "get_last_byte_received_000813f6"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "disable_wdt_000816d4",
                "DAT_000816dc": "wdt_pointer"
            },
            "code": "void disable_wdt_000816d4(uint32_t DAT_000816dc){\n                        WDT_Disable(DAT_000816dc);\n                    }",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_wdt_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    DAT_00084244 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_0008402e;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_0008402e;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_0008402e;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_0008402e;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_0008402e;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_0008402e:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "memcpy",
                "_free_r",
                "__swsetup_r",
                "memmove",
                "_realloc_r",
                "_fflush_r",
                "memchr",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00081074": {
            "renaming": {
                "FUN_00081074": "call_isr_if_set_00081074",
                "PTR_gpf_isr_00081080": "isr_ptr"
            },
            "code": "void call_isr_if_set_00081074(void)\n{\n  code **PTR_gpf_isr_00081080 = *(code **)(PTR_gpf_isr_00081080);\n  if (PTR_gpf_isr_00081080 != (code *)0x0) {\n    (*PTR_gpf_isr_00081080)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081074",
            "calling": [],
            "imported": false,
            "current_name": "call_isr_if_set_00081074"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1": "param_list",
                "param_2": "new_value",
                "param_3": "condition_1",
                "param_4": "condition_2",
                "param_5": "condition_3"
            },
            "code": "void update_parameters_00080d7a(int* param_list, int new_value, int condition_1, int condition_2, int condition_3) {\n  param_list[0x11] = new_value;\n  if (condition_3 == 0) {\n    param_list[0x18] = new_value;\n  }\n  else {\n    param_list[0x19] = new_value;\n  }\n  if (condition_2 == 0) {\n    param_list[0x15] = new_value;\n  }\n  else {\n    param_list[0x14] = new_value;\n  }\n  if (condition_1 == 0) {\n    param_list[0xd] = new_value;\n  }\n  else {\n    param_list[0xc] = new_value;\n  }\n  param_list[4] = new_value;\n  *param_list = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_parameters_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_clock_00080e9c",
                "puVar1": "clock_control_register",
                "iVar2": "flash_latency_register",
                "DAT_00080f08": "system_clock_control_register_ptr",
                "DAT_00080f0c": "flash_latency_register_ptr",
                "DAT_00080f10": "FLASH_LATENCY_REGISTER_VALUE",
                "DAT_00080f14": "FLASH_ACCESS_CONTROL_REGISTER_VALUE",
                "DAT_00080f18": "SYSTEM_CORE_CLOCK_VALUE",
                "*puVar1": "*system_clock_control_register_ptr",
                "*(undefined4 *)(DAT_00080f0c + 0x20)": "*(uint32_t *)(flash_latency_register_ptr + 0x20)",
                "*(undefined4 *)(iVar2 + 0x20)": "*(uint32_t *)(flash_latency_register_ptr + 0x20)",
                "*(uint *)(DAT_00080f0c + 0x30)": "*(uint32_t *)(flash_latency_register_ptr + 0x30)",
                "*(undefined4 *)(DAT_00080f0c + 0x28)": "*(uint32_t *)(flash_latency_register_ptr + 0x28)",
                "*(undefined4 *)(DAT_00080f0c + 0x30)": "*(uint32_t *)(flash_latency_register_ptr + 0x30)",
                "*(undefined4 *)PTR_SystemCoreClock_00080f20": "*system_core_clock_ptr"
            },
            "code": "void initialize_system_clock_00080e9c(void)\n{\n  uint32_t *clock_control_register = DAT_00080f08;\n  *DAT_00080f08 = SYSTEM_CLOCK_CONTROL_REGISTER_VALUE;\n  clock_control_register[0x80] = SYSTEM_CLOCK_CONTROL_REGISTER_VALUE;\n  int32_t *flash_latency_register = DAT_00080f0c;\n  if (-1 < *(int32_t *)(DAT_00080f0c + 0x20) << 7) {\n    *(undefined4 *)(DAT_00080f0c + 0x20) = DAT_00080f10;\n    while (-1 < *(int32_t *)(flash_latency_register + 0x68) << 0x1f);\n  }\n  *(undefined4 *)(DAT_00080f0c + 0x20) = DAT_00080f10;\n  while (-1 < *(int32_t *)(flash_latency_register + 0x68) << 0xf);\n  *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int32_t *)(flash_latency_register + 0x68) << 0x1c);\n  *(undefined4 *)(DAT_00080f0c + 0x28) = DAT_00080f14;\n  while (-1 < *(int32_t *)(flash_latency_register + 0x68) << 0x1e);\n  *(uint *)(DAT_00080f0c + 0x30) = DAT_00080f14;\n  while (-1 < *(int32_t *)(flash_latency_register + 0x68) << 0x1c);\n  *(undefined4 *)PTR_SystemCoreClock_00080f20 = DAT_00080f18;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "write_data_to_file_00084464",
                "param_1": "file",
                "param_2": "data_offset",
                "param_3": "data",
                "param_4": "data_size",
                "uVar1": "data_flags"
            },
            "code": "void write_data_to_file_00084464(FILE* file, int data_offset, void* data, size_t data_size)\n{\n    ushort data_flags = *(ushort*)(data_offset + 0xc);\n    if ((int)((uint)data_flags << 0x17) < 0) {\n        _lseek_r(file, (int)*(short*)(data_offset + 0xe), 0, 2);\n        data_flags = *(ushort*)(data_offset + 0xc);\n    }\n    *(ushort*)(data_offset + 0xc) = data_flags & 0xefff;\n    _write_r(file, (int)*(short*)(data_offset + 0xe), data, data_size);\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_00084464"
        },
        "FUN_000847dc": {
            "renaming": {
                "FUN_000847dc": "do_nothing_000847dc"
            },
            "code": "\nvoid do_nothing_000847dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000847dc"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_000811ae",
                "file_UNUSED": "file_not_used"
            },
            "code": "int return_error_000811ae(int file_not_used)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_000811ae"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "software_interrupt_wrapper_00080148",
                "a0": "arg1",
                "a1": "arg2",
                "a2": "arg3"
            },
            "code": "uint32_t software_interrupt_wrapper_00080148(uint32_t arg1, uint32_t arg2, int32_t arg3)\n{\n  software_interrupt(0x3f);\n  return arg1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "software_interrupt_wrapper_00080148"
        },
        "FUN_00080ad8": {
            "renaming": {
                "FUN_00080ad8": "handle_uart_interrupt_00080ad8",
                "PTR_Serial3_00080ae0": "PTR_Serial3"
            },
            "code": "void handle_uart_interrupt_00080ad8(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial3_00080ae0);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ad8",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080ad8"
        },
        "FUN_00084624": {
            "renaming": {
                "FUN_00084624": "flush_and_free_resources_00084624",
                "param_1": "file_descriptor",
                "param_2": "buffer_pointer",
                "uVar1": "result",
                "iVar2": "status"
            },
            "code": "undefined4 flush_and_free_resources_00084624(int file_descriptor, int buffer_pointer) {\n  undefined4 result;\n  int status;\n\n  if (buffer_pointer != 0) {\n    if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(buffer_pointer + 0xc) != 0) {\n      result = _fflush_r(file_descriptor, buffer_pointer);\n      if ((*(code **)(buffer_pointer + 0x2c) != (code *)0x0) && ((status = (**(code **)(buffer_pointer + 0x2c))(file_descriptor, *(undefined4 *)(buffer_pointer + 0x1c))) < 0)) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(buffer_pointer + 0xc) << 0x18) < 0) {\n        _free_r(file_descriptor, *(undefined4 *)(buffer_pointer + 0x10));\n      }\n      if (*(int *)(buffer_pointer + 0x30) != 0) {\n        if (*(int *)(buffer_pointer + 0x30) != buffer_pointer + 0x40) {\n          _free_r(file_descriptor);\n        }\n        *(undefined4 *)(buffer_pointer + 0x30) = 0;\n      }\n      if (*(int *)(buffer_pointer + 0x44) != 0) {\n        _free_r(file_descriptor);\n        *(undefined4 *)(buffer_pointer + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(buffer_pointer + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084624",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_resources_00084624"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "allocate_memory_on_heap_0008118c",
                "incr": "increment_size",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory"
            },
            "code": "caddr_t allocate_memory_on_heap_0008118c(int increment_size)\n{\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  heap_pointer = PTR_heap_000811a0;\n  if (*(int *)PTR_heap_000811a0 == 0) {\n    *(undefined **)PTR_heap_000811a0 = PTR__ebss_000811a4;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + increment_size;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_on_heap_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "calculate_string_length_00082a50",
                "__s": "string",
                "sVar1": "offset",
                "puVar2": "uint_string",
                "uVar3": "current_uint",
                "bVar4": "has_null_terminator"
            },
            "code": "size_t calculate_string_length_00082a50(char* string)\n{\n    size_t length = 0;\n    uint32_t* uint_string = (uint32_t*)((uint32_t)string & 0xfffffffc);\n    size_t offset = -((uint32_t)string & 3);\n    uint32_t current_uint = *uint_string;\n    if (((uint32_t)string & 3) != 0) {\n        current_uint |= 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n    }\n    while (uint_string++, (current_uint + 0xfefefeff & ~current_uint & 0x80808080) == 0) {\n        offset += 4;\n        current_uint = *uint_string;\n    }\n    bool has_null_terminator = (current_uint & 0xff) == 0;\n    if (!has_null_terminator) {\n        offset += 1;\n        has_null_terminator = (current_uint & 0xff00) == 0;\n    }\n    if (!has_null_terminator) {\n        offset += 1;\n        has_null_terminator = (current_uint & 0xff0000) == 0;\n    }\n    if (!has_null_terminator) {\n        offset += 1;\n    }\n    return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "calculate_string_length_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "obj_address",
                "param_2": "new_value"
            },
            "code": "void set_param_value_0008106e(int obj_address, int new_value) {\n\t*(int *)(obj_address + 0x28) = new_value;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_param_value_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "calculate_file_unused_000811c2",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "int calculate_file_unused_000811c2(int file_unused, int ptr_unused, int dir_unused) { return 0; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "calculate_file_unused_000811c2"
        },
        "FUN_000816e0": {
            "renaming": {
                "__thiscall Print::FUN_000816e0": "print_buffer",
                "this": "print_obj",
                "pPVar1": "current_print_obj",
                "sVar2": "bytes_printed",
                "**this->_vptr_Print": "**print_obj->_vptr_Print",
                "uint8_t *buffer": "uint8_t *buffer",
                "size_t size": "size_t size",
                "FUN_000816e0": "print_buffer_000816e0"
            },
            "code": "size_t __thiscall print_buffer_000816e0(Print *print_obj, uint8_t *buffer, size_t size)\n{\n  Print *current_print_obj;\n  size_t bytes_printed = 0;\n  current_print_obj = print_obj;\n  while ((bytes_printed != size && (current_print_obj = (Print *)(**print_obj->_vptr_Print)(current_print_obj, (uint)buffer[bytes_printed]), current_print_obj != (Print *)0x0))) {\n    bytes_printed++;\n  }\n  return bytes_printed;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e0",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_000816e0"
        },
        "FUN_00080acc": {
            "renaming": {
                "FUN_00080acc": "handle_uart_interrupt_00080acc",
                "PTR_Serial2_00080ad4": "serial2_ptr"
            },
            "code": "void handle_uart_interrupt_00080acc(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial2_00080ad4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080acc",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080acc"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "return_zero_000811c6",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "len_UNUSED": "len_unused"
            },
            "code": "int return_zero_000811c6(int file_unused, char *ptr_unused, int len_unused) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "return_zero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "lock",
                "param_2": "size",
                "puVar1": "malloc_av",
                "puVar2": "malloc_info",
                "iVar3": "sbrk_r_result",
                "uVar4": "page_size",
                "iVar5": "space_needed"
            },
            "code": "int allocate_memory_00083d00(void* lock, int size) {\n  void* malloc_av = PTR___malloc_av__00083d90;\n  __malloc_lock();\n  uint page_size = *(uint *)(*(int *)(malloc_av + 8) + 4) & 0xfffffffc;\n  int space_needed = ((page_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < space_needed) {\n    int sbrk_r_result = _sbrk_r(lock,0);\n    if (sbrk_r_result == *(int *)(malloc_av + 8) + page_size) {\n      sbrk_r_result = _sbrk_r(lock,-space_needed);\n      void* malloc_info = PTR___malloc_current_mallinfo_00083d94;\n      if (sbrk_r_result != -1) {\n        int current_mallinfo = *(int *)malloc_info;\n        *(uint *)(*(int *)(malloc_av + 8) + 4) = page_size - space_needed | 1;\n        *(int *)malloc_info = current_mallinfo - space_needed;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      sbrk_r_result = _sbrk_r(lock,0);\n      void* sbrk_base = PTR___malloc_sbrk_base_00083d98;\n      uint new_size = sbrk_r_result - *(int *)(malloc_av + 8);\n      if (0xf < (int)new_size) {\n        int sbrk_base_value = *(int *)sbrk_base;\n        *(uint *)(*(int *)(malloc_av + 8) + 4) = new_size | 1;\n        *(int *)malloc_info = sbrk_r_result - sbrk_base_value;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083d00"
        },
        "FUN_00081d68": {
            "renaming": {
                "FUN_00081d68": "register_exit_process_00081d68",
                "param_1": "exit_code",
                "param_2": "func_ptr",
                "param_3": "arg_ptr",
                "__register_exitproc": "__register_exitproc"
            },
            "code": "void register_exit_process_00081d68(int exit_code, void (*func_ptr)(void), void* arg_ptr) {\n  __register_exitproc(exit_code, func_ptr, arg_ptr, NULL);\n  return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d68",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_process_00081d68"
        }
    },
    "used_tokens": 122062,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00080ce0",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_00081202",
            "FUN_00081720",
            "FUN_00081d1c",
            "FUN_00083988",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081208",
            "FUN_00081c94",
            "FUN_000810f4",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_0008143c",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_00084440",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00083994",
            "FUN_00081454",
            "FUN_00084600",
            "FUN_00081578",
            "FUN_00084728",
            "FUN_0008116a",
            "FUN_000813e0",
            "FUN_00083c40",
            "FUN_0008116e",
            "FUN_000813e4",
            "FUN_00081cbc",
            "FUN_00080aac",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000811a8",
            "FUN_000818c8",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_000810bc",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00084418",
            "FUN_00080d2e",
            "FUN_20070000",
            "FUN_000811f0",
            "FUN_00081704",
            "FUN_00083c10",
            "FUN_00081bec",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081c6c",
            "FUN_00081034",
            "FUN_000844bc",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00080e5c",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_00081c80",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00083b08",
            "FUN_000814a8",
            "FUN_00081084",
            "FUN_00084750",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_0008014c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00080d24",
            "FUN_000818b8",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081be4",
            "FUN_000815ca",
            "FUN_00081894",
            "FUN_00084248",
            "FUN_000845bc",
            "FUN_00081412",
            "FUN_000838cc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_0008112c",
            "FUN_000803d4",
            "FUN_000845d8",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00081580",
            "FUN_00084298",
            "FUN_00080ac0",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081188",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000813f6",
            "FUN_000816d4",
            "FUN_00081074",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_00080148",
            "FUN_00080ad8",
            "FUN_00084624",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000816e0",
            "FUN_00080acc",
            "FUN_000811c6",
            "FUN_00083d00",
            "FUN_00081d68"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081dcc",
            "FUN_000846a4",
            "FUN_000813a8",
            "FUN_00082ab0",
            "FUN_00081e04",
            "FUN_00080ae4",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_0008043e",
            "FUN_00081df4"
        ]
    ],
    "locked_functions": []
}