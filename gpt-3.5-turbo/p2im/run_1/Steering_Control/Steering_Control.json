{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "toggle_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 toggleFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "toggle_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "update_data_values_00080164",
            "code": "\nvoid update_data_values_00080164(undefined4 value_1,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  calculate_updated_value_000806f8(&DAT_200708e8,0x5a);\n  calculate_updated_value_000806f8(&DAT_200708d4,0x5a,value_3,value_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "update_data_values_00080164",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_system_000801e0",
            "code": "\nundefined8 initializeSystem_000801e0(undefined4 unknownParam1,undefined4 unknownParam2,undefined4 configParam,undefined4 dataParam)\n\n{\n  updateConfigFunction(&DAT_20070be8,0xe100,configParam,dataParam,dataParam);\n  processParameter(0xd,1);\n  processParameter(6,1);\n  processParameter(0x39,0);\n  processParameter(4,0);\n  processParameter(3,0);\n  processParameter(2,0);\n  processByte(&DAT_200708d4,5);\n  processByte(&DAT_200708e8,6);\n  updateDataValues();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "param_1": "unknownParam1",
                "param_2": "unknownParam2",
                "param_3": "configParam",
                "param_4": "dataParam",
                "update_function_000813dc": "updateConfigFunction",
                "process_param_00080f0c": "processParameter",
                "process_byte_000806a0": "processByte",
                "update_data_values_00080164": "updateDataValues"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_system_00080250",
            "code": "\nvoid controlSystem_00080250(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined *puVar3;\n  undefined auStack_1c [12];\n  \n  DAT_200708c0 = calculateResult(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  updateParams(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        updateValues();\n        calculateSum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      uVar1 = calculateResult(3,1,20000);\n      DAT_200708d8 = interpolateValues(0,1000,2000,0x28,0x96);\n      DAT_200708ec = interpolateValues(uVar1,1000,2000,0x28,0x96);\n      while (iVar2 = calculateDifference(&DAT_20070be8), 0 < iVar2) {\n        readMemoryByte(&DAT_20070be8);\n        convertDecimalToBase(&DAT_20070be8,DAT_200708d8,10);\n        executeLeadingZeros(&DAT_20070be8,&DAT_00084b13);\n        calculateSum(&DAT_20070be8,DAT_200708ec,10);\n      }\n      updateValue(&DAT_200708e8,DAT_200708ec);\n      updateValue(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        updateValues();\n        calculateSum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      iVar2 = calculateDifference(&DAT_20070be8);\n      if (0 < iVar2) {\n        updateMemoryLoop(auStack_1c,&DAT_20070be8,0x2c);\n        checkAndUpdateParams(&DAT_200708dc,auStack_1c);\n        processAndReturnParam(auStack_1c);\n        updateMemoryLoop(auStack_1c,&DAT_20070be8,10);\n        checkAndUpdateParams(&DAT_200708c8,auStack_1c);\n        processAndReturnParam(auStack_1c);\n        readMemoryByte(&DAT_20070be8);\n        iVar2 = compareAndReturn(&DAT_200708dc,\"steer\");\n        if (iVar2 == 0) goto LAB_0008039c;\n        uVar1 = parseIntFromString(&DAT_200708c8);\n        puVar3 = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    updateValues();\n    calculateSum(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  iVar2 = compareAndReturn(&DAT_200708dc,\"motor\");\n  if (iVar2 != 0) {\n    uVar1 = parseIntFromString(&DAT_200708c8);\n    puVar3 = &DAT_200708e8;\nLAB_000803b2:\n    updateValue(puVar3,uVar1);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "calculate_result_00081624": "calculateResult",
                "process_and_update_params_00081014": "updateParams",
                "update_data_values_00080164": "updateValues",
                "calculate_sum_000810e8": "calculateSum",
                "calculate_interpolation_0008145c": "interpolateValues",
                "calculate_difference_00081248": "calculateDifference",
                "read_byte_from_memory_00081276": "readMemoryByte",
                "thunk_convert_decimal_to_base_or_negative_0008113a": "convertDecimalToBase",
                "execute_leading_zeros_function_000810c4": "executeLeadingZeros",
                "calculate_updated_value_000806f8": "updateValue",
                "calculate_sum_0008117a": "calculateSum",
                "memory_update_loop_00081214": "updateMemoryLoop",
                "check_and_update_parameters_00081560": "checkAndUpdateParams",
                "process_and_return_param_00081472": "processAndReturnParam",
                "compare_and_return_result_000815b8": "compareAndReturn",
                "parse_integer_from_string_000815de": "parseIntFromString"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_and_configure_tc_000803fc",
            "code": "\nvoid initialize_and_configure_tc_000803fc(int channel_index,uint dwChannel,undefined4 param3_value,uint bit_position)\n\n{\n  undefined4 temporary_register_1;\n  undefined4 temporary_register_2;\n  undefined8 combined_params_value;\n  \n  combined_params_value = CONCAT44(dwChannel,channel_index);\n  check_and_update_bit_00080aa8(param3_value);\n  initialize_tc_00080b2c(channel_index,dwChannel,0xc002);\n  update_value_at_offset_00080b90(channel_index,dwChannel,0xa41);\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  *(undefined4 *)(channel_index + dwChannel * 0x40 + 0x24) = 4;\n  if (2 < dwChannel) {\n    combined_params_value = process_assertion_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         temporary_register_1,temporary_register_2);\n  }\n  *(undefined4 *)((int)combined_params_value + (int)((ulonglong)combined_params_value >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_and_configure_tc_000803fc",
                "param_1": "channel_index",
                "param_2": "dwChannel",
                "param_3": "param3_value",
                "param_4": "bit_position",
                "unaff_r4": "temporary_register_1",
                "in_lr": "temporary_register_2",
                "uVar1": "combined_params_value"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_params_0008044c",
            "code": "\nvoid updateParams_0008044c(int index,int data,int offset)\n\n{\n  uint upperLimit;\n  int calculation;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    calculation = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + calculation < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + calculation) * 8] << 0x19) < 0\n       )) {\n      processAndUpdateParams((&DAT_200708f8)[(calculation + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  upperLimit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  calculation = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + calculation < (int)upperLimit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + calculation) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + calculation) * 8] << 0x19\n                  )) {\n      return;\n    }\n    processAndUpdateParams((&DAT_200708f8)[(calculation + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  upperLimit = (ARRAY[6].offsetValue / 1000000) * 20000 >> 5;\n  if (upperLimit <= *(int *)(data + 0x10) + 4U) {\n    upperLimit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = upperLimit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_params_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "upperLimit",
                "iVar2": "calculation",
                "process_and_update_params_00081014": "processAndUpdateParams",
                "Elf32_Rel_ARRAY_20070000": "ARRAY",
                "r_offset": "offsetValue"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_relocation_offset_000805a8",
            "code": "\nvoid updateRelocationOffset_000805a8(byte *destination)\n\n{\n  char updatedValue;\n  uint index;\n  \n  index = (uint)DAT_200708f0;\n  if (index < 0x3c) {\n    updatedValue = DAT_200708f0 + 1;\n    *destination = DAT_200708f0;\n    DAT_200708f0 = updatedValue;\n    *(uint *)(&DAT_200708fc + index * 8) =\n         (relocationArray[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *destination = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_relocation_offset_000805a8",
                "param_1": "destination",
                "cVar1": "updatedValue",
                "uVar2": "index",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "process_byte_000806a0",
            "code": "\nbyte processByte_000806a0(byte *inputData,undefined4 paramValue)\n\n{\n  byte originalByte;\n  undefined4 baseAddress;\n  uint index;\n  undefined4 configValue;\n  int counter;\n  uint byteValue;\n  \n  if (0x3b < *inputData) goto LAB_00080660;\n  process_param_00080f0c(paramValue,1,0x220,*inputData,0x960);\n  byteValue = (uint)*inputData;\n  originalByte = (&DAT_200708f8)[byteValue * 8];\n  inputData[2] = 0;\n  index = byteValue / 0xc;\n  (&DAT_200708f8)[byteValue * 8] = originalByte & 0xc0 | (byte)paramValue & 0x3f;\n  inputData[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    baseAddress = 0x40084000;\n    configValue = 0x1e;\nLAB_0008064c:\n    initialize_and_configure_tc_000803fc(baseAddress,index,configValue,configValue);\n  }\n  else {\n    if (index == 1) {\n      baseAddress = 0x40084000;\n      configValue = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      baseAddress = 0x40084000;\n      configValue = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      baseAddress = 0x40080000;\n      index = 2;\n      configValue = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      baseAddress = 0x40080000;\n      index = 0;\n      configValue = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*inputData * 8] = (&DAT_200708f8)[(uint)*inputData * 8] | 0x40;\nLAB_00080660:\n  return *inputData;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "process_byte_000806a0",
                "param_1": "inputData",
                "param_2": "paramValue",
                "bVar1": "originalByte",
                "uVar2": "baseAddress",
                "uVar3": "index",
                "uVar4": "configValue",
                "iVar5": "counter",
                "uVar6": "byteValue"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "calculate_updated_value_000806f8",
            "code": "\nvoid calculate_updated_value_000806f8(byte *input_data,uint input_size)\n\n{\n  uint tmp_value1;\n  \n  if ((int)input_size < 0x220) {\n    tmp_value1 = input_size;\n    if (0xb3 < (int)input_size) {\n      tmp_value1 = 0xb4;\n    }\n    input_size = interpolate_value(tmp_value1 & ~((int)tmp_value1 >> 0x1f),0,0xb4,(0x88 - (char)input_data[1]) * 4,\n                           (600 - (char)input_data[2]) * 4,input_size);\n  }\n  if (*input_data < 0x3c) {\n    tmp_value1 = (0x88 - (char)input_data[1]) * 4;\n    if (((int)(input_size + (0x88 - (char)input_data[1]) * -4) < 0 == is_subtraction_overflow(input_size,tmp_value1)) &&\n       (tmp_value1 = (600 - (char)input_data[2]) * 4, (int)input_size <= (int)tmp_value1)) {\n      tmp_value1 = input_size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*input_data * 8) =\n         (elf_relocation_array[6].r_offset / 1000000) * (tmp_value1 - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "calculate_updated_value_000806f8",
                "param_1": "input_data",
                "param_2": "input_size",
                "uVar1": "tmp_value1",
                "calculate_interpolation_0008145c": "interpolate_value",
                "SBORROW4": "is_subtraction_overflow",
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_and_configure_system_00080774",
            "code": "\n\n\nvoid initialize_and_configure_system_00080774(void)\n\n{\n  int iterator;\n  int next_iterator;\n  \n  setup_memory_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_system_functions();\n  iterator = 0;\n  do {\n    next_iterator = iterator + 1;\n    process_and_update_parameters(iterator,0);\n    iterator = next_iterator;\n  } while (next_iterator != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter(0x400e0e00,1,0x300,0);\n  process_and_update_parameters(0,1);\n  update_parameter(0x400e0e00,1,0xc00,0);\n  update_parameter(0x400e0e00,1,0x3000,0);\n  update_parameter(0x400e1400,2,0x30,0);\n  update_parameter(0x400e1000,1,0xc00,0);\n  update_parameter(0x400e0e00,1,3,0);\n  update_parameter(0x400e1000,1,0xc000,0);\n  check_and_update_bit(0x25);\n  find_threshold(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  update_system_parameters(0x400c0000,0,0x300000,1);\n  update_register(0x400c0000,0,0);\n  set_parameter_value(0x400c0000,0xffffffff);\n  initialize_memory(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_and_configure_system_00080774",
                "execute_function_set_00081778": "execute_system_functions",
                "iVar1": "iterator",
                "iVar2": "next_iterator",
                "process_and_update_params_00081014": "process_and_update_parameters",
                "update_parameter_00080a30": "update_parameter",
                "check_and_update_bit_00080aa8": "check_and_update_bit",
                "find_threshold_00080c98": "find_threshold",
                "update_parameters_00080d3e": "update_system_parameters",
                "update_register_00080d30": "update_register",
                "set_param_value_00080d6a": "set_parameter_value",
                "initialize_memory_00080d62": "initialize_memory"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_system_0008089c",
            "code": "\nvoid initialize_system_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory_000811b0(&DAT_20070c0c);\n  initialize_memory_000811b0(&DAT_20070b60);\n  initialize_function_parameters_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initialize_memory_000811b0(&DAT_20070e6c);\n  initialize_memory_000811b0(&DAT_20070ef4);\n  initialize_memory_000811b0(&DAT_20070f7c);\n  initialize_memory_000811b0(&DAT_20070ad8);\n  initialize_memory_000811b0(&DAT_20070d0c);\n  initialize_memory_000811b0(&DAT_20070d94);\n  initialize_and_update_data_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_and_update_data_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_and_update_data_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_system_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_call_functions_00080970",
            "code": "\nvoid checkAndCallFunctions_00080970(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculateDifference(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculateDifference(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculateDifference(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_call_functions_00080970",
                "calculate_difference_00081248": "calculateDifference",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_000809be",
            "code": "\nvoid updateParameter_000809be(int baseAddress,undefined4 option,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "baseAddress",
                "param_2": "option",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_000809e4",
            "code": "\nvoid setValues_000809e4(undefined4 *outputArray,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = value;\n  if (isNegative) {\n    outputArray[0x19] = value;\n  }\n  if (!isNegative) {\n    outputArray[0x18] = value;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = value;\n  }\n  if (!isNegative) {\n    outputArray[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = value;\n  }\n  outputArray[5] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "update_parameters_00080a0a",
            "code": "\nvoid updateParameters_00080a0a(undefined4 *parameters,undefined4 value,int param3,int param4,int param5)\n\n{\n  parameters[17] = value;\n  if (param5 == 0) {\n    parameters[24] = value;\n  }\n  else {\n    parameters[25] = value;\n  }\n  if (param4 == 0) {\n    parameters[21] = value;\n  }\n  else {\n    parameters[20] = value;\n  }\n  if (param3 == 0) {\n    parameters[13] = value;\n  }\n  else {\n    parameters[12] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "update_parameters_00080a0a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_1[0x11]": "parameters[17]",
                "param_1[0x18]": "parameters[24]",
                "param_1[0x19]": "parameters[25]",
                "param_1[0x15]": "parameters[21]",
                "param_1[0x14]": "parameters[20]",
                "param_1[0xd]": "parameters[13]",
                "param_1[0xc]": "parameters[12]",
                "param_1[4]": "parameters[4]"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameter_00080a30",
            "code": "\nundefined4 updateParameter_00080a30(int device,int type,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    updateParameter_00080a30Details(device,type,value);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = value;\n    }\n    break;\n  case 3:\n    setValues(device,value,flags,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    updateParameter_00080a30s(device,value,type == 5,(flags << 0x1d) >> 0x1f,flags & 1,type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameter_00080a30",
                "param_1": "device",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flags",
                "bVar1": "isNegative",
                "update_parameter_000809be": "updateParameterDetails",
                "set_values_000809e4": "setValues",
                "update_parameters_00080a0a": "updateParameters"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_flags_00080a94",
            "code": "\nuint checkFlags_00080a94(int ptr,uint flags)\n\n{\n  uint result;\n  \n  result = *(uint *)(ptr + 8) & flags;\n  if (result != 0) {\n    if ((flags & *(uint *)(ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_flags_00080a94",
                "param_1": "ptr",
                "param_2": "flags",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "initialize_tc_00080b2c",
            "code": "\nvoid initializeTC_00080b2c(undefined4 status,uint channelIndex,char *errorMessage)\n\n{\n  int channelOffset;\n  int channelAddress;\n  undefined8 combinedStatus;\n  \n  combinedStatus = CONCAT44(channelIndex,status);\n  if (2 < channelIndex) {\n    errorMessage = \"TC_Configure\";\n    combinedStatus = processAssertion(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  channelOffset = (int)((ulonglong)combinedStatus >> 0x20) * 0x40;\n  channelAddress = (int)combinedStatus + channelOffset;\n  *(undefined4 *)((int)combinedStatus + channelOffset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = errorMessage;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "initialize_tc_00080b2c",
                "param_1": "status",
                "param_2": "channelIndex",
                "param_3": "errorMessage",
                "iVar1": "channelOffset",
                "iVar2": "channelAddress",
                "uVar3": "combinedStatus",
                "process_assertion_000816f8": "processAssertion"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "update_value_at_offset_00080b90",
            "code": "\nvoid updateValueAtOffset_00080b90(int baseAddress,int index,undefined4 newValue)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "update_value_at_offset_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "setup_memory_00080b98",
            "code": "\n\n\nvoid setupMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "setup_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  initialize_system_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "find_threshold_00080c98",
            "code": "\nundefined4 findThreshold_00080c98(undefined4 *outputArray,uint inputSize,int multiplier,int divisor)\n\n{\n  uint divisions;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *outputArray = 1;\n  outputArray[1] = 0;\n  outputArray[0x48] = 0x202;\n  outputArray[0x41] = 0;\n  outputArray[0x45] = 0;\n  divisions = inputSize / (uint)(multiplier * 2);\n  if (inputSize == multiplier * 2 * divisions) {\n    divisions = divisions - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(divisor * (int)(((ulonglong)inputSize / (ulonglong)((divisions + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      outputArray[1] = (index & 0xf) << 0x10 | (divisions & 0xff) << 8 | outputArray[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "find_threshold_00080c98",
                "param_1": "outputArray",
                "param_2": "inputSize",
                "param_3": "multiplier",
                "param_4": "divisor",
                "uVar1": "divisions",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_register_00080d30",
            "code": "\nvoid updateRegister_00080d30(int registerAddress,uint valueToSet,uint bitValue)\n\n{\n  *(uint *)(registerAddress + 4) = valueToSet | *(uint *)(registerAddress + 4) | (bitValue & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_register_00080d30",
                "param_1": "registerAddress",
                "param_2": "valueToSet",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_parameters_00080d3e",
            "code": "\nvoid updateParameters_00080d3e(int pointer,uint inputValue,uint bitMask,uint flag)\n\n{\n  *(uint *)(pointer + 4) =\n       bitMask | *(uint *)(pointer + 4) | (inputValue bitwiseAnd 0xf) << 0x18 | (flag bitwiseAnd 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_parameters_00080d3e",
                "param_1": "pointer",
                "param_2": "inputValue",
                "param_3": "bitMask",
                "param_4": "flag",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_value_00080d58",
            "code": "\nvoid setBitValue_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_value_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_memory_00080d62",
            "code": "\nvoid initializeMemory_00080d62(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_memory_00080d62",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int targetAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(targetAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "targetAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "get_zero_00080e80",
            "code": "\nundefined4 getZero_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "get_zero_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_and_return_previous_value_00080e88",
            "code": "\nint addAndReturnPreviousValue_00080e88(int input)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = input + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_and_return_previous_value_00080e88",
                "param_1": "input",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_default_value_00080eaa",
            "code": "\nundefined4 get_default_value_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_default_value_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_data_00080eb0",
            "code": "\nundefined4 initializeData_00080eb0(undefined4 param1,int dataPointer)\n\n{\n  *(undefined4 *)(dataPointer + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_data_00080eb0",
                "param_1": "param1",
                "param_2": "dataPointer"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "initialize_program_00080eba",
            "code": "\nint initializeProgram_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "initialize_program_00080eba",
                "undefined4": "int"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_zero_00080ebe",
            "code": "\nint getZero_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_zero_00080ebe",
                "undefined4": "int"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "get_error_code_00080ec2",
            "code": "\nundefined4 getErrorCode_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "get_error_code_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "process_bytes_00080ec8",
            "code": "\n\n\nuint processBytes_00080ec8(undefined4 arg1,int arg2,uint arg3)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)arg3; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(arg2 + index);\n  }\n  return arg3 & ~((int)arg3 >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "process_bytes_00080ec8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 UNFIXED_PARAMETER_2,undefined4 message,undefined4 UNFIXED_PARAMETER_4)\n\n{\n  process_data_000817c8(\"Exiting with status %d.\\n\",status,message,UNFIXED_PARAMETER_4,UNFIXED_PARAMETER_4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "UNFIXED_PARAMETER_2",
                "param_3": "message",
                "param_4": "UNFIXED_PARAMETER_4"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_negative_one_00080efe",
            "code": "\nundefined4 getNegativeOne_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_negative_one_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_global_variable_thunk_000816d8",
            "code": "\nundefined4 get_global_variable_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_global_variable_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "process_param_00080f0c",
            "code": "\n\n\nint process_param_00080f0c(int input_param,int action_param)\n\n{\n  int result;\n  uint temp_var1;\n  undefined4 temp_var2;\n  uint temp_var3;\n  byte bit_value1;\n  byte bit_value2;\n  int offset_var1;\n  int offset_var2;\n  \n  result = input_param;\n  if ((&DAT_00084b50)[input_param * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[input_param] & 0xf) == 4) {\n      result = set_bit_value_00080d58(0x400c0000,(&DAT_00084b5d)[input_param * 0x1c]);\n    }\n    bit_value2 = (&DAT_20070e1c)[input_param];\n    bit_value1 = bit_value2 & 0xf;\n    if ((bit_value1 < 3) && (bit_value2 != 0)) {\n      if (bit_value1 == 2) {\n        if (action_param == 0) {\n          return result;\n        }\n      }\n      else if (bit_value1 == 1) {\n        if (action_param == 2) {\n          return result;\n        }\n      }\n      else if (bit_value1 == 3) {\n        if (action_param == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (action_param != 1) {\nLAB_00080f68:\n      if (action_param == 0) {\n        result = input_param * 0x1c;\n        check_and_update_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        bit_value2 = (&DAT_20070e1c)[input_param] & 0xf0 | 2;\n      }\n      else {\n        if (action_param != 2) {\n          return result;\n        }\n        result = input_param * 0x1c;\n        check_and_update_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        bit_value2 = (&DAT_20070e1c)[input_param] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[input_param] = bit_value2;\n      return result;\n    }\n    offset_var1 = input_param * 0x1c;\n    offset_var2 = *(int *)(&DAT_00084b44 + offset_var1);\n    if (bit_value2 >> 4 == 0) {\n      temp_var2 = 4;\n    }\n    else {\n      temp_var2 = 5;\n    }\n    result = update_parameter_00080a30(offset_var2,temp_var2,*(undefined4 *)(&DAT_00084b48 + offset_var1),\n                         *(undefined4 *)(&DAT_00084b54 + offset_var1));\n    (&DAT_20070e1c)[input_param] = (&DAT_20070e1c)[input_param] & 0xf0 | 3;\n    if (*(int *)(offset_var2 + 0x18) == -1) {\n      temp_var1 = *(uint *)(&DAT_00084b4c + offset_var1);\n      if (0x2c < temp_var1) {\n        return 1;\n      }\n      if (temp_var1 < 0x20) {\n        temp_var1 = 1 << (temp_var1 & 0xff);\n        temp_var3 = _DAT_400e0618 & temp_var1;\n        if (temp_var3 == temp_var1) {\n          _DAT_400e0614 = temp_var3;\n        }\n      }\n      else {\n        temp_var1 = 1 << (temp_var1 - 0x20 & 0xff);\n        temp_var3 = _DAT_400e0708 & temp_var1;\n        if (temp_var3 == temp_var1) {\n          _DAT_400e0704 = temp_var3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "process_param_00080f0c",
                "param_1": "input_param",
                "param_2": "action_param",
                "iVar1": "result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "bVar5": "bit_value1",
                "bVar6": "bit_value2",
                "iVar7": "offset_var1",
                "iVar8": "offset_var2"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "process_and_update_params_00081014",
            "code": "\nvoid processAndUpdateParams_00081014(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int address;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      processParam(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084b44 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = checkFlags(address,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = data;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = data;\n      return;\n    }\n    updateParams(address,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "process_and_update_params_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "address",
                "update_parameters_00080a0a": "updateParams",
                "check_flags_00080a94": "checkFlags",
                "process_param_00080f0c": "processParam"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "execute_function_with_leading_zeros_000810a6",
            "code": "\nvoid executeFunctionWithLeadingZeros_000810a6(int *functionPointer,int inputValue,undefined4 leadingZerosCount,undefined4 additionalParam)\n\n{\n  undefined4 zerosCount;\n  \n  if (inputValue != 0) {\n    zerosCount = count_leading_zeros_00082688(inputValue);\n    (**(code **)(*functionPointer + 4))(functionPointer,inputValue,zerosCount,*(code **)(*functionPointer + 4),additionalParam);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "execute_function_with_leading_zeros_000810a6",
                "param_1": "functionPointer",
                "param_2": "inputValue",
                "param_3": "leadingZerosCount",
                "param_4": "additionalParam",
                "uVar1": "zerosCount"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_leading_zeros_function_000810c4",
            "code": "\nvoid execute_leading_zeros_function_000810c4(void)\n\n{\n  execute_function_with_leading_zeros();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_leading_zeros_function_000810c4",
                "execute_function_with_leading_zeros_000810a6": "execute_function_with_leading_zeros"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPtr)\n\n{\n  (**(code **)*functionPtr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPtr"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "execute_function_with_leading_zeros_000810d8",
            "code": "\nvoid execute_function_with_leading_zeros_000810d8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  execute_function_with_leading_zeros_000810d8_000810a6(arg1,&DAT_00085635,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "execute_function_with_leading_zeros_000810d8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int leadingZeros1;\n  int leadingZeros2;\n  \n  leadingZeros1 = execute_function_with_leading_zeros_000810a6();\n  leadingZeros2 = execute_function_with_leading_zeros_000810d8(input);\n  return leadingZeros2 + leadingZeros1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "leadingZeros1",
                "iVar2": "leadingZeros2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_decimal_to_base_000810fc",
            "code": "\nvoid convertDecimalToBase_000810fc(undefined4 inputBuffer,uint decimalNumber,uint base)\n\n{\n  char *outputBuffer;\n  uint quotient;\n  char *currentDigit;\n  char digitValue;\n  uint remainder;\n  char digitBuffer [5];\n  \n  digitBuffer[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  outputBuffer = digitBuffer;\n  do {\n    currentDigit = outputBuffer;\n    quotient = decimalNumber / base;\n    remainder = decimalNumber - base * quotient & 0xff;\n    digitValue = (char)remainder;\n    if (remainder < 10) {\n      digitValue = digitValue + '0';\n    }\n    else {\n      digitValue = digitValue + '7';\n    }\n    *currentDigit = digitValue;\n    decimalNumber = quotient;\n    outputBuffer = currentDigit + -1;\n  } while (quotient != 0);\n  execute_function_with_leading_zeros_000810a6(inputBuffer,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_000810fc",
                "param_1": "inputBuffer",
                "param_2": "decimalNumber",
                "param_3": "base",
                "pcVar1": "outputBuffer",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "digitValue",
                "uVar5": "remainder",
                "local_15": "digitBuffer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_decimal_to_base_or_negative_0008113a",
            "code": "\nint convert_decimal_to_base_or_negative_0008113a(undefined4 *array_ptr,uint decimal_value,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*array_ptr)(array_ptr,decimal_value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)decimal_value < 0) {\n      result = execute_function_000810cc(array_ptr,0x2d);\n      negative_result = convert_decimal_to_base_000810fc(array_ptr,-decimal_value,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_to_base_000810fc(array_ptr,decimal_value,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_decimal_to_base_or_negative_0008113a",
                "param_1": "array_ptr",
                "param_2": "decimal_value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_result"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_base_thunk_0008113a",
            "code": "\nint convertBase_thunk_0008113a(undefined4 *dataBuffer,uint value,uint base,undefined4 param)\n\n{\n  int result;\n  int negativeValue;\n  \n  if (base == 0) {\n    result = (**(code **)*dataBuffer)(dataBuffer,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = execute_function_000810cc(dataBuffer,0x2d);\n      negativeValue = convert_decimal_to_base_000810fc(dataBuffer,-value,10);\n      return negativeValue + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_to_base_000810fc(dataBuffer,value,base,param);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_base_thunk_0008113a",
                "param_1": "dataBuffer",
                "param_2": "value",
                "param_3": "base",
                "param_4": "param",
                "iVar1": "result",
                "iVar2": "negativeValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculateSum_0008117a(undefined4 inputValue)\n\n{\n  int convertedValue;\n  int executedValue;\n  \n  convertedValue = convert_decimal_to_base_or_negative_0008113a();\n  executedValue = execute_function_with_leading_zeros_000810d8(inputValue);\n  return executedValue + convertedValue;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "inputValue",
                "iVar1": "convertedValue",
                "iVar2": "executedValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_zero_r_info_00081190",
            "code": "\nvoid execute_if_zero_r_info_00081190(void)\n\n{\n  if ((relocation_array[6].info != 0xffffffff) &&\n     (relocation_array[6].info = relocation_array[6].info - 1,\n     relocation_array[6].info == 0)) {\n    (*(code *)((int)&relocation_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_zero_r_info_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryPointer)\n\n{\n  clearMemory(memoryPointer,0,0x80);\n  *(undefined4 *)(memoryPointer + 0x80) = 0;\n  *(undefined4 *)(memoryPointer + 0x84) = 0;\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryPointer",
                "memset_00081f00": "clearMemory"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_index_and_store_value_000811ca",
            "code": "\nvoid updateIndexAndStoreValue_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_index_and_store_value_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "check_condition_and_return_index_000811e8",
            "code": "\nint check_condition_and_return_index_000811e8(int *array)\n\n{\n  int global_variable;\n  \n  global_variable = get_global_variable();\n  array[3] = global_variable;\n  do {\n    global_variable = (**(function_ptr **)(*array + 0xc))(array);\n    if (-1 < global_variable) {\n      return global_variable;\n    }\n    global_variable = get_global_variable();\n  } while ((uint)(global_variable - array[3]) < (uint)array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "check_condition_and_return_index_000811e8",
                "param_1": "array",
                "iVar1": "global_variable",
                "get_global_variable_thunk_000816d8": "get_global_variable",
                "code": "function_ptr"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "memory_update_loop_00081214",
            "code": "\nvoid memoryUpdateLoop_00081214(undefined4 memory,undefined4 condition,uint targetIndex)\n\n{\n  uint index;\n  \n  initialize_memory_000814f6(memory,&DAT_00085637);\n  while ((index = check_condition_and_return_index_000811e8(condition), -1 < (int)index && (index != targetIndex))) {\n    update_memory_handler_0008159e(memory,index & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "memory_update_loop_00081214",
                "param_1": "memory",
                "param_2": "condition",
                "param_3": "targetIndex",
                "uVar1": "index"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "read_byte_from_memory_00081276",
            "code": "\nuint readByteFromMemory_00081276(int memAddress)\n\n{\n  byte readByte;\n  int ptrData;\n  \n  ptrData = *(int *)(memAddress + 0x10);\n  if (*(int *)(ptrData + 0x80) != *(int *)(ptrData + 0x84)) {\n    readByte = *(byte *)(ptrData + *(int *)(ptrData + 0x84));\n    *(uint *)(ptrData + 0x84) = *(int *)(ptrData + 0x84) + 1U & 0x7f;\n    return (uint)readByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "read_byte_from_memory_00081276",
                "param_1": "memAddress",
                "bVar1": "readByte",
                "iVar2": "ptrData"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataAddress,undefined4 newValue)\n\n{\n  int ptrData;\n  uint updatedValue;\n  \n  ptrData = *(int *)(dataAddress + 0x14);\n  if ((*(int *)(*(int *)(dataAddress + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrData + 0x84) == *(int *)(ptrData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptrData + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrData + 0x84) == updatedValue);\n    *(char *)(ptrData + *(int *)(ptrData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataAddress + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "iVar1": "ptrData",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_parameters_00081348",
            "code": "\nvoid initializeFunctionParameters_00081348(undefined4 *outputArray,undefined4 inputValue1,undefined inputValue2,undefined4 inputValue3,\n                 undefined4 inputValue4,undefined4 inputValue5)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue1;\n  *outputArray = &PTR_update_data_000812b8_1_00085650;\n  *(undefined *)(outputArray + 7) = inputValue2;\n  outputArray[4] = inputValue4;\n  outputArray[8] = inputValue3;\n  outputArray[5] = inputValue5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_parameters_00081348",
                "param_1": "outputArray",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "param_5": "inputValue4",
                "param_6": "inputValue5"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "update_function_000813dc",
            "code": "\nvoid updateFunction_000813dc(int dataAddress,uint paramValue)\n\n{\n  int tempVar;\n  undefined4 *pointerVar;\n  \n  check_and_update_bit_00080aa8(*(undefined4 *)(dataAddress + 0x20));\n  pointerVar = *(undefined4 **)(dataAddress + 0x18);\n  pointerVar[0x48] = 0x202;\n  *pointerVar = 0xac;\n  pointerVar[1] = 0x800;\n  pointerVar[8] = arrayVar[6].r_offset / paramValue >> 4;\n  pointerVar[3] = 0xffffffff;\n  pointerVar[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(dataAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(dataAddress + 0x1c) & 0x1f);\n  tempVar = *(int *)(dataAddress + 0x10);\n  *(undefined4 *)(tempVar + 0x84) = 0;\n  *(undefined4 *)(tempVar + 0x80) = 0;\n  tempVar = *(int *)(dataAddress + 0x14);\n  *(undefined4 *)(tempVar + 0x84) = 0;\n  *(undefined4 *)(tempVar + 0x80) = 0;\n  *pointerVar = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "update_function_000813dc",
                "param_1": "dataAddress",
                "param_2": "paramValue",
                "iVar1": "tempVar",
                "puVar2": "pointerVar",
                "Elf32_Rel_ARRAY_20070000": "arrayVar"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_and_update_data_00081438",
            "code": "\nundefined4 * initializeAndUpdateData_00081438(undefined4 *dataPtr,undefined4 updateValue)\n\n{\n  initialize_function_parameters_00081348();\n  *dataPtr = &PTR_update_data_000812b8_1_00085680;\n  dataPtr[9] = updateValue;\n  return dataPtr;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_and_update_data_00081438",
                "param_1": "dataPtr",
                "param_2": "updateValue"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculate_interpolation_0008145c(int start_value,int start_range,int end_range,int start_output,int end_output)\n\n{\n  return (uint)((start_value - start_range) * (end_output - start_output)) / (uint)(end_range - start_range) + start_output;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "start_value",
                "param_2": "start_range",
                "param_3": "end_range",
                "param_4": "start_output",
                "param_5": "end_output"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "process_and_return_param_00081472",
            "code": "\nundefined4 * process_and_return_param_00081472(undefined4 *param)\n\n{\n  process_relocation(*param);\n  return param;\n}\n\n",
            "renaming": {
                "FUN_00081472": "process_and_return_param_00081472",
                "param_1": "param",
                "process_relocation_00081800": "process_relocation"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_and_process_relocation_00081480",
            "code": "\nvoid resetAndProcessRelocation_00081480(int *ptr)\n\n{\n  if (*ptr != 0) {\n    processRelocation();\n  }\n  *ptr = 0;\n  ptr[2] = 0;\n  ptr[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_and_process_relocation_00081480",
                "param_1": "ptr",
                "process_relocation_00081800": "processRelocation",
                "param_1[1]": "ptr[1]",
                "param_1[2]": "ptr[2]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "update_memory_allocation_00081496",
            "code": "\nint update_memory_allocation_00081496(int *memory_block,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  result = update_memory_allocation_00081496_00081f9c(*memory_block,size + 1,param_3,param_4,param_4);\n  if (result != 0) {\n    *memory_block = result;\n    memory_block[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "update_memory_allocation_00081496",
                "param_1": "memory_block",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_update_memory_000814ae",
            "code": "\nundefined4 checkAndUpdateMemory_000814ae(int *memoryBlock,uint requiredSize)\n\n{\n  int allocationResult;\n  \n  if ((*memoryBlock == 0) || ((uint)memoryBlock[1] < requiredSize)) {\n    allocationResult = update_memory_allocation_00081496(memoryBlock);\n    if (allocationResult == 0) {\n      return 0;\n    }\n    if (memoryBlock[2] == 0) {\n      *(undefined *)*memoryBlock = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_update_memory_000814ae",
                "param_1": "memoryBlock",
                "param_2": "requiredSize",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "process_memory_000814d0",
            "code": "\nundefined4 * process_memory_000814d0(undefined4 *memory_array,undefined4 source_string,undefined4 memory_value)\n\n{\n  int memory_check_result;\n  \n  memory_check_result = check_and_update_memory_000814ae(memory_array,memory_value);\n  if (memory_check_result == 0) {\n    reset_and_process_relocation_00081480(memory_array);\n  }\n  else {\n    memory_array[2] = memory_value;\n    copy_string_with_alignment_check_000825cc(*memory_array,source_string);\n  }\n  return memory_array;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "process_memory_000814d0",
                "param_1": "memory_array",
                "param_2": "source_string",
                "param_3": "memory_value",
                "iVar1": "memory_check_result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_memory_000814f6",
            "code": "\nundefined4 * initializeMemory_000814f6(undefined4 *memoryArray,int inputValue)\n\n{\n  undefined4 leadingZerosCount;\n  \n  *memoryArray = 0;\n  memoryArray[1] = 0;\n  memoryArray[2] = 0;\n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082688(inputValue);\n    process_memory_000814d0(memoryArray,inputValue,leadingZerosCount);\n  }\n  return memoryArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_memory_000814f6",
                "param_1": "memoryArray",
                "param_2": "inputValue",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_parameters_0008151c",
            "code": "\nvoid updateParameters_0008151c(int *destination,int *source)\n\n{\n  if (*destination != 0) {\n    if ((*source != 0) && ((uint)source[2] <= (uint)destination[1])) {\n      copyString;\n      destination[2] = source[2];\n      goto LAB_00081558;\n    }\n    processRelocation;\n  }\n  *destination = *source;\n  destination[1] = source[1];\n  destination[2] = source[2];\n  *source = 0;\n  source[1] = 0;\nLAB_00081558:\n  source[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_parameters_0008151c",
                "param_1": "destination",
                "param_2": "source",
                "copy_string_with_alignment_check_000825cc()": "copyString",
                "process_relocation_00081800()": "processRelocation"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_update_parameters_00081560",
            "code": "\nint check_and_update_parameters_00081560(int input_param,int comparison_param)\n\n{\n  if (input_param != comparison_param) {\n    update_parameters_0008151c();\n  }\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_update_parameters_00081560",
                "param_1": "input_param",
                "param_2": "comparison_param"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "handle_memory_update_00081570",
            "code": "\nundefined4 handleMemoryUpdate_00081570(int *memArray,int size,int offset)\n\n{\n  int checkResult;\n  int currentOffset;\n  \n  currentOffset = memArray[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    checkResult = check_and_update_memory_000814ae(memArray,currentOffset + offset);\n    if (checkResult == 0) {\n      return 0;\n    }\n    copy_string_with_alignment_check_000825cc(*memArray + memArray[2],size);\n    memArray[2] = currentOffset + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "handle_memory_update_00081570",
                "param_1": "memArray",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "checkResult",
                "iVar2": "currentOffset"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "update_memory_handler_0008159e",
            "code": "\nvoid updateMemoryHandler_0008159e(undefined4 memoryParam1,undefined4 memoryParam2,undefined4 memoryParam3)\n\n{\n  undefined4 localVariableC;\n  undefined4 updateStack8;\n  \n  updateStack8 = memoryParam3;\n  handle_memory_update_00081570(memoryParam1,&localVariableC,1,0,memoryParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "update_memory_handler_0008159e",
                "param_1": "memoryParam1",
                "param_2": "memoryParam2",
                "param_3": "memoryParam3",
                "local_c": "localVariableC",
                "uStack_8": "updateStack8"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "compare_and_return_result_000815b8",
            "code": "\nint compareAndReturnResult_000815b8(byte **inputArray,byte *inputPointer)\n\n{\n  uint arrayLength;\n  int result;\n  \n  if (inputArray[2] == (byte *)0x0) {\n    if (inputPointer == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (inputPointer != (byte *)0x0) {\n      arrayLength = compare_unsigned_integers_00082390(*inputArray);\n      goto LAB_000815d4;\n    }\n    inputPointer = *inputArray;\n  }\n  arrayLength = (uint)*inputPointer;\nLAB_000815d4:\n  result = 1 - arrayLength;\n  if (1 < arrayLength) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "compare_and_return_result_000815b8",
                "param_1": "inputArray",
                "param_2": "inputPointer",
                "uVar1": "arrayLength",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_from_string_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_from_string_000815de(byte **string_ptr)\n\n{\n  byte character;\n  byte is_negative;\n  uint result;\n  byte *current_char_ptr;\n  uint current_char_value;\n  byte *next_char_ptr;\n  int integer_value;\n  int is_valid;\n  uint max_divisor;\n  uint max_value;\n  \n  current_char_ptr = *string_ptr;\n  if (*string_ptr == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_char_ptr = current_char_ptr;\n    current_char_ptr = next_char_ptr + 1;\n    current_char_value = (uint)*next_char_ptr;\n    character = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + current_char_value + 1);\n    is_negative = character & 8;\n  } while ((character & 8) != 0);\n  if (current_char_value == 0x2d) {\n    current_char_ptr = next_char_ptr + 2;\n    current_char_value = (uint)next_char_ptr[1];\n    is_negative = 1;\n  }\n  else if (current_char_value == 0x2b) {\n    current_char_value = (uint)next_char_ptr[1];\n    current_char_ptr = next_char_ptr + 2;\n  }\n  if (is_negative == 0) {\n    max_value = 0x7fffffff;\n  }\n  else {\n    max_value = 0x80000000;\n  }\n  max_divisor = max_value / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    character = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + current_char_value + 1);\n    if ((character & 4) == 0) {\n      if ((character & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((character & 3) == 1) {\n        integer_value = 0x37;\n      }\n      else {\n        integer_value = 0x57;\n      }\n      integer_value = current_char_value - integer_value;\n    }\n    else {\n      integer_value = current_char_value - 0x30;\n    }\n    if (9 < integer_value) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_divisor <= result && result != max_divisor) || ((result == max_divisor && ((int)(max_value % 10) < integer_value))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + integer_value;\n        is_valid = 1;\n      }\n    }\n    current_char_value = (uint)*current_char_ptr;\n    current_char_ptr = current_char_ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_from_string_000815de",
                "param_1": "string_ptr",
                "bVar1": "character",
                "bVar2": "is_negative",
                "uVar3": "result",
                "pbVar4": "current_char_ptr",
                "uVar5": "current_char_value",
                "pbVar6": "next_char_ptr",
                "iVar7": "integer_value",
                "iVar8": "is_valid",
                "uVar9": "max_divisor",
                "uVar10": "max_value"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "initialize_system_000815ec",
            "code": "\nvoid initialize_system_000815ec(void)\n\n{\n  initialize_memory();\n  initialize_and_configure_system();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initialize_system_000815ec();\n  do {\n    execute_control();\n    check_and_call_functions();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "initialize_system_000815ec",
                "initialize_memory_00081618": "initialize_memory",
                "initialize_and_configure_system_00080774": "initialize_and_configure_system",
                "initialize_system_000801e0": "initialize_system",
                "control_system_00080250": "execute_control",
                "check_and_call_functions_00080970": "check_and_call_functions"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int flag,int multiplier,undefined4 constant)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = checkParams(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((relocationArray[6].r_offset / 1000000) * multiplier) / 0x12,constant);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)relocationArray[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "constant",
                "iVar1": "result",
                "uVar2": "value",
                "check_params_00081684": "checkParams",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_params_00081684",
            "code": "\nint check_params_00081684(uint *data_ptr,uint mask,uint expected_value,int num_iterations)\n\n{\n  int result;\n  \n  do {\n    if ((*data_ptr & mask) != expected_value) {\n      do {\n        if ((*data_ptr & mask) == expected_value) {\n          result = 0;\n          do {\n            if ((*data_ptr & mask) != expected_value) {\n              return result;\n            }\n            result = result + 1;\n          } while (num_iterations != result);\n          return 0;\n        }\n        num_iterations = num_iterations + -1;\n      } while (num_iterations != 0);\n      return 0;\n    }\n    num_iterations = num_iterations + -1;\n  } while (num_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_params_00081684",
                "param_1": "data_ptr",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "num_iterations",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_data_000816d8",
            "code": "\nundefined4 get_global_data_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_data_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_table_000816ec",
            "code": "\nvoid updateRelocationTable_000816ec(dword newAddress,dword newValue,dword oldValue)\n\n{\n  dword *relocatedTable;\n  uint index;\n  uint bitmask;\n  code *jumpTableFunction;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocatedTable = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocatedTable = (dword *)allocate_memory_000817f0(400);\n    if (relocatedTable == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunction)(0xffffffff);\n      return;\n    }\n    *relocatedTable = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocatedTable[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocatedTable;\n    relocatedTable[0x62] = 0;\n    relocatedTable[99] = 0;\n  }\n  bitmask = 1 << (index & 0xff);\n  relocatedTable[index + 0x22] = newAddress;\n  relocatedTable[0x62] = relocatedTable[0x62] | bitmask;\n  relocatedTable[index + 0x42] = oldValue;\n  relocatedTable[99] = bitmask | relocatedTable[99];\n  relocatedTable[1] = index + 1;\n  relocatedTable[index + 2] = newValue;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunction)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_table_000816ec",
                "param_1": "newAddress",
                "param_2": "newValue",
                "param_3": "oldValue",
                "pdVar1": "relocatedTable",
                "uVar2": "index",
                "uVar3": "bitmask",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "process_assertion_000816f8",
            "code": "\nvoid processAssertion_000816f8(undefined4 assertion,undefined4 file,char *message,undefined4 line)\n\n{\n  undefined4 assertionOffset;\n  undefined4 lineOffset;\n  char *functionLabel;\n  undefined8 processResult;\n  \n  assertionOffset = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (message == (char *)0x0) goto LAB_0008171c;\n  lineOffset = line;\n  functionLabel = \", function: \";\n  do {\n    line = assertion;\n    process_data_00081750(assertionOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",lineOffset,assertion,file,\n                 functionLabel,message);\n    processResult = initialize_process_000836ec();\n    file = (undefined4)((ulonglong)processResult >> 0x20);\n    assertionOffset = (undefined4)processResult;\nLAB_0008171c:\n    message = \"\";\n    lineOffset = line;\n    functionLabel = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "process_assertion_000816f8",
                "param_1": "assertion",
                "param_2": "file",
                "param_3": "message",
                "param_4": "line",
                "uVar1": "assertionOffset",
                "uVar2": "lineOffset",
                "pcVar3": "functionLabel",
                "uVar4": "processResult"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "process_data_00081750",
            "code": "\nvoid processData_00081750(undefined4 offset,undefined4 param2,undefined4 data,undefined4 size)\n\n{\n  undefined4 offsetData;\n  undefined4 sizeData;\n  \n  offsetData = data;\n  sizeData = size;\n  process_data_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,param2,&offsetData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "process_data_00081750",
                "param_1": "offset",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "size",
                "uStack_8": "offsetData",
                "uStack_4": "sizeData"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_set_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSet_00081778(void)\n\n{\n  int iterationCount;\n  code **functionSetPointer;\n  \n  FUNC_00085844();\n  functionSetPointer = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionSetPointer = functionSetPointer + 1;\n    (**functionSetPointer)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_set_00081778",
                "ppcVar2": "functionSetPointer",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "process_data_000817c8",
            "code": "\nvoid processData_000817c8(undefined4 inputParam,undefined4 stackVar1,undefined4 stackVar2,undefined4 stackVar3)\n\n{\n  undefined4 stackVar4;\n  undefined4 stackVar5;\n  undefined4 stackVar6;\n  \n  stackVar4 = stackVar1;\n  stackVar5 = stackVar2;\n  stackVar6 = stackVar3;\n  process_data_0008289c(relArray[140].offset,\n               *(undefined4 *)(relArray[140].offset + 8),inputParam,&stackVar4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "inputParam",
                "param_2": "stackVar1",
                "param_3": "stackVar2",
                "param_4": "stackVar3",
                "uStack_c": "stackVar4",
                "uStack_8": "stackVar5",
                "uStack_4": "stackVar6",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid allocateMemory_000817f0(undefined4 param)\n\n{\n  allocate_memory_00081810(relArray[140].offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "process_relocation_00081800",
            "code": "\nvoid process_relocation_00081800(undefined4 relocation_address)\n\n{\n  process_relocation_00081800_00083b10(Elf32_Rel_ARRAY_20070000[140].r_offset,relocation_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "process_relocation_00081800",
                "param_1": "relocation_address"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081810(undefined4 *memory_pointer,uint size)\n\n{\n  dword temp1;\n  int temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  dword temp7;\n  uint temp8;\n  int temp9;\n  undefined *pointer;\n  dword temp10;\n  dword temp11;\n  int temp12;\n  dword *pointer2;\n  uint temp13;\n  undefined *pointer3;\n  dword *pointer4;\n  uint temp14;\n  \n  if (size + 0xb < 0x17) {\n    temp13 = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    temp13 = size + 0xb & 0xfffffff8;\n    if (((int)temp13 < 0) || (temp13 < size)) {\nLAB_00081876:\n      *memory_pointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(memory_pointer);\n  temp1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (temp13 < 0x1f8) {\n    temp12 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + temp13);\n    if ((temp12 != temp13 + 0x20070464) ||\n       (temp2 = temp12 + 8, temp12 = *(int *)(temp12 + 0x14), temp2 != temp12)) {\n      temp5 = *(int *)(temp12 + 0xc);\n      temp9 = (*(uint *)(temp12 + 4) & 0xfffffffc) + temp12;\n      temp13 = *(uint *)(temp9 + 4);\n      temp2 = *(int *)(temp12 + 8);\n      *(int *)(temp2 + 0xc) = temp5;\n      *(int *)(temp5 + 8) = temp2;\n      *(uint *)(temp9 + 4) = temp13 | 1;\n      FUNC_00081f98(memory_pointer);\n      return (int *)(temp12 + 8);\n    }\n    temp14 = (temp13 >> 3) + 2;\n  }\n  else {\n    temp14 = temp13 >> 9;\n    if (temp14 == 0) {\n      temp2 = 0x7e;\n      temp12 = 0x3f;\n    }\n    else if (temp14 < 5) {\n      temp12 = (temp13 >> 6) + 0x38;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x15) {\n      temp12 = temp14 + 0x5b;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x55) {\n      temp12 = (temp13 >> 0xc) + 0x6e;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x155) {\n      temp12 = (temp13 >> 0xf) + 0x77;\n      temp2 = temp12 * 2;\n    }\n    else if (temp14 < 0x555) {\n      temp12 = (temp13 >> 0x12) + 0x7c;\n      temp2 = temp12 * 2;\n    }\n    else {\n      temp2 = 0xfc;\n      temp12 = 0x7e;\n    }\n    for (temp7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp2]; temp2 * 4 + 0x20070464U != temp7\n        ; temp7 = *(dword *)(temp7 + 0xc)) {\n      temp14 = *(uint *)(temp7 + 4) & 0xfffffffc;\n      temp5 = temp14 - temp13;\n      if (0xf < temp5) {\n        temp12 = temp12 + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        temp2 = temp14 + temp7;\n        temp13 = *(uint *)(temp2 + 4);\n        temp5 = *(int *)(temp7 + 0xc);\n        temp12 = *(int *)(temp7 + 8);\n        *(int *)(temp12 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp12;\n        *(uint *)(temp2 + 4) = temp13 | 1;\n        FUNC_00081f98(memory_pointer);\n        return (int *)(temp7 + 8);\n      }\n    }\n    temp14 = temp12 + 1;\n  }\n  temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp4 = temp3 & 0xfffffffc;\n    temp6 = temp4 - temp13;\n    if (0xf < (int)temp6) {\n      temp7 = temp13 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = temp13 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = temp7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = temp7;\n      *(undefined4 *)(temp7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp7 + 8) = 0x2007046c;\n      *(uint *)(temp7 + 4) = temp6 | 1;\n      *(uint *)(temp7 + temp6) = temp6;\n      FUNC_00081f98(memory_pointer);\n      return (int *)(temp1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp6) {\n      *(uint *)(temp4 + temp1 + 4) = *(uint *)(temp4 + temp1 + 4) | 1;\n      FUNC_00081f98(memory_pointer);\n      return (int *)(temp1 + 8);\n    }\n    if (temp4 < 0x200) {\n      temp4 = temp3 & 0xfffffff8;\n      temp12 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4);\n      temp7 = 1 << ((int)(temp3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(temp1 + 8) = temp12;\n      *(uint *)(temp1 + 0xc) = temp4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = temp7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4) = temp1;\n      *(dword *)(temp12 + 0xc) = temp1;\n    }\n    else {\n      temp6 = temp3 >> 9;\n      if (temp6 < 5) {\n        temp2 = (temp3 >> 6) + 0x38;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x15) {\n        temp2 = temp6 + 0x5b;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x55) {\n        temp2 = (temp3 >> 0xc) + 0x6e;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x155) {\n        temp2 = (temp3 >> 0xf) + 0x77;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x555) {\n        temp2 = (temp3 >> 0x12) + 0x7c;\n        temp12 = temp2 * 2;\n      }\n      else {\n        temp12 = 0xfc;\n        temp2 = 0x7e;\n      }\n      temp7 = temp12 * 4 + 0x20070464;\n      temp10 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp12];\n      if (temp10 == temp7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp2 >> 2 & 0xffU);\n        temp11 = temp10;\n      }\n      else {\n        do {\n          temp11 = temp10;\n          if ((*(uint *)(temp10 + 4) & 0xfffffffc) <= temp4) break;\n          temp10 = *(dword *)(temp10 + 8);\n          temp11 = temp10;\n        } while (temp7 != temp10);\n        temp10 = *(dword *)(temp11 + 0xc);\n      }\n      temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(temp1 + 0xc) = temp10;\n      *(dword *)(temp1 + 8) = temp11;\n      *(dword *)(temp10 + 8) = temp1;\n      *(dword *)(temp11 + 0xc) = temp1;\n    }\n  }\n  temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp3 = 1 << ((int)temp14 >> 2 & 0xffU);\n  if (temp3 <= temp7) {\n    if ((temp7 & temp3) == 0) {\n      temp14 = temp14 & 0xfffffffc;\n      do {\n        temp3 = temp3 << 1;\n        temp14 = temp14 + 4;\n      } while ((temp7 & temp3) == 0);\n    }\n    do {\n      pointer4 = &Elf32_Rel_ARRAY_20070000[temp14 + 0x8c].r_info;\n      pointer2 = pointer4;\n      temp4 = temp14;\n      do {\n        for (pointer = (undefined *)pointer2[3]; pointer2 != (dword *)pointer;\n            pointer = *(undefined **)(pointer + 0xc)) {\n          temp6 = *(uint *)(pointer + 4) & 0xfffffffc;\n          temp8 = temp6 - temp13;\n          if (0xf < (int)temp8) {\n            temp2 = *(int *)(pointer + 8);\n            temp12 = *(int *)(pointer + 0xc);\n            pointer3 = pointer + temp13;\n            *(uint *)(pointer + 4) = temp13 | 1;\n            *(int *)(temp2 + 0xc) = temp12;\n            *(int *)(temp12 + 8) = temp2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)pointer3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)pointer3;\n            *(undefined4 *)(pointer3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(pointer3 + 8) = 0x2007046c;\n            *(uint *)(pointer3 + 4) = temp8 | 1;\n            *(uint *)(pointer3 + temp8) = temp8;\n            FUNC_00081f98(memory_pointer);\n            return (int *)(pointer + 8);\n          }\n          if (-1 < (int)temp8) {\n            temp12 = *(int *)(pointer + 8);\n            temp2 = *(int *)(pointer + 0xc);\n            *(uint *)(pointer + temp6 + 4) = *(uint *)(pointer + temp6 + 4) | 1;\n            *(int *)(temp12 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp12;\n            FUNC_00081f98(memory_pointer);\n            return (int *)(pointer + 8);\n          }\n        }\n        temp4 = temp4 + 1;\n        pointer2 = pointer2 + 2;\n      } while ((temp4 & 3) != 0);\n      do {\n        temp6 = temp14 & 3;\n        pointer = (undefined *)(pointer4 + -2);\n        temp14 = temp14 - 1;\n        if (temp6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp3;\n          break;\n        }\n        pointer4 = (dword *)*pointer4;\n      } while (pointer4 == (dword *)pointer);\n      temp3 = temp3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp3 &&\n           temp3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp14 = temp4, temp3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp3) == 0; temp3 = temp3 << 1) {\n        temp14 = temp14 + 4;\n      }\n    } while( true );\n  }\n  temp14 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((temp13 <= temp14) &&\n     (temp3 = temp14 - temp13, temp7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp3))\n  goto LAB_00081b1a;\n  temp3 = Elf32_Rel_ARRAY_20070000[141].r_info + temp14;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp4 = temp13 + DAT_20071218 + 0x10;\n  }\n  else {\n    temp4 = temp13 + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  temp7 = extract_value_from_binary_0008236c(memory_pointer,temp4);\n  if ((temp7 == 0xffffffff) || ((temp7 < temp3 && (temp1 != 0x20070464)))) {\n    temp14 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp6 = DAT_2007121c + temp4;\n    DAT_2007121c = temp6;\n    if ((temp3 == temp7) && ((temp3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp4 + temp14 | 1;\n    }\n    else {\n      temp10 = temp7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp10 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = temp6 + (temp7 - temp3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp10;\n      temp3 = temp7 & 7;\n      if (temp3 == 0) {\n        temp12 = 0x1000;\n      }\n      else {\n        temp7 = temp7 + (8 - temp3);\n        temp12 = 0x1008 - temp3;\n      }\n      temp12 = temp12 - (temp4 + temp7 & 0xfff);\n      temp2 = extract_value_from_binary_0008236c(memory_pointer,temp12);\n      if (temp2 == -1) {\n        temp3 = 1;\n        temp12 = 0;\n      }\n      else {\n        temp3 = (temp2 - temp7) + temp12 | 1;\n      }\n      temp6 = DAT_2007121c + temp12;\n      Elf32_Rel_ARRAY_20070000[141].r_info = temp7;\n      DAT_2007121c = temp6;\n      *(uint *)(temp7 + 4) = temp3;\n      if (temp1 != 0x20070464) {\n        if (temp14 < 0x10) {\n          *(undefined4 *)(temp7 + 4) = 1;\n          temp14 = 0;\n          goto LAB_00081b04;\n        }\n        temp14 = temp14 - 0xc & 0xfffffff8;\n        *(uint *)(temp1 + 4) = temp14 | *(uint *)(temp1 + 4) & 1;\n        *(undefined4 *)(temp1 + temp14 + 4) = 5;\n        *(undefined4 *)(temp1 + temp14 + 8) = 5;\n        if (0xf < temp14) {\n          process_relocation_00083b10(memory_pointer,temp1 + 8);\n          temp6 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp6) {\n      DAT_20071214 = temp6;\n    }\n    if (DAT_20071210 < temp6) {\n      DAT_20071210 = temp6;\n    }\n    temp14 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp3 = temp14 - temp13;\n  if ((temp14 < temp13) || ((int)temp3 < 0x10)) {\n    FUNC_00081f98(memory_pointer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = temp13 + temp7;\n  *(uint *)(temp7 + 4) = temp13 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 | 1;\n  FUNC_00081f98(memory_pointer);\n  return (int *)(temp7 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "memory_pointer",
                "param_2": "size",
                "dVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "dVar7": "temp7",
                "uVar8": "temp8",
                "iVar9": "temp9",
                "puVar10": "pointer",
                "dVar11": "temp10",
                "dVar12": "temp11",
                "iVar13": "temp12",
                "pdVar14": "pointer2",
                "uVar15": "temp13",
                "puVar16": "pointer3",
                "pdVar17": "pointer4",
                "uVar18": "temp14"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_and_pad_memory_00081d48",
            "code": "\nundefined4 * copyAndPadMemory_00081d48(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrCopy;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint loopIterations;\n  bool loopCondition;\n  \n  destPtrCopy = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      loopIterations = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          srcPtr = destPtrCopy;\n          loopCondition = loopIterations != 0;\n          loopIterations = loopIterations - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrCopy = (undefined4 *)((int)srcPtr + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      loopIterations = 4 - ((uint)dest & 3);\n      size = size - loopIterations;\n      destPtr = dest;\n      srcPtr = src;\n      if (((uint)dest & 1) != 0) {\n        srcPtr = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destPtrCopy = destPtr;\n      src = srcPtr;\n      if ((loopIterations & 2) != 0) {\n        src = (undefined4 *)((int)srcPtr + 2);\n        destPtrCopy = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtrCopy = *src;\n    destPtrCopy[1] = src[1];\n    destPtrCopy[2] = src[2];\n    destPtrCopy[3] = src[3];\n    destPtrCopy[4] = src[4];\n    destPtrCopy[5] = src[5];\n    destPtrCopy[6] = src[6];\n    destPtrCopy[7] = src[7];\n    destPtrCopy[8] = src[8];\n    destPtrCopy[9] = src[9];\n    destPtrCopy[10] = src[10];\n    destPtrCopy[0xb] = src[0xb];\n    destPtrCopy[0xc] = src[0xc];\n    destPtrCopy[0xd] = src[0xd];\n    destPtrCopy[0xe] = src[0xe];\n    destPtrCopy[0xf] = src[0xf];\n    destPtrCopy = destPtrCopy + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtrCopy = *src;\n      destPtrCopy[1] = src[1];\n      destPtrCopy[2] = src[2];\n      destPtrCopy[3] = src[3];\n      destPtrCopy = destPtrCopy + 4;\n      src = src + 4;\n      loopCondition = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (loopCondition);\n  }\n  loopIterations = remainingSize + 0xc;\n  srcPtr = destPtrCopy;\n  destPtr = src;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      src = destPtr + 1;\n      *srcPtr = *destPtr;\n      loopCondition = 3 < loopIterations;\n      loopIterations = loopIterations - 4;\n      destPtrCopy = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = src;\n    } while (loopCondition);\n  }\nLAB_00081dcc:\n  if (loopIterations + 4 != 0) {\n    destPtr = destPtrCopy;\n    srcPtr = src;\n    if ((loopIterations & 1) != 0) {\n      srcPtr = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destPtrCopy + 1);\n      *(undefined *)destPtrCopy = *(undefined *)src;\n    }\n    if ((loopIterations + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_and_pad_memory_00081d48",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrCopy",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "loopIterations",
                "bVar6": "loopCondition"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *destEndPtr;\n  uint tempVar;\n  undefined *destBytePtr;\n  uint uVar7;\n  \n  if ((source < destination) && (destEndPtr = (undefined4 *)((int)source + size), destination < destEndPtr)) {\n    destBytePtr = (undefined *)((int)destination + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        destEndPtr = (undefined4 *)((int)destEndPtr + -1);\n        index = index + -1;\n        destBytePtr = destBytePtr + -1;\n        *destBytePtr = *(undefined *)destEndPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    destEndPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = destEndPtr + 4;\n      *destEndPtr = *srcPtr;\n      destEndPtr[1] = srcPtr[1];\n      destEndPtr[2] = srcPtr[2];\n      destEndPtr[3] = srcPtr[3];\n      destEndPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    uVar7 = size & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    tempVar = uVar7;\n    destEndPtr = destination;\n    srcPtr = source;\n    if (3 < uVar7) {\n      do {\n        tempVar = tempVar - 4;\n        *destEndPtr = *srcPtr;\n        destEndPtr = destEndPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempVar);\n      index = (uVar7 - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      uVar7 = size & 3;\n    }\n    size = uVar7;\n    if (size == 0) {\n      return;\n    }\n  }\n  destEndPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)destEndPtr + 1);\n    *(undefined *)destEndPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    destEndPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "destEndPtr",
                "uVar5": "tempVar",
                "puVar6": "destBytePtr"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid memset_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_ptr_next;\n  undefined4 value_concat;\n  uint size_remain;\n  bool size_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    size_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (size_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      size_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_concat = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    size_remain = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      size_remain = size - 0x10;\n      do {\n        *dest_ptr = value_concat;\n        dest_ptr[1] = value_concat;\n        dest_ptr[2] = value_concat;\n        dest_ptr[3] = value_concat;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size_remain & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((size_remain >> 4) + 1) * 4;\n      size_remain = size;\n      dest_ptr = dest;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *dest = value_concat;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (size_remain - 4 & 0xfffffffc) + 4);\n    size = size_remain & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      dest_ptr_next = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = dest_ptr_next;\n    } while (dest_ptr_next != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr_next",
                "uVar3": "value_concat",
                "uVar4": "size_remain",
                "bVar5": "size_zero"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "update_memory_allocation_00081f9c",
            "code": "\nvoid updateMemoryAllocation_00081f9c(undefined4 address,undefined4 param)\n\n{\n  allocate_or_update_memory_00081fac(relocationArray[140].offset,address,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "update_memory_allocation_00081f9c",
                "param_1": "address",
                "param_2": "param",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_or_update_memory_00081fac",
            "code": "\nint * allocate_or_update_memory_00081fac(undefined4 *memory_params,int *existing_memory,uint requested_size)\n\n{\n  dword temp_var1;\n  int *new_memory;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  int *temp_ptr1;\n  uint temp_var6;\n  uint temp_var7;\n  int *temp_ptr2;\n  \n  if (existing_memory == (int *)0x0) {\n    new_memory = (int *)allocate_memory_00081810(memory_params,requested_size);\n    return new_memory;\n  }\n  FUNC_00081f94();\n  temp_var4 = existing_memory[-1];\n  temp_var6 = temp_var4 & 0xfffffffc;\n  new_memory = existing_memory + -2;\n  if (requested_size + 0xb < 0x17) {\n    temp_var7 = 0x10;\n  }\n  else {\n    temp_var7 = requested_size + 0xb & 0xfffffff8;\n    if ((int)temp_var7 < 0) goto LAB_00082078;\n  }\n  if (temp_var7 < requested_size) {\nLAB_00082078:\n    *memory_params = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var6 < (int)temp_var7) {\n    temp_var1 = (int)new_memory + temp_var6;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_var1) {\n      temp_var2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_var1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var6)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_memory + temp_var7;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_var2 + temp_var6) - temp_var7 | 1;\n        existing_memory[-1] = temp_var7 | existing_memory[-1] & 1U;\n        FUNC_00081f98(memory_params);\n        return existing_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_var2 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)temp_var7 <= (int)(temp_var2 + temp_var6)) {\n        temp_var5 = *(int *)(temp_var1 + 0xc);\n        temp_var3 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var2 + temp_var6;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp_var2 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_ptr2 = (int *)((int)new_memory - existing_memory[-2]);\n      temp_var4 = (temp_ptr2[1] & 0xfffffffcU) + temp_var6;\n      if (temp_var1 != 0) {\n        if (temp_var1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var4)) {\n            new_memory = temp_ptr2 + 2;\n            temp_var3 = *new_memory;\n            temp_var5 = temp_ptr2[3];\n            temp_var6 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            if (temp_var6 < 0x25) {\n              temp_ptr1 = new_memory;\n              if (0x13 < temp_var6) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (temp_var6 < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  temp_ptr1 = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (temp_var6 == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    temp_ptr1 = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *temp_ptr1;\n                    temp_ptr1 = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    temp_ptr1 = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *existing_memory;\n              temp_ptr1[1] = existing_memory[1];\n              temp_ptr1[2] = existing_memory[2];\n            }\n            else {\n              copy_memory_00081e34(new_memory,existing_memory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_ptr2 + temp_var7;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_var2 + temp_var4) - temp_var7 | 1;\n            temp_ptr2[1] = temp_var7 | temp_ptr2[1] & 1U;\n            FUNC_00081f98(memory_params);\n            return new_memory;\n          }\n        }\n        else {\n          temp_var2 = temp_var2 + temp_var4;\n          if ((int)temp_var7 <= (int)temp_var2) {\n            temp_var5 = *(int *)(temp_var1 + 0xc);\n            temp_var3 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_ptr1 = temp_ptr2 + 2;\n            temp_var3 = *temp_ptr1;\n            temp_var5 = temp_ptr2[3];\n            temp_var4 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var6 = temp_var2;\n            if (temp_var4 < 0x25) {\n              new_memory = temp_ptr1;\n              if (0x13 < temp_var4) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (temp_var4 < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  new_memory = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (temp_var4 == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    new_memory = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *new_memory;\n                    new_memory = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    new_memory = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *new_memory = *existing_memory;\n              new_memory[1] = existing_memory[1];\n              new_memory[2] = existing_memory[2];\n              temp_var4 = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr1;\n            }\n            else {\n              copy_memory_00081e34(temp_ptr1,existing_memory);\n              temp_var4 = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr1;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)temp_var7 <= (int)temp_var4) {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp_var3 = *temp_ptr1;\n        temp_var5 = temp_ptr2[3];\n        temp_var2 = temp_var6 - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var4;\n        if (temp_var2 < 0x25) {\n          new_memory = temp_ptr1;\n          if (0x13 < temp_var2) {\n            temp_ptr2[2] = *existing_memory;\n            temp_ptr2[3] = existing_memory[1];\n            if (temp_var2 < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = existing_memory[2];\n              temp_ptr2[5] = existing_memory[3];\n              if (temp_var2 == 0x24) {\n                temp_ptr2[6] = existing_memory[4];\n                new_memory = existing_memory + 5;\n                existing_memory = existing_memory + 6;\n                temp_ptr2[7] = *new_memory;\n                new_memory = temp_ptr2 + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = temp_ptr2 + 6;\n              }\n            }\n          }\n          *new_memory = *existing_memory;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          temp_var4 = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr1;\n        }\n        else {\n          copy_memory_00081e34(temp_ptr1,existing_memory);\n          temp_var4 = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr1;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_ptr2 = (int *)allocate_memory_00081810(memory_params,requested_size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000820a0;\n    temp_var4 = existing_memory[-1];\n    if (temp_ptr2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)new_memory)) {\n      temp_var6 = temp_var6 - 4;\n      if (temp_var6 < 0x25) {\n        new_memory = existing_memory;\n        temp_ptr1 = temp_ptr2;\n        if (0x13 < temp_var6) {\n          *temp_ptr2 = *existing_memory;\n          temp_ptr2[1] = existing_memory[1];\n          if (temp_var6 < 0x1c) {\n            new_memory = existing_memory + 2;\n            temp_ptr1 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = existing_memory[2];\n            temp_ptr2[3] = existing_memory[3];\n            if (temp_var6 == 0x24) {\n              temp_ptr2[4] = existing_memory[4];\n              temp_ptr2[5] = existing_memory[5];\n              new_memory = existing_memory + 6;\n              temp_ptr1 = temp_ptr2 + 6;\n            }\n            else {\n              new_memory = existing_memory + 4;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *new_memory;\n        temp_ptr1[1] = new_memory[1];\n        temp_ptr1[2] = new_memory[2];\n      }\n      else {\n        copy_memory_00081e34(temp_ptr2,existing_memory);\n      }\n      process_relocation_00083b10(memory_params,existing_memory);\n      goto LAB_000820a0;\n    }\n    temp_var6 = temp_var6 + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp_var2 = temp_var6 - temp_var7;\n  temp_ptr2 = existing_memory;\n  if (temp_var2 < 0x10) {\n    new_memory[1] = temp_var4 & 1 | temp_var6;\n    *(uint *)((int)new_memory + temp_var6 + 4) = *(uint *)((int)new_memory + temp_var6 + 4) | 1;\n  }\n  else {\n    new_memory[1] = temp_var4 & 1 | temp_var7;\n    *(uint *)((int)new_memory + temp_var7 + 4) = temp_var2 | 1;\n    *(uint *)((int)new_memory + temp_var2 + temp_var7 + 4) = *(uint *)((int)new_memory + temp_var2 + temp_var7 + 4) | 1;\n    process_relocation_00083b10(memory_params,(int)new_memory + temp_var7 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(memory_params);\n  return temp_ptr2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_or_update_memory_00081fac",
                "param_1": "memory_params",
                "param_2": "existing_memory",
                "param_3": "requested_size",
                "dVar1": "temp_var1",
                "piVar2": "new_memory",
                "uVar3": "temp_var2",
                "iVar4": "temp_var3",
                "uVar5": "temp_var4",
                "iVar6": "temp_var5",
                "piVar7": "temp_ptr1",
                "uVar8": "temp_var6",
                "uVar9": "temp_var7",
                "piVar10": "temp_ptr2"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "extract_value_from_binary_0008236c",
            "code": "\nvoid extractValueFromBinary_0008236c(int *outputValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = add_and_return_previous_value_00080e88(inputValue);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "extract_value_from_binary_0008236c",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_unsigned_integers_00082390",
            "code": "\nint compareUnsignedIntegers_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (temp1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)array2 & 3;\n    if (temp1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      temp1 = *ptr1;\n      ptr2 = array2 + 1;\n      temp3 = *array2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\nLAB_0008259a:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      temp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp2 = *array1;\n        temp3 = array1[1];\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto LAB_0008258e;\n        temp4 = *ptr1;\n        temp1 = ptr1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    temp1 = *array1;\n    temp2 = array1[1];\n    temp3 = *array2;\n    temp4 = array2[1];\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto LAB_0008259a;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\nLAB_0008259e:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 | temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - LZCOUNT(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\nLAB_0008258e:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_unsigned_integers_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_with_alignment_check_000825cc",
            "code": "\nvoid copyStringWithAlignmentCheck_000825cc(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *srcPtr;\n  uint *srcPtrAligned;\n  uint currentValue;\n  uint rotatedValue;\n  uint *destPtr;\n  bool isZeroByte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    srcPtrAligned = src;\n    if (((uint)src & 1) != 0) {\n      srcPtrAligned = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = srcPtrAligned;\n    if (((uint)srcPtrAligned & 2) != 0) {\n      src = (uint *)((int)srcPtrAligned + 2);\n      currentShort = *(ushort *)srcPtrAligned;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentValue = *src;\n  srcPtrAligned = src + 1;\n  destPtr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_00082630;\n    destPtr = dest + 1;\n    *dest = currentValue;\n    srcPtrAligned = src + 2;\n    currentValue = src[1];\n  }\n  while( true ) {\n    srcPtr = srcPtrAligned + 1;\n    rotatedValue = *srcPtrAligned;\n    dest = destPtr;\n    if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) break;\n    dest = destPtr + 1;\n    *destPtr = currentValue;\n    currentValue = rotatedValue;\n    if ((rotatedValue + 0xfefefeff & ~rotatedValue & 0x80808080) != 0) break;\n    srcPtrAligned = srcPtrAligned + 2;\n    currentValue = *srcPtr;\n    destPtr = destPtr + 2;\n    *dest = rotatedValue;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)currentValue;\n    rotatedValue = currentValue & 0xff;\n    currentValue = currentValue >> 8 | currentValue << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (rotatedValue != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_check_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "srcPtr",
                "puVar4": "srcPtrAligned",
                "uVar5": "currentValue",
                "uVar6": "rotatedValue",
                "puVar7": "destPtr",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint countLeadingZeros_00082688(uint input)\n\n{\n  int offset;\n  uint *data;\n  uint value;\n  bool isZero;\n  \n  data = (uint *)(input & 0xfffffffc);\n  offset = -(input & 3);\n  value = *data;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while (data = data + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    offset = offset + 4;\n    value = *data;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    offset = offset + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    offset = offset + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    offset = offset + 1;\n  }\n  return offset;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "offset",
                "puVar2": "data",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 param1,int param2,int **param3)\n\n{\n  int *ptr1;\n  int index;\n  int *ptr2;\n  uint counter;\n  undefined4 *ptr3;\n  uint value;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    index = process_data_00083ca8();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return index;\n  }\n  ptr2 = param3[2];\n  ptr1 = *param3;\n  while (ptr2 != (int *)0x0) {\n    value = ptr1[1];\n    shiftedValue = value >> 2;\n    if (shiftedValue != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      counter = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        index = process_data_000839b4(param1,*ptr3,param2);\n        counter = counter + 1;\n        if (index == -1) goto LAB_00082864;\n      } while (shiftedValue != counter);\n      ptr2 = param3[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value & 0xfffffffc));\n    param3[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  index = 0;\nLAB_00082864:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return index;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "ptr1",
                "iVar2": "index",
                "piVar3": "ptr2",
                "uVar4": "counter",
                "puVar5": "ptr3",
                "uVar6": "value",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "process_data_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint processData_0008289c(int dataPointer,int paramPointer,int *******formatString,int **arguments)\n\n{\n  bool isLong;\n  bool isNegative;\n  bool isUnsigned;\n  char signChar;\n  bool addZeros;\n  int ********pcurrentPointer;\n  int *integerPointer;\n  int returnValue;\n  char cVar9;\n  int *******currentArg;\n  uint digit;\n  int **tempPointer;\n  uint flags;\n  uint character;\n  int count;\n  int ********pointerArray;\n  int tempCount;\n  int *******remainingFormat;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint multiplier;\n  int *piVar22;\n  int *******tempFormatPointer;\n  undefined4 uVar24;\n  int ********ptempFormatPointer2;\n  bool isNegative6;\n  longlong lVar27;\n  int *******formatLength;\n  int *******remainingLength;\n  int **argPointer;\n  int processedDataLength;\n  char *hexChars;\n  char charA;\n  undefined charB;\n  undefined charC;\n  int ********pointerArray2;\n  int arrayIndex;\n  int *******totalLength;\n  undefined digitChar;\n  char cStack_6a;\n  undefined zeroChar;\n  undefined pointerArray1 [4];\n  int *******localArray [16];\n  \n  if ((dataPointer != 0) && (*(int *)(dataPointer + 0x38) == 0)) {\n    initialize_data_00083888();\n  }\n  flags = (uint)*(ushort *)(paramPointer + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(paramPointer + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(paramPointer + 0xc) = (short)flags;\n    *(uint *)(paramPointer + 100) = *(uint *)(paramPointer + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(paramPointer + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    returnValue = initialize_0008356c(dataPointer,paramPointer);\n    if (returnValue != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(paramPointer + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(paramPointer + 0xe)) {\n    returnValue = process_data_000834f0(dataPointer,paramPointer,formatString,arguments);\n    return returnValue;\n  }\nLAB_000828ee:\n  hexChars = (char *)0x0;\n  totalLength = (int *******)0x0;\n  arrayIndex = 0;\n  processedDataLength = 0;\n  pcurrentPointer = (int ********)pointerArray1;\n  argPointer = arguments;\n  pointerArray2 = (int ********)pointerArray1;\nLAB_00082902:\n  currentArg = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      currentArg = (int *******)((int)currentArg + 1);\n      if (*(char *)currentArg == '\\0') break;\n    } while (*(char *)currentArg != '%');\n    pppppppiVar20 = (int *******)((int)currentArg - (int)formatString);\n    if (pppppppiVar20 != (int *******)0x0) {\n      arrayIndex = arrayIndex + 1;\n      totalLength = (int *******)((int)totalLength + (int)pppppppiVar20);\n      *pcurrentPointer = formatString;\n      pcurrentPointer[1] = pppppppiVar20;\n      if (arrayIndex < 8) {\n        pcurrentPointer = pcurrentPointer + 2;\n      }\n      else {\n        if (totalLength == (int *******)0x0) {\n          processedDataLength = processedDataLength + (int)pppppppiVar20;\n          arrayIndex = 0;\n          pcurrentPointer = (int ********)pointerArray1;\n          goto LAB_00082952;\n        }\n        returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n        pcurrentPointer = (int ********)pointerArray1;\n        if (returnValue != 0) goto LAB_00083142;\n      }\n      processedDataLength = processedDataLength + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)currentArg != '\\0') {\n    charA = '\\0';\n    character = (uint)*(byte *)((int)currentArg + 1);\n    flags = 0;\n    addZeros = false;\n    isNegative = false;\n    isLong = false;\n    isUnsigned = false;\n    isNegative6 = false;\n    pppppppiVar20 = (int *******)0x0;\n    remainingLength = (int *******)0xffffffff;\n    formatString = (int *******)((int)currentArg + 1);\nLAB_00082976:\n    formatString = (int *******)((int)formatString + 1);\nLAB_0008297a:\n    switch(character) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (character != 0) {\n        formatLength = (int *******)0x1;\n        remainingLength = (int *******)0x1;\n        ptempFormatPointer2 = (int ********)&digitChar;\n        digitChar = (char)character;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isUnsigned = true;\n      character = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*argPointer;\n      argPointer = argPointer + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      character = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2b:\n      character = (uint)*(byte *)formatString;\n      charA = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      character = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2e:\n      character = (uint)*(byte *)formatString;\n      currentArg = (int *******)((int)formatString + 1);\n      if (character == 0x2a) {\n        character = (uint)*(byte *)((int)formatString + 1);\n        remainingLength = (int *******)*argPointer;\n        argPointer = argPointer + 1;\n        formatString = currentArg;\n        if ((int)remainingLength < 0) {\n          remainingLength = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = character - 0x30;\n      if (digit < 10) {\n        multiplier = 0;\n        do {\n          formatString = (int *******)((int)currentArg + 1);\n          character = (uint)*(byte *)currentArg;\n          multiplier = digit + multiplier * 10;\n          digit = character - 0x30;\n          currentArg = formatString;\n        } while (digit < 10);\n        remainingLength = (int *******)(multiplier | (int)multiplier >> 0x1f);\n      }\n      else {\n        remainingLength = (int *******)0x0;\n        formatString = currentArg;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      character = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isNegative = true;\n      if (isLong == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      piVar19 = *argPointer;\n      piVar22 = argPointer[1];\n      argPointer = argPointer + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isNegative = true;\n      if (isLong != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      returnValue = (uint)isNegative << 4;\n      count = (uint)isLong << 5;\n      if ((isNegative == 0) && (count = (uint)isNegative6 << 6, isNegative6 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)argPointer;\n        argPointer = argPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        returnValue = count;\n        piVar19 = *argPointer;\n        argPointer = argPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isNegative = true;\n      if (isLong != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isNegative) || (isNegative6 == false)) {\n        returnValue = 1;\n        piVar19 = *argPointer;\n        argPointer = argPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)argPointer;\n        argPointer = argPointer + 1;\n        returnValue = 1;\n      }\n      break;\n    case 0x58:\n      hexChars = \"0123456789ABCDEF\";\n      if (isLong == false) goto LAB_00082efa;\nLAB_00082d1a:\n      tempPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      argPointer = tempPointer + 2;\n      piVar19 = *tempPointer;\n      piVar22 = tempPointer[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar19 = *argPointer;\n      argPointer = argPointer + 1;\n      formatLength = (int *******)0x1;\n      digitChar = SUB41(piVar19,0);\n      remainingLength = (int *******)0x1;\n      ptempFormatPointer2 = (int ********)&digitChar;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isLong != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isNegative == false) && (isNegative6 != false)) {\n        piVar19 = (int *)(int)*(short *)argPointer;\n        argPointer = argPointer + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *argPointer;\n        argPointer = argPointer + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        isNegative6 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)isNegative6);\n        charA = '-';\n        signChar = '-';\n        returnValue = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)remainingLength) {\n        flags = flags & 0xffffff7f;\n      }\n      addZeros = false;\n      character = (uint)piVar19 | (uint)piVar22;\n      returnValue = 1;\n      signChar = charA;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isNegative6 = true;\n      character = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x6c:\n      character = (uint)*(byte *)formatString;\n      if (character == 0x6c) {\n        isLong = true;\n        character = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        isNegative = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isLong == false) {\n        if (isNegative == false) {\n          if (isNegative6) {\n            piVar19 = *argPointer;\n            argPointer = argPointer + 1;\n            *(short *)piVar19 = (short)processedDataLength;\n          }\n          else {\n            piVar19 = *argPointer;\n            argPointer = argPointer + 1;\n            *piVar19 = processedDataLength;\n          }\n        }\n        else {\n          piVar19 = *argPointer;\n          argPointer = argPointer + 1;\n          *piVar19 = processedDataLength;\n        }\n      }\n      else {\n        piVar19 = *argPointer;\n        argPointer = argPointer + 1;\n        *piVar19 = processedDataLength;\n        piVar19[1] = processedDataLength >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isLong == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      tempPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      argPointer = tempPointer + 2;\n      piVar19 = *tempPointer;\n      piVar22 = tempPointer[1];\n      returnValue = 0;\n      break;\n    case 0x70:\n      piVar19 = *argPointer;\n      argPointer = argPointer + 1;\n      charC = 0x78;\n      addZeros = true;\n      piVar22 = (int *)0x0;\n      charB = 0x30;\n      hexChars = \"0123456789abcdef\";\n      returnValue = 2;\n      break;\n    case 0x71:\n      isLong = true;\n      character = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x73:\n      ptempFormatPointer2 = (int ********)*argPointer;\n      charA = '\\0';\n      argPointer = argPointer + 1;\n      if (ptempFormatPointer2 != (int ********)0x0) {\n        if ((int)remainingLength < 0) {\n          remainingLength = (int *******)count_leading_zeros_00082688(ptempFormatPointer2);\n          currentArg = (int *******)0x0;\n          signChar = charA;\n        }\n        else {\n          returnValue = find_first_occurrence_000840f8(ptempFormatPointer2,0,remainingLength);\n          signChar = charA;\n          if (returnValue == 0) {\n            currentArg = (int *******)0x0;\n          }\n          else {\n            remainingFormat = (int *******)(returnValue - (int)ptempFormatPointer2);\n            if ((int)remainingLength <= (int)(int *******)(returnValue - (int)ptempFormatPointer2)) {\n              remainingFormat = remainingLength;\n            }\n            currentArg = (int *******)0x0;\n            remainingLength = remainingFormat;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < remainingLength) {\n        remainingLength = (int *******)0x6;\n      }\n      formatLength = (int *******)((uint)remainingLength & ~((int)remainingLength >> 0x1f));\n      ptempFormatPointer2 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      charA = '\\0';\n      currentArg = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isLong) goto LAB_00082ce0;\nLAB_00082bc6:\n      tempPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      argPointer = tempPointer + 2;\n      piVar19 = *tempPointer;\n      piVar22 = tempPointer[1];\n      returnValue = 1;\n      break;\n    case 0x78:\n      hexChars = \"0123456789abcdef\";\n      if (isLong != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isNegative == false) && (isNegative6 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)argPointer;\n        argPointer = argPointer + 1;\n      }\n      else {\n        piVar19 = *argPointer;\n        argPointer = argPointer + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isUnsigned) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        addZeros = true;\n        charB = 0x30;\n        returnValue = 2;\n        charC = (char)character;\n      }\n      else {\n        returnValue = 2;\n      }\n    }\n    charA = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)remainingLength) {\n      flags = flags & 0xffffff7f;\n    }\n    character = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082adc:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    currentArg = remainingLength;\n    if ((character == 0) && (remainingLength == (int *******)0x0)) {\n      ptempFormatPointer2 = (int ********)pointerArray1;\n      if ((returnValue != 0) || (!isUnsigned)) goto LAB_00082b04;\n      ptempFormatPointer2 = (int ********)(&cStack_6a + 1);\n      zeroChar = '0';\n      goto LAB_00082afe;\n    }\n    if (returnValue == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        pointerArray = (int ********)(&cStack_6a + 1);\n        do {\n          ptempFormatPointer2 = pointerArray;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          check_and_update_00084530((int)lVar27,uVar24,10,0);\n          *(char *)ptempFormatPointer2 = cVar9 + '0';\n          lVar27 = check_and_update_00084530((int)lVar27,uVar24,10,0);\n          pointerArray = (int ********)((int)ptempFormatPointer2 + -1);\n        } while (lVar27 != 0);\n        remainingLength = (int *******)((int)pointerArray1 - (int)ptempFormatPointer2);\n        goto LAB_00082b04;\n      }\n      zeroChar = (char)piVar19 + '0';\n      ptempFormatPointer2 = (int ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    pointerArray = (int ********)(&cStack_6a + 1);\n    if (returnValue != 2) goto LAB_000830e2;\n    do {\n      ptempFormatPointer2 = pointerArray;\n      character = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ptempFormatPointer2 = hexChars[character];\n      pointerArray = (int ********)((int)ptempFormatPointer2 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    remainingLength = (int *******)((int)pointerArray1 - (int)ptempFormatPointer2);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (totalLength != (int *******)0x0) {\n    process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(paramPointer + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return processedDataLength;\nLAB_000830e2:\n  do {\n    ptempFormatPointer2 = pointerArray;\n    integerPointer = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    returnValue = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ptempFormatPointer2 = (char)returnValue;\n    pointerArray = (int ********)((int)ptempFormatPointer2 + -1);\n    piVar19 = integerPointer;\n  } while (((uint)integerPointer | (uint)piVar22) != 0);\n  if (isUnsigned) {\n    if (returnValue == 0x30) {\nLAB_00082afe:\n      remainingLength = (int *******)((int)pointerArray1 - (int)ptempFormatPointer2);\n    }\n    else {\n      *(undefined *)((int)ptempFormatPointer2 + -1) = 0x30;\n      ptempFormatPointer2 = pointerArray;\n      remainingLength = (int *******)((int)pointerArray1 - (int)pointerArray);\n    }\n  }\n  else {\nLAB_00083282:\n    remainingLength = (int *******)((int)pointerArray1 - (int)ptempFormatPointer2);\n  }\nLAB_00082b04:\n  formatLength = remainingLength;\n  if ((int)remainingLength < (int)currentArg) {\n    formatLength = currentArg;\n  }\n  if (signChar != '\\0') {\n    formatLength = (int *******)((int)formatLength + 1);\n  }\nLAB_00082b1e:\n  if (addZeros) {\n    formatLength = (int *******)((int)formatLength + 2);\n  }\n  if ((flags == 0) &&\n     (remainingFormat = (int *******)((int)pppppppiVar20 - (int)formatLength), 0 < (int)remainingFormat)) {\n    if ((int)remainingFormat < 0x11) {\n      arrayIndex = arrayIndex + 1;\n    }\n    else {\n      do {\n        tempFormatPointer = remainingFormat;\n        returnValue = arrayIndex + 1;\n        totalLength = totalLength + 4;\n        *pcurrentPointer = (int *******)0x856f0;\n        pcurrentPointer[1] = (int *******)0x10;\n        if (returnValue < 8) {\n          count = arrayIndex + 2;\n          pcurrentPointer = pcurrentPointer + 2;\n          arrayIndex = returnValue;\n        }\n        else if (totalLength == (int *******)0x0) {\n          count = 1;\n          pcurrentPointer = (int ********)pointerArray1;\n          arrayIndex = 0;\n        }\n        else {\n          arrayIndex = returnValue;\n          returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n          if (returnValue != 0) goto LAB_00083142;\n          count = arrayIndex + 1;\n          pcurrentPointer = (int ********)pointerArray1;\n        }\n        remainingFormat = tempFormatPointer + -4;\n      } while (0x10 < (int)remainingFormat);\n      remainingFormat = tempFormatPointer + -4;\n      arrayIndex = count;\n    }\n    totalLength = (int *******)((int)totalLength + (int)remainingFormat);\n    *pcurrentPointer = (int *******)0x856f0;\n    pcurrentPointer[1] = remainingFormat;\n    if (arrayIndex < 8) {\n      returnValue = arrayIndex + 1;\n      pcurrentPointer = pcurrentPointer + 2;\n    }\n    else if (totalLength == (int *******)0x0) {\n      returnValue = 1;\n      arrayIndex = 0;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n    else {\n      returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n      if (returnValue != 0) goto LAB_00083142;\n      returnValue = arrayIndex + 1;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n  }\n  else {\n    returnValue = arrayIndex + 1;\n  }\n  count = returnValue;\n  if (charA != '\\0') {\n    totalLength = (int *******)((int)totalLength + 1);\n    count = 1;\n    *pcurrentPointer = (int *******)&charA;\n    pcurrentPointer[1] = (int *******)0x1;\n    arrayIndex = returnValue;\n    if (returnValue < 8) {\n      count = returnValue + 1;\n      pcurrentPointer = pcurrentPointer + 2;\n    }\n    else if (totalLength == (int *******)0x0) {\n      arrayIndex = 0;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n    else {\n      returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n      if (returnValue != 0) goto LAB_00083142;\n      count = arrayIndex + 1;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n  }\n  returnValue = count;\n  tempCount = arrayIndex;\n  if (addZeros) {\n    totalLength = (int *******)((int)totalLength + 2);\n    *pcurrentPointer = (int *******)&charB;\n    pcurrentPointer[1] = (int *******)0x2;\n    if (count < 8) {\n      returnValue = count + 1;\n      tempCount = count;\n      pcurrentPointer = pcurrentPointer + 2;\n    }\n    else if (totalLength == (int *******)0x0) {\n      returnValue = 1;\n      tempCount = 0;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n    else {\n      arrayIndex = count;\n      returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n      if (returnValue != 0) goto LAB_00083142;\n      returnValue = arrayIndex + 1;\n      tempCount = arrayIndex;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n  }\n  arrayIndex = tempCount;\n  if ((flags == 0x80) &&\n     (remainingFormat = (int *******)((int)pppppppiVar20 - (int)formatLength), 0 < (int)remainingFormat)) {\n    if (0x10 < (int)remainingFormat) {\n      do {\n        while( true ) {\n          tempFormatPointer = remainingFormat;\n          arrayIndex = tempCount + 1;\n          totalLength = totalLength + 4;\n          *pcurrentPointer = (int *******)\"0000000000000000\";\n          pcurrentPointer[1] = (int *******)0x10;\n          if (7 < arrayIndex) break;\n          returnValue = tempCount + 2;\n          pcurrentPointer = pcurrentPointer + 2;\nLAB_000831f2:\n          tempCount = arrayIndex;\n          remainingFormat = tempFormatPointer + -4;\n          if ((int)(tempFormatPointer + -4) < 0x11) goto LAB_00083218;\n        }\n        if (totalLength != (int *******)0x0) {\n          returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n          if (returnValue == 0) {\n            returnValue = arrayIndex + 1;\n            pcurrentPointer = (int ********)pointerArray1;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        returnValue = 1;\n        tempCount = 0;\n        remainingFormat = tempFormatPointer + -4;\n        pcurrentPointer = (int ********)pointerArray1;\n      } while (0x10 < (int)(tempFormatPointer + -4));\nLAB_00083218:\n      remainingFormat = tempFormatPointer + -4;\n    }\n    totalLength = (int *******)((int)totalLength + (int)remainingFormat);\n    *pcurrentPointer = (int *******)\"0000000000000000\";\n    pcurrentPointer[1] = remainingFormat;\n    arrayIndex = returnValue;\n    if (returnValue < 8) {\n      returnValue = returnValue + 1;\n      pcurrentPointer = pcurrentPointer + 2;\n    }\n    else if (totalLength == (int *******)0x0) {\n      returnValue = 1;\n      arrayIndex = 0;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n    else {\n      returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n      if (returnValue != 0) goto LAB_00083142;\n      returnValue = arrayIndex + 1;\n      pcurrentPointer = (int ********)pointerArray1;\n    }\n  }\n  currentArg = (int *******)((int)currentArg - (int)remainingLength);\n  pointerArray = (int ********)pointerArray1;\n  if ((int)currentArg < 1) {\nLAB_0008302a:\n    totalLength = (int *******)((int)totalLength + (int)remainingLength);\n    *pcurrentPointer = (int *******)ptempFormatPointer2;\n    pcurrentPointer[1] = remainingLength;\n    remainingLength = totalLength;\n    arrayIndex = returnValue;\n    if (returnValue < 8) goto LAB_000831be;\n    if (totalLength == (int *******)0x0) {\n      arrayIndex = 0;\n    }\n    else {\n      returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n      if (returnValue != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    count = arrayIndex;\n    if (0x10 < (int)currentArg) {\n      do {\n        while( true ) {\n          remainingFormat = currentArg;\n          arrayIndex = count + 1;\n          totalLength = totalLength + 4;\n          *pcurrentPointer = (int *******)\"0000000000000000\";\n          pcurrentPointer[1] = (int *******)0x10;\n          if (7 < arrayIndex) break;\n          returnValue = count + 2;\n          pcurrentPointer = pcurrentPointer + 2;\nLAB_00082fe6:\n          count = arrayIndex;\n          currentArg = remainingFormat + -4;\n          if ((int)(remainingFormat + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (totalLength != (int *******)0x0) {\n          returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n          if (returnValue == 0) {\n            returnValue = arrayIndex + 1;\n            pcurrentPointer = (int ********)pointerArray1;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        returnValue = 1;\n        pcurrentPointer = (int ********)pointerArray1;\n        count = 0;\n        currentArg = remainingFormat + -4;\n      } while (0x10 < (int)(remainingFormat + -4));\nLAB_0008300e:\n      currentArg = remainingFormat + -4;\n    }\n    totalLength = (int *******)((int)totalLength + (int)currentArg);\n    *pcurrentPointer = (int *******)\"0000000000000000\";\n    pcurrentPointer[1] = currentArg;\n    if (returnValue < 8) {\n      returnValue = returnValue + 1;\n      pcurrentPointer = pcurrentPointer + 2;\n      goto LAB_0008302a;\n    }\n    if (totalLength != (int *******)0x0) {\n      arrayIndex = returnValue;\n      returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n      if (returnValue != 0) goto LAB_00083142;\n      returnValue = arrayIndex + 1;\n      pcurrentPointer = (int ********)pointerArray1;\n      goto LAB_0008302a;\n    }\n    localArray[0] = remainingLength;\n    arrayIndex = 1;\n    pcurrentPointer = (int ********)pointerArray1;\n    pointerArray1 = (undefined  [4])ptempFormatPointer2;\nLAB_000831be:\n    pointerArray = pcurrentPointer + 2;\n    totalLength = remainingLength;\n  }\n  if (((flags & 4) != 0) &&\n     (currentArg = (int *******)((int)pppppppiVar20 - (int)formatLength), 0 < (int)currentArg)) {\n    returnValue = arrayIndex;\n    if ((int)currentArg < 0x11) {\n      count = arrayIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arrayIndex = returnValue + 1;\n          totalLength = totalLength + 4;\n          *pointerArray = (int *******)0x856f0;\n          pointerArray[1] = (int *******)0x10;\n          if (7 < arrayIndex) break;\n          count = returnValue + 2;\n          pointerArray = pointerArray + 2;\nLAB_0008307a:\n          currentArg = currentArg + -4;\n          returnValue = arrayIndex;\n          if ((int)currentArg < 0x11) goto LAB_000830a2;\n        }\n        if (totalLength != (int *******)0x0) {\n          returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n          if (returnValue == 0) {\n            count = arrayIndex + 1;\n            pointerArray = (int ********)pointerArray1;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        currentArg = currentArg + -4;\n        count = 1;\n        returnValue = 0;\n        pointerArray = (int ********)pointerArray1;\n      } while (0x10 < (int)currentArg);\n    }\nLAB_000830a2:\n    totalLength = (int *******)((int)totalLength + (int)currentArg);\n    *pointerArray = (int *******)0x856f0;\n    pointerArray[1] = currentArg;\n    arrayIndex = count;\n    if (7 < count) {\n      if (totalLength == (int *******)0x0) {\n        if ((int)formatLength < (int)pppppppiVar20) {\n          formatLength = pppppppiVar20;\n        }\n        processedDataLength = processedDataLength + (int)formatLength;\n        goto LAB_00083186;\n      }\n      returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2);\n      if (returnValue != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)formatLength < (int)pppppppiVar20) {\n    formatLength = pppppppiVar20;\n  }\n  processedDataLength = processedDataLength + (int)formatLength;\n  if ((totalLength != (int *******)0x0) &&\n     (returnValue = process_data_00082824(dataPointer,paramPointer,&pointerArray2), returnValue != 0)) goto LAB_00083142;\nLAB_00083186:\n  arrayIndex = 0;\n  pcurrentPointer = (int ********)pointerArray1;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = character - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  currentArg = formatString;\n  do {\n    formatString = (int *******)((int)currentArg + 1);\n    character = (uint)*(byte *)currentArg;\n    pppppppiVar20 = (int *******)(digit + (int)pppppppiVar20 * 10);\n    digit = character - 0x30;\n    currentArg = formatString;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  character = (uint)*(byte *)formatString;\n  if (charA == '\\0') {\n    charA = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "process_data_0008289c",
                "param_1": "dataPointer",
                "param_2": "paramPointer",
                "param_3": "formatString",
                "param_4": "arguments",
                "bVar1": "isLong",
                "bVar2": "isNegative",
                "bVar3": "isUnsigned",
                "cVar4": "signChar",
                "bVar5": "addZeros",
                "piVar7": "integerPointer",
                "iVar8": "returnValue",
                "uVar11": "digit",
                "ppiVar12": "tempPointer",
                "uVar13": "flags",
                "uVar14": "character",
                "uVar21": "multiplier",
                "iVar15": "count",
                "iVar17": "tempCount",
                "ppppppppiVar16": "pointerArray",
                "iVar18": "length",
                "pppppppiVar10": "currentArg",
                "pppppppiVar18": "remainingFormat",
                "pppppppiVar23": "tempFormatPointer",
                "pppppppiVar25": "tempFormatPointer2",
                "pppppppiVar6": "currentPointer",
                "local_dc": "formatLength",
                "local_d4": "remainingLength",
                "local_c8": "argPointer",
                "local_c4": "processedDataLength",
                "local_c0": "hexChars",
                "local_a1": "charA",
                "local_a0": "charB",
                "local_9f": "charC",
                "local_9c": "pointerArray2",
                "local_98": "arrayIndex",
                "local_94": "totalLength",
                "local_90": "digitChar",
                "local_69": "zeroChar",
                "local_68": "pointerArray1",
                "local_64": "localArray"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 input,int data)\n\n{\n  int result;\n  int processResult;\n  undefined *stackArray [2];\n  undefined4 bufferSize;\n  ushort modifiedValue;\n  undefined2 value;\n  undefined *localPointer;\n  undefined4 size1;\n  undefined4 size2;\n  undefined4 offset;\n  undefined4 size3;\n  undefined4 ptr1;\n  undefined buffer [1024];\n  \n  ptr1 = *(undefined4 *)(data + 100);\n  offset = *(undefined4 *)(data + 0x1c);\n  value = *(undefined2 *)(data + 0xe);\n  size3 = *(undefined4 *)(data + 0x24);\n  stackArray[0] = buffer;\n  modifiedValue = *(ushort *)(data + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  size1 = 0x400;\n  size2 = 0;\n  localPointer = stackArray[0];\n  result = process_data_0008289c(input,stackArray);\n  if ((-1 < result) && (processResult = process_data_00083850(input,stackArray), processResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)modifiedValue << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "iVar2": "processResult",
                "local_488": "stackArray",
                "local_480": "bufferSize",
                "local_47c": "modifiedValue",
                "local_47a": "value",
                "local_478": "localPointer",
                "local_474": "size1",
                "local_470": "size2",
                "local_46c": "offset",
                "local_464": "size3",
                "local_424": "ptr1",
                "auStack_420": "buffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_0008356c",
            "code": "\nundefined4 initialize_0008356c(undefined4 *data_ptr,int *param_ptr)\n\n{\n  int value1;\n  int value2;\n  uint temp1;\n  ushort temp2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_0008356c_data_00083888();\n  }\n  temp2 = *(ushort *)(param_ptr + 3);\n  temp1 = (uint)temp2;\n  if ((int)(temp1 << 0x1c) < 0) {\n    value2 = param_ptr[4];\n  }\n  else {\n    if (-1 < (int)(temp1 << 0x1b)) {\n      *data_ptr = 9;\n      *(ushort *)(param_ptr + 3) = temp2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp1 << 0x1d) < 0) {\n      if ((int *)param_ptr[0xc] != (int *)0x0) {\n        if ((int *)param_ptr[0xc] != param_ptr + 0x10) {\n          process_relocation_00083b10(data_ptr);\n          temp2 = *(ushort *)(param_ptr + 3);\n        }\n        param_ptr[0xc] = 0;\n      }\n      value2 = param_ptr[4];\n      temp2 = temp2 & 0xffdb;\n      *param_ptr = value2;\n      param_ptr[1] = 0;\n    }\n    else {\n      value2 = param_ptr[4];\n    }\n    *(ushort *)(param_ptr + 3) = temp2 | 8;\n    temp1 = (uint)(temp2 | 8);\n  }\n  if ((value2 == 0) && ((temp1 & 0x280) != 0x200)) {\n    initialize_0008356c_program_00084018(data_ptr,param_ptr);\n    temp1 = (uint)*(ushort *)(param_ptr + 3);\n    value2 = param_ptr[4];\n  }\n  if ((temp1 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp1 << 0x1e)) {\n      value1 = param_ptr[5];\n    }\n    param_ptr[2] = value1;\n  }\n  else {\n    param_ptr[6] = -param_ptr[5];\n    param_ptr[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(param_ptr + 3) << 0x18) < 0)) {\n    *(ushort *)(param_ptr + 3) = *(ushort *)(param_ptr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_0008356c",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp1",
                "uVar4": "temp2"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_process_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeProcess_000836ec(void)\n\n{\n  dword *pointer1;\n  dword status;\n  int index;\n  code *jumpTable;\n  \n  setProcessParameter(6);\n  jumpTable = (code *)0x836fb;\n  status = exitWithError(1);\n  if (relArray[48].r_offset == 0) {\n    relArray[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(relArray[48].r_offset + 4);\n  pointer1 = (dword *)relArray[48].r_offset;\n  if (0x1f < index) {\n    pointer1 = (dword *)allocateMemory(400);\n    if (pointer1 == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    *pointer1 = relArray[48].r_offset;\n    pointer1[1] = 0;\n    index = 0;\n    relArray[48].r_offset = (dword)pointer1;\n    pointer1[0x62] = 0;\n    pointer1[99] = 0;\n  }\n  pointer1[1] = index + 1;\n  pointer1[index + 2] = status;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_process_000836ec",
                "process_parameter_000841e4": "setProcessParameter",
                "exit_with_status_00080eec": "exitWithError",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "allocate_memory_000817f0": "allocateMemory",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "pdVar1": "pointer1",
                "dVar2": "status",
                "iVar3": "index",
                "status": "dword"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *data,int *info)\n\n{\n  int *ptr1;\n  int var1;\n  ushort var2;\n  uint var3;\n  int var4;\n  code *funcPtr;\n  undefined4 result;\n  int var5;\n  \n  if ((data != (int *)0x0) && (data[0xe] == 0)) {\n    initialize_data_00083888();\n  }\n  if (*(short *)(info + 3) == 0) {\n    return 0;\n  }\n  var2 = *(ushort *)(info + 3);\n  if ((int)((uint)var2 << 0x1c) < 0) {\n    var5 = info[4];\n    if (var5 == 0) {\n      return 0;\n    }\n    var1 = *info;\n    if ((var2 & 3) == 0) {\n      var4 = info[5];\n    }\n    else {\n      var4 = 0;\n    }\n    *info = var5;\n    var1 = var1 - var5;\n    info[2] = var4;\n    do {\n      if (var1 < 1) {\n        return 0;\n      }\n      var4 = (*(code *)info[9])(data,info[7],var5,var1,result);\n      var1 = var1 - var4;\n      var5 = var5 + var4;\n    } while (0 < var4);\nLAB_000837c8:\n    *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info + 3) = var2 | 0x800;\n  if ((info[1] < 1) && (info[0xf] < 1)) {\n    return 0;\n  }\n  funcPtr = (code *)info[10];\n  if (funcPtr == (code *)0x0) {\n    return 0;\n  }\n  var3 = (uint)(var2 | 0x800);\n  var5 = *data;\n  *data = 0;\n  if ((var2 & 0x1000) == 0) {\n    var1 = (*funcPtr)(data,info[7],var3 & 0x1000,1);\n    if ((var1 == -1) && (var4 = *data, var4 != 0)) {\n      if ((var4 == 0x1d) || (var4 == 0x16)) {\n        *data = var5;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    var3 = (uint)*(ushort *)(info + 3);\n    funcPtr = (code *)info[10];\n  }\n  else {\n    var1 = info[0x14];\n  }\n  if (((int)(var3 << 0x1d) < 0) && (var1 = var1 - info[1], info[0xc] != 0)) {\n    var1 = var1 - info[0xf];\n  }\n  var1 = (*funcPtr)(data,info[7],var1,0);\n  if (var1 == -1) {\n    var4 = *data;\n    if (var4 != 0) {\n      if ((var4 != 0x1d) && (var4 != 0x16)) {\n        *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info + 3) = *(ushort *)(info + 3) & 0xf7ff;\n      *info = info[4];\n      info[1] = 0;\n      goto LAB_00083774;\n    }\n    var2 = *(ushort *)(info + 3) & 0xf7ff;\n    info[1] = 0;\n    *(ushort *)(info + 3) = var2;\n    *info = info[4];\n  }\n  else {\n    var2 = *(ushort *)(info + 3) & 0xf7ff;\n    *info = info[4];\n    *(ushort *)(info + 3) = var2;\n    info[1] = 0;\n  }\n  if ((int)((uint)var2 << 0x13) < 0) {\n    info[0x14] = var1;\n  }\nLAB_00083774:\n  ptr1 = (int *)info[0xc];\n  *data = var5;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != info + 0x10) {\n    process_relocation_00083b10(data);\n  }\n  info[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "data",
                "param_2": "info",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "iVar5": "var4",
                "pcVar6": "funcPtr",
                "unaff_r4": "result",
                "iVar7": "var5"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_00083888",
            "code": "\nvoid initializeData_00083888(int dataStructure)\n\n{\n  undefined4 *subDataStructure1;\n  undefined4 *subDataStructure2;\n  \n  if (*(int *)(dataStructure + 0x38) == 0) {\n    subDataStructure1 = *(undefined4 **)(dataStructure + 4);\n    *(undefined **)(dataStructure + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructure + 0x2e4) = 3;\n    *(int *)(dataStructure + 0x2e8) = dataStructure + 0x2ec;\n    *(undefined4 *)(dataStructure + 0x2e0) = 0;\n    *(undefined2 *)(subDataStructure1 + 3) = 4;\n    *subDataStructure1 = 0;\n    subDataStructure1[1] = 0;\n    subDataStructure1[2] = 0;\n    subDataStructure1[0x19] = 0;\n    *(undefined2 *)((int)subDataStructure1 + 0xe) = 0;\n    subDataStructure1[4] = 0;\n    subDataStructure1[5] = 0;\n    subDataStructure1[6] = 0;\n    memset_00081f00(subDataStructure1 + 0x17,0,8);\n    subDataStructure2 = *(undefined4 **)(dataStructure + 8);\n    subDataStructure1[7] = subDataStructure1;\n    subDataStructure1[8] = 0x84221;\n    subDataStructure1[9] = 0x84245;\n    subDataStructure1[10] = 0x8427d;\n    subDataStructure1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)subDataStructure2 + 0xe) = 1;\n    *(undefined2 *)(subDataStructure2 + 3) = 9;\n    *subDataStructure2 = 0;\n    subDataStructure2[1] = 0;\n    subDataStructure2[2] = 0;\n    subDataStructure2[0x19] = 0;\n    subDataStructure2[4] = 0;\n    subDataStructure2[5] = 0;\n    subDataStructure2[6] = 0;\n    memset_00081f00(subDataStructure2 + 0x17,0,8);\n    subDataStructure1 = *(undefined4 **)(dataStructure + 0xc);\n    subDataStructure2[7] = subDataStructure2;\n    subDataStructure2[8] = 0x84221;\n    subDataStructure2[9] = 0x84245;\n    subDataStructure2[10] = 0x8427d;\n    subDataStructure2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(subDataStructure1 + 3) = 0x12;\n    *(undefined2 *)((int)subDataStructure1 + 0xe) = 2;\n    *subDataStructure1 = 0;\n    subDataStructure1[1] = 0;\n    subDataStructure1[2] = 0;\n    subDataStructure1[0x19] = 0;\n    subDataStructure1[4] = 0;\n    subDataStructure1[5] = 0;\n    subDataStructure1[6] = 0;\n    memset_00081f00(subDataStructure1 + 0x17,0,8);\n    subDataStructure1[7] = subDataStructure1;\n    subDataStructure1[8] = 0x84221;\n    subDataStructure1[9] = 0x84245;\n    subDataStructure1[10] = 0x8427d;\n    subDataStructure1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructure + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_00083888",
                "param_1": "dataStructure",
                "puVar1": "subDataStructure1",
                "puVar2": "subDataStructure2"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int offset;\n  uint status;\n  uint byteVal;\n  byte *bytePtr;\n  uint index;\n  byte currentByte;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  offset = get_elf_relocation_offset_0008400c();\n  if ((offset == 1) && (param2 - 1 < 0xff)) {\n    byteVal = param2 & 0xff;\n    currentByte = (byte)byteVal;\n    status = 1;\n  }\n  else {\n    status = perform_action_0008434c(param1,&currentByte,param2,param3 + 0x17);\n    if (status == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (status == 0) {\n      return param2;\n    }\n    byteVal = (uint)currentByte;\n  }\n  index = 0;\n  do {\n    bytePtr = param3[2] + -1;\n    param3[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)param3[6] <= (int)bytePtr) {\n        **param3 = (byte)byteVal;\n        bytePtr = *param3;\n        byteVal = (uint)*bytePtr;\n        if (byteVal != 10) goto LAB_00083a04;\n      }\n      offset = process_data_000842a4(param1,byteVal,param3);\n      if (offset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)byteVal;\n      bytePtr = *param3;\nLAB_00083a04:\n      *param3 = bytePtr + 1;\n    }\n    if (status <= index + 1) {\n      return param2;\n    }\n    byteVal = (uint)byteArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "offset",
                "uVar2": "status",
                "uVar3": "byteVal",
                "pbVar4": "bytePtr",
                "uVar5": "index",
                "local_1c": "currentByte",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "process_function_00083a74",
            "code": "\nundefined4 processFunction_00083a74(undefined4 input_param,int offset)\n\n{\n  int binary_value;\n  uint extracted_value;\n  int calculated_offset;\n  \n  FUNC_00081f94();\n  extracted_value = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  calculated_offset = ((extracted_value - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < calculated_offset) {\n    binary_value = extract_value_from_binary_0008236c(input_param,0);\n    if (binary_value == Elf32_Rel_ARRAY_20070000[141].r_info + extracted_value) {\n      binary_value = extract_value_from_binary_0008236c(input_param,-calculated_offset);\n      if (binary_value != -1) {\n        DAT_2007121c = DAT_2007121c - calculated_offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = extracted_value - calculated_offset | 1;\n        FUNC_00081f98(input_param);\n        return 1;\n      }\n      calculated_offset = extract_value_from_binary_0008236c(input_param,0);\n      if (0xf < (int)(calculated_offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = calculated_offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             calculated_offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "process_function_00083a74",
                "param_1": "input_param",
                "param_2": "offset",
                "iVar1": "binary_value",
                "uVar2": "extracted_value",
                "iVar3": "calculated_offset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_relocation_00083b10",
            "code": "\nvoid processRelocation_00083b10(undefined4 config,int relTableEntry)\n\n{\n  int nextEntry;\n  bool isSpecialCase;\n  uint relFlags;\n  dword relInfo;\n  int prevEntry;\n  uint relSize;\n  dword dVar7;\n  uint tableEnd;\n  dword newRelInfo;\n  \n  if (relTableEntry == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  relFlags = *(uint *)(relTableEntry + -4);\n  dVar7 = relTableEntry - 8;\n  relSize = relFlags & 0xfffffffe;\n  relInfo = dVar7 + relSize;\n  tableEnd = *(uint *)(relInfo + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == relInfo) {\n    tableEnd = tableEnd + relSize;\n    if (-1 < (int)(relFlags << 0x1f)) {\n      dVar7 = dVar7 - *(int *)(relTableEntry + -8);\n      prevEntry = *(int *)(dVar7 + 0xc);\n      nextEntry = *(int *)(dVar7 + 8);\n      tableEnd = tableEnd + *(int *)(relTableEntry + -8);\n      *(int *)(nextEntry + 0xc) = prevEntry;\n      *(int *)(prevEntry + 8) = nextEntry;\n    }\n    relInfo = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(dVar7 + 4) = tableEnd | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = dVar7;\n    if (relInfo <= tableEnd) {\n      process_function_00083a74(config,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(relInfo + 4) = tableEnd;\n    if ((relFlags & 1) == 0) {\n      dVar7 = dVar7 - *(int *)(relTableEntry + -8);\n      nextEntry = *(int *)(dVar7 + 8);\n      relSize = relSize + *(int *)(relTableEntry + -8);\n      if (nextEntry == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        prevEntry = *(int *)(dVar7 + 0xc);\n        *(int *)(nextEntry + 0xc) = prevEntry;\n        *(int *)(prevEntry + 8) = nextEntry;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(relInfo + tableEnd + 4) << 0x1f) {\n      relSize = relSize + tableEnd;\n      nextEntry = *(int *)(relInfo + 8);\n      if ((!isSpecialCase) && (nextEntry == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = dVar7;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = dVar7;\n        *(undefined4 *)(dVar7 + 0xc) = 0x2007046c;\n        *(undefined4 *)(dVar7 + 8) = 0x2007046c;\n        *(uint *)(dVar7 + 4) = relSize | 1;\n        *(uint *)(dVar7 + relSize) = relSize;\n        goto LAB_00083ba4;\n      }\n      prevEntry = *(int *)(relInfo + 0xc);\n      *(int *)(nextEntry + 0xc) = prevEntry;\n      *(int *)(prevEntry + 8) = nextEntry;\n    }\n    *(uint *)(dVar7 + 4) = relSize | 1;\n    *(uint *)(dVar7 + relSize) = relSize;\n    if (!isSpecialCase) {\n      if (relSize < 0x200) {\n        relFlags = relSize & 0xfffffff8;\n        nextEntry = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relFlags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(relSize >> 3) >> 2 & 0xffU);\n        *(int *)(dVar7 + 8) = nextEntry;\n        *(uint *)(dVar7 + 0xc) = relFlags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relFlags) = dVar7;\n        *(dword *)(nextEntry + 0xc) = dVar7;\n        FUNC_00081f98(config);\n        return;\n      }\n      relFlags = relSize >> 9;\n      if (relFlags < 5) {\n        nextEntry = (relSize >> 6) + 0x38;\n        prevEntry = nextEntry * 2;\n      }\n      else if (relFlags < 0x15) {\n        nextEntry = relFlags + 0x5b;\n        prevEntry = nextEntry * 2;\n      }\n      else if (relFlags < 0x55) {\n        nextEntry = (relSize >> 0xc) + 0x6e;\n        prevEntry = nextEntry * 2;\n      }\n      else if (relFlags < 0x155) {\n        nextEntry = (relSize >> 0xf) + 0x77;\n        prevEntry = nextEntry * 2;\n      }\n      else if (relFlags < 0x555) {\n        nextEntry = (relSize >> 0x12) + 0x7c;\n        prevEntry = nextEntry * 2;\n      }\n      else {\n        prevEntry = 0xfc;\n        nextEntry = 0x7e;\n      }\n      newRelInfo = prevEntry * 4 + 0x20070464;\n      relInfo = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[prevEntry];\n      if (relInfo == newRelInfo) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (nextEntry >> 2 & 0xffU);\n        newRelInfo = relInfo;\n      }\n      else {\n        do {\n          if ((*(uint *)(relInfo + 4) & 0xfffffffc) <= relSize) break;\n          relInfo = *(dword *)(relInfo + 8);\n        } while (newRelInfo != relInfo);\n        newRelInfo = *(dword *)(relInfo + 0xc);\n      }\n      *(dword *)(dVar7 + 0xc) = newRelInfo;\n      *(dword *)(dVar7 + 8) = relInfo;\n      *(dword *)(newRelInfo + 8) = dVar7;\n      *(dword *)(relInfo + 0xc) = dVar7;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(config);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_relocation_00083b10",
                "param_1": "config",
                "param_2": "relTableEntry",
                "iVar1": "nextEntry",
                "bVar2": "isSpecialCase",
                "uVar3": "relFlags",
                "dVar4": "relInfo",
                "iVar5": "prevEntry",
                "uVar6": "relSize",
                "uVar8": "tableEnd",
                "dVar9": "newRelInfo"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *output,uint *input,uint **data)\n\n{\n  int result;\n  uint var1;\n  uint var2;\n  ushort var3;\n  uint var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint var5;\n  uint var6;\n  uint var7;\n  uint var8;\n  uint localVar;\n  \n  if (data[2] != (uint *)0x0) {\n    var3 = *(ushort *)(input + 3);\n    var4 = (uint)var3;\n    if (((int)(var4 << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *data;\n    }\n    else {\n      result = initialize_0008356c(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      var3 = *(ushort *)(input + 3);\n      var4 = (uint)var3;\n      ptr2 = *data;\n    }\n    if ((var3 & 2) == 0) {\n      var1 = var4 & 2;\n      var7 = var1;\n      var5 = var1;\n      localVar = var1;\n      if ((var4 & 1) == 0) {\n        var1 = 0;\n        var7 = 0;\n        while( true ) {\n          while (var1 == 0) {\n            var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            var1 = *ptr1;\n          }\n          var5 = input[2];\n          if ((int)(var4 << 0x16) < 0) {\n            if (var1 < var5) {\n              var4 = *input;\n              var5 = var1;\n            }\n            else if ((var4 & 0x480) == 0) {\n              var4 = *input;\n            }\n            else {\n              result = *input - input[4];\n              var5 = result + 1 + var1;\n              var6 = (int)(input[5] * 3) / 2;\n              if (var5 <= var6) {\n                var5 = var6;\n              }\n              if ((int)(var4 << 0x15) < 0) {\n                var6 = allocate_memory_00081810(output,var5);\n                if (var6 == 0) {\n                  *output = 0xc;\n                  var3 = *(ushort *)(input + 3);\n                  goto LAB_00083da4;\n                }\n                copy_and_pad_memory_00081d48(var6,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                var6 = allocate_or_update_memory_00081fac(output);\n                if (var6 == 0) {\n                  process_relocation_00083b10(output,input[4]);\n                  var3 = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              var4 = var6 + result;\n              input[4] = var6;\n              input[5] = var5;\n              *input = var4;\n              input[2] = var5 - result;\n              var5 = var1;\n            }\n            copy_memory_00081e34(var4,var7,var5);\n            input[2] = input[2] - var5;\n            *input = *input + var5;\n            var5 = var1;\n          }\n          else if ((input[4] < *input) || (var4 = input[5], var1 < var4)) {\n            if (var1 < var5) {\n              var5 = var1;\n            }\n            copy_memory_00081e34(*input,var7,var5);\n            var4 = input[2];\n            input[2] = var4 - var5;\n            *input = *input + var5;\n            if ((var4 - var5 == 0) && (result = process_data_00083850(output,input), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            var5 = 0x7fffffff;\n            if (var1 < 0x7fffffff) {\n              var5 = var1;\n            }\n            var5 = (*(code *)input[9])(output,input[7],var7,(var5 / var4) * var4);\n            if ((int)var5 < 1) goto LAB_00083da2;\n          }\n          ptr1 = data[2];\n          var7 = var7 + var5;\n          var1 = var1 - var5;\n          data[2] = (uint *)((int)ptr1 - var5);\n          if ((uint *)((int)ptr1 - var5) == (uint *)0x0) break;\n          var4 = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (var1 == 0) {\n            var5 = *ptr2;\n            var1 = ptr2[1];\n            localVar = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == 0) {\n            result = find_first_occurrence_000840f8(var5,10,var1);\n            if (result == 0) {\n              var7 = var1 + 1;\n              localVar = 1;\n            }\n            else {\n              var7 = (result + 1) - var5;\n              localVar = 1;\n            }\n          }\n          var6 = *input;\n          var4 = var7;\n          if (var1 <= var7) {\n            var4 = var1;\n          }\n          var2 = input[5];\n          if ((input[4] < var6) && (var8 = input[2] + var2, (int)var8 < (int)var4)) {\n            copy_memory_00081e34(var6,var5,var8);\n            *input = *input + var8;\n            result = process_data_00083850(output,input);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)var4 < (int)var2) {\n            copy_memory_00081e34(var6,var5,var4);\n            input[2] = input[2] - var4;\n            *input = var4 + *input;\n            var8 = var4;\n          }\n          else {\n            var8 = (*(code *)input[9])(output,input[7],var5,var2);\n            if ((int)var8 < 1) goto LAB_00083da2;\n          }\n          var7 = var7 - var8;\n          if (var7 == 0) {\n            result = process_data_00083850(output,input);\n            if (result != 0) goto LAB_00083da2;\n            localVar = 0;\n          }\n          ptr1 = data[2];\n          var5 = var5 + var8;\n          var1 = var1 - var8;\n          data[2] = (uint *)((int)ptr1 - var8);\n        } while ((uint *)((int)ptr1 - var8) != (uint *)0x0);\n      }\n    }\n    else {\n      var1 = 0;\n      var4 = 0;\n      do {\n        while( true ) {\n          var7 = var4;\n          if (0x7ffffbff < var4) {\n            var7 = 0x7ffffc00;\n          }\n          if (var4 != 0) break;\n          var1 = *ptr2;\n          var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],var1,var7);\n        if (result < 1) {\nLAB_00083da2:\n          var3 = *(ushort *)(input + 3);\nLAB_00083da4:\n          *(ushort *)(input + 3) = var3 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = data[2];\n        var1 = var1 + result;\n        var4 = var4 - result;\n        data[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "output",
                "param_2": "input",
                "param_3": "data",
                "iVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "var5",
                "uVar9": "var6",
                "uVar10": "var7",
                "uVar11": "var8",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nunsignedInt getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "undefined4": "unsignedInt"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf_relocation_offset_0008400c",
            "code": "\ndword getElfRelocationOffset_0008400c(void)\n\n{\n  return relocationArray[275].relocationOffset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_program_00084018",
            "code": "\nvoid initializeProgram_00084018(int data,int *buffer)\n\n{\n  ushort ushortValue;\n  int status;\n  int allocatedMemory;\n  uint uintValue;\n  bool flag;\n  undefined stackArray [4];\n  uint localValue;\n  \n  ushortValue = *(ushort *)(buffer + 3);\n  uintValue = (uint)ushortValue;\n  if ((int)(uintValue << 0x1e) < 0) {\n    *buffer = (int)buffer + 0x43;\n    buffer[4] = (int)buffer + 0x43;\n    buffer[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)buffer + 0xe)) {\n    status = initialize_and_check_data_00084494(data,(int)*(short *)((int)buffer + 0xe),stackArray);\n    if (-1 < status) {\n      flag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (buffer[10] == 0x8427d)) {\n        status = 0x400;\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x400;\n        buffer[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushortValue = *(ushort *)(buffer + 3);\n    uintValue = (uint)ushortValue;\n  }\n  *(ushort *)(buffer + 3) = ushortValue | 0x800;\n  if ((uintValue & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n  flag = false;\nLAB_00084074:\n  allocatedMemory = allocate_memory_00081810(data,status);\n  ushortValue = *(ushort *)(buffer + 3);\n  if (allocatedMemory == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(buffer + 3) = ushortValue | 2;\n      *buffer = (int)buffer + 0x43;\n      buffer[4] = (int)buffer + 0x43;\n      buffer[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(buffer + 3) = ushortValue | 0x80;\n    *buffer = allocatedMemory;\n    buffer[4] = allocatedMemory;\n    buffer[5] = status;\n    if ((flag) && (status = initialize_program_000844bc(data,(int)*(short *)((int)buffer + 0xe)), status != 0))\n    {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_program_00084018",
                "param_1": "data",
                "param_2": "buffer",
                "uVar1": "ushortValue",
                "iVar2": "status",
                "iVar3": "allocatedMemory",
                "uVar4": "uintValue",
                "bVar5": "flag",
                "auStack_54": "stackArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_first_occurrence_000840f8",
            "code": "\nuint * findFirstOccurrence_000840f8(uint *array,char target,uint length)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool isLastElement;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      ptr = array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        isLastElement = index == length - 1;\n        index = index + 1;\n        if (isLastElement) goto LAB_00084150;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "temp",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "isLastElement"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_parameter_000841e4",
            "code": "\nint processParameter_000841e4(uint input)\n\n{\n  dword r_offset_var;\n  undefined4 thunk_result;\n  int func_result;\n  code *code_func;\n  undefined4 unaff_var4;\n  undefined4 unaff_var5;\n  undefined4 in_lr_var;\n  undefined4 constant_var;\n  \n  r_offset_var = Elf32_Rel_ARRAY[140].r_offset;\n  constant_var = 0x20070460;\n  if (0x1f < input) {\n    *(undefined4 *)Elf32_Rel_ARRAY[140].r_offset = 0x16;\n    return -1;\n  }\n  func_result = *(int *)(Elf32_Rel_ARRAY[140].r_offset + 0x2dc);\n  if ((func_result == 0) || (code_func = *(code **)(func_result + input * 4), code_func == (code *)0x0)) {\n    thunk_result = thunk_func(Elf32_Rel_ARRAY[140].r_offset);\n    DAT_20071244 = 0;\n    func_result = FUNC_00080efc(thunk_result,input,input,0,constant_var,unaff_var4,unaff_var5,in_lr_var);\n    if ((func_result == -1) && (DAT_20071244 != 0)) {\n      *(int *)r_offset_var = DAT_20071244;\n      return -1;\n    }\n    return func_result;\n  }\n  if (code_func == (code *)0x1) {\n    return 0;\n  }\n  if (code_func != (code *)0xffffffff) {\n    *(undefined4 *)(func_result + input * 4) = 0;\n    (*code_func)(input);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "process_parameter_000841e4",
                "param_1": "input",
                "dVar1": "r_offset_var",
                "uVar2": "thunk_result",
                "iVar3": "func_result",
                "pcVar4": "code_func",
                "unaff_r4": "unaff_var4",
                "unaff_r5": "unaff_var5",
                "in_lr": "in_lr_var",
                "uVar5": "constant_var",
                "Elf32_Rel_ARRAY_20070000": "Elf32_Rel_ARRAY",
                "thunk_get_negative_one_00080efe": "thunk_func"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "initialize_return_value_thunk_00080efe",
            "code": "\nundefined4 initializeReturnValue_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "initialize_return_value_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_and_check_error_code_00084220",
            "code": "\nvoid updateAndCheckErrorCode_00084220(undefined4 errorCode,int dataPointer)\n\n{\n  int result;\n  \n  result = checkAndUpdateErrorCode(errorCode,(int)*(short *)(dataPointer + 0xe));\n  if (-1 < result) {\n    *(int *)(dataPointer + 0x50) = *(int *)(dataPointer + 0x50) + result;\n    return;\n  }\n  *(ushort *)(dataPointer + 0xc) = *(ushort *)(dataPointer + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_and_check_error_code_00084220",
                "param_1": "errorCode",
                "param_2": "dataPointer",
                "iVar1": "result",
                "check_error_code_and_assign_00084508": "checkAndUpdateErrorCode"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort value;\n  undefined4 unaffectedArg1;\n  undefined4 unaffectedArg2;\n  undefined4 unaffectedArg3;\n  undefined4 linkRegister;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    process_and_check_000844e0(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = process_bytes_00080ec8((int)*(short *)(input + 0xe),paramA,paramB,paramB,unaffectedArg1,unaffectedArg2,\n                       unaffectedArg3,linkRegister);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unaffectedArg1",
                "unaff_r5": "unaffectedArg2",
                "unaff_r6": "unaffectedArg3",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_status_0008427c",
            "code": "\nvoid updateStatus_0008427c(undefined4 param,int data)\n\n{\n  int result;\n  ushort status;\n  \n  result = process_and_check_000844e0(param,(int)*(short *)(data + 0xe));\n  if (result == -1) {\n    status = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    status = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data + 0x50) = result;\n  }\n  *(ushort *)(data + 0xc) = status;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_status_0008427c",
                "param_1": "param",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint processData_000842a4(int inputParameter,uint flags,undefined4 *dataArray,undefined4 additionalParameter)\n\n{\n  ushort ushortVar;\n  uint uintVar;\n  undefined *ptrVar;\n  int indexVar;\n  \n  if ((inputParameter != 0) && (*(int *)(inputParameter + 0x38) == 0)) {\n    initialize_data_00083888();\n  }\n  ushortVar = *(ushort *)(dataArray + 3);\n  uintVar = (uint)ushortVar;\n  dataArray[2] = dataArray[6];\n  if ((-1 < (int)(uintVar << 0x1c)) || (indexVar = dataArray[4], indexVar == 0)) {\n    indexVar = initialize_0008356c(inputParameter,dataArray,ushortVar,uintVar,additionalParameter);\n    if (indexVar != 0) {\n      return 0xffffffff;\n    }\n    ushortVar = *(ushort *)(dataArray + 3);\n    indexVar = dataArray[4];\n    uintVar = (uint)ushortVar;\n  }\n  flags = flags & 0xff;\n  if ((int)(uintVar << 0x12) < 0) {\n    ptrVar = (undefined *)*dataArray;\n    indexVar = (int)ptrVar - indexVar;\n    if (indexVar < (int)dataArray[5]) {\nLAB_000842d6:\n      indexVar = indexVar + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    dataArray[0x19] = dataArray[0x19] & 0xffffdfff;\n    ptrVar = (undefined *)*dataArray;\n    *(ushort *)(dataArray + 3) = ushortVar | 0x2000;\n    indexVar = (int)ptrVar - indexVar;\n    if (indexVar < (int)dataArray[5]) goto LAB_000842d6;\n  }\n  indexVar = process_data_00083850(inputParameter,dataArray);\n  if (indexVar != 0) {\n    return 0xffffffff;\n  }\n  ptrVar = (undefined *)*dataArray;\n  indexVar = 1;\nLAB_000842d8:\n  dataArray[2] = dataArray[2] + -1;\n  *dataArray = ptrVar + 1;\n  *ptrVar = (char)flags;\n  if (((dataArray[5] == indexVar) ||\n      (((int)((uint)*(ushort *)(dataArray + 3) << 0x1f) < 0 && (flags == 10)))) &&\n     (indexVar = process_data_00083850(inputParameter,dataArray), indexVar != 0)) {\n    return 0xffffffff;\n  }\n  return flags;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "inputParameter",
                "param_2": "flags",
                "param_3": "dataArray",
                "param_4": "additionalParameter",
                "uVar1": "ushortVar",
                "uVar2": "uintVar",
                "puVar3": "ptrVar",
                "iVar4": "indexVar"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "perform_action_0008434c",
            "code": "\nvoid performAction_0008434c(undefined4 *data,int size,undefined4 param,undefined4 *result)\n\n{\n  dword relInfo;\n  undefined4 memAddress;\n  int returnValue;\n  undefined localVars [12];\n  \n  relInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    memAddress = get_memory_address_00084004();\n    returnValue = (*(code *)relInfo)(data,localVars,0,memAddress,result);\n  }\n  else {\n    memAddress = get_memory_address_00084004();\n    returnValue = (*(code *)relInfo)(data,size,param,memAddress,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *data = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "perform_action_0008434c",
                "param_1": "data",
                "param_2": "size",
                "param_3": "param",
                "param_4": "result",
                "dVar1": "relInfo",
                "uVar2": "memAddress",
                "iVar3": "returnValue",
                "auStack_24": "localVars"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "copy_byte_to_buffer_0008439c",
            "code": "\nundefined4 copy_byte_to_buffer_0008439c(undefined4 *output_buffer,undefined *source_byte,uint byte_value)\n\n{\n  if (source_byte == (undefined *)0x0) {\n    return 0;\n  }\n  if (byte_value < 0x100) {\n    *source_byte = (char)byte_value;\n    return 1;\n  }\n  *output_buffer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "copy_byte_to_buffer_0008439c",
                "param_1": "output_buffer",
                "param_2": "source_byte",
                "param_3": "byte_value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_function_00084484",
            "code": "\nundefined4 processFunction_00084484(int inputValue)\n\n{\n  dword relocationOffset;\n  undefined4 returnValue;\n  int returnValue2;\n  \n  relocationOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (inputValue != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_00083888();\n    }\n    if (*(short *)(inputValue + 0xc) != 0) {\n      returnValue = process_data_00083850(relocationOffset,inputValue);\n      if ((*(code **)(inputValue + 0x2c) != (code *)0x0) &&\n         (returnValue2 = (**(code **)(inputValue + 0x2c))(relocationOffset,*(undefined4 *)(inputValue + 0x1c)), returnValue2 < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputValue + 0xc) << 0x18) < 0) {\n        process_relocation_00083b10(relocationOffset,*(undefined4 *)(inputValue + 0x10));\n      }\n      if (*(int *)(inputValue + 0x30) != 0) {\n        if (*(int *)(inputValue + 0x30) != inputValue + 0x40) {\n          process_relocation_00083b10(relocationOffset);\n        }\n        *(undefined4 *)(inputValue + 0x30) = 0;\n      }\n      if (*(int *)(inputValue + 0x44) != 0) {\n        process_relocation_00083b10(relocationOffset);\n        *(undefined4 *)(inputValue + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(inputValue + 0xc) = 0;\n      FUNC_00083980();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_function_00084484",
                "param_1": "inputValue",
                "dVar1": "relocationOffset",
                "uVar2": "returnValue",
                "iVar3": "returnValue2"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "initialize_and_check_data_00084494",
            "code": "\nvoid initializeAndCheckData_00084494(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int dataInitializationResult;\n  \n  DAT_20071244 = 0;\n  dataInitializationResult = initialize_data_00080eb0(arg1,arg2,arg2,0,arg3);\n  if ((dataInitializationResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "initialize_and_check_data_00084494",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "dataInitializationResult"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "initialize_program_000844bc",
            "code": "\nvoid initialize_program_000844bc(int *result,undefined4 input)\n\n{\n  int init_result;\n  \n  DAT_20071244 = 0;\n  init_result = initialize_program_000844bc_00080eba(input);\n  if ((init_result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "initialize_program_000844bc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "process_and_check_000844e0",
            "code": "\nvoid process_and_check_000844e0(int *output_value,undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = get_zero_00080ebe(input_value_1,input_value_2,input_value_3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output_value = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "process_and_check_000844e0",
                "param_1": "output_value",
                "param_2": "input_value_1",
                "param_3": "input_value_2",
                "param_4": "input_value_3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "check_error_code_and_assign_00084508",
            "code": "\nvoid checkErrorCodeAndAssign_00084508(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int errorCode;\n  \n  DAT_20071244 = 0;\n  errorCode = get_error_code_00080ec2(arg1,arg2,arg3);\n  if ((errorCode == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "check_error_code_and_assign_00084508",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_and_update_00084530",
            "code": "\nint checkAndUpdate_00084530(int value1,int value2,int condition1,int condition2)\n\n{\n  int result;\n  \n  if ((condition2 == 0) && (condition1 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value1 = -1;\n    }\n    return value1;\n  }\n  result = subtract_and_update_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_and_update_00084530",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "condition1",
                "param_4": "condition2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_adjust_0008455c",
            "code": "\nvoid subtractAndAdjust_0008455c(uint inputValue,int subtractValue,undefined4 lowerInputValue,undefined4 higherInputValue,int *outputValues)\n\n{\n  uint calculatedValue;\n  longlong multipliedValue;\n  \n  multipliedValue = calculate_division_000845c0();\n  multipliedValue = multipliedValue * CONCAT44(higherInputValue,lowerInputValue);\n  calculatedValue = (uint)multipliedValue;\n  *outputValues = inputValue - calculatedValue;\n  outputValues[1] = (subtractValue - (int)((ulonglong)multipliedValue >> 0x20)) - (uint)(inputValue < calculatedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_adjust_0008455c",
                "param_1": "inputValue",
                "param_2": "subtractValue",
                "param_3": "lowerInputValue",
                "param_4": "higherInputValue",
                "param_5": "outputValues",
                "uVar1": "calculatedValue",
                "lVar2": "multipliedValue"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_update_0008458c",
            "code": "\nvoid subtract_and_update_0008458c(uint input_value,int modified_value,undefined4 param_3,undefined4 param_4,int *output_array)\n\n{\n  uint result_value;\n  longlong division_result;\n  \n  division_result = div_mod_00084860();\n  division_result = division_result * CONCAT44(param_4,param_3);\n  result_value = (uint)division_result;\n  *output_array = input_value - result_value;\n  output_array[1] = (modified_value - (int)((ulonglong)division_result >> 0x20)) - (uint)(input_value < result_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_update_0008458c",
                "param_1": "input_value",
                "param_2": "modified_value",
                "param_5": "output_array",
                "uVar1": "result_value",
                "lVar2": "division_result"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "calculate_division_000845c0",
            "code": "\nundefined8 calculateDivision_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong quotient_temp;\n  uint quotient_low;\n  uint quotient_high;\n  uint shifted_divisor;\n  uint quotient_correction;\n  int shift_amount;\n  uint partial_dividend_low;\n  uint partial_dividend_high;\n  uint negative_correction;\n  uint shifted_divisor_low;\n  uint shifted_divisor_high;\n  uint remainder_high;\n  bool overflow_flag;\n  \n  if ((int)dividend_high < 0) {\n    overflow_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)overflow_flag;\n    negative_correction = 0xffffffff;\n  }\n  else {\n    negative_correction = 0;\n  }\n  if ((int)divisor_high < 0) {\n    negative_correction = ~negative_correction;\n    overflow_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)overflow_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      shifted_divisor = dividend_high / quotient_low;\n      partial_dividend_low = (divisor & 0xffff) * shifted_divisor;\n      shifted_divisor_low = dividend >> 0x10 | (dividend_high - quotient_low * shifted_divisor) * 0x10000;\n      quotient_high = shifted_divisor;\n      if (shifted_divisor_low <= partial_dividend_low && partial_dividend_low - shifted_divisor_low != 0) {\n        overflow_flag = CARRY4(shifted_divisor_low,divisor);\n        shifted_divisor_low = shifted_divisor_low + divisor;\n        quotient_high = shifted_divisor - 1;\n        if ((overflow_flag == false) && (shifted_divisor_low <= partial_dividend_low && partial_dividend_low - shifted_divisor_low != 0)) {\n          quotient_high = shifted_divisor - 2;\n          shifted_divisor_low = shifted_divisor_low + divisor;\n        }\n      }\n      partial_dividend_high = (shifted_divisor_low - partial_dividend_low) / quotient_low;\n      shifted_divisor = (divisor & 0xffff) * partial_dividend_high;\n      partial_dividend_low = dividend & 0xffff | ((shifted_divisor_low - partial_dividend_low) - quotient_low * partial_dividend_high) * 0x10000;\n      quotient_low = partial_dividend_high;\n      if (partial_dividend_low <= shifted_divisor && shifted_divisor - partial_dividend_low != 0) {\n        quotient_low = partial_dividend_high - 1;\n        if ((CARRY4(partial_dividend_low,divisor) == false) &&\n           (partial_dividend_low + divisor <= shifted_divisor && shifted_divisor - (partial_dividend_low + divisor) != 0)) {\n          quotient_low = partial_dividend_high - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        shifted_divisor = divisor >> 0x10;\n        remainder_high = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        shifted_divisor = divisor >> 0x10;\n        shifted_divisor_low = quotient_high / shifted_divisor;\n        remainder_high = divisor & 0xffff;\n        partial_dividend_low = remainder_high * shifted_divisor_low;\n        partial_dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = partial_dividend_high >> 0x10 | (quotient_high - shifted_divisor * shifted_divisor_low) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_low = shifted_divisor_low;\n        if (quotient_high <= partial_dividend_low && partial_dividend_low - quotient_high != 0) {\n          overflow_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = shifted_divisor_low - 1;\n          if ((overflow_flag == false) && (quotient_high <= partial_dividend_low && partial_dividend_low - quotient_high != 0)) {\n            quotient_low = shifted_divisor_low - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        quotient_correction = (quotient_high - partial_dividend_low) / shifted_divisor;\n        shifted_divisor_low = remainder_high * quotient_correction;\n        dividend_high = partial_dividend_high & 0xffff | ((quotient_high - partial_dividend_low) - shifted_divisor * quotient_correction) * 0x10000;\n        quotient_high = quotient_correction;\n        if (dividend_high <= shifted_divisor_low && shifted_divisor_low - dividend_high != 0) {\n          overflow_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = quotient_correction - 1;\n          if ((overflow_flag == false) && (dividend_high <= shifted_divisor_low && shifted_divisor_low - dividend_high != 0)) {\n            quotient_high = quotient_correction - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - shifted_divisor_low;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / shifted_divisor;\n      shifted_divisor_low = remainder_high * quotient_low;\n      partial_dividend_high = dividend >> 0x10 | (dividend_high - shifted_divisor * quotient_low) * 0x10000;\n      partial_dividend_low = quotient_low;\n      if (partial_dividend_high <= shifted_divisor_low && shifted_divisor_low - partial_dividend_high != 0) {\n        overflow_flag = CARRY4(partial_dividend_high,divisor);\n        partial_dividend_high = partial_dividend_high + divisor;\n        partial_dividend_low = quotient_low - 1;\n        if ((overflow_flag == false) && (partial_dividend_high <= shifted_divisor_low && shifted_divisor_low - partial_dividend_high != 0)) {\n          partial_dividend_low = quotient_low - 2;\n          partial_dividend_high = partial_dividend_high + divisor;\n        }\n      }\n      quotient_correction = (partial_dividend_high - shifted_divisor_low) / shifted_divisor;\n      remainder_high = remainder_high * quotient_correction;\n      shifted_divisor = dividend & 0xffff | ((partial_dividend_high - shifted_divisor_low) - shifted_divisor * quotient_correction) * 0x10000;\n      quotient_low = quotient_correction;\n      if (shifted_divisor <= remainder_high && remainder_high - shifted_divisor != 0) {\n        quotient_low = quotient_correction - 1;\n        if ((CARRY4(shifted_divisor,divisor) == false) &&\n           (shifted_divisor + divisor <= remainder_high && remainder_high - (shifted_divisor + divisor) != 0)) {\n          quotient_low = quotient_correction - 2;\n        }\n      }\n      quotient_low = quotient_low | partial_dividend_low << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      shifted_divisor = dividend_high >> (quotient_high & 0xff);\n      remainder_high = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      shifted_divisor_low = remainder_high >> 0x10;\n      quotient_low = shifted_divisor / shifted_divisor_low;\n      partial_dividend_high = (remainder_high & 0xffff) * quotient_low;\n      partial_dividend_low = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      shifted_divisor = partial_dividend_low >> 0x10 | (shifted_divisor - shifted_divisor_low * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (shifted_divisor <= partial_dividend_high && partial_dividend_high - shifted_divisor != 0) {\n        overflow_flag = CARRY4(shifted_divisor,remainder_high);\n        shifted_divisor = shifted_divisor + remainder_high;\n        quotient_high = quotient_low - 1;\n        if ((overflow_flag == false) && (shifted_divisor <= partial_dividend_high && partial_dividend_high - shifted_divisor != 0)) {\n          quotient_high = quotient_low - 2;\n          shifted_divisor = shifted_divisor + remainder_high;\n        }\n      }\n      quotient_correction = (shifted_divisor - partial_dividend_high) / shifted_divisor_low;\n      shifted_divisor_high = (remainder_high & 0xffff) * quotient_correction;\n      shifted_divisor = partial_dividend_low & 0xffff | ((shifted_divisor - partial_dividend_high) - shifted_divisor_low * quotient_correction) * 0x10000;\n      quotient_low = quotient_correction;\n      if (shifted_divisor <= shifted_divisor_high && shifted_divisor_high - shifted_divisor != 0) {\n        overflow_flag = CARRY4(shifted_divisor,remainder_high);\n        shifted_divisor = shifted_divisor + remainder_high;\n        quotient_low = quotient_correction - 1;\n        if ((overflow_flag == false) && (shifted_divisor <= shifted_divisor_high && shifted_divisor_high - shifted_divisor != 0)) {\n          quotient_low = quotient_correction - 2;\n          shifted_divisor = shifted_divisor + remainder_high;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_temp = (ulonglong)quotient_low * (ulonglong)(divisor << shift_amount);\n      partial_dividend_low = (uint)((ulonglong)quotient_temp >> 0x20);\n      quotient_high = 0;\n      if ((shifted_divisor - shifted_divisor_high < partial_dividend_low) ||\n         ((shifted_divisor - shifted_divisor_high == partial_dividend_low && (dividend << shift_amount < (uint)quotient_temp)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (negative_correction != 0) {\n    overflow_flag = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)overflow_flag;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "calculate_division_000845c0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "lVar1": "quotient_temp",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "shifted_divisor",
                "uVar5": "quotient_correction",
                "iVar6": "shift_amount",
                "uVar7": "partial_dividend_low",
                "uVar8": "partial_dividend_high",
                "uVar9": "negative_correction",
                "uVar10": "shifted_divisor_low",
                "uVar11": "shifted_divisor_high",
                "uVar12": "remainder_high",
                "bVar13": "overflow_flag"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "div_mod_00084860",
            "code": "\nulonglong divMod_00084860(uint dividend,uint divisor,uint quotientLow,uint quotientHigh)\n\n{\n  longlong product;\n  uint quotient;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  int bitShift;\n  bool carryFlag;\n  \n  if (quotientHigh == 0) {\n    if (quotientLow <= divisor) {\n      if (quotientLow == 0) {\n        quotientLow = 1 / 0;\n      }\n      bitShift = LZCOUNT(quotientLow);\n      if (bitShift == 0) {\n        divisor = divisor - quotientLow;\n        uVar3 = quotientLow >> 0x10;\n        uVar5 = quotientLow & 0xffff;\n        quotient = 1;\n      }\n      else {\n        quotientLow = quotientLow << bitShift;\n        uVar8 = divisor >> (0x20U - bitShift & 0xff);\n        uVar3 = quotientLow >> 0x10;\n        uVar9 = uVar8 / uVar3;\n        uVar5 = quotientLow & 0xffff;\n        quotient = uVar5 * uVar9;\n        uVar6 = dividend >> (0x20U - bitShift & 0xff) | divisor << bitShift;\n        uVar4 = uVar6 >> 0x10 | (uVar8 - uVar3 * uVar9) * 0x10000;\n        dividend = dividend << bitShift;\n        uVar8 = uVar9;\n        if (uVar4 <= quotient && quotient - uVar4 != 0) {\n          carryFlag = CARRY4(uVar4,quotientLow);\n          uVar4 = uVar4 + quotientLow;\n          uVar8 = uVar9 - 1;\n          if ((carryFlag == false) && (uVar4 <= quotient && quotient - uVar4 != 0)) {\n            uVar8 = uVar9 - 2;\n            uVar4 = uVar4 + quotientLow;\n          }\n        }\n        uVar7 = (uVar4 - quotient) / uVar3;\n        uVar9 = uVar5 * uVar7;\n        divisor = uVar6 & 0xffff | ((uVar4 - quotient) - uVar3 * uVar7) * 0x10000;\n        quotient = uVar7;\n        if (divisor <= uVar9 && uVar9 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotientLow);\n          divisor = divisor + quotientLow;\n          quotient = uVar7 - 1;\n          if ((carryFlag == false) && (divisor <= uVar9 && uVar9 - divisor != 0)) {\n            quotient = uVar7 - 2;\n            divisor = divisor + quotientLow;\n          }\n        }\n        divisor = divisor - uVar9;\n        quotient = quotient | uVar8 << 0x10;\n      }\n      uVar9 = divisor / uVar3;\n      uVar4 = uVar5 * uVar9;\n      uVar6 = dividend >> 0x10 | (divisor - uVar3 * uVar9) * 0x10000;\n      uVar8 = uVar9;\n      if (uVar6 <= uVar4 && uVar4 - uVar6 != 0) {\n        carryFlag = CARRY4(uVar6,quotientLow);\n        uVar6 = uVar6 + quotientLow;\n        uVar8 = uVar9 - 1;\n        if ((carryFlag == false) && (uVar6 <= uVar4 && uVar4 - uVar6 != 0)) {\n          uVar8 = uVar9 - 2;\n          uVar6 = uVar6 + quotientLow;\n        }\n      }\n      uVar9 = (uVar6 - uVar4) / uVar3;\n      uVar5 = uVar5 * uVar9;\n      uVar6 = dividend & 0xffff | ((uVar6 - uVar4) - uVar3 * uVar9) * 0x10000;\n      uVar3 = uVar9;\n      if (uVar6 <= uVar5 && uVar5 - uVar6 != 0) {\n        uVar3 = uVar9 - 1;\n        if ((CARRY4(uVar6,quotientLow) == false) &&\n           (uVar6 + quotientLow <= uVar5 && uVar5 - (uVar6 + quotientLow) != 0)) {\n          uVar3 = uVar9 - 2;\n        }\n      }\n      return CONCAT44(quotient,uVar3 | uVar8 << 0x10);\n    }\n    bitShift = LZCOUNT(quotientLow);\n    if (bitShift != 0) {\n      uVar8 = dividend >> (0x20U - bitShift & 0xff);\n      quotientLow = quotientLow << bitShift;\n      dividend = dividend << bitShift;\n      divisor = uVar8 | divisor << bitShift;\n    }\n    quotient = quotientLow >> 0x10;\n    uVar3 = divisor / quotient;\n    uVar5 = (quotientLow & 0xffff) * uVar3;\n    uVar9 = dividend >> 0x10 | (divisor - quotient * uVar3) * 0x10000;\n    uVar8 = uVar3;\n    if (uVar9 <= uVar5 && uVar5 - uVar9 != 0) {\n      carryFlag = CARRY4(uVar9,quotientLow);\n      uVar9 = uVar9 + quotientLow;\n      uVar8 = uVar3 - 1;\n      if ((carryFlag == false) && (uVar9 <= uVar5 && uVar5 - uVar9 != 0)) {\n        uVar8 = uVar3 - 2;\n        uVar9 = uVar9 + quotientLow;\n      }\n    }\n    uVar6 = (uVar9 - uVar5) / quotient;\n    uVar3 = (quotientLow & 0xffff) * uVar6;\n    uVar5 = dividend & 0xffff | ((uVar9 - uVar5) - quotient * uVar6) * 0x10000;\n    quotient = uVar6;\n    if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n      quotient = uVar6 - 1;\n      if ((CARRY4(uVar5,quotientLow) == false) &&\n         (uVar5 + quotientLow <= uVar3 && uVar3 - (uVar5 + quotientLow) != 0)) {\n        quotient = uVar6 - 2;\n      }\n    }\n    quotient = quotient | uVar8 << 0x10;\n  }\n  else {\n    if (divisor < quotientHigh) {\n      return 0;\n    }\n    bitShift = LZCOUNT(quotientHigh);\n    if (bitShift == 0) {\n      if ((quotientHigh < divisor) || (quotientLow <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - bitShift;\n      uVar8 = divisor >> (quotient & 0xff);\n      uVar3 = quotientHigh << bitShift | quotientLow >> (quotient & 0xff);\n      uVar5 = uVar3 >> 0x10;\n      uVar4 = uVar8 / uVar5;\n      uVar9 = (uVar3 & 0xffff) * uVar4;\n      uVar6 = dividend >> (quotient & 0xff) | divisor << bitShift;\n      quotient = uVar6 >> 0x10 | (uVar8 - uVar5 * uVar4) * 0x10000;\n      uVar8 = uVar4;\n      if (quotient <= uVar9 && uVar9 - quotient != 0) {\n        carryFlag = CARRY4(quotient,uVar3);\n        quotient = quotient + uVar3;\n        uVar8 = uVar4 - 1;\n        if ((carryFlag == false) && (quotient <= uVar9 && uVar9 - quotient != 0)) {\n          uVar8 = uVar4 - 2;\n          quotient = quotient + uVar3;\n        }\n      }\n      uVar4 = (quotient - uVar9) / uVar5;\n      uVar7 = (uVar3 & 0xffff) * uVar4;\n      uVar5 = uVar6 & 0xffff | ((quotient - uVar9) - uVar5 * uVar4) * 0x10000;\n      quotient = uVar4;\n      if (uVar5 <= uVar7 && uVar7 - uVar5 != 0) {\n        carryFlag = CARRY4(uVar5,uVar3);\n        uVar5 = uVar5 + uVar3;\n        quotient = uVar4 - 1;\n        if ((carryFlag == false) && (uVar5 <= uVar7 && uVar7 - uVar5 != 0)) {\n          quotient = uVar4 - 2;\n          uVar5 = uVar5 + uVar3;\n        }\n      }\n      quotient = quotient | uVar8 << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(quotientLow << bitShift);\n      uVar8 = (uint)((ulonglong)product >> 0x20);\n      if ((uVar5 - uVar7 < uVar8) || ((uVar5 - uVar7 == uVar8 && (dividend << bitShift < (uint)product)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084860": "div_mod_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotientLow",
                "param_4": "quotientHigh",
                "lVar1": "product",
                "uVar2": "quotient",
                "iVar10": "bitShift",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 97897,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}