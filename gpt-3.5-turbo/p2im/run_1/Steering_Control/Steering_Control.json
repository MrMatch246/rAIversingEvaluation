{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data_ptr",
                "param_2": "data_ptr_2",
                "param_3": "data_ptr_3",
                "param_4": "data_ptr_4",
                "uStack_c": "data_1",
                "uStack_8": "data_2",
                "uStack_4": "data_3",
                "*DAT_000817ec": "*PTR_DAT_000817ec"
            },
            "code": "void process_data_000817c8(undefined4 data_ptr, undefined4 data_ptr_2, undefined4 data_ptr_3, undefined4 data_ptr_4) {\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_3;\n  data_1 = data_ptr_2;\n  data_2 = data_ptr_3;\n  data_3 = data_ptr_4;\n  perform_operation(*DAT_000817ec, *(undefined4 *)(*DAT_000817ec + 8), data_ptr, &data_1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "process_data_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "check_and_copy_if_different_00081560",
                "param_1": "input1",
                "param_2": "input2",
                "copy_or_allocate_0008151c": "copy_or_allocate_memory"
            },
            "code": "int check_and_copy_if_different_00081560(int input1, int input2) {\n  if (input1 != input2) {\n    copy_or_allocate_memory();\n  }\n  return input1;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_and_copy_if_different_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "find_matching_bits_00081684",
                "param_1": "bits",
                "param_2": "mask",
                "param_3": "match",
                "param_4": "num_bits",
                "iVar1": "matching_bits",
                "*param_1": "*bits",
                "param_4 != iVar1": "remaining_bits > 0"
            },
            "code": "int find_matching_bits_00081684(uint *bits, uint mask, uint match, int num_bits) {\n  int matching_bits = 0;\n\n  while (num_bits > 0) {\n    if ((*bits & mask) != match) {\n      int remaining_bits = num_bits - 1;\n      while (remaining_bits > 0) {\n        if ((*bits & mask) != match) {\n          return matching_bits;\n        }\n        matching_bits++;\n        remaining_bits--;\n      }\n      return 0;\n    }\n    matching_bits++;\n    num_bits--;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "find_matching_bits_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_ptr_1",
                "puVar4": "src_ptr_2",
                "uVar5": "current_word_1",
                "uVar6": "current_word_2",
                "puVar7": "dest_ptr",
                "bVar8": "is_short_zero"
            },
            "code": "void copy_string_000825cc(uint *dest, uint *src) {\n  char current_char;\n  ushort current_short;\n  uint *src_ptr_1;\n  uint *src_ptr_2;\n  uint current_word_1;\n  uint current_word_2;\n  uint *dest_ptr;\n  bool is_short_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    src_ptr_2 = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr_2 = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = src_ptr_2;\n    if (((uint)src_ptr_2 & 2) != 0) {\n      src = (uint *)((int)src_ptr_2 + 2);\n      current_short = *(ushort *)src_ptr_2;\n      is_short_zero = (current_short & 0xff) == 0;\n      if (is_short_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_short_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_short_zero) {\n        return;\n      }\n    }\n  }\n  current_word_1 = *src;\n  src_ptr_2 = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word_1 + 0xfefefeff & ~current_word_1 & 0x80808080) != 0) goto LAB_00082630;\n    dest_ptr = dest + 1;\n    *dest = current_word_1;\n    src_ptr_2 = src + 2;\n    current_word_1 = src[1];\n  }\n  while( true ) {\n    src_ptr_1 = src_ptr_2 + 1;\n    current_word_2 = *src_ptr_2;\n    dest = dest_ptr;\n    if ((current_word_1 + 0xfefefeff & ~current_word_1 & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word_1;\n    current_word_1 = current_word_2;\n    if ((current_word_2 + 0xfefefeff & ~current_word_2 & 0x80808080) != 0) break;\n    src_ptr_2 = src_ptr_2 + 2;\n    current_word_1 = *src_ptr_1;\n    dest_ptr = dest_ptr + 2;\n    *dest = current_word_2;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)current_word_1;\n    current_word_2 = current_word_1 & 0xff;\n    current_word_1 = current_word_1 >> 8 | current_word_1 << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (current_word_2 != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_0008151c",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_set_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "flag_set",
                "PTR_DAT_0008013c": "data_pointer",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "code_pointer"
            },
            "code": "void execute_function_if_set_00080118(int param1, char* param2, int param3, int param4)\n{\n  if (DAT_00080134 != 0) {\n    param2 = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code*)0x0)) {\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "execute_function_if_set_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "bit_index",
                "uVar1": "mask",
                "DAT_00080ae8": "PTR_DAT_00080ae8"
            },
            "code": "int check_and_set_bit_00080aa8(uint bit_index){\n  uint mask;\n  if (bit_index < 0x2d) {\n    if (bit_index < 0x20) {\n      mask = 1 << (bit_index & 0xff);\n      if ((mask & *(uint *)(DAT_00080ae8 + 0x18)) != mask) {\n        *(uint *)(DAT_00080ae8 + 0x10) = mask;\n      }\n    }\n    else {\n      mask = 1 << (bit_index - 0x20 & 0xff);\n      if ((mask & *(uint *)(DAT_00080ae8 + 0x108)) != mask) {\n        *(uint *)(DAT_00080ae8 + 0x100) = mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "check_and_set_bit_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "process_data_00080f0c",
                "param_1": "index",
                "param_2": "type",
                "puVar1": "data_set",
                "puVar2": "data_type",
                "iVar3": "result",
                "uVar4": "data_set_size",
                "uVar5": "type_size",
                "uVar6": "data_set_value",
                "bVar7": "data_type_value",
                "bVar8": "data_type_value_and_type",
                "iVar9": "data_set_index",
                "iVar10": "data_set_value_index"
            },
            "code": "int process_data_00080f0c(int index, int type, int value1, int value2)\\n{\\n  int result = index;\\n  if (data_set[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((data_type[index] & 0xf) == 4) {\\n      result = set_bit_at_position(DAT_00081010, data_set[index * 0x1c + 0x19]);\\n    }\\n    byte data_type_value = data_type[index] & 0xf;\\n    if ((data_type_value < 3) && (data_type[index] != 0)) {\\n      if (data_type_value == 2) {\\n        if (type == 0) {\\n          return result;\\n        }\\n      }\\n      else if (data_type_value == 1) {\\n        if (type == 2) {\\n          return result;\\n        }\\n      }\\n      else if (data_type_value == 3) {\\n        if (type == 1) {\\n          return result;\\n        }\\n        goto LAB_00080f68;\\n      }\\n    }\\n    if (type != 1) {\\nLAB_00080f68:\\n      if (type == 0) {\\n        int data_set_index = index * 0x1c;\\n        check_and_set_bit(*(int *)(data_set + data_set_index + 8));\\n        result = process_data_00080f0c(*(int *)(data_set + data_set_index), 3, *(int *)(data_set + data_set_index + 4), 0);\\n        data_type_value = data_type[index] & 0xf0 | 2;\\n      }\\n      else {\\n        if (type != 2) {\\n          return result;\\n        }\\n        int data_set_index = index * 0x1c;\\n        check_and_set_bit(*(int *)(data_set + data_set_index + 8));\\n        result = process_data_00080f0c(*(int *)(data_set + data_set_index), 3, *(int *)(data_set + data_set_index + 4), 1);\\n        data_type_value = data_type[index] & 0xf0 | 1;\\n      }\\n      data_type[index] = data_type_value;\\n      return result;\\n    }\\n    int data_set_index = index * 0x1c;\\n    int data_set_value = *(int *)(data_set + data_set_index);\\n    if (data_type[index] >> 4 == 0) {\\n      type = 4;\\n    }\\n    else {\\n      type = 5;\\n    }\\n    result = process_data_00080f0c(data_set_value, type, *(int *)(data_set + data_set_index + 4), *(int *)(data_set + data_set_index + 0x10));\\n    data_type[index] = data_type[index] & 0xf0 | 3;\\n    if (*(int *)(data_set_value + 0x18) == -1) {\\n      uint data_set_size = *(uint *)(data_set + data_set_index + 8);\\n      if (0x2c < data_set_size) {\\n        return 1;\\n      }\\n      if (data_set_size < 0x20) {\\n        data_set_size = 1 << (data_set_size & 0xff);\\n        uint data_set_value = *(uint *)(DAT_00080b28 + 0x18) & data_set_size;\\n        if (data_set_value == data_set_size) {\\n          *(uint *)(DAT_00080b28 + 0x14) = data_set_value;\\n        }\\n      }\\n      else {\\n        data_set_size = 1 << (data_set_size - 0x20 & 0xff);\\n        uint data_set_value = *(uint *)(DAT_00080b28 + 0x108) & data_set_size;\\n        if (data_set_value == data_set_size) {\\n          *(uint *)(DAT_00080b28 + 0x104) = data_set_value;\\n        }\\n      }\\n      return 0;\\n    }\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080d58",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_00081014",
                "FUN_000801e0",
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "process_data_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "calculate_new_value_from_param_and_constant_00083a74",
                "param_1": "param_value",
                "param_2": "constant_value",
                "iVar1": "base_address",
                "puVar2": "new_var1 or new_var2",
                "iVar3": "sum1, sum2, or old_var2",
                "uVar4": "memory_address",
                "iVar5": "new_value",
                "DAT_00083b04": "base_address",
                "do_nothing_00081f94": "do_nothing_1",
                "calculate_and_set_sum_0008236c": "calculate_and_set_sum",
                "PTR_DAT_00083b08": "new_var1 or new_var2",
                "do_nothing_00081f98": "do_nothing_2",
                "DAT_00083b0c": "old_var2",
                "PTR_ and DAT_ variables": "unchanged"
            },
            "code": "int calculate_new_value_from_param_and_constant_00083a74(int param_value, int constant_value) {\n  int DAT_00083b04 = DAT_00083b04;\n  do_nothing_00081f94();\n  uint memory_address = *(uint *)(*(int *)(DAT_00083b04 + 8) + 4) & 0xfffffffc;\n  int new_value = ((memory_address - param_value) + 0xfef & 0xfffff000) - 0x1000;\n  if (new_value > 0xfff) {\n    int sum1 = calculate_and_set_sum_0008236c(param_value,0);\n    if (sum1 == *(int *)(DAT_00083b04 + 8) + memory_address) {\n      int sum2 = calculate_and_set_sum_0008236c(param_value,-new_value);\n      undefined *new_var1 = PTR_DAT_00083b08;\n      if (sum2 != -1) {\n        int old_var1 = *(int *)PTR_DAT_00083b08;\n        *(uint *)(*(int *)(DAT_00083b04 + 8) + 4) = memory_address - new_value | 1;\n        *(int *)new_var1 = old_var1 - new_value;\n        do_nothing_00081f98(param_value);\n        return 1;\n      }\n      new_value = calculate_and_set_sum_0008236c(param_value,0);\n      undefined *new_var2 = PTR_DAT_00083b08;\n      uint diff = new_value - *(int *)(DAT_00083b04 + 8);\n      if (diff > 0xf) {\n        int DAT_00083b0c = *DAT_00083b0c;\n        *(uint *)(*(int *)(DAT_00083b04 + 8) + 4) = diff | 1;\n        *(int *)new_var2 = new_value - DAT_00083b0c;\n      }\n    }\n  }\n  do_nothing_00081f98(param_value);\n  return 0;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "calculate_new_value_from_param_and_constant_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "process_return_value_000844e0",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr",
                "iVar2": "return_value"
            },
            "code": "void process_return_value_000844e0(int* result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n    undefined* ptr = PTR_DAT_00084504;\n    *(undefined4*)ptr = 0;\n    int return_value = return_zero_00080ebe(arg2, arg3, arg4);\n    if(return_value == -1 && *(int*)ptr != 0)\n    {\n        *result = *(int*)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "process_return_value_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_1": "memory_pool",
                "param_2": "block_size",
                "iVar1": "prev_block",
                "iVar3": "index1",
                "iVar5": "block_start",
                "iVar6": "next_block",
                "iVar8": "memory_pool_start",
                "block_end": "block_end",
                "block_size_aligned": "block_size_aligned",
                "block_size_header": "block_size_header",
                "memory_pool_start_header": "memory_pool_start_header",
                "prev_block_size": "prev_block_size"
            },
            "code": "void allocate_memory_block_00083b10(void *memory_pool, int block_size) {\n  if (block_size == 0) {\n    return;\n  }\n  do_nothing();\n  int memory_pool_start = DAT_00083c98;\n  uint block_size_aligned = *(uint *)(block_size + -4);\n  int block_start = block_size + -8;\n  block_size_aligned &= 0xfffffffe;\n  int block_end = block_start + block_size_aligned;\n  uint block_size_header = *(uint *)(block_end + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083c98 + 8) == block_end) {\n    block_size_header += block_size_aligned;\n    if (-1 < (int)(block_size_aligned << 0x1f)) {\n      block_start -= *(int *)(block_size + -8);\n      int prev_block = *(int *)(block_start + 0xc);\n      int next_block = *(int *)(block_start + 8);\n      block_size_header += *(int *)(block_size + -8);\n      *(int *)(next_block + 0xc) = prev_block;\n      *(int *)(prev_block + 8) = next_block;\n    }\n    uint *memory_pool_start_header = *DAT_00083ca0;\n    *(uint *)(block_start + 4) = block_size_header | 1;\n    *(int *)(memory_pool_start + 8) = block_start;\n    if (memory_pool_start_header <= block_size_header) {\n      calculate_new_value_from_param_and_constant(param_1,*(undefined4 *)PTR_DAT_00083ca4);\n    }\n  }\n  else {\n    block_size_aligned = block_size_aligned & 1;\n    *(uint *)(block_end + 4) = block_size_header;\n    if (block_size_aligned == 0) {\n      block_start -= *(int *)(block_size + -8);\n      int prev_block = *(int *)(block_start + 8);\n      uint prev_block_size = block_size_aligned + *(int *)(block_size + -8);\n      if (prev_block == memory_pool_start + 8) {\n        block_size_aligned = 1;\n      }\n      else {\n        int next_block = *(int *)(block_start + 0xc);\n        *(int *)(prev_block + 0xc) = next_block;\n        *(int *)(next_block + 8) = prev_block;\n      }\n    }\n    else {\n      block_size_aligned = 0;\n    }\n    if (-1 < *(int *)(block_end + block_size_header + 4) << 0x1f) {\n      uint prev_block_size = prev_block_size + block_size_aligned;\n      int next_block = *(int *)(block_end + 8);\n      if ((block_size_aligned == 0) && (next_block == DAT_00083c9c)) {\n        *(int *)(memory_pool_start + 0x14) = block_start;\n        *(int *)(memory_pool_start + 0x10) = block_start;\n        *(int *)(block_start + 0xc) = next_block;\n        *(int *)(block_start + 8) = next_block;\n        *(uint *)(block_start + 4) = prev_block_size | 1;\n        *(uint *)(block_start + prev_block_size) = prev_block_size;\n        goto LAB_00083ba4;\n      }\n      int prev_block = *(int *)(block_end + 0xc);\n      *(int *)(next_block + 0xc) = prev_block;\n      *(int *)(prev_block + 8) = next_block;\n    }\n    *(uint *)(block_start + 4) = prev_block_size | 1;\n    *(uint *)(block_start + prev_block_size) = prev_block_size;\n    if (block_size_aligned == 0) {\n      if (prev_block_size < 0x200) {\n        uint *memory_pool_header = *(uint *)(memory_pool_start + 4);\n        int memory_pool_block_header = memory_pool_start + (prev_block_size & 0xfffffff8);\n        int next_block = *(int *)(memory_pool_block_header + 8);\n        *(int *)(block_start + 8) = next_block;\n        *(int *)(block_start + 0xc) = memory_pool_block_header;\n        *(uint *)(memory_pool_start + 4) = memory_pool_header | 1 << ((int)(prev_block_size >> 3) >> 2 & 0xffU);\n        *(int *)(memory_pool_block_header + 8) = block_start;\n        *(int *)(next_block + 0xc) = block_start;\n        do_nothing(param_1);\n        return;\n      }\n      uint block_size_divided = prev_block_size >> 9;\n      int index1, index2;\n      if (block_size_divided < 5) {\n        index1 = (prev_block_size >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (block_size_divided < 0x15) {\n        index1 = block_size_divided + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (block_size_divided < 0x55) {\n        index1 = (prev_block_size >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (block_size_divided < 0x155) {\n        index1 = (prev_block_size >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (block_size_divided < 0x555) {\n        index1 = (prev_block_size >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index1 = 0xfc;\n        index2 = 0x7e;\n      }\n      int memory_pool_block_header = memory_pool_start + index2 * 4;\n      int next_block = *(int *)(memory_pool_block_header + 8);\n      if (next_block == memory_pool_block_header) {\n        *(uint *)(DAT_00083c98 + 4) = *(uint *)(DAT_00083c98 + 4) | 1 << (index1 >> 2 & 0xffU);\n        memory_pool_block_header = next_block;\n      }\n      else {\n        do {\n          if ((*(uint *)(next_block + 4) & 0xfffffffc) <= prev_block_size) break;\n          next_block = *(int *)(next_block + 8);\n        } while (memory_pool_block_header != next_block);\n        memory_pool_block_header = *(int *)(next_block + 0xc);\n      }\n      *(int *)(block_start + 0xc) = memory_pool_block_header;\n      *(int *)(block_start + 8) = next_block;\n      *(int *)(memory_pool_block_header + 8) = block_start;\n      *(int *)(next_block + 0xc) = block_start;\n    }\n  }\nLAB_00083ba4:\n  do_nothing(param_1);\n  return;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084484",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081800"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "return_zero_00080e80"
            },
            "code": "int return_zero_00080e80(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "return_zero_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "convert_number_to_string_thunk_0008113a",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "format_character",
                "iVar1": "result",
                "iVar2": "minus_sign"
            },
            "code": "int convert_number_to_string_thunk_0008113a(undefined4 *function_pointer, uint number, uint base, undefined4 format_character) {\n  int result;\n  int negative_flag = 0;\n\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer, number & 0xff);\n    return result;\n  }\n  if (base == 10 && (int)number < 0) {\n    negative_flag = 1;\n    number = -number;\n  }\n  base = base & 0xff;\n  result = convert_decimal_to_base_n(function_pointer, number, base, format_character);\n  if (negative_flag) {\n    int minus_sign = execute_function_pointer(function_pointer, 0x2d);\n    result += minus_sign;\n  }\n  return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "convert_number_to_string_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "calculate_and_set_sum_0008236c",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "sum",
                "PTR_DAT_0008238c": "data_pointer",
                "stored_value": "stored_value"
            },
            "code": "void calculate_and_set_sum_0008236c(int* result, undefined4 input) {\n  undefined* PTR_DAT_0008238c = PTR_DAT_0008238c;\n  *(undefined4*)PTR_DAT_0008238c = 0;\n  int sum = calculate_sum(input);\n  int stored_value = *(int*)PTR_DAT_0008238c;\n  if (sum == -1 && stored_value != 0) {\n    *result = stored_value;\n  }\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "calculate_and_set_sum_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_default_value_to_ffff_00080d62",
                "param_1": "address"
            },
            "code": "void set_default_value_to_ffff_00080d62(int address)\n{\n  *(int *)(address + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_default_value_to_ffff_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "decode_and_process_data_000842a4",
                "param_1": "buffer_address",
                "param_2": "input_data",
                "param_3": "buffer_ptr",
                "param_4": "buffer_size",
                "uVar1": "data_length",
                "uVar2": "length_as_uint",
                "puVar3": "buffer_start",
                "iVar4": "distance_from_start"
            },
            "code": "uint decode_and_process_data_000842a4(int buffer_address, uint input_data, undefined4 *buffer_ptr, undefined4 buffer_size)\n{\n  ushort data_length = *(ushort *)(buffer_ptr + 3);\n  uint length_as_uint = (uint)data_length;\n  buffer_ptr[2] = buffer_ptr[6];\n  if ((-1 < (int)(length_as_uint << 0x1c)) || (buffer_ptr[4] == 0)) {\n    int result = process_data(buffer_address, buffer_ptr, data_length, length_as_uint, buffer_size);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    data_length = *(ushort *)(buffer_ptr + 3);\n    length_as_uint = (uint)data_length;\n  }\n  input_data = input_data & 0xff;\n  if ((int)(length_as_uint << 0x12) < 0) {\n    undefined *buffer_start = (undefined *)*buffer_ptr;\n    int distance_from_start = (int)buffer_start - buffer_ptr[4];\n    if (distance_from_start < (int)buffer_ptr[5]) {\n      distance_from_start++;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer_ptr[0x19] = buffer_ptr[0x19] & 0xffffdfff;\n    undefined *buffer_start = (undefined *)*buffer_ptr;\n    *(ushort *)(buffer_ptr + 3) = data_length | 0x2000;\n    int distance_from_start = (int)buffer_start - buffer_ptr[4];\n    if (distance_from_start < (int)buffer_ptr[5]) {\n      distance_from_start++;\n      goto LAB_000842d8;\n    }\n  }\n  int result = decode_data(buffer_address, buffer_ptr);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  undefined *buffer_start = (undefined *)*buffer_ptr;\n  int distance_from_start = 1;\nLAB_000842d8:\n  buffer_ptr[2] = buffer_ptr[2] + -1;\n  *buffer_ptr = buffer_start + 1;\n  *buffer_start = (char)input_data;\n  if (((buffer_ptr[5] == distance_from_start) || ((int)((uint)*(ushort *)(buffer_ptr + 3) << 0x1f) < 0 && (input_data == 10)))) {\n    int result = decode_data(buffer_address, buffer_ptr);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n  }\n  return input_data;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "initialize_memory_block_if_result_is_zero_000814d0_000814f6",
                "param_1": "memory_block",
                "param_2": "size",
                "uVar1": "byte_count"
            },
            "code": "undefined4* initialize_memory_block_if_result_is_zero_000814d0_000814f6(undefined4* memory_block, int size, int count)\n{\n    memory_block[0] = 0;\n    memory_block[1] = 0;\n    memory_block[2] = 0;\n    if (size != 0) {\n        int byte_count = count_bytes_until_null_00082688(size);\n        if (byte_count == 0) {\n            memset(memory_block, 0, size);\n        }\n    }\n    return memory_block;\n}",
            "called": [
                "FUN_00082688",
                "FUN_000814d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_if_result_is_zero_000814d0_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "input_val",
                "puVar1": "ptr_data",
                "iVar2": "sum_value"
            },
            "code": "int calculate_sum_00080e88(int input_val)\n{\n  undefined *ptr_data = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  int sum_value = *(int *)ptr_data;\n  *(int *)ptr_data = input_val + sum_value;\n  return sum_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "calculate_sum_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "process_data_000836d8",
                "puVar1": "data_ptr",
                "puVar2": "list_ptr",
                "iVar3": "list_size",
                "iVar4": "list_capacity",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "PTR_DAT_000836e8": "data_buffer_ptr",
                "DAT_000836e4": "data_available",
                "PTR_DAT_000836d0": "list_capacity_ptr",
                "DAT_000836d4": "data_overflow"
            },
            "code": "void process_data_000836d8(void)\n{\n  uint8_t *data_ptr;\n  uint32_t *list_ptr;\n  int list_size;\n  int list_capacity;\n  void (*jump_table)(uint32_t);\n  \n  data_ptr = PTR_DAT_000836e8;\n  if (DAT_000836e4 == 0) {\n    return;\n  }\n  \n  list_capacity = *(int *)PTR_DAT_000836d0;\n  list_ptr = *(uint32_t **)(PTR_DAT_000836d0 + 0x148);\n  if (list_ptr == (uint32_t *)0x0) {\n    list_ptr = (uint32_t *)(PTR_DAT_000836d0 + 0x14c);\n    *(uint32_t **)(PTR_DAT_000836d0 + 0x148) = list_ptr;\n  }\n  list_size = list_ptr[1];\n  if (list_size > 31) {\n    if ((DAT_000836d4 == 0) || (list_ptr = (uint32_t *)malloc(400), list_ptr == (uint32_t *)0x0)) {\n      jump_table = (void (*)(uint32_t))UNRECOVERED_JUMPTABLE_00;\n      jump_table(0xffffffff);\n      return;\n    }\n    *list_ptr = *(uint32_t *)(PTR_DAT_000836d0 + 0x148);\n    list_ptr[1] = 0;\n    list_size = 0;\n    *(uint32_t **)(PTR_DAT_000836d0 + 0x148) = list_ptr;\n    list_ptr[0x62] = 0;\n    list_ptr[99] = 0;\n  }\n  list_ptr[1] = list_size + 1;\n  list_ptr[list_size + 2] = data_ptr;\n  jump_table = (void (*)(uint32_t))UNRECOVERED_JUMPTABLE_00;\n  jump_table(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "process_data_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "store_data_000812b8",
                "param_1": "data_address",
                "param_2": "data_value",
                "iVar1": "data_struct_address",
                "uVar2": "data_max_size",
                "data_struct_pointer": "data_struct_pointer",
                "data_struct_size": "data_struct_size",
                "data_index": "data_index",
                "data_value_char": "data_value_char"
            },
            "code": "int store_data_000812b8(int data_address, int data_value)\n{\n  int data_struct_address = *(int *)(data_address + 0x14);\n  int data_struct_pointer = *(int *)(data_address + 0x18);\n  int data_struct_size = *(int *)(data_struct_pointer + 0x14);\n  int data_index = *(int *)(data_struct_pointer + 0x80);\n  int data_max_size = *(int *)(data_struct_pointer + 0x84);\n  \n  if (data_max_size << 0x1e >= 0 || *(int *)(data_struct_address + 0x84) != *(int *)(data_struct_address + 0x80)) {\n    int data_value_char = (char)data_value;\n    *(char *)(data_struct_address + data_index) = data_value_char;\n    *(int *)(data_struct_address + 0x80) = data_index + 1;\n    *(int *)(data_struct_pointer + 8) = 2;\n  }\n  else {\n    *(int *)(data_struct_pointer + 0x1c) = data_value;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "store_data_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe",
                "undefined4": "int32_t",
                "0xffffffff": "-1"
            },
            "code": "int32_t get_error_code_thunk_00080efe(void)\n{\n    return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "get_error_code_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "iVar2": "var1",
                "uVar3": "value2",
                "pbVar4": "ptr1",
                "local_1c": "current_byte",
                "abStack_1b": "buffer"
            },
            "code": "uint process_data_000839b4(uint param1, uint param2, byte **param3)\n{\n  uint value1;\n  int var1;\n  uint value2;\n  byte *ptr1;\n  uint index1;\n  byte current_byte;\n  byte buffer[3];\n\n  if (-1 < (int)((uint)*(ushort *)(param_3 + 3) << 0x12)) {\n    *(ushort *)(param_3 + 3) = *(ushort *)(param_3 + 3) | 0x2000;\n    param_3[0x19] = (byte *)((uint)param_3[0x19] | 0x2000);\n  }\n  value1 = get_value_from_data();\n  if ((value1 == 1) && (param_2 - 1 < 0xff)) {\n    value2 = param_2 & 0xff;\n    current_byte = (byte)value2;\n  }\n  else {\n    value1 = process_data_000839b4_internal(param1, &current_byte, param_2, param_3 + 0x17);\n    if (value1 == 0xffffffff) {\n      *(ushort *)(param_3 + 3) = *(ushort *)(param_3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (value1 == 0) {\n      return param_2;\n    }\n    value2 = (uint)current_byte;\n  }\n  index1 = 0;\n  do {\n    ptr1 = param_3[2] + -1;\n    param_3[2] = ptr1;\n    if ((int)ptr1 < 0) {\n      if ((int)param_3[6] <= (int)ptr1) {\n        **param_3 = (byte)value2;\n        ptr1 = *param_3;\n        value2 = (uint)*ptr1;\n        if (value2 != 10) goto LAB_00083a04;\n      }\n      var1 = decode_and_process_data_000839b4(param1, value2, param_3);\n      if (var1 == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param_3 = (byte)value2;\n      ptr1 = *param_3;\n      LAB_00083a04:\n      *param_3 = ptr1 + 1;\n    }\n    if (value1 <= index1 + 1) {\n      return param_2;\n    }\n    value2 = (uint)buffer[index1];\n    index1 = index1 + 1;\n  } while( true );\n}\n",
            "called": [
                "FUN_000842a4",
                "FUN_0008434c",
                "FUN_0008400c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "process_data_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "check_and_copy_string_00081570",
                "param_1": "ptr_arr",
                "param_2": "string_length",
                "param_3": "offset",
                "iVar1": "check_result",
                "iVar2": "current_offset",
                "copy_string_000825cc": "copy_string",
                "check_result_000814ae": "check_result"
            },
            "code": "int check_and_copy_string_00081570(int *ptr_arr, int string_length, int offset) {\n  int current_offset = ptr_arr[2];\n  if (string_length == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    int check_result = check_result(ptr_arr, current_offset + offset);\n    if (check_result == 0) {\n      return 0;\n    }\n    copy_string(ptr_arr[0] + current_offset, string_length);\n    ptr_arr[2] = current_offset + offset;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "check_and_copy_string_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "configure_and_start_tc_channel_000803fc",
                "param_1": "channel_id",
                "param_2": "channel_num",
                "param_3": "bit_index",
                "param_4": "value",
                "unaff_r4": "TC_CHANNEL",
                "in_lr": "LR",
                "uVar1": "combined_params",
                "check_and_set_bit_00080aa8": "check_and_set_bit",
                "configure_tc_channel_00080b2c": "configure_tc_channel",
                "set_value_at_index_00080b90": "set_value_at_index",
                "DAT_00080448": "BIT_ARRAY_START",
                "PTR_s____source_tc_c_00080b80": "SRC_TC_C",
                "PTR_s_TC_Start_00080b84": "TC_START_STR",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "sizeof(TC_CHANNEL)",
                "*DAT_00080b8c": "TC_START_FUNC"
            },
            "code": "void configure_and_start_tc_channel_000803fc(int channel_id, uint32_t channel_num, uint32_t bit_index, uint32_t value) {\n  uint64_t combined_params = ((uint64_t)channel_num << 32) | channel_id;\n  check_and_set_bit(bit_index);\n  configure_tc_channel(channel_id, channel_num, 0xc002);\n  set_value_at_index(channel_id, channel_num, 0xa41);\n  *(int *)(DAT_00080448 + (value >> 5) * 4) = 1 << (value & 0x1f);\n  *(uint32_t *)(channel_id + channel_num * 0x40 + 0x24) = 4;\n  if (channel_num > 2) {\n    combined_params = (**DAT_00080b8c)(PTR_s____source_tc_c_00080b80, 0x5c, PTR_s_TC_Start_00080b84, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88, combined_params, LR);\n  }\n  *(uint32_t *)((int)combined_params + (int)((uint64_t)combined_params >> 0x20) * 0x40) = 5;\n  return;\n}",
            "called": [
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_00080b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "configure_and_start_tc_channel_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_memory_permissions_00080eb0",
                "param_1": "memory_address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(int*)(memory_address + 4)",
                "undefined4": "int"
            },
            "code": "int set_memory_permissions_00080eb0(int* memory_address, int permissions) {\n  *(int*)(memory_address + 4) = permissions;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "copy_string_to_buffer_if_not_negative_00081214",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "buffer_length",
                "uVar1": "current_value"
            },
            "code": "void copy_string_to_buffer_if_not_negative_00081214(uint8_t *buffer, uint32_t value) {\n    initialize_memory_block_if_result_is_zero(buffer, PTR_DAT_00081240);\n    uint32_t current_value;\n    while ((current_value = get_value_from_pointer_and_set_to_param_3(value)) >= 0 && current_value != buffer_length) {\n        copy_string_to_buffer(buffer, current_value & 0xff);\n    }\n    return;\n}",
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "copy_string_to_buffer_if_not_negative_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_or_return_error_code_0008439c",
                "param_1": "output_buffer",
                "param_2": "byte_to_write",
                "param_3": "buffer_size",
                "*param_2": "*byte_to_write",
                "*param_1": "*output_buffer"
            },
            "code": "int write_byte_or_return_error_code_0008439c(int *output_buffer, unsigned char byte_to_write, uint buffer_size) {\n\tif (output_buffer == NULL) {\n\t\treturn 0;\n\t}\n\tif (buffer_size < 256) {\n\t\t*output_buffer = (int)byte_to_write;\n\t\treturn 1;\n\t}\n\t*output_buffer = 0x8a;\n\treturn -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_code_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "process_data_on_list_00082824",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "list_ptr",
                "piVar1": "node_data_ptr",
                "iVar2": "return_value",
                "piVar3": "current_node_ptr",
                "uVar4": "current_data_index",
                "puVar5": "current_data_ptr",
                "uVar6": "node_data_size",
                "uVar7": "total_data_count"
            },
            "code": "int process_data_on_list_00082824(undefined4 input_1, int input_2, int **list_ptr){\n  int *current_node_ptr;\n  int return_value;\n  int *node_data_ptr;\n  uint node_data_size;\n  undefined4 *current_data_ptr;\n  uint current_data_index;\n  uint total_data_count;\n  if (-1 < *(int *)(input_2 + 100) << 0x12) {\n    return_value = FUNC_00083ca8();\n    list_ptr[2] = (int *)0x0;\n    list_ptr[1] = (int *)0x0;\n    return return_value;\n  }\n  current_node_ptr = list_ptr[2];\n  node_data_ptr = *list_ptr;\n  while (current_node_ptr != (int *)0x0) {\n    node_data_size = current_node_ptr[1];\n    total_data_count = node_data_size >> 2;\n    if (total_data_count != 0) {\n      current_data_ptr = (undefined4 *)(*node_data_ptr + -4);\n      current_data_index = 0;\n      do {\n        current_data_ptr = current_data_ptr + 1;\n        return_value = process_data_000839b4(input_1, *current_data_ptr, input_2);\n        current_data_index = current_data_index + 1;\n        if (return_value == -1) goto LAB_00082864;\n      } while (total_data_count != current_data_index);\n      current_node_ptr = list_ptr[2];\n    }\n    current_node_ptr = (int *)((int)current_node_ptr - (node_data_size & 0xfffffffc));\n    list_ptr[2] = current_node_ptr;\n    node_data_ptr = node_data_ptr + 2;\n  }\n  return_value = 0;\nLAB_00082864:\n  list_ptr[2] = (int *)0x0;\n  list_ptr[1] = (int *)0x0;\n  return return_value;\n}",
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_on_list_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "process_return_value_and_set_flag_0008427c",
                "param_1": "file_buffer",
                "param_2": "buffer_index",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "code": "void process_return_value_and_set_flag_0008427c(undefined4 file_buffer, int buffer_index)\n{\n    int result = process_return_value(file_buffer, *(short *)(buffer_index + 0xe));\n    ushort flag = *(ushort *)(buffer_index + 0xc);\n    if (result == -1) {\n        flag &= 0xefff;\n    }\n    else {\n        flag |= 0x1000;\n    }\n    if (result != -1) {\n        *(int *)(buffer_index + 0x50) = result;\n    }\n    *(ushort *)(buffer_index + 0xc) = flag;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "process_return_value_and_set_flag_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "set_param_000809be",
                "param_1": "ptr_param_data",
                "param_2": "param_type",
                "param_3": "param_value",
                "uVar1": "updated_value"
            },
            "code": "void set_param_000809be(uint32_t *ptr_param_data, uint32_t param_type, uint32_t param_value) {\n  uint32_t updated_value;\n  ptr_param_data[1] = param_value;\n  switch(param_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      updated_value = ptr_param_data[28] & ptr_param_data[28] & ~param_value;\n      break;\n    case 2:\n      updated_value = ptr_param_data[28] | param_value;\n      break;\n    default:\n      goto end_of_function;\n  }\n  ptr_param_data[28] = updated_value;\nend_of_function:\n  ptr_param_data[1] = param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "set_param_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_permissions_00080a94",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "uVar1": "result",
                "*(uint *)(param_1 + 8)": "perm1",
                "*(uint *)(param_1 + 0x18)": "perm2"
            },
            "code": "uint check_permissions_00080a94(int ptr_param1, uint param2)\n{\n  uint result;\n  uint perm1 = *(uint *)(ptr_param1 + 8) & param2;\n  if (perm1 != 0) {\n    uint perm2 = *(uint *)(ptr_param1 + 0x18);\n    if ((param2 & perm2) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_permissions_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_value_in_data_at_offset_00081618",
                "DAT_00081620": "data",
                "PTR_": ""
            },
            "code": "void set_value_in_data_at_offset_00081618(void)\n{\n  int* DAT_00081620_ptr = (int*)(DAT_00081620 + 4);\n  int value_to_set = 0x8000;\n  *DAT_00081620_ptr = value_to_set;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_value_in_data_at_offset_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "initial_value",
                "param_2": "second_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "result_array",
                "uVar1": "multiplied_value",
                "lVar2": "long_multiplied_value"
            },
            "code": "void calculate_difference_0008455c(uint initial_value, int second_value, undefined4 param_3, undefined4 param_4, int *result_array)\n{\n  uint multiplied_value;\n  longlong long_multiplied_value;\n  long_multiplied_value = multiply_two_values();\n  long_multiplied_value = long_multiplied_value * CONCAT44(param_4,param_3);\n  multiplied_value = (uint)long_multiplied_value;\n  *result_array = initial_value - multiplied_value;\n  result_array[1] = (second_value - (int)((ulonglong)long_multiplied_value >> 0x20)) - (uint)(initial_value < multiplied_value);\n  return;\n}",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_char_in_array_000840f8",
                "param_1": "array",
                "param_2": "target_char",
                "param_3": "array_size",
                "puVar1": "current_element",
                "uVar2": "element_xor_target",
                "pcVar3": "current_char_ptr",
                "pcVar4": "last_char_ptr",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_char_in_array_000840f8(uint *array, char target_char, uint *array_size)\n{\n  uint *current_element;\n  uint element_xor_target;\n  char *current_char_ptr;\n  char *last_char_ptr;\n  bool found_target_char;\n  \n  if (((uint)array & 3) == 0) {\n    current_element = array;\n    if ((uint *)0x3 < array_size) {\n      do {\n        element_xor_target = *array ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        current_element = array;\n        if ((element_xor_target + 0xfefefeff & ~element_xor_target & 0x80808080) != 0) break;\n        array_size = array_size + -1;\n        current_element = array + 1;\n        array = array + 1;\n      } while ((uint *)0x3 < array_size);\n    }\n    array = array_size;\n    last_char_ptr = (char *)((int)array + -1);\n    if ((array != (uint *)0x0) && (array = current_element, *(char *)current_element != target_char)) {\n      current_char_ptr = (char *)0x0;\n      do {\n        array = (uint *)((int)array + 1);\n        found_target_char = current_char_ptr == last_char_ptr;\n        current_char_ptr = current_char_ptr + 1;\n        if (found_target_char) goto LAB_00084150;\n      } while (*(char *)array != target_char);\n    }\n  }\n  else if (array_size == (uint *)0x0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target_char) {\n    current_element = (uint *)((int)array + 1);\n    array_size = (uint *)((int)array_size + -1);\n    do {\n      array = current_element;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (array_size == (uint *)0x0) goto LAB_00084150;\n      current_element = (uint *)((int)array + 1);\n      array_size = (uint *)((int)array_size + -1);\n    } while (*(char *)array != target_char);\n  }\n  return array;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "find_char_in_array_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_buffer_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = process_data_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)decode_data_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_until_null_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_char_in_array_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_result_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_result_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    process_data_on_list_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_data_on_list_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_000817c8",
                "FUN_000834f0",
                "FUN_00081750"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "fill_buffer_with_value_00081f00",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "next_word",
                "uVar3": "word_value",
                "uVar4": "remaining_bytes",
                "bVar5": "is_size_zero"
            },
            "code": "void fill_buffer_with_value_00081f00(uint32_t* buffer, uint8_t value, uint32_t size)\n{\n    uint32_t* current_word = buffer;\n    uint32_t* end_word = buffer + (size / 4);\n    uint32_t remaining_bytes = size % 4;\n    uint32_t word_value = (value << 24) | (value << 16) | (value << 8) | value;\n\n    while (current_word < end_word) {\n        *current_word++ = word_value;\n    }\n\n    uint8_t* current_byte = (uint8_t*) current_word;\n    while (remaining_bytes-- > 0) {\n        *current_byte++ = value;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_value_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_negative_one_00080eaa"
            },
            "code": "int32_t return_negative_one_00080eaa(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "return_negative_one_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "new_dest",
                "puVar2": "dest",
                "puVar3": "new_source",
                "uVar4": "bytes_left",
                "uVar5": "remainder",
                "bVar6": "is_aligned"
            },
            "code": "undefined4 *copy_memory_00081d48(undefined4 *destination, undefined4 *source, uint size) {\n  undefined4 *dest = destination;\n  uint remainder = size;\n  bool is_aligned = (((uint)source | (uint)destination) & 3) == 0;\n  if (!is_aligned) {\n    if (size < 8) {\n      uint bytes_left = size - 4;\n      if (bytes_left > 3) {\n        do {\n          *(undefined *)dest = *(undefined *)source;\n          dest = (undefined4 *)((int)dest + 1);\n          source = (undefined4 *)((int)source + 1);\n          bytes_left--;\n        } while (bytes_left != 0);\n        *(undefined *)(undefined4 *)((int)dest + 1) =\n             *(undefined *)(undefined4 *)((int)source + 1);\n        *(undefined *)((int)dest + 2) = *(undefined *)((int)source + 2);\n        *(undefined *)((int)dest + 3) = *(undefined *)((int)source + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      uint padding = 4 - ((uint)destination & 3);\n      remainder = size - padding;\n      undefined4 *new_dest = destination;\n      undefined4 *new_source = source;\n      if (((uint)destination & 1) != 0) {\n        new_source = (undefined4 *)((int)source + 1);\n        new_dest = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest = new_dest;\n      source = new_source;\n      if ((padding & 2) != 0) {\n        source = (undefined4 *)((int)new_source + 2);\n        dest = (undefined4 *)((int)new_dest + 2);\n        *(undefined2 *)new_dest = *(undefined2 *)new_source;\n      }\n    }\n  }\n  while (remainder > 63) {\n    *dest = *source;\n    dest[1] = source[1];\n    dest[2] = source[2];\n    dest[3] = source[3];\n    dest[4] = source[4];\n    dest[5] = source[5];\n    dest[6] = source[6];\n    dest[7] = source[7];\n    dest[8] = source[8];\n    dest[9] = source[9];\n    dest[10] = source[10];\n    dest[11] = source[11];\n    dest[12] = source[12];\n    dest[13] = source[13];\n    dest[14] = source[14];\n    dest[15] = source[15];\n    dest += 16;\n    source += 16;\n    remainder -= 64;\n  }\n  uint bytes_left = remainder - 16;\n  if (bytes_left > 49) {\n    do {\n      *dest = *source;\n      dest[1] = source[1];\n      dest[2] = source[2];\n      dest[3] = source[3];\n      dest += 4;\n      source += 4;\n      bytes_left -= 16;\n    } while (bytes_left > 15);\n  }\n  if (bytes_left > 15) {\n    *(undefined4 *)dest = *(undefined4 *)source;\n    *(undefined4 *)((int)dest + 4) = *(undefined4 *)((int)source + 4);\n    *(undefined4 *)((int)dest + 8) = *(undefined4 *)((int)source + 8);\n    *(undefined4 *)((int)dest + 0xc) = *(undefined4 *)((int)source + 0xc);\n    dest += 4;\n    source += 4;\n  }\n  if (bytes_left > 3) {\n    *(undefined *)dest = *(undefined *)source;\n    dest = (undefined4 *)((int)dest + 1);\n    source = (undefined4 *)((int)source + 1);\n    *(undefined *)dest = *(undefined *)source;\n    dest = (undefined4 *)((int)dest + 1);\n    source = (undefined4 *)((int)source + 1);\n    *(undefined *)dest = *(undefined *)source;\n    dest = (undefined4 *)((int)dest + 1);\n    source = (undefined4 *)((int)source + 1);\n  }\n  if (bytes_left > 0) {\n    *(undefined *)dest = *(undefined *)source;\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "set_permissions_00084494",
                "param_1": "result",
                "param_2": "address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "ptr",
                "iVar2": "set_permissions_result"
            },
            "code": "void set_permissions_00084494(int* result, uint32_t address, uint32_t size, uint32_t permissions, uint32_t reserved)\n{\n    uint8_t* ptr = PTR_DAT_000844b8;\n    * (uint32_t*) PTR_DAT_000844b8 = 0;\n    int set_permissions_00084494_result = set_memory_permissions_00080eb0(address, size, size, permissions, reserved);\n    if ((set_permissions_00084494_result == -1) && (* (int*) ptr != 0)) {\n        *result = * (int*) ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "set_permissions_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "calculate_result_00084530",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "result",
                "calculate_difference_0008458c": "calculate_difference"
            },
            "code": "int calculate_result_00084530(int num1, int num2, int num3, int num4)\n{\n  int result;\n  if ((num4 == 0) && (num3 == 0)) {\n    if (num2 != 0 || num1 != 0) {\n      num1 = -1;\n    }\n    result = num1;\n  }\n  else {\n    result = calculate_difference();\n  }\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "calculate_result_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_differences_00080970",
                "calculate_difference_00081248": "calculate_difference",
                "do_nothing_0008073a": "do_nothing",
                "do_nothing_00080748": "do_nothing",
                "do_nothing_0008074a": "do_nothing",
                "do_nothing_0008074c": "do_nothing"
            },
            "code": "void check_differences_00080970(void)\n{\n  int difference;\n  difference = calculate_difference(PTR_DAT_000809a4);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809a8);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809ac);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809b0);\n  if (difference != 0) {\n    do_nothing();\n  }\n  return;\n}\n",
            "called": [
                "FUN_0008074c",
                "FUN_0008073a",
                "FUN_0008074a",
                "FUN_00080748",
                "FUN_00081248"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_differences_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "set_permissions_00084018",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "uVar1": "permissions",
                "iVar2": "set_permissions_result",
                "iVar3": "set_permissions_flag",
                "uVar4": "permissions_bits",
                "bVar5": "is_shared_library",
                "auStack_54": "stack_array",
                "local_50": "local_variable"
            },
            "code": "void set_permissions_00084018(int file_descriptor, int *file_info)\n{\n  ushort permissions = *(ushort *)(file_info + 3);\n  uint permissions_bits = (uint)permissions;\n  if ((int)(permissions_bits << 0x1e) < 0) {\n    *file_info = (int)file_info + 0x43;\n    file_info[4] = (int)file_info + 0x43;\n    file_info[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)file_info + 0xe)) {\n    int set_permissions_00084018_result = set_permissions_00084018_00084494(file_descriptor,(int)*(short *)((int)file_info + 0xe),auStack_54);\n    if (-1 < set_permissions_00084018_result) {\n      bool is_shared_library = (permissions_bits & 0xf000) == 0x2000;\n      if (((permissions_bits & 0xf000) == 0x8000) && ((undefined *)file_info[10] == PTR_FUN_0008427c_1_000840f4)) {\n        int flag = 0x400;\n        *(ushort *)(file_info + 3) = permissions | 0x400;\n        file_info[0x13] = 0x400;\n      }\n      else {\n        int flag = 0x400;\n        *(ushort *)(file_info + 3) = permissions | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    permissions = *(ushort *)(file_info + 3);\n    permissions_bits = (uint)permissions;\n  }\n  *(ushort *)(file_info + 3) = permissions | 0x800;\n  int flag = (permissions_bits & 0x80) == 0 ? 0x400 : 0x40;\n  bool is_shared_library = false;\nLAB_00084074:\n  int set_permissions_00084018_flag = set_permissions_00084018_flag(file_descriptor,flag);\n  permissions = *(ushort *)(file_info + 3);\n  if (set_permissions_00084018_flag == 0) {\n    if (-1 < (int)((uint)permissions << 0x16)) {\n      *(ushort *)(file_info + 3) = permissions | 2;\n      *file_info = (int)file_info + 0x43;\n      file_info[4] = (int)file_info + 0x43;\n      file_info[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(file_descriptor + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n    *(ushort *)(file_info + 3) = permissions | 0x80;\n    *file_info = set_permissions_00084018_flag;\n    file_info[4] = set_permissions_00084018_flag;\n    file_info[5] = flag;\n    if ((is_shared_library) && (set_permissions_00084018_flag = return_value_or_default_000844bc(file_descriptor,(int)*(short *)((int)file_info + 0xe)), set_permissions_00084018_flag != 0))\n    {\n      *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "set_permissions_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_number_000815de",
                "param_1": "input_str",
                "pbVar4": "str_ptr",
                "uVar5": "c",
                "bVar1": "char_info",
                "bVar2": "has_sign",
                "iVar7": "digit_value",
                "iVar8": "has_digit",
                "uVar3": "result",
                "uVar9": "max_div_10",
                "uVar10": "max_mod_10"
            },
            "code": "uint parse_number_000815de(byte **input_str)\n{\n  if (*input_str == NULL) {\n    return 0;\n  }\n  byte *str_ptr = *input_str;\n  uint result = 0;\n  int sign = 1;\n  if (*str_ptr == '-') {\n    sign = -1;\n    str_ptr++;\n  }\n  else if (*str_ptr == '+') {\n    str_ptr++;\n  }\n  while (*str_ptr != '\\0') {\n    byte c = *str_ptr;\n    if (c < '0' || c > '9') {\n      break;\n    }\n    result = result * 10 + (c - '0');\n    str_ptr++;\n  }\n  return result * sign;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_number_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "decode_data_000834f0",
                "param_1": "param_1",
                "param_2": "data_ptr",
                "iVar1": "result",
                "iVar2": "decode_result",
                "local_488": "stack_ptrs",
                "local_480": "stack_size",
                "local_47c": "flag",
                "local_47a": "flag2",
                "local_478": "stack_ptr",
                "local_474": "stack_var1",
                "local_470": "stack_var2",
                "local_46c": "stack_var3",
                "local_464": "stack_var4",
                "local_424": "heap_var",
                "auStack_420": "heap_stack"
            },
            "code": "int decode_data_000834f0(undefined4 param_1,int data_ptr){\n  int result;\n  int decode_result;\n  undefined *stack_ptrs[2];\n  undefined4 stack_size;\n  ushort flag;\n  undefined2 flag2;\n  undefined *stack_ptr;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  undefined4 stack_var4;\n  undefined4 heap_var;\n  undefined heap_stack[1024];\n  \n  heap_var = *(undefined4 *)(data_ptr + 100);\n  stack_var3 = *(undefined4 *)(data_ptr + 0x1c);\n  flag2 = *(undefined2 *)(data_ptr + 0xe);\n  stack_var4 = *(undefined4 *)(data_ptr + 0x24);\n  stack_ptrs[0] = heap_stack;\n  flag = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  stack_size = 0x400;\n  stack_var1 = 0x400;\n  stack_var2 = 0;\n  stack_ptr = stack_ptrs[0];\n  result = FUNC_0008289c(param_1, stack_ptrs);\n  if ((-1 < result) && (decode_result = decode_data_000834f0_00083850(param_1, stack_ptrs), decode_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "decode_data_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "process_data_000841e4",
                "param_1": "data_length",
                "piVar3": "error_code_ptr",
                "iVar4": "code_ptr_value",
                "pcVar5": "function_ptr",
                "ppiVar6": "pointer_to_error_code_ptr",
                "*DAT_000841f0": "*global_error_code_ptr",
                "get_error_code_thunk_00080efe": "get_error_code",
                "PTR_DAT_00084218": "global_data_ptr",
                "do_nothing_00080efc": "do_nothing",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr"
            },
            "code": "int process_data_000841e4(uint data_length)\n{\n  int *error_code_ptr;\n  undefined4 error_code;\n  int *code_ptr;\n  int code_ptr_value;\n  code *function_ptr;\n  int **pointer_to_error_code_ptr;\n  \n  error_code_ptr = *DAT_000841f0;\n  if (data_length > 31) {\n    *error_code_ptr = 22;\n    return -1;\n  }\n  code_ptr_value = error_code_ptr[183];\n  if ((code_ptr_value == 0) || ((function_ptr = *(code **)(code_ptr_value + data_length * 4)) == (code *)0)) {\n    pointer_to_error_code_ptr = global_error_code_ptr;\n    error_code = get_error_code(error_code_ptr);\n    *(undefined4 *)PTR_DAT_00084218 = 0;\n    code_ptr_value = do_nothing(error_code, data_length, data_length, 0, pointer_to_error_code_ptr, unaff_r4, unaff_r5, in_lr);\n    if ((code_ptr_value == -1) && (*(int *)PTR_DAT_00084218 != 0)) {\n      *error_code_ptr = *(int *)PTR_DAT_00084218;\n      return -1;\n    }\n    return code_ptr_value;\n  }\n  if (function_ptr == (code *)1) {\n    return 0;\n  }\n  if (function_ptr != (code *)0xffffffff) {\n    *(undefined4 *)(code_ptr_value + data_length * 4) = 0;\n    (*function_ptr)(data_length);\n    return 0;\n  }\n  *error_code_ptr = 22;\n  return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_data_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "convert_number_to_string_0008113a",
                "*param_1": "*function_ptr",
                "param_2": "number",
                "param_3": "base",
                "param_4": "param_4",
                "iVar1": "result",
                "iVar2": "minus_sign",
                "execute_function_pointer_000810cc": "execute_function_pointer",
                "convert_decimal_to_base_n_000810fc": "convert_decimal_to_base_n"
            },
            "code": "int convert_number_to_string_0008113a(undefined4 *function_ptr, uint number, uint base, undefined4 param_4) {\n  int result;\n  int negative = 0;\n  if (base == 0) {\n    result = (**(code **)*function_ptr)(function_ptr,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)number < 0) {\n      int minus_sign = execute_function_pointer_000810cc(function_ptr, 0x2d);\n      int converted_number = convert_decimal_to_base_n_000810fc(function_ptr, -number, 10);\n      result = converted_number + minus_sign;\n      return result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_to_base_n_000810fc(function_ptr, number, base, param_4);\n  return result;\n}",
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "FUN_0008117a",
                "thunk_FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_number_to_string_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_value_from_data_0008400c",
                "*DAT_00084014": "data_pointer"
            },
            "code": "int get_value_from_data_0008400c() {\n  return **DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_value_from_data_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "initialize_memory_block_if_result_is_zero_000814d0",
                "param_1": "memory_block_ptr",
                "param_2": "result",
                "param_3": "string_ptr",
                "iVar1": "result_check",
                "check_result_000814ae": "check_result",
                "initialize_memory_block_00081480": "initialize_memory_block",
                "copy_string_000825cc": "copy_string"
            },
            "code": "undefined4* initialize_memory_block_if_result_is_zero_000814d0(undefined4* memory_block_ptr, undefined4 result, undefined4 string_ptr) {\n  int result_check = check_result_000814ae(memory_block_ptr, result);\n  if (result_check == 0) {\n    initialize_memory_block(memory_block_ptr);\n  }\n  else {\n    memory_block_ptr[2] = result;\n    copy_string_000825cc(*memory_block_ptr, string_ptr);\n  }\n  return memory_block_ptr;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_if_result_is_zero_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "initialize_data_sections_00080c20",
                "puVar1": "rel_array_start",
                "puVar2": "data_start",
                "iVar3": "rel_array_size",
                "puVar4": "bss_start",
                "bss_ptr": "bss_ptr",
                "data_end": "data_end"
            },
            "code": "void initialize_data_sections_00080c20(void)\n{\n  undefined *rel_array_start = PTR_Elf32_Rel_ARRAY_00080c7c;\n  undefined *data_start = DAT_00080c78;\n  int rel_array_size = PTR_DAT_00080c84 - PTR_Elf32_Rel_ARRAY_00080c7c;\n  undefined4 *bss_start = (undefined4 *)PTR_DAT_00080c80;\n\n  if (data_start != rel_array_start) {\n    for (int i = 0; i < rel_array_size; i += 4) {\n      *(undefined4 *)(rel_array_start + i) = *(undefined4 *)(data_start + i);\n    }\n  }\n\n  for (undefined4 *bss_ptr = bss_start; bss_ptr < (undefined4 *)DAT_00080c88; bss_ptr++) {\n    *bss_ptr = 0;\n  }\n\n  undefined *data_end = PTR_DAT_00080c8c + -0x20000000;\n  *(uint *)(DAT_00080c90 + 8) = (uint)PTR_DAT_00080c8c & 0x1fffff80;\n\n  if (data_end < (undefined *)0x100000) {\n    *(uint *)(DAT_00080c90 + 8) |= 0x20000000;\n  }\n\n  (*DAT_00080c94)();\n\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_sections_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "process_permission_0008044c",
                "param_1": "index",
                "param_2": "permission_array",
                "param_3": "permission_data",
                "bVar1": "permission_count_limit",
                "puVar2": "ptr_permission_count",
                "puVar3": "ptr_permission_table",
                "puVar4": "ptr_permission_level",
                "uVar5": "time_limit",
                "iVar6": "permission_index",
                "PTR_DAT_00080544": "ptr_permission_count",
                "PTR_DAT_00080548": "ptr_permission_table",
                "PTR_DAT_00080554": "permission_count_limit",
                "*DAT_0008054c": "some_data1",
                "DAT_00080550": "some_data2"
            },
            "code": "void process_permission_0008044c(int index, int* permission_array, int* permission_data) {\n  int permission_index = index * 0xc;\n  int* PTR_DAT_00080548 = permission_data;\n  int* PTR_DAT_00080544 = permission_array;\n  int* ptr_permission_level = permission_data + 0x10;\n  int* ptr_permission_time = permission_data + 0x14;\n  int permission_flag = PTR_DAT_00080544[index] & 0x80;\n  int permission_count = PTR_DAT_00080544[index] & 0x3f;\n  uint time_limit = (*DAT_0008054c / DAT_00080550) * 20000 >> 5;\n  if (permission_flag == 0) {\n    if ((char)PTR_DAT_00080544[index] + permission_index < (int)(uint)(byte)*PTR_DAT_00080554 && (int)((uint)(byte)PTR_DAT_00080548[((char)PTR_DAT_00080544[index] + permission_index) * 8] << 0x19) < 0) {\n      process_permission_0008044c_00081014(PTR_DAT_00080548[(permission_index + (char)PTR_DAT_00080544[index]) * 8] & 0x3f,0);\n    }\n  } else {\n    *(uint *)(permission_level + permission_index) = *(uint *)(permission_level + permission_index) | 4;\n  }\n  if ((char)PTR_DAT_00080544[index] + permission_index < (int)(uint)*PTR_DAT_00080554 && (char)PTR_DAT_00080544[index] < '\f') {\n    *(int *)(permission_time) = *(int *)(permission_time + 0x10) + *(int *)(PTR_DAT_00080548 + ((char)PTR_DAT_00080544[index] + permission_index) * 8 + 4);\n    if (-1 < (int)((uint)(byte)PTR_DAT_00080548[((char)PTR_DAT_00080544[index] + permission_index) * 8] << 0x19)) {\n      return;\n    }\n    process_permission_0008044c_00081014(PTR_DAT_00080548[(permission_index + (char)PTR_DAT_00080544[index]) * 8] & 0x3f,1);\n    return;\n  }\n  *(uint *)(permission_time) = time_limit <= *(int *)(permission_time + 0x10) + 4U ? *(int *)(permission_time + 0x10) + 4 : time_limit;\n  PTR_DAT_00080544[index] = 0xff;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "process_permission_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "process_input_wrapper_000810d8",
                "param_1": "input1",
                "param_2": "ptr_data",
                "param_3": "input3",
                "param_4": "input4",
                "process_input_000810a6": "process_input"
            },
            "code": "void process_input_wrapper_000810d8(undefined4 input1, undefined4 ptr_data, undefined4 input3, undefined4 input4) {\n  process_input(input1, ptr_data, input3, input4, input4);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "return_error_code_00080efe",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_code_00080efe(void) {\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "return_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr_2",
                "uVar5": "j",
                "puVar6": "padding_ptr",
                "uVar7": "remaining_size",
                "PTR_DAT_00000008": "UINT32_MAX"
            },
            "code": "void reverse_copy_00081e34(uint32_t *dest, uint32_t *src, uint32_t size) {\n    if (src < dest && (uint32_t *)((int)src + size) > dest) {\n        uint8_t *dest_ptr = (uint8_t *)((int)dest + size - 1);\n        uint32_t i = size - 1;\n        do {\n            dest_ptr--;\n            i--;\n            *dest_ptr = *(uint8_t *)((int)src + i);\n        } while (i != PTR_DAT_00000008);\n        return;\n    }\n    if (size < 16) {\n        return;\n    }\n    if ((((uint32_t)src | (uint32_t)dest) & 3) == 0) {\n        uint32_t *dest_ptr = dest;\n        uint32_t *src_ptr = src;\n        do {\n            dest_ptr += 4;\n            *dest = *src;\n            dest[1] = src[1];\n            dest[2] = src[2];\n            dest[3] = src[3];\n            dest = dest_ptr;\n            src = src_ptr + 4;\n        } while (dest_ptr != (uint32_t *)((int)dest + (size - 16 & 0xfffffff0) + 16));\n        uint32_t i = (size - 16 >> 4) + 1;\n        uint32_t remaining_size = size & 0xf;\n        src += i * 4;\n        dest += i * 4;\n        uint32_t j = remaining_size;\n        uint32_t *dest_ptr_2 = dest;\n        uint32_t *src_ptr_2 = src;\n        if (3 < remaining_size) {\n            do {\n                j -= 4;\n                *dest_ptr_2 = *src_ptr_2;\n                dest_ptr_2++;\n                src_ptr_2++;\n            } while (3 < j);\n            uint32_t padding_size = (remaining_size - 4 & 0xfffffffc) + 4;\n            dest = (uint32_t *)((int)dest + padding_size);\n            src = (uint32_t *)((int)src + padding_size);\n            remaining_size = size & 3;\n        }\n        size = remaining_size;\n        if (size == 0) {\n            return;\n        }\n    }\n    uint8_t *dest_ptr = (uint8_t *)dest;\n    do {\n        uint32_t *dest_ptr_2 = (uint32_t *)((int)dest_ptr + 1);\n        *(uint8_t *)dest_ptr = *(uint8_t *)src;\n        src = (uint32_t *)((int)src + 1);\n        dest_ptr = (uint8_t *)dest_ptr_2;\n    } while (dest_ptr_2 != (uint32_t *)(size + (int)dest));\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "read_byte_from_data_table_000805a8",
                "param_1": "byte_read",
                "bVar1": "data_table_index",
                "puVar2": "data_table_entry",
                "PTR_DAT_000805d8": "data_table_index_ptr",
                "DAT_000805dc": "data_table_ptr",
                "PTR_DAT_000805e4": "data_table_entry_ptr",
                "DAT_000805e0": "data_table_divisor"
            },
            "code": "void read_byte_from_data_table_000805a8(byte *byte_read)\n{\n  byte data_table_index = *PTR_DAT_000805d8;\n  if (data_table_index < 0x3c) {\n    *PTR_DAT_000805d8 = data_table_index + 1;\n    uint *data_table_entry = DAT_000805dc;\n    *byte_read = data_table_index;\n    *(uint *)(PTR_DAT_000805e4 + (uint)data_table_index * 8 + 4) = (*data_table_entry / DAT_000805e0) * 0x5dc >> 5;\n    return;\n  }\n  *byte_read = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "read_byte_from_data_table_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_000810cc(void* function_pointer) {\n  (**(void(**)())function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "get_byte_from_buffer_00081276",
                "param_1": "buffer_address",
                "bVar1": "byte_to_return",
                "iVar2": "buffer_ptr",
                "read_ptr": "read_ptr",
                "write_ptr": "write_ptr"
            },
            "code": "uint get_byte_from_buffer_00081276(int buffer_address){\n  int buffer_ptr = *(int *)(buffer_address + 0x10);\n  int read_ptr = *(int *)(buffer_ptr + 0x84);\n  int write_ptr = *(int *)(buffer_ptr + 0x80);\n  if (read_ptr != write_ptr) {\n    byte byte_to_return = *(byte *)(buffer_ptr + read_ptr);\n    *(int *)(buffer_ptr + 0x84) = (read_ptr + 1) & 0x7f;\n    return (uint)byte_to_return;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "get_byte_from_buffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "return_value_or_default_000844bc",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "pointer",
                "iVar2": "result"
            },
            "code": "void return_value_or_default_000844bc(int *output, undefined4 input) {\n  undefined *pointer = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  int result = return_one_00080eba(input);\n  if (result == -1 && *(int *)pointer != 0) {\n    *output = *(int *)pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "return_value_or_default_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "decode_data_00083850",
                "param_1": "buffer",
                "param_2": "data",
                "piVar1": "block_ptr",
                "iVar2": "block_size",
                "uVar3": "flags",
                "uVar4": "size",
                "iVar5": "bytes_read",
                "pcVar6": "read_func",
                "unaff_r4": "result",
                "iVar7": "total_bytes_read"
            },
            "code": "undefined4 decode_data_00083850(int *buffer, int *data)\n{\n  int *block_ptr;\n  int block_size;\n  ushort flags;\n  uint size;\n  int bytes_read;\n  code *read_func;\n  undefined4 result;\n  int total_bytes_read;\n  \n  if ((buffer != (int *)0x0) && (buffer[0xe] == 0)) {\n    initialize_buffer();\n  }\n  if (*(short *)(data + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(data + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    block_size = data[4];\n    if (block_size == 0) {\n      return 0;\n    }\n    bytes_read = *data;\n    if ((flags & 3) == 0) {\n      block_ptr = data + 5;\n    }\n    else {\n      block_ptr = (int *)0x0;\n    }\n    *data = block_size;\n    bytes_read = bytes_read - block_size;\n    data[2] = (int)block_ptr;\n    do {\n      if (bytes_read < 1) {\n        return 0;\n      }\n      total_bytes_read = (*(code *)data[9])(buffer,data[7],block_size,bytes_read,result);\n      bytes_read = bytes_read - total_bytes_read;\n      block_size = block_size + total_bytes_read;\n    } while (0 < total_bytes_read);\n    *(ushort *)(data + 3) = flags | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(data + 3) = flags | 0x800;\n  if ((data[1] < 1) && (data[0xf] < 1)) {\n    return 0;\n  }\n  read_func = (code *)data[10];\n  if (read_func == (code *)0x0) {\n    return 0;\n  }\n  size = (uint)(flags | 0x800);\n  bytes_read = *buffer;\n  *buffer = 0;\n  if ((flags & 0x1000) == 0) {\n    total_bytes_read = (*read_func)(buffer,data[7],size & 0x1000,1);\n    if ((total_bytes_read == -1) && (bytes_read = *buffer, bytes_read != 0)) {\n      if ((bytes_read == 0x1d) || (bytes_read == 0x16)) {\n        *buffer = size;\n        return 0;\n      }\n      *(ushort *)(data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    flags = *(ushort *)(data + 3);\n    read_func = (code *)data[10];\n  }\n  else {\n    bytes_read = data[0x14];\n  }\n  if (((int)(flags << 0x1d) < 0) && (bytes_read = bytes_read - data[1], data[0xc] != 0)) {\n    bytes_read = bytes_read - data[0xf];\n  }\n  bytes_read = (*read_func)(buffer,data[7],bytes_read,0);\n  if (bytes_read == -1) {\n    total_bytes_read = *buffer;\n    if (total_bytes_read != 0) {\n      if ((total_bytes_read != 0x1d) && (total_bytes_read != 0x16)) {\n        *(ushort *)(data + 3) = flags | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(data + 3) = flags & 0xf7ff;\n      *data = data[4];\n      data[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(data + 3) & 0xf7ff;\n    data[1] = 0;\n    *(ushort *)(data + 3) = flags;\n    *data = data[4];\n  }\n  else {\n    flags = *(ushort *)(data + 3) & 0xf7ff;\n    *data = data[4];\n    *(ushort *)(data + 3) = flags;\n    data[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    data[0x14] = bytes_read;\n  }\nLAB_00083774:\n  block_ptr = (int *)data[0xc];\n  *buffer = bytes_read;\n  if (block_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (block_ptr != data + 0x10) {\n    allocate_memory_block(buffer);\n  }\n  data[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_000834f0"
            ],
            "imported": false,
            "current_name": "decode_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "process_control_system_loop_000815ec",
                "set_value_in_data_at_offset_00081618": "set_data_value_at_offset",
                "initialize_and_process_data_00080774": "initialize_and_process_data",
                "do_nothing_000815e8": "do_nothing_first",
                "do_nothing_00080f08": "do_nothing_second",
                "check_and_process_data_000801e0": "check_and_process_data",
                "control_system_00080250": "control_system",
                "DAT_00081614": "data_offset_value",
                "check_differences_00080970": "check_differences"
            },
            "code": "void process_control_system_loop_000815ec(void)\n{\n  set_value_in_data_at_offset_00081618();\n  initialize_and_process_data_00080774();\n  do_nothing_000815e8();\n  do_nothing_00080f08(1);\n  check_and_process_data_000801e0();\n  do {\n    do {\n      control_system();\n    } while (DAT_00081614() == 0);\n    check_differences_00080970();\n  } while( true );\n}",
            "called": [
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_00080774",
                "FUN_00080f08",
                "FUN_000815e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "process_control_system_loop_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_data_00080d3e",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "param_3": "mask",
                "param_4": "shift_amount",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_data_00080d3e(uint32_t* data_ptr, uint32_t new_data, uint32_t mask, uint32_t shift_amount) {\n    uint32_t current_data = *data_ptr;\n    uint32_t masked_new_data = new_data & mask;\n    uint32_t shifted_masked_new_data = masked_new_data << shift_amount;\n    uint32_t updated_data = current_data | shifted_masked_new_data;\n    *data_ptr = updated_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_data_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "initialize_pointer_data_store_00081438_00081438",
                "param_1": "pointer_data",
                "param_2": "data_value",
                "*param_1": "*pointer_data",
                "PTR_PTR_store_data_000812b8_1_00081458": "PTR_PTR_store_data_000812b8_1_00081458",
                "initialize_values_00081348": "initialize_values_00081348"
            },
            "code": "undefined4* initialize_pointer_data_store_00081438_00081438(undefined4* pointer_data, undefined4 data_value) {\n  initialize_values_00081348();\n  *pointer_data = PTR_PTR_store_data_000812b8_1_00081458;\n  pointer_data[9] = data_value;\n  return pointer_data;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_pointer_data_store_00081438_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value){\n  *(int *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "*param_1": "*output",
                "*param_2": "*input",
                "uVar1": "buffer_value_1",
                "iVar2": "buffer_address",
                "uVar3": "buffer_length",
                "uVar4": "flag",
                "initialize_buffer_00083888": "initialize_buffer",
                "allocate_memory_block_00083b10": "allocate_memory_block",
                "set_permissions_00084018": "set_permissions"
            },
            "code": "uint32_t process_data_0008356c(uint32_t *output, int *input)\n{\n    uint32_t buffer_length;\n    int buffer_address;\n    uint32_t buffer_value;\n    uint16_t flag;\n\n    if ((*PTR_DAT_0008362c != 0) && (*(int *)(*PTR_DAT_0008362c + 0x38) == 0)) {\n        initialize_buffer_00083888();\n    }\n\n    flag = *(uint16_t *)(input + 3);\n    buffer_length = (uint32_t)flag;\n\n    if ((int)(buffer_length << 0x1c) < 0) {\n        buffer_address = input[4];\n    }\n    else {\n        if (-1 < (int)(buffer_length << 0x1b)) {\n            *output = 9;\n            *(uint16_t *)(input + 3) = flag | 0x40;\n            return 0xffffffff;\n        }\n        if ((int)(buffer_length << 0x1d) < 0) {\n            if ((int *)input[0xc] != (int *)0x0) {\n                if ((int *)input[0xc] != input + 0x10) {\n                    allocate_memory_block(output);\n                    flag = *(uint16_t *)(input + 3);\n                }\n                input[0xc] = 0;\n            }\n            buffer_address = input[4];\n            flag = flag & 0xffdb;\n            *input = buffer_address;\n            input[1] = 0;\n        }\n        else {\n            buffer_address = input[4];\n        }\n        *(uint16_t *)(input + 3) = flag | 8;\n        buffer_length = (uint32_t)(flag | 8);\n    }\n\n    if ((buffer_address == 0) && ((buffer_length & 0x280) != 0x200)) {\n        set_permissions_00084018(output, input);\n        buffer_length = (uint32_t)*(uint16_t *)(input + 3);\n        buffer_address = input[4];\n    }\n\n    if ((buffer_length & 1) == 0) {\n        if (-1 < (int)(buffer_length << 0x1e)) {\n            buffer_value = input[5];\n        }\n        input[2] = buffer_value;\n    }\n    else {\n        input[6] = -input[5];\n        input[2] = 0;\n    }\n\n    if ((buffer_address == 0) && ((int)(buffer_length << 0x18) < 0)) {\n        *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 0x40;\n        return 0xffffffff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_00084018",
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_system_00080b98",
                "DAT_00080c04": "counter_array",
                "DAT_00080c08": "counter_var",
                "DAT_00080c10": "system_init_value1",
                "DAT_00080c0c": "system_init_value2",
                "DAT_00080c14": "system_init_value3",
                "DAT_00080c1c": "system_init_value4_ptr",
                "DAT_00080c18": "system_init_value5"
            },
            "code": "void initialize_system_00080b98(void)\n{\n  int *counter_ptr;\n  int DAT_00080c08;\n  counter_ptr = DAT_00080c04;\n  *DAT_00080c04 = 0x400;\n  DAT_00080c04[0x80] = 0x400;\n  DAT_00080c08 = DAT_00080c04[2];\n  if (-1 < *(int *)(DAT_00080c08 + 0x20) << 7) {\n    *(int *)(DAT_00080c08 + 0x20) = DAT_00080c10;\n    do {\n    } while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1f);\n  }\n  *(int *)(DAT_00080c08 + 0x20) = DAT_00080c0c;\n  do {\n  } while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0xf);\n  *(unsigned int *)(DAT_00080c04 + 0xC) = *(unsigned int *)(DAT_00080c04 + 0xC) & 0xfffffffc | 1;\n  do {\n  } while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1c);\n  *(int *)(DAT_00080c08 + 0x28) = DAT_00080c14;\n  do {\n  } while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1e);\n  *(unsigned int *)(DAT_00080c04 + 0xC) = 0x11;\n  do {\n  } while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1c);\n  *(unsigned int *)(DAT_00080c04 + 0xC) = 0x12;\n  do {\n  } while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1c);\n  *DAT_00080c1c = DAT_00080c18;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_system_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "calculate_sum_of_inputs_000810e8",
                "param_1": "input",
                "iVar1": "input_one",
                "iVar2": "input_two",
                "process_input_000810a6": "process_first_input",
                "process_input_wrapper_000810d8": "process_second_input"
            },
            "code": "int calculate_sum_of_inputs_000810e8(int input){\n  int input_one = process_input_000810a6();\n  int input_two = process_input_wrapper_000810d8(input);\n  return input_two + input_one;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_inputs_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "memory_address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "memory_location",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_00080d58(int memory_address, uint8_t bit_position) {\n  int* memory_location = (int*)(memory_address + 0x14);\n  int bit_mask = 1 << (bit_position & 0xff);\n  *memory_location = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "initialize_memory_block_00081480",
                "param_1": "memory_block",
                "*param_1": "*memory_block",
                "allocate_memory_block_00081800": "allocate_memory_block"
            },
            "code": "void initialize_memory_block_00081480(int *memory_block)\n{\n  if (*memory_block != 0) {\n    allocate_memory_block();\n  }\n  *memory_block = 0;\n  memory_block[2] = 0;\n  memory_block[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "call_func_with_params_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "*DAT_00081fa8": "func_ptr"
            },
            "code": "void call_func_with_params_00081f9c(int* *DAT_00081fa8, int param_1, int param_2)\n{\n  (**DAT_00081fa8)(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "call_func_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_2",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_3",
                "*(int *)(param_1 + 0x10)": "ptr_1",
                "difference": "difference"
            },
            "code": "uint calculate_difference_00081248(int input_param){\n    int* ptr_1 = *(int **)(input_param + 0x10);\n    int* ptr_2 = *(int **)(ptr_1 + 0x80);\n    int* ptr_3 = *(int **)(ptr_1 + 0x84);\n    int difference = *ptr_2 - *ptr_3 & 0x7f;\n    return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "allocate_memory_block_00081800",
                "param_1": "size",
                "*DAT_0008180c": "data_ptr"
            },
            "code": "void allocate_memory_block_00081800(void* *DAT_0008180c, size_t size) {\n  allocate_memory_block_00081800_00083b10(**DAT_0008180c, size);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "param_5": "result_array",
                "uVar1": "multiplication_result",
                "lVar2": "function_result"
            },
            "code": "void calculate_difference_0008458c(uint first_param, int second_param, undefined4 third_param, undefined4 fourth_param, int *result_array)\n{\n    uint multiplication_result;\n    longlong function_result = FUNC_00084860();\n    function_result = function_result * CONCAT44(fourth_param, third_param);\n    multiplication_result = (uint)function_result;\n    *result_array = first_param - multiplication_result;\n    result_array[1] = (second_param - (int)((ulonglong)function_result >> 0x20)) - (uint)(first_param < multiplication_result);\n    return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_value",
                "param_4": "result_ptr",
                "uVar1": "data_value",
                "iVar2": "function_status",
                "pcVar3": "function_ptr",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008434c(undefined4 *data_ptr, int data_size, undefined4 data_value, undefined4 *result_ptr)\n{\n    undefined4 function_result;\n    int function_status;\n    code *function_ptr;\n    undefined stack_buffer[12];\n\n    if (data_size == 0)\n    {\n        function_ptr = *DAT_00084398;\n        data_value = get_dat_value_00084004();\n        function_status = (*function_ptr)(data_ptr, stack_buffer, 0, data_value, result_ptr);\n    }\n    else\n    {\n        function_ptr = *DAT_00084398;\n        data_value = get_dat_value_00084004();\n        function_status = (*function_ptr)(data_ptr, data_size, data_value, data_value, result_ptr);\n    }\n    if (function_status == -1)\n    {\n        *result_ptr = 0;\n        *data_ptr = 0x8a;\n    }\n    return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "copy_string_to_buffer_0008159e",
                "param_1": "buffer",
                "param_2": "string",
                "param_3": "unused",
                "local_c": "masked_string",
                "uStack_8": "unused"
            },
            "code": "void copy_string_to_buffer_0008159e(void* buffer, uint32_t string, void* unused)\n{\n  uint32_t masked_string = string & 0xffff00ff;\n  check_and_copy_string(buffer, &masked_string, 1, 0, buffer);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "copy_string_to_buffer_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "*param_1": "*data",
                "bVar1": "value",
                "puVar2": "ptr",
                "uVar3": "var1",
                "uVar4": "index",
                "uVar5": "var2",
                "iVar6": "loop_index",
                "uVar7": "divisor"
            },
            "code": "byte process_data_000806a0(byte *data, undefined4 param)\n{\n  byte value;\n  undefined *ptr;\n  undefined4 var1;\n  uint index;\n  undefined4 var2;\n  int loop_index;\n  uint divisor;\n  if (*data > 59) goto end;\n  process_data_000806a0_00080f0c(param, 1, 544, *data, 2400);\n  ptr = PTR_DAT_00080694;\n  index = (uint)*data;\n  value = PTR_DAT_00080694[index * 8];\n  data[2] = 0;\n  divisor = index / 12;\n  ptr[index * 8] = value & 0xc0 | (byte)param & 0x3f;\n  data[1] = 0;\n  loop_index = 0;\n  do {\n    if ((int)((uint)(byte)ptr[(loop_index + divisor * 12) * 8] << 0x19) < 0) goto end;\n    loop_index++;\n  } while (loop_index != 12);\n  var1 = DAT_00080698;\n  if (divisor == 0) {\n    var2 = 30;\n    configure_and_start_tc_channel_000803fc(var1, divisor, var2, var2);\n  }\n  else {\n    if (divisor == 1) {\n      var2 = 31;\n      configure_and_start_tc_channel_000803fc(var1, divisor, var2, var2);\n    }\n    else if (divisor == 2) {\n      var2 = 32;\n      configure_and_start_tc_channel_000803fc(var1, divisor, var2, var2);\n    }\n    else {\n      var1 = DAT_0008069c;\n      if (divisor == 3) {\n        divisor = 2;\n        var2 = 29;\n        configure_and_start_tc_channel_000803fc(var1, divisor, var2, var2);\n      }\n      else if (divisor == 4) {\n        divisor = 0;\n        var2 = 27;\n        configure_and_start_tc_channel_000803fc(var1, divisor, var2, var2);\n      }\n    }\n  }\n  ptr[(uint)*data * 8] = ptr[(uint)*data * 8] | 0x40;\n  end:\n  return *data;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copy_or_allocate_0008151c",
                "param_1": "destination",
                "param_2": "source",
                "*param_1": "*destination",
                "*param_2": "*source",
                "PTR_DAT_0008155c": "PTR_DAT_0008155c",
                "uint": "uint",
                "source[2]": "source_length",
                "destination[2]": "destination_length",
                "copy_string_000825cc()": "copy_string_000825cc()",
                "allocate_memory_block_00081800()": "allocate_memory_block_00081800()"
            },
            "code": "void copy_or_allocate_0008151c(int *destination, int *source)\n{\n    if (*destination != 0)\n    {\n        if (*source != 0 && PTR_DAT_0008155c != (undefined *)0x0)\n        {\n            if (source[2] <= destination[1])\n            {\n                copy_string_000825cc();\n                destination[2] = source[2];\n                return;\n            }\n        }\n        allocate_memory_block_00081800();\n    }\n    *destination = *source;\n    destination[1] = source[1];\n    destination[2] = source[2];\n    *source = 0;\n    source[1] = 0;\n    source[2] = 0;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "copy_or_allocate_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "process_data_from_server_and_call_function_000816f8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "string_ptr",
                "uVar4": "processed_data"
            },
            "code": "void process_data_from_server_and_call_function_000816f8(undefined4 data1, undefined4 data2, undefined *data3, undefined4 data4)\n{\n    undefined4 value1 = *(undefined4 *)(*DAT_00081724 + 0xc);\n    undefined4 value2 = data4;\n    undefined *string_ptr = PTR_s___function__00081728;\n    if (data3 == (undefined *)0x0) {\n        goto LAB_0008171c;\n    }\n    do {\n        data4 = data1;\n        call_function_with_params_00081750(value1, PTR_s_assertion___s__failed__file___s__0008172c, value2, data1, data2, string_ptr, data3);\n        undefined8 processed_data = process_data_000841e4_000836ec();\n        data2 = (undefined4)((ulonglong)processed_data >> 0x20);\n        value1 = (undefined4)processed_data;\n    LAB_0008171c:\n        data3 = PTR_s__00081730;\n        value2 = data4;\n        string_ptr = PTR_s__00081730;\n    } while (true);\n}",
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "imported": false,
            "current_name": "process_data_from_server_and_call_function_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data_ptr",
                "iVar3": "data_segment_ptr",
                "*DAT_00084490": "*DATA_SEGMENT_PTR",
                "initialize_buffer_00083888": "initialize_buffer",
                "decode_data_00083850": "decode_data",
                "*(int *)(param_1 + 0x2c)": "*(code **)(data_ptr + FUNCTION_PTR_OFFSET)",
                "iVar2": "result",
                "*(undefined4 *)(param_1 + 0x1c)": "*(undefined4 *)(data_ptr + FUNCTION_ARG_OFFSET)",
                "allocate_memory_block_00083b10": "allocate_memory_block",
                "*(int *)(param_1 + 0x30)": "*(int *)(data_ptr + MEMORY_BLOCK_PTR_OFFSET)",
                "param_1 + 0x40": "data_ptr + MEMORY_BLOCK_DATA_OFFSET",
                "*(int *)(param_1 + 0x44)": "*(int *)(data_ptr + TEMP_MEMORY_BLOCK_PTR_OFFSET)",
                "do_nothing_0008397c": "do_nothing",
                "*(undefined2 *)(param_1 + 0xc)": "*(undefined2 *)(data_ptr + DATA_FORMAT_OFFSET)",
                "do_nothing_00083980": "do_nothing"
            },
            "code": "int process_data_00084484(int data_ptr) {\n  int data_segment_ptr = *DAT_00084490;\n  if (data_ptr != 0) {\n    if ((data_segment_ptr != 0) && (*(int *)(data_segment_ptr + BUFFER_STATUS_OFFSET) == 0)) {\n      initialize_buffer_00083888();\n    }\n    if (*(short *)(data_ptr + DATA_FORMAT_OFFSET) != 0) {\n      int result = decode_data(data_segment_ptr, data_ptr);\n      if ((*(code **)(data_ptr + FUNCTION_PTR_OFFSET) != (code *)0x0) && ((result = (**(code **)(data_ptr + FUNCTION_PTR_OFFSET))(data_segment_ptr, *(undefined4 *)(data_ptr + FUNCTION_ARG_OFFSET))) < 0)) {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(data_ptr + MEMORY_BLOCK_SIZE_OFFSET) << 0x18) < 0) {\n        allocate_memory_block(data_segment_ptr, *(undefined4 *)(data_ptr + MEMORY_BLOCK_ID_OFFSET));\n      }\n      if (*(int *)(data_ptr + MEMORY_BLOCK_PTR_OFFSET) != 0) {\n        if (*(int *)(data_ptr + MEMORY_BLOCK_PTR_OFFSET) != data_ptr + MEMORY_BLOCK_DATA_OFFSET) {\n          allocate_memory_block(data_segment_ptr);\n        }\n        *(undefined4 *)(data_ptr + MEMORY_BLOCK_PTR_OFFSET) = 0;\n      }\n      if (*(int *)(data_ptr + TEMP_MEMORY_BLOCK_PTR_OFFSET) != 0) {\n        allocate_memory_block(data_segment_ptr);\n        *(undefined4 *)(data_ptr + TEMP_MEMORY_BLOCK_PTR_OFFSET) = 0;\n      }\n      do_nothing_0008397c();\n      *(undefined2 *)(data_ptr + DATA_FORMAT_OFFSET) = 0;\n      do_nothing_00083980();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083980",
                "FUN_00083850",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "new_index"
            },
            "code": "void update_buffer_000811ca(int buffer_address, undefined new_value)\n{\n  uint new_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "calculate_positions_00080164",
                "param_1": "position1",
                "param_2": "value1",
                "param_3": "position2",
                "param_4": "value2",
                "calculate_position_000806f8": "calculate_position"
            },
            "code": "void calculate_positions_00080164(void* position1, int value1, void* position2, int value2){\n\tcalculate_position(position1, value1);\n\tcalculate_position(position2, value2);\n\treturn;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "calculate_positions_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "reverse_copy_00084244",
                "param_1": "output",
                "param_2": "input_length",
                "param_3": "input_1",
                "param_4": "input_2",
                "uVar4": "input_4",
                "sVar1": "input_3",
                "puVar2": "PTR_1",
                "iVar3": "result"
            },
            "code": "void reverse_copy_00084244(int* output, int input_length, undefined4 input_1, undefined4 input_2){\n  short input_3 = *(short *)(input_length + 0xc);\n  ushort input_4 = *(ushort *)(input_length + 0xc);\n  if ((int)((uint)input_4 << 0x17) < 0) {\n    process_return_value(output, (int)*(short *)(input_length + 0xe), 0, 2);\n    input_4 = *(ushort *)(input_length + 0xc);\n  }\n  *(ushort *)(input_length + 0xc) = input_4 & 0xefff;\n  undefined *PTR_1 = PTR_DAT_000843dc;\n  *(undefined4 *)PTR_1 = 0;\n  int result = reverse_copy_00084244_00080ec8((int)input_3, input_1, input_2, input_2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((result == -1) && (*(int *)PTR_1 != 0)) {\n    *output = *(int *)PTR_1;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "reverse_copy_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "calculate_result_00081496",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "result"
            },
            "code": "int calculate_result_00081496(int* input_array, int array_length, int param_3, int param_4) {\n  int result = call_function_with_params(*input_array, array_length+1, param_3, param_4, param_4);\n  if (result != 0) {\n    *input_array = result;\n    input_array[1] = array_length;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "calculate_result_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_dat_value_00084004",
                "DAT_00084008": "dat_value"
            },
            "code": "int get_dat_value_00084004() {\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "process_permission_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "permission",
                "puVar1": "permission_data",
                "puVar2": "permission_values",
                "iVar3": "permission_check",
                "uVar4": "permission_value",
                "iVar5": "permission_address"
            },
            "code": "void process_permission_00081014(int index, int value, undefined4 permission)\n{\n  undefined *permission_data = PTR_DAT_0008107c;\n  undefined *permission_values = PTR_DAT_00081080;\n  if (permission_data[index * 0x1c + 0xc] != '\\0') {\n    if ((permission_values[index] & 0xf) == 5) {\n      process_data_00080f0c(index, 1, permission, 5, index, value, permission);\n    }\n    permission_values[index] = permission_values[index] & 0xf | (byte)(value << 4);\n    int permission_address = *(int *)(permission_data + index * 0x1c);\n    undefined4 permission_value = *(undefined4 *)(permission_data + index * 0x1c + 4);\n    int permission_check = check_permissions_00080a94(permission_address, permission_value);\n    if (permission_check == 0) {\n      if (value != 0) {\n        *(undefined4 *)(permission_address + 100) = permission_value;\n        return;\n      }\n      *(undefined4 *)(permission_address + 0x60) = permission_value;\n      return;\n    }\n    set_params_at_indices_00080a0a(permission_address, permission_value, value, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080f0c",
                "FUN_00080a0a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_0008044c",
                "FUN_00080250",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_permission_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "add_to_list_000816ec",
                "param_1": "value",
                "param_2": "index",
                "param_3": "flag",
                "puVar1": "head",
                "uVar2": "next_index",
                "iVar3": "head_ptr",
                "uVar4": "bit_flag",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_func",
                "DAT_000836d4": "DAT_flag"
            },
            "code": "void add_to_list_000816ec(int value, int index, int flag) {\n  int* head = *(int**)head_ptr;\n  if (head == NULL) {\n    head = (int*)(*(int*)head_ptr + 0x14c);\n    *(int**)head_ptr = head;\n  }\n  uint32_t next_index = head[1];\n  if (next_index > 0x1f) {\n    if (DAT_000836d4 == 0 || (head = (int*)malloc(400)) == NULL) {\n      exit(-1);\n    }\n    head[0] = *(int**)head_ptr;\n    head[1] = 0;\n    next_index = 0;\n    *(int**)head_ptr = head;\n    head[0x62] = 0;\n    head[99] = 0;\n  }\n  uint32_t bit_flag = 1 << (next_index & 0xff);\n  head[next_index + 0x22] = value;\n  head[0x62] |= bit_flag;\n  head[next_index + 0x42] = flag;\n  head[99] |= bit_flag;\n  head[1] = next_index + 1;\n  head[next_index + 2] = index;\n  jumptable_func(0);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "add_to_list_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = process_data_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_block_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = decode_data_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_char_in_array_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = decode_data_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = decode_data_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_0008356c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = calculate_and_set_sum_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = calculate_and_set_sum_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_block_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_00081fac",
                "FUN_000817f0"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "check_result_000814ae",
                "param_1": "result_ptr",
                "param_2": "threshold",
                "iVar1": "calculated_result"
            },
            "code": "int check_result_000814ae(int *result_ptr, uint threshold) {\n  int calculated_result;\n  \n  if ((*result_ptr == 0) || ((uint)result_ptr[1] < threshold)) {\n    calculated_result = calculate_result(result_ptr);\n    if (calculated_result == 0) {\n      return 0;\n    }\n    if (result_ptr[2] == 0) {\n      *(undefined *)*result_ptr = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "check_result_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_functions_from_pointers_00081778",
                "puVar1": "data_start",
                "puVar2": "data_end",
                "iVar3": "i",
                "ppcVar4": "function_pointer",
                "iVar5": "num_functions"
            },
            "code": "void execute_functions_from_pointers_00081778()\n{\n  int num_functions = (int)PTR_FUNCTION_END - (int)PTR_FUNCTION_START >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(PTR_FUNCTION_START - 4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n  }\n  undefined *data_end = PTR_DATA_END;\n  undefined *data_start = PTR_DATA_START;\n  do_nothing();\n  int num_data = (int)data_start - (int)data_end >> 2;\n  if (num_data != 0) {\n    code **data_pointer = (code **)(data_end - 4);\n    int i = 0;\n    do {\n      i++;\n      data_pointer++;\n      (**data_pointer)();\n    } while (num_data != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_000836d8",
                "FUN_00085844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "execute_functions_from_pointers_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_and_return_value_000800f4",
                "param_1": "input_value",
                "*PTR_DAT_0008010c": "*PTR_DATA_FLAG",
                "DAT_00080110": "DATA_VALUE",
                "DAT_00080114": "DATA_RETURN_VAL"
            },
            "code": "int check_and_return_value_000800f4(int input_value) {\n    if (*PTR_DAT_0008010c == '\\0') {\n        if (DAT_00080110 != 0) {\n            input_value = DAT_00080114;\n        }\n        *PTR_DAT_0008010c = 1;\n    }\n    return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_value_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "process_input_000810c4",
                "process_input_000810a6": "process_input_helper"
            },
            "code": "void process_input_000810c4(void)\n{\n  process_input_000810c4_000810a6();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_input_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "set_bit_in_register_at_offset_00080d30",
                "param_1": "register_offset",
                "param_2": "bit_value",
                "param_3": "bit_position",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_in_register_at_offset_00080d30(int register_offset, uint32_t bit_value, uint32_t bit_position) {\n    uint32_t *register_ptr = (uint32_t *)(register_offset + 4);\n    *register_ptr = bit_value | *register_ptr | (bit_position & 1) << 7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_bit_in_register_at_offset_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_match_index_00080c98",
                "param_1": "match_index",
                "param_2": "match_size",
                "param_3": "block_size",
                "param_4": "block_count",
                "local_58": "match_values",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "code": "uint32_t find_match_index_00080c98(uint32_t *match_index, uint32_t match_size, int block_size, int block_count) {\n  uint32_t match_values[16];\n  match_values[0] = *(uint32_t *)PTR_DAT_00080d28;\n  match_values[1] = *(uint32_t *)(PTR_DAT_00080d28 + 4);\n  match_values[2] = *(uint32_t *)(PTR_DAT_00080d28 + 8);\n  match_values[3] = *(uint32_t *)(PTR_DAT_00080d28 + 0xc);\n  match_values[4] = *(uint32_t *)(PTR_DAT_00080d28 + 0x10);\n  match_values[5] = *(uint32_t *)(PTR_DAT_00080d28 + 0x14);\n  match_values[6] = *(uint32_t *)(PTR_DAT_00080d28 + 0x18);\n  match_values[7] = *(uint32_t *)(PTR_DAT_00080d28 + 0x1c);\n  match_values[8] = *(uint32_t *)(PTR_DAT_00080d28 + 0x20);\n  match_values[9] = *(uint32_t *)(PTR_DAT_00080d28 + 0x24);\n  match_values[10] = *(uint32_t *)(PTR_DAT_00080d28 + 0x28);\n  match_values[11] = *(uint32_t *)(PTR_DAT_00080d28 + 0x2c);\n  match_values[12] = *(uint32_t *)(PTR_DAT_00080d28 + 0x30);\n  match_values[13] = *(uint32_t *)(PTR_DAT_00080d28 + 0x34);\n  match_values[14] = *(uint32_t *)(PTR_DAT_00080d28 + 0x38);\n  match_values[15] = *(uint32_t *)(PTR_DAT_00080d28 + 0x3c);\n  match_index[0] = 1;\n  match_index[1] = 0;\n  match_index[0x48] = 0x202;\n  match_index[0x41] = 0;\n  match_index[0x45] = 0;\n  uint32_t quotient = match_size / (uint32_t)(block_size * 2);\n  if (match_size == block_size * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  uint32_t index = 0;\n  do {\n    if ((uint32_t)(block_count * (int)(((uint64_t)match_size / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= match_values[index]) {\n      match_index[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | match_index[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "find_match_index_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_s_Exiting_with_status__d__00080ef8": "PTR_s_Exiting_with_status__d__00080ef8",
                "process_data_000817c8": "process_data"
            },
            "code": "void exit_with_status_00080eec(int status_code, int param_2, int param_3, int param_4)\n{\n  process_data(PTR_s_Exiting_with_status__d__00080ef8, status_code, param_3, param_4, param_4);\n  while (true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "get_value_from_pointer_and_set_to_param_3_000811e8",
                "*param_1": "*input_array",
                "iVar1": "value",
                "param_1[3]": "input_array[3]",
                "(uint)param_1[2]": "(uint)input_array[2]"
            },
            "code": "int get_value_from_pointer_and_set_to_param_3_000811e8(int *input_array)\n{\n  int value = thunk_get_value_from_pointer_000816d8();\n  input_array[3] = value;\n  do {\n    value = (**(code **)(*input_array + 0xc))(input_array);\n    if (-1 < value) {\n      return value;\n    }\n    value = thunk_get_value_from_pointer_000816d8();\n  } while ((uint)(value - input_array[3]) < (uint)input_array[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_and_set_to_param_3_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_position_000806f8",
                "param_1": "data",
                "param_2": "position",
                "uVar1": "temp_position"
            },
            "code": "void calculate_position_000806f8(uint8_t *data, uint32_t position) {\n  uint32_t new_position;\n  if ((int)position < 0x220) {\n    uint32_t temp_position = position;\n    if (0xb3 < (int)position) {\n      temp_position = 0xb4;\n    }\n    new_position = calculate_position_000806f8_on_line(temp_position & ~((int)temp_position >> 0x1f), 0, 0xb4, (0x88 - (char)data[1]) * 4, (600 - (char)data[2]) * 4, position);\n  }\n  if (*data < 0x3c) {\n    uint32_t temp_position = (0x88 - (char)data[1]) * 4;\n    if (((int)(position + (0x88 - (char)data[1]) * -4) < 0 == SBORROW4(position, temp_position)) && (temp_position = (600 - (char)data[2]) * 4, (int)position <= (int)temp_position)) {\n      temp_position = position;\n    }\n    *(uint32_t *)(PTR_DAT_000806f4 + (uint32_t)*data * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (temp_position - 2) >> 5;\n  }\n  return;\n}",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "calculate_position_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_n_000810fc",
                "param_1": "input_number",
                "param_2": "base",
                "param_3": "min_base_digits",
                "pcVar1": "digits",
                "pcVar3": "current_digit_ptr",
                "uVar2": "quotient",
                "uVar5": "remainder",
                "cVar4": "digit",
                "local_15": "digits_array"
            },
            "code": "void convert_decimal_to_base_n_000810fc(unsigned int input_number, unsigned int base, unsigned int min_base_digits) {\n  char *digits = (char[32]){0};\n  if (min_base_digits < 2) {\n    min_base_digits = 2;\n  }\n  char *digit_ptr = &digits[31];\n  do {\n    char *current_digit_ptr = digit_ptr;\n    unsigned int quotient = input_number / base;\n    unsigned int remainder = input_number - base * quotient & 0xff;\n    char digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit_ptr = digit;\n    input_number = quotient;\n    digit_ptr = current_digit_ptr - 1;\n  } while (input_number != 0);\n  process_input(digit_ptr + 1);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_decimal_to_base_n_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "puVar1": "permission_ptr",
                "uVar2": "matching_bits",
                "uVar3": "position",
                "iVar4": "difference",
                "puVar5": "input_ptr",
                "auStack_1c": "buffer",
                "PTR_DAT_000803bc": "permission",
                "PTR_DAT_000803c0": "toggle_ptr",
                "PTR_DAT_000803c8": "input_ptr",
                "PTR_DAT_000803cc": "counter",
                "PTR_DAT_000803d0": "entered_manual_control_mode_ptr",
                "PTR_DAT_000803d4": "position_1_ptr",
                "PTR_DAT_000803d8": "position_2_ptr",
                "PTR_DAT_000803dc": "output_ptr",
                "PTR_DAT_000803e0": "position_1_ptr",
                "PTR_DAT_000803e4": "position_2_ptr",
                "PTR_DAT_000803e8": "entered_autonomous_control_mode_ptr",
                "PTR_DAT_000803ec": "output_1_ptr",
                "PTR_DAT_000803f0": "output_2_ptr",
                "PTR_s_Entered_manual_control_mode__000803d0": "entered_manual_control_mode_ptr",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "entered_autonomous_control_mode_ptr",
                "PTR_s_steer_000803f4": "steer_ptr",
                "PTR_s_motor_000803f8": "motor_ptr",
                "PTR_s_error_000803c4": "error_ptr"
            },
            "code": "void control_system_00080250(void)\\n{\\n    int matching_bits = find_matching_bits(4, 1, 20000);\\n    int *PTR_DAT_000803bc_ptr = PTR_DAT_000803bc;\\n    *PTR_DAT_000803bc_ptr = matching_bits;\\n    wait_for(10);\\n    *PTR_DAT_000803c0 = *PTR_DAT_000803c0 ^ 1;\\n    process_PTR_DAT_000803bc(0xd);\\n    int *PTR_DAT_000803cc_ptr = PTR_DAT_000803cc;\\n    if (*PTR_DAT_000803bc_ptr < 0x641)\\n    {\\n        if (*PTR_DAT_000803bc_ptr - 0x385U < 299)\\n        {\\n            if (*PTR_DAT_000803cc_ptr != \"\\0\")\\n            {\\n                calculate_positions();\\n                calculate_sum_of_inputs(PTR_DAT_000803c8, PTR_DAT_000803d0);\\n                *PTR_DAT_000803cc_ptr = 0;\\n            }\\n            wait_for(10);\\n            int matching_bits_2 = find_matching_bits(3, 1, 20000);\\n            int position_1 = calculate_position_on_line(0, 1000, 2000, 0x28, 0x96);\\n            int *PTR_DAT_000803d4 = PTR_DAT_000803d4;\\n            *PTR_DAT_000803d4 = position_1;\\n            int position_2 = calculate_position_on_line(matching_bits_2, 1000, 2000, 0x28, 0x96);\\n            int *PTR_DAT_000803d8 = PTR_DAT_000803d8;\\n            *PTR_DAT_000803d8 = position_2;\\n            while (calculate_difference(PTR_DAT_000803c8) > 0)\\n            {\\n                get_byte_from_buffer(PTR_DAT_000803c8);\\n                convert_number_to_string(PTR_DAT_000803c8, *PTR_DAT_000803d4, 10);\\n                process_input(PTR_DAT_000803c8, PTR_DAT_000803dc);\\n                calculate_sum_of_input_and_converted_number(PTR_DAT_000803c8, *PTR_DAT_000803d8, 10);\\n            }\\n            calculate_position(position_3_ptr, *PTR_DAT_000803d8);\\n            calculate_position(position_4_ptr, *PTR_DAT_000803d4);\\n        }\\n        else\\n        {\\n            if (*PTR_DAT_000803cc_ptr == \"\\0\")\\n            {\\n                calculate_positions();\\n                calculate_sum_of_inputs(PTR_DAT_000803c8, PTR_DAT_000803e8);\\n            }\\n            *PTR_DAT_000803cc_ptr = 1;\\n            while (calculate_difference(PTR_DAT_000803c8) > 0)\\n            {\\n                char buffer[12];\\n                copy_string_to_buffer_if_not_negative(buffer, PTR_DAT_000803c8, 0x2c);\\n                check_and_copy_if_different(PTR_DAT_000803ec, buffer);\\n                allocate_memory(buffer);\\n                copy_string_to_buffer_if_not_negative(buffer, PTR_DAT_000803c8, 10);\\n                check_and_copy_if_different(PTR_DAT_000803f0, buffer);\\n                allocate_memory(buffer);\\n                get_byte_from_buffer(PTR_DAT_000803c8);\\n                if (check_byte_array(PTR_DAT_000803ec, PTR_s_steer_000803f4))\\n                {\\n                    int number = parse_number(PTR_DAT_000803f0);\\n                    calculate_position(PTR_DAT_000803d8, number);\\n                }\\n                else if (check_byte_array(PTR_DAT_000803ec, PTR_s_motor_000803f8))\\n                {\\n                    int number = parse_number(PTR_DAT_000803f0);\\n                    calculate_position(PTR_DAT_000803d4, number);\\n                }\\n            }\\n        }\\n    }\\n    else\\n    {\\n        calculate_positions();\\n        calculate_sum_of_inputs(PTR_DAT_000803c8, PTR_s_error_000803c4);\\n    }\\n}",
            "called": [
                "FUN_0008117a",
                "FUN_00081014",
                "FUN_000815b8",
                "FUN_000810c4",
                "FUN_0008145c",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_00081214",
                "FUN_00081624",
                "FUN_00081248",
                "FUN_00081560",
                "thunk_FUN_0008113a",
                "FUN_00081276",
                "FUN_000815de",
                "FUN_00080f08",
                "FUN_000806f8",
                "FUN_00081472"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "control_system_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "update_param_00080d6a",
                "param_1": "base_address",
                "param_2": "new_value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + 0x28)"
            },
            "code": "void update_param_00080d6a(int base_address, int new_value) {\n  *(int *)(base_address + 0x28) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_param_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "set_flags_and_values_000813dc",
                "param_1": "device_id",
                "param_2": "divisor",
                "puVar1": "device_data_ptr",
                "iVar2": "reg_offset",
                "puVar3": "device_ptr"
            },
            "code": "void set_flags_and_values_000813dc(int device_id, uint32_t divisor) {\n    uint32_t *device_ptr;\n    int reg_offset;\n    uint32_t *reg_ptr;\n\n    check_and_set_bit(DEVICE_FLAG_OFFSET + device_id);\n    device_ptr = *(uint32_t **)(DEVICE_DATA_OFFSET + device_id);\n    device_ptr[DEVICE_REG_48_OFFSET] = 0x202;\n    *device_ptr = 0xac;\n    device_ptr[1] = 0x800;\n    device_ptr[8] = *DAT_000813d4 / divisor >> 4;\n    device_ptr[3] = 0xffffffff;\n    device_ptr[2] = 0x61;\n    reg_offset = (uint32_t)(int32_t)(int8_t)*(int8_t *)(device_id + DEVICE_REG_OFFSET);\n    reg_ptr = (uint32_t *)(DEVICE_REGS_OFFSET + reg_offset * 4);\n    *reg_ptr = 1 << (uint32_t)(*(int8_t *)(device_id + DEVICE_BIT_OFFSET) & 0x1f);\n    reg_offset = *(int32_t *)(device_id + DEVICE_REG1_OFFSET);\n    *(uint32_t *)(reg_offset + DEVICE_REG_84_OFFSET) = 0;\n    *(uint32_t *)(reg_offset + DEVICE_REG_80_OFFSET) = 0;\n    reg_offset = *(int32_t *)(device_id + DEVICE_REG2_OFFSET);\n    *(uint32_t *)(reg_offset + DEVICE_REG_84_OFFSET) = 0;\n    *(uint32_t *)(reg_offset + DEVICE_REG_80_OFFSET) = 0;\n    *device_ptr = 0x50;\n}",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "set_params_at_indices_00080a0a",
                "param_1": "param_array",
                "param_2": "value",
                "param_3": "index_1",
                "param_4": "index_2",
                "param_5": "index_3",
                "param_1[0x11]": "param_array[17]",
                "param_1[0x18]": "param_array[24]",
                "param_1[0x19]": "param_array[25]",
                "param_1[0x15]": "param_array[21]",
                "param_1[0x14]": "param_array[20]",
                "param_1[0xd]": "param_array[13]",
                "param_1[0xc]": "param_array[12]",
                "param_1[4]": "param_array[4]",
                "*param_1": "*param_array"
            },
            "code": "void set_params_at_indices_00080a0a(int *param_array, int value, int index_1, int index_2, int index_3)\n{\n  param_array[17] = value;\n  if (index_3 == 0) {\n    param_array[24] = value;\n  }\n  else {\n    param_array[25] = value;\n  }\n  if (index_2 == 0) {\n    param_array[21] = value;\n  }\n  else {\n    param_array[20] = value;\n  }\n  if (index_1 == 0) {\n    param_array[13] = value;\n  }\n  else {\n    param_array[12] = value;\n  }\n  param_array[4] = value;\n  *param_array = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "set_params_at_indices_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channel_number",
                "param_2": "num_channels",
                "param_3": "channel_config",
                "uVar3": "channel_data",
                "PTR_s_TC_Configure_00080b58": "default_tc_config",
                "DAT_00080b60": "tc_configure_fn",
                "PTR_s____source_tc_c_00080b54": "tc_source",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c": "sizeof(TC_CHANNEL)",
                "iVar1": "channel_offset",
                "iVar2": "channel_address"
            },
            "code": "void configure_tc_channel_00080b2c(uint32_t channel_number, uint32_t num_channels, char *channel_config) {\n  uint64_t channel_data = ((uint64_t)num_channels << 32) | channel_number;\n  if (num_channels > 2) {\n    channel_config = PTR_s_TC_Configure_00080b58;\n    channel_data = (*DAT_00080b60)(PTR_s____source_tc_c_00080b54, 0x40, PTR_s_TC_Configure_00080b58, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c);\n  }\n  uint32_t channel_offset = (uint32_t)(channel_data >> 32) * 0x40;\n  uint32_t channel_address = (uint32_t)channel_data + channel_offset;\n  *(uint32_t *)(channel_address) = 2;\n  *(uint32_t *)(channel_address + 0x28) = 0xffffffff;\n  *(char **)(channel_address + 4) = channel_config;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "configure_tc_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_and_process_data_00080774",
                "puVar1": "data_ptr",
                "puVar2": "ptr",
                "iVar3": "data_1",
                "iVar4": "data_2",
                "iVar5": "data_3",
                "iVar6": "data_4",
                "iVar7": "i",
                "iVar8": "index"
            },
            "code": "void initialize_and_process_data_00080774(void)\n{\n  uint *data_ptr = data_array;\n  initialize_system();\n  uint *ptr = function_pointers_array;\n  uint data_value = *data_ptr / 1000 - 1;\n  *(undefined *)(data_array + 0x23) = 0xf0;\n  *(ptr+2) = 0;\n  *ptr = 7;\n  execute_functions_from_pointers();\n  int i = 0;\n  do {\n    int index = i + 1;\n    process_permission(i,0);\n    int data_1 = data_array_2;\n    int data_2 = data_array_3;\n    int data_3 = data_array_4;\n    int data_4 = data_array_5;\n    i = index;\n  } while (index != 0x4f);\n  *(uint *)(data_array_4 + 0xa0) = 0xffffffff;\n  *(uint *)(data_array_3 + 0xa0) = 0xffffffff;\n  *(uint *)(data_array_2 + 0xa0) = 0xffffffff;\n  *(uint *)(data_array_5 + 0xa0) = 0xffffffff;\n  process_data(data_3,1,0x300,0);\n  process_permission(0,1);\n  process_data(data_3,1,0xc00,0);\n  process_data(data_3,1,0x3000,0);\n  process_data(data_4,2,0x30,0);\n  process_data(data_2,1,0xc00,0);\n  process_data(data_3,1,3,0);\n  process_data(data_2,1,0xc000,0);\n  check_and_set_bit(0x25);\n  find_match_index(data_array_6,*data_ptr,data_array_7,0xc);\n  update_data(data_array_6,0,0x300000,1);\n  set_bit_in_register_at_offset(data_array_6,0,0);\n  update_param(data_array_6,0xffffffff);\n  set_default_value_to_ffff(data_array_6);\n  return;\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00081014",
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00080d62",
                "FUN_00080aa8",
                "FUN_00080b98",
                "FUN_00080d6a",
                "FUN_00080d30",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "return_zero_00080ec2"
            },
            "code": "int return_zero_00080ec2(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "return_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_buffer_00083888",
                "param_1": "buffer_ptr",
                "puVar1": "ptr_1",
                "uVar2": "value_2",
                "puVar3": "ptr_3",
                "puVar4": "ptr_4",
                "puVar5": "buffer_ptr_1",
                "puVar6": "buffer_ptr_2",
                "PTR_LAB_0008387c_1_00083968": "BUFFER_PTR_2_VALUE",
                "DAT_00083970": "BUFFER_SIZE_VALUE",
                "PTR_FUN_00084220_1_0008396c": "BUFFER_PTR_1_VALUE",
                "PTR_LAB_0008429c_1_00083978": "BUFFER_PTR_4_VALUE",
                "PTR_FUN_0008427c_1_00083974": "BUFFER_PTR_3_VALUE",
                "BUFFER_FLAG_OFFSET": "0x38",
                "BUFFER_PTR_1_OFFSET": "0x4",
                "BUFFER_PTR_2_OFFSET": "0x3c",
                "BUFFER_SIZE_OFFSET": "0x2e4",
                "BUFFER_DATA_OFFSET": "0x2e8",
                "BUFFER_PTR_3_OFFSET": "0x2e0",
                "BUFFER_PTR_1_OFFSET_3": "0x3",
                "BUFFER_PTR_1_OFFSET_1": "0x1",
                "BUFFER_PTR_1_OFFSET_2": "0x2",
                "BUFFER_PTR_1_OFFSET_25": "0x19",
                "BUFFER_PTR_1_OFFSET_14": "0xe",
                "BUFFER_PTR_1_OFFSET_4": "0x4",
                "BUFFER_PTR_1_OFFSET_5": "0x5",
                "BUFFER_PTR_1_OFFSET_6": "0x6",
                "BUFFER_PTR_1_OFFSET_23": "0x17",
                "BUFFER_PTR_1_OFFSET_7": "0x7",
                "BUFFER_PTR_1_OFFSET_8": "0x8",
                "BUFFER_PTR_1_OFFSET_9": "0x9",
                "BUFFER_PTR_1_OFFSET_10": "0xa",
                "BUFFER_PTR_1_OFFSET_11": "0xb",
                "BUFFER_PTR_2_OFFSET_14": "0xe",
                "BUFFER_PTR_2_OFFSET_3": "0x3",
                "BUFFER_PTR_2_OFFSET_1": "0x1",
                "BUFFER_PTR_2_OFFSET_2": "0x2",
                "BUFFER_PTR_2_OFFSET_25": "0x19",
                "BUFFER_PTR_2_OFFSET_4": "0x4",
                "BUFFER_PTR_2_OFFSET_5": "0x5",
                "BUFFER_PTR_2_OFFSET_6": "0x6",
                "BUFFER_PTR_2_OFFSET_23": "0x17",
                "BUFFER_PTR_2_OFFSET_7": "0x7",
                "BUFFER_PTR_2_OFFSET_8": "0x8",
                "BUFFER_PTR_2_OFFSET_9": "0x9",
                "BUFFER_PTR_2_OFFSET_10": "0xa",
                "BUFFER_PTR_2_OFFSET_11": "0xb",
                "BUFFER_PTR_3_OFFSET_3": "0x3",
                "BUFFER_PTR_3_OFFSET_14": "0xe",
                "BUFFER_PTR_3_OFFSET_1": "0x1",
                "BUFFER_PTR_3_OFFSET_2": "0x2",
                "BUFFER_PTR_3_OFFSET_25": "0x19",
                "BUFFER_PTR_3_OFFSET_4": "0x4",
                "BUFFER_PTR_3_OFFSET_5": "0x5",
                "BUFFER_PTR_3_OFFSET_6": "0x6",
                "BUFFER_PTR_3_OFFSET_23": "0x17",
                "BUFFER_PTR_3_OFFSET_7": "0x7",
                "BUFFER_PTR_3_OFFSET_8": "0x8",
                "BUFFER_PTR_3_OFFSET_9": "0x9",
                "BUFFER_PTR_3_OFFSET_10": "0xa",
                "BUFFER_PTR_3_OFFSET_11": "0xb",
                "fill_buffer_with_value_00081f00": "fill_buffer_with_value"
            },
            "code": "void initialize_buffer_00083888(int buffer_ptr)\n{\n  if (*(int *)(buffer_ptr + BUFFER_FLAG_OFFSET) == 0) {\n    undefined4 *buffer_ptr_1 = *(undefined4 **)(buffer_ptr + BUFFER_PTR_1_OFFSET);\n    *(undefined **)(buffer_ptr + BUFFER_PTR_2_OFFSET) = PTR_LAB_0008387c_1_00083968;\n    *(undefined4 *)(buffer_ptr + BUFFER_SIZE_OFFSET) = DAT_00083970;\n    *(int *)(buffer_ptr + BUFFER_DATA_OFFSET) = buffer_ptr + BUFFER_DATA_OFFSET_VALUE;\n    *(undefined4 *)(buffer_ptr + BUFFER_PTR_3_OFFSET) = PTR_process_return_value_and_set_flag_0008427c_1_00083974;\n    *(undefined2 *)(buffer_ptr_1 + BUFFER_PTR_1_OFFSET_3) = BUFFER_PTR_1_OFFSET_3_VALUE;\n    *buffer_ptr_1 = PTR_process_data_00084220_1_0008396c;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_1] = BUFFER_PTR_1_OFFSET_1_VALUE;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_2] = BUFFER_PTR_1_OFFSET_2_VALUE;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_25] = BUFFER_PTR_1_OFFSET_25_VALUE;\n    *(undefined2 *)((int)buffer_ptr_1 + BUFFER_PTR_1_OFFSET_14) = BUFFER_PTR_1_OFFSET_14_VALUE;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_4] = BUFFER_PTR_1_OFFSET_4_VALUE;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_5] = BUFFER_PTR_1_OFFSET_5_VALUE;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_6] = BUFFER_PTR_1_OFFSET_6_VALUE;\n    fill_buffer_with_value(buffer_ptr_1 + BUFFER_PTR_1_OFFSET_23, 0, 8);\n    undefined *ptr_4 = PTR_LAB_0008429c_1_00083978;\n    undefined *ptr_3 = PTR_process_return_value_and_set_flag_0008427c_1_00083974;\n    undefined4 value_2 = BUFFER_VALUE_2;\n    undefined *ptr_1 = PTR_process_data_00084220_1_0008396c;\n    undefined4 *buffer_ptr_2 = *(undefined4 **)(buffer_ptr + BUFFER_PTR_2_OFFSET);\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_7] = buffer_ptr_1;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_8] = ptr_1;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_9] = value_2;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_10] = ptr_3;\n    buffer_ptr_1[BUFFER_PTR_1_OFFSET_11] = ptr_4;\n    *(undefined2 *)((int)buffer_ptr_2 + BUFFER_PTR_2_OFFSET_14) = BUFFER_PTR_2_OFFSET_14_VALUE;\n    *(undefined2 *)(buffer_ptr_2 + BUFFER_PTR_2_OFFSET_3) = BUFFER_PTR_2_OFFSET_3_VALUE;\n    *buffer_ptr_2 = PTR_LAB_0008387c_1_00083968;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_1] = BUFFER_PTR_2_OFFSET_1_VALUE;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_2] = BUFFER_PTR_2_OFFSET_2_VALUE;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_25] = BUFFER_PTR_2_OFFSET_25_VALUE;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_4] = BUFFER_PTR_2_OFFSET_4_VALUE;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_5] = BUFFER_PTR_2_OFFSET_5_VALUE;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_6] = BUFFER_PTR_2_OFFSET_6_VALUE;\n    fill_buffer_with_value(buffer_ptr_2 + BUFFER_PTR_2_OFFSET_23, 0, 8);\n    undefined4 *buffer_ptr_3 = *(undefined4 **)(buffer_ptr + BUFFER_PTR_3_OFFSET);\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_7] = buffer_ptr_2;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_8] = ptr_1;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_9] = value_2;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_10] = ptr_3;\n    buffer_ptr_2[BUFFER_PTR_2_OFFSET_11] = ptr_4;\n    *(undefined2 *)(buffer_ptr_3 + BUFFER_PTR_3_OFFSET_3) = BUFFER_PTR_3_OFFSET_3_VALUE;\n    *(undefined2 *)((int)buffer_ptr_3 + BUFFER_PTR_3_OFFSET_14) = BUFFER_PTR_3_OFFSET_14_VALUE;\n    *buffer_ptr_3 = PTR_process_return_value_and_set_flag_0008427c_1_00083974;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_1] = BUFFER_PTR_3_OFFSET_1_VALUE;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_2] = BUFFER_PTR_3_OFFSET_2_VALUE;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_25] = BUFFER_PTR_3_OFFSET_25_VALUE;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_4] = BUFFER_PTR_3_OFFSET_4_VALUE;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_5] = BUFFER_PTR_3_OFFSET_5_VALUE;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_6] = BUFFER_PTR_3_OFFSET_6_VALUE;\n    fill_buffer_with_value(buffer_ptr_3 + BUFFER_PTR_3_OFFSET_23, 0, 8);\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_7] = buffer_ptr_3;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_8] = ptr_1;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_9] = value_2;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_10] = ptr_3;\n    buffer_ptr_3[BUFFER_PTR_3_OFFSET_11] = ptr_4;\n    *(int *)(buffer_ptr + BUFFER_FLAG_OFFSET) = 1;\n  }\n}\n",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_0008289c",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initialize_values_00081348",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "puVar1": "PTR_PTR_FUNCTION_1_2"
            },
            "code": "void initialize_values_00081348(uint32_t *array, uint32_t value1, uint8_t value2, uint32_t value3, uint32_t value4, uint32_t value5) {\n  array[0] = (uint32_t*) PTR_PTR_FUNCTION_1_2;\n  array[1] = 0;\n  array[2] = 1000;\n  array[3] = value3;\n  array[4] = value4;\n  array[5] = value5;\n  array[6] = value1;\n  *(uint8_t *)(array + 7) = value2;\n  array[8] = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "imported": false,
            "current_name": "initialize_values_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "find_matching_bits_00081624",
                "param_1": "offset",
                "param_2": "factor",
                "param_3": "mask",
                "param_4": "param_4",
                "puVar1": "data_ptr",
                "iVar2": "result",
                "uVar3": "mask_value"
            },
            "code": "int find_matching_bits_00081624(uint *data, int offset, uint mask, int factor, undefined4 param_4)\n{\n  uint *data_ptr = DAT_0008167c;\n  uint *offset_ptr = PTR_DAT_00081678;\n  uint *mask_ptr = offset_ptr + offset * 0x1c + 4;\n  uint mask_value = *mask_ptr;\n  if (factor == 0)\n  {\n    factor = 1;\n  }\n  int result = find_matching_bits_00081624_00081684(*(int *)(offset_ptr + offset * 0x1c) + 0x3c, mask_value, mask, ((*data / DAT_00081680) * factor) / 0x12, param_4);\n  if (result != 0)\n  {\n    result = (int)((ulonglong)(result * 18000 + 16000) / ((ulonglong)*data_ptr / 1000));\n  }\n  return result;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "find_matching_bits_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "reverse_copy_00080ec8",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index"
            },
            "code": "uint reverse_copy_00080ec8(uint8_t* dest, const uint8_t* src, uint size) {\n  int index;\n  for (index = 0; index < (int)size; index++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(src + index);\n  }\n  return size & ~((int)size >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "reverse_copy_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "calculate_sum_of_input_and_converted_number_0008117a",
                "param_1": "input",
                "iVar1": "converted_number",
                "iVar2": "processed_input"
            },
            "code": "int calculate_sum_of_input_and_converted_number_0008117a(undefined4 input)\n{\n  int converted_number = convert_number_to_string();\n  int processed_input = process_input(input);\n  return processed_input + converted_number;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_input_and_converted_number_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "check_and_process_data_000801e0",
                "param_1": "flag_value",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "set_flags_and_values_000813dc": "set_flags_and_values",
                "process_data_00080f0c": "process_data",
                "process_data_000806a0": "process_data",
                "calculate_positions_00080164": "calculate_positions",
                "do_nothing_00080f08": "do_nothing",
                "PTR_DAT_00080244": "PTR_DAT_00080244",
                "PTR_DAT_00080248": "PTR_DAT_00080248",
                "PTR_DAT_0008024c": "PTR_DAT_0008024c",
                "PTR_DAT_00080160": "PTR_DAT_00080160",
                "software_interrupt": "software_interrupt"
            },
            "code": "int check_and_process_data_000801e0(uint32_t flag_value, uint32_t param_3, uint32_t param_4)\n{\n  set_flags_and_values(PTR_DAT_00080244, flag_value, param_3, param_4, param_4);\n  process_data(0xd, 1);\n  process_data(6, 1);\n  process_data(0x39, 0);\n  process_data(4, 0);\n  process_data(3, 0);\n  process_data(2, 0);\n  process_data(PTR_DAT_00080248, 5);\n  process_data(PTR_DAT_0008024c, 6);\n  calculate_positions();\n  do_nothing(1000);\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_and_process_data_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "fill_buffer_with_value_000811b0",
                "param_1": "buffer_address",
                "PTR_00081f00": "value",
                "DAT_00000080": "buffer_size",
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + buffer_size)",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + buffer_size + 4)"
            },
            "code": "int fill_buffer_with_value_000811b0(int buffer_address, int PTR_00081f00, int DAT_00000080) {\n    fill_buffer_with_value_000811b0(buffer_address, PTR_00081f00, DAT_00000080);\n    *(int *)(buffer_address + DAT_00000080) = 0;\n    *(int *)(buffer_address + DAT_00000080 + 4) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_value_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "call_func_with_data_000817f0",
                "param_1": "param",
                "FUNC_00081810": "func",
                "*DAT_000817fc": "data"
            },
            "code": "void call_func_with_*call_func_with_data_000817f0(void* *call_func_with_data_000817f0, int param){\n  func(**call_func_with_data_000817f0, param);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "call_func_with_data_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_position_on_line_0008145c",
                "param_1": "start_pos",
                "param_2": "end_pos",
                "param_3": "start_val",
                "param_4": "end_val",
                "param_5": "target_pos",
                "uint": "unsigned int"
            },
            "code": "int calculate_position_on_line_0008145c(int start_pos, int end_pos, int start_val, int end_val, int target_pos)\n{\n    int position_on_line = ((start_pos - end_pos) * (target_pos - end_val)) / (start_val - end_val) + end_val;\n    return position_on_line;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_position_on_line_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_00080eba() {\n    int one = 1;\n    return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "return_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00081e34(piVar9,param_2);\n      }\n      allocate_memory_block_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_block_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000811ac)();\n  }\n  *DAT_000811a8 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "update_data_000809e4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "0x11": "17",
                "0x19": "25",
                "0x18": "24",
                "0x20": "32",
                "8": "8",
                "9": "9",
                "0x1f": "31",
                "10": "0xA",
                "0x1e": "30",
                "0x1c": "28"
            },
            "code": "void update_data_000809e4(uint32_t *data, uint32_t value, uint32_t flags) {\n    bool is_negative = (int32_t)(flags << 31) < 0;\n    data[17] = value;\n    if (is_negative) {\n        data[25] = value;\n    }\n    if (!is_negative) {\n        data[24] = value;\n    }\n    bool is_bit_set = (flags & 0xA) != 0;\n    if (is_bit_set) {\n        data[8] = value;\n    }\n    if (!is_bit_set) {\n        data[9] = value;\n    }\n    if (((int32_t)(flags << 30) < 0) || ((int32_t)(flags << 28) < 0)) {\n        data[32] = value;\n    }\n    data[5] = value;\n    *data = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_data_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "return_zero_00080ebe"
            },
            "code": "int return_zero_00080ebe(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "return_zero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "get_value_from_pointer_thunk_000816d8",
                "undefined4": "int",
                "PTR_DAT_000816e0": "value_pointer",
                "*(undefined4 *)PTR_DAT_000816e0": "*value_pointer",
                "return *(undefined4 *)PTR_DAT_000816e0;": "return value;"
            },
            "code": "int get_value_from_pointer_thunk_000816d8() {\n    int* PTR_DAT_000816e0 = (int*)PTR_DAT_000816e0;\n    int value = *(undefined4 *)PTR_DAT_000816e0;\n    return *(undefined4 *)PTR_DAT_000816e0;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_value_from_pointer_000816d8",
                "PTR_DAT_000816e0": "ptr_to_value",
                "*": "value"
            },
            "code": "int get_value_from_pointer_000816d8() {\n    int* PTR_DAT_000816e0 = PTR_DAT_000816e0;\n    int value = *PTR_DAT_000816e0;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_byte_array_000815b8",
                "param_1": "byte_array_ptr",
                "param_2": "byte_ptr",
                "uVar1": "byte_array_length",
                "iVar2": "result"
            },
            "code": "int check_byte_array_000815b8(byte **byte_array_ptr, byte *byte_ptr) {\n  uint byte_array_length;\n  int result;\n  if (byte_array_ptr[2] == NULL) {\n    if (byte_ptr == NULL) {\n      return 1;\n    }\n  } else {\n    if (byte_ptr != NULL) {\n      byte_array_length = get_byte_array_length(*byte_array_ptr);\n      goto LAB_000815d4;\n    }\n    byte_ptr = *byte_array_ptr;\n  }\n  byte_array_length = (uint)*byte_ptr;\n  LAB_000815d4:\n  result = 1 - byte_array_length;\n  if (byte_array_length > 1) {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_byte_array_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "process_data_00084220",
                "param_1": "data",
                "param_2": "data_ptr",
                "iVar1": "result"
            },
            "code": "void process_data_00084220(int data, int* data_ptr) {\n    int result = process_result(data, (int)*(short *)(data_ptr + 0xe));\n    \n    if (result >= 0) {\n        *(int *)(data_ptr + 0x50) += result;\n    } else {\n        *(ushort *)(data_ptr + 0xc) &= 0xefff;\n    }\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "allocate_memory_00081472",
                "*param_1": "*memory_block_size",
                "allocate_memory_block_00081800": "allocate_memory_block"
            },
            "code": "void allocate_memory_00081472(unsigned int *memory_block_size){\n\tmalloc(*memory_block_size);\n}\n\nunsigned int *allocate_memory_00081472(unsigned int *memory_block_size){\n\tallocate_memory_00081472(memory_block_size);\n\treturn memory_block_size;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "process_data_000841e4_000836ec",
                "exit_with_status_00080eec": "exit_with_status",
                "PTR_DAT_000836d0": "data_ptr",
                "call_func_with_data_000817f0": "call_func_with_data",
                "DAT_000836d4": "some_data",
                "data_array": "data_array",
                "data_count": "data_count",
                "status": "status"
            },
            "code": "void process_data_000841e4_000836ec(void)\n{\n  int status = 1;\n  int PTR_DAT_000836d0 = *(int *)PTR_DAT_000836d0;\n  undefined4 *data_array = *(undefined4 **)(PTR_DAT_000836d0 + 0x148);\n  if (data_array == (undefined4 *)0x0) {\n    data_array = (undefined4 *)(PTR_DAT_000836d0 + 0x14c);\n    *(undefined4 **)(PTR_DAT_000836d0 + 0x148) = data_array;\n  }\n  int data_count = data_array[1];\n  if (data_count > 31) {\n    if ((DAT_000836d4 == 0) ||\n       (call_func_with_data_000817f0(400) == (undefined4 *)0x0)) {\n      exit_with_status_00080eec(1);\n    }\n    *data_array = *(undefined4 *)(PTR_DAT_000836d0 + 0x148);\n    data_array[1] = 0;\n    data_count = 0;\n    *(undefined4 **)(PTR_DAT_000836d0 + 0x148) = data_array;\n    data_array[0x62] = 0;\n    data_array[99] = 0;\n  }\n  data_array[1] = data_count + 1;\n  data_array[data_count + 2] = status;\n  process_data_000841e4_000836ec(0);\n}",
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_data_000841e4_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "call_function_with_params_00081750",
                "param_1": "function_pointer",
                "param_2": "param1",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_8": "local_param3",
                "uStack_4": "local_param4"
            },
            "code": "void call_function_with_params_00081750(void* function_pointer, int param1, int param2, int* param3, int* param4)\n{\n  int local_param3 = *param3;\n  int local_param4 = *param4;\n  function_pointer(param1, param2, &local_param3);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "call_function_with_params_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "count_bytes_until_null_00082688",
                "param_1": "address",
                "puVar2": "address_ptr",
                "iVar1": "byte_count",
                "uVar3": "current_word",
                "bVar4": "is_null_byte"
            },
            "code": "int count_bytes_until_null_00082688(uint address)\n{\n    int byte_count = 0;\n    uint *address_ptr = (uint *)(address & 0xfffffffc);\n    int alignment_offset = -(address & 3);\n    uint current_word = *address_ptr;\n    if ((address & 3) != 0) {\n        current_word = current_word | 0xffffffffU >> ((alignment_offset + 4U & 0x1f) << 3);\n    }\n    while (address_ptr++, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n        byte_count += 4;\n        current_word = *address_ptr;\n    }\n    if ((current_word & 0xff) == 0) {\n        byte_count += 1;\n    } else if ((current_word & 0xff00) == 0) {\n        byte_count += 2;\n    } else if ((current_word & 0xff0000) == 0) {\n        byte_count += 3;\n    } else {\n        byte_count += 4;\n    }\n    return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "process_result_00084508",
                "param_1": "result_ptr",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_result_00084508(int *result_ptr, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *data_ptr = PTR_DAT_0008452c;\n  *(undefined4 *)data_ptr = 0;\n  int result = return_zero_00080ec2(arg2, arg3, arg4);\n  if ((result == -1) && (*(int *)data_ptr != 0)) {\n    *result_ptr = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "process_result_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flag",
                "DAT_00080a88": "data_callback",
                "DAT_00080a8c": "data_analyze",
                "DAT_00080a90": "data_process",
                "bVar1": "is_flag_negative"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, uint32_t data_flag) {\n  bool is_flag_negative = (int)(data_flag << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*DAT_00080a88)(data_ptr, data_type, data_value);\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_flag_negative) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_flag_negative) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*DAT_00080a8c)(data_ptr, data_value, data_flag, DAT_00080a8c, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*DAT_00080a90)(data_ptr, data_value, data_type == 5, (data_flag << 0x1d) >> 0x1f, data_flag & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000809e4",
                "FUN_00080a0a",
                "FUN_000809be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_data_stores_0008089c",
                "param_1": "undefined_1",
                "param_2": "undefined_2",
                "param_3": "undefined_3",
                "puVar1": "buffer_1",
                "puVar2": "buffer_2",
                "puVar3": "buffer_3",
                "puVar4": "buffer_4",
                "puVar5": "buffer_5",
                "puVar6": "buffer_6"
            },
            "code": "void initialize_data_stores_0008089c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *buffer_1 = PTR_DAT_00080930;\n  undefined *buffer_2 = PTR_DAT_00080934;\n  undefined *buffer_3 = PTR_DAT_0008093c;\n  undefined *buffer_4 = PTR_DAT_00080948;\n  undefined *buffer_5 = PTR_DAT_0008094c;\n  undefined *buffer_6 = PTR_DAT_00080944;\n  undefined *buffer_7 = PTR_DAT_00080968;\n  undefined *buffer_8 = PTR_DAT_0008096c;\n  fill_buffer_with_value_000811b0(buffer_1);\n  fill_buffer_with_value_000811b0(buffer_2);\n  fill_buffer_with_value_000811b0(buffer_3);\n  fill_buffer_with_value_000811b0(buffer_4);\n  fill_buffer_with_value_000811b0(buffer_5);\n  fill_buffer_with_value_000811b0(buffer_6);\n  fill_buffer_with_value_000811b0(buffer_7);\n  fill_buffer_with_value_000811b0(buffer_8);\n  initialize_pointer_data_store_00081438_00081438(PTR_DAT_00080954, DAT_00080950, 17, 17, buffer_7, buffer_8);\n  initialize_pointer_data_store_00081438_00081438(PTR_DAT_0008095c, DAT_00080958, 18, 18, buffer_3, buffer_4);\n  initialize_pointer_data_store_00081438_00081438(PTR_DAT_00080964, DAT_00080960, 20, 20, buffer_6, buffer_5);\n  initialize_values_00081348(PTR_DAT_00080940, DAT_00080938, 8, 8, buffer_1, buffer_2, param_3);\n  return;\n}",
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_stores_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "process_input_000810a6",
                "param_1": "input_buffer",
                "param_2": "buffer_size",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "num_bytes",
                "**(code **)(*param_1 + 4)": "*(void (**)(int *, int, undefined4, void *, undefined4))(*input_buffer + 4)",
                "*(code **)(*param_1 + 4)": "*(void (**)(int *, int, undefined4, void *, undefined4))(*input_buffer + 4)",
                "DAT_00082688": "count_bytes_until_null_00082688",
                "PTR_000824b4": "func_ptr"
            },
            "code": "void process_input_000810a6(int *input_buffer, int buffer_size, undefined4 arg_3, undefined4 arg_4)\n{\n    undefined4 num_bytes;\n    if (buffer_size != 0)\n    {\n        num_bytes = DAT_00082688(buffer_size);\n        void (*PTR_000824b4)(int *, int, undefined4, void *, undefined4) = *(void (**)(int *, int, undefined4, void *, undefined4))(*input_buffer + 4);\n        PTR_000824b4(input_buffer, buffer_size, num_bytes, PTR_000824b4, arg_4);\n    }\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810e8",
                "FUN_000810fc"
            ],
            "imported": false,
            "current_name": "process_input_000810a6"
        }
    },
    "used_tokens": 111747,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_00080eb0",
            "FUN_0008439c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_000815de",
            "FUN_0008400c",
            "FUN_00080c20",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_00080d3e",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080d58",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_0008458c",
            "FUN_000811ca",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080d6a",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080ec2",
            "FUN_00081348",
            "FUN_00080ec8",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00080a30"
        ],
        [
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000803fc",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000841e4",
            "FUN_000844bc",
            "FUN_00081438",
            "FUN_0008434c",
            "FUN_00081496",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000813dc",
            "FUN_00083888",
            "FUN_00081624",
            "FUN_000811b0",
            "FUN_00084508",
            "FUN_000810a6"
        ],
        [
            "FUN_00083a74",
            "FUN_0008427c",
            "FUN_00084018",
            "FUN_000810d8",
            "FUN_000806a0",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081014",
            "FUN_000814ae",
            "FUN_000810c4",
            "FUN_000810fc",
            "FUN_00084220",
            "FUN_000836ec",
            "FUN_0008089c"
        ],
        [
            "FUN_00083b10",
            "FUN_0008159e",
            "FUN_0008117a"
        ],
        [
            "FUN_00083850",
            "FUN_0008356c",
            "FUN_00081800"
        ],
        [
            "FUN_000842a4",
            "FUN_000834f0",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_00084484",
            "FUN_00081472"
        ],
        [
            "FUN_00081560",
            "FUN_000839b4",
            "FUN_000814d0"
        ],
        [
            "FUN_000814f6",
            "FUN_00082824"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}